__n128 ABMServerRegistryBuilder::ABMServerRegistryBuilder(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void ABMServerRegistryBuilder::~ABMServerRegistryBuilder(ABMServerRegistryBuilder *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ABMServerRegistryBuilder::setupQMIServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  _QWORD **RegistryModel;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  RegistryModel = (_QWORD **)Registry::getRegistryModel(*a2);
  v6 = *RegistryModel;
  if (!**RegistryModel)
  {
    v7 = *a3;
    if (*a3)
    {
      v8 = a3[1];
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = (std::__shared_weak_count *)v6[1];
      *v6 = v7;
      v6[1] = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 8))(&v21);
      v14 = v21;
      v21 = 0uLL;
      v15 = (std::__shared_weak_count *)v6[1];
      *(_OWORD *)v6 = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void ABMServerRegistryBuilder::setupRouterServer(uint64_t a1, Registry **a2, uint64_t *a3)
{
  uint64_t RegistryModel;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;

  RegistryModel = Registry::getRegistryModel(*a2);
  v6 = *(_QWORD *)RegistryModel;
  if (!*(_QWORD *)(*(_QWORD *)RegistryModel + 16))
  {
    v7 = *a3;
    if (*a3)
    {
      v8 = a3[1];
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = *(std::__shared_weak_count **)(v6 + 24);
      *(_QWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v6 + 24) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a1 + 16))(&v21);
      v14 = v21;
      v21 = 0uLL;
      v15 = *(std::__shared_weak_count **)(v6 + 24);
      *(_OWORD *)(v6 + 16) = v14;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791D1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791D1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ABMServerRegistryBuilder>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t support::fs::toString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((_DWORD)result == 1)
  {
    a2[23] = 9;
    strcpy(a2, "_wireless");
  }
  else if ((_DWORD)result)
  {
    a2[23] = 0;
    *a2 = 0;
  }
  else
  {
    a2[23] = 6;
    strcpy(a2, "mobile");
  }
  return result;
}

uint64_t support::fs::updateOwner(const char *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  timespec v6;
  size_t v7;
  __darwin_ino64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v13;
  stat *v14;
  uint64_t updated;
  void *v16;
  const char *v17;
  DIR *v18;
  DIR *v19;
  dirent *v20;
  char *v21;
  const std::string::value_type **v22;
  char v23;
  __int128 v24;
  int v25;
  size_t v26;
  unint64_t v27;
  char *p_dst;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  std::string *v32;
  std::string::size_type size;
  std::string *v34;
  __int128 v35;
  std::string::size_type v36;
  std::string *v37;
  std::string *v38;
  timespec v39;
  std::string *v40;
  std::string *p_p;
  size_t v42;
  __darwin_ino64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  int st_gid_high;
  void *v48;
  stat *v49;
  void *v50;
  std::string *v51;
  DIR *v52;
  DIR *v53;
  dirent *v54;
  void **v55;
  char *v57;
  std::string v58;
  std::string __p;
  std::string v60;
  void *v61;
  char *v62;
  uint64_t v63;
  stat __dst;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v6;
  *(timespec *)__dst.st_qspare = v6;
  __dst.st_birthtimespec = v6;
  *(timespec *)&__dst.st_size = v6;
  __dst.st_mtimespec = v6;
  __dst.st_ctimespec = v6;
  *(timespec *)&__dst.st_uid = v6;
  __dst.st_atimespec = v6;
  *(timespec *)&__dst.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &__dst))
  {
    v17 = v5[23] >= 0 ? v5 : *(const char **)v5;
    v18 = opendir(v17);
    if (v18)
    {
      v19 = v18;
      v20 = readdir(v18);
      closedir(v19);
      if (v20)
      {
        v61 = 0;
        v62 = 0;
        v63 = 0;
        support::fs::readDir(v5, (uint64_t)&v61);
        v21 = (char *)v61;
        v57 = v62;
        if (v61 == v62)
        {
          updated = 0;
          if (v61)
            goto LABEL_105;
          return updated;
        }
        v22 = (const std::string::value_type **)((char *)v61 + 24);
        while (1)
        {
          memset(&v60, 170, sizeof(v60));
          if (*((char *)v22 - 1) < 0)
          {
            std::string::__init_copy_ctor_external(&v60, *(v22 - 3), (std::string::size_type)*(v22 - 2));
          }
          else
          {
            v24 = *(_OWORD *)(v22 - 3);
            v60.__r_.__value_.__r.__words[2] = (std::string::size_type)*(v22 - 1);
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v24;
          }
          memset(&__p, 170, sizeof(__p));
          v25 = v5[23];
          if (v25 >= 0)
            v26 = *((unsigned __int8 *)v5 + 23);
          else
            v26 = *((_QWORD *)v5 + 1);
          v27 = v26 + 1;
          memset(&__dst, 170, 24);
          if (v26 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v27 >= 0x17)
          {
            v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v29 = v27 | 7;
            v30 = v29 + 1;
            p_dst = (char *)operator new(v29 + 1);
            __dst.st_ino = v26 + 1;
            *(_QWORD *)&__dst.st_uid = v30 | 0x8000000000000000;
            *(_QWORD *)&__dst.st_dev = p_dst;
          }
          else
          {
            memset(&__dst, 0, 24);
            p_dst = (char *)&__dst;
            HIBYTE(__dst.st_gid) = v26 + 1;
            if (!v26)
              goto LABEL_47;
          }
          if (v25 >= 0)
            v31 = v5;
          else
            v31 = *(const char **)v5;
          memmove(p_dst, v31, v26);
LABEL_47:
          *(_WORD *)&p_dst[v26] = 47;
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = &v60;
          else
            v32 = (std::string *)v60.__r_.__value_.__r.__words[0];
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          else
            size = v60.__r_.__value_.__l.__size_;
          v34 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v32, size);
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.st_gid) < 0)
            operator delete(*(void **)&__dst.st_dev);
          v36 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
          if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v36 = v60.__r_.__value_.__l.__size_;
          if (v36 == 2)
          {
            v38 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v38 = (std::string *)v60.__r_.__value_.__r.__words[0];
            if (LOWORD(v38->__r_.__value_.__l.__data_) == 11822)
            {
LABEL_70:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_p = &__p;
              else
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              v42 = strlen((const char *)p_p);
              if (v42 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v43 = v42;
              if (v42 >= 0x17)
              {
                v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v42 | 7) != 0x17)
                  v45 = v42 | 7;
                v46 = v45 + 1;
                v44 = operator new(v45 + 1);
                __dst.st_ino = v43;
                *(_QWORD *)&__dst.st_uid = v46 | 0x8000000000000000;
                *(_QWORD *)&__dst.st_dev = v44;
              }
              else
              {
                HIBYTE(__dst.st_gid) = v42;
                v44 = &__dst;
                if (!v42)
                {
LABEL_81:
                  v44[v43] = 0;
                  st_gid_high = SHIBYTE(__dst.st_gid);
                  v48 = *(void **)&__dst.st_dev;
                  if ((__dst.st_gid & 0x80000000) == 0)
                    v49 = &__dst;
                  else
                    v49 = *(stat **)&__dst.st_dev;
                  updated = chown((const char *)v49, a2, a3) == 0;
                  if (st_gid_high < 0)
                  {
                    v50 = v48;
LABEL_86:
                    operator delete(v50);
                    goto LABEL_87;
                  }
                  goto LABEL_87;
                }
              }
              memmove(v44, p_p, v43);
              goto LABEL_81;
            }
          }
          else if (v36 == 1)
          {
            v37 = &v60;
            if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v37 = (std::string *)v60.__r_.__value_.__r.__words[0];
            if (v37->__r_.__value_.__s.__data_[0] == 46)
              goto LABEL_70;
          }
          v39.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v39.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&__dst.st_blksize = v39;
          *(timespec *)__dst.st_qspare = v39;
          __dst.st_birthtimespec = v39;
          *(timespec *)&__dst.st_size = v39;
          __dst.st_mtimespec = v39;
          __dst.st_ctimespec = v39;
          *(timespec *)&__dst.st_uid = v39;
          __dst.st_atimespec = v39;
          *(timespec *)&__dst.st_dev = v39;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &__p;
          else
            v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (stat((const char *)v40, &__dst))
            goto LABEL_70;
          v51 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          v52 = opendir((const char *)v51);
          v53 = v52;
          if (!v52)
            goto LABEL_70;
          v54 = readdir(v52);
          closedir(v53);
          if (!v54)
            goto LABEL_70;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v58, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v58 = __p;
          updated = support::fs::updateOwner(&v58, a2, a3);
          if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          {
            v50 = (void *)v58.__r_.__value_.__r.__words[0];
            goto LABEL_86;
          }
LABEL_87:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
LABEL_91:
              operator delete(v60.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_91;
          }
          if (v22 == (const std::string::value_type **)v57)
            v23 = 0;
          else
            v23 = updated;
          v22 += 3;
          if ((v23 & 1) == 0)
          {
            v21 = (char *)v61;
            if (!v61)
              return updated;
LABEL_105:
            v55 = (void **)v62;
            v16 = v21;
            if (v62 != v21)
            {
              do
              {
                if (*((char *)v55 - 1) < 0)
                  operator delete(*(v55 - 3));
                v55 -= 3;
              }
              while (v55 != (void **)v21);
              v16 = v61;
            }
            v62 = v21;
LABEL_112:
            operator delete(v16);
            return updated;
          }
        }
      }
    }
  }
  if (v5[23] < 0)
    v5 = *(const char **)v5;
  v7 = strlen(v5);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    __dst.st_ino = v8;
    *(_QWORD *)&__dst.st_uid = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = v9;
    goto LABEL_13;
  }
  HIBYTE(__dst.st_gid) = v7;
  v9 = &__dst;
  if (v7)
LABEL_13:
    memmove(v9, v5, v8);
  *((_BYTE *)v9 + v8) = 0;
  v12 = SHIBYTE(__dst.st_gid);
  v13 = *(void **)&__dst.st_dev;
  if ((__dst.st_gid & 0x80000000) == 0)
    v14 = &__dst;
  else
    v14 = *(stat **)&__dst.st_dev;
  updated = chown((const char *)v14, a2, a3) == 0;
  if (v12 < 0)
  {
    v16 = v13;
    goto LABEL_112;
  }
  return updated;
}

void sub_1BF69ABF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void sub_1BF69AC20()
{
  JUMPOUT(0x1BF69AC50);
}

DIR *support::fs::isDir(const char *a1)
{
  const char *v1;
  timespec v2;
  DIR *result;
  const char *v4;
  DIR *v5;
  dirent *v6;
  stat v7;

  v1 = a1;
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v7.st_blksize = v2;
  *(timespec *)v7.st_qspare = v2;
  v7.st_birthtimespec = v2;
  *(timespec *)&v7.st_size = v2;
  v7.st_mtimespec = v2;
  v7.st_ctimespec = v2;
  *(timespec *)&v7.st_uid = v2;
  v7.st_atimespec = v2;
  *(timespec *)&v7.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v7))
    return 0;
  if (v1[23] >= 0)
    v4 = v1;
  else
    v4 = *(const char **)v1;
  result = opendir(v4);
  if (result)
  {
    v5 = result;
    v6 = readdir(result);
    closedir(v5);
    return (DIR *)(v6 != 0);
  }
  return result;
}

BOOL support::fs::chown(const char *a1, uid_t a2, gid_t a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return chown(a1, a2, a3) == 0;
}

DIR *support::fs::readDir(const char *a1, uint64_t a2)
{
  DIR *result;
  DIR *v4;
  dirent *v5;
  dirent *v6;
  size_t d_namlen;
  _BYTE *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  _BYTE __dst[24];

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = opendir(a1);
  if (result)
  {
    v4 = result;
    v5 = readdir(result);
    if (v5)
    {
      v6 = v5;
      do
      {
        memset(__dst, 170, sizeof(__dst));
        d_namlen = v6->d_namlen;
        if (d_namlen >= 0x17)
        {
          if ((d_namlen | 7) == 0x17)
            v11 = ((unsigned __int16)d_namlen & 0xFFF8) + 8;
          else
            v11 = d_namlen | 7;
          v8 = operator new(v11 + 1);
          *(_QWORD *)&__dst[8] = d_namlen;
          *(_QWORD *)&__dst[16] = v11 - 0x7FFFFFFFFFFFFFFFLL;
          *(_QWORD *)__dst = v8;
        }
        else
        {
          __dst[23] = v6->d_namlen;
          v8 = __dst;
          if (!(_DWORD)d_namlen)
          {
            __dst[d_namlen] = 0;
            v9 = *(std::string **)(a2 + 8);
            if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
              goto LABEL_10;
            goto LABEL_17;
          }
        }
        memmove(v8, v6->d_name, d_namlen);
        v8[d_namlen] = 0;
        v9 = *(std::string **)(a2 + 8);
        if ((unint64_t)v9 < *(_QWORD *)(a2 + 16))
        {
LABEL_10:
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
          }
          else
          {
            v10 = *(_OWORD *)__dst;
            v9->__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[16];
            *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
          }
          *(_QWORD *)(a2 + 8) = v9 + 1;
          *(_QWORD *)(a2 + 8) = v9 + 1;
          if ((__dst[23] & 0x80000000) == 0)
            goto LABEL_6;
LABEL_21:
          operator delete(*(void **)__dst);
          goto LABEL_6;
        }
LABEL_17:
        *(_QWORD *)(a2 + 8) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)__dst);
        if ((__dst[23] & 0x80000000) != 0)
          goto LABEL_21;
LABEL_6:
        v6 = readdir(v4);
      }
      while (v6);
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1BF69AEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t support::fs::getUidGid(int a1, uid_t *a2, gid_t *a3)
{
  passwd *v5;
  unsigned __int8 v7;
  NSObject *v8;
  void *__p[3];
  uint8_t buf[4];
  void **v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(__p, 170, sizeof(__p));
  if (a1 == 1)
  {
    HIBYTE(__p[2]) = 9;
    strcpy((char *)__p, "_wireless");
    v5 = getpwnam((const char *)__p);
    if (v5)
      goto LABEL_4;
    goto LABEL_6;
  }
  if (!a1)
  {
    HIBYTE(__p[2]) = 6;
    strcpy((char *)__p, "mobile");
    v5 = getpwnam((const char *)__p);
    if (v5)
    {
LABEL_4:
      *a2 = v5->pw_uid;
      *a3 = v5->pw_gid;
      return 1;
    }
LABEL_6:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v8 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v8 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return 0;
    }
    *(_DWORD *)buf = 136315138;
    v11 = __p;
    _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Getting uid and gid: failed to get passwd for %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  return 0;
}

BOOL support::fs::writeToCompletion(support::fs *this, char *__buf, size_t __nbyte)
{
  int v4;
  size_t v5;
  ssize_t v6;

  v4 = (int)this;
  do
  {
    v5 = __nbyte;
    if (!__nbyte)
      break;
    v6 = write(v4, __buf, __nbyte);
    __nbyte = v5 - v6;
    __buf += v6;
  }
  while ((v6 & 0x8000000000000000) == 0);
  return v5 == 0;
}

BOOL support::fs::writeToCompletion(FILE *__stream, __sFILE *__ptr, size_t __nitems)
{
  size_t v5;
  size_t v6;

  while (1)
  {
    v5 = __nitems;
    if (!__nitems)
      break;
    v6 = fwrite(__ptr, 1uLL, __nitems, __stream);
    __nitems = v5 - v6;
    __ptr = (__sFILE *)((char *)__ptr + v6);
    if (!v6)
      return v5 == 0;
  }
  fflush(__stream);
  return 1;
}

uint64_t support::fs::openFile(const char *a1, int a2, unsigned int a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return open(a1, a2, a3);
}

BOOL support::fs::closeFile(support::fs *this)
{
  int v1;
  int v2;

  v1 = (int)this;
  do
    v2 = close(v1);
  while (v2 && *__error() == 4);
  return v2 == 0;
}

BOOL support::fs::copyFile(const char *a1, const char *a2, int a3)
{
  const char *v6;
  size_t v7;
  size_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  unsigned __int8 v19;
  NSObject *v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  ssize_t v27;
  _BYTE *v28;
  ssize_t v29;
  __int128 v30;
  unsigned __int8 v31;
  NSObject *v32;
  const char *v34;
  const char *v35;
  _BYTE __dst[1024];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a1[23] >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  v7 = strlen(v6);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    *(_QWORD *)&__dst[8] = v8;
    *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
    *(_QWORD *)__dst = v9;
    goto LABEL_11;
  }
  __dst[23] = v7;
  v9 = __dst;
  if (v7)
LABEL_11:
    memmove(v9, v6, v8);
  v9[v8] = 0;
  if (__dst[23] >= 0)
    v12 = __dst;
  else
    v12 = *(const char **)__dst;
  v13 = open(v12, 0, 420);
  v14 = v13;
  if ((__dst[23] & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_25:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v20 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v20 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return 0;
    }
    if (a1[23] >= 0)
      v34 = a1;
    else
      v34 = *(const char **)a1;
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v34;
    _os_log_error_impl(&dword_1BF566000, v20, OS_LOG_TYPE_ERROR, "Failed to open the source file(%s)", __dst, 0xCu);
    return 0;
  }
  operator delete(*(void **)__dst);
  if (v14 < 0)
    goto LABEL_25;
LABEL_17:
  if (a2[23] >= 0)
    v15 = a2;
  else
    v15 = *(const char **)a2;
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v22 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v22 = v16 | 7;
    v23 = v22 + 1;
    v18 = operator new(v22 + 1);
    *(_QWORD *)&__dst[8] = v17;
    *(_QWORD *)&__dst[16] = v23 | 0x8000000000000000;
    *(_QWORD *)__dst = v18;
    goto LABEL_32;
  }
  __dst[23] = v16;
  v18 = __dst;
  if (v16)
LABEL_32:
    memmove(v18, v15, v17);
  v18[v17] = 0;
  if (__dst[23] >= 0)
    v24 = __dst;
  else
    v24 = *(const char **)__dst;
  v25 = open(v24, 1541, 420);
  v26 = v25;
  if ((__dst[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__dst);
    if ((v26 & 0x80000000) == 0)
      goto LABEL_38;
  }
  else if ((v25 & 0x80000000) == 0)
  {
LABEL_38:
    memset(__dst, 170, sizeof(__dst));
    v27 = read(v14, __dst, 0x400uLL);
    if (v27 < 1)
    {
LABEL_44:
      v21 = v27 == 0;
      if (!v27 && a3)
      {
        *(_QWORD *)&v30 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__dst[112] = v30;
        *(_OWORD *)&__dst[128] = v30;
        *(_OWORD *)&__dst[80] = v30;
        *(_OWORD *)&__dst[96] = v30;
        *(_OWORD *)&__dst[48] = v30;
        *(_OWORD *)&__dst[64] = v30;
        *(_OWORD *)&__dst[16] = v30;
        *(_OWORD *)&__dst[32] = v30;
        *(_OWORD *)__dst = v30;
        if (fstat(v14, (stat *)__dst))
          v21 = 0;
        else
          v21 = fchmod(v26, *(mode_t *)&__dst[4]) == 0;
      }
    }
    else
    {
      v28 = __dst;
      do
      {
        while (!v27)
        {
          memset(__dst, 170, sizeof(__dst));
          v27 = read(v14, __dst, 0x400uLL);
          v28 = __dst;
          if (v27 <= 0)
            goto LABEL_44;
        }
        v29 = write(v26, v28, v27);
        v27 -= v29;
        v28 += v29;
      }
      while ((v29 & 0x8000000000000000) == 0);
      v21 = 0;
    }
    while (close(v26) && *__error() == 4)
      ;
    goto LABEL_56;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v32 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_52;
LABEL_65:
    if (a2[23] >= 0)
      v35 = a2;
    else
      v35 = *(const char **)a2;
    *(_DWORD *)__dst = 136315138;
    *(_QWORD *)&__dst[4] = v35;
    _os_log_error_impl(&dword_1BF566000, v32, OS_LOG_TYPE_ERROR, "Failed to open the destination file(%s)", __dst, 0xCu);
    goto LABEL_52;
  }
  v32 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
    goto LABEL_65;
LABEL_52:
  v21 = 0;
LABEL_56:
  while (close(v14) && *__error() == 4)
    ;
  return v21;
}

void sub_1BF69B70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::loadFile(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _BOOL8 v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  __int128 v21;
  char *v22;
  char *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  _QWORD __b[91];

  __b[89] = *MEMORY[0x1E0C80C00];
  memset(__b, 170, 0x240uLL);
  std::ifstream::basic_ifstream(__b);
  if (!__b[17]
    || (std::istream::tellg(), std::istream::seekg(), std::istream::tellg(), v3 = __b[88], std::istream::seekg(), !v3)
    || *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)))
  {
    v4 = 0;
    goto LABEL_5;
  }
  v7 = *(char **)a2;
  v6 = *(char **)(a2 + 8);
  v8 = (unint64_t)&v6[-*(_QWORD *)a2];
  v9 = v3 - v8;
  if (v3 <= v8)
  {
    if (v3 < v8)
      *(_QWORD *)(a2 + 8) = &v7[v3];
    goto LABEL_36;
  }
  v10 = *(_QWORD *)(a2 + 16);
  if (v10 - (uint64_t)v6 < v9)
  {
    if ((v3 & 0x8000000000000000) != 0)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v11 = v10 - (_QWORD)v7;
    v12 = 2 * v11;
    if (2 * v11 <= v3)
      v12 = v3;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v14 = (char *)operator new(v13);
    v15 = &v14[v8];
    v16 = &v14[v13];
    bzero(&v14[v8], v3 - v8);
    if (v6 == v7)
      goto LABEL_34;
    if (v8 >= 8 && (unint64_t)(v7 - v14) >= 0x20)
    {
      if (v8 < 0x20)
      {
        v17 = 0;
        goto LABEL_26;
      }
      v17 = v8 & 0xFFFFFFFFFFFFFFE0;
      v18 = v6 - 16;
      v19 = &v14[v6 - 16 - v7];
      v20 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v21 = *(_OWORD *)v18;
        *((_OWORD *)v19 - 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)v19 = v21;
        v19 -= 32;
        v18 -= 32;
        v20 -= 32;
      }
      while (v20);
      if (v8 == v17)
        goto LABEL_33;
      if ((v8 & 0x18) != 0)
      {
LABEL_26:
        v15 -= v8 & 0xFFFFFFFFFFFFFFF8;
        v22 = &v6[-v17 - 8];
        v23 = (char *)(v22 - v7);
        v24 = v17 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v25 = *(_QWORD *)v22;
          v22 -= 8;
          *(_QWORD *)&v23[(_QWORD)v14] = v25;
          v23 -= 8;
          v24 += 8;
        }
        while (v24);
        v6 -= v8 & 0xFFFFFFFFFFFFFFF8;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        goto LABEL_31;
      }
      v15 -= v17;
      v6 -= v17;
    }
LABEL_31:
    v26 = v15 - 1;
    do
    {
      v27 = *--v6;
      *v26-- = v27;
    }
    while (v6 != v7);
LABEL_33:
    v6 = v7;
    v15 = v14;
LABEL_34:
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = &v14[v3];
    *(_QWORD *)(a2 + 16) = v16;
    if (v6)
      operator delete(v6);
    goto LABEL_36;
  }
  bzero(*(void **)(a2 + 8), v3 - v8);
  *(_QWORD *)(a2 + 8) = &v6[v9];
LABEL_36:
  std::istream::read();
  v4 = __b[1] == (int)v3;
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)__b + *(_QWORD *)(__b[0] - 24)), *(_DWORD *)((char *)&__b[4] + *(_QWORD *)(__b[0] - 24)) | 4);
LABEL_5:
  __b[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)__b + *(_QWORD *)(__b[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B8C184](&__b[2]);
  std::istream::~istream();
  MEMORY[0x1C3B8C364](&__b[53]);
  return v4;
}

void sub_1BF69BA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL support::fs::getFileSize(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v5;
    std::istream::seekg();
  }
  return v2 != 0;
}

{
  uint64_t v2;
  _BOOL8 v4;
  _QWORD v6[90];

  v6[89] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  memset(v6, 170, 0x240uLL);
  std::ifstream::basic_ifstream(v6);
  v4 = v6[17] != 0;
  if (v6[17])
  {
    std::istream::tellg();
    std::istream::seekg();
    std::istream::tellg();
    *a2 = v6[88];
    std::istream::seekg();
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(v6[0] - 24)), *(_DWORD *)((char *)&v6[4] + *(_QWORD *)(v6[0] - 24)) | 4);
  }
  v6[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B8C184](&v6[2]);
  std::istream::~istream();
  MEMORY[0x1C3B8C364](&v6[53]);
  return v4;
}

uint64_t support::fs::loadFile(const char *a1, uint64_t a2)
{
  FILE *v3;
  FILE *v4;
  unint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  __int128 v23;
  char *v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char *v30;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v3 = fopen(a1, "rb");
  if (v3)
  {
    v4 = v3;
    fseek(v3, 0, 2);
    v5 = MEMORY[0x1C3B8C73C](v4);
    if (v5 != -1)
    {
      v6 = v5;
      v8 = *(char **)a2;
      v7 = *(char **)(a2 + 8);
      v9 = (unint64_t)&v7[-*(_QWORD *)a2];
      v10 = v5 - v9;
      if (v5 <= v9)
      {
        if (v5 < v9)
          *(_QWORD *)(a2 + 8) = &v8[v5];
        goto LABEL_36;
      }
      v11 = *(_QWORD *)(a2 + 16);
      if (v11 - (uint64_t)v7 >= v10)
      {
        bzero(*(void **)(a2 + 8), v10);
        *(_QWORD *)(a2 + 8) = &v7[v10];
LABEL_36:
        rewind(v4);
        v30 = *(char **)a2;
        v19 = 1;
        fread(v30, v6, 1uLL, v4);
        fclose(v4);
        return v19;
      }
      if ((v5 & 0x8000000000000000) != 0)
        std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
      v12 = v11 - (_QWORD)v8;
      v13 = 2 * v12;
      if (2 * v12 <= v5)
        v13 = v5;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v14 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = (char *)operator new(v14);
      v16 = &v15[v9];
      v17 = &v15[v14];
      bzero(&v15[v9], v10);
      if (v7 == v8)
      {
LABEL_34:
        *(_QWORD *)a2 = v16;
        *(_QWORD *)(a2 + 8) = &v15[v6];
        *(_QWORD *)(a2 + 16) = v17;
        if (v7)
          operator delete(v7);
        goto LABEL_36;
      }
      if (v9 >= 8 && (unint64_t)(v8 - v15) >= 0x20)
      {
        if (v9 < 0x20)
        {
          v18 = 0;
          goto LABEL_26;
        }
        v18 = v9 & 0xFFFFFFFFFFFFFFE0;
        v20 = v7 - 16;
        v21 = &v15[v7 - 16 - v8];
        v22 = v9 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
          *(_OWORD *)v21 = v23;
          v21 -= 32;
          v20 -= 32;
          v22 -= 32;
        }
        while (v22);
        if (v9 == v18)
          goto LABEL_33;
        if ((v9 & 0x18) != 0)
        {
LABEL_26:
          v16 -= v9 & 0xFFFFFFFFFFFFFFF8;
          v24 = &v7[-v18 - 8];
          v25 = (char *)(v24 - v8);
          v26 = v18 - (v9 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v27 = *(_QWORD *)v24;
            v24 -= 8;
            *(_QWORD *)&v25[(_QWORD)v15] = v27;
            v25 -= 8;
            v26 += 8;
          }
          while (v26);
          v7 -= v9 & 0xFFFFFFFFFFFFFFF8;
          if (v9 == (v9 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_33;
          goto LABEL_31;
        }
        v16 -= v18;
        v7 -= v18;
      }
LABEL_31:
      v28 = v16 - 1;
      do
      {
        v29 = *--v7;
        *v28-- = v29;
      }
      while (v7 != v8);
LABEL_33:
      v7 = v8;
      v16 = v15;
      goto LABEL_34;
    }
  }
  return 0;
}

BOOL support::fs::fileExists(const char *a1)
{
  timespec v1;
  stat v3;

  v1.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v1.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v3.st_blksize = v1;
  *(timespec *)v3.st_qspare = v1;
  v3.st_birthtimespec = v1;
  *(timespec *)&v3.st_size = v1;
  v3.st_mtimespec = v1;
  v3.st_ctimespec = v1;
  *(timespec *)&v3.st_uid = v1;
  v3.st_atimespec = v1;
  *(timespec *)&v3.st_dev = v1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return stat(a1, &v3) == 0;
}

void support::fs::createUniqueFilename(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  unsigned int v5;
  char *v6;
  timespec v7;
  std::string *v8;
  uint64_t v9;
  std::sub_match<const char *> *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  __int128 v12;
  int v13;
  int v14;
  unsigned int v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  int v20;
  std::sub_match<const char *> *v21;
  uint64_t v22;
  void **v23;
  __int128 v24;
  void *tv_nsec;
  unsigned __int8 *v26;
  void *v27;
  char *tv_sec;
  uint64_t v29;
  size_t size;
  std::string *v31;
  _BYTE *v32;
  char v33;
  std::string *v34;
  size_t v35;
  unint64_t v36;
  uint64_t v37;
  std::string *v38;
  char *i;
  size_t v40;
  std::string *v41;
  _BYTE *v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  unsigned __int8 v50;
  std::string *v51;
  size_t v52;
  size_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  std::string::size_type v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char v62;
  unsigned __int8 v63;
  std::string *v64;
  size_t v65;
  size_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  std::string::size_type v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  __darwin_time_t v76;
  BOOL v77;
  uint64_t *p_tv_nsec;
  char *v79;
  timespec *p_st_ctimespec;
  char *v81;
  unsigned __int8 v82;
  std::string *v83;
  char *v84;
  char v85;
  unsigned __int8 v86;
  std::string *v87;
  size_t v88;
  size_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  std::string::size_type v93;
  char *v94;
  size_t v95;
  unint64_t v96;
  uint64_t v97;
  std::string *v98;
  char *st_blocks;
  char *v100;
  char *v101;
  char v102;
  unsigned __int8 v103;
  std::string *v104;
  size_t v105;
  size_t v106;
  unint64_t v107;
  uint64_t v108;
  void *v109;
  std::string::size_type v110;
  char *v111;
  char *v112;
  char *v113;
  dev_t st_rdev;
  int v115;
  _QWORD *v116;
  timespec *v117;
  std::sub_match<const char *> *v118;
  std::sub_match<const char *> *st_ino;
  __int16 v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  unint64_t v124;
  __darwin_time_t v125;
  _QWORD *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  void *v131;
  __darwin_time_t v132;
  uint64_t v133;
  uint64_t v134;
  __darwin_time_t v135;
  __int16 v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  __darwin_time_t v143;
  __darwin_time_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  _QWORD *v161;
  char *v162;
  char v163;
  size_t v164;
  std::string *v165;
  _BYTE *v166;
  char v167;
  std::string *v168;
  size_t v169;
  unint64_t v170;
  uint64_t v171;
  std::string *v172;
  char *v173;
  char first;
  unsigned __int8 v175;
  std::string *v176;
  size_t v177;
  size_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  std::string::size_type v182;
  char *v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  char *__s;
  size_t v191;
  char v192;
  uint64_t v193;
  char *v194;
  blkcnt_t v195;
  char *v196;
  std::string v197;
  void *__p[4];
  std::string v199;
  std::locale v200[2];
  __int128 v201;
  __int128 v202;
  __int128 v203;
  stat v204;
  __int128 v205;
  _BYTE v206[32];
  uint64_t v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  char v213;
  uint64_t v214;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v203 = v4;
  v201 = v4;
  v202 = v4;
  *(_OWORD *)&v200[0].__locale_ = v4;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v200, "^([/_\\-[:alnum:]]*)(.*)", 0);
  memset(&v199, 170, sizeof(v199));
  v187 = a2;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v199, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v199 = *(std::string *)a1;
  v5 = 0;
  v6 = &v206[24];
  v188 = a1;
  v196 = &v206[24];
  while (1)
  {
    v7.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v7.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v204.st_blksize = v7;
    *(timespec *)v204.st_qspare = v7;
    v204.st_birthtimespec = v7;
    *(timespec *)&v204.st_size = v7;
    v204.st_mtimespec = v7;
    v204.st_ctimespec = v7;
    *(timespec *)&v204.st_uid = v7;
    v204.st_atimespec = v7;
    *(timespec *)&v204.st_dev = v7;
    if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v199;
    else
      v8 = (std::string *)v199.__r_.__value_.__r.__words[0];
    if (stat((const char *)v8, &v204))
    {
      *(std::string *)v187 = v199;
      goto LABEL_333;
    }
    v9 = *(unsigned __int8 *)(a1 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = (std::sub_match<const char *> *)a1;
    else
      v10 = *(std::sub_match<const char *> **)a1;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a1 + 8);
    v11 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v10 + v9);
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *((_OWORD *)v6 + 2) = v12;
    *((_OWORD *)v6 + 3) = v12;
    *(_OWORD *)v6 = v12;
    *((_OWORD *)v6 + 1) = v12;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v205 = 0u;
    memset(v206, 0, 25);
    *(_OWORD *)&v204.st_birthtimespec.tv_nsec = v12;
    v204.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v204.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    memset(&v204.st_mtimespec, 0, 17);
    memset(&v204.st_ctimespec.tv_nsec, 0, 17);
    LOBYTE(v204.st_size) = 0;
    v204.st_blocks = 0;
    memset(&v204, 0, 41);
    v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v200, v10, (std::sub_match<const char *> *)((char *)v10 + v9), (std::vector<std::csub_match> *)&v204, 4160);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v205, (uint64_t)v10, v11, (uint64_t *)&v204.st_dev, 0);
    if (*(_QWORD *)&v204.st_dev)
    {
      v204.st_ino = *(_QWORD *)&v204.st_dev;
      operator delete(*(void **)&v204.st_dev);
    }
    if (v212)
      v14 = v13 ^ 1;
    else
      v14 = 1;
    if ((_QWORD)v205)
    {
      *((_QWORD *)&v205 + 1) = v205;
      operator delete((void *)v205);
    }
    if ((v13 & v14) == 0)
      break;
    v15 = v5 + 1;
    memset(__p, 170, 24);
    std::to_string((std::string *)&v205, v15);
    v16 = std::string::insert((std::string *)&v205, 0, "$1-", 3uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(_QWORD *)&v204.st_uid = *((_QWORD *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)&v204.st_dev = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append((std::string *)&v204, "$2", 2uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v6 = v196;
    if (SHIBYTE(v204.st_gid) < 0)
    {
      operator delete(*(void **)&v204.st_dev);
      v189 = v15;
      if ((v206[7] & 0x80000000) != 0)
LABEL_298:
        operator delete((void *)v205);
    }
    else
    {
      v189 = v15;
      if ((v206[7] & 0x80000000) != 0)
        goto LABEL_298;
    }
    memset(&v197, 0, sizeof(v197));
    v20 = *(char *)(a1 + 23);
    if (v20 >= 0)
      v21 = (std::sub_match<const char *> *)a1;
    else
      v21 = *(std::sub_match<const char *> **)a1;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 23);
    else
      v22 = *(_QWORD *)(a1 + 8);
    v23 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v23 = (void **)__p[0];
    __s = (char *)v23;
    *(_QWORD *)&v24 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v24 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v204.st_gen = v24;
    v204.st_size = 0xAAAAAAAAAAAAAAAALL;
    v204.st_ctimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(&v204.st_rdev + 1) = -1431655766;
    *(_QWORD *)&v204.st_dev = v21;
    v204.st_ino = (__darwin_ino64_t)v21 + v22;
    *(_QWORD *)&v204.st_uid = v200;
    v204.st_rdev = 0;
    memset(&v204.st_birthtimespec, 0, 17);
    memset(&v204.st_blocks, 0, 17);
    LOBYTE(v204.st_qspare[0]) = 0;
    v204.st_qspare[1] = 0;
    memset(&v204.st_atimespec, 0, 41);
    *((_OWORD *)v6 + 2) = v24;
    *((_OWORD *)v6 + 3) = v24;
    *(_OWORD *)v6 = v24;
    *((_OWORD *)v6 + 1) = v24;
    v207 = 0;
    v208 = 0;
    v209 = 0;
    v210 = 0;
    v211 = 0;
    v212 = 0;
    v213 = 0;
    v214 = 0;
    v205 = 0u;
    memset(v206, 0, 25);
    std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v200, v21, (std::sub_match<const char *> *)((char *)v21 + v22), (std::vector<std::csub_match> *)&v205, 0);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)&v204.st_atimespec, (uint64_t)v21, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v21 + v22), (uint64_t *)&v205, 0);
    if ((_QWORD)v205)
    {
      *((_QWORD *)&v205 + 1) = v205;
      operator delete((void *)v205);
    }
    tv_nsec = (void *)v204.st_atimespec.tv_nsec;
    if (v204.st_atimespec.tv_nsec != v204.st_atimespec.tv_sec)
    {
      v191 = strlen(__s);
      v26 = (unsigned __int8 *)&__s[v191];
      while (2)
      {
        tv_sec = (char *)v204.st_birthtimespec.tv_sec;
        v29 = v204.st_birthtimespec.tv_nsec;
        while (tv_sec != (char *)v29)
        {
          v33 = *tv_sec;
          if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
            {
              size = HIBYTE(v197.__r_.__value_.__r.__words[2]);
              *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
              v31 = &v197;
              goto LABEL_41;
            }
            v34 = &v197;
            size = 22;
LABEL_49:
            if (size + 1 > 2 * size)
              v36 = size + 1;
            else
              v36 = 2 * size;
            v37 = (v36 & 0x7FFFFFFFFFFFFFF8) + 8;
            if ((v36 | 7) != 0x17)
              v37 = v36 | 7;
            if (v36 >= 0x17)
              v35 = v37 + 1;
            else
              v35 = 23;
LABEL_57:
            v38 = (std::string *)operator new(v35);
            v31 = v38;
            if (!size || (memmove(v38, v34, size), size != 22))
              operator delete(v34);
            v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
            v197.__r_.__value_.__r.__words[2] = v35 | 0x8000000000000000;
            goto LABEL_62;
          }
          size = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
          if (v197.__r_.__value_.__l.__size_ == size)
          {
            if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            v34 = (std::string *)v197.__r_.__value_.__r.__words[0];
            v35 = 0x7FFFFFFFFFFFFFF7;
            if (size < 0x3FFFFFFFFFFFFFF3)
              goto LABEL_49;
            goto LABEL_57;
          }
          size = v197.__r_.__value_.__l.__size_;
          v31 = (std::string *)v197.__r_.__value_.__r.__words[0];
LABEL_62:
          v197.__r_.__value_.__l.__size_ = size + 1;
LABEL_41:
          v32 = (char *)v31 + size;
          *v32 = v33;
          v32[1] = 0;
          ++tv_sec;
        }
        if (v191)
        {
          for (i = __s; i != (char *)v26; ++i)
          {
            v43 = *i;
            if (v43 != 36)
              goto LABEL_135;
            v44 = (unsigned __int8 *)(i + 1);
            if (i + 1 == (char *)v26)
              goto LABEL_134;
            v45 = (char)*v44;
            v43 = *v44;
            if (v45 <= 38)
            {
              if (v45 == 36)
              {
                ++i;
                v82 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_136;
                goto LABEL_161;
              }
              if (v45 != 38)
                goto LABEL_123;
              v46 = *(char **)v204.st_atimespec.tv_sec;
              v47 = *(char **)(v204.st_atimespec.tv_sec + 8);
              if (*(char **)v204.st_atimespec.tv_sec == v47)
              {
LABEL_179:
                i = (char *)v44;
                continue;
              }
              while (2)
              {
                while (2)
                {
                  v49 = *v46;
                  v50 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v52 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                    if (v197.__r_.__value_.__l.__size_ == v52)
                    {
                      if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                        goto LABEL_339;
                      v51 = (std::string *)v197.__r_.__value_.__r.__words[0];
                      v53 = 0x7FFFFFFFFFFFFFF7;
                      if (v52 < 0x3FFFFFFFFFFFFFF3)
                        goto LABEL_82;
                      goto LABEL_90;
                    }
                    v52 = v197.__r_.__value_.__l.__size_;
                    v57 = v197.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                    {
                      *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                      v48 = (char *)&v197 + v50;
                      *v48 = v49;
                      v48[1] = 0;
                      if (++v46 == v47)
                        goto LABEL_201;
                      continue;
                    }
                    v51 = &v197;
                    v52 = 22;
LABEL_82:
                    if (v52 + 1 > 2 * v52)
                      v54 = v52 + 1;
                    else
                      v54 = 2 * v52;
                    v55 = (v54 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v54 | 7) != 0x17)
                      v55 = v54 | 7;
                    if (v54 >= 0x17)
                      v53 = v55 + 1;
                    else
                      v53 = 23;
LABEL_90:
                    v56 = operator new(v53);
                    v57 = (std::string::size_type)v56;
                    if (!v52 || (memmove(v56, v51, v52), v52 != 22))
                      operator delete(v51);
                    v197.__r_.__value_.__r.__words[0] = v57;
                    v197.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
                  }
                  break;
                }
                v197.__r_.__value_.__l.__size_ = v52 + 1;
                v58 = (char *)(v57 + v52);
                *v58 = v49;
                v58[1] = 0;
                if (++v46 == v47)
                  goto LABEL_201;
                continue;
              }
            }
            if (v45 != 39)
            {
              if (v45 == 96)
              {
                v59 = (char *)v204.st_birthtimespec.tv_sec;
                v60 = v204.st_birthtimespec.tv_nsec;
                if (v204.st_birthtimespec.tv_sec == v204.st_birthtimespec.tv_nsec)
                  goto LABEL_179;
                while (2)
                {
                  while (2)
                  {
                    v62 = *v59;
                    v63 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v65 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v197.__r_.__value_.__l.__size_ == v65)
                      {
                        if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                          goto LABEL_339;
                        v64 = (std::string *)v197.__r_.__value_.__r.__words[0];
                        v66 = 0x7FFFFFFFFFFFFFF7;
                        if (v65 < 0x3FFFFFFFFFFFFFF3)
                          goto LABEL_108;
                        goto LABEL_116;
                      }
                      v65 = v197.__r_.__value_.__l.__size_;
                      v70 = v197.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                        v61 = (char *)&v197 + v63;
                        *v61 = v62;
                        v61[1] = 0;
                        if (++v59 == (char *)v60)
                          goto LABEL_201;
                        continue;
                      }
                      v64 = &v197;
                      v65 = 22;
LABEL_108:
                      if (v65 + 1 > 2 * v65)
                        v67 = v65 + 1;
                      else
                        v67 = 2 * v65;
                      v68 = (v67 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v67 | 7) != 0x17)
                        v68 = v67 | 7;
                      if (v67 >= 0x17)
                        v66 = v68 + 1;
                      else
                        v66 = 23;
LABEL_116:
                      v69 = operator new(v66);
                      v70 = (std::string::size_type)v69;
                      if (!v65 || (memmove(v69, v64, v65), v65 != 22))
                        operator delete(v64);
                      v197.__r_.__value_.__r.__words[0] = v70;
                      v197.__r_.__value_.__r.__words[2] = v66 | 0x8000000000000000;
                    }
                    break;
                  }
                  v197.__r_.__value_.__l.__size_ = v65 + 1;
                  v71 = (char *)(v70 + v65);
                  *v71 = v62;
                  v71[1] = 0;
                  if (++v59 == (char *)v60)
                    goto LABEL_201;
                  continue;
                }
              }
LABEL_123:
              if ((v43 - 48) <= 9)
              {
                v72 = *v44 - 48;
                if (i + 2 != (char *)v26)
                {
                  v73 = i[2];
                  v74 = v73 - 48;
                  v75 = v73 + 10 * (int)v72 - 48;
                  if (v74 > 9)
                  {
                    v44 = (unsigned __int8 *)(i + 1);
                  }
                  else
                  {
                    v72 = v75;
                    v44 = (unsigned __int8 *)(i + 2);
                  }
                }
                v76 = v204.st_atimespec.tv_sec + 24 * (int)v72;
                v77 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3) > v72;
                p_tv_nsec = &v204.st_mtimespec.tv_nsec;
                if (v77)
                  p_tv_nsec = (uint64_t *)v76;
                v79 = (char *)*p_tv_nsec;
                p_st_ctimespec = (timespec *)(v76 + 8);
                if (!v77)
                  p_st_ctimespec = &v204.st_ctimespec;
                v81 = (char *)p_st_ctimespec->tv_sec;
                if (v79 == (char *)p_st_ctimespec->tv_sec)
                  goto LABEL_179;
                while (2)
                {
                  while (2)
                  {
                    v85 = *v79;
                    v86 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                    {
                      v88 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                      if (v197.__r_.__value_.__l.__size_ == v88)
                      {
                        if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                          goto LABEL_339;
                        v87 = (std::string *)v197.__r_.__value_.__r.__words[0];
                        v89 = 0x7FFFFFFFFFFFFFF7;
                        if (v88 < 0x3FFFFFFFFFFFFFF3)
                          goto LABEL_145;
                        goto LABEL_153;
                      }
                      v88 = v197.__r_.__value_.__l.__size_;
                      v93 = v197.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      if (HIBYTE(v197.__r_.__value_.__r.__words[2]) != 22)
                      {
                        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                        v84 = (char *)&v197 + v86;
                        *v84 = v85;
                        v84[1] = 0;
                        if (++v79 == v81)
                          goto LABEL_201;
                        continue;
                      }
                      v87 = &v197;
                      v88 = 22;
LABEL_145:
                      if (v88 + 1 > 2 * v88)
                        v90 = v88 + 1;
                      else
                        v90 = 2 * v88;
                      v91 = (v90 & 0x7FFFFFFFFFFFFFF8) + 8;
                      if ((v90 | 7) != 0x17)
                        v91 = v90 | 7;
                      if (v90 >= 0x17)
                        v89 = v91 + 1;
                      else
                        v89 = 23;
LABEL_153:
                      v92 = operator new(v89);
                      v93 = (std::string::size_type)v92;
                      if (!v88 || (memmove(v92, v87, v88), v88 != 22))
                        operator delete(v87);
                      v197.__r_.__value_.__r.__words[0] = v93;
                      v197.__r_.__value_.__r.__words[2] = v89 | 0x8000000000000000;
                    }
                    break;
                  }
                  v197.__r_.__value_.__l.__size_ = v88 + 1;
                  v94 = (char *)(v93 + v88);
                  *v94 = v85;
                  v94[1] = 0;
                  if (++v79 == v81)
                    goto LABEL_201;
                  continue;
                }
              }
LABEL_134:
              LOBYTE(v43) = 36;
LABEL_135:
              v82 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
              if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_136:
                if (v82 == 22)
                {
                  v83 = &v197;
                  v40 = 22;
                  goto LABEL_164;
                }
                v40 = v82;
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (v82 + 1) & 0x7F;
                v41 = &v197;
LABEL_66:
                v42 = (char *)v41 + v40;
                *v42 = v43;
                v42[1] = 0;
                continue;
              }
LABEL_161:
              v40 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v197.__r_.__value_.__l.__size_ == v40)
              {
                if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
LABEL_339:
                  std::string::__throw_length_error[abi:ne180100]();
                v6 = v196;
                v83 = (std::string *)v197.__r_.__value_.__r.__words[0];
                v95 = 0x7FFFFFFFFFFFFFF7;
                if (v40 < 0x3FFFFFFFFFFFFFF3)
                {
LABEL_164:
                  if (v40 + 1 > 2 * v40)
                    v96 = v40 + 1;
                  else
                    v96 = 2 * v40;
                  v97 = (v96 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v96 | 7) != 0x17)
                    v97 = v96 | 7;
                  if (v96 >= 0x17)
                    v95 = v97 + 1;
                  else
                    v95 = 23;
                }
                v98 = (std::string *)operator new(v95);
                v41 = v98;
                if (!v40 || (memmove(v98, v83, v40), v40 != 22))
                  operator delete(v83);
                v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                v197.__r_.__value_.__r.__words[2] = v95 | 0x8000000000000000;
              }
              else
              {
                v40 = v197.__r_.__value_.__l.__size_;
                v41 = (std::string *)v197.__r_.__value_.__r.__words[0];
              }
              v197.__r_.__value_.__l.__size_ = v40 + 1;
              goto LABEL_66;
            }
            st_blocks = (char *)v204.st_blocks;
            v100 = *(char **)&v204.st_blksize;
            if (v204.st_blocks == *(_QWORD *)&v204.st_blksize)
              goto LABEL_179;
            do
            {
              while (1)
              {
                v102 = *st_blocks;
                v103 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
                  break;
                if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
                {
                  v104 = &v197;
                  v105 = 22;
LABEL_187:
                  if (v105 + 1 > 2 * v105)
                    v107 = v105 + 1;
                  else
                    v107 = 2 * v105;
                  v108 = (v107 & 0x7FFFFFFFFFFFFFF8) + 8;
                  if ((v107 | 7) != 0x17)
                    v108 = v107 | 7;
                  if (v107 >= 0x17)
                    v106 = v108 + 1;
                  else
                    v106 = 23;
                  goto LABEL_195;
                }
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                v101 = (char *)&v197 + v103;
                *v101 = v102;
                v101[1] = 0;
                if (++st_blocks == v100)
                  goto LABEL_201;
              }
              v105 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
              if (v197.__r_.__value_.__l.__size_ != v105)
              {
                v105 = v197.__r_.__value_.__l.__size_;
                v110 = v197.__r_.__value_.__r.__words[0];
                goto LABEL_200;
              }
              if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                goto LABEL_339;
              v104 = (std::string *)v197.__r_.__value_.__r.__words[0];
              v106 = 0x7FFFFFFFFFFFFFF7;
              if (v105 < 0x3FFFFFFFFFFFFFF3)
                goto LABEL_187;
LABEL_195:
              v109 = operator new(v106);
              v110 = (std::string::size_type)v109;
              if (!v105 || (memmove(v109, v104, v105), v105 != 22))
                operator delete(v104);
              v197.__r_.__value_.__r.__words[0] = v110;
              v197.__r_.__value_.__r.__words[2] = v106 | 0x8000000000000000;
LABEL_200:
              v197.__r_.__value_.__l.__size_ = v105 + 1;
              v111 = (char *)(v110 + v105);
              *v111 = v102;
              v111[1] = 0;
              ++st_blocks;
            }
            while (st_blocks != v100);
LABEL_201:
            i = (char *)v44;
            v6 = v196;
          }
        }
        v113 = (char *)v204.st_blocks;
        v112 = *(char **)&v204.st_blksize;
        st_rdev = v204.st_rdev;
        v115 = v204.st_rdev | 0x800;
        v204.st_rdev |= 0x800u;
        v27 = (void *)v204.st_atimespec.tv_sec;
        v116 = &v204.st_mtimespec.tv_nsec;
        if (v204.st_atimespec.tv_nsec != v204.st_atimespec.tv_sec)
          v116 = (_QWORD *)v204.st_atimespec.tv_sec;
        v117 = (timespec *)(v204.st_atimespec.tv_sec + 8);
        if (v204.st_atimespec.tv_nsec == v204.st_atimespec.tv_sec)
          v117 = &v204.st_ctimespec;
        v118 = (std::sub_match<const char *> *)v117->tv_sec;
        st_ino = (std::sub_match<const char *> *)v204.st_ino;
        if (*v116 != v117->tv_sec)
        {
          v194 = *(char **)&v204.st_blksize;
          v195 = v204.st_blocks;
          goto LABEL_208;
        }
        if ((std::sub_match<const char *> *)v204.st_ino != v118)
        {
          v138 = *(_QWORD *)&v204.st_uid;
          *(_QWORD *)&v139 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v139;
          *((_OWORD *)v6 + 3) = v139;
          *(_OWORD *)v6 = v139;
          *((_OWORD *)v6 + 1) = v139;
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v214 = 0;
          v205 = 0u;
          memset(v206, 0, 25);
          v140 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v138, v118, st_ino, (std::vector<std::csub_match> *)&v205, st_rdev | 0x860u);
          v141 = v207;
          v142 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
          v143 = v204.st_atimespec.tv_sec;
          v144 = v204.st_atimespec.tv_nsec;
          v145 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
          if (v142 <= v145)
          {
            if (v142 < v145)
            {
              v144 = v204.st_atimespec.tv_sec + 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
              v204.st_atimespec.tv_nsec = v144;
            }
          }
          else
          {
            std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)&v204.st_atimespec, v142 - v145);
            v143 = v204.st_atimespec.tv_sec;
            v144 = v204.st_atimespec.tv_nsec;
          }
          if (v144 == v143)
          {
            v158 = (char *)v205;
          }
          else
          {
            v156 = 0;
            v157 = 0;
            v159 = *((_QWORD *)&v205 + 1);
            v158 = (char *)v205;
            do
            {
              if (0xAAAAAAAAAAAAAAABLL * ((v159 - (uint64_t)v158) >> 3) <= v157)
                v160 = &v206[8];
              else
                v160 = &v158[v156];
              *(_QWORD *)(v143 + v156) = (char *)v118 + *(_QWORD *)v160 - v141;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v157)
                v161 = &v206[16];
              else
                v161 = (_QWORD *)(v205 + v156 + 8);
              *(_QWORD *)(v204.st_atimespec.tv_sec + v156 + 8) = (char *)v118 + *v161 - v141;
              v159 = *((_QWORD *)&v205 + 1);
              v158 = (char *)v205;
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v157)
                v162 = v6;
              else
                v162 = (char *)(v205 + v156 + 16);
              v163 = *v162;
              v143 = v204.st_atimespec.tv_sec;
              *(_BYTE *)(v204.st_atimespec.tv_sec + v156 + 16) = v163;
              ++v157;
              v156 += 24;
            }
            while (v157 < 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v143) >> 3));
          }
          v204.st_mtimespec.tv_nsec = (uint64_t)st_ino;
          v204.st_ctimespec.tv_sec = (__darwin_time_t)st_ino;
          v204.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v207 - v141;
          v204.st_birthtimespec.tv_nsec = (uint64_t)v118 + v208 - v141;
          LOBYTE(v204.st_size) = v209;
          LOBYTE(v204.st_ctimespec.tv_nsec) = 0;
          v204.st_blocks = (blkcnt_t)v118 + v210 - v141;
          *(_QWORD *)&v204.st_blksize = (char *)v118 + v211 - v141;
          LOBYTE(v204.st_gen) = v212;
          LOBYTE(v204.st_qspare[0]) = v213;
          if (v158)
          {
            *((_QWORD *)&v205 + 1) = v158;
            operator delete(v158);
          }
          if (v140)
          {
            v27 = (void *)v204.st_atimespec.tv_sec;
LABEL_38:
            if ((void *)v204.st_atimespec.tv_nsec != v27)
              continue;
            while (2)
            {
              if (v113 == v112)
                goto LABEL_326;
              v167 = *v113;
              if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
              {
                v164 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
                if (v197.__r_.__value_.__l.__size_ == v164)
                {
                  if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
                    std::string::__throw_length_error[abi:ne180100]();
                  v168 = (std::string *)v197.__r_.__value_.__r.__words[0];
                  v169 = 0x7FFFFFFFFFFFFFF7;
                  if (v164 < 0x3FFFFFFFFFFFFFF3)
                  {
LABEL_283:
                    if (v164 + 1 > 2 * v164)
                      v170 = v164 + 1;
                    else
                      v170 = 2 * v164;
                    v171 = (v170 & 0x7FFFFFFFFFFFFFF8) + 8;
                    if ((v170 | 7) != 0x17)
                      v171 = v170 | 7;
                    if (v170 >= 0x17)
                      v169 = v171 + 1;
                    else
                      v169 = 23;
                  }
                  v172 = (std::string *)operator new(v169);
                  v165 = v172;
                  if (!v164 || (memmove(v172, v168, v164), v164 != 22))
                    operator delete(v168);
                  v197.__r_.__value_.__r.__words[0] = (std::string::size_type)v165;
                  v197.__r_.__value_.__r.__words[2] = v169 | 0x8000000000000000;
                }
                else
                {
                  v164 = v197.__r_.__value_.__l.__size_;
                  v165 = (std::string *)v197.__r_.__value_.__r.__words[0];
                }
                v197.__r_.__value_.__l.__size_ = v164 + 1;
              }
              else
              {
                if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
                {
                  v168 = &v197;
                  v164 = 22;
                  goto LABEL_283;
                }
                v164 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
                *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
                v165 = &v197;
              }
              v166 = (char *)v165 + v164;
              *v166 = v167;
              v166[1] = 0;
              ++v113;
              continue;
            }
          }
          v194 = v112;
          v195 = (blkcnt_t)v113;
          v118 = (std::sub_match<const char *> *)((char *)v118 + 1);
          v115 = v204.st_rdev;
          st_ino = (std::sub_match<const char *> *)v204.st_ino;
LABEL_208:
          v120 = v115;
          v204.st_rdev = v115 | 0x80;
          v121 = *(_QWORD *)&v204.st_uid;
          *(_QWORD *)&v122 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v122 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *((_OWORD *)v6 + 2) = v122;
          *((_OWORD *)v6 + 3) = v122;
          *(_OWORD *)v6 = v122;
          *((_OWORD *)v6 + 1) = v122;
          v207 = 0;
          v208 = 0;
          v209 = 0;
          v210 = 0;
          v211 = 0;
          v212 = 0;
          v213 = 0;
          v214 = 0;
          v205 = 0u;
          memset(v206, 0, 25);
          v193 = (uint64_t)st_ino;
          v192 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v121, v118, st_ino, (std::vector<std::csub_match> *)&v205, v115 | 0x80u);
          v123 = v207;
          v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
          v125 = v204.st_atimespec.tv_sec;
          v126 = (_QWORD *)v204.st_atimespec.tv_nsec;
          v127 = 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
          v128 = v124 - v127;
          if (v124 <= v127)
          {
            if (v124 < v127)
            {
              v126 = (_QWORD *)(v204.st_atimespec.tv_sec + 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3));
              v204.st_atimespec.tv_nsec = (uint64_t)v126;
            }
            v6 = v196;
            v113 = (char *)v195;
            v136 = v120;
            if (v126 != (_QWORD *)v204.st_atimespec.tv_sec)
            {
LABEL_235:
              v147 = 0;
              v148 = 0;
              v149 = *((_QWORD *)&v205 + 1);
              v150 = v205;
              do
              {
                v151 = 0xAAAAAAAAAAAAAAABLL * ((v149 - v150) >> 3);
                v152 = (_QWORD *)(v150 + v147);
                if (v151 <= v148)
                  v153 = &v206[8];
                else
                  v153 = v152;
                *(_QWORD *)(v125 + v147) = (char *)v118 + *v153 - v123;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v148)
                  v154 = &v206[16];
                else
                  v154 = (_QWORD *)(v205 + v147 + 8);
                *(_QWORD *)(v204.st_atimespec.tv_sec + v147 + 8) = (char *)v118 + *v154 - v123;
                v149 = *((_QWORD *)&v205 + 1);
                v150 = v205;
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3) <= v148)
                  v155 = v6;
                else
                  v155 = (char *)(v205 + v147 + 16);
                v125 = v204.st_atimespec.tv_sec;
                *(_BYTE *)(v204.st_atimespec.tv_sec + v147 + 16) = *v155;
                ++v148;
                v147 += 24;
              }
              while (v148 < 0xAAAAAAAAAAAAAAABLL * ((v204.st_atimespec.tv_nsec - v125) >> 3));
            }
          }
          else
          {
            if (0xAAAAAAAAAAAAAAABLL * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_nsec) >> 3) >= v128)
            {
              v133 = v204.st_atimespec.tv_nsec + 24 * v128;
              v146 = 8 * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3)
                   - 8 * ((v204.st_atimespec.tv_nsec - v204.st_atimespec.tv_sec) >> 3);
              do
              {
                *v126 = 0;
                v126[1] = 0;
                *((_BYTE *)v126 + 16) = 0;
                v126 += 3;
                v146 -= 24;
              }
              while (v146);
              v204.st_atimespec.tv_nsec = v133;
              v6 = v196;
              v113 = (char *)v195;
              v136 = v120;
            }
            else
            {
              if (v124 > 0xAAAAAAAAAAAAAAALL)
                std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
              v129 = 0x5555555555555556 * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_sec) >> 3);
              if (v129 <= v124)
                v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v205 + 1) - v205) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v204.st_mtimespec.tv_sec - v204.st_atimespec.tv_sec) >> 3) >= 0x555555555555555)
                v130 = 0xAAAAAAAAAAAAAAALL;
              else
                v130 = v129;
              if (v130 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v131 = operator new(24 * v130);
              v132 = (__darwin_time_t)v131 + 24 * v127;
              v133 = (uint64_t)v131 + 24 * v124;
              v134 = 24 * v124 - 24 * v127;
              v135 = v132;
              do
              {
                *(_QWORD *)v135 = 0;
                *(_QWORD *)(v135 + 8) = 0;
                *(_BYTE *)(v135 + 16) = 0;
                v135 += 24;
                v134 -= 24;
              }
              while (v134);
              v113 = (char *)v195;
              v136 = v120;
              if (v126 != (_QWORD *)v125)
              {
                do
                {
                  v137 = *(_OWORD *)(v126 - 3);
                  *(_QWORD *)(v132 - 8) = *(v126 - 1);
                  *(_OWORD *)(v132 - 24) = v137;
                  v132 -= 24;
                  v126 -= 3;
                }
                while (v126 != (_QWORD *)v125);
                v126 = (_QWORD *)v125;
              }
              v204.st_atimespec.tv_sec = v132;
              v204.st_atimespec.tv_nsec = v133;
              v204.st_mtimespec.tv_sec = (__darwin_time_t)v131 + 24 * v130;
              v6 = v196;
              if (v126)
              {
                operator delete(v126);
                v133 = v204.st_atimespec.tv_nsec;
              }
            }
            v125 = v204.st_atimespec.tv_sec;
            if (v133 != v204.st_atimespec.tv_sec)
              goto LABEL_235;
          }
          v204.st_mtimespec.tv_nsec = v193;
          v204.st_ctimespec.tv_sec = v193;
          v204.st_birthtimespec.tv_sec = (__darwin_time_t)v118 + v207 - v123;
          v204.st_birthtimespec.tv_nsec = (uint64_t)v118 + v208 - v123;
          LOBYTE(v204.st_size) = v209;
          LOBYTE(v204.st_ctimespec.tv_nsec) = 0;
          v204.st_blocks = (blkcnt_t)v118 + v210 - v123;
          *(_QWORD *)&v204.st_blksize = (char *)v118 + v211 - v123;
          LOBYTE(v204.st_gen) = v212;
          if ((v136 & 0x800) == 0)
            v204.st_qspare[1] = (uint64_t_t)v118 + v207 - v123;
          LOBYTE(v204.st_qspare[0]) = v213;
          v112 = v194;
          if ((_QWORD)v205)
          {
            *((_QWORD *)&v205 + 1) = v205;
            operator delete((void *)v205);
          }
          v27 = (void *)v204.st_atimespec.tv_sec;
          if ((v192 & 1) != 0)
            goto LABEL_38;
        }
        break;
      }
      if (v27)
      {
        v204.st_atimespec.tv_nsec = (uint64_t)v27;
        operator delete(v27);
      }
      v27 = 0;
      LOBYTE(v204.st_qspare[0]) = 0;
      memset(&v204.st_atimespec, 0, 41);
      memset(&v204.st_birthtimespec, 0, 17);
      memset(&v204.st_blocks, 0, 17);
      v204.st_qspare[1] = 0;
      goto LABEL_38;
    }
    if (!v22)
    {
      v5 = v189;
      if (!v204.st_atimespec.tv_nsec)
        goto LABEL_302;
LABEL_301:
      v204.st_atimespec.tv_nsec = (uint64_t)tv_nsec;
      operator delete(tv_nsec);
      goto LABEL_302;
    }
    do
    {
      while (1)
      {
        first = (char)v21->first;
        v175 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          break;
        if (HIBYTE(v197.__r_.__value_.__r.__words[2]) == 22)
        {
          v176 = &v197;
          v177 = 22;
LABEL_312:
          if (v177 + 1 > 2 * v177)
            v179 = v177 + 1;
          else
            v179 = 2 * v177;
          v180 = (v179 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v179 | 7) != 0x17)
            v180 = v179 | 7;
          if (v179 >= 0x17)
            v178 = v180 + 1;
          else
            v178 = 23;
          goto LABEL_320;
        }
        *((_BYTE *)&v197.__r_.__value_.__s + 23) = (*((_BYTE *)&v197.__r_.__value_.__s + 23) + 1) & 0x7F;
        v173 = (char *)&v197 + v175;
        *v173 = first;
        v173[1] = 0;
        v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
        if (!--v22)
          goto LABEL_326;
      }
      v177 = (v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v197.__r_.__value_.__l.__size_ != v177)
      {
        v177 = v197.__r_.__value_.__l.__size_;
        v182 = v197.__r_.__value_.__r.__words[0];
        goto LABEL_325;
      }
      if ((v197.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) == 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v176 = (std::string *)v197.__r_.__value_.__r.__words[0];
      v178 = 0x7FFFFFFFFFFFFFF7;
      if (v177 < 0x3FFFFFFFFFFFFFF3)
        goto LABEL_312;
LABEL_320:
      v181 = operator new(v178);
      v182 = (std::string::size_type)v181;
      if (!v177 || (memmove(v181, v176, v177), v177 != 22))
        operator delete(v176);
      v197.__r_.__value_.__r.__words[0] = v182;
      v197.__r_.__value_.__r.__words[2] = v178 | 0x8000000000000000;
LABEL_325:
      v197.__r_.__value_.__l.__size_ = v177 + 1;
      v183 = (char *)(v182 + v177);
      *v183 = first;
      v183[1] = 0;
      v21 = (std::sub_match<const char *> *)((char *)v21 + 1);
      --v22;
    }
    while (v22);
LABEL_326:
    tv_nsec = (void *)v204.st_atimespec.tv_sec;
    a1 = v188;
    v5 = v189;
    if (v204.st_atimespec.tv_sec)
      goto LABEL_301;
LABEL_302:
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v199.__r_.__value_.__l.__data_);
      v199 = v197;
      if (SHIBYTE(__p[2]) < 0)
LABEL_5:
        operator delete(__p[0]);
    }
    else
    {
      v199 = v197;
      if (SHIBYTE(__p[2]) < 0)
        goto LABEL_5;
    }
  }
  *(_BYTE *)(v187 + 23) = 0;
  *(_BYTE *)v187 = 0;
  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
LABEL_333:
  v184 = (std::__shared_weak_count *)v203;
  if ((_QWORD)v203)
  {
    v185 = (unint64_t *)(v203 + 8);
    do
      v186 = __ldaxr(v185);
    while (__stlxr(v186 - 1, v185));
    if (!v186)
    {
      ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
      std::__shared_weak_count::__release_weak(v184);
    }
  }
  std::locale::~locale(v200);
}

void sub_1BF69D2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::locale a43)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a43);
  _Unwind_Resume(a1);
}

void sub_1BF69D2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  uint64_t v59;

  if (a59 < 0)
    operator delete(__p);
  if (*(char *)(v59 - 185) < 0)
    operator delete(*(void **)(v59 - 208));
  if (a44 < 0)
    operator delete(a39);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a46);
  _Unwind_Resume(a1);
}

void support::fs::createUniquePath(const char *a1@<X0>, std::string *a2@<X8>)
{
  const char *v2;
  timespec v4;
  timespec v5;
  size_t v6;
  __darwin_ino64_t v7;
  int v8;
  timespec v9;
  stat *p_dst;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  timespec v18;
  const char *v19;
  stat __dst;
  stat __src;
  timespec v22;
  timespec v23;
  timespec v24;
  timespec v25;
  timespec v26;
  timespec v27;
  timespec v28;
  uint64_t v29;

  v2 = a1;
  v29 = *MEMORY[0x1E0C80C00];
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__src.st_blksize = v4;
  *(timespec *)__src.st_qspare = v4;
  __src.st_birthtimespec = v4;
  *(timespec *)&__src.st_size = v4;
  __src.st_mtimespec = v4;
  __src.st_ctimespec = v4;
  *(timespec *)&__src.st_uid = v4;
  __src.st_atimespec = v4;
  *(timespec *)&__src.st_dev = v4;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &__src))
  {
    v5.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v5.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    v27 = v5;
    v28 = v5;
    v25 = v5;
    v26 = v5;
    v23 = v5;
    v24 = v5;
    *(timespec *)__src.st_qspare = v5;
    v22 = v5;
    *(timespec *)&__src.st_size = v5;
    *(timespec *)&__src.st_blksize = v5;
    __src.st_ctimespec = v5;
    __src.st_birthtimespec = v5;
    __src.st_atimespec = v5;
    __src.st_mtimespec = v5;
    *(timespec *)&__src.st_dev = v5;
    *(timespec *)&__src.st_uid = v5;
    snprintf((char *)&__src, 0x100uLL, "-%u", 1);
    memset(a2, 170, sizeof(std::string));
    v6 = strlen((const char *)&__src);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_32:
      std::string::__throw_length_error[abi:ne180100]();
    v7 = v6;
    v8 = 2;
    while (v7 < 0x17)
    {
      HIBYTE(__dst.st_gid) = v7;
      p_dst = &__dst;
      if (v7)
        goto LABEL_15;
LABEL_16:
      *((_BYTE *)&p_dst->st_dev + v7) = 0;
      v13 = v2[23];
      if (v13 >= 0)
        v14 = v2;
      else
        v14 = *(const std::string::value_type **)v2;
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v2 + 23);
      else
        v15 = *((_QWORD *)v2 + 1);
      v16 = std::string::insert((std::string *)&__dst, 0, v14, v15);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__dst.st_gid) < 0)
        operator delete(*(void **)&__dst.st_dev);
      v18.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v18.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v18;
      *(timespec *)__dst.st_qspare = v18;
      __dst.st_birthtimespec = v18;
      *(timespec *)&__dst.st_size = v18;
      __dst.st_mtimespec = v18;
      __dst.st_ctimespec = v18;
      *(timespec *)&__dst.st_uid = v18;
      __dst.st_atimespec = v18;
      *(timespec *)&__dst.st_dev = v18;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = (const char *)a2;
      else
        v19 = (const char *)a2->__r_.__value_.__r.__words[0];
      if (stat(v19, &__dst))
        return;
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
        operator delete(a2->__r_.__value_.__l.__data_);
      v9.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v9.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      v27 = v9;
      v28 = v9;
      v25 = v9;
      v26 = v9;
      v23 = v9;
      v24 = v9;
      *(timespec *)__src.st_qspare = v9;
      v22 = v9;
      *(timespec *)&__src.st_size = v9;
      *(timespec *)&__src.st_blksize = v9;
      __src.st_ctimespec = v9;
      __src.st_birthtimespec = v9;
      __src.st_atimespec = v9;
      __src.st_mtimespec = v9;
      *(timespec *)&__src.st_dev = v9;
      *(timespec *)&__src.st_uid = v9;
      snprintf((char *)&__src, 0x100uLL, "-%u", v8);
      memset(a2, 170, sizeof(std::string));
      v7 = strlen((const char *)&__src);
      ++v8;
      if (v7 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_32;
    }
    v11 = (v7 & 0x7FFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    p_dst = (stat *)operator new(v11 + 1);
    __dst.st_ino = v7;
    *(_QWORD *)&__dst.st_uid = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = p_dst;
LABEL_15:
    memcpy(p_dst, &__src, v7);
    goto LABEL_16;
  }
  if (v2[23] < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
  }
}

void sub_1BF69D6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL support::fs::createDir(const char *a1, mode_t a2, int a3)
{
  const char *v5;
  timespec v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  void **v11;
  std::string::size_type v12;
  uint64_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  timespec v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BYTE __p[56];
  void *v27[2];
  uint64_t v28;
  stat v29;

  v5 = a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v29.st_blksize = v6;
  *(timespec *)v29.st_qspare = v6;
  v29.st_birthtimespec = v6;
  *(timespec *)&v29.st_size = v6;
  v29.st_mtimespec = v6;
  v29.st_ctimespec = v6;
  *(timespec *)&v29.st_uid = v6;
  v29.st_atimespec = v6;
  *(timespec *)&v29.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &v29))
    return 1;
  if (!a3)
  {
    if (v5[23] >= 0)
      v21 = v5;
    else
      v21 = *(const char **)v5;
    return mkdir(v21, a2) == 0;
  }
  v27[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = 0x1AAAAAAAAAAAAAALL;
  v27[0] = (void *)0xAAAAAAAAAAAA002FLL;
  memset(&__p[32], 170, 24);
  ctu::tokenize();
  memset(__p, 0, 24);
  if (v5[23] >= 0)
    v7 = v5;
  else
    v7 = *(const char **)v5;
  if (*v7 == 47)
  {
    *(_OWORD *)__p = *(_OWORD *)v27;
    *(_QWORD *)&__p[16] = v28;
  }
  v8 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
  {
    v9 = 0;
    v10 = 1;
    while (1)
    {
      if (v10 != 1)
      {
        if (v28 >= 0)
          v11 = v27;
        else
          v11 = (void **)v27[0];
        if (v28 >= 0)
          v12 = HIBYTE(v28);
        else
          v12 = (std::string::size_type)v27[1];
        std::string::append((std::string *)__p, (const std::string::value_type *)v11, v12);
        v8 = *(_QWORD *)&__p[32];
      }
      v13 = v8 + 24 * v9;
      v14 = *(char *)(v13 + 23);
      v15 = v14 >= 0 ? (const std::string::value_type *)v13 : *(const std::string::value_type **)v13;
      v16 = v14 >= 0 ? *(unsigned __int8 *)(v13 + 23) : *(_QWORD *)(v13 + 8);
      std::string::append((std::string *)__p, v15, v16);
      v17.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v17.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&v29.st_blksize = v17;
      *(timespec *)v29.st_qspare = v17;
      v29.st_birthtimespec = v17;
      *(timespec *)&v29.st_size = v17;
      v29.st_mtimespec = v17;
      v29.st_ctimespec = v17;
      *(timespec *)&v29.st_uid = v17;
      v29.st_atimespec = v17;
      *(timespec *)&v29.st_dev = v17;
      v18 = __p[23] >= 0 ? __p : *(const char **)__p;
      if (stat(v18, &v29))
      {
        v19 = __p[23] >= 0 ? __p : *(const char **)__p;
        if (mkdir(v19, a2))
          break;
      }
      v9 = v10;
      v8 = *(_QWORD *)&__p[32];
      ++v10;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__p[40] - *(_QWORD *)&__p[32]) >> 3) <= v9)
        goto LABEL_42;
    }
    v20 = 0;
    if ((__p[23] & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_42:
  v20 = 1;
  if ((__p[23] & 0x80000000) != 0)
LABEL_43:
    operator delete(*(void **)__p);
LABEL_44:
  v22 = *(_QWORD *)&__p[32];
  if (*(_QWORD *)&__p[32])
  {
    v23 = *(_QWORD *)&__p[40];
    v24 = *(void **)&__p[32];
    if (*(_QWORD *)&__p[40] != *(_QWORD *)&__p[32])
    {
      do
      {
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 24;
      }
      while (v23 != v22);
      v24 = *(void **)&__p[32];
    }
    *(_QWORD *)&__p[40] = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  return v20;
}

void sub_1BF69D97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a14 < 0)
  {
    operator delete(__p);
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    std::vector<std::string>::~vector[abi:ne180100](&a16);
    if ((a24 & 0x80000000) == 0)
      goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(a1);
}

BOOL support::fs::rename(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  int v3;

  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a2 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  rename(a1, a2, a3);
  return v3 == 0;
}

BOOL support::fs::chmod(const char *a1, mode_t a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return chmod(a1, a2) == 0;
}

uint64_t support::fs::removeDir(const char *a1)
{
  const std::__fs::filesystem::path *v1;
  timespec v2;
  _BOOL8 v3;
  std::error_code *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  char *v8;
  __int128 v9;
  int v10;
  std::string::size_type size;
  std::string *v12;
  std::string *p_p;
  int v14;
  size_t v15;
  unint64_t v16;
  char *p_dst;
  uint64_t v18;
  uint64_t v19;
  const std::__fs::filesystem::path *v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  timespec v25;
  std::string *v26;
  std::error_code *v27;
  const std::__fs::filesystem::path *v28;
  std::string *v29;
  char v30;
  std::string *v31;
  DIR *v32;
  DIR *v33;
  dirent *v34;
  const std::__fs::filesystem::path *v35;
  const char *v36;
  void **v37;
  void **v38;
  void *v39;
  std::string __p;
  void *v42;
  void **v43;
  uint64_t v44;
  stat __dst;
  _QWORD v46[5];

  v1 = (const std::__fs::filesystem::path *)a1;
  v46[2] = *MEMORY[0x1E0C80C00];
  v2.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v2.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&__dst.st_blksize = v2;
  *(timespec *)__dst.st_qspare = v2;
  __dst.st_birthtimespec = v2;
  *(timespec *)&__dst.st_size = v2;
  __dst.st_mtimespec = v2;
  __dst.st_ctimespec = v2;
  *(timespec *)&__dst.st_uid = v2;
  __dst.st_atimespec = v2;
  *(timespec *)&__dst.st_dev = v2;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &__dst))
    return 1;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  support::fs::readDir((const char *)v1, (uint64_t)&v42);
  v5 = 0;
  while (1)
  {
    v6 = v5;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (_BYTE *)v42) >> 3);
    v3 = v7 <= v5;
    if (v7 <= v5)
      break;
    v8 = (char *)v42 + 24 * v5;
    memset(&__p, 170, sizeof(__p));
    if (v8[23] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size == 2)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      if (LOWORD(p_p->__r_.__value_.__l.__data_) == 11822)
      {
LABEL_58:
        v30 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_7;
        goto LABEL_6;
      }
    }
    else if (size == 1)
    {
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &__p;
      if (v12->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_58;
    }
    v14 = SHIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    if (v14 >= 0)
      v15 = HIBYTE(v1->__pn_.__r_.__value_.__r.__words[2]);
    else
      v15 = v1->__pn_.__r_.__value_.__l.__size_;
    v16 = v15 + 1;
    memset(&__dst, 170, 24);
    if (v15 + 1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v16 >= 0x17)
    {
      v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v18 = v16 | 7;
      v19 = v18 + 1;
      p_dst = (char *)operator new(v18 + 1);
      __dst.st_ino = v15 + 1;
      *(_QWORD *)&__dst.st_uid = v19 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = (char *)&__dst;
      HIBYTE(__dst.st_gid) = v15 + 1;
      if (!v15)
        goto LABEL_38;
    }
    if (v14 >= 0)
      v20 = v1;
    else
      v20 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
    memmove(p_dst, v20, v15);
LABEL_38:
    *(_WORD *)&p_dst[v15] = 47;
    if (v10 >= 0)
      v21 = &__p;
    else
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v21, size);
    v23 = v22->__r_.__value_.__r.__words[0];
    v46[0] = v22->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
    v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = v23;
    __p.__r_.__value_.__l.__size_ = v46[0];
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v46 + 7);
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v24;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v23 = __p.__r_.__value_.__r.__words[0];
    }
    v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v25;
    *(timespec *)__dst.st_qspare = v25;
    __dst.st_birthtimespec = v25;
    *(timespec *)&__dst.st_size = v25;
    __dst.st_mtimespec = v25;
    __dst.st_ctimespec = v25;
    *(timespec *)&__dst.st_uid = v25;
    __dst.st_atimespec = v25;
    if (v24 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)v23;
    *(timespec *)&__dst.st_dev = v25;
    if (!stat((const char *)v26, &__dst)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v31 = &__p)
        : (v31 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v32 = opendir((const char *)v31), (v33 = v32) != 0) && (v34 = readdir(v32), closedir(v33), v34)))
    {
      std::string::append(&__p, "/", 1uLL);
      v30 = support::fs::removeDir(&__p);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
    else
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = (const std::__fs::filesystem::path *)&__p;
      else
        v28 = (const std::__fs::filesystem::path *)__p.__r_.__value_.__r.__words[0];
      if (!remove(v28, v27))
        goto LABEL_58;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &__p;
      else
        v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v30 = unlink((const char *)v29) == 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
    }
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_7:
    v5 = v6 + 1;
    if ((v30 & 1) == 0)
      goto LABEL_75;
  }
  if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = v1;
  else
    v35 = (const std::__fs::filesystem::path *)v1->__pn_.__r_.__value_.__r.__words[0];
  if (remove(v35, v4))
  {
    if ((v1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = (const char *)v1;
    else
      v36 = (const char *)v1->__pn_.__r_.__value_.__r.__words[0];
    unlink(v36);
  }
LABEL_75:
  v37 = (void **)v42;
  if (v42)
  {
    v38 = v43;
    v39 = v42;
    if (v43 != v42)
    {
      do
      {
        if (*((char *)v38 - 1) < 0)
          operator delete(*(v38 - 3));
        v38 -= 3;
      }
      while (v38 != v37);
      v39 = v42;
    }
    v43 = v37;
    operator delete(v39);
  }
  return v3;
}

void sub_1BF69DE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF69DE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((a16 & 0x80000000) == 0)
  {
    std::vector<std::string>::~vector[abi:ne180100](&a17);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

BOOL support::fs::removeFile(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  const std::__fs::filesystem::path *v2;
  const char *v3;

  v2 = a1;
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (!remove(a1, a2))
    return 1;
  if ((v2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = (const char *)v2;
  else
    v3 = (const char *)v2->__pn_.__r_.__value_.__r.__words[0];
  return unlink(v3) == 0;
}

uint64_t support::fs::removeDirContents(const char *a1, unint64_t a2)
{
  const char *v3;
  void **v4;
  void **v5;
  double v6;
  __int128 v7;
  int v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  int v12;
  size_t v13;
  unint64_t v14;
  stat *p_dst;
  std::string::size_type v16;
  void **v17;
  void **v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  timespec v27;
  void **v28;
  char v29;
  int v30;
  timespec v31;
  void **v32;
  std::error_code *v33;
  const std::__fs::filesystem::path *v34;
  void **v35;
  void **v36;
  DIR *v37;
  DIR *v38;
  dirent *v39;
  int v40;
  size_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  std::string *v47;
  std::string::size_type size;
  std::string *v49;
  __int128 v50;
  char v51;
  char v52;
  void **v53;
  void *v54;
  time_t v56;
  char v57;
  int v58;
  std::string v59;
  void *__p[4];
  std::string v61;
  void *v62;
  void **v63;
  uint64_t v64;
  stat __dst;

  v3 = a1;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  support::fs::readDir(a1, (uint64_t)&v62);
  v56 = time(0);
  v5 = (void **)v62;
  v4 = v63;
  if (v62 == v63)
  {
    v52 = 1;
    if (v62)
      goto LABEL_105;
    return v52 & 1;
  }
  v6 = (double)a2;
  v57 = 1;
  while (1)
  {
    memset(&v61, 170, sizeof(v61));
    if (*((char *)v5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v61, (const std::string::value_type *)*v5, (std::string::size_type)v5[1]);
    }
    else
    {
      v7 = *(_OWORD *)v5;
      v61.__r_.__value_.__r.__words[2] = (std::string::size_type)v5[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v7;
    }
    v8 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    v9 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v61.__r_.__value_.__r.__words[2])
       : v61.__r_.__value_.__l.__size_;
    if (v9 == 2)
      break;
    if (v9 == 1)
    {
      v10 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v61;
      if (v10->__r_.__value_.__s.__data_[0] == 46)
        goto LABEL_95;
    }
LABEL_19:
    memset(__p, 170, 24);
    v12 = v3[23];
    if (v12 >= 0)
      v13 = *((unsigned __int8 *)v3 + 23);
    else
      v13 = *((_QWORD *)v3 + 1);
    v14 = v13 + 1;
    memset(&__dst, 170, 24);
    if (v13 + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v14 >= 0x17)
    {
      v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
      v16 = v9;
      v17 = v5;
      v18 = v4;
      v19 = v3;
      v20 = a2;
      v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v21 = v14 | 7;
      v22 = v21 + 1;
      p_dst = (stat *)operator new(v21 + 1);
      __dst.st_ino = v13 + 1;
      *(_QWORD *)&__dst.st_uid = v22 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = p_dst;
      a2 = v20;
      v3 = v19;
      v4 = v18;
      v5 = v17;
      v9 = v16;
      v8 = v58;
    }
    else
    {
      memset(&__dst, 0, 24);
      p_dst = &__dst;
      HIBYTE(__dst.st_gid) = v13 + 1;
      if (!v13)
        goto LABEL_33;
    }
    if (v12 >= 0)
      v23 = v3;
    else
      v23 = *(const char **)v3;
    memmove(p_dst, v23, v13);
LABEL_33:
    *(_WORD *)((char *)&p_dst->st_dev + v13) = 47;
    if (v8 >= 0)
      v24 = &v61;
    else
      v24 = (std::string *)v61.__r_.__value_.__r.__words[0];
    v25 = std::string::append((std::string *)&__dst, (const std::string::value_type *)v24, v9);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p[2] = (void *)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
    {
      operator delete(*(void **)&__dst.st_dev);
      if (!a2)
        goto LABEL_47;
    }
    else if (!a2)
    {
      goto LABEL_47;
    }
    v27.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v27.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v27;
    *(timespec *)__dst.st_qspare = v27;
    __dst.st_birthtimespec = v27;
    *(timespec *)&__dst.st_size = v27;
    __dst.st_mtimespec = v27;
    __dst.st_ctimespec = v27;
    __dst.st_atimespec = v27;
    *(timespec *)&__dst.st_dev = v27;
    *(timespec *)&__dst.st_uid = v27;
    if (SHIBYTE(__p[2]) >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (!stat((const char *)v28, &__dst) && difftime(v56, __dst.st_ctimespec.tv_sec) >= v6)
    {
LABEL_47:
      v31.tv_sec = 0xAAAAAAAAAAAAAAAALL;
      v31.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
      *(timespec *)&__dst.st_blksize = v31;
      *(timespec *)__dst.st_qspare = v31;
      __dst.st_birthtimespec = v31;
      *(timespec *)&__dst.st_size = v31;
      __dst.st_mtimespec = v31;
      __dst.st_ctimespec = v31;
      __dst.st_atimespec = v31;
      *(timespec *)&__dst.st_dev = v31;
      *(timespec *)&__dst.st_uid = v31;
      if (SHIBYTE(__p[2]) >= 0)
        v32 = __p;
      else
        v32 = (void **)__p[0];
      if (stat((const char *)v32, &__dst)
        || (SHIBYTE(__p[2]) >= 0 ? (v36 = __p) : (v36 = (void **)__p[0]),
            (v37 = opendir((const char *)v36), (v38 = v37) == 0) || (v39 = readdir(v37), closedir(v38), !v39)))
      {
        if (SHIBYTE(__p[2]) >= 0)
          v34 = (const std::__fs::filesystem::path *)__p;
        else
          v34 = (const std::__fs::filesystem::path *)__p[0];
        if (!remove(v34, v33)
          || (SHIBYTE(__p[2]) >= 0 ? (v35 = __p) : (v35 = (void **)__p[0]), !unlink((const char *)v35)))
        {
LABEL_89:
          v30 = 0;
          v57 = 1;
          v29 = 1;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_91;
          goto LABEL_90;
        }
        goto LABEL_59;
      }
      v40 = v3[23];
      if (v40 >= 0)
        v41 = *((unsigned __int8 *)v3 + 23);
      else
        v41 = *((_QWORD *)v3 + 1);
      v42 = v41 + 1;
      memset(&v59, 170, sizeof(v59));
      if (v41 + 1 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v42 >= 0x17)
      {
        v44 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v42 | 7) != 0x17)
          v44 = v42 | 7;
        v45 = v44 + 1;
        v43 = (char *)operator new(v44 + 1);
        v59.__r_.__value_.__l.__size_ = v41 + 1;
        v59.__r_.__value_.__r.__words[2] = v45 | 0x8000000000000000;
        v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      }
      else
      {
        memset(&v59, 0, sizeof(v59));
        v43 = (char *)&v59;
        *((_BYTE *)&v59.__r_.__value_.__s + 23) = v41 + 1;
        if (!v41)
          goto LABEL_80;
      }
      if (v40 >= 0)
        v46 = v3;
      else
        v46 = *(const char **)v3;
      memmove(v43, v46, v41);
LABEL_80:
      *(_WORD *)&v43[v41] = 47;
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v61;
      else
        v47 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      else
        size = v61.__r_.__value_.__l.__size_;
      v49 = std::string::append(&v59, (const std::string::value_type *)v47, size);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(_QWORD *)&__dst.st_uid = *((_QWORD *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)&__dst.st_dev = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = support::fs::removeDir((const char *)&__dst);
      if (SHIBYTE(__dst.st_gid) < 0)
      {
        operator delete(*(void **)&__dst.st_dev);
        if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_88;
      }
      else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_88:
        if ((v51 & 1) != 0)
          goto LABEL_89;
LABEL_59:
        v57 = 0;
        v29 = 0;
        v30 = 2;
        if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          goto LABEL_91;
        goto LABEL_90;
      }
      operator delete(v59.__r_.__value_.__l.__data_);
      if ((v51 & 1) != 0)
        goto LABEL_89;
      goto LABEL_59;
    }
    v29 = 0;
    v30 = 3;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_90:
    operator delete(__p[0]);
LABEL_91:
    if ((v29 & 1) != 0)
      goto LABEL_95;
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_93;
LABEL_96:
    operator delete(v61.__r_.__value_.__l.__data_);
    if (v30 != 3)
      goto LABEL_97;
LABEL_3:
    v5 += 3;
    if (v5 == v4)
      goto LABEL_102;
  }
  v11 = (std::string *)v61.__r_.__value_.__r.__words[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v61;
  if (LOWORD(v11->__r_.__value_.__l.__data_) != 11822)
    goto LABEL_19;
LABEL_95:
  v30 = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_96;
LABEL_93:
  if (v30 == 3)
    goto LABEL_3;
LABEL_97:
  if (!v30)
    goto LABEL_3;
LABEL_102:
  v5 = (void **)v62;
  v52 = v57;
  if (!v62)
    return v52 & 1;
LABEL_105:
  v53 = v63;
  v54 = v5;
  if (v63 != v5)
  {
    do
    {
      if (*((char *)v53 - 1) < 0)
        operator delete(*(v53 - 3));
      v53 -= 3;
    }
    while (v53 != v5);
    v54 = v62;
  }
  v63 = v5;
  operator delete(v54);
  return v52 & 1;
}

void sub_1BF69E4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::vector<std::string>::~vector[abi:ne180100](&a31);
  _Unwind_Resume(a1);
}

void support::fs::moveDirUnique(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const std::__fs::filesystem::path *v4;
  timespec v6;
  const char *v7;
  DIR *v8;
  DIR *v9;
  dirent *v10;
  std::error_code *v11;
  const std::__fs::filesystem::path *v12;
  const std::__fs::filesystem::path *v13;
  int v14;
  std::string __p;
  stat v16;

  v4 = (const std::__fs::filesystem::path *)a1;
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v6.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v16.st_blksize = v6;
  *(timespec *)v16.st_qspare = v6;
  v16.st_birthtimespec = v6;
  *(timespec *)&v16.st_size = v6;
  v16.st_mtimespec = v6;
  v16.st_ctimespec = v6;
  *(timespec *)&v16.st_uid = v6;
  v16.st_atimespec = v6;
  *(timespec *)&v16.st_dev = v6;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (stat(a1, &v16))
    goto LABEL_4;
  v7 = (v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
     ? (const char *)v4
     : (const char *)v4->__pn_.__r_.__value_.__r.__words[0];
  v8 = opendir(v7);
  if (!v8)
    goto LABEL_4;
  v9 = v8;
  v10 = readdir(v8);
  closedir(v9);
  if (!v10)
    goto LABEL_4;
  memset((void *)a3, 170, 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  support::fs::createUniquePath((const char *)&__p, (std::string *)a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = v4;
  else
    v12 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  if (*(char *)(a3 + 23) >= 0)
    v13 = (const std::__fs::filesystem::path *)a3;
  else
    v13 = *(const std::__fs::filesystem::path **)a3;
  rename(v12, v13, v11);
  if (v14)
  {
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
LABEL_4:
    *(_BYTE *)(a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void sub_1BF69E6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void support::fs::getFileName(std::string *a1@<X8>)
{
  __int128 v2;
  void **v3;
  void *v4;
  void *__p[3];

  memset(__p, 170, sizeof(__p));
  ctu::tokenize();
  if (*((char *)__p[1] - 1) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)__p[1] - 3), *((_QWORD *)__p[1] - 2));
  }
  else
  {
    v2 = *(_OWORD *)((char *)__p[1] - 24);
    a1->__r_.__value_.__r.__words[2] = *((_QWORD *)__p[1] - 1);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v2;
  }
  if (__p[0])
  {
    v3 = (void **)__p[1];
    v4 = __p[0];
    if (__p[1] != __p[0])
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != __p[0]);
      v4 = __p[0];
    }
    operator delete(v4);
  }
}

void sub_1BF69E790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t support::fs::lockDir(const char *a1)
{
  uint64_t v1;
  _QWORD v3[2];
  pid_t v4;
  int v5;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v1 = open(a1, 0);
  if ((v1 & 0x80000000) != 0)
    return v1;
  v5 = 1;
  v3[0] = 0;
  v3[1] = 0;
  v4 = getpid();
  if ((fcntl(v1, 9, v3) & 0x80000000) == 0)
    return v1;
  close(v1);
  return 0xFFFFFFFFLL;
}

BOOL support::fs::unlockDir(support::fs *this)
{
  int v1;
  _BOOL8 v2;
  _QWORD v4[2];
  pid_t v5;
  int v6;

  v1 = (int)this;
  v6 = 2;
  v4[0] = 0;
  v4[1] = 0;
  v5 = getpid();
  v2 = fcntl(v1, 9, v4) == 0;
  close(v1);
  return v2;
}

BOOL support::fs::getFilteredFiles(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  DIR *v7;
  DIR *v8;
  dirent *v9;
  char *d_name;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::string::size_type v19;
  _BYTE *v20;
  _WORD *v21;
  DIR *v22;
  uint64_t v23;
  uint64_t v24;
  timespec v25;
  int v26;
  size_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const std::string::value_type *v33;
  std::string *v34;
  __int128 v35;
  void **v36;
  std::sub_match<const char *> *v37;
  std::sub_match<std::__wrap_iter<const char *>> *v38;
  __int128 v39;
  int v40;
  int v41;
  unint64_t v42;
  __int128 v43;
  std::string *v44;
  unsigned __int8 v45;
  NSObject *v46;
  _BOOL8 result;
  int *v48;
  char *v49;
  char v50;
  const char *v52;
  std::string v53;
  _BYTE __dst[24];
  void *__p[2];
  _QWORD v56[9];
  __int128 v57;
  uint64_t v58;
  stat v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *__error() = 0;
  if (a1[23] < 0)
  {
    v7 = opendir(*(const char **)a1);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = opendir(a1);
    if (v7)
    {
LABEL_3:
      v8 = v7;
      v9 = readdir(v7);
      if (v9)
      {
        v52 = a1;
        v50 = 0;
        while (1)
        {
          d_name = v9->d_name;
          memset(__dst, 170, sizeof(__dst));
          v11 = strlen(v9->d_name);
          if (v11 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v12 = v11;
          if (v11 >= 0x17)
            break;
          __dst[23] = v11;
          v13 = __dst;
          if (v11)
            goto LABEL_12;
LABEL_13:
          v13[v12] = 0;
          v16 = __dst[23];
          v17 = __dst[23];
          v18 = *(_QWORD *)&__dst[8];
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          if (v19 == 2)
          {
            v21 = *(_WORD **)__dst;
            if (__dst[23] >= 0)
              v21 = __dst;
            if (*v21 == 11822)
              goto LABEL_73;
          }
          else if (v19 == 1)
          {
            v20 = *(_BYTE **)__dst;
            if (__dst[23] >= 0)
              v20 = __dst;
            if (*v20 == 46)
              goto LABEL_73;
          }
          if ((a4 & 1) != 0)
            goto LABEL_53;
          v22 = v8;
          v23 = a4;
          v24 = a3;
          v25.tv_sec = 0xAAAAAAAAAAAAAAAALL;
          v25.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
          *(timespec *)&v59.st_blksize = v25;
          *(timespec *)v59.st_qspare = v25;
          v59.st_birthtimespec = v25;
          *(timespec *)&v59.st_size = v25;
          v59.st_mtimespec = v25;
          v59.st_ctimespec = v25;
          *(timespec *)&v59.st_uid = v25;
          v59.st_atimespec = v25;
          *(timespec *)&v59.st_dev = v25;
          v26 = v52[23];
          if (v26 >= 0)
            v27 = *((unsigned __int8 *)v52 + 23);
          else
            v27 = *((_QWORD *)v52 + 1);
          v28 = v27 + 1;
          memset(&v53, 170, sizeof(v53));
          if (v27 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v28 >= 0x17)
          {
            v30 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v28 | 7) != 0x17)
              v30 = v28 | 7;
            v31 = v30 + 1;
            v29 = (char *)operator new(v30 + 1);
            v53.__r_.__value_.__l.__size_ = v27 + 1;
            v53.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
            v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          }
          else
          {
            memset(&v53, 0, sizeof(v53));
            v29 = (char *)&v53;
            *((_BYTE *)&v53.__r_.__value_.__s + 23) = v27 + 1;
            if (!v27)
              goto LABEL_40;
          }
          if (v26 >= 0)
            v32 = v52;
          else
            v32 = *(const char **)v52;
          memmove(v29, v32, v27);
LABEL_40:
          a3 = v24;
          *(_WORD *)&v29[v27] = 47;
          if (v17 >= 0)
            v33 = __dst;
          else
            v33 = *(const std::string::value_type **)__dst;
          v34 = std::string::append(&v53, v33, v19);
          a4 = v23;
          v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v56[0] = *((_QWORD *)&v34->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          if (v56[0] >= 0)
            v36 = __p;
          else
            v36 = (void **)__p[0];
          lstat((const char *)v36, &v59);
          v8 = v22;
          if (SHIBYTE(v56[0]) < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_48:
              if ((v59.st_mode & 0xF000) != 0xA000)
                goto LABEL_52;
              goto LABEL_73;
            }
          }
          else if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_48;
          }
          operator delete(v53.__r_.__value_.__l.__data_);
          if ((v59.st_mode & 0xF000) != 0xA000)
          {
LABEL_52:
            v16 = __dst[23];
            v18 = *(_QWORD *)&__dst[8];
            LOBYTE(v17) = __dst[23];
LABEL_53:
            if ((v17 & 0x80u) == 0)
              v37 = (std::sub_match<const char *> *)__dst;
            else
              v37 = *(std::sub_match<const char *> **)__dst;
            if ((v17 & 0x80u) != 0)
              v16 = v18;
            v38 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v37 + v16);
            *(_QWORD *)&v39 = 0xAAAAAAAAAAAAAAAALL;
            *((_QWORD *)&v39 + 1) = 0xAAAAAAAAAAAAAAAALL;
            v57 = v39;
            v56[6] = 0xAAAAAAAAAAAAAA00;
            v56[3] = 0xAAAAAAAAAAAAAAAALL;
            v56[4] = 0;
            v56[5] = 0;
            v56[7] = 0;
            v56[8] = 0;
            LOBYTE(v57) = 0;
            BYTE8(v57) = 0;
            v58 = 0;
            *(_OWORD *)__p = 0u;
            memset(v56, 0, 25);
            *(_OWORD *)&v59.st_birthtimespec.tv_nsec = v39;
            v59.st_ctimespec.tv_sec = 0xAAAAAAAAAAAAAAAALL;
            v59.st_atimespec.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
            memset(&v59.st_mtimespec, 0, 17);
            memset(&v59.st_ctimespec.tv_nsec, 0, 17);
            LOBYTE(v59.st_size) = 0;
            v59.st_blocks = 0;
            memset(&v59, 0, 41);
            v40 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a2, v37, (std::sub_match<const char *> *)((char *)v37 + v16), (std::vector<std::csub_match> *)&v59, 4160);
            std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v37, v38, (uint64_t *)&v59.st_dev, 0);
            if (*(_QWORD *)&v59.st_dev)
            {
              v59.st_ino = *(_QWORD *)&v59.st_dev;
              operator delete(*(void **)&v59.st_dev);
            }
            if ((_BYTE)v57)
              v41 = v40 ^ 1;
            else
              v41 = 1;
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if ((v40 & v41) != 0)
            {
              v42 = *(_QWORD *)(a3 + 8);
              if (v42 >= *(_QWORD *)(a3 + 16))
              {
                v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a3, (uint64_t)__dst);
              }
              else
              {
                if ((__dst[23] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), *(const std::string::value_type **)__dst, *(std::string::size_type *)&__dst[8]);
                }
                else
                {
                  v43 = *(_OWORD *)__dst;
                  *(_QWORD *)(v42 + 16) = *(_QWORD *)&__dst[16];
                  *(_OWORD *)v42 = v43;
                }
                v44 = (std::string *)(v42 + 24);
                *(_QWORD *)(a3 + 8) = v42 + 24;
              }
              *(_QWORD *)(a3 + 8) = v44;
              v50 = 1;
            }
          }
LABEL_73:
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v9 = readdir(v8);
          if (!v9)
            goto LABEL_85;
        }
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = operator new(v14 + 1);
        *(_QWORD *)&__dst[8] = v12;
        *(_QWORD *)&__dst[16] = v15 | 0x8000000000000000;
        *(_QWORD *)__dst = v13;
LABEL_12:
        memmove(v13, d_name, v12);
        goto LABEL_13;
      }
      v50 = 0;
LABEL_85:
      closedir(v8);
      return v50 & 1;
    }
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v46 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v46 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v48 = __error();
  v49 = strerror(*v48);
  v59.st_dev = 136315394;
  *(_QWORD *)&v59.st_mode = a1;
  WORD2(v59.st_ino) = 2080;
  *(__darwin_ino64_t *)((char *)&v59.st_ino + 6) = (__darwin_ino64_t)v49;
  _os_log_error_impl(&dword_1BF566000, v46, OS_LOG_TYPE_ERROR, "Error %s (%s)\n", (uint8_t *)&v59, 0x16u);
  return 0;
}

void sub_1BF69EE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v49 + 8) = v50;
  if (a30 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF69F0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ifstream::~ifstream(&a9);
  _Unwind_Resume(a1);
}

void support::fs::getBasePath(const std::string::value_type **a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;
  size_t v4;
  size_t v5;
  std::string::size_type size;
  char v7;
  std::string *p_p;
  unsigned __int8 *v9;
  BOOL v10;
  BOOL v11;
  size_t v12;
  __int128 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  std::string __p;

  v2 = (unsigned __int8 *)a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *a1, 0);
      return;
    }
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = a1[2];
    return;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(&__p, 170, sizeof(__p));
  support::fs::getFileName(&__p);
  v4 = *((_QWORD *)v2 + 1);
  if ((v2[23] & 0x80u) == 0)
  {
    v5 = v2[23];
  }
  else
  {
    v2 = *(unsigned __int8 **)v2;
    v5 = v4;
  }
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  v9 = &v2[v5];
  if (v5)
    v10 = size == 0;
  else
    v10 = 1;
  if (v10)
  {
    v15 = &v2[v5];
  }
  else
  {
    v14 = v2;
    v15 = &v2[v5];
    do
    {
      if (*v14 == p_p->__r_.__value_.__s.__data_[0])
      {
        v16 = 1;
        while (size != v16)
        {
          if (&v14[v16] == v9)
            goto LABEL_20;
          v17 = v14[v16];
          v18 = p_p->__r_.__value_.__s.__data_[v16++];
          if (v17 != v18)
            goto LABEL_37;
        }
        v15 = v14;
      }
LABEL_37:
      ++v14;
    }
    while (v14 != v9);
  }
LABEL_20:
  v11 = v15 != v9 || size == 0;
  if (v11 && v15 - v2 != -1)
  {
    if (v5 >= v15 - v2)
      v12 = v15 - v2;
    else
      v12 = v5;
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v12 >= 0x17)
    {
      v19 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v19 = v12 | 7;
      v20 = v19 + 1;
      v13 = (__int128 *)operator new(v19 + 1);
      *((_QWORD *)&v21 + 1) = v12;
      v22 = v20 | 0x8000000000000000;
      *(_QWORD *)&v21 = v13;
    }
    else
    {
      HIBYTE(v22) = v12;
      v13 = &v21;
      if (!v12)
      {
        LOBYTE(v21) = 0;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        {
LABEL_33:
          *(_OWORD *)a2 = v21;
          *(_QWORD *)(a2 + 16) = v22;
          v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          goto LABEL_34;
        }
LABEL_49:
        operator delete(*(void **)a2);
        goto LABEL_33;
      }
    }
    memmove(v13, v2, v12);
    *((_BYTE *)v13 + v12) = 0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_49;
  }
LABEL_34:
  if (v7 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF69F2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void support::fs::getLastNumberDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  void **v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  char *v31;
  char *v32;
  unsigned int v33;
  void *v34;
  __int128 v35;
  std::string *v36;
  unsigned int v37;
  std::string::size_type v38;
  std::string::size_type v39;
  void **v40;
  int v41;
  size_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  void **v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::string v59;
  std::string v60;
  std::string __p;
  std::locale v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::string v68;
  void *v69;
  void **v70;
  uint64_t v71;
  _BYTE v72[48];
  __int128 v73;
  void *__dst[3];
  std::string v75;
  std::string v76;
  std::string v77;

  memset(&v77, 170, sizeof(v77));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v77 = *(std::string *)a1;
  v4 = (std::string *)v77.__r_.__value_.__r.__words[0];
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v77;
  else
    v5 = (std::string *)v77.__r_.__value_.__r.__words[0];
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  else
    size = v77.__r_.__value_.__l.__size_;
  v7 = size + 1;
  do
  {
    v8 = v7 - 1;
    if (v7 == 1)
      goto LABEL_20;
    v9 = v5->__r_.__value_.__s.__data_[v7-- - 2];
  }
  while (v9 == 47);
  if (v8)
  {
    v10 = v8 - 1;
    if ((*((_BYTE *)&v77.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v77.__r_.__value_.__l.__size_ > v10)
      {
        v77.__r_.__value_.__l.__size_ = v8;
        goto LABEL_19;
      }
    }
    else if (v10 < HIBYTE(v77.__r_.__value_.__r.__words[2]))
    {
      *((_BYTE *)&v77.__r_.__value_.__s + 23) = v8 & 0x7F;
      v4 = &v77;
LABEL_19:
      v4->__r_.__value_.__s.__data_[v8] = 0;
      goto LABEL_20;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_20:
  memset(&v76, 170, sizeof(v76));
  support::fs::getBasePath((const std::string::value_type **)&v77.__r_.__value_.__l.__data_, (uint64_t)&v76);
  v11 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = v77.__r_.__value_.__l.__size_;
  if (!v11)
    goto LABEL_33;
  v12 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = v76.__r_.__value_.__l.__size_;
  if (!v12)
  {
LABEL_33:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_132;
      goto LABEL_137;
    }
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    goto LABEL_131;
  }
  memset(&v75, 170, sizeof(v75));
  support::fs::getFileName(&v75);
  v13 = SHIBYTE(v75.__r_.__value_.__r.__words[2]);
  if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
  else
    v14 = v75.__r_.__value_.__l.__size_;
  v15 = v14 + 13;
  memset(__dst, 170, sizeof(__dst));
  if (v14 + 13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    __dst[1] = (void *)(v14 + 13);
    __dst[2] = (void *)(v18 | 0x8000000000000000);
    __dst[0] = v16;
  }
  else
  {
    memset(__dst, 0, sizeof(__dst));
    v16 = __dst;
    HIBYTE(__dst[2]) = v14 + 13;
    if (!v14)
      goto LABEL_44;
  }
  if (v13 >= 0)
    v19 = &v75;
  else
    v19 = (std::string *)v75.__r_.__value_.__r.__words[0];
  memmove(v16, v19, v14);
LABEL_44:
  strcpy((char *)v16 + v14, "-[[:alnum:]]*");
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v20;
  v73 = v20;
  *(_OWORD *)v72 = v20;
  *(_OWORD *)&v72[16] = v20;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__dst, 0);
  v69 = 0;
  v70 = 0;
  v71 = 0;
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v68, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
  else
    v68 = v76;
  std::locale::locale(&v62, (const std::locale *)v72);
  v63 = *(_OWORD *)&v72[8];
  v64 = *(_OWORD *)&v72[24];
  v65 = *(_QWORD *)&v72[40];
  v66 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v21 = (unint64_t *)(v73 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v67 = *((_QWORD *)&v73 + 1);
  if (!support::fs::getFilteredFiles((const char *)&v68, (uint64_t)&v62, (uint64_t)&v69, 0))
  {
    v28 = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    std::locale::~locale(&v62);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    goto LABEL_89;
  }
  v23 = (void **)v69;
  v24 = v70;
  v25 = v66;
  if (v66)
  {
    v26 = (unint64_t *)&v66->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  std::locale::~locale(&v62);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v68.__r_.__value_.__l.__data_);
    if (v23 == v24)
    {
LABEL_89:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
        v40 = (void **)v69;
        if (!v69)
          goto LABEL_125;
        goto LABEL_118;
      }
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_117:
      v40 = (void **)v69;
      if (!v69)
        goto LABEL_125;
      goto LABEL_118;
    }
  }
  else if (v23 == v24)
  {
    goto LABEL_89;
  }
  v31 = (char *)v69;
  v32 = (char *)v70;
  if (v69 != v70)
  {
    v33 = 0;
    while (1)
    {
      memset(&__p, 170, sizeof(__p));
      ctu::tokenize();
      memset(&v60, 170, sizeof(v60));
      if (*(char *)(__p.__r_.__value_.__l.__size_ - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(__p.__r_.__value_.__l.__size_ - 24), *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 16));
      }
      else
      {
        v35 = *(_OWORD *)(__p.__r_.__value_.__l.__size_ - 24);
        v60.__r_.__value_.__r.__words[2] = *(_QWORD *)(__p.__r_.__value_.__l.__size_ - 8);
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v35;
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v60;
      else
        v36 = (std::string *)v60.__r_.__value_.__r.__words[0];
      v37 = strtol((const char *)v36, 0, 0);
      if (v33 <= v37)
        v33 = v37;
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v60.__r_.__value_.__l.__data_);
        v38 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
LABEL_84:
          v39 = __p.__r_.__value_.__l.__size_;
          v34 = (void *)v38;
          if (__p.__r_.__value_.__l.__size_ != v38)
          {
            do
            {
              if (*(char *)(v39 - 1) < 0)
                operator delete(*(void **)(v39 - 24));
              v39 -= 24;
            }
            while (v39 != v38);
            v34 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v38;
          operator delete(v34);
        }
      }
      else
      {
        v38 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
          goto LABEL_84;
      }
      v31 += 24;
      if (v31 == v32)
        goto LABEL_94;
    }
  }
  v33 = 0;
LABEL_94:
  v41 = SHIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  else
    v42 = v77.__r_.__value_.__l.__size_;
  v43 = v42 + 1;
  memset(&v60, 170, sizeof(v60));
  if (v42 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v43 >= 0x17)
  {
    v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v45 = v43 | 7;
    v46 = v45 + 1;
    v44 = (char *)operator new(v45 + 1);
    v60.__r_.__value_.__l.__size_ = v42 + 1;
    v60.__r_.__value_.__r.__words[2] = v46 | 0x8000000000000000;
    v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  }
  else
  {
    memset(&v60, 0, sizeof(v60));
    v44 = (char *)&v60;
    *((_BYTE *)&v60.__r_.__value_.__s + 23) = v42 + 1;
    if (!v42)
      goto LABEL_108;
  }
  if (v41 >= 0)
    v47 = &v77;
  else
    v47 = (std::string *)v77.__r_.__value_.__r.__words[0];
  memmove(v44, v47, v42);
LABEL_108:
  *(_WORD *)&v44[v42] = 45;
  std::to_string(&v59, v33);
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v59;
  else
    v48 = (std::string *)v59.__r_.__value_.__r.__words[0];
  if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v49 = HIBYTE(v59.__r_.__value_.__r.__words[2]);
  else
    v49 = v59.__r_.__value_.__l.__size_;
  v50 = std::string::append(&v60, (const std::string::value_type *)v48, v49);
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = std::string::append(&__p, "/", 1uLL);
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_116:
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_117;
      goto LABEL_141;
    }
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_116;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_117;
LABEL_141:
  operator delete(v60.__r_.__value_.__l.__data_);
  v40 = (void **)v69;
  if (!v69)
    goto LABEL_125;
LABEL_118:
  v54 = v70;
  v55 = v40;
  if (v70 != v40)
  {
    do
    {
      if (*((char *)v54 - 1) < 0)
        operator delete(*(v54 - 3));
      v54 -= 3;
    }
    while (v54 != v40);
    v55 = v69;
  }
  v70 = v40;
  operator delete(v55);
LABEL_125:
  v56 = (std::__shared_weak_count *)v73;
  if (!(_QWORD)v73)
    goto LABEL_129;
  v57 = (unint64_t *)(v73 + 8);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    std::locale::~locale((std::locale *)v72);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
LABEL_130:
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_131;
      goto LABEL_136;
    }
  }
  else
  {
LABEL_129:
    std::locale::~locale((std::locale *)v72);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_130;
  }
  operator delete(__dst[0]);
  if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_131:
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_132;
    goto LABEL_137;
  }
LABEL_136:
  operator delete(v75.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_132:
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_138:
    operator delete(v77.__r_.__value_.__l.__data_);
    return;
  }
LABEL_137:
  operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_138;
}

void sub_1BF69FA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::locale a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,uint64_t a46,std::locale a47)
{
  uint64_t v47;

  if (a28 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a21 & 0x80000000) == 0)
      {
LABEL_8:
        std::vector<std::string>::~vector[abi:ne180100](&a44);
        std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a47);
        if (*(char *)(v47 - 161) < 0)
        {
          operator delete(*(void **)(v47 - 184));
          if ((*(char *)(v47 - 137) & 0x80000000) == 0)
          {
LABEL_10:
            if ((*(char *)(v47 - 113) & 0x80000000) == 0)
              goto LABEL_11;
            goto LABEL_15;
          }
        }
        else if ((*(char *)(v47 - 137) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)(v47 - 160));
        if ((*(char *)(v47 - 113) & 0x80000000) == 0)
        {
LABEL_11:
          if ((*(char *)(v47 - 89) & 0x80000000) == 0)
            goto LABEL_12;
          goto LABEL_16;
        }
LABEL_15:
        operator delete(*(void **)(v47 - 136));
        if ((*(char *)(v47 - 89) & 0x80000000) == 0)
LABEL_12:
          _Unwind_Resume(a1);
LABEL_16:
        operator delete(*(void **)(v47 - 112));
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(a16);
      goto LABEL_8;
    }
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  if ((a21 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::fs::getPartitionInfo(uint64_t a1, _QWORD *a2, _QWORD *a3, unint64_t *a4)
{
  int v7;
  _BOOL8 result;
  int v9;
  uint64_t f_bavail;
  statvfs v11;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      memset(&v11, 0, sizeof(v11));
      v7 = statvfs((const char *)a1, &v11);
      result = v7 == 0;
      if (v7)
        return result;
LABEL_7:
      *a4 = v11.f_frsize;
      f_bavail = v11.f_bavail;
      *a2 = v11.f_blocks;
      *a3 = f_bavail;
      return result;
    }
    return 0;
  }
  if (!*(_QWORD *)(a1 + 8))
    return 0;
  memset(&v11, 0, sizeof(v11));
  v9 = statvfs(*(const char **)a1, &v11);
  result = v9 == 0;
  if (!v9)
    goto LABEL_7;
  return result;
}

_QWORD *support::fs::readCurrentLine@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  std::locale v9[16];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::istream::tellg();
  v4 = v10;
  if (v10 >= 2)
  {
    do
    {
      std::istream::seekg();
      if (std::istream::peek() == 10)
        break;
    }
    while (v4-- > 1);
  }
  std::istream::seekg();
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v6 = std::locale::use_facet(v9, MEMORY[0x1E0DE4A90]);
  v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(v9);
  return std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)a2, v7);
}

void sub_1BF69FD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF69FDB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
  {
    operator delete(*(void **)v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = -86;
  MEMORY[0x1C3B8C1C0](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1BF69FF0C(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BF69FED8);
  }
  __cxa_rethrow();
}

void sub_1BF69FF50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void BootModule::create(capabilities::radio *a1@<X0>, BootModule **a2@<X8>)
{
  std::__shared_weak_count **v4;
  std::__shared_weak_count **v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  BootModule *v20;
  unint64_t v21;
  _QWORD v22[2];
  uint64_t v23[2];
  BootModule *v24;
  unint64_t v25;

  *a2 = 0;
  a2[1] = 0;
  if (capabilities::radio::vendor(a1) != 1)
    return;
  v4 = (std::__shared_weak_count **)operator new(0x1E8uLL);
  v5 = v4;
  v6 = *(_QWORD *)a1;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v23[0] = v6;
  v23[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v22[0] = 0;
  v22[1] = 0;
  BootModule::BootModule((uint64_t)v4, v23, v22);
  v24 = (BootModule *)v5;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E791DC48;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v25 = (unint64_t)v10;
  v12 = v5[16];
  if (!v12)
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v5[15] = (std::__shared_weak_count *)v5;
    v5[16] = v10;
    do
LABEL_15:
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_18;
  }
  if (v12->__shared_owners_ == -1)
  {
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v5[15] = (std::__shared_weak_count *)v5;
    v5[16] = v10;
    std::__shared_weak_count::__release_weak(v12);
    goto LABEL_15;
  }
LABEL_18:
  v20 = v24;
  ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v24 + 48);
  v21 = v25;
  *a2 = v20;
  a2[1] = (BootModule *)v21;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  BootModule::init(v20);
}

void sub_1BF6A00DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  std::__shared_weak_count *v14;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

void sub_1BF6A0170(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF6A0184(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BootModule::init(BootModule *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 15);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  v4 = (char *)this + 120;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN10BootModule4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_16_4;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_142_0;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 17);
  if (!*((_QWORD *)this + 18))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t BootModule::BootModule(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *initially_inactive;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  config::hw *v22;
  const char *v23;
  size_t v24;
  std::string::size_type v25;
  std::string *p_dst;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  void **v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  void *v37[2];
  char v38;
  std::string __dst;
  uint64_t v40;
  uint64_t v41;
  void *__p[2];
  void (*v43)(uint64_t);
  void *v44;
  uint64_t *v45;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E791D218;
  *(_QWORD *)(a1 + 48) = &unk_1E791D2A0;
  v11 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v37, "com.apple.telephony.abm", "boot.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  __p[0] = (void *)MEMORY[0x1E0C809B0];
  __p[1] = (void *)0x40000000;
  v43 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v44 = &__block_descriptor_tmp_13_8;
  v45 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = (std::__shared_weak_count *)unk_1ED70F6A0;
    v40 = GetABMLogServer(void)::sLogServer;
    v41 = unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __p);
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = (std::__shared_weak_count *)unk_1ED70F6A0;
    v40 = GetABMLogServer(void)::sLogServer;
    v41 = unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v18 = dispatch_queue_create_with_target_V2("boot.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v18, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v18);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v18;
  if (v18)
  {
    dispatch_retain(v18);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v18);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E791DC08;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
    *v11 = off_1E791DC98;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__dst);
    *v11 = off_1E791DC98;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v37);
  *(_QWORD *)a1 = off_1E791D218;
  *(_QWORD *)(a1 + 48) = &unk_1E791D2A0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 196) = 15;
  v22 = (config::hw *)dispatch_semaphore_create(0);
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = v22;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = -1;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 384) = 0;
  config::hw::regionInfo(v22);
  *(_QWORD *)(a1 + 416) = dispatch_group_create();
  *(_QWORD *)(a1 + 424) = 0;
  v23 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v24 = strlen(v23);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    p_dst = (std::string *)operator new(v27 + 1);
    __dst.__r_.__value_.__l.__size_ = v25;
    __dst.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_32;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v24;
  p_dst = &__dst;
  if (v24)
LABEL_32:
    memmove(p_dst, v23, v25);
  p_dst->__r_.__value_.__s.__data_[v25] = 0;
  v38 = 11;
  strcpy((char *)v37, ".resetqueue");
  v29 = std::string::append(&__dst, (const std::string::value_type *)v37, 0xBuLL);
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v43 = (void (*)(uint64_t))v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43) >= 0)
    v31 = __p;
  else
    v31 = (void **)__p[0];
  v32 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(_QWORD *)(a1 + 432) = dispatch_queue_create((const char *)v31, v32);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
    if ((v38 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_44:
    operator delete(v37[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
    goto LABEL_45;
  }
  operator delete(__p[0]);
  if (v38 < 0)
    goto LABEL_44;
LABEL_38:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_39;
LABEL_45:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_39:
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = *a3;
  v33 = a3[1];
  *(_QWORD *)(a1 + 480) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_WORD *)(a1 + 228) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 256) = 8;
  return a1;
}

void sub_1BF6A0808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;
  _QWORD *v24;
  void **v25;
  void **v26;
  uint64_t v27;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  const void **v33;
  const void *v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      v29 = *(NSObject **)(v23 + 424);
      if (!v29)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  v29 = *(NSObject **)(v23 + 424);
  if (!v29)
    goto LABEL_9;
LABEL_7:
  dispatch_group_leave(v29);
  v30 = *(NSObject **)(v23 + 424);
  if (v30)
    dispatch_release(v30);
LABEL_9:
  v31 = *(NSObject **)(v23 + 416);
  if (v31)
  {
    dispatch_release(v31);
    if ((*(char *)(v23 + 415) & 0x80000000) == 0)
    {
LABEL_11:
      v32 = v27 + 64;
      if ((*(char *)(v23 + 375) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_17;
    }
  }
  else if ((*(char *)(v23 + 415) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(*v25);
  v32 = v27 + 64;
  if ((*(char *)(v23 + 375) & 0x80000000) == 0)
  {
LABEL_12:
    v33 = (const void **)(v27 + 56);
    if ((*(char *)(v23 + 327) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_18;
  }
LABEL_17:
  operator delete(*(void **)(v27 + 144));
  v33 = (const void **)(v27 + 56);
  if ((*(char *)(v23 + 327) & 0x80000000) == 0)
  {
LABEL_13:
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v32);
    v34 = *v33;
    if (!*v33)
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(*(void **)(v27 + 96));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v32);
  v34 = *v33;
  if (!*v33)
  {
LABEL_20:
    v35 = *(NSObject **)(v23 + 216);
    if (v35)
    {
      dispatch_group_leave(v35);
      v36 = *(NSObject **)(v23 + 216);
      if (v36)
        dispatch_release(v36);
    }
    if (*(_QWORD *)v27)
    {
      dispatch_group_leave(*(dispatch_group_t *)v27);
      if (*(_QWORD *)v27)
        dispatch_release(*(dispatch_object_t *)v27);
    }
    v37 = *(NSObject **)(v23 + 200);
    if (v37)
      dispatch_release(v37);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v27 - 32);
    if (*(char *)(v23 + 175) < 0)
      operator delete(*v26);
    ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v24);
    Service::~Service((Service *)v23);
    _Unwind_Resume(a1);
  }
LABEL_19:
  _Block_release(v34);
  goto LABEL_20;
}

_QWORD *ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791DC08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791DC08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void BootModule::~BootModule(BootModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint8_t v34[16];

  *(_QWORD *)this = off_1E791D218;
  *((_QWORD *)this + 6) = &unk_1E791D2A0;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v34, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 60);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *((_QWORD *)this + 55);
  if (v9)
  {
    dispatch_resume(v9);
    v10 = *((_QWORD *)this + 55);
    if (v10)
      dispatch_release(v10);
  }
  v11 = *((_QWORD *)this + 54);
  if (v11)
    dispatch_release(v11);
  v12 = *((_QWORD *)this + 53);
  if (v12)
  {
    dispatch_group_leave(v12);
    v13 = *((_QWORD *)this + 53);
    if (v13)
      dispatch_release(v13);
  }
  v14 = *((_QWORD *)this + 52);
  if (v14)
    dispatch_release(v14);
  if (*((char *)this + 415) < 0)
  {
    operator delete(*((void **)this + 49));
    if ((*((char *)this + 375) & 0x80000000) == 0)
    {
LABEL_25:
      if ((*((char *)this + 327) & 0x80000000) == 0)
        goto LABEL_26;
      goto LABEL_30;
    }
  }
  else if ((*((char *)this + 375) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(*((void **)this + 44));
  if ((*((char *)this + 327) & 0x80000000) == 0)
  {
LABEL_26:
    v15 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
    if (!v15)
      goto LABEL_34;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(*((void **)this + 38));
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (!v15)
    goto LABEL_34;
LABEL_31:
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v18 = (const void *)*((_QWORD *)this + 33);
    if (!v18)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_34:
  v18 = (const void *)*((_QWORD *)this + 33);
  if (v18)
LABEL_35:
    _Block_release(v18);
LABEL_36:
  v19 = *((_QWORD *)this + 27);
  if (v19)
  {
    dispatch_group_leave(v19);
    v20 = *((_QWORD *)this + 27);
    if (v20)
      dispatch_release(v20);
  }
  v21 = *((_QWORD *)this + 26);
  if (v21)
  {
    dispatch_group_leave(v21);
    v22 = *((_QWORD *)this + 26);
    if (v22)
      dispatch_release(v22);
  }
  v23 = *((_QWORD *)this + 25);
  if (v23)
    dispatch_release(v23);
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v24)
    goto LABEL_48;
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
  {
LABEL_48:
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (*((char *)this + 175) < 0)
LABEL_49:
    operator delete(*((void **)this + 19));
LABEL_50:
  *((_QWORD *)this + 6) = off_1E791DC08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v27 = *((_QWORD *)this + 18);
  if (v27)
    dispatch_release(v27);
  v28 = *((_QWORD *)this + 17);
  if (v28)
    dispatch_release(v28);
  v29 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  *(_QWORD *)this = off_1E79228B8;
  v30 = *((_QWORD *)this + 3);
  if (v30)
  {
    v31 = *((_QWORD *)this + 4);
    v32 = (void *)*((_QWORD *)this + 3);
    if (v31 != v30)
    {
      do
      {
        if (*(char *)(v31 - 1) < 0)
          operator delete(*(void **)(v31 - 24));
        v31 -= 24;
      }
      while (v31 != v30);
      v32 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v30;
    operator delete(v32);
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
}

{
  void *v1;

  BootModule::~BootModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'BootModule::~BootModule(BootModule *this)
{
  BootModule::~BootModule((BootModule *)((char *)this - 48));
}

{
  void *v1;

  BootModule::~BootModule((BootModule *)((char *)this - 48));
  operator delete(v1);
}

void BootModule::changeState_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  uint64_t v35;
  __CFDictionary *Mutable;
  const __CFAllocator *v37;
  const void *v38;
  size_t v39;
  void *v40;
  void **v41;
  const void *v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeID v45;
  void *v46;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *aBlock;
  __int128 v53;
  _BYTE buf[22];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 88);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    v6 = *(int *)(a1 + 448);
    if (v6 > 8)
    {
      v7 = "Unknown";
      if (a2 > 8)
        goto LABEL_4;
    }
    else
    {
      v7 = off_1E791DD70[v6];
      if (a2 > 8)
      {
LABEL_4:
        v8 = "Unknown";
LABEL_7:
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v8;
        _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I boot state changing %{public}s -> %{public}s", buf, 0x16u);
        goto LABEL_8;
      }
    }
    v8 = off_1E791DD70[a2];
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 448) = a2;
  if (!capabilities::ipc::supportsPCI((capabilities::ipc *)v5))
    goto LABEL_56;
  if ((*(_DWORD *)(a1 + 448) - 3) > 1)
  {
    v29 = *(std::__shared_weak_count **)(a1 + 280);
    *(_QWORD *)(a1 + 272) = 0;
    *(_QWORD *)(a1 + 280) = 0;
    if (!v29)
      goto LABEL_56;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (v31)
      goto LABEL_56;
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_62;
  }
  else
  {
    if (*(_QWORD *)(a1 + 272))
      goto LABEL_56;
    v9 = *(void **)(a1 + 264);
    if (v9)
      v9 = _Block_copy(v9);
    aBlock = v9;
    pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    v10 = off_1ED70F338;
    if (!off_1ED70F338)
    {
      ABMServer::create_default_global(buf);
      v11 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v12 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
      off_1ED70F338 = v11;
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v10 = off_1ED70F338;
    }
    v50 = v10;
    v51 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    if (*(&off_1ED70F338 + 1))
    {
      v18 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
    pci::event::Listener::create();
    v20 = v53;
    v53 = 0uLL;
    v21 = *(std::__shared_weak_count **)(a1 + 280);
    *(_OWORD *)(a1 + 272) = v20;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (*((_QWORD *)&v53 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 16))(*((_QWORD *)&v53 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v53 + 1));
      }
    }
    if (v51)
    {
      v26 = &v51->__shared_owners_;
      do
        v27 = __ldaxr((unint64_t *)v26);
      while (__stlxr(v27 - 1, (unint64_t *)v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (aBlock)
      _Block_release(aBlock);
    v28 = *(NSObject **)(a1 + 88);
    if (*(_QWORD *)(a1 + 272))
    {
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v28, OS_LOG_TYPE_DEFAULT, "#I Listening for PCI events", buf, 2u);
        if (!*(_QWORD *)(a1 + 216))
          goto LABEL_62;
        goto LABEL_57;
      }
LABEL_56:
      if (!*(_QWORD *)(a1 + 216))
        goto LABEL_62;
      goto LABEL_57;
    }
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      goto LABEL_56;
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v28, OS_LOG_TYPE_ERROR, "Could not create PCI event listener!", buf, 2u);
    if (!*(_QWORD *)(a1 + 216))
      goto LABEL_62;
  }
LABEL_57:
  v32 = *(_DWORD *)(a1 + 448);
  if (v32 != 4)
    goto LABEL_63;
  v33 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v33, OS_LOG_TYPE_DEFAULT, "#I Releasing shutdown request session", buf, 2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 7);
  v34 = *(NSObject **)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v34)
  {
    dispatch_group_leave(v34);
    dispatch_release(v34);
  }
LABEL_62:
  v32 = *(_DWORD *)(a1 + 448);
LABEL_63:
  if (v32 != 7)
    return;
  *(_QWORD *)buf = 0;
  v35 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    *(_QWORD *)buf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBD98], v35, v37);
  v38 = (const void *)*MEMORY[0x1E0CFBD68];
  v39 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v39 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v40 = (void *)v39;
  if (v39 >= 0x17)
  {
    v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v43 = v39 | 7;
    v44 = v43 + 1;
    v41 = (void **)operator new(v43 + 1);
    __dst[1] = v40;
    v49 = v44 | 0x8000000000000000;
    __dst[0] = v41;
LABEL_74:
    memmove(v41, v38, (size_t)v40);
    *((_BYTE *)v40 + (_QWORD)v41) = 0;
    v42 = *(const void **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_77;
    goto LABEL_75;
  }
  HIBYTE(v49) = v39;
  v41 = __dst;
  if (v39)
    goto LABEL_74;
  LOBYTE(__dst[0]) = 0;
  v42 = *(const void **)buf;
  if (!*(_QWORD *)buf)
    goto LABEL_77;
LABEL_75:
  v45 = CFGetTypeID(v42);
  if (v45 == CFDictionaryGetTypeID())
  {
    cf = v42;
    CFRetain(v42);
    goto LABEL_78;
  }
LABEL_77:
  cf = 0;
LABEL_78:
  v46 = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&v46);
  if (v46)
    _Block_release(v46);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__dst[0]);
    if (!v42)
      return;
  }
  else if (!v42)
  {
    return;
  }
  CFRelease(v42);
}

void sub_1BF6A1314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *aBlock, uint64_t a20,uint64_t a21,char a22)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(a1);
}

const char *BootModule::getName(BootModule *this)
{
  return "boot.mod";
}

void BootModule::requestReset(_QWORD *a1, const ResetInfo *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  capabilities::abs *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  void **v15;
  NSObject *v16;
  unint64_t v17;
  void *v18;
  std::__shared_weak_count *v19;
  _QWORD block[6];
  std::__shared_weak_count *v21;
  std::string v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  void *aBlock;
  void *v30[2];
  char v31;
  uint8_t buf[4];
  void **v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = (std::__shared_weak_count *)v8;
  v10 = (unint64_t *)((char *)v8 + 16);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v12 = (unint64_t *)((char *)v8 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    (*(void (**)(capabilities::abs *))(*(_QWORD *)v8 + 16))(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (!capabilities::abs::shouldIgnoreResets(v8))
  {
    v16 = a1[54];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_8_5;
    block[4] = a1;
    block[5] = v7;
    v21 = v9;
    do
      v17 = __ldxr(v10);
    while (__stxr(v17 + 1, v10));
    ResetInfo::ResetInfo(&v22, a2);
    v18 = (void *)*a3;
    if (*a3)
      v18 = _Block_copy(v18);
    aBlock = v18;
    dispatch_async(v16, block);
    if (aBlock)
      _Block_release(aBlock);
    if (v28 < 0)
    {
      operator delete(__p);
      if ((v26 & 0x80000000) == 0)
      {
LABEL_25:
        if ((v24 & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_31;
      }
    }
    else if ((v26 & 0x80000000) == 0)
    {
      goto LABEL_25;
    }
    operator delete(v25);
    if ((v24 & 0x80000000) == 0)
    {
LABEL_26:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_32;
    }
LABEL_31:
    operator delete(v23);
    if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      v19 = v21;
      if (!v21)
        goto LABEL_34;
      goto LABEL_33;
    }
LABEL_32:
    operator delete(v22.__r_.__value_.__l.__data_);
    v19 = v21;
    if (!v21)
      goto LABEL_34;
LABEL_33:
    std::__shared_weak_count::__release_weak(v19);
    goto LABEL_34;
  }
  v14 = a1[11];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    ResetInfo::asString(a2, v30);
    v15 = v31 >= 0 ? v30 : (void **)v30[0];
    *(_DWORD *)buf = 136446210;
    v33 = v15;
    _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Ignoring modem reset request: %{public}s", buf, 0xCu);
    if (v31 < 0)
    {
      operator delete(v30[0]);
      if (!*a3)
        goto LABEL_34;
      goto LABEL_16;
    }
  }
  if (*a3)
  {
LABEL_16:
    LODWORD(v30[0]) = 0;
    dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>(a3, (unsigned int *)v30, "");
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF6A1664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  void *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[5];
  std::string v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  void *aBlock;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v28;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v28 = v4;
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_18;
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 1174405120;
      v16[2] = ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
      v16[3] = &__block_descriptor_tmp_27;
      v16[4] = v3;
      ResetInfo::ResetInfo(&v17, (const ResetInfo *)(a1 + 7));
      v6 = (const void *)a1[21];
      if (v6)
      {
        v7 = _Block_copy(v6);
        v8 = (uint64_t *)(v3 + 120);
        v10 = a1[5];
        v9 = (std::__shared_weak_count *)a1[6];
        aBlock = v7;
        v25 = v10;
        v26 = v9;
        if (!v9)
          goto LABEL_10;
      }
      else
      {
        v8 = (uint64_t *)(v3 + 120);
        v11 = a1[5];
        v9 = (std::__shared_weak_count *)a1[6];
        aBlock = 0;
        v25 = v11;
        v26 = v9;
        if (!v9)
          goto LABEL_10;
      }
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
LABEL_10:
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v16);
      if (v26)
        std::__shared_weak_count::__release_weak(v26);
      if (aBlock)
        _Block_release(aBlock);
      if (v23 < 0)
      {
        operator delete(__p);
        if ((v21 & 0x80000000) == 0)
        {
LABEL_16:
          if ((v19 & 0x80000000) == 0)
            goto LABEL_17;
          goto LABEL_25;
        }
      }
      else if ((v21 & 0x80000000) == 0)
      {
        goto LABEL_16;
      }
      operator delete(v20);
      if ((v19 & 0x80000000) == 0)
      {
LABEL_17:
        if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_18;
LABEL_26:
        operator delete(v17.__r_.__value_.__l.__data_);
LABEL_18:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
LABEL_25:
      operator delete(v18);
      if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_18;
      goto LABEL_26;
    }
  }
}

void sub_1BF6A1858(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  unsigned int v3;
  uint64_t v5;
  const char *v6;
  size_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  std::string *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  int v17;
  std::string::size_type v18;
  std::string *p_buf;
  std::string *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  int v23;
  size_t size;
  std::string *p_p;
  _BOOL4 v26;
  std::string::size_type v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  std::string *v38;
  std::string::__raw *v39;
  std::string::size_type v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  dispatch_object_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string __p;
  std::string v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *aBlock;
  dispatch_object_t v58;
  dispatch_object_t object;
  xpc_object_t v60;
  xpc_object_t v61;
  _BYTE v62[12];
  __int16 v63;
  std::string *v64;
  std::string buf;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  v3 = *((_DWORD *)v2 + 112);
  if (v3 > 8 || ((1 << v3) & 0x1C7) == 0)
  {
    v12 = v2[11];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
      v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Reset requested: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(_QWORD *, uint64_t))(*v2 + 96))(v2, 1);
    *(_QWORD *)v62 = 0xAAAAAAAAAAAAAAAALL;
    v14 = xpc_dictionary_create(0, 0, 0);
    v15 = v14;
    if (v14)
    {
      *(_QWORD *)v62 = v14;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)v62 = v15;
      if (!v15)
      {
        v16 = xpc_null_create();
        v15 = 0;
        goto LABEL_40;
      }
    }
    if (MEMORY[0x1C3B8CD78](v15) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v15);
      goto LABEL_41;
    }
    v16 = xpc_null_create();
LABEL_40:
    *(_QWORD *)v62 = v16;
LABEL_41:
    xpc_release(v15);
    ResetInfo::addToDict((ResetInfo *)(a1 + 40), (xpc_object_t *)v62);
    v21 = *(xpc_object_t *)v62;
    v61 = *(xpc_object_t *)v62;
    if (*(_QWORD *)v62)
    {
      xpc_retain(*(xpc_object_t *)v62);
    }
    else
    {
      v21 = xpc_null_create();
      v61 = v21;
    }
    BootModule::submitBBResetMetric_sync((uint64_t)v2, &v61);
    xpc_release(v21);
    v22 = *(xpc_object_t *)v62;
    v60 = *(xpc_object_t *)v62;
    v61 = 0;
    if (*(_QWORD *)v62)
    {
      xpc_retain(*(xpc_object_t *)v62);
    }
    else
    {
      v22 = xpc_null_create();
      v60 = v22;
    }
    BootModule::updateAnalyticsEvent_sync((uint64_t)v2, &v60);
    xpc_release(v22);
    v60 = 0;
    if (*(char *)(a1 + 63) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    else
      __p = *(std::string *)(a1 + 40);
    v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (size == strlen((const char *)*MEMORY[0x1E0CFB590]))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v26 = memcmp(p_p, (const void *)*MEMORY[0x1E0CFB590], size) == 0;
      if ((v23 & 0x80000000) == 0)
      {
LABEL_61:
        if (v26)
          BootModule::reportStatisticsHardResetTime_sync((BootModule *)v2);
        memset(&buf, 170, 16);
        (*(void (**)(std::string *__return_ptr, _QWORD *))(*v2 + 80))(&buf, v2);
        v27 = buf.__r_.__value_.__r.__words[0];
        if (!buf.__r_.__value_.__r.__words[0])
          goto LABEL_91;
        object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
        v28 = (char *)operator new(0x38uLL);
        strcpy(v28, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
        v29 = capabilities::abs::resetAssertionTimeoutScalingFactor((capabilities::abs *)v28);
        v30 = *(_QWORD *)(v27 + 104);
        std::string::__init_copy_ctor_external(&__p, v28, 0x33uLL);
        (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v30 + 24))(&object, v30, &__p, 360000 * v29);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        operator delete(v28);
        v32 = *(_QWORD *)(a1 + 160);
        v31 = *(_QWORD *)(a1 + 168);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
        __p.__r_.__value_.__l.__size_ = v32;
        __p.__r_.__value_.__r.__words[2] = v31;
        if (v31)
        {
          v33 = (unint64_t *)(v31 + 16);
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        ResetInfo::ResetInfo(&v50, (const ResetInfo *)(a1 + 40));
        v35 = *(void **)(a1 + 152);
        if (v35)
          v35 = _Block_copy(v35);
        aBlock = v35;
        v58 = object;
        if (object)
        {
          dispatch_retain(object);
          v36 = object;
        }
        else
        {
          v36 = 0;
        }
        v37 = v2[17];
        v38 = (std::string *)operator new(0x98uLL);
        v39 = (std::string::__raw *)v38;
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v40 = __p.__r_.__value_.__r.__words[2];
        v38->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        if (v40)
        {
          v41 = (unint64_t *)(v40 + 16);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
        }
        ResetInfo::ResetInfo(v38 + 1, (const ResetInfo *)&v50);
        v43 = aBlock;
        if (aBlock)
          v43 = _Block_copy(aBlock);
        v44 = v58;
        v39[5].__words[2] = (std::string::size_type)v43;
        v39[6].__words[0] = (std::string::size_type)v44;
        v58 = 0;
        dispatch_group_notify_f(v36, v37, v39, (dispatch_function_t)_ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_);
        if (v58)
          dispatch_release(v58);
        if (aBlock)
          _Block_release(aBlock);
        if (v56 < 0)
        {
          operator delete(v55);
          if ((v54 & 0x80000000) == 0)
          {
LABEL_85:
            if ((v52 & 0x80000000) == 0)
              goto LABEL_86;
            goto LABEL_100;
          }
        }
        else if ((v54 & 0x80000000) == 0)
        {
          goto LABEL_85;
        }
        operator delete(v53);
        if ((v52 & 0x80000000) == 0)
        {
LABEL_86:
          if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_87;
          goto LABEL_101;
        }
LABEL_100:
        operator delete(v51);
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_87:
          v45 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
          if (!__p.__r_.__value_.__r.__words[2])
            goto LABEL_89;
          goto LABEL_88;
        }
LABEL_101:
        operator delete(v50.__r_.__value_.__l.__data_);
        v45 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
        if (!__p.__r_.__value_.__r.__words[2])
        {
LABEL_89:
          if (object)
            dispatch_release(object);
LABEL_91:
          v46 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
          if (buf.__r_.__value_.__l.__size_)
          {
            v47 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          xpc_release(*(xpc_object_t *)v62);
          return;
        }
LABEL_88:
        std::__shared_weak_count::__release_weak(v45);
        goto LABEL_89;
      }
    }
    else
    {
      v26 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_61;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_61;
  }
  v5 = (int)v3;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1BF743150;
  strcpy(__p.__r_.__value_.__l.__data_, "Reset rejected; Boot state is: ");
  if (v5 > 8)
    v6 = "Unknown";
  else
    v6 = off_1E791DD70[v5];
  v7 = strlen(v6);
  v8 = std::string::append(&__p, v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  buf.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = v2[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v17 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    v18 = buf.__r_.__value_.__r.__words[0];
    ResetInfo::asString((ResetInfo *)(a1 + 40), &__p);
    p_buf = &buf;
    if (v17 < 0)
      p_buf = (std::string *)v18;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &__p;
    else
      v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v62 = 136315394;
    *(_QWORD *)&v62[4] = p_buf;
    v63 = 2080;
    v64 = v20;
    _os_log_debug_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEBUG, "#D %s; %s", v62, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v11 = *(_QWORD *)(a1 + 152);
  if (!v11)
    goto LABEL_16;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  else
    __p = buf;
  (*(void (**)(uint64_t, uint64_t, std::string *))(v11 + 16))(v11, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_17;
  }
  else
  {
LABEL_16:
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
LABEL_17:
      operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_1BF6A1F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void BootModule::submitBBResetMetric_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  const char *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  const void *v32;
  size_t v33;
  size_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v41;
  unint64_t v42;

  v4 = MEMORY[0x1C3B8CD78](*a2);
  v5 = MEMORY[0x1E0C812F8];
  v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x1E0C812F8])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "No input is given", buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of baseband reset", buf, 2u);
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v7) == v5)
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v9 = xpc_BOOL_create(*(_BYTE *)(a1 + 288));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB040], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC1F0], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC1F8], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0)
    v15 = *(const char **)v15;
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC230], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    v18 = *(const char **)v18;
  v19 = xpc_string_create(v18);
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC238], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    v21 = *(const char **)v21;
  v22 = xpc_string_create(v21);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFC198], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFAFE0], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB020], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v28 = xpc_int64_create(524310);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB0E8], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  v30 = *a2;
  if (v30)
    xpc_retain(v30);
  else
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB018], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v32 = (const void *)*MEMORY[0x1E0CFB5E0];
  v33 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = v33;
  if (v33 >= 0x17)
  {
    v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v36 = v33 | 7;
    v37 = v36 + 1;
    v35 = operator new(v36 + 1);
    v41 = v34;
    v42 = v37 | 0x8000000000000000;
    *(_QWORD *)buf = v35;
LABEL_47:
    memmove(v35, v32, v34);
    *((_BYTE *)v35 + v34) = 0;
    object = v8;
    if (v8)
      goto LABEL_43;
LABEL_48:
    object = xpc_null_create();
    goto LABEL_49;
  }
  HIBYTE(v42) = v33;
  v35 = buf;
  if (v33)
    goto LABEL_47;
  buf[0] = 0;
  object = v8;
  if (!v8)
    goto LABEL_48;
LABEL_43:
  xpc_retain(v8);
LABEL_49:
  v38 = 0;
  Service::runCommand(a1, (uint64_t)buf, &object, &v38);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v42) < 0)
    operator delete(*(void **)buf);
  xpc_release(v8);
}

void sub_1BF6A25FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::updateAnalyticsEvent_sync(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  uint64_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  uint64_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  uint64_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t value;
  int v41;
  util::apfs *v42;
  int is_transcription_pending;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  const char *v47;
  NSObject *v48;
  NSObject *v49;
  const char *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  size_t v53;
  const void *v54;
  const void *v55;
  const void **v56;
  size_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  xpc_object_t v60;
  const char *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  size_t v66;
  capabilities::radio *v67;
  const void *v68;
  capabilities::radio *v69;
  __int128 v70;
  __int128 v71;
  std::string::size_type size;
  std::sub_match<const char *> *p_dst;
  int v74;
  std::string::size_type v75;
  std::string *v76;
  char *v77;
  unint64_t v78;
  void **v79;
  char *v80;
  char *v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  __int128 v85;
  std::string::size_type v86;
  std::sub_match<const char *> *v87;
  int v88;
  std::string::size_type v89;
  std::string *v90;
  uint64_t *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  __int128 *v99;
  _OWORD *v100;
  unint64_t v101;
  __int128 v102;
  char v103;
  unsigned __int8 *v104;
  unsigned int v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  char **v109;
  char *v110;
  unint64_t v111;
  _OWORD *v112;
  std::string::size_type v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  char *v118;
  __int128 *v119;
  _OWORD *v120;
  unint64_t v121;
  __int128 v122;
  char v123;
  void **v124;
  std::string::size_type v125;
  std::string *v126;
  __int128 v127;
  unint64_t v128;
  unsigned __int8 *v129;
  unsigned int v130;
  BOOL v131;
  uint64_t *v132;
  uint64_t v133;
  char **v134;
  char *v135;
  unint64_t v136;
  _OWORD *v137;
  std::string::size_type v138;
  void **v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  char *v143;
  __int128 *v144;
  _OWORD *v145;
  unint64_t v146;
  __int128 v147;
  char v148;
  void **v149;
  std::string::size_type v150;
  std::string *v151;
  std::string::size_type v152;
  char v153;
  size_t v154;
  std::string *p_str;
  size_t v156;
  unint64_t *v157;
  std::string *v158;
  xpc_object_t v159;
  xpc_object_t v160;
  std::string *v161;
  xpc_object_t v162;
  xpc_object_t v163;
  xpc_object_t v164;
  xpc_object_t v165;
  xpc_object_t v166;
  xpc_object_t v167;
  xpc_object_t v168;
  xpc_object_t v169;
  xpc_object_t v170;
  xpc_object_t v171;
  xpc_object_t v172;
  xpc_object_t v173;
  xpc_object_t v174;
  xpc_object_t v175;
  xpc_object_t v176;
  xpc_object_t v177;
  const void *v178;
  size_t v179;
  size_t v180;
  __int128 *p_buf;
  uint64_t v182;
  uint64_t v183;
  const void *v184;
  xpc_object_t object;
  void *v186;
  unint64_t v187;
  unint64_t v188;
  void *v189;
  unint64_t v190;
  unint64_t v191;
  std::string v192;
  void *__p[2];
  _QWORD v194[4];
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  uint64_t v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  std::string __str;
  std::string __dst;
  const void *__s1[3];
  __int128 buf;
  _OWORD v210[2];
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  _QWORD v218[5];

  v218[2] = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1C3B8CD78](*a2);
  v5 = MEMORY[0x1E0C812F8];
  v6 = *(NSObject **)(a1 + 88);
  if (v4 != MEMORY[0x1E0C812F8])
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 88), OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Updating Analytics metric of baseband reset", (uint8_t *)&buf, 2u);
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v7) == v5)
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v9 = xpc_dictionary_create(0, 0, 0);
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v9) == v5)
    {
      xpc_retain(v9);
      v10 = v9;
    }
    else
    {
      v10 = xpc_null_create();
    }
  }
  else
  {
    v10 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v11 = xpc_BOOL_create(*(_BYTE *)(a1 + 288));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v10, "inVoiceCall", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*(int *)(a1 + 296));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v10, "rat", v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(*(int *)(a1 + 344));
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v10, "rat2", v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const char *)(a1 + 304);
  if (*(char *)(a1 + 327) < 0)
    v17 = *(const char **)v17;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v10, "PLMN", v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0)
    v20 = *(const char **)v20;
  v21 = xpc_string_create(v20);
  if (!v21)
    v21 = xpc_null_create();
  xpc_dictionary_set_value(v10, "PLMN2", v21);
  v22 = xpc_null_create();
  xpc_release(v21);
  xpc_release(v22);
  v23 = *(_QWORD *)(a1 + 328);
  if (v23)
  {
    v24 = xpc_uint64_create(v23);
    if (!v24)
      v24 = xpc_null_create();
    xpc_dictionary_set_value(v10, "cellId", v24);
    v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
  }
  v26 = *(_QWORD *)(a1 + 376);
  if (v26)
  {
    v27 = xpc_uint64_create(v26);
    if (!v27)
      v27 = xpc_null_create();
    xpc_dictionary_set_value(v10, "cellId2", v27);
    v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
  }
  v29 = *(_QWORD *)(a1 + 336);
  if (v29)
  {
    v30 = xpc_uint64_create(v29);
    if (!v30)
      v30 = xpc_null_create();
    xpc_dictionary_set_value(v10, "tac", v30);
    v31 = xpc_null_create();
    xpc_release(v30);
    xpc_release(v31);
  }
  v32 = *(_QWORD *)(a1 + 384);
  if (v32)
  {
    v33 = xpc_uint64_create(v32);
    if (!v33)
      v33 = xpc_null_create();
    xpc_dictionary_set_value(v10, "tac2", v33);
    v34 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v34);
  }
  v35 = (const char *)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
    v35 = *(const char **)v35;
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  xpc_dictionary_set_value(v10, "sku", v36);
  v37 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v37);
  v38 = xpc_int64_create(*(int *)(a1 + 256));
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v10, "operatingMode", v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB780]);
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v41 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  is_transcription_pending = util::apfs::is_transcription_pending(v42);
  v44 = xpc_BOOL_create(v41 & ~(_BYTE)is_transcription_pending);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v10, "isMTBF", v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  memset(__s1, 170, sizeof(__s1));
  v46 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0]);
  *(_QWORD *)&buf = v46;
  if (v46)
    xpc_retain(v46);
  else
    *(_QWORD *)&buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&buf, (const object *)*MEMORY[0x1E0CFBEA8], v47);
  xpc_release((xpc_object_t)buf);
  if (is_transcription_pending)
  {
    v48 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1BF566000, v48, OS_LOG_TYPE_DEFAULT, "#I APFS transcription is pending", (uint8_t *)&buf, 2u);
    }
    if (v41)
    {
      v49 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1BF566000, v49, OS_LOG_TYPE_DEFAULT, "#I Downgrading Baseband Reset MTBF metric because APFS transcription is pending", (uint8_t *)&buf, 2u);
      }
    }
  }
  if (SHIBYTE(__s1[2]) >= 0)
    v50 = (const char *)__s1;
  else
    v50 = (const char *)__s1[0];
  v51 = xpc_string_create(v50);
  if (!v51)
    v51 = xpc_null_create();
  xpc_dictionary_set_value(v10, "resetType", v51);
  v52 = xpc_null_create();
  xpc_release(v51);
  xpc_release(v52);
  v53 = strlen((const char *)*MEMORY[0x1E0CFBF98]);
  v54 = (const void *)v53;
  if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
  {
    if (v53 != -1)
    {
      v55 = (const void *)HIBYTE(__s1[2]);
      v56 = __s1;
      goto LABEL_78;
    }
LABEL_310:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v53 == -1)
    goto LABEL_310;
  v56 = (const void **)__s1[0];
  v55 = __s1[1];
LABEL_78:
  if (v55 >= v54)
    v57 = (size_t)v54;
  else
    v57 = (size_t)v55;
  if (!memcmp(v56, (const void *)*MEMORY[0x1E0CFBF98], v57) && v55 == v54)
  {
    v58 = xpc_string_create((const char *)*MEMORY[0x1E0CFB358]);
    if (!v58)
      v58 = xpc_null_create();
    xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB3E8], v58);
    v59 = xpc_null_create();
    xpc_release(v58);
    xpc_release(v59);
    goto LABEL_274;
  }
  memset(&__dst, 170, sizeof(__dst));
  v60 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB788]);
  *(_QWORD *)&buf = v60;
  if (v60)
    xpc_retain(v60);
  else
    *(_QWORD *)&buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"no-reset-reason", v61);
  xpc_release((xpc_object_t)buf);
  memset(&__str, 170, sizeof(__str));
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __str = __dst;
  v62 = (const void *)*MEMORY[0x1E0CFC000];
  v63 = (const void *)strlen((const char *)*MEMORY[0x1E0CFC000]);
  v64 = v63;
  if (SHIBYTE(__s1[2]) < 0)
  {
    if (v63 != (const void *)-1)
    {
      v65 = __s1[1];
      if (__s1[1] >= v63)
        v68 = v63;
      else
        v68 = __s1[1];
      v67 = (capabilities::radio *)memcmp(__s1[0], v62, (size_t)v68);
      if ((_DWORD)v67)
        goto LABEL_260;
      goto LABEL_104;
    }
LABEL_312:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v63 == (const void *)-1)
    goto LABEL_312;
  v65 = (const void *)HIBYTE(__s1[2]);
  if (HIBYTE(__s1[2]) >= (unint64_t)v63)
    v66 = (size_t)v63;
  else
    v66 = HIBYTE(__s1[2]);
  v67 = (capabilities::radio *)memcmp(__s1, v62, v66);
  if ((_DWORD)v67)
    goto LABEL_260;
LABEL_104:
  if (v65 == v64)
  {
    v69 = (capabilities::radio *)capabilities::radio::maverick(v67);
    if ((_DWORD)v69)
    {
      *(_QWORD *)&v70 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v70 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v204 = v70;
      v205 = v70;
      v202 = v70;
      v203 = v70;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v202, "(ATCS_TIMEOUT on message for svc=[0-9]*)(client=[0-9]*).*(txid=[0-9]*)(msgid=0x[a-zA-Z0-9]*)\\)(.*)", 0);
      *(_QWORD *)&v71 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v71 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v197 = 0xAAAAAAAAAAAAAA00;
      v194[3] = 0xAAAAAAAAAAAAAAAALL;
      v200 = v71;
      v195 = 0;
      v196 = 0;
      v198 = 0;
      v199 = 0;
      LOBYTE(v200) = 0;
      BYTE8(v200) = 0;
      v201 = 0;
      *(_OWORD *)__p = 0u;
      memset(v194, 0, 25);
      v213 = 0xAAAAAAAAAAAAAA00;
      *((_QWORD *)&v210[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v216 = v71;
      v211 = 0;
      v212 = 0;
      v214 = 0;
      v215 = 0;
      LOBYTE(v216) = 0;
      BYTE8(v216) = 0;
      v217 = 0;
      buf = 0u;
      v210[0] = 0u;
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = (std::sub_match<const char *> *)&__dst;
      else
        p_dst = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)((char *)v210 + 9) = 0uLL;
      v74 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v202, p_dst, (std::sub_match<const char *> *)((char *)p_dst + size), (std::vector<std::csub_match> *)&buf, 0);
      v75 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = &__dst;
      else
        v76 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v75 = __dst.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v76, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v76 + v75), (uint64_t *)&buf, 0);
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (!v74)
        goto LABEL_252;
      v77 = (char *)__p[0];
      v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
      if (v78 <= 1)
        v79 = __p;
      else
        v79 = (void **)__p[0];
      if (!*((_BYTE *)v79 + 40))
      {
        memset(&v192, 0, sizeof(v192));
        goto LABEL_167;
      }
      v80 = (char *)v79[3];
      v81 = (char *)v79[4];
      v82 = v81 - v80;
      if ((unint64_t)(v81 - v80) > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v82 > 0x16)
      {
        v95 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v82 | 7) != 0x17)
          v95 = v82 | 7;
        v96 = v95 + 1;
        v83 = (char *)operator new(v95 + 1);
        v192.__r_.__value_.__l.__size_ = v81 - v80;
        v192.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
        v192.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
      }
      else
      {
        *((_BYTE *)&v192.__r_.__value_.__s + 23) = (_BYTE)v81 - (_BYTE)v80;
        v83 = (char *)&v192;
      }
      if (v80 == v81)
      {
        v97 = v83;
      }
      else
      {
        if (v82 < 0x20 || (unint64_t)(v83 - v80) < 0x20)
        {
          v97 = v83;
          v98 = v80;
        }
        else
        {
          v97 = &v83[v82 & 0xFFFFFFFFFFFFFFE0];
          v98 = &v80[v82 & 0xFFFFFFFFFFFFFFE0];
          v99 = (__int128 *)(v80 + 16);
          v100 = v83 + 16;
          v101 = v82 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v102 = *v99;
            *(v100 - 1) = *(v99 - 1);
            *v100 = v102;
            v99 += 2;
            v100 += 2;
            v101 -= 32;
          }
          while (v101);
          if (v82 == (v82 & 0xFFFFFFFFFFFFFFE0))
            goto LABEL_166;
        }
        do
        {
          v103 = *v98++;
          *v97++ = v103;
        }
        while (v98 != v81);
      }
LABEL_166:
      *v97 = 0;
      v77 = (char *)__p[0];
      v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
LABEL_167:
      v104 = (unsigned __int8 *)(v77 + 112);
      if (v78 <= 4)
        v104 = (unsigned __int8 *)&v194[3];
      v105 = *v104;
      if (!v105)
      {
        v113 = 0;
        v114 = 0;
        v189 = 0;
        v190 = 0;
        v191 = 0;
        goto LABEL_193;
      }
      v106 = v78 > 4;
      if (v78 <= 4)
        v107 = &v194[1];
      else
        v107 = (uint64_t *)(v77 + 96);
      v108 = *v107;
      v109 = (char **)(v77 + 104);
      if (!v106)
        v109 = (char **)&v194[2];
      v110 = *v109;
      v111 = (unint64_t)&(*v109)[-v108];
      if (v111 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v111 > 0x16)
      {
        v115 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v111 | 7) != 0x17)
          v115 = v111 | 7;
        v116 = v115 + 1;
        v112 = operator new(v115 + 1);
        v190 = v111;
        v191 = v116 | 0x8000000000000000;
        v189 = v112;
      }
      else
      {
        HIBYTE(v191) = *(_BYTE *)v109 - v108;
        v112 = &v189;
      }
      if ((char *)v108 == v110)
      {
        v117 = v112;
      }
      else
      {
        if (v111 < 0x20 || (unint64_t)v112 - v108 < 0x20)
        {
          v117 = v112;
          v118 = (char *)v108;
        }
        else
        {
          v117 = (char *)v112 + (v111 & 0xFFFFFFFFFFFFFFE0);
          v118 = (char *)(v108 + (v111 & 0xFFFFFFFFFFFFFFE0));
          v119 = (__int128 *)(v108 + 16);
          v120 = v112 + 1;
          v121 = v111 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v122 = *v119;
            *(v120 - 1) = *(v119 - 1);
            *v120 = v122;
            v119 += 2;
            v120 += 2;
            v121 -= 32;
          }
          while (v121);
          if (v111 == (v111 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_192;
        }
        do
        {
          v123 = *v118++;
          *v117++ = v123;
        }
        while (v118 != v110);
      }
LABEL_192:
      *v117 = 0;
      v105 = HIBYTE(v191);
      v114 = (void **)v189;
      v113 = v190;
LABEL_193:
      if ((v105 & 0x80u) == 0)
        v124 = &v189;
      else
        v124 = v114;
      if ((v105 & 0x80u) == 0)
        v125 = v105;
      else
        v125 = v113;
      v126 = std::string::append(&v192, (const std::string::value_type *)v124, v125);
      v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
      *(_QWORD *)&v210[0] = *((_QWORD *)&v126->__r_.__value_.__l + 2);
      buf = v127;
      v126->__r_.__value_.__l.__size_ = 0;
      v126->__r_.__value_.__r.__words[2] = 0;
      v126->__r_.__value_.__r.__words[0] = 0;
      v128 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
      v129 = (unsigned __int8 *)__p[0] + 136;
      if (v128 <= 5)
        v129 = (unsigned __int8 *)&v194[3];
      v130 = *v129;
      if (!v130)
      {
        v138 = 0;
        v139 = 0;
        v186 = 0;
        v187 = 0;
        v188 = 0;
        goto LABEL_225;
      }
      v131 = v128 > 5;
      if (v128 <= 5)
        v132 = &v194[1];
      else
        v132 = (uint64_t *)((char *)__p[0] + 120);
      v133 = *v132;
      v134 = (char **)((char *)__p[0] + 128);
      if (!v131)
        v134 = (char **)&v194[2];
      v135 = *v134;
      v136 = (unint64_t)&(*v134)[-v133];
      if (v136 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v136 > 0x16)
      {
        v140 = (v136 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v136 | 7) != 0x17)
          v140 = v136 | 7;
        v141 = v140 + 1;
        v137 = operator new(v140 + 1);
        v187 = v136;
        v188 = v141 | 0x8000000000000000;
        v186 = v137;
      }
      else
      {
        HIBYTE(v188) = *(_BYTE *)v134 - v133;
        v137 = &v186;
      }
      if ((char *)v133 == v135)
      {
        v142 = v137;
      }
      else
      {
        if (v136 < 0x20 || (unint64_t)v137 - v133 < 0x20)
        {
          v142 = v137;
          v143 = (char *)v133;
        }
        else
        {
          v142 = (char *)v137 + (v136 & 0xFFFFFFFFFFFFFFE0);
          v143 = (char *)(v133 + (v136 & 0xFFFFFFFFFFFFFFE0));
          v144 = (__int128 *)(v133 + 16);
          v145 = v137 + 1;
          v146 = v136 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v147 = *v144;
            *(v145 - 1) = *(v144 - 1);
            *v145 = v147;
            v144 += 2;
            v145 += 2;
            v146 -= 32;
          }
          while (v146);
          if (v136 == (v136 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_224;
        }
        do
        {
          v148 = *v143++;
          *v142++ = v148;
        }
        while (v143 != v135);
      }
LABEL_224:
      *v142 = 0;
      v130 = HIBYTE(v188);
      v139 = (void **)v186;
      v138 = v187;
LABEL_225:
      if ((v130 & 0x80u) == 0)
        v149 = &v186;
      else
        v149 = v139;
      if ((v130 & 0x80u) == 0)
        v150 = v130;
      else
        v150 = v138;
      v151 = std::string::append((std::string *)&buf, (const std::string::value_type *)v149, v150);
      v152 = v151->__r_.__value_.__r.__words[0];
      v218[0] = v151->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v218 + 7) = *(std::string::size_type *)((char *)&v151->__r_.__value_.__r.__words[1] + 7);
      v153 = HIBYTE(v151->__r_.__value_.__r.__words[2]);
      v151->__r_.__value_.__l.__size_ = 0;
      v151->__r_.__value_.__r.__words[2] = 0;
      v151->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = v152;
      __str.__r_.__value_.__l.__size_ = v218[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v218 + 7);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v153;
      if (SHIBYTE(v188) < 0)
      {
        operator delete(v186);
        if ((SBYTE7(v210[0]) & 0x80000000) == 0)
        {
LABEL_235:
          if ((SHIBYTE(v191) & 0x80000000) == 0)
            goto LABEL_236;
          goto LABEL_242;
        }
      }
      else if ((SBYTE7(v210[0]) & 0x80000000) == 0)
      {
        goto LABEL_235;
      }
      operator delete((void *)buf);
      if ((SHIBYTE(v191) & 0x80000000) == 0)
      {
LABEL_236:
        if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_237;
        goto LABEL_243;
      }
LABEL_242:
      operator delete(v189);
      if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_237:
        v154 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_238;
        goto LABEL_244;
      }
LABEL_243:
      operator delete(v192.__r_.__value_.__l.__data_);
      v154 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_238:
        if ((v154 & 0x80) != 0)
          std::string::__assign_no_alias<true>(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          __dst = __str;
LABEL_252:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v92 = (std::__shared_weak_count *)v205;
        if (!(_QWORD)v205)
          goto LABEL_259;
        v157 = (unint64_t *)(v205 + 8);
        do
          v94 = __ldaxr(v157);
        while (__stlxr(v94 - 1, v157));
LABEL_257:
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
LABEL_259:
        std::locale::~locale((std::locale *)&v202);
        goto LABEL_260;
      }
LABEL_244:
      if ((v154 & 0x80u) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if ((v154 & 0x80u) == 0)
        v156 = v154;
      else
        v156 = __str.__r_.__value_.__l.__size_;
      std::string::__assign_no_alias<false>((void **)&__dst.__r_.__value_.__l.__data_, p_str, v156);
      goto LABEL_252;
    }
    if (capabilities::radio::ice(v69))
    {
      *(_QWORD *)&v84 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v204 = v84;
      v205 = v84;
      v202 = v84;
      v203 = v84;
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v202, "(.*ARI_TIMEOUT -.*)( SZ\\([0-9]*\\).*)", 0);
      *(_QWORD *)&v85 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v85 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v197 = 0xAAAAAAAAAAAAAA00;
      v194[3] = 0xAAAAAAAAAAAAAAAALL;
      v200 = v85;
      v195 = 0;
      v196 = 0;
      v198 = 0;
      v199 = 0;
      LOBYTE(v200) = 0;
      BYTE8(v200) = 0;
      v201 = 0;
      *(_OWORD *)__p = 0u;
      memset(v194, 0, 25);
      v213 = 0xAAAAAAAAAAAAAA00;
      *((_QWORD *)&v210[1] + 1) = 0xAAAAAAAAAAAAAAAALL;
      v216 = v85;
      v211 = 0;
      v212 = 0;
      v214 = 0;
      v215 = 0;
      LOBYTE(v216) = 0;
      BYTE8(v216) = 0;
      v217 = 0;
      buf = 0u;
      v210[0] = 0u;
      v86 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = (std::sub_match<const char *> *)&__dst;
      else
        v87 = (std::sub_match<const char *> *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v86 = __dst.__r_.__value_.__l.__size_;
      *(_OWORD *)((char *)v210 + 9) = 0uLL;
      v88 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&v202, v87, (std::sub_match<const char *> *)((char *)v87 + v86), (std::vector<std::csub_match> *)&buf, 0);
      v89 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v90 = &__dst;
      else
        v90 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v89 = __dst.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__p, (uint64_t)v90, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v90 + v89), (uint64_t *)&buf, 0);
      if ((_QWORD)buf)
      {
        *((_QWORD *)&buf + 1) = buf;
        operator delete((void *)buf);
      }
      if (v88)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) <= 1)
          v91 = &v194[1];
        else
          v91 = (uint64_t *)((char *)__p[0] + 24);
        std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](&buf, v91);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = buf;
        __str.__r_.__value_.__r.__words[2] = *(_QWORD *)&v210[0];
        std::string::operator=(&__dst, &__str);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v92 = (std::__shared_weak_count *)v205;
      if (!(_QWORD)v205)
        goto LABEL_259;
      v93 = (unint64_t *)(v205 + 8);
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      goto LABEL_257;
    }
  }
LABEL_260:
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v158 = &__dst;
  else
    v158 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  v159 = xpc_string_create((const char *)v158);
  if (!v159)
    v159 = xpc_null_create();
  xpc_dictionary_set_value(v10, "resetReason", v159);
  v160 = xpc_null_create();
  xpc_release(v159);
  xpc_release(v160);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v161 = &__str;
  else
    v161 = (std::string *)__str.__r_.__value_.__r.__words[0];
  v162 = xpc_string_create((const char *)v161);
  if (!v162)
    v162 = xpc_null_create();
  xpc_dictionary_set_value(v10, "shortResetReason", v162);
  v163 = xpc_null_create();
  xpc_release(v162);
  xpc_release(v163);
  v164 = xpc_string_create((const char *)*MEMORY[0x1E0CFB368]);
  if (!v164)
    v164 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB3E8], v164);
  v165 = xpc_null_create();
  xpc_release(v164);
  xpc_release(v165);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_274;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_274;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_274:
  v166 = xpc_string_create("metricsCCBasebandResetInfo");
  if (!v166)
    v166 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB278], v166);
  v167 = xpc_null_create();
  xpc_release(v166);
  xpc_release(v167);
  v168 = xpc_string_create("Reset");
  if (!v168)
    v168 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB3F0], v168);
  v169 = xpc_null_create();
  xpc_release(v168);
  xpc_release(v169);
  if (v10)
  {
    xpc_retain(v10);
    v170 = v10;
  }
  else
  {
    v170 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB9D8], v170);
  v171 = xpc_null_create();
  xpc_release(v170);
  xpc_release(v171);
  v172 = xpc_dictionary_create(0, 0, 0);
  if (v172 || (v172 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v172) == v5)
    {
      xpc_retain(v172);
      v173 = v172;
    }
    else
    {
      v173 = xpc_null_create();
    }
  }
  else
  {
    v173 = xpc_null_create();
    v172 = 0;
  }
  xpc_release(v172);
  v174 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
  if (!v174)
    v174 = xpc_null_create();
  xpc_dictionary_set_value(v173, (const char *)*MEMORY[0x1E0CFB020], v174);
  v175 = xpc_null_create();
  xpc_release(v174);
  xpc_release(v175);
  if (v8)
  {
    xpc_retain(v8);
    v176 = v8;
  }
  else
  {
    v176 = xpc_null_create();
  }
  xpc_dictionary_set_value(v173, (const char *)*MEMORY[0x1E0CFB018], v176);
  v177 = xpc_null_create();
  xpc_release(v176);
  xpc_release(v177);
  v178 = (const void *)*MEMORY[0x1E0CFB5E0];
  v179 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v179 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v180 = v179;
  if (v179 >= 0x17)
  {
    v182 = (v179 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v179 | 7) != 0x17)
      v182 = v179 | 7;
    v183 = v182 + 1;
    p_buf = (__int128 *)operator new(v182 + 1);
    *((_QWORD *)&buf + 1) = v180;
    *(_QWORD *)&v210[0] = v183 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_302:
    memmove(p_buf, v178, v180);
    *((_BYTE *)p_buf + v180) = 0;
    object = v173;
    if (v173)
      goto LABEL_298;
LABEL_303:
    object = xpc_null_create();
    goto LABEL_304;
  }
  BYTE7(v210[0]) = v179;
  p_buf = &buf;
  if (v179)
    goto LABEL_302;
  LOBYTE(buf) = 0;
  object = v173;
  if (!v173)
    goto LABEL_303;
LABEL_298:
  xpc_retain(v173);
LABEL_304:
  v184 = 0;
  Service::runCommand(a1, (uint64_t)&buf, &object, &v184);
  xpc_release(object);
  object = 0;
  if (SBYTE7(v210[0]) < 0)
    operator delete((void *)buf);
  xpc_release(v173);
  if (SHIBYTE(__s1[2]) < 0)
    operator delete((void *)__s1[0]);
  xpc_release(v10);
  xpc_release(v8);
}

void sub_1BF6A3BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::locale a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *v63;
  void *v64;

  if (__p)
    operator delete(__p);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a37);
  if (a50 < 0)
    operator delete(a45);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  xpc_release(v64);
  xpc_release(v63);
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsHardResetTime_sync(BootModule *this)
{
  NSObject *v2;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  int64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v26;
  unint64_t v27;

  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of hard reset time", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = MEMORY[0x1E0C812F8];
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v3) == v4)
    {
      xpc_retain(v3);
      v5 = v3;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v6) == v4)
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = time(0);
  v9 = xpc_int64_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFBDE8], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFC240]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB020], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(0);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB0E8], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v7)
  {
    xpc_retain(v7);
    v15 = v7;
  }
  else
  {
    v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB018], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const void *)*MEMORY[0x1E0CFB5E0];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v26 = v19;
    v27 = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v20;
LABEL_32:
    memmove(v20, v17, v19);
    *((_BYTE *)v20 + v19) = 0;
    object = v5;
    if (v5)
      goto LABEL_28;
    goto LABEL_33;
  }
  HIBYTE(v27) = v18;
  v20 = buf;
  if (v18)
    goto LABEL_32;
  buf[0] = 0;
  object = v5;
  if (v5)
  {
LABEL_28:
    xpc_retain(v5);
    goto LABEL_34;
  }
LABEL_33:
  object = xpc_null_create();
LABEL_34:
  v23 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v23);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  xpc_release(v7);
  xpc_release(v5);
}

void sub_1BF6A43B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t _ZZZZN10BootModule12requestResetE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEUb_EUb0_EN3__0D1Ev(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 144);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 136);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_15:
    operator delete(*(void **)(a1 + 24));
    v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4)
      return a1;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_15;
LABEL_9:
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
LABEL_10:
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void *__copy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  ResetInfo::ResetInfo((std::string *)(a1 + 40), (const ResetInfo *)(a2 + 5));
  result = (void *)a2[19];
  if (result)
    result = _Block_copy(result);
  v6 = a2[20];
  v5 = a2[21];
  *(_QWORD *)(a1 + 152) = result;
  *(_QWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 168) = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSK9ResetInfo152c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE160c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 152);
  if (v3)
    _Block_release(v3);
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_13;
}

void ___ZN10BootModule4initEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  _BOOL8 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  const void *v10;
  _QWORD aBlock[6];
  std::__shared_weak_count *v12;
  uint8_t buf[16];

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 88);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  if (capabilities::ipc::supportsPCI((capabilities::ipc *)v4))
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule4initEv_block_invoke_9;
    aBlock[3] = &__block_descriptor_tmp_15_5;
    v6 = a1[5];
    v5 = (std::__shared_weak_count *)a1[6];
    aBlock[4] = v2;
    aBlock[5] = v6;
    v12 = v5;
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }
    v9 = _Block_copy(aBlock);
    v10 = *(const void **)(v2 + 264);
    *(_QWORD *)(v2 + 264) = v9;
    if (v10)
      _Block_release(v10);
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
}

void ___ZN10BootModule4initEv_block_invoke_9(_QWORD *a1, int a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  std::string __p;
  int v16;
  int v17;
  std::string v18;
  std::__shared_weak_count *v20;

  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    v20 = v10;
    if (v10)
    {
      v11 = v10;
      if (!a1[5])
        goto LABEL_12;
      memset(&v18, 170, sizeof(v18));
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v18 = *(std::string *)a3;
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN10BootModule4initEv_block_invoke_2;
      v14[3] = &__block_descriptor_tmp_13_6;
      v14[4] = v9;
      v16 = a2;
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        __p = v18;
      v17 = a4;
      ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v9 + 120), (uint64_t)v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_12;
      }
      else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_12;
      }
      operator delete(v18.__r_.__value_.__l.__data_);
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1BF6A488C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24 - 64);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule4initEv_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  size_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  BOOL v16;
  __int128 v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  size_t v26;
  size_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  void *aBlock;
  std::string v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  __int128 v41;
  char v42;
  _BYTE v43[8];
  _QWORD *v44;
  void *__p[2];
  char v46;
  __int128 v47;
  unint64_t v48;
  std::string v49;
  _BYTE __dst[24];
  uint8_t buf[16];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if (!*(_DWORD *)(a1 + 64))
  {
    v5 = *(char *)(a1 + 63);
    if (v5 >= 0)
      v6 = *(unsigned __int8 *)(a1 + 63);
    else
      v6 = *(_QWORD *)(a1 + 48);
    v7 = v6 + 11;
    memset(&v49, 170, sizeof(v49));
    if (v6 + 11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v8 = (_QWORD **)(a1 + 40);
    if (v7 > 0x16)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v12 = (char *)operator new(v10 + 1);
      v49.__r_.__value_.__l.__size_ = v6 + 11;
      v49.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
      v13 = v12 + 11;
      *(_DWORD *)(v12 + 7) = 540693582;
      *(_QWORD *)v12 = *(_QWORD *)"PCI-EVENT: ";
      if (v5 >= 0)
        v14 = (_QWORD *)(a1 + 40);
      else
        v14 = *v8;
      memmove(v12 + 11, v14, v6);
      v13[v6] = 0;
      if (v6 == 27)
      {
        v15 = *v14 == 0x67676972742D5041 && v14[1] == 0x7361622064657265;
        v16 = v15 && v14[2] == 0x657220646E616265;
        if (v16 && *(_QWORD *)((char *)v14 + 19) == 0x746573657220646ELL)
          std::string::append(&v49, " [likely caused by bbctl reset]", 0x1FuLL);
      }
    }
    else
    {
      *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = 0uLL;
      *((_BYTE *)&v49.__r_.__value_.__s + 23) = v6 + 11;
      *(_DWORD *)((char *)v49.__r_.__value_.__r.__words + 7) = 540693582;
      v49.__r_.__value_.__r.__words[0] = *(_QWORD *)"PCI-EVENT: ";
      if (v6)
      {
        if (v5 >= 0)
          v9 = (_QWORD *)(a1 + 40);
        else
          v9 = *v8;
        memmove((char *)&v49.__r_.__value_.__r.__words[1] + 3, v9, v6);
      }
      *((_BYTE *)&v49.__r_.__value_.__r.__words[1] + v6 + 3) = 0;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v56 = v18;
    v57 = v18;
    v54 = v18;
    v55 = v18;
    v52 = v18;
    v53 = v18;
    *(_OWORD *)buf = v18;
    v19 = (const void *)*MEMORY[0x1E0CFB590];
    v20 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v20 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = v20;
    if (v20 >= 0x17)
    {
      v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v23 = v20 | 7;
      v24 = v23 + 1;
      v22 = operator new(v23 + 1);
      *(_QWORD *)&__dst[8] = v21;
      *(_QWORD *)&__dst[16] = v24 | 0x8000000000000000;
      *(_QWORD *)__dst = v22;
    }
    else
    {
      __dst[23] = v20;
      v22 = __dst;
      if (!v20)
      {
LABEL_43:
        v22[v21] = 0;
        v25 = (const void *)*MEMORY[0x1E0CFC000];
        v26 = strlen((const char *)*MEMORY[0x1E0CFC000]);
        if (v26 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v27 = v26;
        if (v26 >= 0x17)
        {
          v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17)
            v29 = v26 | 7;
          v30 = v29 + 1;
          v28 = operator new(v29 + 1);
          *((_QWORD *)&v47 + 1) = v27;
          v48 = v30 | 0x8000000000000000;
          *(_QWORD *)&v47 = v28;
        }
        else
        {
          HIBYTE(v48) = v26;
          v28 = &v47;
          if (!v26)
          {
LABEL_51:
            v28[v27] = 0;
            Timestamp::Timestamp((Timestamp *)v43);
            Timestamp::asString((uint64_t)v43, 0, 9, __p);
            v42 = 0;
            LOBYTE(v41) = 0;
            ResetInfo::ResetInfo((std::string *)buf, (__int128 *)__dst, &v47, (__int128 *)&v49, (uint64_t)__p, 7, &v41);
            if (v46 < 0)
            {
              operator delete(__p[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
              {
LABEL_53:
                if ((__dst[23] & 0x80000000) == 0)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v43, v44);
              if ((SHIBYTE(v48) & 0x80000000) == 0)
                goto LABEL_53;
            }
            operator delete((void *)v47);
            if ((__dst[23] & 0x80000000) == 0)
            {
LABEL_54:
              v31 = v2[11];
              if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                goto LABEL_59;
LABEL_80:
              if (*(char *)(a1 + 63) < 0)
                v8 = (_QWORD **)*v8;
              v32 = *(_DWORD *)(a1 + 68);
              *(_DWORD *)__dst = 136315394;
              *(_QWORD *)&__dst[4] = v8;
              *(_WORD *)&__dst[12] = 1024;
              *(_DWORD *)&__dst[14] = v32;
              _os_log_error_impl(&dword_1BF566000, v31, OS_LOG_TYPE_ERROR, "PCI event: %s, sleeping for %u ms, then requesting Baseband reset", __dst, 0x12u);
LABEL_59:
              usleep(1000 * *(_DWORD *)(a1 + 68));
              ResetInfo::ResetInfo(&v34, (const ResetInfo *)buf);
              aBlock = 0;
              BootModule::requestReset(v2, (const ResetInfo *)&v34, (uint64_t *)&aBlock);
              if (aBlock)
                _Block_release(aBlock);
              if (v40 < 0)
              {
                operator delete(v39);
                if ((v38 & 0x80000000) == 0)
                {
LABEL_63:
                  if ((v36 & 0x80000000) == 0)
                    goto LABEL_64;
                  goto LABEL_73;
                }
              }
              else if ((v38 & 0x80000000) == 0)
              {
                goto LABEL_63;
              }
              operator delete(v37);
              if ((v36 & 0x80000000) == 0)
              {
LABEL_64:
                if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_65;
                goto LABEL_74;
              }
LABEL_73:
              operator delete(v35);
              if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_65:
                if ((SHIBYTE(v57) & 0x80000000) == 0)
                  goto LABEL_66;
                goto LABEL_75;
              }
LABEL_74:
              operator delete(v34.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v57) & 0x80000000) == 0)
              {
LABEL_66:
                if ((SBYTE7(v55) & 0x80000000) == 0)
                  goto LABEL_67;
                goto LABEL_76;
              }
LABEL_75:
              operator delete(*((void **)&v56 + 1));
              if ((SBYTE7(v55) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SHIBYTE(v53) & 0x80000000) == 0)
                  goto LABEL_68;
                goto LABEL_77;
              }
LABEL_76:
              operator delete((void *)v54);
              if ((SHIBYTE(v53) & 0x80000000) == 0)
              {
LABEL_68:
                if ((SBYTE7(v52) & 0x80000000) == 0)
                  goto LABEL_69;
                goto LABEL_78;
              }
LABEL_77:
              operator delete(*((void **)&v52 + 1));
              if ((SBYTE7(v52) & 0x80000000) == 0)
              {
LABEL_69:
                if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  return;
                goto LABEL_79;
              }
LABEL_78:
              operator delete(*(void **)buf);
              if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                return;
LABEL_79:
              operator delete(v49.__r_.__value_.__l.__data_);
              return;
            }
LABEL_58:
            operator delete(*(void **)__dst);
            v31 = v2[11];
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              goto LABEL_59;
            goto LABEL_80;
          }
        }
        memmove(v28, v25, v27);
        goto LABEL_51;
      }
    }
    memmove(v22, v19, v21);
    goto LABEL_43;
  }
  v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v4;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I PCI event: %s", buf, 0xCu);
  }
}

void sub_1BF6A4EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a47 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

char *BootModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  char *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  result = (char *)operator new(3uLL);
  a1[1] = result + 3;
  a1[2] = result + 3;
  *(_WORD *)result = 256;
  result[2] = 3;
  *a1 = result;
  return result;
}

void BootModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t *v8;
  NSObject *v9;
  _QWORD v10[5];
  dispatch_group_t group;
  _QWORD v12[5];
  dispatch_group_t object;
  _QWORD v14[5];
  dispatch_group_t v15;

  if (a2 == 3)
  {
    v6 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1174405120;
    v10[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_26;
    v10[3] = &__block_descriptor_tmp_27_6;
    v7 = *a3;
    v10[4] = a1;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v6, (uint64_t)v10);
    if (group)
    {
      dispatch_group_leave(group);
      v5 = group;
      if (group)
        goto LABEL_18;
    }
  }
  else
  {
    if (a2 != 1)
    {
      if (a2)
        return;
      v3 = (uint64_t *)(a1 + 120);
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
      v14[3] = &__block_descriptor_tmp_18_4;
      v4 = *a3;
      v14[4] = a1;
      v15 = v4;
      if (v4)
      {
        dispatch_retain(v4);
        dispatch_group_enter(v4);
      }
      ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v14);
      if (!v15)
        return;
      dispatch_group_leave(v15);
      v5 = v15;
      if (!v15)
        return;
LABEL_18:
      dispatch_release(v5);
      return;
    }
    v8 = (uint64_t *)(a1 + 120);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 1174405120;
    v12[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_19;
    v12[3] = &__block_descriptor_tmp_25_4;
    v9 = *a3;
    v12[4] = a1;
    object = v9;
    if (v9)
    {
      dispatch_retain(v9);
      dispatch_group_enter(v9);
    }
    ctu::SharedSynchronizable<BootModule>::execute_wrapped(v8, (uint64_t)v12);
    if (object)
    {
      dispatch_group_leave(object);
      v5 = object;
      if (object)
        goto LABEL_18;
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  unsigned int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  dispatch_object_t object;
  unint64_t v18;
  unint64_t v19;
  std::string buf;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown prepare", (uint8_t *)&buf, 2u);
  }
  v4 = *(_DWORD *)(v2 + 448);
  if (v4 <= 8)
  {
    v5 = 1 << v4;
    if ((v5 & 0x1E1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(v2, 8);
      v6 = *(NSObject **)(v2 + 216);
      *(_QWORD *)(v2 + 216) = 0;
      if (v6)
      {
        dispatch_group_leave(v6);
        dispatch_release(v6);
      }
    }
    else if ((v5 & 0xE) != 0)
    {
      v7 = *(NSObject **)(a1 + 40);
      if (v7)
      {
        dispatch_retain(v7);
        dispatch_group_enter(v7);
      }
      v8 = *(NSObject **)(v2 + 216);
      *(_QWORD *)(v2 + 216) = v7;
      if (v8)
      {
        dispatch_group_leave(v8);
        dispatch_release(v8);
      }
      v9 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Holding shutdown request session", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 96))(v2, 7);
    }
  }
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v2 + 80))(&v18, v2);
  v10 = v18;
  if (v18)
  {
    v11 = (char *)operator new(0x38uLL);
    strcpy(v11, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v12 = capabilities::abs::shutdownAssertionTimeoutScalingFactor((capabilities::abs *)v11);
    v13 = *(_QWORD *)(v10 + 104);
    std::string::__init_copy_ctor_external(&buf, v11, 0x35uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v13 + 24))(&object, v13, &buf, 240000 * v12);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (object)
      dispatch_release(object);
    operator delete(v11);
  }
  v14 = (std::__shared_weak_count *)v19;
  if (v19)
  {
    v15 = (unint64_t *)(v19 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BF6A53F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
  {
    operator delete(__p);
    operator delete(v18);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    _Unwind_Resume(a1);
  }
  operator delete(v18);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_19(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  NSObject *v4;
  _QWORD aBlock[5];
  dispatch_group_t group;
  void *v7;
  uint8_t buf[16];

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[11];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Shutdown baseband", buf, 2u);
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_20;
  aBlock[3] = &__block_descriptor_tmp_24_3;
  v4 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v7 = _Block_copy(aBlock);
  (*(void (**)(_QWORD *, void **))(*v2 + 112))(v2, &v7);
  if (v7)
    _Block_release(v7);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void sub_1BF6A554C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v14;
  size_t v15;
  void *v16;
  void **v17;
  CFMutableDictionaryRef v18;
  uint64_t v19;
  uint64_t v20;
  CFTypeID v21;
  NSObject *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  CFTypeRef v31;
  void *__p[2];
  unint64_t v33;
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  CFMutableDictionaryRef v42;

  v2 = *(_QWORD *)(a1 + 32);
  v42 = 0;
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    v42 = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBD30], v3, v5);
  v6 = *(std::__shared_weak_count **)(v2 + 128);
  if (!v6 || (v7 = *(_QWORD *)(v2 + 120), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = (const void *)*MEMORY[0x1E0CFBD68];
  v15 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = (void *)v15;
  if (v15 >= 0x17)
  {
    v19 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v19 = v15 | 7;
    v20 = v19 + 1;
    v17 = (void **)operator new(v19 + 1);
    __dst[1] = v16;
    v41 = v20 | 0x8000000000000000;
    __dst[0] = v17;
LABEL_19:
    memmove(v17, v14, (size_t)v16);
    *((_BYTE *)v16 + (_QWORD)v17) = 0;
    v18 = v42;
    if (!v42)
      goto LABEL_22;
    goto LABEL_20;
  }
  HIBYTE(v41) = v15;
  v17 = __dst;
  if (v15)
    goto LABEL_19;
  LOBYTE(__dst[0]) = 0;
  v18 = v42;
  if (!v42)
    goto LABEL_22;
LABEL_20:
  v21 = CFGetTypeID(v18);
  if (v21 == CFDictionaryGetTypeID())
  {
    cf = v18;
    CFRetain(v18);
    goto LABEL_23;
  }
LABEL_22:
  cf = 0;
LABEL_23:
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_22_6;
  v22 = *(NSObject **)(a1 + 40);
  aBlock[4] = v2;
  group = v22;
  if (v22)
  {
    dispatch_retain(v22);
    dispatch_group_enter(v22);
  }
  v36 = v7;
  v37 = v9;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v38 = _Block_copy(aBlock);
  Service::broadcastEvent(v2, (uint64_t)__dst, &cf, (const void **)&v38);
  if (v38)
    _Block_release(v38);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v24 = (const void *)*MEMORY[0x1E0CFB600];
  v25 = strlen((const char *)*MEMORY[0x1E0CFB600]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v33 = v29 | 0x8000000000000000;
    __p[0] = v27;
    goto LABEL_40;
  }
  HIBYTE(v33) = v25;
  v27 = __p;
  if (v25)
LABEL_40:
    memmove(v27, v24, (size_t)v26);
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v30 = 0;
  v31 = 0;
  Service::broadcastEvent(v2, (uint64_t)__p, &v31, (const void **)&v30);
  if (v30)
    _Block_release(v30);
  if (v31)
    CFRelease(v31);
  if (SHIBYTE(v33) < 0)
    operator delete(__p[0]);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v9);
  if (v42)
    CFRelease(v42);
}

void sub_1BF6A5910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,dispatch_group_t group,uint64_t a23,std::__shared_weak_count *a24,void *a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;
  NSObject *v36;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    v35 = a24;
    if (!a24)
    {
LABEL_5:
      v36 = group;
      if (!group)
        goto LABEL_11;
      goto LABEL_9;
    }
  }
  else
  {
    v35 = a24;
    if (!a24)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v35);
  v36 = group;
  if (!group)
    goto LABEL_11;
LABEL_9:
  dispatch_group_leave(v36);
  if (group)
    dispatch_release(group);
LABEL_11:
  std::__shared_weak_count::__release_weak(v32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v33 - 96));
  _Unwind_Resume(a1);
}

void sub_1BF6A5A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_1BF6A5A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 96));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[6];
      if (v6)
      {
        v9[0] = MEMORY[0x1E0C809B0];
        v9[1] = 0x40000000;
        v9[2] = ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3;
        v9[3] = &__block_descriptor_tmp_21_4;
        v9[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string v10;

  v1 = *(_QWORD *)(a1 + 32);
  v8 = 0xAAAAAAAAAAAAAAAALL;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v1 + 80))(&v8);
  v2 = v8;
  if (v8)
  {
    v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v4 = *(_QWORD *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v10, v3, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v10);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    operator delete(v3);
  }
  v5 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v6 = (unint64_t *)(v9 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF6A5BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF6A5C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

void ___ZN10BootModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_26(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string v26;

  v1 = *(_QWORD **)(a1 + 32);
  v24 = 0xAAAAAAAAAAAAAAAALL;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v1 + 80))(&v24, v1);
  v2 = v24;
  if (v24)
  {
    v3 = (char *)operator new(0x38uLL);
    strcpy(v3, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v4 = *(_QWORD *)(v2 + 104);
    std::string::__init_copy_ctor_external(&v26, v3, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v26);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    operator delete(v3);
    v5 = v24;
    v6 = (char *)operator new(0x38uLL);
    strcpy(v6, "com.apple.AppleBasebandManager.RadioNotReady.Shutdown");
    v7 = *(_QWORD *)(v5 + 104);
    std::string::__init_copy_ctor_external(&v26, v6, 0x35uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 32))(v7, &v26);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    operator delete(v6);
  }
  v8 = (std::__shared_weak_count *)v1[23];
  v1[22] = 0;
  v1[23] = 0;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = v1 + 57;
  v12 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)v1[60];
  v1[59] = 0;
  v1[60] = 0;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v1[58];
  *v11 = 0;
  v11[1] = 0;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v22 = (unint64_t *)(v25 + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BF6A5F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF6A5F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BootModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_47_2;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  CommandDriverFactory *v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  NSObject *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const void *v63;
  NSObject *object;
  _QWORD v65[6];
  std::__shared_weak_count *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  _QWORD v73[6];
  std::__shared_weak_count *v74;
  const void *v75;
  _QWORD v76[5];
  std::__shared_weak_count *v77;
  const void *v78;
  _QWORD v79[6];
  std::__shared_weak_count *v80;
  const void *v81;
  _QWORD aBlock[6];
  std::__shared_weak_count *v83;
  const void *v84;
  __int128 __dst;
  unint64_t v86;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFBC38];
  v11 = strlen((const char *)*MEMORY[0x1E0CFBC38]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    v86 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v86) = v11;
    p_dst = &__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_30_5;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v83 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v84 = v18;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v84);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v19 = (const void *)*MEMORY[0x1E0CFB4E0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&__dst + 1) = v21;
    v86 = v24 | 0x8000000000000000;
    *(_QWORD *)&__dst = v22;
  }
  else
  {
    HIBYTE(v86) = v20;
    v22 = &__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v79[0] = v16;
  v79[1] = 1174405120;
  v79[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_31;
  v79[3] = &__block_descriptor_tmp_37_3;
  v79[4] = v1;
  v79[5] = v3;
  v80 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v79);
  v81 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v81);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v27 = (const void *)*MEMORY[0x1E0CFBC60];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBC60]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v29;
    v86 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = v30;
  }
  else
  {
    HIBYTE(v86) = v28;
    v30 = &__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v76[0] = v16;
  v76[1] = 1174405120;
  v76[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_38;
  v76[3] = &__block_descriptor_tmp_39_1;
  v76[4] = v3;
  v77 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v76);
  v78 = v34;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v78);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v35 = (const void *)*MEMORY[0x1E0CFB870];
  v36 = strlen((const char *)*MEMORY[0x1E0CFB870]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (__int128 *)operator new(v39 + 1);
    *((_QWORD *)&__dst + 1) = v37;
    v86 = v40 | 0x8000000000000000;
    *(_QWORD *)&__dst = v38;
  }
  else
  {
    HIBYTE(v86) = v36;
    v38 = &__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v73[0] = v16;
  v73[1] = 1174405120;
  v73[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_40;
  v73[3] = &__block_descriptor_tmp_41_2;
  v73[4] = v1;
  v73[5] = v3;
  v74 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v73);
  v75 = v42;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v75);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)__dst);
  v71 = 0xAAAAAAAAAAAAAAAALL;
  v72 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v43 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v44 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v43);
    v45 = __dst;
    __dst = 0uLL;
    v46 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v45;
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v44 = off_1ED70F4D0;
  }
  v52 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v67 = v44;
  v68 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v53 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v44 + 16))(&v69, v44);
  v71 = 0;
  v72 = 0;
  if (v70)
  {
    v72 = std::__shared_weak_count::lock(v70);
    if (v72)
      v71 = v69;
    if (v70)
      std::__shared_weak_count::__release_weak(v70);
  }
  if (!v52)
    goto LABEL_89;
  v55 = (unint64_t *)&v52->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    if (!v71)
      goto LABEL_107;
  }
  else
  {
LABEL_89:
    if (!v71)
      goto LABEL_107;
  }
  *(_QWORD *)&__dst = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&__dst + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65[0] = v16;
  v65[1] = 1174405120;
  v65[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_42;
  v65[3] = &__block_descriptor_tmp_46_1;
  v65[4] = v1;
  v65[5] = v3;
  v66 = v5;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = _Block_copy(v65);
  v59 = v1[17];
  if (v59)
    dispatch_retain(v59);
  *(_QWORD *)&__dst = v58;
  *((_QWORD *)&__dst + 1) = v59;
  if (!v58)
  {
    v63 = 0;
    object = v59;
    if (!v59)
      goto LABEL_97;
    goto LABEL_96;
  }
  v63 = _Block_copy(v58);
  object = v59;
  if (v59)
LABEL_96:
    dispatch_retain(v59);
LABEL_97:
  radio::CommandDriver::watchClientState();
  if (object)
    dispatch_release(object);
  if (v63)
    _Block_release(v63);
  if (v59)
    dispatch_release(v59);
  if (v58)
    _Block_release(v58);
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
LABEL_107:
  v60 = v72;
  if (v72)
  {
    v61 = (unint64_t *)&v72->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  if (v77)
    std::__shared_weak_count::__release_weak(v77);
  if (v80)
    std::__shared_weak_count::__release_weak(v80);
  if (v83)
    std::__shared_weak_count::__release_weak(v83);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF6A6828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v48;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a37)
    std::__shared_weak_count::__release_weak(a37);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  v48 = *(std::__shared_weak_count **)(v46 - 144);
  if (v48)
  {
    std::__shared_weak_count::__release_weak(v48);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
        v12[3] = &__block_descriptor_tmp_28_3;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  const char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  unsigned int v11;
  xpc_object_t xdict;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    xdict = v3;
  }
  else
  {
    v4 = xpc_null_create();
    xdict = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  xdict = v5;
LABEL_9:
  xpc_release(v4);
  switch(*(_DWORD *)(v2 + 448))
  {
    case 1:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFBB68]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 3:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB7F0]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 4:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB980]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 6:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFB588]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 7:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD98]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    case 8:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD30]);
      if (!v6)
        v6 = xpc_null_create();
      break;
    default:
      v6 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA60]);
      if (!v6)
        v6 = xpc_null_create();
      break;
  }
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB530], v6);
  v7 = xpc_null_create();
  xpc_release(v6);
  xpc_release(v7);
  if (*(_BYTE *)(v2 + 228))
  {
    v8 = (const char *)(v2 + 152);
    if (*(char *)(v2 + 175) < 0)
      v8 = *(const char **)v8;
    v9 = xpc_string_create(v8);
    if (!v9)
      v9 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v9);
    v10 = xpc_null_create();
    xpc_release(v9);
    xpc_release(v10);
  }
  v11 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v11, &xdict);
  xpc_release(xdict);
}

void sub_1BF6A6F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_31(_QWORD *a1, xpc_object_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  size_t size;
  std::string *v15;
  int v16;
  size_t v17;
  std::string *v18;
  _BOOL4 v19;
  const void *v20;
  size_t v21;
  std::string::size_type v22;
  _BYTE *p_dst;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  std::string *v29;
  __int128 v30;
  NSObject *v31;
  std::string *v32;
  xpc_object_t v33;
  uint64_t v34;
  xpc_object_t v35;
  std::string *v36;
  std::string::size_type v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  std::string *v41;
  std::string::size_type v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  _QWORD v45[5];
  std::string v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *aBlock;
  xpc_object_t v54;
  xpc_object_t object;
  xpc_object_t v56;
  std::string v57;
  __int128 buf;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *__p;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v69;
  std::string __dst;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (uint64_t *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v69 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
        goto LABEL_115;
      v10 = MEMORY[0x1C3B8CD78](*a2);
      v11 = MEMORY[0x1E0C812F8];
      if (v10 != MEMORY[0x1E0C812F8])
      {
        v12 = v7[11];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "No input is given", (uint8_t *)&buf, 2u);
        }
        goto LABEL_115;
      }
      v64 = 0xAAAAAAAAAAAAAAAALL;
      __p = 0;
      v66 = 0;
      v67 = 0;
      buf = 0u;
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0;
      v63 = 0xAAAAAAAAAAAAAAAALL;
      ResetInfo::fetchFromDict((void **)&buf, a2);
      if (SBYTE7(v59) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = buf;
        v57.__r_.__value_.__r.__words[2] = v59;
      }
      v13 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      else
        size = v57.__r_.__value_.__l.__size_;
      if (size == strlen((const char *)*MEMORY[0x1E0CFB590]))
      {
        v15 = (v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v57
            : (std::string *)v57.__r_.__value_.__r.__words[0];
        if (!memcmp(v15, (const void *)*MEMORY[0x1E0CFB590], size))
        {
          v19 = 1;
          if ((v13 & 0x80) == 0)
          {
LABEL_34:
            if (!v19)
            {
              v24 = v7[11];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                if (SBYTE7(v59) < 0)
                {
                  std::string::__init_copy_ctor_external(&v57, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
                }
                else
                {
                  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = buf;
                  v57.__r_.__value_.__r.__words[2] = v59;
                }
                v32 = &v57;
                if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
                LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
                _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I Invalid reset request [%s] ignoring it", (uint8_t *)&__dst, 0xCu);
                if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v57.__r_.__value_.__l.__data_);
              }
              v33 = xpc_null_create();
              v34 = *a3;
              v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              v35 = xpc_null_create();
              (*(void (**)(uint64_t, uint64_t, std::string *))(v34 + 16))(v34, 3760250882, &v57);
              xpc_release(v57.__r_.__value_.__l.__data_);
              xpc_release(v35);
LABEL_68:
              if (SHIBYTE(v67) < 0)
              {
                operator delete(__p);
                if ((SHIBYTE(v62) & 0x80000000) == 0)
                {
LABEL_70:
                  if ((SHIBYTE(v60) & 0x80000000) == 0)
                    goto LABEL_71;
                  goto LABEL_75;
                }
              }
              else if ((SHIBYTE(v62) & 0x80000000) == 0)
              {
                goto LABEL_70;
              }
              operator delete((void *)v61);
              if ((SHIBYTE(v60) & 0x80000000) == 0)
              {
LABEL_71:
                if ((SBYTE7(v59) & 0x80000000) == 0)
                  goto LABEL_115;
LABEL_76:
                operator delete((void *)buf);
LABEL_115:
                p_shared_owners = (unint64_t *)&v9->__shared_owners_;
                do
                  v44 = __ldaxr(p_shared_owners);
                while (__stlxr(v44 - 1, p_shared_owners));
                if (!v44)
                {
                  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                  std::__shared_weak_count::__release_weak(v9);
                }
                return;
              }
LABEL_75:
              operator delete(*((void **)&v59 + 1));
              if ((SBYTE7(v59) & 0x80000000) == 0)
                goto LABEL_115;
              goto LABEL_76;
            }
            if ((*(unsigned int (**)(uint64_t *))(*v7 + 88))(v7))
            {
              memset(&v57, 170, sizeof(v57));
              v20 = (const void *)*MEMORY[0x1E0CFB4E0];
              v21 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
              if (v21 >= 0x7FFFFFFFFFFFFFF8)
                std::string::__throw_length_error[abi:ne180100]();
              v22 = v21;
              if (v21 >= 0x17)
              {
                v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v21 | 7) != 0x17)
                  v26 = v21 | 7;
                v27 = v26 + 1;
                p_dst = operator new(v26 + 1);
                __dst.__r_.__value_.__l.__size_ = v22;
                __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v21;
                p_dst = &__dst;
                if (!v21)
                {
LABEL_58:
                  p_dst[v22] = 0;
                  v28 = (char *)operator new(0x28uLL);
                  strcpy(v28, " rejected; ABM is shutting down ");
                  v29 = std::string::append(&__dst, v28, 0x20uLL);
                  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                  v57.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v30;
                  v29->__r_.__value_.__l.__size_ = 0;
                  v29->__r_.__value_.__r.__words[2] = 0;
                  v29->__r_.__value_.__r.__words[0] = 0;
                  operator delete(v28);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                    v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                    {
LABEL_60:
                      if (!*a3)
                        goto LABEL_103;
                      goto LABEL_85;
                    }
                  }
                  else
                  {
                    v31 = v7[11];
                    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_60;
                  }
                  v36 = &v57;
                  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v36 = (std::string *)v57.__r_.__value_.__r.__words[0];
                  LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
                  _os_log_impl(&dword_1BF566000, v31, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
                  if (!*a3)
                  {
LABEL_103:
                    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(v57.__r_.__value_.__l.__data_);
                      v9 = v69;
                      if ((SHIBYTE(v67) & 0x80000000) == 0)
                      {
LABEL_105:
                        if ((SHIBYTE(v62) & 0x80000000) == 0)
                          goto LABEL_106;
                        goto LABEL_112;
                      }
                    }
                    else
                    {
                      v9 = v69;
                      if ((SHIBYTE(v67) & 0x80000000) == 0)
                        goto LABEL_105;
                    }
                    operator delete(__p);
                    if ((SHIBYTE(v62) & 0x80000000) == 0)
                    {
LABEL_106:
                      if ((SHIBYTE(v60) & 0x80000000) == 0)
                        goto LABEL_107;
                      goto LABEL_113;
                    }
LABEL_112:
                    operator delete((void *)v61);
                    if ((SHIBYTE(v60) & 0x80000000) == 0)
                    {
LABEL_107:
                      if ((SBYTE7(v59) & 0x80000000) == 0)
                        goto LABEL_108;
                      goto LABEL_114;
                    }
LABEL_113:
                    operator delete(*((void **)&v59 + 1));
                    if ((SBYTE7(v59) & 0x80000000) == 0)
                    {
LABEL_108:
                      if (!v9)
                        return;
                      goto LABEL_115;
                    }
LABEL_114:
                    operator delete((void *)buf);
                    if (!v9)
                      return;
                    goto LABEL_115;
                  }
LABEL_85:
                  v56 = xpc_null_create();
                  v37 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
                  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v37 = v57.__r_.__value_.__l.__size_;
                  if (!v37)
                    goto LABEL_102;
                  v38 = xpc_dictionary_create(0, 0, 0);
                  v39 = v38;
                  if (v38)
                  {
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
                  }
                  else
                  {
                    v39 = xpc_null_create();
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
                    if (!v39)
                    {
                      v40 = xpc_null_create();
                      v39 = 0;
                      goto LABEL_95;
                    }
                  }
                  if (MEMORY[0x1C3B8CD78](v39) == v11)
                  {
                    xpc_retain(v39);
LABEL_96:
                    xpc_release(v39);
                    xpc::dict::operator=(&v56, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_);
                    xpc_release(__dst.__r_.__value_.__l.__data_);
                    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v41 = &v57;
                    else
                      v41 = (std::string *)v57.__r_.__value_.__r.__words[0];
                    v54 = xpc_string_create((const char *)v41);
                    if (!v54)
                      v54 = xpc_null_create();
                    v42 = *MEMORY[0x1E0CFB0D0];
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
                    __dst.__r_.__value_.__l.__size_ = v42;
                    xpc::dict::object_proxy::operator=((uint64_t)&__dst, &v54, &object);
                    xpc_release(object);
                    object = 0;
                    xpc_release(v54);
                    v54 = 0;
LABEL_102:
                    LODWORD(__dst.__r_.__value_.__l.__data_) = -534716415;
                    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&__dst, &v56);
                    xpc_release(v56);
                    goto LABEL_103;
                  }
                  v40 = xpc_null_create();
LABEL_95:
                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
                  goto LABEL_96;
                }
              }
              memmove(p_dst, v20, v22);
              goto LABEL_58;
            }
            v45[0] = MEMORY[0x1E0C809B0];
            v45[1] = 1174405120;
            v45[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_33;
            v45[3] = &__block_descriptor_tmp_36_1;
            v45[4] = v7;
            ResetInfo::ResetInfo(&v46, (const ResetInfo *)&buf);
            v25 = (void *)*a3;
            if (*a3)
              v25 = _Block_copy(v25);
            aBlock = v25;
            ctu::SharedSynchronizable<BootModule>::execute_wrapped(v7 + 15, (uint64_t)v45);
            if (aBlock)
              _Block_release(aBlock);
            if (v52 < 0)
            {
              operator delete(v51);
              if ((v50 & 0x80000000) == 0)
              {
LABEL_49:
                if ((v48 & 0x80000000) == 0)
                  goto LABEL_50;
                goto LABEL_79;
              }
            }
            else if ((v50 & 0x80000000) == 0)
            {
              goto LABEL_49;
            }
            operator delete(v49);
            if ((v48 & 0x80000000) == 0)
            {
LABEL_50:
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_68;
LABEL_80:
              operator delete(v46.__r_.__value_.__l.__data_);
              goto LABEL_68;
            }
LABEL_79:
            operator delete(v47);
            if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_68;
            goto LABEL_80;
          }
LABEL_33:
          operator delete(v57.__r_.__value_.__l.__data_);
          goto LABEL_34;
        }
      }
      if (SBYTE7(v59) < 0)
      {
        std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)buf, *((std::string::size_type *)&buf + 1));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = buf;
        __dst.__r_.__value_.__r.__words[2] = v59;
      }
      v16 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v17 = __dst.__r_.__value_.__l.__size_;
      if (v17 == strlen((const char *)*MEMORY[0x1E0CFB598]))
      {
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &__dst;
        else
          v18 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        v19 = memcmp(v18, (const void *)*MEMORY[0x1E0CFB598], v17) == 0;
        if ((v16 & 0x80000000) == 0)
        {
LABEL_32:
          if ((*((_BYTE *)&v57.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_34;
          goto LABEL_33;
        }
      }
      else
      {
        v19 = 0;
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_32;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      goto LABEL_32;
    }
  }
}

void sub_1BF6A7748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t object,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_33(_QWORD *a1)
{
  _QWORD *v2;
  const ResetInfo *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  std::string v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  void *aBlock;
  std::string v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *__p;
  char v22;

  v2 = (_QWORD *)a1[4];
  v3 = (const ResetInfo *)(a1 + 5);
  ResetInfo::ResetInfo(&v16, (const ResetInfo *)(a1 + 5));
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_34;
  v6[3] = &__block_descriptor_tmp_35_5;
  ResetInfo::ResetInfo(&v7, v3);
  v4 = (void *)a1[19];
  if (v4)
    v4 = _Block_copy(v4);
  v14 = v4;
  aBlock = _Block_copy(v6);
  BootModule::requestReset(v2, (const ResetInfo *)&v16, (uint64_t *)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v22 < 0)
  {
    operator delete(__p);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_7:
      if ((v18 & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_13;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_8:
    if ((SHIBYTE(v16.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_14:
    operator delete(v16.__r_.__value_.__l.__data_);
    v5 = v14;
    if (!v14)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(v17);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_14;
LABEL_9:
  v5 = v14;
  if (v14)
LABEL_15:
    _Block_release(v5);
LABEL_16:
  if (v13 < 0)
  {
    operator delete(v12);
    if ((v11 & 0x80000000) == 0)
    {
LABEL_18:
      if ((v9 & 0x80000000) == 0)
        goto LABEL_19;
      goto LABEL_23;
    }
  }
  else if ((v11 & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(v10);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v7.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_24:
    operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
LABEL_23:
  operator delete(v8);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_24;
}

void sub_1BF6A79E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *aBlock,void *a29)
{
  void **v29;

  if (aBlock)
    _Block_release(aBlock);
  if (a27)
    _Block_release(a27);
  ResetInfo::~ResetInfo(v29);
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void sub_1BF6A7A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  ResetInfo::~ResetInfo(&a29);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_2_34(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  _DWORD *v11;
  void **v12;
  xpc_object_t v13;
  xpc_object_t v14;
  void *__p[2];
  char v16;
  xpc_object_t xdict;
  unsigned int v18;
  _DWORD *v19;
  _QWORD *v20[2];

  v18 = a2;
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  xdict = v7;
LABEL_9:
  xpc_release(v6);
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1])
      goto LABEL_17;
    a3 = (uint64_t *)*a3;
  }
  else if (!*((_BYTE *)a3 + 23))
  {
    goto LABEL_17;
  }
  v8 = xpc_string_create((const char *)a3);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
LABEL_17:
  v10 = *(_QWORD *)(a1 + 104);
  v11 = operator new(0x38uLL);
  v11[8] = 0;
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = v20;
  v19 = v11;
  v20[0] = v11;
  *((_BYTE *)v11 + 24) = 1;
  v20[1] = (_QWORD *)1;
  *((_QWORD *)v11 + 5) = v10;
  *((_QWORD *)v11 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v19, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20[0]);
  if (v16 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  v13 = xpc_string_create((const char *)v12);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB370], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v16 < 0)
    operator delete(__p[0]);
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 144), &v18, &xdict);
  xpc_release(xdict);
}

void sub_1BF6A7C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, char a14, uint64_t a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  ResetInfo::ResetInfo((std::string *)(a1 + 32), (const ResetInfo *)(a2 + 32));
  result = *(void **)(a2 + 144);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 144) = result;
  return result;
}

void __destroy_helper_block_e8_32c14_ZTS9ResetInfo144c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 144);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 103) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 80));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(*(void **)(a1 + 32));
    return;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_11;
}

void *__copy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  ResetInfo::ResetInfo((std::string *)(a1 + 40), (const ResetInfo *)(a2 + 40));
  result = *(void **)(a2 + 152);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 152) = result;
  return result;
}

void __destroy_helper_block_e8_40c14_ZTS9ResetInfo152c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 152);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_11:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_11;
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  xpc_object_t object;
  std::__shared_weak_count *v16;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    v6 = std::__shared_weak_count::lock(v4);
    v16 = v6;
    if (v6)
    {
      if (!*(_QWORD *)(a1 + 32))
      {
        v9 = v6;
LABEL_14:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v7 = xpc_dictionary_create(0, 0, 0);
      v8 = v7;
      if (v7)
      {
        object = v7;
      }
      else
      {
        v8 = xpc_null_create();
        object = v8;
        if (!v8)
        {
          v10 = xpc_null_create();
          v8 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x1C3B8CD78](v8) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v8);
        goto LABEL_13;
      }
      v10 = xpc_null_create();
LABEL_12:
      object = v10;
LABEL_13:
      xpc_release(v8);
      v13 = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v13, &object);
      xpc_release(object);
      v9 = v16;
      if (!v16)
        return;
      goto LABEL_14;
    }
  }
}

void sub_1BF6A7F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_40(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  xpc_object_t v11;
  void (**v12)(const void *, uint64_t, _BYTE *);
  xpc_object_t v13;
  xpc_object_t v14;
  void (**v15)(const void *, uint64_t, _BYTE *);
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _BYTE object[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v31 = v8;
  if (!v8)
    return;
  v9 = v8;
  if (!a1[5])
    goto LABEL_22;
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v10 = v7[11];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v30 = *MEMORY[0x1E0CFB870];
      *(_DWORD *)object = 136315138;
      *(_QWORD *)&object[4] = v30;
      _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_22;
    }
    v11 = xpc_null_create();
    v12 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    *(_QWORD *)object = v11;
    v13 = xpc_null_create();
    v12[2](v12, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v13);
    goto LABEL_22;
  }
  v14 = (xpc_object_t)*a2;
  if (v14)
  {
    xpc_retain(v14);
    v15 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
      goto LABEL_10;
  }
  else
  {
    v14 = xpc_null_create();
    v15 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
    {
LABEL_10:
      v16 = _Block_copy(v15);
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
LABEL_29:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_14;
    }
  }
  v16 = 0;
  v17 = (std::__shared_weak_count *)v7[16];
  if (!v17)
    goto LABEL_29;
LABEL_14:
  v18 = v7[15];
  v19 = std::__shared_weak_count::lock(v17);
  if (!v19)
    goto LABEL_29;
  v20 = v19;
  v21 = operator new(0x18uLL);
  *v21 = v7;
  v21[1] = v14;
  v22 = xpc_null_create();
  v21[2] = v16;
  v23 = v7[17];
  v24 = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = operator new(0x18uLL);
  *v26 = v21;
  v26[1] = v18;
  v26[2] = v20;
  dispatch_async_f(v23, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v27 = __ldaxr(v24);
  while (__stlxr(v27 - 1, v24));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v22);
  v9 = v31;
  if (v31)
    goto LABEL_22;
}

void sub_1BF6A8240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10BootModule10initializeEN8dispatch13group_sessionE_block_invoke_42(_QWORD *a1, uint64_t a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  const void *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  const char *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _BYTE object[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v9 = v7;
      if (a1[5])
      {
        ctu::cf_to_xpc(*a3, v8);
        v10 = *(xpc_object_t *)object;
        v11 = MEMORY[0x1E0C812F8];
        if (*(_QWORD *)object && MEMORY[0x1C3B8CD78](*(_QWORD *)object) == v11)
          xpc_retain(*(xpc_object_t *)object);
        else
          v10 = xpc_null_create();
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x1C3B8CD78](v10) == v11)
        {
          value = xpc_dictionary_get_value(v10, (const char *)*MEMORY[0x1E0DDF828]);
          *(_QWORD *)object = value;
          if (value)
            xpc_retain(value);
          else
            *(_QWORD *)object = xpc_null_create();
          *(_BYTE *)(v6 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(*(xpc_object_t *)object);
          v13 = *(NSObject **)(v6 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            if (*(_BYTE *)(v6 + 192))
              v14 = "started";
            else
              v14 = "stopped";
            *(_DWORD *)object = 136315138;
            *(_QWORD *)&object[4] = v14;
            _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Transport client %s", object, 0xCu);
          }
        }
        xpc_release(v10);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF6A846C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void BootModule::start(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = v5;
  v18[1] = v7;
  v18[2] = v13;
  v18[3] = a1;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void BootModule::finishInitialization_sync(BootModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  AppleBasebandManager **v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  char *v25;
  size_t v26;
  void *v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  void *v54;
  dispatch_object_t v55;
  void *v56[2];
  unint64_t v57;
  _QWORD v58[6];
  std::__shared_weak_count *v59;
  void *v60;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v63;
  _QWORD aBlock[6];
  std::__shared_weak_count *v65;
  const void *v66;
  dispatch_object_t v67;
  void *v68[2];
  unint64_t v69;
  const void *v70;
  void *__dst[2];
  unint64_t v72;
  __int128 v73;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(BootModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v72 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v72) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v70 = 0;
  AppleBasebandManager::create();
  v16 = (AppleBasebandManager **)((char *)this + 456);
  v17 = v73;
  v73 = 0uLL;
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
  *(_OWORD *)((char *)this + 456) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (!*((_QWORD *)&v73 + 1))
    goto LABEL_26;
  v22 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_26:
    v24 = v70;
    if (!v70)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  v24 = v70;
  if (v70)
LABEL_27:
    CFRelease(v24);
LABEL_28:
  if (SHIBYTE(v72) < 0)
    operator delete(__dst[0]);
  v25 = abm::kEventTransportIsReady[0];
  v26 = strlen(abm::kEventTransportIsReady[0]);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = (void **)operator new(v29 + 1);
    v68[1] = v27;
    v69 = v30 | 0x8000000000000000;
    v68[0] = v28;
  }
  else
  {
    HIBYTE(v69) = v26;
    v28 = v68;
    if (!v26)
      goto LABEL_38;
  }
  memmove(v28, v25, (size_t)v27);
LABEL_38:
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_51_5;
  aBlock[4] = this;
  aBlock[5] = v3;
  v65 = v5;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = *((_QWORD *)this + 17);
  if (v33)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v66 = v32;
  v67 = v33;
  AppleBasebandManager::setEventHandler();
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v69) < 0)
    operator delete(v68[0]);
  v34 = (const void *)*MEMORY[0x1E0CFBAD0];
  v35 = strlen((const char *)*MEMORY[0x1E0CFBAD0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v63 = v39 | 0x8000000000000000;
    __p[0] = v37;
  }
  else
  {
    HIBYTE(v63) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_56;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_56:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v58[0] = MEMORY[0x1E0C809B0];
  v58[1] = 1174405120;
  v58[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_52;
  v58[3] = &__block_descriptor_tmp_53_2;
  v58[4] = this;
  v58[5] = v3;
  v59 = v5;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v58);
  v42 = *((_QWORD *)this + 17);
  if (v42)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v60 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v60)
    _Block_release(v60);
  if (SHIBYTE(v63) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFBF60];
  v44 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v56[1] = v45;
    v57 = v48 | 0x8000000000000000;
    v56[0] = v46;
  }
  else
  {
    HIBYTE(v57) = v44;
    v46 = v56;
    if (!v44)
      goto LABEL_74;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_74:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v52[0] = MEMORY[0x1E0C809B0];
  v52[1] = 1174405120;
  v52[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_54;
  v52[3] = &__block_descriptor_tmp_55_2;
  v52[4] = this;
  v52[5] = v3;
  v53 = v5;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v52);
  v51 = *((_QWORD *)this + 17);
  if (v51)
    dispatch_retain(v51);
  v54 = v50;
  v55 = v51;
  AppleBasebandManager::setEventHandler();
  if (v55)
    dispatch_release(v55);
  if (v54)
    _Block_release(v54);
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  AppleBasebandManager::eventsOn(*v16);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF6A8BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
  {
    std::__shared_weak_count::__release_weak(a45);
    std::__shared_weak_count::__release_weak(v45);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v45);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v9;
  __CFDictionary *v10;
  const __CFString **v11;
  const __CFString **v12;
  const void *v13;
  const __CFAllocator *v14;
  const void *v15;
  NSObject *v16;
  const char *v17;
  const __CFAllocator *v18;
  __CFDictionary *v19;
  uint64_t (*v20)(uint64_t);
  const __CFString **v21;
  const void *v22;
  const void *v23;
  size_t v24;
  void *v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeRef v29;
  CFTypeID v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  void *aBlock;
  CFTypeRef v42;
  void *__dst[2];
  unint64_t v44;
  CFTypeRef cf;
  void *object;
  std::__shared_weak_count *v48;
  __CFDictionary *v49;
  uint64_t v50;
  _BYTE state[22];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = (BootModule *)a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v48 = v4;
  if (!v4)
    return;
  v5 = v4;
  if (!a1[5])
  {
LABEL_61:
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    return;
  }
  v6 = *((int *)v3 + 112);
  if ((_DWORD)v6 != 3)
  {
    v16 = *((_QWORD *)v3 + 11);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if (v6 > 8)
        v17 = "Unknown";
      else
        v17 = off_1E791DDB8[v6];
      v36 = *MEMORY[0x1E0CFB980];
      *(_DWORD *)state = 136315394;
      *(_QWORD *)&state[4] = v17;
      *(_WORD *)&state[12] = 2080;
      *(_QWORD *)&state[14] = v36;
      _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I State is '%s'; don't send '%s' event", state, 0x16u);
    }
    goto LABEL_61;
  }
  object = _os_activity_create(&dword_1BF566000, "Baseband state: transport is ready", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter((os_activity_t)object, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  (*(void (**)(BootModule *, uint64_t))(*(_QWORD *)v3 + 96))(v3, 4);
  cf = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  if (Mutable)
    cf = Mutable;
  v11 = (const __CFString **)*MEMORY[0x1E0CFB530];
  *(_QWORD *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v11, (const char *)0x8000100, v7, v9);
  v12 = (const __CFString **)*MEMORY[0x1E0CFB980];
  v13 = *(const void **)state;
  v50 = *(_QWORD *)state;
  *(_QWORD *)state = 0;
  ctu::cf::convert_copy((ctu::cf *)state, v12, (const char *)0x8000100, v7, v14);
  v15 = *(const void **)state;
  v49 = *(__CFDictionary **)state;
  if (v13 && *(_QWORD *)state)
  {
    CFDictionarySetValue(v10, v13, *(const void **)state);
  }
  else if (!*(_QWORD *)state)
  {
    goto LABEL_15;
  }
  CFRelease(v15);
LABEL_15:
  if (v13)
    CFRelease(v13);
  v49 = (__CFDictionary *)0xAAAAAAAAAAAAAAAALL;
  BootModule::calculateBootStatistics_sync(v3, &v49);
  v19 = v49;
  v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v49)
    v20 = 0;
  if (v20)
  {
    v21 = (const __CFString **)*MEMORY[0x1E0CFBAE8];
    *(_QWORD *)state = 0;
    ctu::cf::convert_copy((ctu::cf *)state, v21, (const char *)0x8000100, v7, v18);
    v22 = *(const void **)state;
    v50 = *(_QWORD *)state;
    *(_QWORD *)state = v19;
    if (v19)
    {
      CFRetain(v19);
      if (v22)
        CFDictionarySetValue(v10, v22, v19);
      CFRelease(v19);
    }
    if (v22)
      CFRelease(v22);
  }
  v23 = (const void *)*MEMORY[0x1E0CFBD68];
  v24 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v25 = (void *)v24;
  if (v24 >= 0x17)
  {
    v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v27 = v24 | 7;
    v28 = v27 + 1;
    v26 = (void **)operator new(v27 + 1);
    __dst[1] = v25;
    v44 = v28 | 0x8000000000000000;
    __dst[0] = v26;
  }
  else
  {
    HIBYTE(v44) = v24;
    v26 = __dst;
    if (!v24)
      goto LABEL_34;
  }
  memmove(v26, v23, (size_t)v25);
LABEL_34:
  *((_BYTE *)v25 + (_QWORD)v26) = 0;
  v29 = cf;
  if (cf && (v30 = CFGetTypeID(cf), v30 == CFDictionaryGetTypeID()))
  {
    v42 = v29;
    CFRetain(v29);
  }
  else
  {
    v42 = 0;
  }
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 1174405120;
  v39[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2;
  v39[3] = &__block_descriptor_tmp_49_2;
  v32 = a1[5];
  v31 = (std::__shared_weak_count *)a1[6];
  v39[4] = v3;
  v39[5] = v32;
  v40 = v31;
  if (v31)
  {
    p_shared_weak_owners = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
  }
  aBlock = _Block_copy(v39);
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &v42, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v42)
    CFRelease(v42);
  if (SHIBYTE(v44) < 0)
    operator delete(__dst[0]);
  v35 = *((_QWORD *)v3 + 26);
  *((_QWORD *)v3 + 26) = 0;
  if (v35)
  {
    dispatch_group_leave(v35);
    dispatch_release(v35);
  }
  if (v40)
    std::__shared_weak_count::__release_weak(v40);
  if (v49)
    CFRelease(v49);
  if (v29)
    CFRelease(v29);
  if (object)
    os_release(object);
  v5 = v48;
  if (v48)
    goto LABEL_61;
}

void sub_1BF6A91C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,void *a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 80));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v28 - 88));
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v28 - 96));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a24);
  ctu::os::scoped_activity::~scoped_activity(&a25);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void BootModule::calculateBootStatistics_sync(BootModule *this@<X0>, __CFDictionary **a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  const __CFAllocator *v12;
  __CFDictionary *Mutable;
  const __CFAllocator *v14;
  __CFDictionary *v15;
  const __CFAllocator *v16;
  const __CFAllocator *v17;
  CFTypeID v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v4 = TelephonyUtilSystemMachTime();
  v5 = *((_QWORD *)this + 29);
  v6 = v4 - v5;
  v7 = *((_DWORD *)this + 60);
  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v4 - v5;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband total boot time = %u millisec", (uint8_t *)v19, 8u);
    v8 = *((_QWORD *)this + 11);
    v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      v10 = v4 - v7;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = v7 - v5;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_3;
  }
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v9;
  _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband image push time = %u millisec", (uint8_t *)v19, 8u);
  v8 = *((_QWORD *)this + 11);
  v10 = v4 - v7;
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_13:
  LODWORD(v19[0]) = 67109120;
  HIDWORD(v19[0]) = v10;
  _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband engage time     = %u millisec", (uint8_t *)v19, 8u);
  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    v11 = *((_DWORD *)this + 56);
    LODWORD(v19[0]) = 67109120;
    HIDWORD(v19[0]) = v11;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband boot attempts   = %u", (uint8_t *)v19, 8u);
  }
LABEL_6:
  BootModule::submitMetric_sync(this, *((_DWORD *)this + 56), v6, 1);
  *((_DWORD *)this + 56) = 0;
  v19[0] = 0;
  v12 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = Mutable;
  if (Mutable)
    v19[0] = Mutable;
  ctu::cf::update<char const*,unsigned int>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB3F8], v6, v12, v14);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x1E0CFB9E0], v9, v12, v16);
  ctu::cf::update<char const*,unsigned int>(v15, (const __CFString **)*MEMORY[0x1E0CFB650], v10, v12, v17);
  if (v15)
  {
    v18 = CFGetTypeID(v15);
    if (v18 == CFDictionaryGetTypeID())
    {
      *a2 = v15;
      CFRetain(v15);
    }
    else
    {
      *a2 = 0;
    }
    CFRelease(v15);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1BF6A9590(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF6A95B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v8[0] = MEMORY[0x1E0C809B0];
        v8[1] = 0x40000000;
        v8[2] = ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3;
        v8[3] = &__block_descriptor_tmp_48_3;
        v8[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  std::string v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(int *)(v1 + 448);
  if ((_DWORD)v2 == 4)
  {
    v11 = 0xAAAAAAAAAAAAAAAALL;
    v12 = 0xAAAAAAAAAAAAAAAALL;
    (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v1 + 80))(&v11);
    v3 = v11;
    if (v11)
    {
      v4 = (char *)operator new(0x38uLL);
      strcpy(v4, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
      v5 = *(_QWORD *)(v3 + 104);
      std::string::__init_copy_ctor_external(&v13, v4, 0x33uLL);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, &v13);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      operator delete(v4);
    }
    v6 = (std::__shared_weak_count *)v12;
    if (v12)
    {
      v7 = (unint64_t *)(v12 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v9 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (v2 > 8)
        v10 = "Unknown";
      else
        v10 = off_1E791DE00[v2];
      LODWORD(v13.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I State is '%s' not releasing power assertion yet", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_1BF6A9824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF6A9858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_52(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  BootController *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(BootController **)(v3 + 472);
        if (v6)
          BootController::markNonvolatileDataErased(v6);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF6A9910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule25finishInitialization_syncEv_block_invoke_54(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  int Int;
  _QWORD v13[2];
  CFTypeRef cf;
  __CFString *v15;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v13[0] = 0xAAAAAAAAAAAAAAAALL;
        v13[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v13, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v15, (const char *)*MEMORY[0x1E0CFB9E8]);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v13, v15);
        MEMORY[0x1C3B8B878](&v15);
        *(_DWORD *)(v5 + 256) = Int;
        MEMORY[0x1C3B8B8B4](v13);
        v11 = cf;
      }
      if (v11)
        CFRelease(v11);
    }
  }
}

void BootModule::submitMetric_sync(BootModule *this, unsigned int a2, uint64_t a3, BOOL a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  const void *v26;
  size_t v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  const void *v32;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v35;
  unint64_t v36;

  v8 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of bootup time", buf, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x1E0C812F8];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB260], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_uint64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB320], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_BOOL_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB268], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB020], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524384);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB0E8], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB018], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = (const void *)*MEMORY[0x1E0CFB5E0];
  v27 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v27 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v28 = v27;
  if (v27 >= 0x17)
  {
    v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v30 = v27 | 7;
    v31 = v30 + 1;
    v29 = operator new(v30 + 1);
    v35 = v28;
    v36 = v31 | 0x8000000000000000;
    *(_QWORD *)buf = v29;
LABEL_36:
    memmove(v29, v26, v28);
    *((_BYTE *)v29 + v28) = 0;
    object = v11;
    if (v11)
      goto LABEL_32;
    goto LABEL_37;
  }
  HIBYTE(v36) = v27;
  v29 = buf;
  if (v27)
    goto LABEL_36;
  buf[0] = 0;
  object = v11;
  if (v11)
  {
LABEL_32:
    xpc_retain(v11);
    goto LABEL_38;
  }
LABEL_37:
  object = xpc_null_create();
LABEL_38:
  v32 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v32);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v36) < 0)
    operator delete(*(void **)buf);
  xpc_release(v13);
  xpc_release(v11);
}

void sub_1BF6A9EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void BootModule::handleBootFailed_sync(uint64_t a1, const void **a2)
{
  int v4;
  size_t v5;
  size_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  std::string *v12;
  __int128 v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t *v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  const void *v37;
  size_t v38;
  void *v39;
  void **v40;
  CFTypeRef v41;
  uint64_t v42;
  uint64_t v43;
  CFTypeID v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  xpc_object_t v48;
  xpc_object_t v49;
  NSObject *v50;
  __int128 v51;
  const void *v52;
  size_t v53;
  size_t v54;
  _BYTE *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  void **v58;
  xpc_object_t v59;
  xpc_object_t v60;
  const char *v61;
  xpc_object_t v62;
  xpc_object_t v63;
  const void *v64;
  size_t v65;
  size_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  CFTypeRef v75;
  os_activity_t v76;
  uint64_t v77;
  uint64_t v78;
  const void *v79;
  size_t v80;
  size_t v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[6];
  std::__shared_weak_count *v86;
  const void *v87;
  xpc_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v90;
  const void *v91;
  const void *v92;
  void *__dst[2];
  unint64_t v94;
  void *v95;
  std::string v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  __int128 v103;
  char v104;
  CFTypeRef cf;
  _QWORD *v106;
  void *v107[2];
  char v108;
  __int128 v109;
  unint64_t v110;
  __int128 v111;
  unint64_t v112;
  void *__p[3];
  os_activity_t v114;
  _BYTE state[32];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v114 = _os_activity_create(&dword_1BF566000, "Baseband state: boot up failed", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  memset(state, 170, 16);
  os_activity_scope_enter(v114, (os_activity_scope_state_t)state);
  os_activity_scope_leave((os_activity_scope_state_t)state);
  memset(__p, 170, sizeof(__p));
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = v5 + 23;
  memset(state, 170, 24);
  if (v5 + 23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0xFFFFFFFFFFFFFFE9)
  {
    v7 = &state[23];
    state[23] = v5 + 23;
    qmemcpy(state, "modem boot up failure [", 23);
LABEL_10:
    if (v4 >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v7, v11, v5);
    goto LABEL_14;
  }
  v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v6 | 7) != 0x17)
    v8 = v6 | 7;
  v9 = v8 + 1;
  v10 = (char *)operator new(v8 + 1);
  *(_QWORD *)&state[8] = v5 + 23;
  *(_QWORD *)&state[16] = v9 | 0x8000000000000000;
  *(_QWORD *)state = v10;
  qmemcpy(v10, "modem boot up failure [", 23);
  v7 = v10 + 23;
  if (v5)
    goto LABEL_10;
LABEL_14:
  v7[v5] = 0;
  v12 = std::string::append((std::string *)state, "]", 1uLL);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((state[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)state);
    if (*(_BYTE *)(a1 + 229))
      goto LABEL_19;
  }
  else if (*(_BYTE *)(a1 + 229))
  {
    goto LABEL_19;
  }
  v14 = *(_DWORD *)(a1 + 224);
  if (v14 <= *(_DWORD *)(a1 + 196))
  {
    v50 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)state = 67109120;
      *(_DWORD *)&state[4] = v14;
      _os_log_error_impl(&dword_1BF566000, v50, OS_LOG_TYPE_ERROR, "Attempting to boot baseband again; attempt=%d",
        state,
        8u);
    }
    *(_QWORD *)&v51 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v51 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v119 = v51;
    v120 = v51;
    v117 = v51;
    v118 = v51;
    *(_OWORD *)&state[16] = v51;
    v116 = v51;
    *(_OWORD *)state = v51;
    v52 = (const void *)*MEMORY[0x1E0CFB590];
    v53 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (v53 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v54 = v53;
    if (v53 >= 0x17)
    {
      v77 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v53 | 7) != 0x17)
        v77 = v53 | 7;
      v78 = v77 + 1;
      v55 = operator new(v77 + 1);
      *((_QWORD *)&v111 + 1) = v54;
      v112 = v78 | 0x8000000000000000;
      *(_QWORD *)&v111 = v55;
    }
    else
    {
      HIBYTE(v112) = v53;
      v55 = &v111;
      if (!v53)
      {
LABEL_130:
        v55[v54] = 0;
        v79 = (const void *)*MEMORY[0x1E0CFBEA0];
        v80 = strlen((const char *)*MEMORY[0x1E0CFBEA0]);
        if (v80 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v81 = v80;
        if (v80 >= 0x17)
        {
          v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v83 = v80 | 7;
          v84 = v83 + 1;
          v82 = operator new(v83 + 1);
          *((_QWORD *)&v109 + 1) = v81;
          v110 = v84 | 0x8000000000000000;
          *(_QWORD *)&v109 = v82;
        }
        else
        {
          HIBYTE(v110) = v80;
          v82 = &v109;
          if (!v80)
          {
LABEL_138:
            v82[v81] = 0;
            Timestamp::Timestamp((Timestamp *)&cf);
            Timestamp::asString((uint64_t)&cf, 0, 9, v107);
            v104 = 0;
            LOBYTE(v103) = 0;
            ResetInfo::ResetInfo((std::string *)state, &v111, &v109, (__int128 *)__p, (uint64_t)v107, 4, &v103);
            if (v108 < 0)
            {
              operator delete(v107[0]);
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v106);
              if ((SHIBYTE(v110) & 0x80000000) == 0)
              {
LABEL_140:
                if ((SHIBYTE(v112) & 0x80000000) == 0)
                  goto LABEL_141;
LABEL_154:
                operator delete((void *)v111);
LABEL_141:
                ResetInfo::ResetInfo(&v96, (const ResetInfo *)state);
                v95 = 0;
                BootModule::requestReset(a1, &v96, &v95);
                if (v95)
                  _Block_release(v95);
                if (v102 < 0)
                {
                  operator delete(v101);
                  if ((v100 & 0x80000000) == 0)
                  {
LABEL_145:
                    if ((v98 & 0x80000000) == 0)
                      goto LABEL_146;
                    goto LABEL_157;
                  }
                }
                else if ((v100 & 0x80000000) == 0)
                {
                  goto LABEL_145;
                }
                operator delete(v99);
                if ((v98 & 0x80000000) == 0)
                {
LABEL_146:
                  if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_147;
                  goto LABEL_158;
                }
LABEL_157:
                operator delete(v97);
                if ((SHIBYTE(v96.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_147:
                  if ((SHIBYTE(v120) & 0x80000000) == 0)
                    goto LABEL_148;
                  goto LABEL_159;
                }
LABEL_158:
                operator delete(v96.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v120) & 0x80000000) == 0)
                {
LABEL_148:
                  if ((SBYTE7(v118) & 0x80000000) == 0)
                    goto LABEL_149;
                  goto LABEL_160;
                }
LABEL_159:
                operator delete(*((void **)&v119 + 1));
                if ((SBYTE7(v118) & 0x80000000) == 0)
                {
LABEL_149:
                  if ((SHIBYTE(v116) & 0x80000000) == 0)
                    goto LABEL_150;
                  goto LABEL_161;
                }
LABEL_160:
                operator delete((void *)v117);
                if ((SHIBYTE(v116) & 0x80000000) == 0)
                {
LABEL_150:
                  if ((state[23] & 0x80000000) == 0)
                    goto LABEL_118;
LABEL_162:
                  operator delete(*(void **)state);
                  goto LABEL_118;
                }
LABEL_161:
                operator delete(*(void **)&state[24]);
                if ((state[23] & 0x80000000) == 0)
                  goto LABEL_118;
                goto LABEL_162;
              }
            }
            else
            {
              std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&cf, v106);
              if ((SHIBYTE(v110) & 0x80000000) == 0)
                goto LABEL_140;
            }
            operator delete((void *)v109);
            if ((SHIBYTE(v112) & 0x80000000) == 0)
              goto LABEL_141;
            goto LABEL_154;
          }
        }
        memmove(v82, v79, v81);
        goto LABEL_138;
      }
    }
    memmove(v55, v52, v54);
    goto LABEL_130;
  }
LABEL_19:
  v15 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)state = 0;
    _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Baseband is declared dead; no more boot attempts",
      state,
      2u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 6);
  cf = 0;
  v16 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    cf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFB588], v16, v18);
  v19 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v19 || (v20 = *(_QWORD *)(a1 + 120), (v21 = std::__shared_weak_count::lock(v19)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  *(_QWORD *)&v109 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v109 + 1) = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v27 = (uint64_t *)off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(state);
    v28 = *(_OWORD *)state;
    *(_QWORD *)state = 0;
    *(_QWORD *)&state[8] = 0;
    v29 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v28;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = *(std::__shared_weak_count **)&state[8];
    if (*(_QWORD *)&state[8])
    {
      v33 = (unint64_t *)(*(_QWORD *)&state[8] + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v27 = (uint64_t *)off_1ED70F338;
  }
  *(_QWORD *)&v109 = v27;
  *((_QWORD *)&v109 + 1) = *(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v35 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v37 = (const void *)*MEMORY[0x1E0CFBD68];
  v38 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v38 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v39 = (void *)v38;
  if (v38 >= 0x17)
  {
    v42 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v42 = v38 | 7;
    v43 = v42 + 1;
    v40 = (void **)operator new(v42 + 1);
    __dst[1] = v39;
    v94 = v43 | 0x8000000000000000;
    __dst[0] = v40;
  }
  else
  {
    HIBYTE(v94) = v38;
    v40 = __dst;
    if (!v38)
    {
      LOBYTE(__dst[0]) = 0;
      v41 = cf;
      if (!cf)
        goto LABEL_57;
      goto LABEL_55;
    }
  }
  memmove(v40, v37, (size_t)v39);
  *((_BYTE *)v39 + (_QWORD)v40) = 0;
  v41 = cf;
  if (!cf)
  {
LABEL_57:
    v41 = 0;
    v92 = 0;
    goto LABEL_58;
  }
LABEL_55:
  v44 = CFGetTypeID(v41);
  if (v44 != CFDictionaryGetTypeID())
    goto LABEL_57;
  v92 = v41;
  CFRetain(v41);
LABEL_58:
  v45 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_58_4;
  aBlock[4] = a1;
  aBlock[5] = v20;
  v90 = v22;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  v47 = _Block_copy(aBlock);
  v91 = v47;
  ABMServer::broadcast(v27, (uint64_t)__dst, &v92, &v91);
  if (v47)
    _Block_release(v47);
  if (v41)
    CFRelease(v41);
  if (SHIBYTE(v94) < 0)
    operator delete(__dst[0]);
  v48 = xpc_dictionary_create(0, 0, 0);
  if (v48 || (v48 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v48) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v48);
      v49 = v48;
    }
    else
    {
      v49 = xpc_null_create();
    }
  }
  else
  {
    v49 = xpc_null_create();
    v48 = 0;
  }
  xpc_release(v48);
  v56 = xpc_int64_create(4);
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB010], v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (SHIBYTE(__p[2]) >= 0)
    v58 = __p;
  else
    v58 = (void **)__p[0];
  v59 = xpc_string_create((const char *)v58);
  if (!v59)
    v59 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB930], v59);
  v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
  Timestamp::Timestamp((Timestamp *)&v111);
  Timestamp::asString((uint64_t)&v111, 0, 9, state);
  if (state[23] >= 0)
    v61 = state;
  else
    v61 = *(const char **)state;
  v62 = xpc_string_create(v61);
  if (!v62)
    v62 = xpc_null_create();
  xpc_dictionary_set_value(v49, (const char *)*MEMORY[0x1E0CFB370], v62);
  v63 = xpc_null_create();
  xpc_release(v62);
  xpc_release(v63);
  if ((state[23] & 0x80000000) != 0)
    operator delete(*(void **)state);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v111, *((_QWORD **)&v111 + 1));
  v64 = (const void *)*MEMORY[0x1E0CFB5F0];
  v65 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
  if (v65 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v66 = v65;
  if (v65 >= 0x17)
  {
    v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v65 | 7) != 0x17)
      v68 = v65 | 7;
    v69 = v68 + 1;
    v67 = operator new(v68 + 1);
    *(_QWORD *)&state[8] = v66;
    *(_QWORD *)&state[16] = v69 | 0x8000000000000000;
    *(_QWORD *)state = v67;
LABEL_100:
    memmove(v67, v64, v66);
    v67[v66] = 0;
    object = v49;
    if (v49)
      goto LABEL_96;
    goto LABEL_101;
  }
  state[23] = v65;
  v67 = state;
  if (v65)
    goto LABEL_100;
  state[0] = 0;
  object = v49;
  if (v49)
  {
LABEL_96:
    xpc_retain(v49);
    goto LABEL_102;
  }
LABEL_101:
  object = xpc_null_create();
LABEL_102:
  v85[0] = v45;
  v85[1] = 1174405120;
  v85[2] = ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_59;
  v85[3] = &__block_descriptor_tmp_61_2;
  v85[4] = a1;
  v85[5] = v20;
  v86 = v22;
  do
    v70 = __ldxr(p_shared_weak_owners);
  while (__stxr(v70 + 1, p_shared_weak_owners));
  v71 = _Block_copy(v85);
  v87 = v71;
  Service::runCommand(a1, (uint64_t)state, &object, &v87);
  if (v71)
    _Block_release(v71);
  xpc_release(object);
  object = 0;
  if ((state[23] & 0x80000000) != 0)
    operator delete(*(void **)state);
  if (v86)
    std::__shared_weak_count::__release_weak(v86);
  xpc_release(v49);
  if (v90)
    std::__shared_weak_count::__release_weak(v90);
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (!*((_QWORD *)&v109 + 1))
    goto LABEL_116;
  v73 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
  do
    v74 = __ldaxr(v73);
  while (__stlxr(v74 - 1, v73));
  if (v74)
  {
LABEL_116:
    std::__shared_weak_count::__release_weak(v22);
    v75 = cf;
    if (!cf)
      goto LABEL_118;
    goto LABEL_117;
  }
  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
  std::__shared_weak_count::__release_weak(v72);
  std::__shared_weak_count::__release_weak(v22);
  v75 = cf;
  if (cf)
LABEL_117:
    CFRelease(v75);
LABEL_118:
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v76 = v114;
    if (!v114)
      return;
  }
  else
  {
    v76 = v114;
    if (!v114)
      return;
  }
  os_release(v76);
}

void sub_1BF6AAB3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  std::string v21;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = (_QWORD *)a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v20 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v14 = v4;
LABEL_21:
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
    return;
  }
  v5 = (std::__shared_weak_count *)v3[23];
  v3[22] = 0;
  v3[23] = 0;
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, _QWORD *))(*v3 + 80))(&v17, v3);
  v8 = v17;
  if (v17)
  {
    v9 = (char *)operator new(0x38uLL);
    strcpy(v9, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v10 = *(_QWORD *)(v8 + 104);
    std::string::__init_copy_ctor_external(&v21, v9, 0x33uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 32))(v10, &v21);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    operator delete(v9);
  }
  v11 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v12 = (unint64_t *)(v18 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
    goto LABEL_21;
}

void sub_1BF6AAF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  if (a19 < 0)
    operator delete(__p);
  operator delete(v19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1BF6AAFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule21handleBootFailed_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke_59(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        v13 = *a3;
        if (*a3)
        {
          xpc_retain(*a3);
          v14 = (std::__shared_weak_count *)v7[16];
          if (!v14)
LABEL_23:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v13 = xpc_null_create();
          v14 = (std::__shared_weak_count *)v7[16];
          if (!v14)
            goto LABEL_23;
        }
        v15 = v7[15];
        v16 = std::__shared_weak_count::lock(v14);
        if (!v16)
          goto LABEL_23;
        v17 = v16;
        v18 = operator new(0x28uLL);
        *v18 = v7;
        v18[1] = v10;
        v18[2] = v9;
        *((_DWORD *)v18 + 6) = a2;
        v18[4] = v13;
        v19 = xpc_null_create();
        v20 = v7[17];
        v21 = (unint64_t *)&v17->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
        v23 = operator new(0x18uLL);
        *v23 = v18;
        v23[1] = v15;
        v23[2] = v17;
        dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_);
        do
          v24 = __ldaxr(v21);
        while (__stlxr(v24 - 1, v21));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        xpc_release(v19);
      }
      v25 = (unint64_t *)&v9->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void BootModule::handleReset_sync(uint64_t a1, uint64_t a2, void **a3)
{
  void **v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  const __CFAllocator *v9;
  uint64_t v10;
  uint64_t v11;
  const __CFAllocator *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  const void *v32;
  size_t v33;
  void *v34;
  void **v35;
  __CFDictionary *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  CFTypeID v40;
  unint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __CFDictionary *v49;
  _QWORD aBlock[6];
  std::__shared_weak_count *v51;
  std::string v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *__p;
  char v58;
  void *v59;
  const void *v60;
  __CFDictionary *v61;
  void *__dst[2];
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  __CFDictionary *v66;
  std::string v67;

  if ((*(char *)(a2 + 71) & 0x80000000) == 0)
  {
    v67 = *(std::string *)(a2 + 48);
    v6 = (void **)(a1 + 152);
    if ((*(char *)(a1 + 175) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  v6 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
LABEL_3:
    operator delete(*v6);
LABEL_4:
  *(std::string *)v6 = v67;
  v66 = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    v66 = Mutable;
  else
    Mutable = v66;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBB68], v7, v9);
  ResetInfo::addToDict(a2, &v66, v10, v11, v12);
  v64 = 0xAAAAAAAAAAAAAAAALL;
  v65 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v13 = off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&v67);
    v14 = *(_OWORD *)&v67.__r_.__value_.__l.__data_;
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = 0uLL;
    v15 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    size = (std::__shared_weak_count *)v67.__r_.__value_.__l.__size_;
    if (v67.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v67.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v13 = off_1ED70F338;
  }
  v64 = v13;
  v65 = *(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v21 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v23 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v23 || (v24 = *(_QWORD *)(a1 + 120), (v25 = std::__shared_weak_count::lock(v23)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  v29 = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v31 = (uint64_t *)v64;
  v32 = (const void *)*MEMORY[0x1E0CFBD68];
  v33 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v33 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    v37 = a3;
    v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v38 = v33 | 7;
    v39 = v38 + 1;
    v35 = (void **)operator new(v38 + 1);
    __dst[1] = v34;
    v63 = v39 | 0x8000000000000000;
    __dst[0] = v35;
    a3 = v37;
    v31 = (uint64_t *)v64;
  }
  else
  {
    HIBYTE(v63) = v33;
    v35 = __dst;
    if (!v33)
    {
      LOBYTE(__dst[0]) = 0;
      v36 = v66;
      if (!v66)
        goto LABEL_43;
      goto LABEL_41;
    }
  }
  memmove(v35, v32, (size_t)v34);
  *((_BYTE *)v34 + (_QWORD)v35) = 0;
  v36 = v66;
  if (!v66)
  {
LABEL_43:
    v36 = 0;
    v61 = 0;
    goto LABEL_44;
  }
LABEL_41:
  v40 = CFGetTypeID(v36);
  if (v40 != CFDictionaryGetTypeID())
    goto LABEL_43;
  v61 = v36;
  CFRetain(v36);
LABEL_44:
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_62_1;
  aBlock[4] = a1;
  aBlock[5] = v24;
  v51 = v26;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  ResetInfo::ResetInfo(&v52, (const ResetInfo *)a2);
  v42 = *a3;
  if (*a3)
    v42 = _Block_copy(v42);
  v59 = v42;
  v43 = _Block_copy(aBlock);
  v60 = v43;
  ABMServer::broadcast(v31, (uint64_t)__dst, (const void **)&v61, &v60);
  if (v43)
    _Block_release(v43);
  if (v36)
    CFRelease(v36);
  if (SHIBYTE(v63) < 0)
  {
    operator delete(__dst[0]);
    v44 = v59;
    if (!v59)
      goto LABEL_57;
    goto LABEL_56;
  }
  v44 = v59;
  if (v59)
LABEL_56:
    _Block_release(v44);
LABEL_57:
  if (v58 < 0)
  {
    operator delete(__p);
    if ((v56 & 0x80000000) == 0)
    {
LABEL_59:
      if ((v54 & 0x80000000) == 0)
        goto LABEL_60;
      goto LABEL_72;
    }
  }
  else if ((v56 & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(v55);
  if ((v54 & 0x80000000) == 0)
  {
LABEL_60:
    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_61;
LABEL_73:
    operator delete(v52.__r_.__value_.__l.__data_);
    v45 = v51;
    if (!v51)
      goto LABEL_63;
    goto LABEL_62;
  }
LABEL_72:
  operator delete(v53);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_73;
LABEL_61:
  v45 = v51;
  if (v51)
LABEL_62:
    std::__shared_weak_count::__release_weak(v45);
LABEL_63:
  std::__shared_weak_count::__release_weak(v26);
  v46 = (std::__shared_weak_count *)v65;
  if (!v65)
    goto LABEL_67;
  v47 = (unint64_t *)(v65 + 8);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
LABEL_67:
    v49 = v66;
    if (!v66)
      return;
    goto LABEL_68;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  v49 = v66;
  if (v66)
LABEL_68:
    CFRelease(v49);
}

void sub_1BF6AB684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *aBlock)
{
  uint64_t v32;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v32 - 120));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule16handleReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  size_t size;
  std::string *v8;
  _BOOL4 v9;
  NSObject *v10;
  _BOOL4 v11;
  void *v12;
  std::string *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  void *v17;
  std::string v18;
  char v19;
  void *aBlock;
  std::string v21;
  char v22;
  std::string v23;
  std::__shared_weak_count *v25;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD **)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v25 = v4;
    if (v4)
    {
      v5 = v4;
      if (!*(_QWORD *)(a1 + 40))
        goto LABEL_27;
      if (*(char *)(a1 + 79) < 0)
        std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
      else
        v23 = *(std::string *)(a1 + 56);
      v6 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        size = v23.__r_.__value_.__l.__size_;
      if (size == strlen((const char *)*MEMORY[0x1E0CFB598]))
      {
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v8 = &v23;
        else
          v8 = (std::string *)v23.__r_.__value_.__r.__words[0];
        v9 = memcmp(v8, (const void *)*MEMORY[0x1E0CFB598], size) == 0;
        if ((v6 & 0x80000000) == 0)
        {
LABEL_15:
          v10 = v3[11];
          v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
          if (v9)
            goto LABEL_16;
          goto LABEL_34;
        }
      }
      else
      {
        v9 = 0;
        if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_15;
      }
      operator delete(v23.__r_.__value_.__l.__data_);
      v10 = v3[11];
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
LABEL_16:
        if (v11)
        {
          LOWORD(v23.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform soft reset", (uint8_t *)&v23, 2u);
        }
        ResetInfo::ResetInfo(&v21, (const ResetInfo *)(a1 + 56));
        v12 = *(void **)(a1 + 168);
        if (v12)
          v12 = _Block_copy(v12);
        aBlock = v12;
        (*(void (**)(_QWORD *, std::string *, void **))(*v3 + 104))(v3, &v21, &aBlock);
        if (aBlock)
          _Block_release(aBlock);
        v13 = &v21;
        if (v22 < 0)
LABEL_23:
          operator delete((void *)v13[3].__r_.__value_.__r.__words[2]);
LABEL_24:
        if (SHIBYTE(v13[2].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v13[2].__r_.__value_.__l.__data_);
          if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_26:
            if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_27;
LABEL_44:
            operator delete(v13->__r_.__value_.__l.__data_);
LABEL_27:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v15 = __ldaxr(p_shared_owners);
            while (__stlxr(v15 - 1, p_shared_owners));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return;
          }
        }
        else if ((SHIBYTE(v13[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_26;
        }
        operator delete(v13[1].__r_.__value_.__l.__data_);
        if ((SHIBYTE(v13->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_27;
        goto LABEL_44;
      }
LABEL_34:
      if (v11)
      {
        LOWORD(v23.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Request to perform hard reset", (uint8_t *)&v23, 2u);
      }
      ResetInfo::ResetInfo(&v18, (const ResetInfo *)(a1 + 56));
      v16 = *(void **)(a1 + 168);
      if (v16)
        v16 = _Block_copy(v16);
      v17 = v16;
      BootModule::hardReset_sync((uint64_t)v3, (uint64_t)&v18, (uint64_t *)&v17);
      if (v17)
        _Block_release(v17);
      v13 = &v18;
      if (v19 < 0)
        goto LABEL_23;
      goto LABEL_24;
    }
  }
}

void sub_1BF6ABA18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void sub_1BF6ABA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, void *a10)
{
  uint64_t v10;

  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(&a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v10 - 80);
  _Unwind_Resume(a1);
}

void sub_1BF6ABA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock,void *a25)
{
  uint64_t v25;

  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(&a25);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v25 - 80);
  _Unwind_Resume(a1);
}

void sub_1BF6ABA84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

void BootModule::hardReset_sync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  size_t v17;
  std::string *v18;
  _BOOL4 v19;
  NSObject *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __CFDictionary *Mutable;
  const __CFAllocator *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  const __CFAllocator *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_weak_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  const void *v39;
  size_t v40;
  void *v41;
  void **v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  CFTypeID v46;
  unint64_t v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD v52[6];
  std::__shared_weak_count *v53;
  const void *v54;
  const void *v55;
  void *__dst[2];
  unint64_t v57;
  std::string v58;
  unint64_t v59;
  unint64_t v60;

  v59 = 0xAAAAAAAAAAAAAAAALL;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v6 = off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&v58);
    v7 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
    *(_OWORD *)&v58.__r_.__value_.__l.__data_ = 0uLL;
    v8 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v7;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    size = (std::__shared_weak_count *)v58.__r_.__value_.__l.__size_;
    if (v58.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v58.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v6 = off_1ED70F338;
  }
  v59 = v6;
  v60 = *(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v14 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  *(_BYTE *)(a1 + 228) = 0;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    v58 = *(std::string *)(a2 + 24);
  v16 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    v17 = v58.__r_.__value_.__l.__size_;
  if (v17 == strlen((const char *)*MEMORY[0x1E0CFBEA0]))
  {
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v58;
    else
      v18 = (std::string *)v58.__r_.__value_.__r.__words[0];
    v19 = memcmp(v18, (const void *)*MEMORY[0x1E0CFBEA0], v17) == 0;
    if ((v16 & 0x80000000) == 0)
    {
LABEL_27:
      if (v19)
        goto LABEL_28;
LABEL_33:
      v21 = *(_QWORD **)(a1 + 472);
      if (!v21)
        goto LABEL_36;
      v22 = 8;
      goto LABEL_35;
    }
  }
  else
  {
    v19 = 0;
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(v58.__r_.__value_.__l.__data_);
  if (!v19)
    goto LABEL_33;
LABEL_28:
  v20 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v21 = *(_QWORD **)(a1 + 472);
    if (!v21)
      goto LABEL_36;
    goto LABEL_30;
  }
  LOWORD(v58.__r_.__value_.__l.__data_) = 0;
  _os_log_error_impl(&dword_1BF566000, v20, OS_LOG_TYPE_ERROR, "Falling back to baseband powercycle as bootup failed", (uint8_t *)&v58, 2u);
  v21 = *(_QWORD **)(a1 + 472);
  if (v21)
  {
LABEL_30:
    v22 = 9;
LABEL_35:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
LABEL_36:
  if (*a3)
  {
    LODWORD(v58.__r_.__value_.__l.__data_) = 0;
    dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>(a3, (unsigned int *)&v58, "");
  }
  v58.__r_.__value_.__r.__words[0] = 0;
  v23 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v26 = (const void *)v58.__r_.__value_.__r.__words[0];
  if (Mutable)
  {
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    if (v26)
    {
      CFRelease(v26);
      Mutable = (__CFDictionary *)v58.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    Mutable = (__CFDictionary *)v58.__r_.__value_.__r.__words[0];
  }
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBA60], v23, v25);
  ResetInfo::addToDict(a2, (__CFDictionary **)&v58, v27, v28, v29);
  v30 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v30 || (v31 = *(_QWORD *)(a1 + 120), (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = (unint64_t *)&v32->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v33);
  }
  v38 = (uint64_t *)v59;
  v39 = (const void *)*MEMORY[0x1E0CFBD68];
  v40 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v40 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = (void *)v40;
  if (v40 >= 0x17)
  {
    v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v44 = v40 | 7;
    v45 = v44 + 1;
    v42 = (void **)operator new(v44 + 1);
    __dst[1] = v41;
    v57 = v45 | 0x8000000000000000;
    __dst[0] = v42;
  }
  else
  {
    HIBYTE(v57) = v40;
    v42 = __dst;
    if (!v40)
    {
      LOBYTE(__dst[0]) = 0;
      v43 = (const void *)v58.__r_.__value_.__r.__words[0];
      if (!v58.__r_.__value_.__r.__words[0])
        goto LABEL_61;
      goto LABEL_59;
    }
  }
  memmove(v42, v39, (size_t)v41);
  *((_BYTE *)v41 + (_QWORD)v42) = 0;
  v43 = (const void *)v58.__r_.__value_.__r.__words[0];
  if (!v58.__r_.__value_.__r.__words[0])
  {
LABEL_61:
    v43 = 0;
    v55 = 0;
    goto LABEL_62;
  }
LABEL_59:
  v46 = CFGetTypeID(v43);
  if (v46 != CFDictionaryGetTypeID())
    goto LABEL_61;
  v55 = v43;
  CFRetain(v43);
LABEL_62:
  v52[0] = MEMORY[0x1E0C809B0];
  v52[1] = 1174405120;
  v52[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  v52[3] = &__block_descriptor_tmp_64_3;
  v52[4] = a1;
  v52[5] = v31;
  v53 = v33;
  do
    v47 = __ldxr(p_shared_weak_owners);
  while (__stxr(v47 + 1, p_shared_weak_owners));
  v48 = _Block_copy(v52);
  v54 = v48;
  ABMServer::broadcast(v38, (uint64_t)__dst, &v55, &v54);
  if (v48)
    _Block_release(v48);
  if (v43)
    CFRelease(v43);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst[0]);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v33);
  if (v58.__r_.__value_.__r.__words[0])
    CFRelease(v58.__r_.__value_.__l.__data_);
  v49 = (std::__shared_weak_count *)v60;
  if (v60)
  {
    v50 = (unint64_t *)(v60 + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1BF6ABF88(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1BF6ABF9C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF6ABFC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1BF6ABFDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1BF6ABFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24)
{
  std::__shared_weak_count *v24;
  const void *v25;
  uint64_t v26;

  if (v25)
    _Block_release(v25);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  if (a23 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v24);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a24);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v26 - 96);
  _Unwind_Resume(a1);
}

void sub_1BF6AC060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13 - 96);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v8[0] = MEMORY[0x1E0C809B0];
        v8[1] = 0x40000000;
        v8[2] = ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
        v8[3] = &__block_descriptor_tmp_63_2;
        v8[4] = v3;
        ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v3 + 120), (uint64_t)v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZN10BootModule14hardReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

void BootModule::boot_sync(BootModule *this)
{
  unsigned int v2;
  NSObject *v3;
  char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  capabilities::abs *v9;
  int shouldBoot;
  uint64_t v11;
  NSObject *global_queue;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v36[8];
  std::__shared_weak_count *v37;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v40;
  dispatch_group_t group;
  void *v42;
  char *v43;
  __int128 v44;
  uint8_t buf[8];
  _QWORD block[8];
  std::__shared_weak_count *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 v54;
  uint64_t v55;
  __n128 (*v56)(uint64_t, uint64_t);
  void (*v57)(uint64_t);
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = *((_DWORD *)this + 112) - 2;
  if (v2 <= 6)
  {
    v3 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = off_1E791DE48[v2];
      LODWORD(v54) = 136315138;
      *(_QWORD *)((char *)&v54 + 4) = v4;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Bootup request rejected as we are already in %s state", (uint8_t *)&v54, 0xCu);
    }
    return;
  }
  (*(void (**)(BootModule *, uint64_t))(*(_QWORD *)this + 96))(this, 2);
  ++*((_DWORD *)this + 56);
  v6 = *((_QWORD *)this + 15);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  v52 = v6;
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (v53 = v7) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v48 = 0;
  v49 = &v48;
  v50 = 0x2000000000;
  v51 = 0;
  v9 = (capabilities::abs *)dispatch_group_create();
  *(_QWORD *)&v54 = 0;
  *((_QWORD *)&v54 + 1) = &v54;
  v55 = 0x4002000000;
  v56 = __Block_byref_object_copy__5;
  v57 = __Block_byref_object_dispose__5;
  v59 = 0;
  v60 = 0;
  v58 = 0;
  shouldBoot = capabilities::abs::shouldBoot(v9);
  v11 = MEMORY[0x1E0C809B0];
  if (shouldBoot)
  {
    global_queue = dispatch_get_global_queue(25, 0);
    block[0] = v11;
    block[1] = 1174405120;
    block[2] = ___ZN10BootModule9boot_syncEv_block_invoke;
    block[3] = &unk_1E791D9F8;
    block[6] = this;
    block[7] = v6;
    v47 = v8;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    block[4] = &v48;
    block[5] = &v54;
    dispatch_group_async((dispatch_group_t)v9, global_queue, block);
    v15 = v47;
    if (v47)
    {
      v16 = (unint64_t *)&v47->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    if (v9)
    {
      dispatch_retain((dispatch_object_t)v9);
      dispatch_group_enter((dispatch_group_t)v9);
    }
    v18 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I Faking bootup", buf, 2u);
    }
    v19 = *((_QWORD *)this + 22);
    v20 = (char *)operator new(0x20uLL);
    v43 = v20;
    v44 = xmmword_1BF740C40;
    strcpy(v20, "Wait for Ready on Fake Boot");
    aBlock[0] = v11;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_93;
    aBlock[3] = &__block_descriptor_tmp_94_0;
    aBlock[4] = this;
    aBlock[5] = v6;
    v21 = (unint64_t *)&v8->__shared_owners_;
    v40 = v8;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    group = (dispatch_group_t)v9;
    if (v9)
    {
      dispatch_retain((dispatch_object_t)v9);
      dispatch_group_enter(group);
    }
    v23 = _Block_copy(aBlock);
    v42 = v23;
    ResetDetection::add(v19, (uint64_t)&v43, 0, &v42, -1);
    if (v23)
      _Block_release(v23);
    operator delete(v20);
    *((_BYTE *)v49 + 24) = 1;
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    v24 = v40;
    if (v40)
    {
      v25 = (unint64_t *)&v40->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v9)
    {
      dispatch_group_leave((dispatch_group_t)v9);
      dispatch_release((dispatch_object_t)v9);
    }
  }
  v27 = *((_QWORD *)this + 17);
  v36[0] = v11;
  v36[1] = 1174405120;
  v36[2] = ___ZN10BootModule9boot_syncEv_block_invoke_95;
  v36[3] = &unk_1E791DB18;
  v36[6] = this;
  v36[7] = v52;
  v37 = v53;
  if (v53)
  {
    v28 = (unint64_t *)&v53->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v36[4] = &v48;
  object = (dispatch_object_t)v9;
  if (v9)
    dispatch_retain((dispatch_object_t)v9);
  v36[5] = &v54;
  dispatch_group_notify((dispatch_group_t)v9, v27, v36);
  if (object)
    dispatch_release(object);
  v30 = v37;
  if (v37)
  {
    v31 = (unint64_t *)&v37->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      _Block_object_dispose(&v54, 8);
      if ((SHIBYTE(v60) & 0x80000000) == 0)
        goto LABEL_47;
      goto LABEL_46;
    }
  }
  _Block_object_dispose(&v54, 8);
  if (SHIBYTE(v60) < 0)
LABEL_46:
    operator delete(v58);
LABEL_47:
  if (v9)
    dispatch_release((dispatch_object_t)v9);
  _Block_object_dispose(&v48, 8);
  v33 = v53;
  if (v53)
  {
    v34 = (unint64_t *)&v53->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1BF6AC660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,dispatch_group_t group)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void BootModule::checkFSSyncStatus_sync(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  size_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  xpc_object_t v18;
  void *v19;
  unint64_t v20;
  void *v21;
  _QWORD aBlock[5];
  void *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  const void *v26;
  xpc_object_t v27;
  void *__dst[2];
  unint64_t v29;

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (const void *)*MEMORY[0x1E0CFBC30];
  v13 = strlen((const char *)*MEMORY[0x1E0CFBC30]);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = (void *)v13;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    v29 = v17 | 0x8000000000000000;
    __dst[0] = v15;
    goto LABEL_16;
  }
  HIBYTE(v29) = v13;
  v15 = __dst;
  if (v13)
LABEL_16:
    memmove(v15, v12, (size_t)v14);
  *((_BYTE *)v14 + (_QWORD)v15) = 0;
  v18 = xpc_null_create();
  v27 = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_65_0;
  aBlock[4] = a1;
  v19 = *a2;
  if (*a2)
    v19 = _Block_copy(v19);
  v23 = v19;
  v24 = v5;
  v25 = v7;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  v21 = _Block_copy(aBlock);
  v26 = v21;
  Service::runCommand(a1, (uint64_t)__dst, &v27, &v26);
  if (v21)
    _Block_release(v21);
  xpc_release(v18);
  v27 = 0;
  if (SHIBYTE(v29) < 0)
    operator delete(__dst[0]);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  if (v23)
    _Block_release(v23);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF6AC92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  const void *v26;
  void *v27;

  if (v26)
    _Block_release(v26);
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v27);
  if (a25 < 0)
  {
    operator delete(__p);
    std::__shared_weak_count::__release_weak(v25);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule22checkFSSyncStatus_syncEN8dispatch5blockIU13block_pointerFvbbEEE_block_invoke(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  _QWORD *v17;
  xpc_object_t v18;
  void *v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[7];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[6])
        goto LABEL_24;
      v10 = *a3;
      if (*a3)
      {
        xpc_retain(*a3);
        v11 = (const void *)a1[5];
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = (const void *)a1[5];
        if (v11)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v13 = (std::__shared_weak_count *)v7[16];
          if (!v13)
LABEL_29:
            std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_10:
          v14 = v7[15];
          v15 = std::__shared_weak_count::lock(v13);
          if (!v15)
            goto LABEL_29;
          v16 = v15;
          v17 = operator new(0x18uLL);
          *(_DWORD *)v17 = a2;
          v17[1] = v10;
          v18 = xpc_null_create();
          if (v12)
            v19 = _Block_copy(v12);
          else
            v19 = 0;
          v17[2] = v19;
          v20 = v7[17];
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
          v23 = operator new(0x18uLL);
          *v23 = v17;
          v23[1] = v14;
          v23[2] = v16;
          dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_);
          do
            v24 = __ldaxr(p_shared_owners);
          while (__stlxr(v24 - 1, p_shared_owners));
          if (v24)
          {
            if (!v12)
              goto LABEL_23;
          }
          else
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
            if (!v12)
            {
LABEL_23:
              xpc_release(v18);
LABEL_24:
              v25 = (unint64_t *)&v9->__shared_owners_;
              do
                v26 = __ldaxr(v25);
              while (__stlxr(v26 - 1, v25));
              if (!v26)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
              return;
            }
          }
          _Block_release(v12);
          goto LABEL_23;
        }
      }
      v12 = 0;
      v13 = (std::__shared_weak_count *)v7[16];
      if (!v13)
        goto LABEL_29;
      goto LABEL_10;
    }
  }
}

void *__copy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[5];
  if (result)
    result = _Block_copy(result);
  v6 = a2[6];
  v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSN8dispatch5blockIU13block_pointerFvbbEEE48c35_ZTSNSt3__18weak_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void BootModule::softReset_sync(uint64_t a1, const ResetInfo *a2, void **a3)
{
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  NSObject *v20;
  CommandDriverFactory *v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  config::hw *v48;
  int v49;
  uint64_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  std::string v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *__p;
  char v68;
  void *v69;
  dispatch_object_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  __int128 v73;

  v6 = atomic_load((unsigned __int8 *)&qword_1ED70F7F0);
  if ((v6 & 1) == 0)
  {
    v48 = (config::hw *)__cxa_guard_acquire(&qword_1ED70F7F0);
    if ((_DWORD)v48)
    {
      v49 = config::hw::watch(v48);
      v50 = 12;
      if (v49)
        v50 = 18;
      _MergedGlobals_4 = v50;
      __cxa_guard_release(&qword_1ED70F7F0);
    }
  }
  v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v7 || (v8 = *(_QWORD *)(a1 + 120), (v9 = std::__shared_weak_count::lock(v7)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v10 = v9;
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v71 = 0;
    v15 = std::__shared_weak_count::lock(v9);
    v72 = v15;
    if (v15)
    {
LABEL_10:
      v71 = v8;
      goto LABEL_13;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v10);
    v71 = 0;
    v15 = std::__shared_weak_count::lock(v10);
    v72 = v15;
    if (v15)
      goto LABEL_10;
  }
  v8 = 0;
LABEL_13:
  v69 = (void *)0xAAAAAAAAAAAAAAAALL;
  v70 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_83;
  aBlock[4] = a1;
  aBlock[5] = v8;
  v60 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *a3;
  if (*a3)
    v18 = _Block_copy(v18);
  v61 = v18;
  ResetInfo::ResetInfo(&v62, a2);
  v19 = _Block_copy(aBlock);
  v20 = *(NSObject **)(a1 + 136);
  if (v20)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v69 = v19;
  v70 = v20;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v21 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v22 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v21);
    v23 = v73;
    v73 = 0uLL;
    v24 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
    if (*((_QWORD *)&v73 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v22 = off_1ED70F4D0;
  }
  v30 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v53 = v22;
  v54 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v31 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v22 + 16))(&v55, v22);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v30)
    goto LABEL_44;
  v33 = (unint64_t *)&v30->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    v35 = v57;
    if (!v57)
      goto LABEL_55;
  }
  else
  {
LABEL_44:
    v35 = v57;
    if (!v57)
      goto LABEL_55;
  }
  v36 = *(_QWORD *)(a1 + 472);
  if (v36)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 104))(v36, 5);
  v37 = v69;
  if (v69)
    v37 = _Block_copy(v69);
  v51 = v37;
  object = v70;
  if (v70)
    dispatch_retain(v70);
  (*(void (**)(unint64_t, uint64_t, void **))(*(_QWORD *)v35 + 56))(v35, 8000000000, &v51);
  if (object)
    dispatch_release(object);
  if (v51)
    _Block_release(v51);
LABEL_55:
  v38 = v58;
  if (v58)
  {
    v39 = (unint64_t *)&v58->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  if (v68 < 0)
  {
    operator delete(__p);
    if ((v66 & 0x80000000) == 0)
    {
LABEL_66:
      if ((v64 & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_72;
    }
  }
  else if ((v66 & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v65);
  if ((v64 & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_73;
  }
LABEL_72:
  operator delete(v63);
  if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_68:
    v41 = v61;
    if (!v61)
      goto LABEL_75;
    goto LABEL_74;
  }
LABEL_73:
  operator delete(v62.__r_.__value_.__l.__data_);
  v41 = v61;
  if (v61)
LABEL_74:
    _Block_release(v41);
LABEL_75:
  v42 = v60;
  if (v60)
  {
    v43 = (unint64_t *)&v60->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v72;
  if (v72)
  {
    v46 = (unint64_t *)&v72->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  std::__shared_weak_count::__release_weak(v10);
}

void sub_1BF6AD0BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED70F7F0);
  _Unwind_Resume(a1);
}

void sub_1BF6AD0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  void **v25;
  uint64_t v26;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v26 - 96);
  ResetInfo::~ResetInfo(v25);
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v26 - 80);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, ctu::cf **a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  void *v15;
  dispatch_time_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t v22;
  __int128 *v23;
  size_t v24;
  uint64_t v25;
  __int128 v26;
  const void *v27;
  size_t v28;
  size_t v29;
  __int128 *p_dst;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  size_t v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[6];
  std::__shared_weak_count *v40;
  void *aBlock;
  std::string v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  void *v49;
  char *v50;
  __int128 v51;
  void *v52;
  std::string v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  __int128 v60;
  char v61;
  char v62[8];
  _QWORD *v63;
  void *v64[2];
  char v65;
  __int128 v66;
  unint64_t v67;
  __int128 __dst;
  unint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint8_t buf[16];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v70 = 0uLL;
  v71 = 0;
  v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v4 = 0;
  if (!v4)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Soft reset issued; waiting for reset detection",
        buf,
        2u);
    }
    v8 = *(_QWORD *)(v3 + 176);
    v9 = (char *)operator new(0x20uLL);
    v50 = v9;
    v51 = xmmword_1BF743160;
    strcpy(v9, "Soft Reset Wait for Reset");
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 1174405120;
    v39[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_67;
    v39[3] = &__block_descriptor_tmp_81;
    v11 = a1[5];
    v10 = (std::__shared_weak_count *)a1[6];
    v39[4] = v3;
    v39[5] = v11;
    v40 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = (void *)a1[7];
    if (v14)
      v14 = _Block_copy(v14);
    aBlock = v14;
    ResetInfo::ResetInfo(&v42, (const ResetInfo *)(a1 + 8));
    v15 = _Block_copy(v39);
    v49 = v15;
    v16 = dispatch_time(0, 1000000000 * _MergedGlobals_4);
    ResetDetection::add(v8, (uint64_t)&v50, 1, &v49, v16);
    if (v15)
      _Block_release(v15);
    operator delete(v9);
    if (v48 < 0)
    {
      operator delete(__p);
      if ((v46 & 0x80000000) == 0)
      {
LABEL_20:
        if ((v44 & 0x80000000) == 0)
          goto LABEL_21;
        goto LABEL_26;
      }
    }
    else if ((v46 & 0x80000000) == 0)
    {
      goto LABEL_20;
    }
    operator delete(v45);
    if ((v44 & 0x80000000) == 0)
    {
LABEL_21:
      if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_22;
      goto LABEL_27;
    }
LABEL_26:
    operator delete(v43);
    if ((SHIBYTE(v42.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      v17 = aBlock;
      if (!aBlock)
        goto LABEL_29;
      goto LABEL_28;
    }
LABEL_27:
    operator delete(v42.__r_.__value_.__l.__data_);
    v17 = aBlock;
    if (!aBlock)
    {
LABEL_29:
      v18 = v40;
      if (v40)
      {
        v19 = (unint64_t *)&v40->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
          if ((SHIBYTE(v71) & 0x80000000) == 0)
            return;
          goto LABEL_84;
        }
      }
      goto LABEL_83;
    }
LABEL_28:
    _Block_release(v17);
    goto LABEL_29;
  }
  ctu::cf::show(*a2, a2);
  if (SHIBYTE(v71) < 0)
    operator delete((void *)v70);
  v70 = *(_OWORD *)buf;
  v71 = v73;
  v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v21 = &v70;
    if (v71 < 0)
      v21 = (__int128 *)v70;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v21;
    _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Soft reset failed; falling back to hard reset: %{public}s",
      buf,
      0xCu);
    v6 = a1[7];
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  else
  {
    v6 = a1[7];
    if ((SHIBYTE(v71) & 0x80000000) == 0)
    {
LABEL_8:
      *(_OWORD *)buf = v70;
      *(_QWORD *)&v73 = v71;
      goto LABEL_39;
    }
  }
  std::string::__init_copy_ctor_external((std::string *)buf, (const std::string::value_type *)v70, *((std::string::size_type *)&v70 + 1));
LABEL_39:
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v6 + 16))(v6, 3760250880, buf);
  if (SBYTE7(v73) < 0)
  {
    operator delete(*(void **)buf);
    v22 = v3 + 152;
    if ((__int128 *)(v3 + 152) == &v70)
      goto LABEL_54;
  }
  else
  {
    v22 = v3 + 152;
    if ((__int128 *)(v3 + 152) == &v70)
      goto LABEL_54;
  }
  if (*(char *)(v3 + 175) < 0)
  {
    if (v71 >= 0)
      v23 = &v70;
    else
      v23 = (__int128 *)v70;
    if (v71 >= 0)
      v24 = HIBYTE(v71);
    else
      v24 = *((_QWORD *)&v70 + 1);
    std::string::__assign_no_alias<false>((void **)v22, v23, v24);
  }
  else if (v71 < 0)
  {
    std::string::__assign_no_alias<true>((_QWORD *)v22, (void *)v70, *((size_t *)&v70 + 1));
  }
  else
  {
    *(_OWORD *)v22 = v70;
    *(_QWORD *)(v22 + 16) = v71;
  }
LABEL_54:
  v25 = *(_QWORD *)(v3 + 472);
  if (v25)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 104))(v25, 7);
  *(_QWORD *)&v26 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v26 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v77 = v26;
  v78 = v26;
  v75 = v26;
  v76 = v26;
  v73 = v26;
  v74 = v26;
  *(_OWORD *)buf = v26;
  v27 = (const void *)*MEMORY[0x1E0CFB590];
  v28 = strlen((const char *)*MEMORY[0x1E0CFB590]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    p_dst = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&__dst + 1) = v29;
    v69 = v32 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_63;
  }
  HIBYTE(v69) = v28;
  p_dst = &__dst;
  if (v28)
LABEL_63:
    memmove(p_dst, v27, v29);
  *((_BYTE *)p_dst + v29) = 0;
  v33 = (const void *)*MEMORY[0x1E0CFBEA8];
  v34 = strlen((const char *)*MEMORY[0x1E0CFBEA8]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    *((_QWORD *)&v66 + 1) = v35;
    v67 = v38 | 0x8000000000000000;
    *(_QWORD *)&v66 = v36;
    goto LABEL_71;
  }
  HIBYTE(v67) = v34;
  v36 = &v66;
  if (v34)
LABEL_71:
    memmove(v36, v33, v35);
  *((_BYTE *)v36 + v35) = 0;
  Timestamp::Timestamp((Timestamp *)v62);
  Timestamp::asString((uint64_t)v62, 0, 9, v64);
  v61 = 0;
  LOBYTE(v60) = 0;
  ResetInfo::ResetInfo((std::string *)buf, &__dst, &v66, (__int128 *)v22, (uint64_t)v64, 7, &v60);
  if ((v65 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v62, v63);
    if ((SHIBYTE(v67) & 0x80000000) == 0)
      goto LABEL_74;
LABEL_87:
    operator delete((void *)v66);
    if ((SHIBYTE(v69) & 0x80000000) == 0)
      goto LABEL_75;
    goto LABEL_88;
  }
  operator delete(v64[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v62, v63);
  if (SHIBYTE(v67) < 0)
    goto LABEL_87;
LABEL_74:
  if ((SHIBYTE(v69) & 0x80000000) == 0)
    goto LABEL_75;
LABEL_88:
  operator delete((void *)__dst);
LABEL_75:
  ResetInfo::ResetInfo(&v53, (const ResetInfo *)buf);
  v52 = 0;
  BootModule::handleReset_sync(v3, (uint64_t)&v53, &v52);
  if (v59 < 0)
  {
    operator delete(v58);
    if ((v57 & 0x80000000) == 0)
    {
LABEL_77:
      if ((v55 & 0x80000000) == 0)
        goto LABEL_78;
      goto LABEL_91;
    }
  }
  else if ((v57 & 0x80000000) == 0)
  {
    goto LABEL_77;
  }
  operator delete(v56);
  if ((v55 & 0x80000000) == 0)
  {
LABEL_78:
    if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_79;
    goto LABEL_92;
  }
LABEL_91:
  operator delete(v54);
  if ((SHIBYTE(v53.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_79:
    if ((SHIBYTE(v78) & 0x80000000) == 0)
      goto LABEL_80;
    goto LABEL_93;
  }
LABEL_92:
  operator delete(v53.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v78) & 0x80000000) == 0)
  {
LABEL_80:
    if ((SBYTE7(v76) & 0x80000000) == 0)
      goto LABEL_81;
    goto LABEL_94;
  }
LABEL_93:
  operator delete(*((void **)&v77 + 1));
  if ((SBYTE7(v76) & 0x80000000) == 0)
  {
LABEL_81:
    if ((SHIBYTE(v74) & 0x80000000) == 0)
      goto LABEL_82;
    goto LABEL_95;
  }
LABEL_94:
  operator delete((void *)v75);
  if (SHIBYTE(v74) < 0)
  {
LABEL_95:
    operator delete(*((void **)&v73 + 1));
    if (SBYTE7(v73) < 0)
      goto LABEL_96;
LABEL_83:
    if ((SHIBYTE(v71) & 0x80000000) == 0)
      return;
    goto LABEL_84;
  }
LABEL_82:
  if ((SBYTE7(v73) & 0x80000000) == 0)
    goto LABEL_83;
LABEL_96:
  operator delete(*(void **)buf);
  if (SHIBYTE(v71) < 0)
LABEL_84:
    operator delete((void *)v70);
}

void sub_1BF6AD850(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_67(_QWORD *a1, int a2)
{
  uint64_t v3;
  char *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  int IsCarrierBuild;
  _BOOL4 v18;
  void *v19;
  std::string *v20;
  size_t size;
  uint64_t v22;
  __int128 v23;
  const void *v24;
  size_t v25;
  size_t v26;
  __int128 *p_dst;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[4];
  void *v38;
  std::string v39;
  void *v40;
  std::string v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  std::string v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  __int128 v56;
  char v57;
  char v58[8];
  _QWORD *v59;
  void *v60[2];
  char v61;
  __int128 v62;
  unint64_t v63;
  __int128 __dst;
  unint64_t v65;
  std::string v66;
  _QWORD aBlock[5];
  void *v68;
  std::string v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *__p;
  char v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *v78;
  __int128 buf;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  if (!a2)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Reset detection observed for soft reset", (uint8_t *)&buf, 2u);
    }
    usleep(0x249F0u);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_68;
    aBlock[3] = &__block_descriptor_tmp_76_1;
    aBlock[4] = v3;
    v8 = (void *)a1[7];
    if (v8)
      v8 = _Block_copy(v8);
    v68 = v8;
    ResetInfo::ResetInfo(&v69, (const ResetInfo *)(a1 + 8));
    v9 = (std::__shared_weak_count *)a1[6];
    v76 = a1[5];
    v77 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v12 = _Block_copy(aBlock);
    v78 = v12;
    BootModule::checkFSSyncStatus_sync(v3, &v78);
    if (v12)
      _Block_release(v12);
    v13 = v77;
    if (!v77)
      goto LABEL_24;
    v14 = (unint64_t *)&v77->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if ((v75 & 0x80000000) == 0)
      {
LABEL_25:
        if ((v73 & 0x80000000) == 0)
          goto LABEL_26;
        goto LABEL_48;
      }
    }
    else
    {
LABEL_24:
      if ((v75 & 0x80000000) == 0)
        goto LABEL_25;
    }
    operator delete(__p);
    if ((v73 & 0x80000000) == 0)
    {
LABEL_26:
      if ((v71 & 0x80000000) == 0)
        goto LABEL_27;
      goto LABEL_49;
    }
LABEL_48:
    operator delete(v72);
    if ((v71 & 0x80000000) == 0)
    {
LABEL_27:
      if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_28;
      goto LABEL_50;
    }
LABEL_49:
    operator delete(v70);
    if ((SHIBYTE(v69.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_28:
      v16 = v68;
      if (!v68)
        return;
      goto LABEL_51;
    }
LABEL_50:
    operator delete(v69.__r_.__value_.__l.__data_);
    v16 = v68;
    if (!v68)
      return;
LABEL_51:
    _Block_release(v16);
    return;
  }
  v4 = (char *)operator new(0x38uLL);
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v66.__r_.__value_.__r.__words[1] = xmmword_1BF740C30;
  strcpy(v4, "Soft reset failed; timeout waiting for reset detection");
  v5 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v4;
    _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
  }
  if (TelephonyUtilIsInternalBuild())
  {
    v6 = *(NSObject **)(v3 + 88);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    goto LABEL_6;
  }
  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  v6 = *(NSObject **)(v3 + 88);
  v18 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (IsCarrierBuild)
  {
    if (!v18)
    {
LABEL_7:
      if ((std::string *)(v3 + 152) != &v66)
      {
        if (*(char *)(v3 + 175) < 0)
        {
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &v66;
          else
            v20 = (std::string *)v66.__r_.__value_.__r.__words[0];
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
          else
            size = v66.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((void **)(v3 + 152), v20, size);
        }
        else if ((*((_BYTE *)&v66.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)(v3 + 152), v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
        }
        else
        {
          *(std::string *)(v3 + 152) = v66;
        }
      }
      v22 = a1[7];
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&buf, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
      }
      else
      {
        buf = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
        *(_QWORD *)&v80 = *((_QWORD *)&v66.__r_.__value_.__l + 2);
      }
      (*(void (**)(uint64_t, uint64_t, __int128 *))(v22 + 16))(v22, 3760250880, &buf);
      if (SBYTE7(v80) < 0)
        operator delete((void *)buf);
      *(_QWORD *)&v23 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v84 = v23;
      v85 = v23;
      v82 = v23;
      v83 = v23;
      v80 = v23;
      v81 = v23;
      buf = v23;
      v24 = (const void *)*MEMORY[0x1E0CFB590];
      v25 = strlen((const char *)*MEMORY[0x1E0CFB590]);
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v26 = v25;
      if (v25 >= 0x17)
      {
        v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v28 = v25 | 7;
        v29 = v28 + 1;
        p_dst = (__int128 *)operator new(v28 + 1);
        *((_QWORD *)&__dst + 1) = v26;
        v65 = v29 | 0x8000000000000000;
        *(_QWORD *)&__dst = p_dst;
      }
      else
      {
        HIBYTE(v65) = v25;
        p_dst = &__dst;
        if (!v25)
        {
LABEL_66:
          *((_BYTE *)p_dst + v26) = 0;
          v30 = (const void *)*MEMORY[0x1E0CFBFF0];
          v31 = strlen((const char *)*MEMORY[0x1E0CFBFF0]);
          if (v31 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v32 = v31;
          if (v31 >= 0x17)
          {
            v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v31 | 7) != 0x17)
              v34 = v31 | 7;
            v35 = v34 + 1;
            v33 = operator new(v34 + 1);
            *((_QWORD *)&v62 + 1) = v32;
            v63 = v35 | 0x8000000000000000;
            *(_QWORD *)&v62 = v33;
          }
          else
          {
            HIBYTE(v63) = v31;
            v33 = &v62;
            if (!v31)
            {
LABEL_74:
              v33[v32] = 0;
              Timestamp::Timestamp((Timestamp *)v58);
              Timestamp::asString((uint64_t)v58, 0, 9, v60);
              v57 = 0;
              LOBYTE(v56) = 0;
              ResetInfo::ResetInfo((std::string *)&buf, &__dst, &v62, (__int128 *)(v3 + 152), (uint64_t)v60, 7, &v56);
              if (v61 < 0)
              {
                operator delete(v60[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v58, v59);
                if ((SHIBYTE(v63) & 0x80000000) == 0)
                {
LABEL_76:
                  if ((SHIBYTE(v65) & 0x80000000) == 0)
                    goto LABEL_77;
LABEL_88:
                  operator delete((void *)__dst);
LABEL_77:
                  ResetInfo::ResetInfo(&v49, (const ResetInfo *)&buf);
                  v48 = 0;
                  BootModule::handleReset_sync(v3, (uint64_t)&v49, &v48);
                  if (v55 < 0)
                  {
                    operator delete(v54);
                    if ((v53 & 0x80000000) == 0)
                    {
LABEL_79:
                      if ((v51 & 0x80000000) == 0)
                        goto LABEL_80;
                      goto LABEL_91;
                    }
                  }
                  else if ((v53 & 0x80000000) == 0)
                  {
                    goto LABEL_79;
                  }
                  operator delete(v52);
                  if ((v51 & 0x80000000) == 0)
                  {
LABEL_80:
                    if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_81;
                    goto LABEL_92;
                  }
LABEL_91:
                  operator delete(v50);
                  if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_81:
                    if ((SHIBYTE(v85) & 0x80000000) == 0)
                      goto LABEL_82;
                    goto LABEL_93;
                  }
LABEL_92:
                  operator delete(v49.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v85) & 0x80000000) == 0)
                  {
LABEL_82:
                    if ((SBYTE7(v83) & 0x80000000) == 0)
                      goto LABEL_83;
                    goto LABEL_94;
                  }
LABEL_93:
                  operator delete(*((void **)&v84 + 1));
                  if ((SBYTE7(v83) & 0x80000000) == 0)
                  {
LABEL_83:
                    if ((SHIBYTE(v81) & 0x80000000) == 0)
                      goto LABEL_84;
                    goto LABEL_95;
                  }
LABEL_94:
                  operator delete((void *)v82);
                  if ((SHIBYTE(v81) & 0x80000000) == 0)
                  {
LABEL_84:
                    if ((SBYTE7(v80) & 0x80000000) == 0)
                      goto LABEL_113;
LABEL_96:
                    operator delete((void *)buf);
                    goto LABEL_113;
                  }
LABEL_95:
                  operator delete(*((void **)&v80 + 1));
                  if ((SBYTE7(v80) & 0x80000000) == 0)
                    goto LABEL_113;
                  goto LABEL_96;
                }
              }
              else
              {
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v58, v59);
                if ((SHIBYTE(v63) & 0x80000000) == 0)
                  goto LABEL_76;
              }
              operator delete((void *)v62);
              if ((SHIBYTE(v65) & 0x80000000) == 0)
                goto LABEL_77;
              goto LABEL_88;
            }
          }
          memmove(v33, v30, v32);
          goto LABEL_74;
        }
      }
      memmove(p_dst, v24, v26);
      goto LABEL_66;
    }
LABEL_6:
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Dumping logs", (uint8_t *)&buf, 2u);
    goto LABEL_7;
  }
  if (v18)
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Falling back to hard reset", (uint8_t *)&buf, 2u);
  }
  ResetInfo::ResetInfo(&v41, (const ResetInfo *)(a1 + 8));
  v37[0] = MEMORY[0x1E0C809B0];
  v37[1] = 1174405120;
  v37[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_78;
  v37[3] = &__block_descriptor_tmp_79_1;
  v19 = (void *)a1[7];
  if (v19)
    v19 = _Block_copy(v19);
  v38 = v19;
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v39, v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
  else
    v39 = v66;
  v40 = _Block_copy(v37);
  BootModule::hardReset_sync(v3, (uint64_t)&v41, (uint64_t *)&v40);
  if (v40)
    _Block_release(v40);
  if (v47 < 0)
  {
    operator delete(v46);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_102:
      if ((v43 & 0x80000000) == 0)
        goto LABEL_103;
      goto LABEL_109;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_102;
  }
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_110;
  }
LABEL_109:
  operator delete(v42);
  if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_104:
    if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_105;
LABEL_111:
    operator delete(v39.__r_.__value_.__l.__data_);
    v36 = v38;
    if (!v38)
      goto LABEL_113;
    goto LABEL_112;
  }
LABEL_110:
  operator delete(v41.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_111;
LABEL_105:
  v36 = v38;
  if (v38)
LABEL_112:
    _Block_release(v36);
LABEL_113:
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
}

void sub_1BF6AE13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *__p)
{
  char a68;

  if (aBlock)
    _Block_release(aBlock);
  ResetInfo::~ResetInfo(&a19);
  if (a68 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_68(_QWORD *a1, int a2, int a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  capabilities::ipc *v9;
  uint64_t v10;
  __CFDictionary *Mutable;
  const __CFAllocator *v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  const __CFAllocator *v17;
  uint64_t *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  size_t v29;
  void *v30;
  void **v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  CFTypeID v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  const void *v47;
  std::string *v48;
  size_t size;
  NSObject *v50;
  uint64_t v51;
  std::string *v52;
  uint64_t v53;
  __int128 v54;
  const void *v55;
  size_t v56;
  size_t v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  const void *v61;
  size_t v62;
  size_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[6];
  std::__shared_weak_count *v68;
  const void *v69;
  const void *v70;
  void *__dst[2];
  unint64_t v72;
  void *v73;
  std::string v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  __int128 v81;
  char v82;
  char v83[8];
  _QWORD *v84;
  void *__p[2];
  char v86;
  __int128 v87;
  unint64_t v88;
  __int128 v89;
  unint64_t v90;
  std::string v91;
  uint8_t buf[16];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v6 = a1[4];
  v7 = *(NSObject **)(v6 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Check FS Sync in progress: %d and sync not started: %d", buf, 0xEu);
  }
  if ((a2 & 1) != 0 || a3)
  {
    if (a2)
      v13 = "Baseband shutdown during baseband filesystem sync";
    else
      v13 = "Baseband never started filesystem sync";
    v91.__r_.__value_.__r.__words[2] = 0x13AAAAAA00AAAAAALL;
    *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *(_OWORD *)"Soft reset failed: ";
    *(_DWORD *)((char *)&v91.__r_.__value_.__r.__words[1] + 7) = 540697701;
    if (a2)
      v14 = 49;
    else
      v14 = 38;
    std::string::append(&v91, v13, v14);
    if ((std::string *)(v6 + 152) != &v91)
    {
      if (*(char *)(v6 + 175) < 0)
      {
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v91;
        else
          v48 = (std::string *)v91.__r_.__value_.__r.__words[0];
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
        else
          size = v91.__r_.__value_.__l.__size_;
        std::string::__assign_no_alias<false>((void **)(v6 + 152), v48, size);
      }
      else if ((*((_BYTE *)&v91.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)(v6 + 152), v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
      }
      else
      {
        *(std::string *)(v6 + 152) = v91;
      }
    }
    v50 = *(NSObject **)(v6 + 88);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v52 = &v91;
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v52 = (std::string *)v91.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v52;
      _os_log_error_impl(&dword_1BF566000, v50, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      v51 = a1[5];
      if ((*((_BYTE *)&v91.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_81;
    }
    else
    {
      v51 = a1[5];
      if ((*((_BYTE *)&v91.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_81:
        *(_OWORD *)buf = *(_OWORD *)&v91.__r_.__value_.__l.__data_;
        *(_QWORD *)&v93 = *((_QWORD *)&v91.__r_.__value_.__l + 2);
        goto LABEL_86;
      }
    }
    std::string::__init_copy_ctor_external((std::string *)buf, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
LABEL_86:
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(v51 + 16))(v51, 3760250880, buf);
    if (SBYTE7(v93) < 0)
    {
      operator delete(*(void **)buf);
      v53 = *(_QWORD *)(v6 + 472);
      if (!v53)
        goto LABEL_91;
    }
    else
    {
      v53 = *(_QWORD *)(v6 + 472);
      if (!v53)
      {
LABEL_91:
        *(_QWORD *)&v54 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v54 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v97 = v54;
        v98 = v54;
        v95 = v54;
        v96 = v54;
        v93 = v54;
        v94 = v54;
        *(_OWORD *)buf = v54;
        v55 = (const void *)*MEMORY[0x1E0CFB590];
        v56 = strlen((const char *)*MEMORY[0x1E0CFB590]);
        if (v56 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v57 = v56;
        if (v56 >= 0x17)
        {
          v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v56 | 7) != 0x17)
            v59 = v56 | 7;
          v60 = v59 + 1;
          v58 = (__int128 *)operator new(v59 + 1);
          *((_QWORD *)&v89 + 1) = v57;
          v90 = v60 | 0x8000000000000000;
          *(_QWORD *)&v89 = v58;
        }
        else
        {
          HIBYTE(v90) = v56;
          v58 = &v89;
          if (!v56)
          {
LABEL_99:
            *((_BYTE *)v58 + v57) = 0;
            v61 = (const void *)*MEMORY[0x1E0CFC098];
            v62 = strlen((const char *)*MEMORY[0x1E0CFC098]);
            if (v62 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v63 = v62;
            if (v62 >= 0x17)
            {
              v65 = (v62 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v62 | 7) != 0x17)
                v65 = v62 | 7;
              v66 = v65 + 1;
              v64 = operator new(v65 + 1);
              *((_QWORD *)&v87 + 1) = v63;
              v88 = v66 | 0x8000000000000000;
              *(_QWORD *)&v87 = v64;
            }
            else
            {
              HIBYTE(v88) = v62;
              v64 = &v87;
              if (!v62)
              {
LABEL_107:
                v64[v63] = 0;
                Timestamp::Timestamp((Timestamp *)v83);
                Timestamp::asString((uint64_t)v83, 0, 9, __p);
                v82 = 0;
                LOBYTE(v81) = 0;
                ResetInfo::ResetInfo((std::string *)buf, &v89, &v87, (__int128 *)(v6 + 152), (uint64_t)__p, 7, &v81);
                if (v86 < 0)
                {
                  operator delete(__p[0]);
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v83, v84);
                  if ((SHIBYTE(v88) & 0x80000000) == 0)
                  {
LABEL_109:
                    if ((SHIBYTE(v90) & 0x80000000) == 0)
                      goto LABEL_110;
LABEL_122:
                    operator delete((void *)v89);
LABEL_110:
                    ResetInfo::ResetInfo(&v74, (const ResetInfo *)buf);
                    v73 = 0;
                    BootModule::handleReset_sync(v6, (uint64_t)&v74, &v73);
                    if (v80 < 0)
                    {
                      operator delete(v79);
                      if ((v78 & 0x80000000) == 0)
                      {
LABEL_112:
                        if ((v76 & 0x80000000) == 0)
                          goto LABEL_113;
                        goto LABEL_125;
                      }
                    }
                    else if ((v78 & 0x80000000) == 0)
                    {
                      goto LABEL_112;
                    }
                    operator delete(v77);
                    if ((v76 & 0x80000000) == 0)
                    {
LABEL_113:
                      if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_114;
                      goto LABEL_126;
                    }
LABEL_125:
                    operator delete(v75);
                    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_114:
                      if ((SHIBYTE(v98) & 0x80000000) == 0)
                        goto LABEL_115;
                      goto LABEL_127;
                    }
LABEL_126:
                    operator delete(v74.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v98) & 0x80000000) == 0)
                    {
LABEL_115:
                      if ((SBYTE7(v96) & 0x80000000) == 0)
                        goto LABEL_116;
                      goto LABEL_128;
                    }
LABEL_127:
                    operator delete(*((void **)&v97 + 1));
                    if ((SBYTE7(v96) & 0x80000000) == 0)
                    {
LABEL_116:
                      if ((SHIBYTE(v94) & 0x80000000) == 0)
                        goto LABEL_117;
                      goto LABEL_129;
                    }
LABEL_128:
                    operator delete((void *)v95);
                    if ((SHIBYTE(v94) & 0x80000000) == 0)
                    {
LABEL_117:
                      if ((SBYTE7(v93) & 0x80000000) == 0)
                        goto LABEL_118;
                      goto LABEL_130;
                    }
LABEL_129:
                    operator delete(*((void **)&v93 + 1));
                    if ((SBYTE7(v93) & 0x80000000) == 0)
                    {
LABEL_118:
                      if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        return;
                      goto LABEL_131;
                    }
LABEL_130:
                    operator delete(*(void **)buf);
                    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      return;
LABEL_131:
                    operator delete(v91.__r_.__value_.__l.__data_);
                    return;
                  }
                }
                else
                {
                  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v83, v84);
                  if ((SHIBYTE(v88) & 0x80000000) == 0)
                    goto LABEL_109;
                }
                operator delete((void *)v87);
                if ((SHIBYTE(v90) & 0x80000000) == 0)
                  goto LABEL_110;
                goto LABEL_122;
              }
            }
            memmove(v64, v61, v63);
            goto LABEL_107;
          }
        }
        memmove(v58, v55, v57);
        goto LABEL_99;
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 104))(v53, 7);
    goto LABEL_91;
  }
  v8 = *(_QWORD *)(v6 + 472);
  if (v8)
  {
    v9 = (capabilities::ipc *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, 6);
    if (capabilities::ipc::supportsPCI(v9))
      (*(void (**)(_QWORD))(**(_QWORD **)(v6 + 472) + 64))(*(_QWORD *)(v6 + 472));
  }
  *(_DWORD *)buf = 0;
  dispatch::block<void({block_pointer})(int,std::string)>::operator()<int,char const(&)[1]>(a1 + 5, (unsigned int *)buf, "");
  *(_QWORD *)&v89 = 0;
  v10 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    *(_QWORD *)&v89 = Mutable;
  else
    Mutable = (__CFDictionary *)v89;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBA60], v10, v12);
  ResetInfo::addToDict((uint64_t)(a1 + 6), (__CFDictionary **)&v89, v15, v16, v17);
  v91.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v91.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v18 = (uint64_t *)off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(buf);
    v19 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v20 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v19;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = (uint64_t *)off_1ED70F338;
  }
  v91.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  v91.__r_.__value_.__l.__size_ = *(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v26 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v28 = (const void *)*MEMORY[0x1E0CFBD68];
  v29 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v30 = (void *)v29;
  if (v29 >= 0x17)
  {
    v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v33 = v29 | 7;
    v34 = v33 + 1;
    v31 = (void **)operator new(v33 + 1);
    __dst[1] = v30;
    v72 = v34 | 0x8000000000000000;
    __dst[0] = v31;
LABEL_44:
    memmove(v31, v28, (size_t)v30);
    *((_BYTE *)v30 + (_QWORD)v31) = 0;
    v32 = (const void *)v89;
    if (!(_QWORD)v89)
      goto LABEL_47;
    goto LABEL_45;
  }
  HIBYTE(v72) = v29;
  v31 = __dst;
  if (v29)
    goto LABEL_44;
  LOBYTE(__dst[0]) = 0;
  v32 = (const void *)v89;
  if (!(_QWORD)v89)
    goto LABEL_47;
LABEL_45:
  v35 = CFGetTypeID(v32);
  if (v35 == CFDictionaryGetTypeID())
  {
    v70 = v32;
    CFRetain(v32);
    goto LABEL_48;
  }
LABEL_47:
  v32 = 0;
  v70 = 0;
LABEL_48:
  v67[0] = MEMORY[0x1E0C809B0];
  v67[1] = 1174405120;
  v67[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_72;
  v67[3] = &__block_descriptor_tmp_74_0;
  v37 = a1[20];
  v36 = (std::__shared_weak_count *)a1[21];
  v67[4] = v6;
  v67[5] = v37;
  v68 = v36;
  if (v36)
  {
    v38 = (unint64_t *)&v36->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = _Block_copy(v67);
  v69 = v40;
  ABMServer::broadcast(v18, (uint64_t)__dst, &v70, &v69);
  if (v40)
    _Block_release(v40);
  if (v32)
    CFRelease(v32);
  if (SHIBYTE(v72) < 0)
    operator delete(__dst[0]);
  v41 = v68;
  if (!v68)
    goto LABEL_61;
  v42 = (unint64_t *)&v68->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
    v44 = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
    if (!v91.__r_.__value_.__l.__size_)
      goto LABEL_65;
  }
  else
  {
LABEL_61:
    v44 = (std::__shared_weak_count *)v91.__r_.__value_.__l.__size_;
    if (!v91.__r_.__value_.__l.__size_)
      goto LABEL_65;
  }
  v45 = (unint64_t *)&v44->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    v47 = (const void *)v89;
    if ((_QWORD)v89)
      goto LABEL_66;
    return;
  }
LABEL_65:
  v47 = (const void *)v89;
  if ((_QWORD)v89)
LABEL_66:
    CFRelease(v47);
}

void sub_1BF6AEB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_72(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_73_0;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __copy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(std::string *a1, _QWORD *a2)
{
  void *v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  v4 = (void *)a2[5];
  if (v4)
    v4 = _Block_copy(v4);
  a1[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  ResetInfo::ResetInfo(a1 + 2, (const ResetInfo *)(a2 + 6));
  v5 = a2[21];
  a1[6].__r_.__value_.__r.__words[2] = a2[20];
  a1[7].__r_.__value_.__r.__words[0] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
}

void sub_1BF6AEE5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 40);
  if (v3)
    _Block_release(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE48c15_ZTSK9ResetInfo160c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 168);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_13;
    }
  }
  else
  {
LABEL_5:
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
      goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_8:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_15:
    operator delete(*(void **)(a1 + 48));
    v5 = *(const void **)(a1 + 40);
    if (!v5)
      return;
    goto LABEL_16;
  }
LABEL_14:
  operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_15;
LABEL_9:
  v5 = *(const void **)(a1 + 40);
  if (v5)
LABEL_16:
    _Block_release(v5);
}

void ___ZN10BootModule14softReset_syncE9ResetInfoN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_78(uint64_t a1)
{
  uint64_t v1;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, 3760250880, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF6AEFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;

  v4 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  *(_QWORD *)(a1 + 56) = v7;
  ResetInfo::ResetInfo((std::string *)(a1 + 64), (const ResetInfo *)(a2 + 8));
}

void sub_1BF6AF058(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v4;

  v4 = *(const void **)(v2 + 56);
  if (v4)
    _Block_release(v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE64c15_ZTSK9ResetInfo(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 111) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(*(void **)(a1 + 64));
    v2 = *(const void **)(a1 + 56);
    if (!v2)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    goto LABEL_10;
LABEL_5:
  v2 = *(const void **)(a1 + 56);
  if (v2)
LABEL_11:
    _Block_release(v2);
LABEL_12:
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void BootModule::shutdown_sync(uint64_t a1, _QWORD *a2)
{
  void (**v3)(void *, _QWORD, std::string *);
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void (**v10)(void *, _QWORD, std::string *);
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  NSObject *v28;
  void *v29;
  NSObject *v30;
  void (**v31)(void *, _QWORD, std::string *);
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  void *v42;
  dispatch_object_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  _QWORD aBlock[7];
  std::__shared_weak_count *v51;
  void *v52;
  void *v53;
  dispatch_object_t object;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  __n128 (*v60)(uint64_t, uint64_t);
  void (*v61)(uint64_t);
  std::string v62;
  std::string buf;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v57 = 0;
  v58 = &v57;
  v59 = 0x4002000000;
  v60 = __Block_byref_object_copy__5;
  v61 = __Block_byref_object_dispose__5;
  memset(&v62, 0, sizeof(v62));
  if (*(_DWORD *)(a1 + 448) == 8)
  {
    std::string::__assign_external(&v62, "BootModule already in shutdown state", 0x24uLL);
    v3 = (void (**)(void *, _QWORD, std::string *))*a2;
    if (*((char *)v58 + 63) < 0)
      std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v58[5], v58[6]);
    else
      buf = *(std::string *)(v58 + 5);
    v3[2](v3, 0, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      _Block_object_dispose(&v57, 8);
      if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  v6 = *(_QWORD *)(a1 + 120);
  v5 = *(std::__shared_weak_count **)(a1 + 128);
  v55 = v6;
  if (!v5 || (v7 = std::__shared_weak_count::lock(v5), (v56 = v7) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v53 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &unk_1E791D9C0;
  aBlock[5] = a1;
  aBlock[6] = v6;
  v51 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  aBlock[4] = &v57;
  v10 = (void (**)(void *, _QWORD, std::string *))*a2;
  if (*a2)
    v10 = (void (**)(void *, _QWORD, std::string *))_Block_copy(v10);
  v52 = v10;
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(a1 + 136);
  if (v12)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v53 = v11;
  object = v12;
  v48 = 0xAAAAAAAAAAAAAAAALL;
  v49 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v14 = off_1ED70F4D0;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v44 = v14;
  v45 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v46, v14);
  v48 = 0;
  v49 = 0;
  if (v47)
  {
    v49 = std::__shared_weak_count::lock(v47);
    if (v49)
      v48 = v46;
    if (v47)
      std::__shared_weak_count::__release_weak(v47);
  }
  if (!v22)
    goto LABEL_36;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v48;
    if (!v48)
      goto LABEL_53;
  }
  else
  {
LABEL_36:
    v27 = v48;
    if (!v48)
      goto LABEL_53;
  }
  if (*(_BYTE *)(a1 + 192))
  {
    v28 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
      _os_log_impl(&dword_1BF566000, v28, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband requested with timeout %llu sec", (uint8_t *)&buf, 0xCu);
    }
    v29 = v53;
    if (v53)
      v29 = _Block_copy(v53);
    v42 = v29;
    v43 = object;
    if (object)
      dispatch_retain(object);
    (*(void (**)(unint64_t, uint64_t, void **))(*(_QWORD *)v27 + 64))(v27, 10000000000, &v42);
    if (v43)
      dispatch_release(v43);
    if (v42)
      _Block_release(v42);
    goto LABEL_61;
  }
LABEL_53:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, 8);
  if (*(_QWORD *)(a1 + 472))
  {
    std::string::__assign_external((std::string *)(v58 + 5), "Transport clients are not started yet", 0x25uLL);
    v30 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v41 = v58 + 5;
      if (*((char *)v58 + 63) < 0)
        v41 = (_QWORD *)*v41;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
      _os_log_error_impl(&dword_1BF566000, v30, OS_LOG_TYPE_ERROR, "Poweroff baseband request skipped (powercycle anyway); Error: %s",
        (uint8_t *)&buf,
        0xCu);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 472) + 72))(*(_QWORD *)(a1 + 472));
  }
  v31 = (void (**)(void *, _QWORD, std::string *))*a2;
  if (*((char *)v58 + 63) < 0)
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v58[5], v58[6]);
  else
    buf = *(std::string *)(v58 + 5);
  v31[2](v31, 3760250880, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_61:
  v32 = v49;
  if (v49)
  {
    v33 = (unint64_t *)&v49->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (object)
    dispatch_release(object);
  if (v53)
    _Block_release(v53);
  if (v52)
    _Block_release(v52);
  v35 = v51;
  if (!v51)
    goto LABEL_76;
  v36 = (unint64_t *)&v51->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
    v38 = v56;
    if (!v56)
      goto LABEL_80;
  }
  else
  {
LABEL_76:
    v38 = v56;
    if (!v56)
      goto LABEL_80;
  }
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (v40)
  {
LABEL_80:
    _Block_object_dispose(&v57, 8);
    if ((SHIBYTE(v62.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    goto LABEL_81;
  }
  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
  std::__shared_weak_count::__release_weak(v38);
  _Block_object_dispose(&v57, 8);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
LABEL_81:
    operator delete(v62.__r_.__value_.__l.__data_);
}

void sub_1BF6AF738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27,uint64_t a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a27);
  if (aBlock)
    _Block_release(aBlock);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v29);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Block_object_dispose((const void *)(v30 - 160), 8);
  if (*(char *)(v30 - 97) < 0)
    operator delete(*(void **)(v30 - 120));
  _Unwind_Resume(a1);
}

void ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, ctu::cf **a2)
{
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);
  const void *v6;
  uint64_t v7;
  void **v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  dispatch_time_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[7];
  std::__shared_weak_count *v30;
  void *v31;
  void *v32;
  char *v33;
  __int128 v34;
  std::string buf;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a1[5];
  if (*a2)
    v4 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v4 = 0;
  if (v4)
  {
    (*(void (**)(_QWORD, uint64_t))(*v3 + 96))(a1[5], 8);
    ctu::cf::show(*a2, v6);
    v7 = *(_QWORD *)(a1[4] + 8);
    v8 = (void **)(v7 + 40);
    if (*(char *)(v7 + 63) < 0)
      operator delete(*v8);
    *(std::string *)v8 = buf;
    v9 = v3[11];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1[4] + 8);
      v28 = (_QWORD *)(v27 + 40);
      if (*(char *)(v27 + 63) < 0)
        v28 = (_QWORD *)*v28;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v28;
      _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "#I Poweroff baseband request failed; Error: %{public}s",
        (uint8_t *)&buf,
        0xCu);
      v10 = v3[59];
      if (!v10)
        goto LABEL_10;
    }
    else
    {
      v10 = v3[59];
      if (!v10)
      {
LABEL_10:
        v11 = *(_QWORD *)(a1[4] + 8);
        v12 = a1[8];
        if (*(char *)(v11 + 63) < 0)
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v11 + 40), *(_QWORD *)(v11 + 48));
        else
          buf = *(std::string *)(v11 + 40);
        (*(void (**)(uint64_t, uint64_t, std::string *))(v12 + 16))(v12, 3760250880, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        return;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    goto LABEL_10;
  }
  v13 = v3[11];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband request delivered; waiting for reset detection",
      (uint8_t *)&buf,
      2u);
  }
  v14 = v3[22];
  v15 = (char *)operator new(0x28uLL);
  v33 = v15;
  v34 = xmmword_1BF73A760;
  strcpy(v15, "Poweroff: Wait for reset detection");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_86;
  aBlock[3] = &unk_1E791D988;
  v17 = a1[6];
  v16 = (std::__shared_weak_count *)a1[7];
  aBlock[5] = v3;
  aBlock[6] = v17;
  v30 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (void *)a1[8];
  if (v20)
    v20 = _Block_copy(v20);
  v21 = a1[4];
  v31 = v20;
  aBlock[4] = v21;
  v22 = _Block_copy(aBlock);
  v32 = v22;
  v23 = dispatch_time(0, 10000000000);
  ResetDetection::add(v14, (uint64_t)&v33, 1, &v32, v23);
  if (v22)
    _Block_release(v22);
  operator delete(v15);
  if (v31)
    _Block_release(v31);
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1BF6AFB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10BootModule13shutdown_syncEN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke_86(_QWORD *a1, int a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t result;
  std::string __p;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)a1[5];
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 96))(v4, 8);
  if (a2)
  {
    v5 = (char *)operator new(0x30uLL);
    strcpy(v5, "Poweroff: Timeout waiting for reset detection");
    v6 = *(_QWORD *)(a1[4] + 8);
    if (*(char *)(v6 + 63) < 0)
      operator delete(*(void **)(v6 + 40));
    *(_QWORD *)(v6 + 40) = v5;
    *(_OWORD *)(v6 + 48) = xmmword_1BF743170;
    v7 = v4[11];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(a1[4] + 8);
      v14 = (_QWORD *)(v13 + 40);
      if (*(char *)(v13 + 63) < 0)
        v14 = (_QWORD *)*v14;
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__p, 0xCu);
      v8 = *(_QWORD *)(a1[4] + 8);
      v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
        goto LABEL_6;
    }
    else
    {
      v8 = *(_QWORD *)(a1[4] + 8);
      v9 = a1[8];
      if ((*(char *)(v8 + 63) & 0x80000000) == 0)
      {
LABEL_6:
        __p = *(std::string *)(v8 + 40);
LABEL_17:
        (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250883, &__p);
        goto LABEL_18;
      }
    }
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v8 + 40), *(_QWORD *)(v8 + 48));
    goto LABEL_17;
  }
  v10 = v4[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband success", (uint8_t *)&__p, 2u);
  }
  v11 = *(_QWORD *)(a1[4] + 8);
  v12 = a1[8];
  if (*(char *)(v11 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 40), *(_QWORD *)(v11 + 48));
  else
    __p = *(std::string *)(v11 + 40);
  (*(void (**)(uint64_t, _QWORD, std::string *))(v12 + 16))(v12, 0, &__p);
LABEL_18:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    result = v4[59];
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  }
  result = v4[59];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

void sub_1BF6AFE24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[8];
  if (result)
    result = _Block_copy(result);
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c38_ZTSNSt3__110shared_ptrI10BootModuleEE64c107_ZTSN8dispatch5blockIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = a1[6];
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_QWORD *)(v2 + 472) != 0;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24)
    || (*(_BYTE *)(v2 + 229) = 1, v3 = *(NSObject **)(v2 + 88), !os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)))
  {
    v4 = *(_QWORD *)(a1[4] + 8);
    if (*(_BYTE *)(v4 + 24))
      goto LABEL_4;
LABEL_11:
    *(_BYTE *)(v4 + 24) = 0;
    if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
      goto LABEL_5;
    goto LABEL_12;
  }
  LOWORD(v11) = 0;
  _os_log_error_impl(&dword_1BF566000, v3, OS_LOG_TYPE_ERROR, "Boot controller object has not been created!", (uint8_t *)&v11, 2u);
  v4 = *(_QWORD *)(a1[4] + 8);
  if (!*(_BYTE *)(v4 + 24))
    goto LABEL_11;
LABEL_4:
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 472)
                                                                                           + 48))(*(_QWORD *)(v2 + 472), *(_QWORD *)(a1[5] + 8) + 40);
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
LABEL_5:
    *(_QWORD *)(v2 + 232) = TelephonyUtilSystemMachTime();
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 472)
                                                                                             + 56))(*(_QWORD *)(v2 + 472), *(_QWORD *)(a1[5] + 8) + 40);
    if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      v5 = *(NSObject **)(v2 + 88);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = *(_QWORD *)(a1[5] + 8);
        v7 = (_QWORD *)(v6 + 40);
        if (*(char *)(v6 + 63) < 0)
          v7 = (_QWORD *)*v7;
        v11 = 136315138;
        v12 = v7;
        v8 = "Failed on booting!: Reason: %s";
LABEL_17:
        _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v11, 0xCu);
        return;
      }
    }
    return;
  }
LABEL_12:
  *(_BYTE *)(v2 + 229) = 1;
  v5 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v9 = *(_QWORD *)(a1[5] + 8);
    v10 = (_QWORD *)(v9 + 40);
    if (*(char *)(v9 + 63) < 0)
      v10 = (_QWORD *)*v10;
    v11 = 136315138;
    v12 = v10;
    v8 = "Failed on preparation for booting!: Reason: %s";
    goto LABEL_17;
  }
}

uint64_t __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 64);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_93(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Recovery detected", v2, 2u);
  }
}

void __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrI10BootModuleEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_95(_QWORD *a1)
{
  _QWORD *v1;
  NSObject *v3;
  uint64_t v4;
  __CFDictionary *Mutable;
  const __CFAllocator *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  const void *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeID v23;
  NSObject *v24;
  NSObject *v25;
  unint64_t v26;
  _QWORD v27[6];
  _QWORD block[6];
  std::__shared_weak_count *v29;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v33;
  NSObject *v34;
  os_activity_scope_state_s state;

  v1 = (_QWORD *)a1[6];
  if ((*((_DWORD *)v1 + 112) - 7) < 2)
    return;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    v34 = _os_activity_create(&dword_1BF566000, "Baseband state: booted", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v34, &state);
    os_activity_scope_leave(&state);
    v3 = v1[11];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband bootup succeeded", (uint8_t *)&state, 2u);
    }
    (*(void (**)(_QWORD *, uint64_t))(*v1 + 96))(v1, 3);
    v1[30] = TelephonyUtilSystemMachTime();
    state.opaque[0] = 0;
    v4 = *MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
      state.opaque[0] = (uint64_t)Mutable;
    ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFB7F0], v4, v6);
    v7 = (std::__shared_weak_count *)v1[16];
    if (!v7 || (v8 = v1[15], (v9 = std::__shared_weak_count::lock(v7)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v10 = v9;
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v10);
    }
    BootModule::reportStatisticsBootUpTime_sync((BootModule *)v1);
    v15 = (const void *)*MEMORY[0x1E0CFBD68];
    v16 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
    if (v16 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v17 = (void *)v16;
    if (v16 >= 0x17)
    {
      v21 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17)
        v21 = v16 | 7;
      v22 = v21 + 1;
      v18 = (void **)operator new(v21 + 1);
      __dst[1] = v17;
      v33 = v22 | 0x8000000000000000;
      __dst[0] = v18;
    }
    else
    {
      HIBYTE(v33) = v16;
      v18 = __dst;
      if (!v16)
      {
        LOBYTE(__dst[0]) = 0;
        v19 = (const void *)state.opaque[0];
        if (!state.opaque[0])
          goto LABEL_29;
LABEL_27:
        v23 = CFGetTypeID(v19);
        if (v23 == CFDictionaryGetTypeID())
        {
          cf = v19;
          CFRetain(v19);
LABEL_30:
          aBlock = 0;
          Service::broadcastEvent((uint64_t)v1, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock)
            _Block_release(aBlock);
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v33) < 0)
            operator delete(__dst[0]);
          v24 = a1[9];
          v25 = v1[17];
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = ___ZN10BootModule9boot_syncEv_block_invoke_96;
          block[3] = &__block_descriptor_tmp_102_0;
          block[4] = v1;
          block[5] = v8;
          v29 = v10;
          do
            v26 = __ldxr(p_shared_weak_owners);
          while (__stxr(v26 + 1, p_shared_weak_owners));
          dispatch_group_notify(v24, v25, block);
          if (v29)
            std::__shared_weak_count::__release_weak(v29);
          std::__shared_weak_count::__release_weak(v10);
          if (v19)
            CFRelease(v19);
          if (v34)
            os_release(v34);
          return;
        }
LABEL_29:
        cf = 0;
        goto LABEL_30;
      }
    }
    memmove(v18, v15, (size_t)v17);
    *((_BYTE *)v17 + (_QWORD)v18) = 0;
    v19 = (const void *)state.opaque[0];
    if (!state.opaque[0])
      goto LABEL_29;
    goto LABEL_27;
  }
  v20 = v1[11];
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_error_impl(&dword_1BF566000, v20, OS_LOG_TYPE_ERROR, "Baseband bootup failed", (uint8_t *)&state, 2u);
  }
  (*(void (**)(_QWORD *, uint64_t))(*v1 + 96))(v1, 5);
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 0x40000000;
  v27[2] = ___ZN10BootModule9boot_syncEv_block_invoke_103;
  v27[3] = &unk_1E791DAF0;
  v27[4] = a1[5];
  v27[5] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped(v1 + 15, (uint64_t)v27);
}

void sub_1BF6B06FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *aBlock,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  uint64_t v31;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a24);
  if (a30 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v30);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v31 - 96));
  ctu::os::scoped_activity::~scoped_activity((void **)(v31 - 104));
  _Unwind_Resume(a1);
}

void BootModule::reportStatisticsBootUpTime_sync(BootModule *this)
{
  NSObject *v2;
  xpc_object_t v3;
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  int64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const void *v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  xpc_object_t object;
  uint8_t buf[8];
  size_t v26;
  unint64_t v27;

  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting Stats of bootup time", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = MEMORY[0x1E0C812F8];
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v3) == v4)
    {
      xpc_retain(v3);
      v5 = v3;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v6) == v4)
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = time(0);
  v9 = xpc_int64_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CFBD90], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFC240]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB020], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(0);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB0E8], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (v7)
  {
    xpc_retain(v7);
    v15 = v7;
  }
  else
  {
    v15 = xpc_null_create();
  }
  xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB018], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const void *)*MEMORY[0x1E0CFB5E0];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v26 = v19;
    v27 = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v20;
LABEL_32:
    memmove(v20, v17, v19);
    *((_BYTE *)v20 + v19) = 0;
    object = v5;
    if (v5)
      goto LABEL_28;
    goto LABEL_33;
  }
  HIBYTE(v27) = v18;
  v20 = buf;
  if (v18)
    goto LABEL_32;
  buf[0] = 0;
  object = v5;
  if (v5)
  {
LABEL_28:
    xpc_retain(v5);
    goto LABEL_34;
  }
LABEL_33:
  object = xpc_null_create();
LABEL_34:
  v23 = 0;
  Service::runCommand((uint64_t)this, (uint64_t)buf, &object, &v23);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v27) < 0)
    operator delete(*(void **)buf);
  xpc_release(v7);
  xpc_release(v5);
}

void sub_1BF6B0B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_96(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  _QWORD aBlock[6];
  std::__shared_weak_count *v11;
  void *v12;
  char *v13;
  __int128 v14;

  v2 = a1[4];
  v3 = *(_QWORD *)(v2 + 176);
  v4 = (char *)operator new(0x19uLL);
  v13 = v4;
  v14 = xmmword_1BF73D650;
  strcpy(v4, "Baseband Recovered Gate");
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_101;
  v6 = a1[5];
  v5 = (std::__shared_weak_count *)a1[6];
  aBlock[4] = v2;
  aBlock[5] = v6;
  v11 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = _Block_copy(aBlock);
  v12 = v9;
  ResetDetection::add(v3, (uint64_t)&v13, 0, &v12, -1);
  if (v9)
    _Block_release(v9);
  operator delete(v4);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void sub_1BF6B0CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  void *v16;
  const void *v17;

  if (v17)
    _Block_release(v17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_2(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  char *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD aBlock[6];
  std::__shared_weak_count *v16;
  void *v17;
  char *v18;
  __int128 v19;
  std::__shared_weak_count *v21;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (BootModule *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v21 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        BootModule::bbResetFlag(v3, 0);
        v6 = *((_QWORD *)v3 + 22);
        v7 = (char *)operator new(0x19uLL);
        v18 = v7;
        v19 = xmmword_1BF73D650;
        strcpy(v7, "Baseband Crash Recovery");
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZN10BootModule9boot_syncEv_block_invoke_3;
        aBlock[3] = &__block_descriptor_tmp_100_0;
        v9 = a1[5];
        v8 = (std::__shared_weak_count *)a1[6];
        aBlock[4] = v3;
        aBlock[5] = v9;
        v16 = v8;
        if (v8)
        {
          p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
          do
            v11 = __ldxr(p_shared_weak_owners);
          while (__stxr(v11 + 1, p_shared_weak_owners));
        }
        v12 = _Block_copy(aBlock);
        v17 = v12;
        ResetDetection::add(v6, (uint64_t)&v18, 1, &v17, -1);
        if (v12)
          _Block_release(v12);
        operator delete(v7);
        if (v16)
          std::__shared_weak_count::__release_weak(v16);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF6B0E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  void *v16;
  const void *v17;
  uint64_t v18;

  if (v17)
    _Block_release(v17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  operator delete(v16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v18 - 64);
  _Unwind_Resume(a1);
}

void sub_1BF6B0ED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void BootModule::bbResetFlag(BootModule *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _BYTE *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v3 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = this;
  v8[8] = a2;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = *((_QWORD *)this + 17);
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN10BootModule9boot_syncEv_block_invoke_3(_QWORD *a1)
{
  BootModule *v1;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  const void *v6;
  size_t v7;
  size_t v8;
  __int128 *p_dst;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  size_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  const void *v20;
  size_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  void *v28;
  CFTypeRef cf;
  void *v30[2];
  unint64_t v31;
  void *aBlock;
  std::string v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  __int128 v40;
  char v41;
  _BYTE v42[8];
  _QWORD *v43;
  void *__p[2];
  char v45;
  char *v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  __int128 __dst;
  unint64_t v51;
  _BYTE v52[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::__shared_weak_count *v59;

  v1 = (BootModule *)a1[4];
  if ((*((_DWORD *)v1 + 112) - 7) >= 2)
  {
    v3 = (std::__shared_weak_count *)a1[6];
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      v59 = v4;
      if (v4)
      {
        if (!a1[5])
        {
          v10 = v4;
LABEL_62:
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
          return;
        }
        BootModule::bbResetFlag(v1, 1);
        *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v56 = v5;
        v57 = v5;
        v54 = v5;
        v55 = v5;
        *(_OWORD *)&v52[16] = v5;
        v53 = v5;
        *(_OWORD *)v52 = v5;
        v6 = (const void *)*MEMORY[0x1E0CFB590];
        v7 = strlen((const char *)*MEMORY[0x1E0CFB590]);
        if (v7 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v8 = v7;
        if (v7 >= 0x17)
        {
          v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v11 = v7 | 7;
          v12 = v11 + 1;
          p_dst = (__int128 *)operator new(v11 + 1);
          *((_QWORD *)&__dst + 1) = v8;
          v51 = v12 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v51) = v7;
          p_dst = &__dst;
          if (!v7)
          {
LABEL_14:
            *((_BYTE *)p_dst + v8) = 0;
            v13 = (const void *)*MEMORY[0x1E0CFBF98];
            v14 = strlen((const char *)*MEMORY[0x1E0CFBF98]);
            if (v14 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v15 = v14;
            if (v14 >= 0x17)
            {
              v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v14 | 7) != 0x17)
                v17 = v14 | 7;
              v18 = v17 + 1;
              v16 = (__int128 *)operator new(v17 + 1);
              *((_QWORD *)&v48 + 1) = v15;
              v49 = v18 | 0x8000000000000000;
              *(_QWORD *)&v48 = v16;
            }
            else
            {
              HIBYTE(v49) = v14;
              v16 = &v48;
              if (!v14)
              {
LABEL_22:
                *((_BYTE *)v16 + v15) = 0;
                v19 = (char *)operator new(0x20uLL);
                v46 = v19;
                v47 = xmmword_1BF743180;
                strcpy(v19, "** baseband crash detected");
                Timestamp::Timestamp((Timestamp *)v42);
                Timestamp::asString((uint64_t)v42, 0, 9, __p);
                v41 = 0;
                LOBYTE(v40) = 0;
                ResetInfo::ResetInfo((std::string *)v52, &__dst, &v48, (__int128 *)&v46, (uint64_t)__p, 3, &v40);
                if (v45 < 0)
                  operator delete(__p[0]);
                std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v42, v43);
                operator delete(v19);
                if (SHIBYTE(v49) < 0)
                  operator delete((void *)v48);
                if (SHIBYTE(v51) < 0)
                  operator delete((void *)__dst);
                ResetInfo::ResetInfo(&v33, (const ResetInfo *)v52);
                aBlock = 0;
                BootModule::requestReset(v1, &v33, &aBlock);
                if (aBlock)
                  _Block_release(aBlock);
                if (v39 < 0)
                {
                  operator delete(v38);
                  if ((v37 & 0x80000000) == 0)
                  {
LABEL_32:
                    if ((v35 & 0x80000000) == 0)
                      goto LABEL_33;
                    goto LABEL_55;
                  }
                }
                else if ((v37 & 0x80000000) == 0)
                {
                  goto LABEL_32;
                }
                operator delete(v36);
                if ((v35 & 0x80000000) == 0)
                {
LABEL_33:
                  if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_34;
LABEL_56:
                  operator delete(v33.__r_.__value_.__l.__data_);
LABEL_34:
                  v20 = (const void *)*MEMORY[0x1E0CFBBB0];
                  v21 = strlen((const char *)*MEMORY[0x1E0CFBBB0]);
                  if (v21 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  v22 = (void *)v21;
                  if (v21 >= 0x17)
                  {
                    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v21 | 7) != 0x17)
                      v24 = v21 | 7;
                    v25 = v24 + 1;
                    v23 = operator new(v24 + 1);
                    v30[1] = v22;
                    v31 = v25 | 0x8000000000000000;
                    v30[0] = v23;
                  }
                  else
                  {
                    HIBYTE(v31) = v21;
                    v23 = v30;
                    if (!v21)
                    {
LABEL_42:
                      *((_BYTE *)v22 + (_QWORD)v23) = 0;
                      v28 = 0;
                      cf = 0;
                      Service::broadcastEvent((uint64_t)v1, (uint64_t)v30, &cf, (const void **)&v28);
                      if (v28)
                        _Block_release(v28);
                      if (cf)
                        CFRelease(cf);
                      if (SHIBYTE(v31) < 0)
                      {
                        operator delete(v30[0]);
                        if ((SHIBYTE(v57) & 0x80000000) == 0)
                        {
LABEL_48:
                          if ((SBYTE7(v55) & 0x80000000) == 0)
                            goto LABEL_49;
                          goto LABEL_59;
                        }
                      }
                      else if ((SHIBYTE(v57) & 0x80000000) == 0)
                      {
                        goto LABEL_48;
                      }
                      operator delete(*((void **)&v56 + 1));
                      if ((SBYTE7(v55) & 0x80000000) == 0)
                      {
LABEL_49:
                        if ((SHIBYTE(v53) & 0x80000000) == 0)
                          goto LABEL_50;
                        goto LABEL_60;
                      }
LABEL_59:
                      operator delete((void *)v54);
                      if ((SHIBYTE(v53) & 0x80000000) == 0)
                      {
LABEL_50:
                        if ((v52[23] & 0x80000000) == 0)
                          goto LABEL_51;
                        goto LABEL_61;
                      }
LABEL_60:
                      operator delete(*(void **)&v52[24]);
                      if ((v52[23] & 0x80000000) == 0)
                      {
LABEL_51:
                        v10 = v59;
                        if (!v59)
                          return;
                        goto LABEL_62;
                      }
LABEL_61:
                      operator delete(*(void **)v52);
                      v10 = v59;
                      if (!v59)
                        return;
                      goto LABEL_62;
                    }
                  }
                  memmove(v23, v20, (size_t)v22);
                  goto LABEL_42;
                }
LABEL_55:
                operator delete(v34);
                if ((SHIBYTE(v33.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_34;
                goto LABEL_56;
              }
            }
            memmove(v16, v13, v15);
            goto LABEL_22;
          }
        }
        memmove(p_dst, v6, v8);
        goto LABEL_14;
      }
    }
  }
}

void sub_1BF6B143C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ResetInfo::~ResetInfo((void **)(v43 - 192));
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v43 - 80);
    _Unwind_Resume(a1);
  }
  ResetInfo::~ResetInfo((void **)(v43 - 192));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v43 - 80);
  _Unwind_Resume(a1);
}

void ___ZN10BootModule9boot_syncEv_block_invoke_103(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(char *)(v2 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 40), *(_QWORD *)(v2 + 48));
  else
    __p = *(std::string *)(v2 + 40);
  BootModule::handleBootFailed_sync(v1, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF6B15F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  NSObject *v5;

  v2 = a2[8];
  a1[7] = a2[7];
  a1[8] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[9];
  a1[9] = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_56c38_ZTSNSt3__110shared_ptrI10BootModuleEE72c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(NSObject **)(a1 + 72);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void BootModule::setVoiceCall_sync(BootModule *this, char a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v3 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *((_QWORD *)this + 52);
  v14 = *((_QWORD *)this + 17);
  v15 = operator new(0x20uLL);
  *v15 = this;
  v15[1] = v5;
  v15[2] = v7;
  *((_BYTE *)v15 + 24) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF6B178C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat1_sync(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = a1[52];
  v14 = a1[17];
  v15 = operator new(0x20uLL);
  *v15 = a1;
  v15[1] = v5;
  v15[2] = v7;
  *((_DWORD *)v15 + 6) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF6B1880(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setRat2_sync(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = a1[52];
  v14 = a1[17];
  v15 = operator new(0x20uLL);
  *v15 = a1;
  v15[1] = v5;
  v15[2] = v7;
  *((_DWORD *)v15 + 6) = a2;
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF6B1974(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setPLMN1_sync(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::string *v15;
  __int128 v16;
  std::string __p;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v13 = a1[52];
  v14 = a1[17];
  v15 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v15[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF6B1AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;

  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

uint64_t BootModule::setPLMN1_sync(std::string)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
    goto LABEL_3;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void BootModule::setPLMN2_sync(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::string *v15;
  __int128 v16;
  std::string __p;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v13 = a1[52];
  v14 = a1[17];
  v15 = (std::string *)operator new(0x30uLL);
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
  v15[1] = __p;
  memset(&__p, 0, sizeof(__p));
  dispatch_group_notify_f(v13, v14, v15, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF6B1CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  std::__shared_weak_count *v11;

  if (a11)
  {
    std::__shared_weak_count::__release_weak(a11);
    std::__shared_weak_count::__release_weak(v11);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v11);
  _Unwind_Resume(a1);
}

void BootModule::setCellId_sync(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;

  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = a1[52];
  v16 = a1[17];
  v17 = operator new(0x28uLL);
  *v17 = a1;
  v17[1] = v7;
  v17[2] = v9;
  v17[3] = a2;
  *((_DWORD *)v17 + 8) = a3;
  dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF6B1DF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BootModule::setAreaCode_sync(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;

  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = a1[52];
  v16 = a1[17];
  v17 = operator new(0x28uLL);
  *v17 = a1;
  v17[1] = v7;
  v17[2] = v9;
  v17[3] = a2;
  *((_DWORD *)v17 + 8) = a3;
  dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF6B1EF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::sub_match<std::__wrap_iter<char const*>>::str[abi:ne180100](_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  char *v7;
  __int128 *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = result;
  if (!*((_BYTE *)a2 + 16))
  {
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    return result;
  }
  v4 = *a2;
  v3 = (char *)a2[1];
  v5 = (unint64_t)&v3[-*a2];
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    *((_BYTE *)result + 23) = v5;
    if ((char *)v4 != v3)
      goto LABEL_5;
LABEL_15:
    *(_BYTE *)v2 = 0;
    return result;
  }
  v12 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v12 = v5 | 7;
  v13 = v12 + 1;
  result = operator new(v12 + 1);
  v2[1] = v5;
  v2[2] = v13 | 0x8000000000000000;
  *v2 = result;
  v2 = result;
  if ((char *)v4 == v3)
    goto LABEL_15;
LABEL_5:
  if (v5 < 0x20 || (unint64_t)v2 - v4 < 0x20)
  {
    v6 = v2;
    v7 = (char *)v4;
  }
  else
  {
    v6 = (char *)v2 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v7 = (char *)(v4 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v8 = (__int128 *)(v4 + 16);
    v9 = v2 + 2;
    v10 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v11 = *v8;
      *(v9 - 1) = *(v8 - 1);
      *v9 = v11;
      v8 += 2;
      v9 += 2;
      v10 -= 32;
    }
    while (v10);
    if (v5 == (v5 & 0x7FFFFFFFFFFFFFE0))
      goto LABEL_18;
  }
  do
  {
    v14 = *v7++;
    *v6++ = v14;
  }
  while (v7 != v3);
LABEL_18:
  *v6 = 0;
  return result;
}

_QWORD *ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791DC08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791DC08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BootModule *,std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule *)#1},std::allocator<BootModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10BootModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BootModule> ctu::SharedSynchronizable<BootModule>::make_shared_ptr<BootModule>(BootModule*)::{lambda(BootModule*)#1}::operator() const(BootModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<BootModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791DC08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void _ZZN8dispatch6detail12group_notifyIZZZN10BootModule12requestResetE9ResetInfoNS_5blockIU13block_pointerFviNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEEEUb_EUb0_E3__0EEvP16dispatch_group_sP16dispatch_queue_sOT_NS5_17integral_constantIbLb0EEEENUlPvE_8__invokeESO_(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const void *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  void *v13;
  std::string v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *__pa;
  char v20;

  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_17;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_17;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    ResetInfo::ResetInfo(&v14, (const ResetInfo *)(__p + 24));
    v6 = (const void *)*((_QWORD *)__p + 17);
    if (v6)
      v7 = _Block_copy(v6);
    else
      v7 = 0;
    v13 = v7;
    BootModule::handleReset_sync(v3, (uint64_t)&v14, &v13);
    if (v7)
      _Block_release(v7);
    if (v20 < 0)
    {
      operator delete(__pa);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_11:
        if ((v16 & 0x80000000) == 0)
          goto LABEL_12;
        goto LABEL_35;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_12:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_36:
      operator delete(v14.__r_.__value_.__l.__data_);
      goto LABEL_13;
    }
LABEL_35:
    operator delete(v15);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_36;
  }
LABEL_13:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_17:
  v10 = *((_QWORD *)__p + 18);
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)*((_QWORD *)__p + 17);
  if (v11)
    _Block_release(v11);
  if (__p[135] < 0)
  {
    operator delete(*((void **)__p + 14));
    if ((__p[95] & 0x80000000) == 0)
    {
LABEL_23:
      if ((__p[71] & 0x80000000) == 0)
        goto LABEL_24;
      goto LABEL_30;
    }
  }
  else if ((__p[95] & 0x80000000) == 0)
  {
    goto LABEL_23;
  }
  operator delete(*((void **)__p + 9));
  if ((__p[71] & 0x80000000) == 0)
  {
LABEL_24:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    operator delete(*((void **)__p + 3));
    v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
    if (!v12)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_30:
  operator delete(*((void **)__p + 6));
  if (__p[47] < 0)
    goto LABEL_31;
LABEL_25:
  v12 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v12)
LABEL_26:
    std::__shared_weak_count::__release_weak(v12);
LABEL_27:
  operator delete(__p);
}

void sub_1BF6B23C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  _QWORD *v11;
  std::__shared_weak_count *v12;
  void **v13;
  const void *v14;
  unint64_t *p_shared_owners;
  unint64_t v17;
  NSObject *v18;
  const void *v19;
  std::__shared_weak_count *v20;

  if (v14)
    _Block_release(v14);
  ResetInfo::~ResetInfo(&a11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (v17)
  {
    v18 = v11[18];
    if (!v18)
      goto LABEL_7;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v18 = v11[18];
    if (!v18)
    {
LABEL_7:
      v19 = (const void *)v11[17];
      if (!v19)
      {
LABEL_12:
        ResetInfo::~ResetInfo(v13);
        v20 = (std::__shared_weak_count *)v11[2];
        if (v20)
          std::__shared_weak_count::__release_weak(v20);
        operator delete(v11);
        _Unwind_Resume(a1);
      }
LABEL_11:
      _Block_release(v19);
      goto LABEL_12;
    }
  }
  dispatch_release(v18);
  v19 = (const void *)v11[17];
  if (!v19)
    goto LABEL_12;
  goto LABEL_11;
}

void ctu::SharedSynchronizable<BootModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791DCD0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10BootModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb1_EUb2_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  uint64_t *v2;
  const char *v3;
  uint64_t v4;
  xpc_object_t value;
  int v6;
  NSObject *v7;
  NSObject *v8;
  const void *v9;
  size_t v10;
  void *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  xpc_object_t v17;
  int v18;
  const char *v19;
  xpc_object_t v20;
  int v21;
  const char *v22;
  xpc_object_t v23;
  const char *v24;
  const char *v25;
  xpc_object_t v26;
  const char *v27;
  const char *v28;
  xpc_object_t v29;
  uint64_t v30;
  const char *v31;
  xpc_object_t v32;
  uint64_t v33;
  const char *v34;
  xpc_object_t v35;
  uint64_t v36;
  const char *v37;
  xpc_object_t v38;
  uint64_t v39;
  const char *v40;
  xpc_object_t v41;
  char v42;
  xpc_object_t v43;
  int v44;
  NSObject *v45;
  NSObject *v46;
  xpc_object_t v47;
  uint64_t v48;
  xpc_object_t v49;
  const void *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::string __p;
  std::string v55;
  xpc_object_t v56;
  std::string object;
  void *aBlock;
  xpc_object_t v59;
  void *__dst[2];
  unint64_t v61;

  v2 = *(uint64_t **)a1;
  v3 = (const char *)*MEMORY[0x1E0CFB040];
  v4 = **(_QWORD **)a1;
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(*(_QWORD *)a1 + 8), (const char *)*MEMORY[0x1E0CFB040]))
    goto LABEL_26;
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], v3);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v6 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (!v6)
  {
    v8 = *(NSObject **)(v4 + 440);
    *(_QWORD *)(v4 + 440) = 0;
    if (!v8)
      goto LABEL_12;
    goto LABEL_11;
  }
  v7 = *(NSObject **)(v4 + 432);
  if (v7)
  {
    dispatch_retain(*(dispatch_object_t *)(v4 + 432));
    dispatch_suspend(v7);
  }
  v8 = *(NSObject **)(v4 + 440);
  *(_QWORD *)(v4 + 440) = v7;
  if (v8)
  {
LABEL_11:
    dispatch_resume(v8);
    dispatch_release(v8);
  }
LABEL_12:
  BootModule::setVoiceCall_sync((BootModule *)v4, v6);
  v9 = (const void *)*MEMORY[0x1E0CFB0B0];
  v10 = strlen((const char *)*MEMORY[0x1E0CFB0B0]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v14 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v14 = v10 | 7;
    v15 = v14 + 1;
    v12 = (void **)operator new(v14 + 1);
    __dst[1] = v11;
    v61 = v15 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_20:
    memmove(v12, v9, (size_t)v11);
    *((_BYTE *)v11 + (_QWORD)v12) = 0;
    v13 = (void *)v2[1];
    v59 = v13;
    if (v13)
      goto LABEL_16;
LABEL_21:
    v59 = xpc_null_create();
    goto LABEL_22;
  }
  HIBYTE(v61) = v10;
  v12 = __dst;
  if (v10)
    goto LABEL_20;
  LOBYTE(__dst[0]) = 0;
  v13 = (void *)v2[1];
  v59 = v13;
  if (!v13)
    goto LABEL_21;
LABEL_16:
  xpc_retain(v13);
LABEL_22:
  aBlock = 0;
  Service::broadcastEvent(v4, (uint64_t)__dst, &v59, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v59);
  v59 = 0;
  if (SHIBYTE(v61) < 0)
    operator delete(__dst[0]);
LABEL_26:
  v16 = (const char *)*MEMORY[0x1E0CFC1F0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC1F0]))
  {
    v17 = xpc_dictionary_get_value((xpc_object_t)v2[1], v16);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17)
      xpc_retain(v17);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat1_sync((_QWORD *)v4, v18);
  }
  v19 = (const char *)*MEMORY[0x1E0CFC1F8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC1F8]))
  {
    v20 = xpc_dictionary_get_value((xpc_object_t)v2[1], v19);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    if (v20)
      xpc_retain(v20);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v21 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)0xFFFFFFFFLL);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setRat2_sync((_QWORD *)v4, v21);
  }
  v22 = (const char *)*MEMORY[0x1E0CFC230];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC230]))
  {
    memset(&object, 170, sizeof(object));
    v23 = xpc_dictionary_get_value((xpc_object_t)v2[1], v22);
    v56 = v23;
    if (v23)
      xpc_retain(v23);
    else
      v56 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v24);
    xpc_release(v56);
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v55, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    else
      v55 = object;
    BootModule::setPLMN1_sync((_QWORD *)v4, (uint64_t)&v55);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v55.__r_.__value_.__l.__data_);
      if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_45;
    }
    else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_45;
    }
    operator delete(object.__r_.__value_.__l.__data_);
  }
LABEL_45:
  v25 = (const char *)*MEMORY[0x1E0CFC238];
  if (!xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC238]))
    goto LABEL_56;
  memset(&object, 170, sizeof(object));
  v26 = xpc_dictionary_get_value((xpc_object_t)v2[1], v25);
  v56 = v26;
  if (v26)
    xpc_retain(v26);
  else
    v56 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v27);
  xpc_release(v56);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
  else
    __p = object;
  BootModule::setPLMN2_sync((_QWORD *)v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(object.__r_.__value_.__l.__data_);
LABEL_56:
  v28 = (const char *)*MEMORY[0x1E0CFAF58];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFAF58]))
  {
    v29 = xpc_dictionary_get_value((xpc_object_t)v2[1], v28);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    if (v29)
      xpc_retain(v29);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v30 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((_QWORD *)v4, v30, 0);
  }
  v31 = (const char *)*MEMORY[0x1E0CFAF60];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFAF60]))
  {
    v32 = xpc_dictionary_get_value((xpc_object_t)v2[1], v31);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    if (v32)
      xpc_retain(v32);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v33 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setCellId_sync((_QWORD *)v4, v33, 1);
  }
  v34 = (const char *)*MEMORY[0x1E0CFAFF0];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFAFF0]))
  {
    v35 = xpc_dictionary_get_value((xpc_object_t)v2[1], v34);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
    if (v35)
      xpc_retain(v35);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v36 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((_QWORD *)v4, v36, 0);
  }
  v37 = (const char *)*MEMORY[0x1E0CFAFF8];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFAFF8]))
  {
    v38 = xpc_dictionary_get_value((xpc_object_t)v2[1], v37);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    if (v38)
      xpc_retain(v38);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v39 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    BootModule::setAreaCode_sync((_QWORD *)v4, v39, 1);
  }
  v40 = (const char *)*MEMORY[0x1E0CFC218];
  if (xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC218])
    || xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC220]))
  {
    v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], v40);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    if (v41)
      xpc_retain(v41);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v42 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object.__r_.__value_.__l.__data_);
    if ((v42 & 1) == 0)
    {
      v43 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFC220]);
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
      if (v43)
        xpc_retain(v43);
      else
        object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      v44 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object.__r_.__value_.__l.__data_);
      if (!v44)
      {
        v46 = *(NSObject **)(v4 + 440);
        *(_QWORD *)(v4 + 440) = 0;
        if (!v46)
          goto LABEL_92;
        goto LABEL_91;
      }
    }
    v45 = *(NSObject **)(v4 + 432);
    if (v45)
    {
      dispatch_retain(*(dispatch_object_t *)(v4 + 432));
      dispatch_suspend(v45);
    }
    v46 = *(NSObject **)(v4 + 440);
    *(_QWORD *)(v4 + 440) = v45;
    if (v46)
    {
LABEL_91:
      dispatch_resume(v46);
      dispatch_release(v46);
    }
  }
LABEL_92:
  if (v2[2])
  {
    v47 = xpc_null_create();
    v48 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
    v49 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, std::string *))(v48 + 16))(v48, 0, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v49);
    v50 = (const void *)v2[2];
    if (v50)
      _Block_release(v50);
  }
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v51 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(p_shared_owners);
    while (__stlxr(v53 - 1, p_shared_owners));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  operator delete(a1);
}

void sub_1BF6B2D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *aBlock,xpc_object_t a30)
{
  _QWORD *v30;
  uint64_t v31;
  const void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (a28 < 0)
    operator delete(__p);
  v33 = *(const void **)(v31 + 16);
  if (v33)
    _Block_release(v33);
  xpc_release(*(xpc_object_t *)(v31 + 8));
  operator delete((void *)v31);
  v34 = (std::__shared_weak_count *)v30[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(v30);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::initialize(dispatch::group_session)::$_0>(BootModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  BootModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(BootModule ***)a1;
  BootModule::finishInitialization_sync(**(BootModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF6B3090(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::start(dispatch::group_session)::$_0>(BootModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<BootModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  unsigned __int8 v5;
  std::string::size_type v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  dispatch_object_t v44;
  NSObject *v45;
  NSObject *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  NSObject *v51;
  NSObject *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  dispatch_object_t v57;
  __int128 v58;
  dispatch_object_t object;
  __int128 v60;
  std::string block;
  void *v62;
  __int128 *v63;

  v2 = *a1;
  v3 = (*a1)[3];
  v4 = *(NSObject **)(v3 + 136);
  object = v4;
  if (v4)
    dispatch_retain(v4);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v6 = MEMORY[0x1E0C809B0];
  block.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v62 = &__block_descriptor_tmp_13_8;
  v63 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v7 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v58 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v7 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v58 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_8;
  }
  v8 = (unint64_t *)(v7 + 8);
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
LABEL_8:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v10 = off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&block);
    v11 = *(_OWORD *)&block.__r_.__value_.__l.__data_;
    *(_OWORD *)&block.__r_.__value_.__l.__data_ = 0uLL;
    v12 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    size = (std::__shared_weak_count *)block.__r_.__value_.__l.__size_;
    if (block.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(block.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v10 = off_1ED70F338;
  }
  v18 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v19 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ResetDetection::create(&object, (uint64_t *)&v58, *(_QWORD *)(*(_QWORD *)v10 + 208), (uint64_t *)&v60);
  v21 = v60;
  v60 = 0uLL;
  v22 = *(std::__shared_weak_count **)(v3 + 184);
  *(_OWORD *)(v3 + 176) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v18)
  {
    v28 = (unint64_t *)&v18->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (object)
    dispatch_release(object);
  v33 = *(_QWORD *)(v3 + 176);
  block.__r_.__value_.__r.__words[0] = v6;
  block.__r_.__value_.__l.__size_ = 0x40000000;
  block.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN14ResetDetection5startEv_block_invoke;
  v62 = &__block_descriptor_tmp_3;
  v63 = (__int128 *)v33;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v33 + 72), (uint64_t)&block);
  v34 = v2[2];
  if (v34)
  {
    dispatch_retain((dispatch_object_t)v2[2]);
    dispatch_group_enter(v34);
  }
  v35 = *(NSObject **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v34;
  if (v35)
  {
    dispatch_group_leave(v35);
    dispatch_release(v35);
  }
  *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v60 + 1) = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v3 + 80))(&v60, v3);
  v36 = v60;
  if ((_QWORD)v60)
  {
    v57 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
    v37 = (char *)operator new(0x38uLL);
    strcpy(v37, "com.apple.AppleBasebandManager.RadioNotReady.Bootup");
    v38 = capabilities::abs::bootupAssertionTimeoutScalingFactor((capabilities::abs *)v37);
    v39 = *(_QWORD *)(v36 + 104);
    std::string::__init_copy_ctor_external(&block, v37, 0x33uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v39 + 24))(&v57, v39, &block, 180000 * v38);
    if (SHIBYTE(block.__r_.__value_.__r.__words[2]) < 0)
      operator delete(block.__r_.__value_.__l.__data_);
    operator delete(v37);
    v41 = *v2;
    v40 = v2[1];
    if (v40)
    {
      v42 = (unint64_t *)(v40 + 16);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v44 = v57;
    if (v57)
    {
      dispatch_retain(v57);
      v45 = v57;
    }
    else
    {
      v45 = 0;
    }
    v46 = *(NSObject **)(v3 + 136);
    v47 = operator new(0x20uLL);
    *v47 = v3;
    v47[1] = v41;
    v47[2] = v40;
    v47[3] = v44;
    dispatch_group_notify_f(v45, v46, v47, (dispatch_function_t)dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    if (v57)
      dispatch_release(v57);
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = v2[2];
  if (v51)
  {
    dispatch_group_leave(v51);
    v52 = v2[2];
    if (v52)
      dispatch_release(v52);
  }
  v53 = (std::__shared_weak_count *)v2[1];
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF6B3618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  NSObject *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (object)
    dispatch_release(object);
  v25 = v21[2];
  if (v25)
  {
    dispatch_group_leave(v25);
    v26 = v21[2];
    if (v26)
      dispatch_release(v26);
  }
  v27 = (std::__shared_weak_count *)v21[1];
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  operator delete(v21);
  v28 = (std::__shared_weak_count *)v20[2];
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,BootModule::start(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(BootModule **__p)
{
  std::__shared_weak_count *v2;
  BootModule *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  BootModule *v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  const __CFAllocator *v9;
  const void *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeID v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v31;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_37;
  v3 = *__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_37;
  v5 = v4;
  v6 = __p[1];
  if (v6)
  {
    if (*((_DWORD *)v3 + 112))
    {
      v7 = *MEMORY[0x1E0C9AE00];
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB530], (const __CFString **)*MEMORY[0x1E0CFBA60], v7, v9);
      v10 = (const void *)*MEMORY[0x1E0CFBD68];
      v11 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = (void *)v11;
      if (v11 >= 0x17)
      {
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __dst[1] = v12;
        v31 = v15 | 0x8000000000000000;
        __dst[0] = v13;
      }
      else
      {
        HIBYTE(v31) = v11;
        v13 = __dst;
        if (!v11)
        {
          LOBYTE(__dst[0]) = 0;
          if (!Mutable)
            goto LABEL_17;
LABEL_15:
          v16 = CFGetTypeID(Mutable);
          if (v16 == CFDictionaryGetTypeID())
          {
            cf = Mutable;
            CFRetain(Mutable);
            goto LABEL_18;
          }
LABEL_17:
          cf = 0;
LABEL_18:
          v26[0] = MEMORY[0x1E0C809B0];
          v26[1] = 1174405120;
          v26[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke;
          v26[3] = &__block_descriptor_tmp_144_0;
          v26[4] = v3;
          v26[5] = v6;
          v27 = v5;
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
          aBlock = _Block_copy(v26);
          Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
          if (aBlock)
            _Block_release(aBlock);
          if (cf)
            CFRelease(cf);
          if (SHIBYTE(v31) < 0)
            operator delete(__dst[0]);
          v19 = v27;
          if (v27)
          {
            v20 = (unint64_t *)&v27->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (Mutable)
            CFRelease(Mutable);
          goto LABEL_33;
        }
      }
      memmove(v13, v10, (size_t)v12);
      *((_BYTE *)v12 + (_QWORD)v13) = 0;
      if (!Mutable)
        goto LABEL_17;
      goto LABEL_15;
    }
    BootModule::boot_sync(v3);
  }
LABEL_33:
  v22 = (unint64_t *)&v5->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_37:
  v24 = __p[3];
  if (v24)
    dispatch_release(v24);
  v25 = (std::__shared_weak_count *)__p[2];
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  operator delete(__p);
}

void sub_1BF6B3AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, CFTypeRef cf, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v27;
  NSObject *v28;
  std::__shared_weak_count *v29;

  p_shared_owners = (unint64_t *)&v24->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (v27)
  {
    v28 = v23[3];
    if (!v28)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v28 = v23[3];
    if (!v28)
    {
LABEL_5:
      v29 = (std::__shared_weak_count *)v23[2];
      if (!v29)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  dispatch_release(v28);
  v29 = (std::__shared_weak_count *)v23[2];
  if (!v29)
  {
LABEL_6:
    operator delete(v23);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v29);
  operator delete(v23);
  _Unwind_Resume(a1);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_143_1;
  v2[4] = v1;
  ctu::SharedSynchronizable<BootModule>::execute_wrapped((uint64_t *)(v1 + 120), (uint64_t)v2);
}

void ___ZZZN10BootModule5startEN8dispatch13group_sessionEENK3__0clEvENKUlvE_clEv_block_invoke_2(uint64_t a1)
{
  BootModule::boot_sync(*(BootModule **)(a1 + 32));
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_21handleBootFailed_syncENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEUb4_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNS6_10unique_ptrISE_NS6_14default_deleteISE_EEEEENUlPvE_8__invokeESN_(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  void **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *__p;
  char v12;
  uint8_t buf[4];
  void **v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  if (*(_DWORD *)(*a1 + 24))
  {
    v3 = *(NSObject **)(*v2 + 88);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((xpc::object *)(v2 + 4));
      v4 = v12 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315138;
      v14 = v4;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Dumping logs failed: %s", buf, 0xCu);
      if (v12 < 0)
        operator delete(__p);
    }
  }
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v5 = (std::__shared_weak_count *)v2[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void sub_1BF6B3DA8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  xpc_object_t *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  xpc_release(*v3);
  v2[4] = 0;
  v5 = (std::__shared_weak_count *)v2[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v2);
  v8 = (std::__shared_weak_count *)v1[2];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6B3E40(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10BootModuleE15execute_wrappedIZZNS3_22checkFSSyncStatus_syncENS_5blockIU13block_pointerFvbbEEEEUb5_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISB_NSG_14default_deleteISB_EEEEENUlPvE_8__invokeESL_(xpc_object_t **a1)
{
  xpc_object_t *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t value;
  xpc_object_t v6;
  void (**v7)(xpc_object_t, uint64_t, uint64_t);
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  xpc_object_t object;

  v2 = *a1;
  if (*(_DWORD *)*a1)
  {
    v3 = 0;
    v4 = 1;
  }
  else
  {
    value = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x1E0CFB438]);
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v3 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    v6 = xpc_dictionary_get_value(v2[1], (const char *)*MEMORY[0x1E0CFB440]);
    object = v6;
    if (v6)
      xpc_retain(v6);
    else
      object = xpc_null_create();
    v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  v7 = (void (**)(xpc_object_t, uint64_t, uint64_t))v2[2];
  if (v7)
  {
    v7[2](v7, v3, v4);
    v8 = v2[2];
    if (v8)
      _Block_release(v8);
  }
  xpc_release(v2[1]);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF6B3FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  uint64_t v11;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  xpc_release(object);
  v13 = *(const void **)(v11 + 16);
  if (v13)
    _Block_release(v13);
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  v14 = (std::__shared_weak_count *)v10[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setVoiceCall_sync(BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setVoiceCall_sync(BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  int v6;
  NSObject *v7;
  const char *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  int v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = *((unsigned __int8 *)__p + 24);
        *(_BYTE *)(v3 + 288) = v6;
        v7 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = "YES";
          if (!v6)
            v8 = "NO";
          v12 = 136315138;
          v13 = v8;
          _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Voice Call: %s", (uint8_t *)&v12, 0xCu);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat1_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void **v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *__pa;
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 296) = *((_DWORD *)__p + 6);
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          v7 = v13 >= 0 ? &__pa : (void **)__pa;
          v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)buf = 136315394;
          v15 = v7;
          v16 = 1024;
          v17 = v8;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT1: %s (%d)", buf, 0x12u);
          if (v13 < 0)
            operator delete(__pa);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void sub_1BF6B42C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
    {
LABEL_5:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setRat2_sync(abm::RadioAccessTechnology)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  void **v7;
  int v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  void *__pa;
  char v13;
  uint8_t buf[4];
  void **v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        *(_DWORD *)(v3 + 344) = *((_DWORD *)__p + 6);
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          abm::asString();
          v7 = v13 >= 0 ? &__pa : (void **)__pa;
          v8 = *((_DWORD *)__p + 6);
          *(_DWORD *)buf = 136315394;
          v15 = v7;
          v16 = 1024;
          v17 = v8;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT2: %s (%d)", buf, 0x12u);
          if (v13 < 0)
            operator delete(__pa);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void sub_1BF6B4480(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v6 = (std::__shared_weak_count *)v1[2];
    if (!v6)
    {
LABEL_5:
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v6);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN1_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN1_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _OWORD *v6;
  void **v7;
  char v8;
  __int128 v9;
  char *v10;
  size_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  int v16;
  _OWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_23;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_23;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    v6 = __p + 24;
    v7 = (void **)(v3 + 304);
    if ((char *)(v3 + 304) != __p + 24)
    {
      v8 = __p[47];
      if (*(char *)(v3 + 327) < 0)
      {
        if (v8 >= 0)
          v10 = __p + 24;
        else
          v10 = (char *)*((_QWORD *)__p + 3);
        if (v8 >= 0)
          v11 = __p[47];
        else
          v11 = *((_QWORD *)__p + 4);
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((_QWORD *)__p + 4));
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v3 + 320) = *((_QWORD *)__p + 5);
        *(_OWORD *)v7 = v9;
      }
    }
    v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0)
        v6 = *(_OWORD **)v6;
      v16 = 136315138;
      v17 = v6;
      _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN1: %s", (uint8_t *)&v16, 0xCu);
    }
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_23:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0)
LABEL_24:
    operator delete(*((void **)__p + 3));
LABEL_25:
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(__p);
}

void sub_1BF6B466C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void **v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      v7 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v7)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  operator delete(*v3);
  v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v7)
  {
LABEL_6:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v7);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setPLMN2_sync(std::string)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setPLMN2_sync(std::string)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _OWORD *v6;
  void **v7;
  char v8;
  __int128 v9;
  char *v10;
  size_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  int v16;
  _OWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (!v2)
    goto LABEL_23;
  v3 = *(_QWORD *)__p;
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    goto LABEL_23;
  v5 = v4;
  if (*((_QWORD *)__p + 1))
  {
    v6 = __p + 24;
    v7 = (void **)(v3 + 352);
    if ((char *)(v3 + 352) != __p + 24)
    {
      v8 = __p[47];
      if (*(char *)(v3 + 375) < 0)
      {
        if (v8 >= 0)
          v10 = __p + 24;
        else
          v10 = (char *)*((_QWORD *)__p + 3);
        if (v8 >= 0)
          v11 = __p[47];
        else
          v11 = *((_QWORD *)__p + 4);
        std::string::__assign_no_alias<false>(v7, v10, v11);
      }
      else if (__p[47] < 0)
      {
        std::string::__assign_no_alias<true>(v7, *((void **)__p + 3), *((_QWORD *)__p + 4));
      }
      else
      {
        v9 = *v6;
        *(_QWORD *)(v3 + 368) = *((_QWORD *)__p + 5);
        *(_OWORD *)v7 = v9;
      }
    }
    v12 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (__p[47] < 0)
        v6 = *(_OWORD **)v6;
      v16 = 136315138;
      v17 = v6;
      _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I PLMN2: %s", (uint8_t *)&v16, 0xCu);
    }
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
LABEL_23:
    if ((__p[47] & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (__p[47] < 0)
LABEL_24:
    operator delete(*((void **)__p + 3));
LABEL_25:
  v15 = (std::__shared_weak_count *)*((_QWORD *)__p + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  operator delete(__p);
}

void sub_1BF6B4870(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  void **v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
    {
LABEL_5:
      v7 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v7)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  operator delete(*v3);
  v7 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v7)
  {
LABEL_6:
    operator delete((void *)v1);
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_weak(v7);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setCellId_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = __p[3];
        v7 = *((_DWORD *)__p + 8);
        *(_QWORD *)(v3 + 48 * v7 + 328) = v6;
        v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109376;
          v12[1] = v7 + 1;
          v13 = 2048;
          v14 = v6;
          _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I CellId%d: %llu", (uint8_t *)v12, 0x12u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::detail::group_notify<BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0>(dispatch_group_s *,dispatch_queue_s *,BootModule::setAreaCode_sync(unsigned long long,BootModule::SimSlotIndex)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unsigned int v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  _DWORD v12[2];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
  {
    v3 = *__p;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (__p[1])
      {
        v6 = __p[3];
        v7 = *((_DWORD *)__p + 8);
        *(_QWORD *)(v3 + 48 * v7 + 336) = v6;
        v8 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v12[0] = 67109376;
          v12[1] = v7 + 1;
          v13 = 2048;
          v14 = v6;
          _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I AreaCode%d: %llu", (uint8_t *)v12, 0x12u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = (std::__shared_weak_count *)__p[2];
    if (v11)
      std::__shared_weak_count::__release_weak(v11);
  }
  operator delete(__p);
}

void dispatch::async<void ctu::SharedSynchronizable<BootModule>::execute_wrapped<BootModule::bbResetFlag(BOOL)::$_0>(BootModule::bbResetFlag(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<BootModule::bbResetFlag(BOOL)::$_0,dispatch_queue_s *::default_delete<BootModule::bbResetFlag(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(NSObject ****a1)
{
  NSObject ***v2;
  NSObject **v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int16 v14;
  __int16 v15;

  v2 = *a1;
  v3 = **a1;
  if (*((_BYTE *)*a1 + 8))
  {
    v4 = v3[52];
    if (v4)
    {
      dispatch_retain(v3[52]);
      dispatch_group_enter(v4);
    }
    v5 = v3[53];
    v3[53] = v4;
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v7 = "#I The baseband reset was detected.";
      v8 = (uint8_t *)&v15;
LABEL_12:
      _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
    }
  }
  else
  {
    v9 = v3[53];
    v3[53] = 0;
    if (v9)
    {
      dispatch_group_leave(v9);
      dispatch_release(v9);
    }
    v6 = v3[11];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v7 = "#I The baseband reset-flag is reset.";
      v8 = (uint8_t *)&v14;
      goto LABEL_12;
    }
  }
  v10 = v3[55];
  v3[55] = 0;
  if (v10)
  {
    dispatch_resume(v10);
    dispatch_release(v10);
  }
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

uint64_t __cxx_global_var_init_126_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_127_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_128_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void StatsModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13[2];
  _QWORD v14[5];
  _QWORD *v15;
  _QWORD block[6];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xE8uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v13[0] = v6;
  v13[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  StatsModule::StatsModule((uint64_t)v4, v13);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<StatsModule>::shared_ptr[abi:ne180100]<StatsModule,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1},void>(a2, v5);
  ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v10 = *a2;
  v11 = *a2 + 120;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZN11StatsModule4initEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_28;
  v14[4] = v10;
  v15 = v14;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_12_7;
  block[4] = v11;
  block[5] = &v15;
  v12 = *(NSObject **)(v10 + 136);
  if (*(_QWORD *)(v10 + 144))
    dispatch_async_and_wait(v12, block);
  else
    dispatch_sync(v12, block);
}

void sub_1BF6B4E94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void StatsModule::init(StatsModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN11StatsModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_28;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_12_7;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t StatsModule::StatsModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E791DE90;
  *(_QWORD *)(a1 + 48) = &unk_1E791DF00;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "stats.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("stats.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E791E0D0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E791E160;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E791E160;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E791DE90;
  *(_QWORD *)(a1 + 48) = &unk_1E791DF00;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  return a1;
}

void sub_1BF6B5290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF6B52CC(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void StatsModule::~StatsModule(StatsModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  uint8_t v19[16];

  *(_QWORD *)this = off_1E791DE90;
  *((_QWORD *)this + 6) = &unk_1E791DF00;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v19, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  std::__tree<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::__map_value_compare<awd::AppID,std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>,std::less<awd::AppID>,true>,std::allocator<std::__value_type<awd::AppID,std::shared_ptr<awd::AppContext>>>>::destroy(*((_QWORD **)this + 23));
  v9 = *((_QWORD *)this + 19);
  if (v9)
  {
    v10 = *((_QWORD *)this + 20);
    v11 = (void *)*((_QWORD *)this + 19);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        v10 -= 24;
      }
      while (v10 != v9);
      v11 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v9;
    operator delete(v11);
  }
  *((_QWORD *)this + 6) = off_1E791E0D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v12 = *((_QWORD *)this + 18);
  if (v12)
    dispatch_release(v12);
  v13 = *((_QWORD *)this + 17);
  if (v13)
    dispatch_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  *(_QWORD *)this = off_1E79228B8;
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    v16 = *((_QWORD *)this + 4);
    v17 = (void *)*((_QWORD *)this + 3);
    if (v16 != v15)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0)
          operator delete(*(void **)(v16 - 24));
        v16 -= 24;
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v15;
    operator delete(v17);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
}

{
  void *v1;

  StatsModule::~StatsModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'StatsModule::~StatsModule(StatsModule *this)
{
  StatsModule::~StatsModule((StatsModule *)((char *)this - 48));
}

{
  void *v1;

  StatsModule::~StatsModule((StatsModule *)((char *)this - 48));
  operator delete(v1);
}

const char *StatsModule::getName(StatsModule *this)
{
  return "stats.mod";
}

void ___ZN11StatsModule4initEv_block_invoke(uint64_t a1)
{
  StatsModule *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(StatsModule **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v3 = 0;
    _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D Initializing", v3, 2u);
    StatsModule::initializeStats_sync(v1);
  }
  else
  {
    StatsModule::initializeStats_sync(v1);
  }
}

void StatsModule::initializeStats_sync(StatsModule *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  AnalyticsHelper *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  StatsModule::addStatsToModule_sync((uint64_t)this, 0);
  StatsAWD::create((uint64_t *)&v17);
  v2 = v17;
  v17 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  *(_OWORD *)((char *)this + 200) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (AnalyticsHelper *)operator new(0x80uLL);
  AnalyticsHelper::AnalyticsHelper(v9);
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(&v17, (uint64_t)v9);
  ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v17);
  v10 = v17;
  v17 = 0uLL;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  *(_OWORD *)((char *)this + 216) = v10;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BF6B56FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
      _Unwind_Resume(exception_object);
    }
  }
  _Unwind_Resume(exception_object);
}

_BYTE *StatsModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void StatsModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[4];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN11StatsModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_3_2;
  v5 = *a3;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<StatsModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void StatsModule::initialize(uint64_t a1, NSObject **a2)
{
  uint64_t *v2;
  NSObject *v3;
  _QWORD v4[5];
  dispatch_group_t group;

  v2 = (uint64_t *)(a1 + 120);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v4[3] = &__block_descriptor_tmp_9_6;
  v3 = *a2;
  v4[4] = a1;
  group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  ctu::SharedSynchronizable<StatsModule>::execute_wrapped(v2, (uint64_t)v4);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  const void *v29;
  _QWORD aBlock[6];
  std::__shared_weak_count *v31;
  const void *v32;
  void **__dst;
  size_t v34;
  unint64_t v35;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB5E0];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v34 = v12;
    v35 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_5_7;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v31 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v32 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v32);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFB128];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB128]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v34 = v21;
    v35 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v35) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v27[0] = v16;
  v27[1] = 1174405120;
  v27[2] = ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_6;
  v27[3] = &__block_descriptor_tmp_8_6;
  v27[4] = v1;
  v27[5] = v3;
  v28 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v27);
  v29 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v29);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF6B5BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;
  const void *v31;
  std::__shared_weak_count *v33;

  if (v31)
    _Block_release(v31);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_5:
      v33 = a23;
      if (!a23)
      {
LABEL_10:
        std::__shared_weak_count::__release_weak(v30);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v33);
      std::__shared_weak_count::__release_weak(v30);
      _Unwind_Resume(a1);
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  v33 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t v12;
  void (**v13)(const void *, uint64_t, _BYTE *);
  xpc_object_t v14;
  unint64_t *v15;
  unint64_t v16;
  xpc_object_t v17;
  void (**v18)(const void *, uint64_t, _BYTE *);
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  _BYTE object[24];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v34 = v8;
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  if (!v10)
    goto LABEL_24;
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v11 = v7[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v33 = *MEMORY[0x1E0CFB5E0];
      *(_DWORD *)object = 136315138;
      *(_QWORD *)&object[4] = v33;
      _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "No input is given for %s", object, 0xCu);
      if (!*a3)
      {
LABEL_24:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_24;
    }
    v12 = xpc_null_create();
    v13 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    *(_QWORD *)object = v12;
    v14 = xpc_null_create();
    v13[2](v13, 3760250880, object);
    xpc_release(*(xpc_object_t *)object);
    xpc_release(v14);
    goto LABEL_24;
  }
  v15 = (unint64_t *)&v9->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  v17 = (xpc_object_t)*a2;
  if (v17)
  {
    xpc_retain(v17);
    v18 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
      goto LABEL_12;
  }
  else
  {
    v17 = xpc_null_create();
    v18 = (void (**)(const void *, uint64_t, _BYTE *))*a3;
    if (*a3)
    {
LABEL_12:
      v19 = _Block_copy(v18);
      v20 = (std::__shared_weak_count *)v7[16];
      if (!v20)
LABEL_31:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_16;
    }
  }
  v19 = 0;
  v20 = (std::__shared_weak_count *)v7[16];
  if (!v20)
    goto LABEL_31;
LABEL_16:
  v21 = v7[15];
  v22 = std::__shared_weak_count::lock(v20);
  if (!v22)
    goto LABEL_31;
  v23 = v22;
  v24 = operator new(0x28uLL);
  *v24 = v7;
  v24[1] = v10;
  v24[2] = v9;
  v24[3] = v17;
  v25 = xpc_null_create();
  v24[4] = v19;
  v26 = v7[17];
  v27 = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  v29 = operator new(0x18uLL);
  *v29 = v24;
  v29[1] = v21;
  v29[2] = v23;
  dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v30 = __ldaxr(v27);
  while (__stlxr(v30 - 1, v27));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  xpc_release(v25);
  v9 = v34;
  if (v34)
    goto LABEL_24;
}

void sub_1BF6B5F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11StatsModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11StatsModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11StatsModule10initializeEN8dispatch13group_sessionE_block_invoke_6(_QWORD *a1, xpc_object_t *a2, void (***a3)(const void *, uint64_t, xpc_object_t *))
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t v12;
  void (**v13)(const void *, uint64_t, xpc_object_t *);
  xpc_object_t v14;
  xpc_object_t value;
  const char *v16;
  int v17;
  size_t v18;
  xpc_object_t *v19;
  NSObject *v20;
  xpc_object_t v21;
  void (**v22)(const void *, uint64_t, xpc_object_t *);
  xpc_object_t v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t v26;
  void (**v27)(const void *, uint64_t, xpc_object_t *);
  void *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  _QWORD *v33;
  xpc_object_t v34;
  NSObject *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;
  xpc_object_t *v43;
  std::__shared_weak_count *v44;
  _BYTE v45[12];
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v44 = v8;
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  if (!v10)
    goto LABEL_40;
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v11 = v7[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v42 = (void *)*MEMORY[0x1E0CFB128];
      LODWORD(object[0]) = 136315138;
      *(xpc_object_t *)((char *)object + 4) = v42;
      _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "No input is given for %s", (uint8_t *)object, 0xCu);
      if (!*a3)
      {
LABEL_40:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v41 = __ldaxr(p_shared_owners);
        while (__stlxr(v41 - 1, p_shared_owners));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
    }
    else if (!*a3)
    {
      goto LABEL_40;
    }
    v12 = xpc_null_create();
    v13 = *a3;
    object[0] = v12;
    v14 = xpc_null_create();
    v13[2](v13, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v14);
    goto LABEL_40;
  }
  memset(object, 170, 24);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB020]);
  *(_QWORD *)v45 = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)v45 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)v45, (const object *)"", v16);
  xpc_release(*(xpc_object_t *)v45);
  v17 = SHIBYTE(object[2]);
  if (SHIBYTE(object[2]) >= 0)
    v18 = HIBYTE(object[2]);
  else
    v18 = (size_t)object[1];
  if (v18 != strlen((const char *)*MEMORY[0x1E0CFC240])
    || (SHIBYTE(object[2]) >= 0 ? (v19 = object) : (v19 = (xpc_object_t *)object[0]),
        memcmp(v19, (const void *)*MEMORY[0x1E0CFC240], v18)))
  {
    v20 = v7[11];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v43 = (xpc_object_t *)object[0];
      if (v17 >= 0)
        v43 = object;
      *(_DWORD *)v45 = 136315138;
      *(_QWORD *)&v45[4] = v43;
      _os_log_error_impl(&dword_1BF566000, v20, OS_LOG_TYPE_ERROR, "Failed: Stats get command works only abm stats. %s is not recognized.", v45, 0xCu);
      if (*a3)
        goto LABEL_21;
    }
    else if (*a3)
    {
LABEL_21:
      v21 = xpc_null_create();
      v22 = *a3;
      *(_QWORD *)v45 = v21;
      v23 = xpc_null_create();
      v22[2](v22, 3760250880, (xpc_object_t *)v45);
      xpc_release(*(xpc_object_t *)v45);
      xpc_release(v23);
    }
  }
  v24 = (unint64_t *)&v9->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = *a2;
  if (v26)
  {
    xpc_retain(v26);
    v27 = *a3;
    if (*a3)
      goto LABEL_26;
  }
  else
  {
    v26 = xpc_null_create();
    v27 = *a3;
    if (*a3)
    {
LABEL_26:
      v28 = _Block_copy(v27);
      v29 = (std::__shared_weak_count *)v7[16];
      if (!v29)
LABEL_51:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_30;
    }
  }
  v28 = 0;
  v29 = (std::__shared_weak_count *)v7[16];
  if (!v29)
    goto LABEL_51;
LABEL_30:
  v30 = v7[15];
  v31 = std::__shared_weak_count::lock(v29);
  if (!v31)
    goto LABEL_51;
  v32 = v31;
  v33 = operator new(0x28uLL);
  *v33 = v7;
  v33[1] = v10;
  v33[2] = v9;
  v33[3] = v26;
  v34 = xpc_null_create();
  v33[4] = v28;
  v35 = v7[17];
  v36 = (unint64_t *)&v32->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  v38 = operator new(0x18uLL);
  *v38 = v33;
  v38[1] = v30;
  v38[2] = v32;
  dispatch_async_f(v35, v38, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v39 = __ldaxr(v36);
  while (__stlxr(v39 - 1, v36));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  xpc_release(v34);
  if (SHIBYTE(object[2]) < 0)
    operator delete(object[0]);
  v9 = v44;
  if (v44)
    goto LABEL_40;
}

void sub_1BF6B6398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL StatsModule::reportStats_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v5;
  _BOOL8 updated;
  void *v8;

  v5 = *a3;
  v8 = v5;
  if (v5)
  {
    xpc_retain(v5);
  }
  else
  {
    v5 = xpc_null_create();
    v8 = v5;
  }
  updated = StatsModule::updateData_sync(a1, a2, &v8);
  xpc_release(v5);
  return updated;
}

void sub_1BF6B64E0(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

BOOL StatsModule::updateData_sync(uint64_t a1, int a2, void **a3)
{
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  CFTypeRef v22;
  CFTypeRef v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t *v34;
  unint64_t v35;
  CFTypeRef v36;
  void *v37;
  void *v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  _QWORD *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  _BOOL8 v54;
  CFTypeRef v55;
  void **v56;
  const __CFString *v57;
  const __CFString *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  CFTypeRef v63;
  xpc_object_t object;
  CFTypeRef v66;
  unint64_t v67;
  unint64_t v68;
  void *__p[2];
  char v70;
  CFTypeRef cf;
  CFTypeRef v72;
  _QWORD v73[2];

  cf = 0;
  v72 = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v6 = off_1ED70F558;
  if (!off_1ED70F558)
  {
    v7 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v7, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v7[3] = 0;
    v7[4] = 0;
    *((_DWORD *)v7 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v7);
    v8 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v9 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v13 = (unint64_t *)((char *)__p[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v6 = off_1ED70F558;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (a2)
  {
    qmemcpy(__p, "UNKNOWN", 7);
    v18 = 7;
    v19 = 7;
  }
  else
  {
    qmemcpy(__p, "Boot Statistics", 15);
    v18 = 15;
    v19 = 15;
  }
  *((_BYTE *)__p + v18) = 0;
  v70 = v19;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(_QWORD, uint64_t))v6, (const char *)__p, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 40));
  if (v70 < 0)
  {
    operator delete(__p[0]);
    if (!v15)
      goto LABEL_26;
  }
  else if (!v15)
  {
    goto LABEL_26;
  }
  v20 = (unint64_t *)&v15->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
  {
LABEL_26:
    v22 = cf;
    if (!cf)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  v22 = cf;
  if (cf)
LABEL_27:
    CFRetain(v22);
LABEL_28:
  v23 = v72;
  v72 = v22;
  if (v23)
    CFRelease(v23);
  v25 = (uint64_t **)(a1 + 184);
  v24 = *(uint64_t **)(a1 + 184);
  v67 = 0xAAAAAAAAAAAAAAAALL;
  v68 = 0xAAAAAAAAAAAAAAAALL;
  if (!v24)
  {
    v26 = (uint64_t *)(a1 + 184);
LABEL_37:
    v28 = operator new(0x38uLL);
    *((_DWORD *)v28 + 8) = a2;
    *((_QWORD *)v28 + 5) = 0;
    *((_QWORD *)v28 + 6) = 0;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 2) = v26;
    *v25 = (uint64_t *)v28;
    v29 = **(_QWORD **)(a1 + 176);
    v30 = (uint64_t *)v28;
    if (v29)
    {
      *(_QWORD *)(a1 + 176) = v29;
      v30 = *v25;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v30);
    ++*(_QWORD *)(a1 + 192);
    v32 = *((_QWORD *)v28 + 5);
    v31 = (std::__shared_weak_count *)*((_QWORD *)v28 + 6);
    v67 = v32;
    v68 = (unint64_t)v31;
    if (!v31)
      goto LABEL_46;
LABEL_44:
    v34 = (unint64_t *)&v31->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    goto LABEL_46;
  }
  while (1)
  {
    while (1)
    {
      v26 = v24;
      v27 = *((_DWORD *)v24 + 8);
      if (v27 <= a2)
        break;
      v24 = (uint64_t *)*v26;
      v25 = (uint64_t **)v26;
      if (!*v26)
        goto LABEL_37;
    }
    if (v27 >= a2)
      break;
    v24 = (uint64_t *)v26[1];
    if (!v24)
    {
      v25 = (uint64_t **)(v26 + 1);
      goto LABEL_37;
    }
  }
  v33 = v26 + 5;
  v32 = v26[5];
  v31 = (std::__shared_weak_count *)v33[1];
  v67 = v32;
  v68 = (unint64_t)v31;
  if (v31)
    goto LABEL_44;
LABEL_46:
  if (!v32)
    goto LABEL_77;
  v36 = v72;
  v66 = v72;
  if (v72)
    CFRetain(v72);
  v37 = *a3;
  object = v37;
  if (v37)
    xpc_retain(v37);
  else
    object = xpc_null_create();
  (*(void (**)(void **__return_ptr, unint64_t, CFTypeRef *, xpc_object_t *))(*(_QWORD *)v32 + 56))(__p, v32, &v66, &object);
  v38 = __p[0];
  v72 = __p[0];
  __p[0] = 0;
  if (v36)
  {
    CFRelease(v36);
    if (__p[0])
      CFRelease(__p[0]);
  }
  xpc_release(object);
  object = 0;
  if (v66)
    CFRelease(v66);
  v39 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v38)
    v39 = 0;
  if (!v39)
  {
LABEL_77:
    v54 = 0;
    if (!v31)
      goto LABEL_96;
    goto LABEL_93;
  }
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v40 = off_1ED70F558;
  if (!off_1ED70F558)
  {
    v41 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v41, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v41[3] = 0;
    v41[4] = 0;
    *((_DWORD *)v41 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v41);
    v42 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v43 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v42;
    if (v43)
    {
      v44 = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v46 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v47 = (unint64_t *)((char *)__p[1] + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v40 = off_1ED70F558;
  }
  v49 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v50 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (a2)
  {
    qmemcpy(__p, "UNKNOWN", 7);
    v52 = 7;
    v53 = 7;
  }
  else
  {
    qmemcpy(__p, "Boot Statistics", 15);
    v52 = 15;
    v53 = 15;
  }
  *((_BYTE *)__p + v52) = 0;
  v70 = v53;
  v55 = v72;
  os_unfair_lock_lock((os_unfair_lock_t)(v40 + 40));
  if (v70 >= 0)
    v56 = __p;
  else
    v56 = (void **)__p[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v73, (const char *)v56);
  v57 = (const __CFString *)v73[0];
  v73[1] = v55;
  if (v55)
  {
    CFRetain(v55);
    v58 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(v57, v55, *(CFStringRef *)(v40 + 8), *(CFStringRef *)(v40 + 16), (CFStringRef)*MEMORY[0x1E0C9B250]);
    v54 = CFPreferencesSynchronize(*(CFStringRef *)(v40 + 8), *(CFStringRef *)(v40 + 16), v58) != 0;
    CFRelease(v55);
    MEMORY[0x1C3B8B878](v73);
    os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 40));
    if ((v70 & 0x80000000) == 0)
      goto LABEL_85;
LABEL_88:
    operator delete(__p[0]);
    if (!v49)
      goto LABEL_92;
LABEL_89:
    v59 = (unint64_t *)&v49->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      v31 = (std::__shared_weak_count *)v68;
      if (!v68)
        goto LABEL_96;
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  v54 = 0;
  MEMORY[0x1C3B8B878](v73);
  os_unfair_lock_unlock((os_unfair_lock_t)(v40 + 40));
  if (v70 < 0)
    goto LABEL_88;
LABEL_85:
  if (v49)
    goto LABEL_89;
LABEL_92:
  v31 = (std::__shared_weak_count *)v68;
  if (!v68)
    goto LABEL_96;
LABEL_93:
  v61 = (unint64_t *)&v31->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v63 = v72;
    if (!v72)
      return v54;
    goto LABEL_97;
  }
LABEL_96:
  v63 = v72;
  if (v72)
LABEL_97:
    CFRelease(v63);
  return v54;
}

void sub_1BF6B6B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
  void *v21;

  operator delete(v21);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

void sub_1BF6B6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void StatsModule::getAllStats_sync(StatsModule *this@<X0>, CFMutableDictionaryRef *a2@<X8>)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  StatsModule *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  const __CFAllocator *v22;
  unint64_t *v23;
  unint64_t v24;
  const void *v25;
  uint64_t v26;
  char v27;
  __CFDictionary *v28;
  const void *v29;
  StatsModule *v30;
  StatsModule *v31;
  BOOL v32;
  CFTypeID v33;
  uint64_t v34;
  void *__p[2];
  char v36;
  const void *v37;
  __CFDictionary *v38;
  const void *v39;
  const void *v40;

  v38 = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = Mutable;
  if (Mutable)
    v38 = Mutable;
  v7 = (StatsModule *)*((_QWORD *)this + 22);
  if (v7 != (StatsModule *)((char *)this + 184))
  {
    v34 = *MEMORY[0x1E0C9B260];
    while (1)
    {
      v37 = 0;
      pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
      v8 = off_1ED70F558;
      if (off_1ED70F558)
      {
        v9 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
        if (*(&off_1ED70F558 + 1))
          goto LABEL_20;
        goto LABEL_22;
      }
      v10 = operator new(0x30uLL);
      MEMORY[0x1C3B8B8C0](v10, CFSTR("com.apple.AppleBasebandManager.data"), v34);
      v10[3] = 0;
      v10[4] = 0;
      *((_DWORD *)v10 + 10) = 0;
      std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v10);
      v11 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v12 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
      off_1ED70F558 = v11;
      if (!v12)
        goto LABEL_13;
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
        v15 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_19;
      }
      else
      {
LABEL_13:
        v15 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_19;
      }
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
LABEL_19:
      v8 = off_1ED70F558;
      v9 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
      if (*(&off_1ED70F558 + 1))
      {
LABEL_20:
        v18 = (unint64_t *)&v9->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
LABEL_22:
      pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
      if (*((_DWORD *)v7 + 8))
      {
        qmemcpy(__p, "UNKNOWN", 7);
        v20 = 7;
        v21 = 7;
      }
      else
      {
        qmemcpy(__p, "Boot Statistics", 15);
        v20 = 15;
        v21 = 15;
      }
      *((_BYTE *)__p + v20) = 0;
      v36 = v21;
      os_unfair_lock_lock((os_unfair_lock_t)(v8 + 40));
      Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(_QWORD, uint64_t))v8, (const char *)__p, &v37);
      os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 40));
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if (!v9)
          goto LABEL_32;
      }
      else if (!v9)
      {
        goto LABEL_32;
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (v24)
      {
LABEL_32:
        v25 = v37;
        if (!v37)
          goto LABEL_43;
        goto LABEL_33;
      }
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v25 = v37;
      if (!v37)
        goto LABEL_43;
LABEL_33:
      if (*((_DWORD *)v7 + 8))
      {
        qmemcpy(__p, "UNKNOWN", 7);
        v26 = 7;
        v27 = 7;
      }
      else
      {
        qmemcpy(__p, "Boot Statistics", 15);
        v26 = 15;
        v27 = 15;
      }
      *((_BYTE *)__p + v26) = 0;
      v36 = v27;
      v28 = v38;
      v40 = 0;
      ctu::cf::convert_copy((ctu::cf *)&v40, (const __CFString **)__p, (const char *)0x8000100, v4, v22);
      v29 = v40;
      v39 = v40;
      v40 = v25;
      CFRetain(v25);
      if (v29)
        CFDictionaryAddValue(v28, v29, v25);
      CFRelease(v25);
      if (v29)
        CFRelease(v29);
      if ((v36 & 0x80000000) == 0)
      {
LABEL_43:
        v30 = (StatsModule *)*((_QWORD *)v7 + 1);
        if (!v30)
          goto LABEL_47;
        goto LABEL_44;
      }
      operator delete(__p[0]);
      v30 = (StatsModule *)*((_QWORD *)v7 + 1);
      if (!v30)
      {
        do
        {
LABEL_47:
          v31 = (StatsModule *)*((_QWORD *)v7 + 2);
          v32 = *(_QWORD *)v31 == (_QWORD)v7;
          v7 = v31;
        }
        while (!v32);
        goto LABEL_5;
      }
      do
      {
LABEL_44:
        v31 = v30;
        v30 = *(StatsModule **)v30;
      }
      while (v30);
LABEL_5:
      v7 = v31;
      if (v31 == (StatsModule *)((char *)this + 184))
      {
        v6 = v38;
        break;
      }
    }
  }
  if (v6 && (v33 = CFGetTypeID(v6), v33 == CFDictionaryGetTypeID()))
  {
    *a2 = v6;
    CFRetain(v6);
  }
  else
  {
    *a2 = 0;
    if (!v6)
      return;
  }
  CFRelease(v6);
}

void sub_1BF6B702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void StatsModule::addStatsToModule_sync(uint64_t a1, int a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  int v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  uint64_t v15;
  char v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  char v26;
  void *v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  v28 = 0;
  Stats::create(a2, __p);
  v4 = __p[0];
  v5 = (std::__shared_weak_count *)__p[1];
  v27 = __p[0];
  v28 = (std::__shared_weak_count *)__p[1];
  if (__p[0])
  {
    v6 = *((_DWORD *)__p[0] + 26);
    v8 = (uint64_t **)(a1 + 184);
    v7 = *(uint64_t **)(a1 + 184);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v9 = (uint64_t **)v7;
          v10 = *((_DWORD *)v7 + 8);
          if (v6 >= v10)
            break;
          v7 = *v9;
          v8 = v9;
          if (!*v9)
            goto LABEL_9;
        }
        if (v10 >= v6)
          break;
        v7 = v9[1];
        if (!v7)
        {
          v8 = v9 + 1;
          goto LABEL_9;
        }
      }
      v11 = v9;
      if (!__p[1])
        goto LABEL_19;
    }
    else
    {
      v9 = (uint64_t **)(a1 + 184);
LABEL_9:
      v11 = operator new(0x38uLL);
      *((_DWORD *)v11 + 8) = v6;
      *((_QWORD *)v11 + 5) = 0;
      *((_QWORD *)v11 + 6) = 0;
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = v9;
      *v8 = (uint64_t *)v11;
      v12 = **(_QWORD **)(a1 + 176);
      v13 = (uint64_t *)v11;
      if (v12)
      {
        *(_QWORD *)(a1 + 176) = v12;
        v13 = *v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 184), v13);
      ++*(_QWORD *)(a1 + 192);
      v4 = v27;
      v5 = v28;
      if (!v28)
        goto LABEL_19;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
LABEL_19:
    v19 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
    *((_QWORD *)v11 + 5) = v4;
    *((_QWORD *)v11 + 6) = v5;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    goto LABEL_24;
  }
  v14 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    if (a2)
    {
      qmemcpy(__p, "UNKNOWN", 7);
      v15 = 7;
      v16 = 7;
    }
    else
    {
      qmemcpy(__p, "Boot Statistics", 15);
      v15 = 15;
      v16 = 15;
    }
    *((_BYTE *)__p + v15) = 0;
    v26 = v16;
    *(_DWORD *)buf = 136315138;
    v30 = __p;
    _os_log_error_impl(&dword_1BF566000, v14, OS_LOG_TYPE_ERROR, "Failed to create stats of %s", buf, 0xCu);
    if (v26 < 0)
      operator delete(__p[0]);
  }
LABEL_24:
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BF6B7320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF6B7334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void StatsModule::updateAnalyticsData_sync(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v3;
  NSObject *v4;
  xpc_object_t object;
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 216);
  if (v2)
  {
    v3 = *a2;
    object = v3;
    if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
      xpc_retain(v3);
    else
      object = xpc_null_create();
    AnalyticsHelper::updateData(v2, &object);
    xpc_release(object);
  }
  else
  {
    v4 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "Analytics object has not created yet", buf, 2u);
    }
  }
}

void sub_1BF6B7418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791E0D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791E0D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF6B7668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF6B7684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<StatsModule>::shared_ptr[abi:ne180100]<StatsModule,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791E110;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF6B77A0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF6B77C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<StatsModule *,std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule *)#1},std::allocator<StatsModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11StatsModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<StatsModule> ctu::SharedSynchronizable<StatsModule>::make_shared_ptr<StatsModule>(StatsModule*)::{lambda(StatsModule*)#1}::operator() const(StatsModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791E0D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<StatsModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791E0D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<StatsModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791E1B8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11StatsModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11StatsModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  xpc_object_t value;
  xpc_object_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  xpc_object_t v12;
  const char *v13;
  int v14;
  size_t v15;
  void **v16;
  void **v17;
  void **v18;
  uint64_t v19;
  xpc_object_t v20;
  uint64_t v21;
  xpc_object_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  int v29;
  xpc_object_t v30;
  int v31;
  xpc_object_t v32;
  uint64_t v33;
  xpc_object_t object;
  void *__p[4];

  v2 = *a1;
  v33 = v2;
  v3 = *(_QWORD *)v2;
  v4 = (const char *)*MEMORY[0x1E0CFB020];
  if (xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB020]))
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB018]);
    v6 = value;
    if (value)
      xpc_retain(value);
    else
      v6 = xpc_null_create();
    v9 = MEMORY[0x1C3B8CD78](v6);
    v10 = MEMORY[0x1E0C812F8];
    if (v9 != MEMORY[0x1E0C812F8] && MEMORY[0x1C3B8CD78](v6) != MEMORY[0x1E0C812C8])
    {
      v11 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Data type should be dictionary/array", (uint8_t *)__p, 2u);
      }
      v8 = 0;
      goto LABEL_36;
    }
    memset(__p, 170, 24);
    v12 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), v4);
    object = v12;
    if (v12)
      xpc_retain(v12);
    else
      object = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v13);
    xpc_release(object);
    v14 = SHIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0)
      v15 = HIBYTE(__p[2]);
    else
      v15 = (size_t)__p[1];
    if (v15 != strlen((const char *)*MEMORY[0x1E0CFC240])
      || (SHIBYTE(__p[2]) >= 0 ? (v16 = __p) : (v16 = (void **)__p[0]),
          memcmp(v16, (const void *)*MEMORY[0x1E0CFC240], v15)))
    {
      if (v15 == strlen((const char *)*MEMORY[0x1E0CFC190])
        && (v14 >= 0 ? (v17 = __p) : (v17 = (void **)__p[0]), !memcmp(v17, (const void *)*MEMORY[0x1E0CFC190], v15)))
      {
        v27 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB0E8]);
        object = v27;
        if (v27)
          xpc_retain(v27);
        else
          object = xpc_null_create();
        v31 = xpc::dyn_cast_or_default((xpc *)&object, 0);
        xpc_release(object);
        object = v6;
        if (v6)
        {
          xpc_retain(v6);
          v32 = v6;
        }
        else
        {
          v32 = xpc_null_create();
          object = v32;
        }
        StatsModule::reportAWD_sync(v3, v31, &object);
        xpc_release(v32);
      }
      else
      {
        if (v15 != strlen((const char *)*MEMORY[0x1E0CFAFE8])
          || (v14 >= 0 ? (v18 = __p) : (v18 = (void **)__p[0]), memcmp(v18, (const void *)*MEMORY[0x1E0CFAFE8], v15)))
        {
          v8 = 0;
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
          {
LABEL_36:
            xpc_release(v6);
            goto LABEL_37;
          }
LABEL_35:
          operator delete(__p[0]);
          goto LABEL_36;
        }
        object = v6;
        if (v6)
        {
          xpc_retain(v6);
          v28 = v6;
        }
        else
        {
          v28 = xpc_null_create();
          object = v28;
        }
        StatsModule::updateAnalyticsData_sync(v3, &object);
        xpc_release(v28);
      }
      object = 0;
      v8 = 1;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_36;
      goto LABEL_35;
    }
    v26 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB0E8]);
    object = v26;
    if (v26)
      xpc_retain(v26);
    else
      object = xpc_null_create();
    v29 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
    object = v6;
    if (v6 && MEMORY[0x1C3B8CD78](v6) == v10)
    {
      xpc_retain(v6);
      v30 = v6;
    }
    else
    {
      v30 = xpc_null_create();
      object = v30;
    }
    v8 = StatsModule::reportStats_sync(v3, v29, &object);
    xpc_release(v30);
    object = 0;
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
  v7 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Stats type is missing!", (uint8_t *)__p, 2u);
  }
  v8 = 0;
LABEL_37:
  if (*(_QWORD *)(v2 + 32))
  {
    if (v8)
      v19 = 0;
    else
      v19 = 3760250880;
    v20 = xpc_null_create();
    v21 = *(_QWORD *)(v2 + 32);
    __p[0] = v20;
    v22 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v21 + 16))(v21, v19, __p);
    xpc_release(__p[0]);
    xpc_release(v22);
  }
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(&v33);
  v23 = (std::__shared_weak_count *)a1[2];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(a1);
}

void sub_1BF6B7F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  void *v17;
  void *v18;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;

  xpc_release(v18);
  object = 0;
  if (a16 < 0)
    operator delete(__p);
  xpc_release(v17);
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(&a9);
  v20 = (std::__shared_weak_count *)v16[2];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb0_E3__0NS_14default_deleteIS4_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11StatsModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t *a1)
{
  uint64_t v2;
  StatsModule *v3;
  const char *v4;
  xpc_object_t value;
  const void *v6;
  xpc_object_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  NSObject *v28;
  xpc_object_t v29;
  uint64_t v30;
  xpc_object_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  xpc_object_t object[2];
  char v37;
  CFTypeRef cf;

  v2 = *a1;
  v35 = v2;
  v3 = *(StatsModule **)v2;
  v4 = (const char *)*MEMORY[0x1E0CFB0E8];
  if (!xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB0E8]))
  {
    StatsModule::getAllStats_sync(v3, (CFMutableDictionaryRef *)object);
    v7 = object[0];
    goto LABEL_32;
  }
  value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), v4);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v8 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v9 = off_1ED70F558;
  if (!off_1ED70F558)
  {
    v10 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v10, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v10[3] = 0;
    v10[4] = 0;
    *((_DWORD *)v10 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(object, (uint64_t)v10);
    v11 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v12 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)object[1];
    if (object[1])
    {
      v16 = (unint64_t *)((char *)object[1] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v9 = off_1ED70F558;
  }
  v18 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v19 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  if (v8)
  {
    qmemcpy(object, "UNKNOWN", 7);
    v21 = 7;
    v22 = 7;
  }
  else
  {
    qmemcpy(object, "Boot Statistics", 15);
    v21 = 15;
    v22 = 15;
  }
  *((_BYTE *)object + v21) = 0;
  v37 = v22;
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(_QWORD, uint64_t))v9, (const char *)object, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 40));
  if (v37 < 0)
    operator delete(object[0]);
  if (!v18)
    goto LABEL_30;
  v23 = (unint64_t *)&v18->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_30:
    v7 = (xpc_object_t)cf;
    if (!cf)
      goto LABEL_32;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
  std::__shared_weak_count::__release_weak(v18);
  v7 = (xpc_object_t)cf;
  if (cf)
LABEL_31:
    CFRetain(v7);
LABEL_32:
  v26 = *(_QWORD *)(v2 + 32);
  v25 = (uint64_t *)(v2 + 32);
  if (v26)
  {
    v27 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v7)
      v27 = 0;
    if (v27)
    {
      LODWORD(cf) = 0;
      ctu::cf_to_xpc((ctu *)v7, v6);
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(v25, (unsigned int *)&cf, object);
      xpc_release(object[0]);
    }
    else
    {
      v28 = *((_QWORD *)v3 + 11);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object[0]) = 0;
        _os_log_error_impl(&dword_1BF566000, v28, OS_LOG_TYPE_ERROR, "Failed to get data.", (uint8_t *)object, 2u);
      }
      v29 = xpc_null_create();
      v30 = *v25;
      object[0] = v29;
      v31 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v30 + 16))(v30, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v31);
    }
  }
  if (v7)
    CFRelease(v7);
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb1_E3__1NS_14default_deleteIS4_EEED1B8ne180100Ev(&v35);
  v32 = (std::__shared_weak_count *)a1[2];
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  operator delete(a1);
}

void sub_1BF6B8508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  _QWORD *v11;
  void *v12;
  const void *v13;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  xpc_release(object);
  xpc_release(v12);
  if (v13)
    CFRelease(v13);
  _ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb1_E3__1NS_14default_deleteIS4_EEED1B8ne180100Ev(&a10);
  v15 = (std::__shared_weak_count *)v11[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN11StatsModule10initializeEN8dispatch13group_sessionEEUb_EUb1_E3__1NS_14default_deleteIS4_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

const char *CPMSModule::getName(CPMSModule *this)
{
  return "cpms.mod";
}

void CPMSModule::create(capabilities::abs *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  NSObject *v34;
  unsigned __int8 v35;
  NSObject *v36;
  uint64_t v37[2];
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint8_t buf[8];
  std::__shared_weak_count *v43;

  if (capabilities::abs::getCPMSVariant(a1) != 1)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v36 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_44:
        *a2 = 0;
        a2[1] = 0;
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v36 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_44;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v36, OS_LOG_TYPE_DEFAULT, "User-space CPMS not supported!", buf, 2u);
    goto LABEL_44;
  }
  *a2 = 0;
  a2[1] = 0;
  v4 = operator new(0x1B8uLL);
  v5 = v4;
  v6 = *(_QWORD *)a1;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v37[0] = v6;
  v37[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  CPMSModule::CPMSModule((uint64_t)v4, v37);
  v38 = v5;
  v39 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E791E5F0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v39 = (unint64_t)v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 16);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_17;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v20 = v38;
    if (!v38[13])
      goto LABEL_33;
    goto LABEL_18;
  }
LABEL_17:
  v20 = v38;
  if (!v38[13])
    goto LABEL_33;
LABEL_18:
  v21 = (std::__shared_weak_count *)v20[16];
  if (!v21 || (v22 = v20[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  *(_QWORD *)buf = v22;
  v43 = v23;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v20 + 7));
  v25 = v22 + 48;
  if (!v22)
    v25 = 0;
  v40 = v25;
  v41 = v24;
  *(_QWORD *)buf = 0;
  v43 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v26 = v41;
  if (v41)
  {
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v43;
  if (v43)
  {
    v30 = (unint64_t *)&v43->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v20 = v38;
LABEL_33:
  v32 = v39;
  *a2 = v20;
  a2[1] = v32;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  if (!v20)
  {
    if ((v33 & 1) == 0)
    {
      {
        GetOsLogContext(void)::sOsLogContext = 0;
        qword_1ED70F6F8 = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
      }
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v34 = qword_1ED70F6F8;
      if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_39:
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v34, OS_LOG_TYPE_DEFAULT, "Failed to create CPMS Module!", buf, 2u);
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v34 = qword_1ED70F6F8;
      if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_39;
    }
  }
}

void sub_1BF6B8AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void sub_1BF6B8B04(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule*)#1}::operator() const(CPMSModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF6B8B24()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF6B8B60);
}

void sub_1BF6B8B34()
{
  JUMPOUT(0x1BF6B8B64);
}

void sub_1BF6B8B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t CPMSModule::CPMSModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _BYTE v21[16];
  _QWORD block[5];
  _BYTE v23[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E791CA70;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E791CA70;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E791E1F8;
  *(_QWORD *)(a1 + 48) = &unk_1E791E268;
  v9 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v21, "com.apple.telephony.abm", "cpms.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v12 = GetABMLogServer(void)::sLogServer;
    v11 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("cpms.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v16);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    dispatch_retain(v16);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v16);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E791E5B0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
    *v9 = off_1E791E640;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
    *v9 = off_1E791E640;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v21);
  *(_QWORD *)a1 = off_1E791E1F8;
  *(_QWORD *)(a1 + 48) = &unk_1E791E268;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 229) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 304) = a1 + 312;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = a1 + 408;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = TelephonyBasebandCreateController();
  return a1;
}

void sub_1BF6B8F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  Service *v11;
  uint64_t v12;
  uint64_t v13;
  PowerBudget *v14;
  uint64_t v15;
  PowerBudget *v16;
  PowerBudget *v17;
  PowerBudget *v18;
  PowerBudget *v19;
  PowerBudget *v20;
  PowerBudget *v21;
  uint64_t v23;
  uint64_t v24;

  v24 = v12;
  v21 = v16;
  PowerBudget::~PowerBudget(v20);
  PowerBudget::~PowerBudget(v19);
  PowerBudget::~PowerBudget(v18);
  PowerBudget::~PowerBudget(v17);
  PowerBudget::~PowerBudget(v14);
  PowerBudget::~PowerBudget(v21);
  v23 = *((_QWORD *)v11 + 28);
  *((_QWORD *)v11 + 28) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13);
  ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(a11);
  Service::~Service(v11);
  _Unwind_Resume(a1);
}

void sub_1BF6B8FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  Service *v4;
  _QWORD *v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va3;

  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v4);
  _Unwind_Resume(a1);
}

void sub_1BF6B9014(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791E5B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791E5B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void CPMSModule::~CPMSModule(CPMSModule *this)
{
  NSObject *v2;
  const void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint8_t v22[16];

  *(_QWORD *)this = off_1E791E1F8;
  *((_QWORD *)this + 6) = &unk_1E791E268;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v22, 2u);
  }
  v3 = (const void *)*((_QWORD *)this + 54);
  if (v3)
    CFRelease(v3);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 400, *((_QWORD **)this + 51));
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 50) = (char *)this + 408;

  *((_QWORD *)this + 53) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 400, *((_QWORD **)this + 51));
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 50) = (char *)this + 408;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;

  *((_QWORD *)this + 49) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 46) = (char *)this + 376;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 336, *((_QWORD **)this + 43));
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = (char *)this + 344;

  *((_QWORD *)this + 45) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 336, *((_QWORD **)this + 43));
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 42) = (char *)this + 344;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;

  *((_QWORD *)this + 41) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = (char *)this + 312;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 34) = (char *)this + 280;

  *((_QWORD *)this + 37) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  v4 = (_QWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 34) = (char *)this + 280;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 240, v4);
  *((_QWORD *)this + 30) = (char *)this + 248;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;

  *((_QWORD *)this + 33) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 240, *((_QWORD **)this + 31));
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = (char *)this + 248;
  v5 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *((_QWORD *)this + 6) = off_1E791E5B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v15 = *((_QWORD *)this + 18);
  if (v15)
    dispatch_release(v15);
  v16 = *((_QWORD *)this + 17);
  if (v16)
    dispatch_release(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  *(_QWORD *)this = off_1E79228B8;
  v18 = *((_QWORD *)this + 3);
  if (v18)
  {
    v19 = *((_QWORD *)this + 4);
    v20 = (void *)*((_QWORD *)this + 3);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v18;
    operator delete(v20);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

{
  void *v1;

  CPMSModule::~CPMSModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'CPMSModule::~CPMSModule(CPMSModule *this)
{
  CPMSModule::~CPMSModule((CPMSModule *)((char *)this - 48));
}

{
  void *v1;

  CPMSModule::~CPMSModule((CPMSModule *)((char *)this - 48));
  operator delete(v1);
}

void CPMSModule::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CPMSModule>::execute_wrapped<CPMSModule::shutdown(dispatch::group_session)::$_0>(CPMSModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CPMSModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CPMSModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void CPMSModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[5];
  dispatch_group_t group;
  _QWORD block[6];
  std::__shared_weak_count *v19;

  v3 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v16[3] = &__block_descriptor_48_e8_40c30_ZTSN8dispatch13group_sessionE_e5_v8__0l;
  v4 = *a2;
  v16[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = a1[17];
  block[0] = v3;
  block[1] = 3321888768;
  block[2] = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791E6D8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  block[5] = v6;
  v19 = v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  block[4] = v16;
  dispatch_async(v9, block);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  CommandDriverFactory *v10;
  const void *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void *v38;
  const void *v39;
  size_t v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  void *v46;
  const void *v47;
  size_t v48;
  size_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  const void *v55;
  size_t v56;
  size_t v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  const void *v63;
  size_t v64;
  size_t v65;
  _BYTE *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  unsigned __int8 v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  _QWORD *v89;
  NSObject *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  NSObject *v96;
  NSObject *v97;
  NSObject *v98;
  __int128 v99;
  _QWORD v100[6];
  std::__shared_weak_count *v101;
  const void *v102;
  _QWORD v103[6];
  std::__shared_weak_count *v104;
  const void *v105;
  _QWORD v106[6];
  std::__shared_weak_count *v107;
  const void *v108;
  _QWORD v109[6];
  std::__shared_weak_count *v110;
  const void *v111;
  _QWORD aBlock[6];
  std::__shared_weak_count *v113;
  const void *v114[2];
  std::__shared_weak_count *v115;
  __int128 v116;
  _BYTE __dst[24];
  const char *v118;
  __int128 *v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v11 = (const void *)off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v10);
    v12 = *(_OWORD *)__dst;
    *(_OWORD *)__dst = 0uLL;
    v13 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v12;
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (*(_QWORD *)&__dst[8])
    {
      v16 = (unint64_t *)(*(_QWORD *)&__dst[8] + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&__dst[8] + 16))(*(_QWORD *)&__dst[8]);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__dst[8]);
      }
    }
    v11 = (const void *)off_1ED70F4D0;
  }
  v114[1] = v11;
  v115 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v18 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(__int128 *__return_ptr, const void *))(*(_QWORD *)v11 + 104))(&v116, v11);
  v20 = v116;
  v116 = 0uLL;
  v21 = *(std::__shared_weak_count **)(v1 + 200);
  *(_OWORD *)(v1 + 192) = v20;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (!*((_QWORD *)&v116 + 1))
    goto LABEL_33;
  v25 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    v27 = v115;
    if (!v115)
      goto LABEL_37;
  }
  else
  {
LABEL_33:
    v27 = v115;
    if (!v115)
      goto LABEL_37;
  }
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (v29)
  {
LABEL_37:
    if (*(_QWORD *)(v1 + 192))
      goto LABEL_38;
LABEL_153:
    v97 = *(NSObject **)(v1 + 88);
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__dst = 0;
      _os_log_error_impl(&dword_1BF566000, v97, OS_LOG_TYPE_ERROR, "Failed to create CPMS Command Driver", __dst, 2u);
    }
    goto LABEL_155;
  }
  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
  std::__shared_weak_count::__release_weak(v27);
  if (!*(_QWORD *)(v1 + 192))
    goto LABEL_153;
LABEL_38:
  v30 = (const void *)*MEMORY[0x1E0CFB188];
  v31 = strlen((const char *)*MEMORY[0x1E0CFB188]);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v34 = v31 | 7;
    v35 = v34 + 1;
    v33 = operator new(v34 + 1);
    *(_QWORD *)&__dst[8] = v32;
    *(_QWORD *)&__dst[16] = v35 | 0x8000000000000000;
    *(_QWORD *)__dst = v33;
  }
  else
  {
    __dst[23] = v31;
    v33 = __dst;
    if (!v31)
      goto LABEL_46;
  }
  memmove(v33, v30, v32);
LABEL_46:
  v33[v32] = 0;
  v36 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v113 = v5;
  do
    v37 = __ldxr(p_shared_weak_owners);
  while (__stxr(v37 + 1, p_shared_weak_owners));
  v38 = _Block_copy(aBlock);
  v114[0] = v38;
  Service::registerCommandHandler(v1, (uint64_t)__dst, v114);
  if (v38)
    _Block_release(v38);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v39 = (const void *)*MEMORY[0x1E0CFBD60];
  v40 = strlen((const char *)*MEMORY[0x1E0CFBD60]);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    *(_QWORD *)&__dst[8] = v41;
    *(_QWORD *)&__dst[16] = v44 | 0x8000000000000000;
    *(_QWORD *)__dst = v42;
  }
  else
  {
    __dst[23] = v40;
    v42 = __dst;
    if (!v40)
      goto LABEL_60;
  }
  memmove(v42, v39, v41);
LABEL_60:
  v42[v41] = 0;
  v109[0] = v36;
  v109[1] = 3321888768;
  v109[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_5;
  v109[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v109[4] = v1;
  v109[5] = v3;
  v110 = v5;
  do
    v45 = __ldxr(p_shared_weak_owners);
  while (__stxr(v45 + 1, p_shared_weak_owners));
  v46 = _Block_copy(v109);
  v111 = v46;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v111);
  if (v46)
    _Block_release(v46);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v47 = (const void *)*MEMORY[0x1E0CFB568];
  v48 = strlen((const char *)*MEMORY[0x1E0CFB568]);
  if (v48 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v49 = v48;
  if (v48 >= 0x17)
  {
    v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v48 | 7) != 0x17)
      v51 = v48 | 7;
    v52 = v51 + 1;
    v50 = operator new(v51 + 1);
    *(_QWORD *)&__dst[8] = v49;
    *(_QWORD *)&__dst[16] = v52 | 0x8000000000000000;
    *(_QWORD *)__dst = v50;
  }
  else
  {
    __dst[23] = v48;
    v50 = __dst;
    if (!v48)
      goto LABEL_74;
  }
  memmove(v50, v47, v49);
LABEL_74:
  v50[v49] = 0;
  v106[0] = v36;
  v106[1] = 3321888768;
  v106[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  v106[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v106[4] = v1;
  v106[5] = v3;
  v107 = v5;
  do
    v53 = __ldxr(p_shared_weak_owners);
  while (__stxr(v53 + 1, p_shared_weak_owners));
  v54 = _Block_copy(v106);
  v108 = v54;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v108);
  if (v54)
    _Block_release(v54);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v55 = (const void *)*MEMORY[0x1E0CFB110];
  v56 = strlen((const char *)*MEMORY[0x1E0CFB110]);
  if (v56 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v57 = v56;
  if (v56 >= 0x17)
  {
    v59 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v56 | 7) != 0x17)
      v59 = v56 | 7;
    v60 = v59 + 1;
    v58 = operator new(v59 + 1);
    *(_QWORD *)&__dst[8] = v57;
    *(_QWORD *)&__dst[16] = v60 | 0x8000000000000000;
    *(_QWORD *)__dst = v58;
  }
  else
  {
    __dst[23] = v56;
    v58 = __dst;
    if (!v56)
      goto LABEL_88;
  }
  memmove(v58, v55, v57);
LABEL_88:
  v58[v57] = 0;
  v103[0] = v36;
  v103[1] = 3321888768;
  v103[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
  v103[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v103[4] = v1;
  v103[5] = v3;
  v104 = v5;
  do
    v61 = __ldxr(p_shared_weak_owners);
  while (__stxr(v61 + 1, p_shared_weak_owners));
  v62 = _Block_copy(v103);
  v105 = v62;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v105);
  if (v62)
    _Block_release(v62);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  v63 = (const void *)*MEMORY[0x1E0CFB0B8];
  v64 = strlen((const char *)*MEMORY[0x1E0CFB0B8]);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v65 = v64;
  if (v64 >= 0x17)
  {
    v67 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v67 = v64 | 7;
    v68 = v67 + 1;
    v66 = operator new(v67 + 1);
    *(_QWORD *)&__dst[8] = v65;
    *(_QWORD *)&__dst[16] = v68 | 0x8000000000000000;
    *(_QWORD *)__dst = v66;
  }
  else
  {
    __dst[23] = v64;
    v66 = __dst;
    if (!v64)
      goto LABEL_102;
  }
  memmove(v66, v63, v65);
LABEL_102:
  v66[v65] = 0;
  v100[0] = v36;
  v100[1] = 3321888768;
  v100[2] = ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_4;
  v100[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v100[4] = v1;
  v100[5] = v3;
  v101 = v5;
  do
    v69 = __ldxr(p_shared_weak_owners);
  while (__stxr(v69 + 1, p_shared_weak_owners));
  v70 = _Block_copy(v100);
  v102 = v70;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v102);
  if (v70)
    _Block_release(v70);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)__dst = v36;
  *(_QWORD *)&__dst[8] = 0x40000000;
  *(_QWORD *)&__dst[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v118 = (const char *)&__block_descriptor_tmp_13_8;
  v119 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v72 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v99 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_113;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __dst);
    v72 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v99 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_113;
  }
  v73 = (unint64_t *)(v72 + 8);
  do
    v74 = __ldxr(v73);
  while (__stxr(v74 + 1, v73));
LABEL_113:
  ctu::DispatchTimerService::create();
  v75 = v116;
  v116 = 0uLL;
  v76 = *(std::__shared_weak_count **)(v1 + 216);
  *(_OWORD *)(v1 + 208) = v75;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (*((_QWORD *)&v99 + 1))
  {
    v82 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v99 + 1) + 16))(*((_QWORD *)&v99 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v99 + 1));
    }
  }
  v84 = objc_msgSend(MEMORY[0x1E0D09928], "sharedCPMSAgent", (_QWORD)v99);
  *(_QWORD *)(v1 + 168) = v84;
  if (v84)
  {
    if ((CPMSModule::initPowerConfig_sync((id *)v1) & 1) == 0)
    {
      v96 = *(NSObject **)(v1 + 88);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__dst = 0;
        _os_log_error_impl(&dword_1BF566000, v96, OS_LOG_TYPE_ERROR, "Failed to initialization of CPMS power config.", __dst, 2u);
        v95 = v101;
        if (!v101)
          goto LABEL_142;
        goto LABEL_141;
      }
LABEL_140:
      v95 = v101;
      if (!v101)
      {
LABEL_142:
        if (v104)
          std::__shared_weak_count::__release_weak(v104);
        if (v107)
          std::__shared_weak_count::__release_weak(v107);
        if (v110)
          std::__shared_weak_count::__release_weak(v110);
        if (v113)
          std::__shared_weak_count::__release_weak(v113);
LABEL_155:
        std::__shared_weak_count::__release_weak(v5);
        return;
      }
LABEL_141:
      std::__shared_weak_count::__release_weak(v95);
      goto LABEL_142;
    }
    v85 = *(std::__shared_weak_count **)(v1 + 128);
    if (v85)
    {
      v86 = *(_QWORD *)(v1 + 120);
      v87 = std::__shared_weak_count::lock(v85);
      if (v87)
      {
        v88 = v87;
        v89 = operator new(8uLL);
        *v89 = v1;
        v90 = *(NSObject **)(v1 + 136);
        v91 = (unint64_t *)&v88->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
        v93 = operator new(0x18uLL);
        *v93 = v89;
        v93[1] = v86;
        v93[2] = v88;
        dispatch_async_f(v90, v93, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_10initializeENS_13group_sessionEEUb_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
        do
          v94 = __ldaxr(v91);
        while (__stlxr(v94 - 1, v91));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
          v95 = v101;
          if (!v101)
            goto LABEL_142;
          goto LABEL_141;
        }
        goto LABEL_140;
      }
    }
LABEL_170:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v98 = GetOsLogContext()[1];
  if (os_log_type_enabled(v98, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)__dst = 136315906;
    *(_QWORD *)&__dst[4] = "ABM ASSERT";
    *(_WORD *)&__dst[12] = 2080;
    *(_QWORD *)&__dst[14] = "fCPMSAgent";
    *(_WORD *)&__dst[22] = 2080;
    v118 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/CPMS/CPMSModule.mm";
    LOWORD(v119) = 1024;
    *(_DWORD *)((char *)&v119 + 2) = 232;
    _os_log_fault_impl(&dword_1BF566000, v98, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", __dst, 0x26u);
    __break(1u);
    goto LABEL_170;
  }
  __break(1u);
}

void sub_1BF6BA1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  NSObject *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
      {
        if (!v9)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9)
          return;
      }
      v13 = a1[5];
      v12 = (std::__shared_weak_count *)a1[6];
      if (v12)
      {
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }
      if (*a3)
      {
        v16 = _Block_copy(*a3);
        v17 = (std::__shared_weak_count *)v6[16];
        if (!v17)
LABEL_29:
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        v16 = 0;
        v17 = (std::__shared_weak_count *)v6[16];
        if (!v17)
          goto LABEL_29;
      }
      v18 = v6[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_29;
      v20 = v19;
      v21 = operator new(0x20uLL);
      v22 = v21;
      *v21 = v13;
      v21[1] = v12;
      if (v12)
      {
        v23 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v6;
      v21[3] = v16;
      v25 = (unint64_t *)&v20->__shared_owners_;
      v26 = v6[17];
      do
        v27 = __ldxr(v25);
      while (__stxr(v27 + 1, v25));
      v28 = operator new(0x18uLL);
      *v28 = v22;
      v28[1] = v18;
      v28[2] = v20;
      dispatch_async_f(v26, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v29 = __ldaxr(v25);
      while (__stlxr(v29 - 1, v25));
      if (v29)
      {
        if (v12)
LABEL_26:
          std::__shared_weak_count::__release_weak(v12);
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (v12)
          goto LABEL_26;
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_5(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t value;
  int v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB000]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      v16 = a1[5];
      v15 = (std::__shared_weak_count *)a1[6];
      if (v15)
      {
        p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v18 = __ldxr(p_shared_weak_owners);
        while (__stxr(v18 + 1, p_shared_weak_owners));
      }
      if (*a3)
      {
        v19 = _Block_copy(*a3);
        v20 = (std::__shared_weak_count *)v7[16];
        if (!v20)
LABEL_32:
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        v19 = 0;
        v20 = (std::__shared_weak_count *)v7[16];
        if (!v20)
          goto LABEL_32;
      }
      v21 = v7[15];
      v22 = std::__shared_weak_count::lock(v20);
      if (!v22)
        goto LABEL_32;
      v23 = v22;
      v24 = operator new(0x28uLL);
      v25 = v24;
      *v24 = v16;
      v24[1] = v15;
      if (v15)
      {
        v26 = (unint64_t *)&v15->__shared_weak_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v24[2] = v7;
      *((_DWORD *)v24 + 6) = v14;
      v24[4] = v19;
      v28 = v7[17];
      v29 = (unint64_t *)&v23->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      v31 = operator new(0x18uLL);
      *v31 = v25;
      v31[1] = v21;
      v31[2] = v23;
      dispatch_async_f(v28, v31, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v32 = __ldaxr(v29);
      while (__stlxr(v32 - 1, v29));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v15)
        std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BF6BA784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  NSObject *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
      {
        if (!v9)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9)
          return;
      }
      v13 = a1[5];
      v12 = (std::__shared_weak_count *)a1[6];
      if (v12)
      {
        p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }
      if (*a3)
      {
        v16 = _Block_copy(*a3);
        v17 = (std::__shared_weak_count *)v6[16];
        if (!v17)
LABEL_29:
          std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      else
      {
        v16 = 0;
        v17 = (std::__shared_weak_count *)v6[16];
        if (!v17)
          goto LABEL_29;
      }
      v18 = v6[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_29;
      v20 = v19;
      v21 = operator new(0x20uLL);
      v22 = v21;
      *v21 = v13;
      v21[1] = v12;
      if (v12)
      {
        v23 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v6;
      v21[3] = v16;
      v25 = (unint64_t *)&v20->__shared_owners_;
      v26 = v6[17];
      do
        v27 = __ldxr(v25);
      while (__stxr(v27 + 1, v25));
      v28 = operator new(0x18uLL);
      *v28 = v22;
      v28[1] = v18;
      v28[2] = v20;
      dispatch_async_f(v26, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v29 = __ldaxr(v25);
      while (__stlxr(v29 - 1, v25));
      if (v29)
      {
        if (v12)
LABEL_26:
          std::__shared_weak_count::__release_weak(v12);
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (v12)
          goto LABEL_26;
      }
    }
  }
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  xpc_object_t v17;
  const void *v18;
  void *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v14 = a1[5];
  v13 = (std::__shared_weak_count *)a1[6];
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  v17 = *a2;
  if (v17)
  {
    xpc_retain(v17);
    v18 = *a3;
    if (*a3)
      goto LABEL_14;
  }
  else
  {
    v17 = xpc_null_create();
    v18 = *a3;
    if (*a3)
    {
LABEL_14:
      v19 = _Block_copy(v18);
      v20 = (std::__shared_weak_count *)v7[16];
      if (!v20)
LABEL_31:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_18;
    }
  }
  v19 = 0;
  v20 = (std::__shared_weak_count *)v7[16];
  if (!v20)
    goto LABEL_31;
LABEL_18:
  v21 = v7[15];
  v22 = std::__shared_weak_count::lock(v20);
  if (!v22)
    goto LABEL_31;
  v23 = v22;
  v24 = operator new(0x28uLL);
  v25 = v24;
  *v24 = v14;
  v24[1] = v13;
  if (v13)
  {
    v26 = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v24[2] = v7;
  v24[3] = v17;
  v28 = xpc_null_create();
  v25[4] = v19;
  v29 = v7[17];
  v30 = (unint64_t *)&v23->__shared_owners_;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  v32 = operator new(0x18uLL);
  *v32 = v25;
  v32[1] = v21;
  v32[2] = v23;
  dispatch_async_f(v29, v32, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  xpc_release(v28);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

void ___ZN10CPMSModule10initializeEN8dispatch13group_sessionE_block_invoke_4(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const void *v12;
  NSObject *v13;
  void *aBlock;
  NSObject *v15;
  uint8_t buf[16];

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (v11)
      {
        if (!v9)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
        if (!v9)
          return;
      }
      v12 = *a3;
      if (*a3)
      {
        v15 = 0;
        aBlock = _Block_copy(v12);
        CPMSModule::getCurrentPower(v6, &v15, (uint64_t *)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
      }
      else
      {
        v13 = *(NSObject **)(v6 + 88);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Expected response handler", buf, 2u);
        }
      }
    }
  }
}

void sub_1BF6BAC50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void CPMSModule::getCurrentPower(uint64_t a1, NSObject **a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  ctu *NSDict;
  const void *v26;
  xpc_object_t v27;
  uint64_t v28;
  int v29;
  _QWORD v30[7];
  _QWORD aBlock[5];
  dispatch_group_t group;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  void *v36;
  dispatch_object_t object;
  _QWORD v38[7];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  void *block;
  uint64_t v49;
  _QWORD *(*v50)(uint64_t);
  void *v51;
  uint64_t v52;
  xpc_object_t *v53;

  v43 = 0;
  v44 = &v43;
  v45 = 0x2020000000;
  v46 = 0;
  v39 = 0;
  v40 = &v39;
  v41 = 0x2020000000;
  v42 = 0;
  v6 = a1 + 120;
  v7 = (void *)MEMORY[0x1E0C809B0];
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  v38[3] = &unk_1E791E4A0;
  v38[5] = &v39;
  v38[6] = a1;
  v38[4] = &v43;
  v47 = v38;
  block = (void *)MEMORY[0x1E0C809B0];
  v49 = 3221225472;
  v50 = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v51 = &__block_descriptor_48_e5_v8__0l;
  v52 = a1 + 120;
  v53 = (xpc_object_t *)&v47;
  v9 = a1 + 136;
  v8 = *(NSObject **)(a1 + 136);
  if (*(_QWORD *)(v9 + 8))
  {
    dispatch_async_and_wait(v8, &block);
    if (!*((_BYTE *)v44 + 24))
      goto LABEL_34;
  }
  else
  {
    dispatch_sync(v8, &block);
    if (!*((_BYTE *)v44 + 24))
      goto LABEL_34;
  }
  if (*((_BYTE *)v40 + 24))
  {
    v10 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v10 || (v11 = *(_QWORD *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v13);
    }
    v18 = *(_QWORD *)(a1 + 192);
    aBlock[0] = v7;
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_2;
    aBlock[3] = &__block_descriptor_72_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e1095_v32__0_BudgetData__map_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int___std::less_abm::BasebandCPMSPowerBudgetScale___std::allocator_std::pair_const_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int________tree_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____std::allocator_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int______v___compressed_pair_std::__tree_end_node_std::__tree_node_base_void________std::allocator_std::__tree_node_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____void_________tree_end_node_std::__tree_node_base_void________v_____compressed_pair_unsigned_long__std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____Q____8l;
    v19 = *a2;
    aBlock[4] = a1;
    group = v19;
    if (v19)
    {
      dispatch_retain(v19);
      dispatch_group_enter(v19);
    }
    v33 = v11;
    v34 = v13;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v21 = (void *)*a3;
    if (*a3)
      v21 = _Block_copy(v21);
    v35 = v21;
    v22 = _Block_copy(aBlock);
    v23 = *(NSObject **)(a1 + 136);
    if (v23)
      dispatch_retain(v23);
    v36 = v22;
    object = v23;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 40))(v18, &v36);
    if (object)
      dispatch_release(object);
    if (v36)
      _Block_release(v36);
    if (v35)
      _Block_release(v35);
    if (v34)
      std::__shared_weak_count::__release_weak(v34);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    std::__shared_weak_count::__release_weak(v13);
    goto LABEL_46;
  }
LABEL_34:
  v30[0] = v7;
  v30[1] = 3221225472;
  v30[2] = ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_63;
  v30[3] = &unk_1E791E4A0;
  v30[4] = &v43;
  v30[5] = &v39;
  v30[6] = a1;
  v47 = v30;
  block = v7;
  v49 = 3221225472;
  v50 = ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v51 = &__block_descriptor_48_e5_v8__0l;
  v52 = v6;
  v53 = (xpc_object_t *)&v47;
  v24 = *(NSObject **)(a1 + 136);
  if (*(_QWORD *)(a1 + 144))
  {
    dispatch_async_and_wait(v24, &block);
    if (!*a3)
      goto LABEL_46;
  }
  else
  {
    dispatch_sync(v24, &block);
    if (!*a3)
      goto LABEL_46;
  }
  NSDict = (ctu *)PowerBudget::getNSDict((id *)(a1 + 400));
  ctu::cf_to_xpc(NSDict, v26);
  v27 = v47;
  block = v47;
  v28 = MEMORY[0x1E0C812F8];
  if (v47 && MEMORY[0x1C3B8CD78](v47) == v28)
  {
    xpc_retain(v27);
  }
  else
  {
    v27 = xpc_null_create();
    block = v27;
  }
  xpc_release(v47);
  if (MEMORY[0x1C3B8CD78](v27) == v28)
    v29 = 0;
  else
    v29 = -534716416;
  LODWORD(v47) = v29;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, (unsigned int *)&v47, &block);
  xpc_release(block);
LABEL_46:
  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v43, 8);
}

void sub_1BF6BAFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_group_t group,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  std::__shared_weak_count *v34;
  uint64_t v35;

  dispatch::callback<void({block_pointer})(BudgetData)>::~callback((uint64_t)&a25);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v34);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v35 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t CPMSModule::initPowerConfig_sync(id *this)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t i;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BOOL8 v15;
  int v16;
  const char *v17;
  std::__shared_weak_count *v18;
  id v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSError *v32;
  char v33;
  NSObject *v34;
  _BYTE *v36;
  unsigned int v37;
  void *v38;
  void *v39;
  void *v40;
  NSError *v41;
  _QWORD v42[6];
  std::__shared_weak_count *v43;
  _QWORD v44[6];
  std::__shared_weak_count *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::string v50;
  CFTypeRef cf;
  std::string __p;
  _BYTE buf[12];
  char v54;
  uint8_t v55[4];
  _BYTE *v56;
  _BYTE v57[128];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  memset(&__p, 170, sizeof(__p));
  CPMSModule::getCPMSBudgetPlistPath((CPMSModule *)this, (void **)&__p.__r_.__value_.__l.__data_);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v50 = __p;
  util::readPlistToCFDictionary((uint64_t)&v50, &cf);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  v2 = (void *)cf;
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v48 = 0u;
  v49 = 0u;
  v47 = 0u;
  v46 = 0u;
  v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v47;
    v38 = (void *)*MEMORY[0x1E0D09988];
    v39 = (void *)*MEMORY[0x1E0D09970];
    v40 = (void *)*MEMORY[0x1E0D09958];
    v37 = 5000;
    v6 = (void *)*MEMORY[0x1E0D09960];
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v47 != v5)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * i);
        if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerTimeScale1s")))
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v6, (void *)objc_msgSend(v2, "valueForKey:", v8), v3);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerTimeScale100ms")))
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v40, (void *)objc_msgSend(v2, "valueForKey:", v8), v3);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerTimeScaleInstantaneous")))
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v39, (void *)objc_msgSend(v2, "valueForKey:", v8), v3);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerTimeScaleThermal")))
        {
          CPMSModule::initPowerConfig_sync(void)::$_1::operator()((uint64_t)this, v38, (void *)objc_msgSend(v2, "valueForKey:", v8), v3);
        }
        else if (objc_msgSend(v8, "isEqualToString:", CFSTR("CPMSPowerBudgetPeriodms")))
        {
          v37 = objc_msgSend((id)objc_msgSend(v2, "valueForKey:", v8), "intValue");
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v46, v57, 16);
    }
    while (v4);
  }
  else
  {
    v37 = 5000;
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(this + 30), this[46], this + 47);

  this[33] = (id)objc_msgSend(this[49], "copy");
  v9 = this[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = objc_msgSend((id)objc_msgSend(v3, "description"), "UTF8String");
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Power budget config to be registered with CPMS %s", buf, 0xCu);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 34), buf);
    if (v54 >= 0)
      v11 = buf;
    else
      v11 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    v56 = v11;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Min default budget %s", v55, 0xCu);
    if (v54 < 0)
      operator delete(*(void **)buf);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 38), buf);
    if (v54 >= 0)
      v12 = buf;
    else
      v12 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    v56 = v12;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Max default budget %s", v55, 0xCu);
    if (v54 < 0)
      operator delete(*(void **)buf);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 42), buf);
    if (v54 >= 0)
      v13 = buf;
    else
      v13 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    v56 = v13;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Idle default budget %s", v55, 0xCu);
    if (v54 < 0)
      operator delete(*(void **)buf);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)(this + 46), buf);
    if (v54 >= 0)
      v14 = buf;
    else
      v14 = *(_BYTE **)buf;
    *(_DWORD *)v55 = 136315138;
    v56 = v14;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Low default budget %s", v55, 0xCu);
    if (v54 < 0)
      operator delete(*(void **)buf);
    v9 = this[11];
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v37;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Power budget update period (ms) %u", buf, 8u);
    v9 = this[11];
  }
  v15 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    v16 = capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v15);
    v17 = " not";
    if (v16)
      v17 = "";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v17;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Connected state evaluation is%s supported", buf, 0xCu);
  }
  v18 = (std::__shared_weak_count *)this[16];
  if (!v18 || (v19 = this[15], (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  v26 = MEMORY[0x1E0C809B0];
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3321888768;
  v44[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke;
  v44[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e22_v16__0__NSDictionary_8l;
  v44[4] = this;
  v44[5] = v19;
  v45 = v21;
  do
    v27 = __ldxr(p_shared_weak_owners);
  while (__stxr(v27 + 1, p_shared_weak_owners));
  this[22] = v44;
  v42[0] = v26;
  v42[1] = 3321888768;
  v42[2] = ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_41;
  v42[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e19___NSDictionary_8__0l;
  v42[4] = this;
  v42[5] = v19;
  v43 = v21;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  this[23] = v42;
  v41 = 0;
  v29 = objc_alloc_init(MEMORY[0x1E0D09938]);
  objc_msgSend(v29, "setClientId:", 4);
  objc_msgSend(v29, "setPowerLevels:", v3);
  objc_msgSend(v29, "setIsContinuous:", 1);
  objc_msgSend(v29, "setNotificationCallback:", this[22]);
  objc_msgSend(v29, "setGetCurrentPower:", this[23]);
  objc_msgSend(v29, "setPowerBudgetUpdateMinimumPeriod:", v37);
  v30 = objc_msgSend(this[21], "registerClientWithDescription:error:", v29, &v41);
  v31 = v30;
  v32 = v41;
  if (v41)
    v33 = 0;
  else
    v33 = v30;
  if ((v33 & 1) == 0)
  {
    v34 = this[11];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      CPMSModule::getErrorMsg(v32, (uint64_t)buf);
      v36 = v54 >= 0 ? buf : *(_BYTE **)buf;
      *(_DWORD *)v55 = 136315138;
      v56 = v36;
      _os_log_error_impl(&dword_1BF566000, v34, OS_LOG_TYPE_ERROR, "Failed to register CPMS: %s", v55, 0xCu);
      if (v54 < 0)
        operator delete(*(void **)buf);
    }
  }

  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v21);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v31;
}

void sub_1BF6BB894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void CPMSModule::finishInitialization_sync(CPMSModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  const void *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  const void *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  NSObject *v41;
  const void *v42;
  size_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  config::hw *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  NSObject *v55;
  _QWORD v56[6];
  std::__shared_weak_count *v57;
  void *v58;
  dispatch_object_t v59;
  _QWORD v60[6];
  std::__shared_weak_count *v61;
  void *v62;
  dispatch_object_t v63;
  void *v64[2];
  unint64_t v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  void *v68;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v71;
  _QWORD aBlock[6];
  std::__shared_weak_count *v73;
  const void *v74;
  dispatch_object_t v75;
  void *v76[2];
  unint64_t v77;
  const void *v78;
  void *__dst[2];
  unint64_t v80;
  __int128 v81;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const char *)(*(uint64_t (**)(CPMSModule *))(*(_QWORD *)this + 16))(this);
  v11 = strlen(v10);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v80 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v80) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  v78 = 0;
  AppleBasebandManager::create();
  v16 = v81;
  v81 = 0uLL;
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *(_OWORD *)((char *)this + 152) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (!*((_QWORD *)&v81 + 1))
    goto LABEL_26;
  v21 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
  {
LABEL_26:
    v23 = v78;
    if (!v78)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  v23 = v78;
  if (v78)
LABEL_27:
    CFRelease(v23);
LABEL_28:
  if (SHIBYTE(v80) < 0)
    operator delete(__dst[0]);
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v76[1] = v26;
    v77 = v29 | 0x8000000000000000;
    v76[0] = v27;
  }
  else
  {
    HIBYTE(v77) = v25;
    v27 = v76;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  aBlock[4] = this;
  aBlock[5] = v3;
  v73 = v5;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(aBlock);
  v32 = *((_QWORD *)this + 17);
  if (v32)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v74 = v31;
  v75 = v32;
  AppleBasebandManager::setEventHandler();
  if (v75)
    dispatch_release(v75);
  if (v74)
    _Block_release(v74);
  if (SHIBYTE(v77) < 0)
    operator delete(v76[0]);
  v33 = (const void *)*MEMORY[0x1E0CFBF60];
  v34 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = (void *)v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    __p[1] = v35;
    v71 = v38 | 0x8000000000000000;
    __p[0] = v36;
  }
  else
  {
    HIBYTE(v71) = v34;
    v36 = __p;
    if (!v34)
      goto LABEL_56;
  }
  memmove(v36, v33, (size_t)v35);
LABEL_56:
  *((_BYTE *)v35 + (_QWORD)v36) = 0;
  v66[0] = MEMORY[0x1E0C809B0];
  v66[1] = 3321888768;
  v66[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_13;
  v66[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v66[4] = this;
  v66[5] = v3;
  v67 = v5;
  do
    v39 = __ldxr(p_shared_weak_owners);
  while (__stxr(v39 + 1, p_shared_weak_owners));
  v40 = _Block_copy(v66);
  v41 = *((_QWORD *)this + 17);
  if (v41)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v68 = v40;
  object = v41;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v68)
    _Block_release(v68);
  if (SHIBYTE(v71) < 0)
    operator delete(__p[0]);
  v42 = (const void *)*MEMORY[0x1E0CFBC68];
  v43 = strlen((const char *)*MEMORY[0x1E0CFBC68]);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v44 = (void *)v43;
  if (v43 >= 0x17)
  {
    v46 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v46 = v43 | 7;
    v47 = v46 + 1;
    v45 = operator new(v46 + 1);
    v64[1] = v44;
    v65 = v47 | 0x8000000000000000;
    v64[0] = v45;
  }
  else
  {
    HIBYTE(v65) = v43;
    v45 = v64;
    if (!v43)
      goto LABEL_74;
  }
  memmove(v45, v42, (size_t)v44);
LABEL_74:
  *((_BYTE *)v44 + (_QWORD)v45) = 0;
  v60[0] = MEMORY[0x1E0C809B0];
  v60[1] = 3321888768;
  v60[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_2;
  v60[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
  v60[4] = this;
  v60[5] = v3;
  v61 = v5;
  do
    v48 = __ldxr(p_shared_weak_owners);
  while (__stxr(v48 + 1, p_shared_weak_owners));
  v49 = _Block_copy(v60);
  v50 = *((_QWORD *)this + 17);
  if (v50)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v62 = v49;
  v63 = v50;
  AppleBasebandManager::setEventHandler();
  if (v63)
    dispatch_release(v63);
  if (v62)
    _Block_release(v62);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  v51 = (config::hw *)AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 19));
  if ((config::hw::watch(v51) & 1) == 0)
  {
    v52 = *((_QWORD *)this + 24);
    v56[0] = MEMORY[0x1E0C809B0];
    v56[1] = 3321888768;
    v56[2] = ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_16;
    v56[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e1095_v32__0_BudgetData__map_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int___std::less_abm::BasebandCPMSPowerBudgetScale___std::allocator_std::pair_const_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int________tree_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____std::allocator_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int______v___compressed_pair_std::__tree_end_node_std::__tree_node_base_void________std::allocator_std::__tree_node_std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____void_________tree_end_node_std::__tree_node_base_void________v_____compressed_pair_unsigned_long__std::__map_value_compare_abm::BasebandCPMSPowerBudgetScale__std::__value_type_abm::BasebandCPMSPowerBudgetScale__std::optional_unsigned_int____std::less_abm::BasebandCPMSPowerBudgetScale____Q____8l;
    v56[4] = this;
    v56[5] = v3;
    v57 = v5;
    do
      v53 = __ldxr(p_shared_weak_owners);
    while (__stxr(v53 + 1, p_shared_weak_owners));
    v54 = _Block_copy(v56);
    v55 = *((_QWORD *)this + 17);
    if (v55)
      dispatch_retain(v55);
    v58 = v54;
    v59 = v55;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v52 + 32))(v52, &v58);
    if (v59)
      dispatch_release(v59);
    if (v58)
      _Block_release(v58);
    if (v57)
      std::__shared_weak_count::__release_weak(v57);
  }
  if (v61)
    std::__shared_weak_count::__release_weak(v61);
  if (v67)
    std::__shared_weak_count::__release_weak(v67);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF6BBF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  std::__shared_weak_count *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;

  dispatch::callback<void({block_pointer})(BudgetData)>::~callback((uint64_t)&a17);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  if (a40)
    std::__shared_weak_count::__release_weak(a40);
  v51 = *(std::__shared_weak_count **)(v49 - 208);
  if (v51)
  {
    std::__shared_weak_count::__release_weak(v51);
    std::__shared_weak_count::__release_weak(v48);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v48);
  _Unwind_Resume(a1);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  int v12;
  const void *v13;
  size_t v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  void **v21;
  config::hw *v22;
  capabilities::abs *v23;
  capabilities::abs *v24;
  uint64_t v25;
  void *v26;
  void *__dst[2];
  unint64_t v28;
  void *__p[3];
  _QWORD v30[2];
  unint64_t v31;
  uint64_t v32;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v31 = 0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (const void *)0xAAAAAAAAAAAAAAAALL;
      if (!ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        goto LABEL_38;
      v12 = *(unsigned __int8 *)(v5 + 232);
      v30[0] = 0xAAAAAAAAAAAAAAAALL;
      v30[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v30, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
      memset(__p, 170, sizeof(__p));
      v13 = (const void *)*MEMORY[0x1E0CFB988];
      v14 = strlen((const char *)*MEMORY[0x1E0CFB988]);
      if (v14 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = (void *)v14;
      if (v14 >= 0x17)
      {
        v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v14 | 7) != 0x17)
          v17 = v14 | 7;
        v18 = v17 + 1;
        v16 = (void **)operator new(v17 + 1);
        __dst[1] = v15;
        v28 = v18 | 0x8000000000000000;
        __dst[0] = v16;
      }
      else
      {
        HIBYTE(v28) = v14;
        v16 = __dst;
        if (!v14)
          goto LABEL_18;
      }
      memmove(v16, v13, (size_t)v15);
LABEL_18:
      v19 = (const char *)*MEMORY[0x1E0CFB530];
      *((_BYTE *)v15 + (_QWORD)v16) = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v32, v19);
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C3B8B878](&v32);
      if (SHIBYTE(v28) < 0)
        operator delete(__dst[0]);
      if (SHIBYTE(__p[2]) >= 0)
        v20 = HIBYTE(__p[2]);
      else
        v20 = (size_t)__p[1];
      if (v20 == strlen((const char *)*MEMORY[0x1E0CFB980]))
      {
        if (SHIBYTE(__p[2]) >= 0)
          v21 = __p;
        else
          v21 = (void **)__p[0];
        v22 = (config::hw *)memcmp(v21, (const void *)*MEMORY[0x1E0CFB980], v20);
        *(_BYTE *)(v5 + 232) = (_DWORD)v22 == 0;
        if (!(_DWORD)v22)
        {
          v23 = (capabilities::abs *)config::hw::watch(v22);
          if ((v23 & 1) == 0)
          {
            v24 = (capabilities::abs *)capabilities::abs::supportsSMCThermalReport(v23);
            if ((_DWORD)v24)
            {
              v25 = capabilities::abs::SMCThermalReportInterval(v24);
              v26 = 0;
              CPMSModule::configureThermalReportFrequency_sync((_QWORD *)v5, v25, &v26);
            }
            (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 192) + 48))(*(_QWORD *)(v5 + 192), 1, 5);
          }
        }
      }
      else
      {
        *(_BYTE *)(v5 + 232) = 0;
      }
      if (*(unsigned __int8 *)(v5 + 232) != v12)
        CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v5);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      MEMORY[0x1C3B8B8B4](v30);
      v11 = (const void *)v31;
LABEL_38:
      if (v11)
        CFRelease(v11);
    }
  }
}

void sub_1BF6BC380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;

  if (a22 < 0)
  {
    operator delete(__p);
    MEMORY[0x1C3B8B8B4](&a23);
    ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v23 - 64));
    _Unwind_Resume(a1);
  }
  MEMORY[0x1C3B8B8B4](&a23);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v23 - 64));
  _Unwind_Resume(a1);
}

void CPMSModule::configureThermalReportFrequency_sync(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  capabilities::abs *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  _QWORD v28[6];
  std::__shared_weak_count *v29;
  void *v30;
  int v31;
  void *v32;
  dispatch_object_t object;
  void *v34;
  _QWORD aBlock[6];
  std::__shared_weak_count *v36;
  char v37;
  uint8_t buf[4];
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v7 = a1[15], (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = (std::__shared_weak_count *)v8;
  v10 = (unint64_t *)((char *)v8 + 16);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  v12 = (unint64_t *)((char *)v8 + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    (*(void (**)(capabilities::abs *))(*(_QWORD *)v8 + 16))(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = capabilities::abs::supportsSMCThermalReport(v8);
  v15 = a1[11];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = "Thermal Monitor";
    if (v14)
      v16 = "SMC";
    *(_DWORD *)buf = 136315138;
    v39 = v16;
    _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Thermal Report to %s", buf, 0xCu);
  }
  v17 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_57_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e226_v32__0_vector_abm::ThermalSensorData__std::allocator_abm::ThermalSensorData_____ThermalSensorData___ThermalSensorData____compressed_pair_abm::ThermalSensorData____std::allocator_abm::ThermalSensorData_____ThermalSensorData___8l;
  aBlock[4] = a1;
  aBlock[5] = v7;
  v36 = v9;
  do
    v18 = __ldxr(v10);
  while (__stxr(v18 + 1, v10));
  v37 = v14;
  v19 = _Block_copy(aBlock);
  v20 = v19;
  v21 = a1[24];
  if (v14)
    v22 = 2;
  else
    v22 = 1;
  if (v19)
    v23 = _Block_copy(v19);
  else
    v23 = 0;
  v34 = v23;
  v28[0] = v17;
  v28[1] = 3321888768;
  v28[2] = ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_60;
  v28[3] = &__block_descriptor_68_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e44_v16__0_CFSharedRef___CFError______CFError__8l;
  v28[4] = a1;
  v28[5] = v7;
  v29 = v9;
  do
    v24 = __ldxr(v10);
  while (__stxr(v24 + 1, v10));
  v31 = a2;
  v25 = *a3;
  if (*a3)
    v25 = _Block_copy(v25);
  v30 = v25;
  v26 = _Block_copy(v28);
  v27 = a1[17];
  if (v27)
    dispatch_retain(v27);
  v32 = v26;
  object = v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void **))(*(_QWORD *)v21 + 64))(v21, v22, a2, &v34, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
  if (v34)
    _Block_release(v34);
  if (v30)
    _Block_release(v30);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  if (v20)
    _Block_release(v20);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF6BC6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void CPMSModule::evaluatePowerBudgetNeed_sync(CPMSModule *this)
{
  NSObject *v2;
  _BOOL8 v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  capabilities::abs *v8;
  uint64_t *v9;
  uint64_t **v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD *v24;
  _QWORD v25[2];
  uint64_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    v4 = "true";
    if (*((_BYTE *)this + 235))
      v5 = "true";
    else
      v5 = "false";
    v6 = *((unsigned __int8 *)this + 232);
    if (*((_BYTE *)this + 233))
      v7 = "true";
    else
      v7 = "false";
    *(_DWORD *)buf = 136315650;
    v28 = v5;
    if (!v6)
      v4 = "false";
    v29 = 2080;
    v30 = v7;
    v31 = 2080;
    v32 = v4;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Evaluating power budget need; IsConnected(debounce)=%s, IsOnline=%s IsReady=%s",
      buf,
      0x20u);
  }
  v8 = (capabilities::abs *)capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v3);
  if ((_DWORD)v8 && *((_BYTE *)this + 235) && *((_BYTE *)this + 232) && *((_BYTE *)this + 233))
  {
    v9 = v25;
    v25[0] = 0;
    v25[1] = 0;
    v24 = v25;
    v26 = 0;
    if ((_QWORD **)((char *)this + 304) != &v24)
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v24, *((_QWORD **)this + 38), (_QWORD *)this + 39);
    v26 = objc_msgSend(*((id *)this + 41), "copy");
    v10 = &v24;
    CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v24);
  }
  else if (*((_BYTE *)this + 232))
  {
    if (*((_BYTE *)this + 233))
    {
      v11 = capabilities::abs::supportsCPMSConnectedState(v8);
      v9 = v22;
      v12 = 304;
      if (v11)
      {
        v12 = 336;
        v13 = (char *)this + 336;
      }
      else
      {
        v13 = (char *)this + 304;
      }
      v22[0] = 0;
      v22[1] = 0;
      v21 = v22;
      v23 = 0;
      if (v13 != (char *)&v21)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, *(_QWORD **)((char *)this + v12), (_QWORD *)v13 + 1);
      v23 = objc_msgSend(*((id *)v13 + 3), "copy");
      v10 = &v21;
      CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v21);
    }
    else
    {
      v9 = v19;
      v19[0] = 0;
      v19[1] = 0;
      v18 = v19;
      v20 = 0;
      if ((_QWORD **)((char *)this + 368) != &v18)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v18, *((_QWORD **)this + 46), (_QWORD *)this + 47);
      v20 = objc_msgSend(*((id *)this + 49), "copy");
      v10 = &v18;
      CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v18);
    }
  }
  else
  {
    v9 = &v15;
    v15 = 0;
    v16 = 0;
    v14 = &v15;
    v17 = 0;
    if ((uint64_t **)((char *)this + 368) != &v14)
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v14, *((_QWORD **)this + 46), (_QWORD *)this + 47);
    v17 = objc_msgSend(*((id *)this + 49), "copy", v14, v15, v16, v17);
    v10 = &v14;
    CPMSModule::reportPowerBudgetNeed_sync((uint64_t)this, (PowerBudget *)&v14);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v10, v10[1]);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = v9;

  v10[3] = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v10, v10[1]);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = v9;
}

void sub_1BF6BCA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1BF6BCA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1BF6BCA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,_QWORD *a22)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void sub_1BF6BCA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, _QWORD *a14)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void sub_1BF6BCA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PowerBudget::~PowerBudget((PowerBudget *)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF6BCA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void sub_1BF6BCA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void sub_1BF6BCA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a17, a18);
  _Unwind_Resume(a1);
}

void sub_1BF6BCAB4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_13(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  unsigned __int8 *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  int v12;
  char Int;
  int v14;
  _QWORD v15[2];
  CFTypeRef cf;
  __CFString *v17;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (unsigned __int8 *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v15[0] = 0xAAAAAAAAAAAAAAAALL;
        v15[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
        v12 = v5[233];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v17, (const char *)*MEMORY[0x1E0CFB9E8]);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v15, v17);
        MEMORY[0x1C3B8B878](&v17);
        v14 = Int == 0;
        v5[233] = v14;
        if (v12 != v14)
          CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v5);
        MEMORY[0x1C3B8B8B4](v15);
        v11 = cf;
      }
      if (v11)
        CFRelease(v11);
    }
  }
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_2(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CFTypeRef v11;
  int v12;
  const char *v13;
  size_t v14;
  void **v15;
  _BOOL4 v16;
  NSObject *v17;
  _BOOL8 v18;
  const char *v19;
  void *v20[3];
  _QWORD v21[2];
  CFTypeRef cf;
  uint64_t v23;
  __int128 __p;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v11 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v21[0] = 0xAAAAAAAAAAAAAAAALL;
        v21[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v21, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
        v12 = *(unsigned __int8 *)(v5 + 234);
        memset(v20, 170, sizeof(v20));
        v13 = (const char *)*MEMORY[0x1E0CFBBD8];
        __p = 0uLL;
        v25 = 0;
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v23, v13);
        ctu::cf::map_adapter::getString();
        MEMORY[0x1C3B8B878](&v23);
        if (SHIBYTE(v25) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v20[2]) >= 0)
          v14 = HIBYTE(v20[2]);
        else
          v14 = (size_t)v20[1];
        if (v14 == strlen((const char *)*MEMORY[0x1E0CFBF28]))
        {
          if (SHIBYTE(v20[2]) >= 0)
            v15 = v20;
          else
            v15 = (void **)v20[0];
          v16 = memcmp(v15, (const void *)*MEMORY[0x1E0CFBF28], v14) == 0;
        }
        else
        {
          v16 = 0;
        }
        *(_BYTE *)(v5 + 234) = v16;
        v17 = *(NSObject **)(v5 + 88);
        v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG);
        if (v18)
        {
          v19 = "disconnected";
          if (v16)
            v19 = "connected";
          LODWORD(__p) = 136315138;
          *(_QWORD *)((char *)&__p + 4) = v19;
          _os_log_debug_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEBUG, "#D Baseband is in %s state", (uint8_t *)&__p, 0xCu);
        }
        if (capabilities::abs::supportsCPMSConnectedState((capabilities::abs *)v18)
          && *(unsigned __int8 *)(v5 + 234) != v12)
        {
          CPMSModule::debounceConnectedState_sync((CPMSModule *)v5);
        }
        if (SHIBYTE(v20[2]) < 0)
          operator delete(v20[0]);
        MEMORY[0x1C3B8B8B4](v21);
        v11 = cf;
      }
      if (v11)
        CFRelease(v11);
    }
  }
}

void sub_1BF6BCEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void CPMSModule::debounceConnectedState_sync(CPMSModule *this)
{
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];
  std::__shared_weak_count *v26;
  void *v27;
  dispatch_object_t object;
  char __p[17];
  char v30;
  uint8_t buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (*((_BYTE *)this + 234))
      v7 = "connected";
    else
      v7 = "idle";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v7;
    _os_log_debug_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEBUG, "#D Baseband is in %s state", buf, 0xCu);
    if (*((_BYTE *)this + 234))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 234))
  {
LABEL_3:
    v4 = *((_QWORD *)this + 28);
    if (v4)
    {
      v5 = *((_QWORD *)this + 11);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEBUG, "#D Cancelling idle timer", buf, 2u);
        v4 = *((_QWORD *)this + 28);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      v6 = *((_QWORD *)this + 28);
      *((_QWORD *)this + 28) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    if (!*((_BYTE *)this + 235))
    {
      *((_BYTE *)this + 235) = 1;
      CPMSModule::evaluatePowerBudgetNeed_sync(this);
    }
    return;
  }
  v8 = capabilities::abs::CPMSDebounceTimer((capabilities::abs *)v3);
  v9 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v8;
    _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, "#D Starting idle timer for %lld secs", buf, 0xCu);
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
LABEL_41:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v10)
      goto LABEL_41;
  }
  v11 = *((_QWORD *)this + 15);
  v12 = std::__shared_weak_count::lock(v10);
  if (!v12)
    goto LABEL_41;
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v18 = *((_QWORD *)this + 26);
  v30 = 16;
  strcpy(__p, "Idle state timer");
  v19 = 1000000 * v8;
  v20 = *((_QWORD *)this + 17);
  object = v20;
  if (v20)
    dispatch_retain(v20);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10CPMSModule27debounceConnectedState_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE_e5_v8__0l;
  aBlock[4] = this;
  aBlock[5] = v11;
  v26 = v13;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v27 = _Block_copy(aBlock);
  ctu::TimerService::createOneShotTimer(v18, (uint64_t)__p, 0, v19, &object, &v27);
  v22 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  v23 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  if (v27)
    _Block_release(v27);
  if (object)
    dispatch_release(object);
  if (v30 < 0)
    operator delete(*(void **)__p);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF6BD280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule25finishInitialization_syncEv_block_invoke_16(_QWORD *a1, _QWORD **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  void **v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  void *__p[2];
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  uint8_t buf[4];
  void **v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v19 = &v20;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      if (&v19 != a2)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v19, *a2, a2 + 1);
      v11 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        PowerBudget::to_string((PowerBudget *)&v19, __p);
        if (v18 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v24 = v12;
        _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Baseband power budget need is %s", buf, 0xCu);
        if (v18 < 0)
          operator delete(__p[0]);
      }
      v13 = &v14;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v13, v19, &v20);
      v16 = (id)objc_msgSend(v22, "copy");
      CPMSModule::reportPowerBudgetNeed_sync(v5, (PowerBudget *)&v13);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v13, v14);
      v14 = 0;
      v15 = 0;
      v13 = &v14;

      v16 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v13, v14);
      v14 = 0;
      v15 = 0;
      v13 = &v14;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20);
      v20 = 0;
      v21 = 0;
      v19 = &v20;

      v22 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v19, v20);
    }
  }
}

void sub_1BF6BD4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  PowerBudget::~PowerBudget((PowerBudget *)va);
  _Unwind_Resume(a1);
}

void CPMSModule::reportPowerBudgetNeed_sync(uint64_t a1, PowerBudget *a2)
{
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  _BYTE *v7;
  NSDictionary *v8;
  id *v9;
  NSObject *v10;
  _BYTE *v11;
  int v12;
  NSObject *v13;
  id NSDict;
  const char *v15;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  __int128 v21;
  uint64_t v22;
  id v23;
  _QWORD **v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  _BYTE __p[12];
  __int16 v29;
  id v30;
  char v31;
  uint8_t buf[4];
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a1 + 236);
  v5 = *(NSObject **)(a1 + 88);
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      PowerBudget::to_string(a2, __p);
      if (v31 >= 0)
        v7 = __p;
      else
        v7 = *(_BYTE **)__p;
      *(_DWORD *)buf = 136315138;
      v33 = v7;
      _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Brick mode is still enabled; ignoring power budget request for %s",
        buf,
        0xCu);
      if (v31 < 0)
        operator delete(*(void **)__p);
    }
  }
  else
  {
    if (v6)
    {
      *(_DWORD *)__p = 138412290;
      *(_QWORD *)&__p[4] = PowerBudget::getNSDict((id *)a2);
      _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting to CPMS with power budget need %@", __p, 0xCu);
    }
    v8 = (NSDictionary *)objc_msgSend(*(id *)(a1 + 168), "copyPowerBudgetForRequest:forClient:error:", PowerBudget::getNSDict((id *)a2), 4, 0);
    if (v8)
    {
      v9 = (id *)(a1 + 240);
      PowerBudget::fill((id *)(a1 + 240), v8);
      v10 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        PowerBudget::to_string((PowerBudget *)(a1 + 240), __p);
        v11 = v31 >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315138;
        v33 = v11;
        _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I CPMS responded with power budget allocation %s", buf, 0xCu);
        if (v31 < 0)
          operator delete(*(void **)__p);
      }
      v24 = &v25;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      if (v9 != (id *)&v24)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v24, *(_QWORD **)(a1 + 240), (_QWORD *)(a1 + 248));
      v27 = (id)objc_msgSend(*(id *)(a1 + 264), "copy");
      v12 = objc_msgSend(*(id *)(a1 + 168), "acknowledgePowerBudget:forClientId:error:", PowerBudget::getNSDict((id *)&v24), 4, 0);
      v13 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        NSDict = PowerBudget::getNSDict((id *)&v24);
        v15 = "failed";
        if (v12)
          v15 = "succeeded";
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = v15;
        v29 = 2112;
        v30 = NSDict;
        _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", __p, 0x16u);
      }
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, v25);
      v25 = 0;
      v26 = 0;
      v24 = &v25;

      v27 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v24, v25);
      v25 = 0;
      v26 = 0;
      v23 = 0;
      v24 = &v25;
      *((_QWORD *)&v21 + 1) = 0;
      v22 = 0;
      *(_QWORD *)&v21 = (char *)&v21 + 8;
      if (v9 != (id *)&v21)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v21, *(_QWORD **)(a1 + 240), (_QWORD *)(a1 + 248));
      v23 = (id)objc_msgSend(*(id *)(a1 + 264), "copy");
      CPMSModule::evaluateBrickMode_sync(a1, &v21);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v21, *((_QWORD **)&v21 + 1));
      *((_QWORD *)&v21 + 1) = 0;
      v22 = 0;
      *(_QWORD *)&v21 = (char *)&v21 + 8;

      v23 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v21, *((_QWORD **)&v21 + 1));
      *((_QWORD *)&v21 + 1) = 0;
      v22 = 0;
      v20 = 0;
      *(_QWORD *)&v21 = (char *)&v21 + 8;
      v18 = 0;
      v19 = 0;
      v17 = &v18;
      if (v9 != (id *)&v17)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v17, *(_QWORD **)(a1 + 240), (_QWORD *)(a1 + 248));
      v20 = (id)objc_msgSend(*(id *)(a1 + 264), "copy", v17);
      CPMSModule::sendPowerBudgetToBB_sync(a1, &v17);
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      v18 = 0;
      v19 = 0;
      v17 = &v18;

      v20 = 0;
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v17, v18);
      v18 = 0;
      v19 = 0;
      v17 = &v18;
    }
    else
    {
      v16 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Reporting to CPMS with power budget need failed", __p, 2u);
      }
    }

  }
}

void sub_1BF6BD974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(BudgetData)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void CPMSModule::getErrorMsg(NSError *a1@<X1>, uint64_t a2@<X8>)
{
  NSString *v5;
  NSString *v6;

  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a2 + 16) = 0xAAAAAAAAAAAAAAAALL;
  *(_BYTE *)(a2 + 23) = 13;
  strcpy((char *)a2, "Unknown error");
  if (a1)
  {
    v5 = -[NSError localizedDescription](a1, "localizedDescription");
    if (-[NSError localizedFailureReason](a1, "localizedFailureReason"))
      v6 = -[NSError localizedFailureReason](a1, "localizedFailureReason");
    else
      v6 = (NSString *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle"), "localizedStringForKey:value:table:", CFSTR("Not found localizedFailureReason"), &stru_1E7923080, 0);
    std::string::__assign_external((std::string *)a2, (const std::string::value_type *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), v5, v6), "UTF8String"));
  }
}

void sub_1BF6BDB2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule27debounceConnectedState_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_7;
      v6 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)v9 = 0;
        _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Idle timer expired", v9, 2u);
        if (*(_BYTE *)(v3 + 234))
        {
LABEL_7:
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
          return;
        }
      }
      else if (*(_BYTE *)(v3 + 234))
      {
        goto LABEL_7;
      }
      *(_BYTE *)(v3 + 235) = 0;
      CPMSModule::evaluatePowerBudgetNeed_sync((CPMSModule *)v3);
      goto LABEL_7;
    }
  }
}

void sub_1BF6BDC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void CPMSModule::sendPowerBudgetToBB_sync(uint64_t a1, _QWORD **a2)
{
  int v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  const char *v18;
  const char *v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD *, _QWORD *);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _QWORD **v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  void *aBlock;
  dispatch_object_t object;
  _QWORD **v35;
  _QWORD *v36;
  uint64_t v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a1 + 236);
  if (!*(_BYTE *)(a1 + 236) && *(_BYTE *)(a1 + 232) && *(_BYTE *)(a1 + 233))
  {
    v5 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v5 || (v7 = *(_QWORD *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v9 = v8;
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
    v14 = *(_QWORD *)(a1 + 192);
    v36 = 0;
    v37 = 0;
    v35 = &v36;
    if (&v35 != a2)
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v35, *a2, a2 + 1);
    v22 = MEMORY[0x1E0C809B0];
    v23 = 3321888768;
    v24 = ___ZN10CPMSModule24sendPowerBudgetToBB_syncE11PowerBudget_block_invoke;
    v25 = &__block_descriptor_88_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget_e44_v16__0_CFSharedRef___CFError______CFError__8l;
    v26 = a1;
    v27 = v7;
    v28 = v9;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v29 = &v30;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    if (&v29 != a2)
      std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&v29, *a2, a2 + 1);
    v32 = (id)objc_msgSend(a2[3], "copy", v22, v23, v24, v25, v26, v27);
    v16 = _Block_copy(&v22);
    v17 = *(NSObject **)(a1 + 136);
    if (v17)
      dispatch_retain(v17);
    aBlock = v16;
    object = v17;
    (*(void (**)(uint64_t, _QWORD ***, void **))(*(_QWORD *)v14 + 24))(v14, &v35, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v35, v36);
    v36 = 0;
    v37 = 0;
    v35 = &v36;
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v29, v30);
    v30 = 0;
    v31 = 0;
    v29 = &v30;

    v32 = 0;
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v29, v30);
    v30 = 0;
    v31 = 0;
    v29 = &v30;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    v4 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v18 = "true";
      if (v3)
        v19 = "true";
      else
        v19 = "false";
      v20 = *(unsigned __int8 *)(a1 + 233);
      if (*(_BYTE *)(a1 + 232))
        v21 = "true";
      else
        v21 = "false";
      *(_DWORD *)buf = 136315650;
      v39 = v19;
      v40 = 2080;
      if (!v20)
        v18 = "false";
      v41 = v21;
      v42 = 2080;
      v43 = v18;
      _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Not sending budget to BB due to this condition: BrickMode: %s, Baseband is ready: %s, Baseband is online: %s", buf, 0x20u);
    }
  }
}

void sub_1BF6BDF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN10CPMSModule24sendPowerBudgetToBB_syncE11PowerBudget_block_invoke(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint64_t (*v12)(uint64_t);
  const char *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v12 = 0;
        if (v12)
          v13 = "failed";
        else
          v13 = "succeeded";
        PowerBudget::to_string((PowerBudget *)(a1 + 7), __p);
        if (v16 >= 0)
          v14 = __p;
        else
          v14 = (void **)__p[0];
        *(_DWORD *)buf = 136315394;
        v18 = v13;
        v19 = 2080;
        v20 = v14;
        _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Sent power budget to baseband %s for %s", buf, 0x16u);
        if (v16 < 0)
          operator delete(__p[0]);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a1[8] = 0;
  a1[7] = a1 + 8;
  a1[9] = 0;
  a1[10] = 0;
  if ((_QWORD *)a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)(a1 + 7), *(_QWORD **)(a2 + 56), (_QWORD *)(a2 + 64));
  result = objc_msgSend(*(id *)(a2 + 80), "copy");
  a1[10] = result;
  return result;
}

void sub_1BF6BE19C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(_QWORD **)(v1 + 64));
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 56) = v3;
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c17_ZTS11PowerBudget(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  v2 = a1 + 64;
  v3 = a1 + 56;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1 + 56, *(_QWORD **)(a1 + 64));
  *(_QWORD *)(v2 - 8) = v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;

  *(_QWORD *)(a1 + 80) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v3, *(_QWORD **)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void CPMSModule::ackPowerBudgetToCPMS_sync(uint64_t a1, id *a2)
{
  int v4;
  NSObject *v5;
  const char *v6;
  int v7;
  const char *v8;
  __int16 v9;
  id NSDict;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(*(id *)(a1 + 168), "acknowledgePowerBudget:forClientId:error:", PowerBudget::getNSDict(a2), 4, 0);
  v5 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
      v6 = "succeeded";
    else
      v6 = "failed";
    v7 = 136315394;
    v8 = v6;
    v9 = 2112;
    NSDict = PowerBudget::getNSDict(a2);
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", (uint8_t *)&v7, 0x16u);
  }
}

void CPMSModule::getCPMSBudgetPlistPath(CPMSModule *this@<X0>, void **a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  unsigned int v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  _WORD *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  _WORD *v22;
  std::string *v23;
  __int128 v24;
  std::string::size_type v25;
  char v26;
  NSObject *v27;
  std::string::size_type v28;
  _OWORD v29[4];
  std::string::value_type v30[8];
  char v31;
  void *v32[2];
  char v33;
  std::string::value_type __s[23];
  char v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, 24);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  *(_OWORD *)&v36.__r_.__value_.__r.__words[1] = xmmword_1BF7435E0;
  strcpy(v36.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/AppleBasebandManager.framework/");
  qmemcpy(v29, "anager.frameworks/AppleBasebandMPrivateFramework/System/Library/", sizeof(v29));
  v35 = 12;
  strcpy(__s, "cpms.budgets");
  v4 = std::string::append(&v36, __s, 0xCuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v33 = 10;
  strcpy((char *)v32, ".override.");
  v6 = std::string::append(&v37, (const std::string::value_type *)v32, 0xAuLL);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = capabilities::radio::product((capabilities::radio *)v6);
  std::to_string(&v39, v8);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v39;
  else
    v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    size = v39.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v38, (const std::string::value_type *)v9, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v31 = 6;
  strcpy(v30, ".plist");
  v13 = std::string::append(&v40, v30, 6uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  a2[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)a2 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v31 < 0)
  {
    operator delete(*(void **)v30);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v39.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_11:
    if ((v33 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((v33 & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(v32[0]);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_13:
    if ((v35 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_24:
    operator delete(*(void **)__s);
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_25;
  }
LABEL_23:
  operator delete(v37.__r_.__value_.__l.__data_);
  if (v35 < 0)
    goto LABEL_24;
LABEL_14:
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_25:
  operator delete(v36.__r_.__value_.__l.__data_);
LABEL_15:
  v15 = ctu::fs::file_exists();
  if ((v15 & 1) != 0)
    goto LABEL_35;
  if (config::hw::watch((config::hw *)v15))
  {
    v16 = operator new(0x48uLL);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1BF7435E0;
    v16[32] = 47;
    *(_OWORD *)v16 = v29[3];
    *((_OWORD *)v16 + 1) = v29[2];
    *((_OWORD *)v16 + 2) = v29[1];
    *((_OWORD *)v16 + 3) = v29[0];
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v36, "cpms.budgets");
    v17 = std::string::append(&v37, (const std::string::value_type *)&v36, 0xCuLL);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v35 = 6;
    strcpy(__s, ".watch");
    v19 = std::string::append(&v38, __s, 6uLL);
  }
  else
  {
    v22 = operator new(0x48uLL);
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
    *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = xmmword_1BF7435E0;
    v22[32] = 47;
    *(_OWORD *)v22 = v29[3];
    *((_OWORD *)v22 + 1) = v29[2];
    *((_OWORD *)v22 + 2) = v29[1];
    *((_OWORD *)v22 + 3) = v29[0];
    *((_BYTE *)&v36.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v36, "cpms.budgets");
    v23 = std::string::append(&v37, (const std::string::value_type *)&v36, 0xCuLL);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v35 = 7;
    strcpy(__s, ".iphone");
    v19 = std::string::append(&v38, __s, 7uLL);
  }
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v40.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v33 = 6;
  strcpy((char *)v32, ".plist");
  v21 = std::string::append(&v40, (const std::string::value_type *)v32, 6uLL);
  v25 = v21->__r_.__value_.__r.__words[0];
  v39.__r_.__value_.__r.__words[0] = v21->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
  v26 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a2 + 23) < 0)
    operator delete(*a2);
  *a2 = (void *)v25;
  a2[1] = (void *)v39.__r_.__value_.__r.__words[0];
  *(void **)((char *)a2 + 15) = *(void **)((char *)v39.__r_.__value_.__r.__words + 7);
  *((_BYTE *)a2 + 23) = v26;
  if (v33 < 0)
  {
    operator delete(v32[0]);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      if ((v35 & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v40.__r_.__value_.__l.__data_);
  if ((v35 & 0x80000000) == 0)
  {
LABEL_32:
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(*(void **)__s);
  if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_33:
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(v38.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_34:
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_46;
  }
LABEL_45:
  operator delete(v36.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_35:
    v27 = *((_QWORD *)this + 11);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      return;
    goto LABEL_36;
  }
LABEL_46:
  operator delete(v37.__r_.__value_.__l.__data_);
  v27 = *((_QWORD *)this + 11);
  if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    return;
LABEL_36:
  if (*((char *)a2 + 23) >= 0)
    v28 = (std::string::size_type)a2;
  else
    v28 = (std::string::size_type)*a2;
  LODWORD(v40.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v40.__r_.__value_.__r.__words + 4) = v28;
  _os_log_impl(&dword_1BF566000, v27, OS_LOG_TYPE_DEFAULT, "#I CPMS Power Budget List: %s", (uint8_t *)&v40, 0xCu);
}

void sub_1BF6BE91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;

  if (a30 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v49 - 73) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a36 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(v49 - 73) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v49 - 96));
  if ((a36 & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v49 - 121) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a31);
  if ((*(char *)(v49 - 121) & 0x80000000) == 0)
  {
LABEL_5:
    if ((a42 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(v49 - 144));
  if ((a42 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a48 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  operator delete(a37);
  if ((a48 & 0x80000000) == 0)
  {
LABEL_7:
    if ((*(char *)(v48 + 23) & 0x80000000) == 0)
LABEL_16:
      _Unwind_Resume(exception_object);
LABEL_15:
    operator delete(*(void **)v48);
    goto LABEL_16;
  }
LABEL_14:
  operator delete(a43);
  if ((*(char *)(v48 + 23) & 0x80000000) == 0)
    goto LABEL_16;
  goto LABEL_15;
}

uint64_t *CPMSModule::initPowerConfig_sync(void)::$_1::operator()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v8;
  id v9;
  int v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t v13;
  id v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t **v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t **v25;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *result;
  int v32;
  unsigned __int8 *v33;
  uint64_t **v34;
  _QWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned __int8 *v40;
  unsigned __int8 **v41;
  unsigned __int8 **v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  id v47;
  int v48;
  unsigned __int8 *v49;
  uint64_t **v50;
  _QWORD *v51;
  unsigned int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  unsigned __int8 *v57;
  uint64_t **v58;
  _QWORD *v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t **v66;
  _QWORD *v67;
  unsigned int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  unsigned __int8 *v72;
  unsigned int v73;
  char v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t *v77;
  int v78;
  uint64_t *v79;
  uint64_t **v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  uint64_t *v85;
  uint64_t **v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned __int8 **v90;
  uint64_t v91;
  int v92;
  uint64_t **v93;
  unsigned __int8 *v94;
  uint64_t **v95;
  _QWORD *v96;
  unsigned int v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  int v101;
  uint64_t **v102;
  unsigned __int8 *v103;
  uint64_t **v104;
  _QWORD *v105;
  unsigned int v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t *v109;
  int v110;
  uint64_t **v111;
  unsigned __int8 *v112;
  uint64_t **v113;
  _QWORD *v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  unsigned __int8 *v119;
  uint64_t **v120;
  _QWORD *v121;
  unsigned int v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  int v126;
  uint64_t *v127;
  uint64_t **v128;
  uint64_t **v129;
  unsigned int v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t *v133;
  int v134;
  uint64_t *v135;
  uint64_t **v136;
  uint64_t **v137;
  unsigned int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t *v141;
  int v142;
  uint64_t *v143;
  uint64_t **v144;
  uint64_t **v145;
  unsigned int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t *v149;
  unsigned __int8 *v150;
  uint64_t **v151;
  _QWORD *v152;
  unsigned int v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t *v156;
  int v157;
  unsigned __int8 *v158;
  uint64_t **v159;
  _QWORD *v160;
  unsigned int v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t *v164;
  int v165;
  unsigned __int8 *v166;
  uint64_t **v167;
  _QWORD *v168;
  unsigned int v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t *v172;
  int v173;
  unsigned __int8 *v174;
  uint64_t **v175;
  _QWORD *v176;
  unsigned int v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t *v180;
  unsigned __int8 *v181;
  uint64_t **v182;
  _QWORD *v183;
  unsigned int v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t *v187;
  int v188;
  unsigned __int8 *v189;
  _QWORD *v190;
  unsigned int v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t *v194;
  int v195;
  unsigned __int8 *v196;
  _QWORD *v197;
  unsigned int v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t *v201;
  int v202;
  unsigned __int8 *v203;
  _QWORD *v204;
  unsigned int v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t *v208;
  unsigned __int8 *v209;
  unsigned int v210;

  v8 = *MEMORY[0x1E0D09960];
  if (objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D09960]))
  {
    v9 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v9, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Min")));
    objc_msgSend(v9, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Max")));
    objc_msgSend(a4, "setObject:forKey:", v9, v8);
    v10 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
    v11 = *(uint64_t **)(a1 + 280);
    if (v11)
    {
      while (1)
      {
        v12 = (uint64_t **)v11;
        if (!*((_BYTE *)v11 + 28))
          break;
        v11 = (uint64_t *)*v11;
        if (!*v12)
          goto LABEL_85;
      }
      v75 = v11;
    }
    else
    {
      v12 = (uint64_t **)(a1 + 280);
LABEL_85:
      v75 = operator new(0x28uLL);
      v75[28] = 0;
      v75[32] = 0;
      v75[36] = 0;
      *(_QWORD *)v75 = 0;
      *((_QWORD *)v75 + 1) = 0;
      *((_QWORD *)v75 + 2) = v12;
      *v12 = (uint64_t *)v75;
      v76 = **(_QWORD **)(a1 + 272);
      v77 = (uint64_t *)v75;
      if (v76)
      {
        *(_QWORD *)(a1 + 272) = v76;
        v77 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v77);
      ++*(_QWORD *)(a1 + 288);
    }
    *((_DWORD *)v75 + 8) = v10;
    v75[36] = 1;
    v78 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
    v79 = *(uint64_t **)(a1 + 312);
    if (v79)
    {
      while (1)
      {
        v80 = (uint64_t **)v79;
        if (!*((_BYTE *)v79 + 28))
          break;
        v79 = (uint64_t *)*v79;
        if (!*v80)
          goto LABEL_94;
      }
      v81 = v79;
    }
    else
    {
      v80 = (uint64_t **)(a1 + 312);
LABEL_94:
      v81 = operator new(0x28uLL);
      v81[28] = 0;
      v81[32] = 0;
      v81[36] = 0;
      *(_QWORD *)v81 = 0;
      *((_QWORD *)v81 + 1) = 0;
      *((_QWORD *)v81 + 2) = v80;
      *v80 = (uint64_t *)v81;
      v82 = **(_QWORD **)(a1 + 304);
      v83 = (uint64_t *)v81;
      if (v82)
      {
        *(_QWORD *)(a1 + 304) = v82;
        v83 = *v80;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v83);
      ++*(_QWORD *)(a1 + 320);
    }
    *((_DWORD *)v81 + 8) = v78;
    v81[36] = 1;
    result = (uint64_t *)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
    v84 = (int)result;
    v85 = *(uint64_t **)(a1 + 344);
    if (v85)
    {
      while (1)
      {
        v86 = (uint64_t **)v85;
        if (!*((_BYTE *)v85 + 28))
          break;
        v85 = (uint64_t *)*v85;
        if (!*v86)
          goto LABEL_103;
      }
      *((_DWORD *)v85 + 8) = (_DWORD)result;
      *((_BYTE *)v85 + 36) = 1;
      v90 = *(unsigned __int8 ***)(a1 + 376);
      if (v90)
        goto LABEL_106;
    }
    else
    {
      v86 = (uint64_t **)(a1 + 344);
LABEL_103:
      v87 = operator new(0x28uLL);
      v87[28] = 0;
      v87[32] = 0;
      v87[36] = 0;
      *(_QWORD *)v87 = 0;
      *((_QWORD *)v87 + 1) = 0;
      *((_QWORD *)v87 + 2) = v86;
      *v86 = (uint64_t *)v87;
      v88 = **(_QWORD **)(a1 + 336);
      v89 = (uint64_t *)v87;
      if (v88)
      {
        *(_QWORD *)(a1 + 336) = v88;
        v89 = *v86;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v89);
      ++*(_QWORD *)(a1 + 352);
      *((_DWORD *)v87 + 8) = v84;
      v87[36] = 1;
      v90 = *(unsigned __int8 ***)(a1 + 376);
      if (v90)
      {
LABEL_106:
        while (1)
        {
          v41 = v90;
          if (!*((_BYTE *)v90 + 28))
            break;
          v90 = (unsigned __int8 **)*v90;
          if (!*v41)
            goto LABEL_111;
        }
        v42 = v90;
        goto LABEL_277;
      }
    }
    v41 = (unsigned __int8 **)(a1 + 376);
LABEL_111:
    v45 = (unsigned __int8 *)operator new(0x28uLL);
    v45[28] = 0;
    v45[32] = 0;
    v45[36] = 0;
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    *((_QWORD *)v45 + 2) = v41;
    *v41 = v45;
    v91 = **(_QWORD **)(a1 + 368);
    if (!v91)
      goto LABEL_112;
LABEL_275:
    *(_QWORD *)(a1 + 368) = v91;
    v42 = (unsigned __int8 **)v45;
    v45 = *v41;
    goto LABEL_276;
  }
  v13 = *MEMORY[0x1E0D09958];
  if (objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D09958]))
  {
    v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    objc_msgSend(v14, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Min")));
    objc_msgSend(v14, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Max")));
    objc_msgSend(a4, "setObject:forKey:", v14, v13);
    v15 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
    v16 = *(unsigned __int8 **)(a1 + 280);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          v18 = v16;
          v19 = v16[28];
          if (v19 < 2)
            break;
          v16 = (unsigned __int8 *)*v18;
          v17 = (uint64_t **)v18;
          if (!*v18)
            goto LABEL_14;
        }
        if (v19)
          break;
        v16 = (unsigned __int8 *)v18[1];
        if (!v16)
        {
          v17 = (uint64_t **)(v18 + 1);
          goto LABEL_14;
        }
      }
    }
    else
    {
      v17 = (uint64_t **)(a1 + 280);
      v18 = (_QWORD *)(a1 + 280);
LABEL_14:
      v20 = v18;
      v18 = operator new(0x28uLL);
      *((_BYTE *)v18 + 28) = 1;
      *((_BYTE *)v18 + 32) = 0;
      *((_BYTE *)v18 + 36) = 0;
      *v18 = 0;
      v18[1] = 0;
      v18[2] = v20;
      *v17 = v18;
      v21 = **(_QWORD **)(a1 + 272);
      v22 = v18;
      if (v21)
      {
        *(_QWORD *)(a1 + 272) = v21;
        v22 = *v17;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v22);
      ++*(_QWORD *)(a1 + 288);
    }
    *((_DWORD *)v18 + 8) = v15;
    *((_BYTE *)v18 + 36) = 1;
    v23 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
    v24 = *(unsigned __int8 **)(a1 + 312);
    if (v24)
    {
      while (1)
      {
        while (1)
        {
          v26 = v24;
          v27 = v24[28];
          if (v27 < 2)
            break;
          v24 = (unsigned __int8 *)*v26;
          v25 = (uint64_t **)v26;
          if (!*v26)
            goto LABEL_24;
        }
        if (v27)
          break;
        v24 = (unsigned __int8 *)v26[1];
        if (!v24)
        {
          v25 = (uint64_t **)(v26 + 1);
          goto LABEL_24;
        }
      }
    }
    else
    {
      v25 = (uint64_t **)(a1 + 312);
      v26 = (_QWORD *)(a1 + 312);
LABEL_24:
      v28 = v26;
      v26 = operator new(0x28uLL);
      *((_BYTE *)v26 + 28) = 1;
      *((_BYTE *)v26 + 32) = 0;
      *((_BYTE *)v26 + 36) = 0;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = v28;
      *v25 = v26;
      v29 = **(_QWORD **)(a1 + 304);
      v30 = v26;
      if (v29)
      {
        *(_QWORD *)(a1 + 304) = v29;
        v30 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v30);
      ++*(_QWORD *)(a1 + 320);
    }
    *((_DWORD *)v26 + 8) = v23;
    *((_BYTE *)v26 + 36) = 1;
    result = (uint64_t *)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
    v32 = (int)result;
    v33 = *(unsigned __int8 **)(a1 + 344);
    if (v33)
    {
      while (1)
      {
        while (1)
        {
          v35 = v33;
          v36 = v33[28];
          if (v36 < 2)
            break;
          v33 = (unsigned __int8 *)*v35;
          v34 = (uint64_t **)v35;
          if (!*v35)
            goto LABEL_34;
        }
        if (v36)
          break;
        v33 = (unsigned __int8 *)v35[1];
        if (!v33)
        {
          v34 = (uint64_t **)(v35 + 1);
          goto LABEL_34;
        }
      }
    }
    else
    {
      v34 = (uint64_t **)(a1 + 344);
      v35 = (_QWORD *)(a1 + 344);
LABEL_34:
      v37 = v35;
      v35 = operator new(0x28uLL);
      *((_BYTE *)v35 + 28) = 1;
      *((_BYTE *)v35 + 32) = 0;
      *((_BYTE *)v35 + 36) = 0;
      *v35 = 0;
      v35[1] = 0;
      v35[2] = v37;
      *v34 = v35;
      v38 = **(_QWORD **)(a1 + 336);
      v39 = v35;
      if (v38)
      {
        *(_QWORD *)(a1 + 336) = v38;
        v39 = *v34;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v39);
      ++*(_QWORD *)(a1 + 352);
    }
    *((_DWORD *)v35 + 8) = v32;
    *((_BYTE *)v35 + 36) = 1;
    v40 = *(unsigned __int8 **)(a1 + 376);
    if (v40)
    {
      while (1)
      {
        while (1)
        {
          v42 = (unsigned __int8 **)v40;
          v43 = v40[28];
          if (v43 < 2)
            break;
          v40 = *v42;
          v41 = v42;
          if (!*v42)
            goto LABEL_44;
        }
        if (v43)
          goto LABEL_277;
        v40 = v42[1];
        if (!v40)
        {
          v41 = v42 + 1;
          goto LABEL_44;
        }
      }
    }
    v41 = (unsigned __int8 **)(a1 + 376);
    v42 = (unsigned __int8 **)(a1 + 376);
LABEL_44:
    v44 = (unsigned __int8 *)operator new(0x28uLL);
    v45 = v44;
    v44[28] = 1;
  }
  else
  {
    v46 = *MEMORY[0x1E0D09970];
    if (objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D09970]))
    {
      v47 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      objc_msgSend(v47, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Min")));
      objc_msgSend(v47, "addObject:", objc_msgSend(a3, "valueForKey:", CFSTR("Max")));
      objc_msgSend(a4, "setObject:forKey:", v47, v46);
      v48 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v49 = *(unsigned __int8 **)(a1 + 280);
      if (v49)
      {
        while (1)
        {
          while (1)
          {
            v51 = v49;
            v52 = v49[28];
            if (v52 < 3)
              break;
            v49 = (unsigned __int8 *)*v51;
            v50 = (uint64_t **)v51;
            if (!*v51)
              goto LABEL_53;
          }
          if (v52 == 2)
            break;
          v49 = (unsigned __int8 *)v51[1];
          if (!v49)
          {
            v50 = (uint64_t **)(v51 + 1);
            goto LABEL_53;
          }
        }
      }
      else
      {
        v50 = (uint64_t **)(a1 + 280);
        v51 = (_QWORD *)(a1 + 280);
LABEL_53:
        v53 = v51;
        v51 = operator new(0x28uLL);
        *((_BYTE *)v51 + 28) = 2;
        *((_BYTE *)v51 + 32) = 0;
        *((_BYTE *)v51 + 36) = 0;
        *v51 = 0;
        v51[1] = 0;
        v51[2] = v53;
        *v50 = v51;
        v54 = **(_QWORD **)(a1 + 272);
        v55 = v51;
        if (v54)
        {
          *(_QWORD *)(a1 + 272) = v54;
          v55 = *v50;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v55);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v51 + 8) = v48;
      *((_BYTE *)v51 + 36) = 1;
      v56 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v57 = *(unsigned __int8 **)(a1 + 312);
      if (v57)
      {
        while (1)
        {
          while (1)
          {
            v59 = v57;
            v60 = v57[28];
            if (v60 < 3)
              break;
            v57 = (unsigned __int8 *)*v59;
            v58 = (uint64_t **)v59;
            if (!*v59)
              goto LABEL_63;
          }
          if (v60 == 2)
            break;
          v57 = (unsigned __int8 *)v59[1];
          if (!v57)
          {
            v58 = (uint64_t **)(v59 + 1);
            goto LABEL_63;
          }
        }
      }
      else
      {
        v58 = (uint64_t **)(a1 + 312);
        v59 = (_QWORD *)(a1 + 312);
LABEL_63:
        v61 = v59;
        v59 = operator new(0x28uLL);
        *((_BYTE *)v59 + 28) = 2;
        *((_BYTE *)v59 + 32) = 0;
        *((_BYTE *)v59 + 36) = 0;
        *v59 = 0;
        v59[1] = 0;
        v59[2] = v61;
        *v58 = v59;
        v62 = **(_QWORD **)(a1 + 304);
        v63 = v59;
        if (v62)
        {
          *(_QWORD *)(a1 + 304) = v62;
          v63 = *v58;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v63);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v59 + 8) = v56;
      *((_BYTE *)v59 + 36) = 1;
      result = (uint64_t *)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v64 = (int)result;
      v65 = *(unsigned __int8 **)(a1 + 344);
      if (v65)
      {
        while (1)
        {
          while (1)
          {
            v67 = v65;
            v68 = v65[28];
            if (v68 < 3)
              break;
            v65 = (unsigned __int8 *)*v67;
            v66 = (uint64_t **)v67;
            if (!*v67)
              goto LABEL_73;
          }
          if (v68 == 2)
            break;
          v65 = (unsigned __int8 *)v67[1];
          if (!v65)
          {
            v66 = (uint64_t **)(v67 + 1);
            goto LABEL_73;
          }
        }
      }
      else
      {
        v66 = (uint64_t **)(a1 + 344);
        v67 = (_QWORD *)(a1 + 344);
LABEL_73:
        v69 = v67;
        v67 = operator new(0x28uLL);
        *((_BYTE *)v67 + 28) = 2;
        *((_BYTE *)v67 + 32) = 0;
        *((_BYTE *)v67 + 36) = 0;
        *v67 = 0;
        v67[1] = 0;
        v67[2] = v69;
        *v66 = v67;
        v70 = **(_QWORD **)(a1 + 336);
        v71 = v67;
        if (v70)
        {
          *(_QWORD *)(a1 + 336) = v70;
          v71 = *v66;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v71);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v67 + 8) = v64;
      *((_BYTE *)v67 + 36) = 1;
      v72 = *(unsigned __int8 **)(a1 + 376);
      if (v72)
      {
        while (1)
        {
          while (1)
          {
            v42 = (unsigned __int8 **)v72;
            v73 = v72[28];
            if (v73 < 3)
              break;
            v72 = *v42;
            v41 = v42;
            if (!*v42)
              goto LABEL_83;
          }
          if (v73 == 2)
            goto LABEL_277;
          v72 = v42[1];
          if (!v72)
          {
            v41 = v42 + 1;
            goto LABEL_83;
          }
        }
      }
      v41 = (unsigned __int8 **)(a1 + 376);
      v42 = (unsigned __int8 **)(a1 + 376);
LABEL_83:
      v44 = (unsigned __int8 *)operator new(0x28uLL);
      v45 = v44;
      v74 = 2;
    }
    else
    {
      result = (uint64_t *)objc_msgSend(a2, "isEqualToString:", *MEMORY[0x1E0D09988]);
      if (!(_DWORD)result)
        return result;
      v92 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v93 = (uint64_t **)(a1 + 280);
      v94 = *(unsigned __int8 **)(a1 + 280);
      v95 = (uint64_t **)(a1 + 280);
      v96 = (_QWORD *)(a1 + 280);
      if (v94)
      {
        while (1)
        {
          while (1)
          {
            v96 = v94;
            v97 = v94[28];
            if (v97 < 0xB)
              break;
            v94 = (unsigned __int8 *)*v96;
            v95 = (uint64_t **)v96;
            if (!*v96)
              goto LABEL_122;
          }
          if (v97 == 10)
            break;
          v94 = (unsigned __int8 *)v96[1];
          if (!v94)
          {
            v95 = (uint64_t **)(v96 + 1);
            goto LABEL_122;
          }
        }
      }
      else
      {
LABEL_122:
        v98 = v96;
        v96 = operator new(0x28uLL);
        *((_BYTE *)v96 + 28) = 10;
        *((_BYTE *)v96 + 32) = 0;
        *((_BYTE *)v96 + 36) = 0;
        *v96 = 0;
        v96[1] = 0;
        v96[2] = v98;
        *v95 = v96;
        v99 = **(_QWORD **)(a1 + 272);
        v100 = v96;
        if (v99)
        {
          *(_QWORD *)(a1 + 272) = v99;
          v100 = *v95;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v100);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v96 + 8) = v92;
      *((_BYTE *)v96 + 36) = 1;
      v101 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v102 = (uint64_t **)(a1 + 312);
      v103 = *(unsigned __int8 **)(a1 + 312);
      v104 = (uint64_t **)(a1 + 312);
      v105 = (_QWORD *)(a1 + 312);
      if (v103)
      {
        while (1)
        {
          while (1)
          {
            v105 = v103;
            v106 = v103[28];
            if (v106 < 0xB)
              break;
            v103 = (unsigned __int8 *)*v105;
            v104 = (uint64_t **)v105;
            if (!*v105)
              goto LABEL_132;
          }
          if (v106 == 10)
            break;
          v103 = (unsigned __int8 *)v105[1];
          if (!v103)
          {
            v104 = (uint64_t **)(v105 + 1);
            goto LABEL_132;
          }
        }
      }
      else
      {
LABEL_132:
        v107 = v105;
        v105 = operator new(0x28uLL);
        *((_BYTE *)v105 + 28) = 10;
        *((_BYTE *)v105 + 32) = 0;
        *((_BYTE *)v105 + 36) = 0;
        *v105 = 0;
        v105[1] = 0;
        v105[2] = v107;
        *v104 = v105;
        v108 = **(_QWORD **)(a1 + 304);
        v109 = v105;
        if (v108)
        {
          *(_QWORD *)(a1 + 304) = v108;
          v109 = *v104;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v109);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v105 + 8) = v101;
      *((_BYTE *)v105 + 36) = 1;
      v110 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v111 = (uint64_t **)(a1 + 344);
      v112 = *(unsigned __int8 **)(a1 + 344);
      v113 = (uint64_t **)(a1 + 344);
      v114 = (_QWORD *)(a1 + 344);
      if (v112)
      {
        while (1)
        {
          while (1)
          {
            v114 = v112;
            v115 = v112[28];
            if (v115 < 0xB)
              break;
            v112 = (unsigned __int8 *)*v114;
            v113 = (uint64_t **)v114;
            if (!*v114)
              goto LABEL_142;
          }
          if (v115 == 10)
            break;
          v112 = (unsigned __int8 *)v114[1];
          if (!v112)
          {
            v113 = (uint64_t **)(v114 + 1);
            goto LABEL_142;
          }
        }
      }
      else
      {
LABEL_142:
        v116 = v114;
        v114 = operator new(0x28uLL);
        *((_BYTE *)v114 + 28) = 10;
        *((_BYTE *)v114 + 32) = 0;
        *((_BYTE *)v114 + 36) = 0;
        *v114 = 0;
        v114[1] = 0;
        v114[2] = v116;
        *v113 = v114;
        v117 = **(_QWORD **)(a1 + 336);
        v118 = v114;
        if (v117)
        {
          *(_QWORD *)(a1 + 336) = v117;
          v118 = *v113;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v118);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v114 + 8) = v110;
      *((_BYTE *)v114 + 36) = 1;
      v41 = (unsigned __int8 **)(a1 + 376);
      v119 = *(unsigned __int8 **)(a1 + 376);
      v120 = (uint64_t **)(a1 + 376);
      v121 = (_QWORD *)(a1 + 376);
      if (v119)
      {
        while (1)
        {
          while (1)
          {
            v121 = v119;
            v122 = v119[28];
            if (v122 < 0xB)
              break;
            v119 = (unsigned __int8 *)*v121;
            v120 = (uint64_t **)v121;
            if (!*v121)
              goto LABEL_152;
          }
          if (v122 == 10)
            break;
          v119 = (unsigned __int8 *)v121[1];
          if (!v119)
          {
            v120 = (uint64_t **)(v121 + 1);
            goto LABEL_152;
          }
        }
      }
      else
      {
LABEL_152:
        v123 = v121;
        v121 = operator new(0x28uLL);
        *((_BYTE *)v121 + 28) = 10;
        *((_BYTE *)v121 + 32) = 0;
        *((_BYTE *)v121 + 36) = 0;
        *v121 = 0;
        v121[1] = 0;
        v121[2] = v123;
        *v120 = v121;
        v124 = **(_QWORD **)(a1 + 368);
        v125 = v121;
        if (v124)
        {
          *(_QWORD *)(a1 + 368) = v124;
          v125 = *v120;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v125);
        ++*(_QWORD *)(a1 + 384);
      }
      *((_DWORD *)v121 + 8) = 1;
      *((_BYTE *)v121 + 36) = 1;
      v126 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v127 = *v93;
      v128 = (uint64_t **)(a1 + 280);
      v129 = (uint64_t **)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v129 = (uint64_t **)v127;
            v130 = *((unsigned __int8 *)v127 + 28);
            if (v130 < 0xC)
              break;
            v127 = *v129;
            v128 = v129;
            if (!*v129)
              goto LABEL_162;
          }
          if (v130 == 11)
            break;
          v127 = v129[1];
          if (!v127)
          {
            v128 = v129 + 1;
            goto LABEL_162;
          }
        }
      }
      else
      {
LABEL_162:
        v131 = (uint64_t *)v129;
        v129 = (uint64_t **)operator new(0x28uLL);
        *((_BYTE *)v129 + 28) = 11;
        *((_BYTE *)v129 + 32) = 0;
        *((_BYTE *)v129 + 36) = 0;
        *v129 = 0;
        v129[1] = 0;
        v129[2] = v131;
        *v128 = (uint64_t *)v129;
        v132 = **(_QWORD **)(a1 + 272);
        v133 = (uint64_t *)v129;
        if (v132)
        {
          *(_QWORD *)(a1 + 272) = v132;
          v133 = *v128;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v133);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v129 + 8) = v126;
      *((_BYTE *)v129 + 36) = 1;
      v134 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v135 = *v102;
      v136 = (uint64_t **)(a1 + 312);
      v137 = (uint64_t **)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v137 = (uint64_t **)v135;
            v138 = *((unsigned __int8 *)v135 + 28);
            if (v138 < 0xC)
              break;
            v135 = *v137;
            v136 = v137;
            if (!*v137)
              goto LABEL_172;
          }
          if (v138 == 11)
            break;
          v135 = v137[1];
          if (!v135)
          {
            v136 = v137 + 1;
            goto LABEL_172;
          }
        }
      }
      else
      {
LABEL_172:
        v139 = (uint64_t *)v137;
        v137 = (uint64_t **)operator new(0x28uLL);
        *((_BYTE *)v137 + 28) = 11;
        *((_BYTE *)v137 + 32) = 0;
        *((_BYTE *)v137 + 36) = 0;
        *v137 = 0;
        v137[1] = 0;
        v137[2] = v139;
        *v136 = (uint64_t *)v137;
        v140 = **(_QWORD **)(a1 + 304);
        v141 = (uint64_t *)v137;
        if (v140)
        {
          *(_QWORD *)(a1 + 304) = v140;
          v141 = *v136;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v141);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v137 + 8) = v134;
      *((_BYTE *)v137 + 36) = 1;
      v142 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v143 = *v111;
      v144 = (uint64_t **)(a1 + 344);
      v145 = (uint64_t **)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v145 = (uint64_t **)v143;
            v146 = *((unsigned __int8 *)v143 + 28);
            if (v146 < 0xC)
              break;
            v143 = *v145;
            v144 = v145;
            if (!*v145)
              goto LABEL_182;
          }
          if (v146 == 11)
            break;
          v143 = v145[1];
          if (!v143)
          {
            v144 = v145 + 1;
            goto LABEL_182;
          }
        }
      }
      else
      {
LABEL_182:
        v147 = (uint64_t *)v145;
        v145 = (uint64_t **)operator new(0x28uLL);
        *((_BYTE *)v145 + 28) = 11;
        *((_BYTE *)v145 + 32) = 0;
        *((_BYTE *)v145 + 36) = 0;
        *v145 = 0;
        v145[1] = 0;
        v145[2] = v147;
        *v144 = (uint64_t *)v145;
        v148 = **(_QWORD **)(a1 + 336);
        v149 = (uint64_t *)v145;
        if (v148)
        {
          *(_QWORD *)(a1 + 336) = v148;
          v149 = *v144;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v149);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v145 + 8) = v142;
      *((_BYTE *)v145 + 36) = 1;
      v150 = *v41;
      v151 = (uint64_t **)(a1 + 376);
      v152 = (_QWORD *)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            v152 = v150;
            v153 = v150[28];
            if (v153 < 0xC)
              break;
            v150 = (unsigned __int8 *)*v152;
            v151 = (uint64_t **)v152;
            if (!*v152)
              goto LABEL_192;
          }
          if (v153 == 11)
            break;
          v150 = (unsigned __int8 *)v152[1];
          if (!v150)
          {
            v151 = (uint64_t **)(v152 + 1);
            goto LABEL_192;
          }
        }
      }
      else
      {
LABEL_192:
        v154 = v152;
        v152 = operator new(0x28uLL);
        *((_BYTE *)v152 + 28) = 11;
        *((_BYTE *)v152 + 32) = 0;
        *((_BYTE *)v152 + 36) = 0;
        *v152 = 0;
        v152[1] = 0;
        v152[2] = v154;
        *v151 = v152;
        v155 = **(_QWORD **)(a1 + 368);
        v156 = v152;
        if (v155)
        {
          *(_QWORD *)(a1 + 368) = v155;
          v156 = *v151;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v156);
        ++*(_QWORD *)(a1 + 384);
      }
      *((_DWORD *)v152 + 8) = 1;
      *((_BYTE *)v152 + 36) = 1;
      v157 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v158 = (unsigned __int8 *)*v93;
      v159 = (uint64_t **)(a1 + 280);
      v160 = (_QWORD *)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v160 = v158;
            v161 = v158[28];
            if (v161 < 0xD)
              break;
            v158 = (unsigned __int8 *)*v160;
            v159 = (uint64_t **)v160;
            if (!*v160)
              goto LABEL_202;
          }
          if (v161 == 12)
            break;
          v158 = (unsigned __int8 *)v160[1];
          if (!v158)
          {
            v159 = (uint64_t **)(v160 + 1);
            goto LABEL_202;
          }
        }
      }
      else
      {
LABEL_202:
        v162 = v160;
        v160 = operator new(0x28uLL);
        *((_BYTE *)v160 + 28) = 12;
        *((_BYTE *)v160 + 32) = 0;
        *((_BYTE *)v160 + 36) = 0;
        *v160 = 0;
        v160[1] = 0;
        v160[2] = v162;
        *v159 = v160;
        v163 = **(_QWORD **)(a1 + 272);
        v164 = v160;
        if (v163)
        {
          *(_QWORD *)(a1 + 272) = v163;
          v164 = *v159;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v164);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v160 + 8) = v157;
      *((_BYTE *)v160 + 36) = 1;
      v165 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v166 = (unsigned __int8 *)*v102;
      v167 = (uint64_t **)(a1 + 312);
      v168 = (_QWORD *)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v168 = v166;
            v169 = v166[28];
            if (v169 < 0xD)
              break;
            v166 = (unsigned __int8 *)*v168;
            v167 = (uint64_t **)v168;
            if (!*v168)
              goto LABEL_212;
          }
          if (v169 == 12)
            break;
          v166 = (unsigned __int8 *)v168[1];
          if (!v166)
          {
            v167 = (uint64_t **)(v168 + 1);
            goto LABEL_212;
          }
        }
      }
      else
      {
LABEL_212:
        v170 = v168;
        v168 = operator new(0x28uLL);
        *((_BYTE *)v168 + 28) = 12;
        *((_BYTE *)v168 + 32) = 0;
        *((_BYTE *)v168 + 36) = 0;
        *v168 = 0;
        v168[1] = 0;
        v168[2] = v170;
        *v167 = v168;
        v171 = **(_QWORD **)(a1 + 304);
        v172 = v168;
        if (v171)
        {
          *(_QWORD *)(a1 + 304) = v171;
          v172 = *v167;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v172);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v168 + 8) = v165;
      *((_BYTE *)v168 + 36) = 1;
      v173 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v174 = (unsigned __int8 *)*v111;
      v175 = (uint64_t **)(a1 + 344);
      v176 = (_QWORD *)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v176 = v174;
            v177 = v174[28];
            if (v177 < 0xD)
              break;
            v174 = (unsigned __int8 *)*v176;
            v175 = (uint64_t **)v176;
            if (!*v176)
              goto LABEL_222;
          }
          if (v177 == 12)
            break;
          v174 = (unsigned __int8 *)v176[1];
          if (!v174)
          {
            v175 = (uint64_t **)(v176 + 1);
            goto LABEL_222;
          }
        }
      }
      else
      {
LABEL_222:
        v178 = v176;
        v176 = operator new(0x28uLL);
        *((_BYTE *)v176 + 28) = 12;
        *((_BYTE *)v176 + 32) = 0;
        *((_BYTE *)v176 + 36) = 0;
        *v176 = 0;
        v176[1] = 0;
        v176[2] = v178;
        *v175 = v176;
        v179 = **(_QWORD **)(a1 + 336);
        v180 = v176;
        if (v179)
        {
          *(_QWORD *)(a1 + 336) = v179;
          v180 = *v175;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v180);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v176 + 8) = v173;
      *((_BYTE *)v176 + 36) = 1;
      v181 = *v41;
      v182 = (uint64_t **)(a1 + 376);
      v183 = (_QWORD *)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            v183 = v181;
            v184 = v181[28];
            if (v184 < 0xD)
              break;
            v181 = (unsigned __int8 *)*v183;
            v182 = (uint64_t **)v183;
            if (!*v183)
              goto LABEL_232;
          }
          if (v184 == 12)
            break;
          v181 = (unsigned __int8 *)v183[1];
          if (!v181)
          {
            v182 = (uint64_t **)(v183 + 1);
            goto LABEL_232;
          }
        }
      }
      else
      {
LABEL_232:
        v185 = v183;
        v183 = operator new(0x28uLL);
        *((_BYTE *)v183 + 28) = 12;
        *((_BYTE *)v183 + 32) = 0;
        *((_BYTE *)v183 + 36) = 0;
        *v183 = 0;
        v183[1] = 0;
        v183[2] = v185;
        *v182 = v183;
        v186 = **(_QWORD **)(a1 + 368);
        v187 = v183;
        if (v186)
        {
          *(_QWORD *)(a1 + 368) = v186;
          v187 = *v182;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), v187);
        ++*(_QWORD *)(a1 + 384);
      }
      *((_DWORD *)v183 + 8) = 1;
      *((_BYTE *)v183 + 36) = 1;
      v188 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Min")), "unsignedIntValue");
      v189 = (unsigned __int8 *)*v93;
      v190 = (_QWORD *)(a1 + 280);
      if (*v93)
      {
        while (1)
        {
          while (1)
          {
            v190 = v189;
            v191 = v189[28];
            if (v191 < 0xE)
              break;
            v189 = (unsigned __int8 *)*v190;
            v93 = (uint64_t **)v190;
            if (!*v190)
              goto LABEL_242;
          }
          if (v191 == 13)
            break;
          v189 = (unsigned __int8 *)v190[1];
          if (!v189)
          {
            v93 = (uint64_t **)(v190 + 1);
            goto LABEL_242;
          }
        }
      }
      else
      {
LABEL_242:
        v192 = v190;
        v190 = operator new(0x28uLL);
        *((_BYTE *)v190 + 28) = 13;
        *((_BYTE *)v190 + 32) = 0;
        *((_BYTE *)v190 + 36) = 0;
        *v190 = 0;
        v190[1] = 0;
        v190[2] = v192;
        *v93 = v190;
        v193 = **(_QWORD **)(a1 + 272);
        v194 = v190;
        if (v193)
        {
          *(_QWORD *)(a1 + 272) = v193;
          v194 = *v93;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v194);
        ++*(_QWORD *)(a1 + 288);
      }
      *((_DWORD *)v190 + 8) = v188;
      *((_BYTE *)v190 + 36) = 1;
      v195 = objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Max")), "unsignedIntValue");
      v196 = (unsigned __int8 *)*v102;
      v197 = (_QWORD *)(a1 + 312);
      if (*v102)
      {
        while (1)
        {
          while (1)
          {
            v197 = v196;
            v198 = v196[28];
            if (v198 < 0xE)
              break;
            v196 = (unsigned __int8 *)*v197;
            v102 = (uint64_t **)v197;
            if (!*v197)
              goto LABEL_252;
          }
          if (v198 == 13)
            break;
          v196 = (unsigned __int8 *)v197[1];
          if (!v196)
          {
            v102 = (uint64_t **)(v197 + 1);
            goto LABEL_252;
          }
        }
      }
      else
      {
LABEL_252:
        v199 = v197;
        v197 = operator new(0x28uLL);
        *((_BYTE *)v197 + 28) = 13;
        *((_BYTE *)v197 + 32) = 0;
        *((_BYTE *)v197 + 36) = 0;
        *v197 = 0;
        v197[1] = 0;
        v197[2] = v199;
        *v102 = v197;
        v200 = **(_QWORD **)(a1 + 304);
        v201 = v197;
        if (v200)
        {
          *(_QWORD *)(a1 + 304) = v200;
          v201 = *v102;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 312), v201);
        ++*(_QWORD *)(a1 + 320);
      }
      *((_DWORD *)v197 + 8) = v195;
      *((_BYTE *)v197 + 36) = 1;
      result = (uint64_t *)objc_msgSend((id)objc_msgSend(a3, "valueForKey:", CFSTR("Idle")), "unsignedIntValue");
      v202 = (int)result;
      v203 = (unsigned __int8 *)*v111;
      v204 = (_QWORD *)(a1 + 344);
      if (*v111)
      {
        while (1)
        {
          while (1)
          {
            v204 = v203;
            v205 = v203[28];
            if (v205 < 0xE)
              break;
            v203 = (unsigned __int8 *)*v204;
            v111 = (uint64_t **)v204;
            if (!*v204)
              goto LABEL_262;
          }
          if (v205 == 13)
            break;
          v203 = (unsigned __int8 *)v204[1];
          if (!v203)
          {
            v111 = (uint64_t **)(v204 + 1);
            goto LABEL_262;
          }
        }
      }
      else
      {
LABEL_262:
        v206 = v204;
        v204 = operator new(0x28uLL);
        *((_BYTE *)v204 + 28) = 13;
        *((_BYTE *)v204 + 32) = 0;
        *((_BYTE *)v204 + 36) = 0;
        *v204 = 0;
        v204[1] = 0;
        v204[2] = v206;
        *v111 = v204;
        v207 = **(_QWORD **)(a1 + 336);
        v208 = v204;
        if (v207)
        {
          *(_QWORD *)(a1 + 336) = v207;
          v208 = *v111;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 344), v208);
        ++*(_QWORD *)(a1 + 352);
      }
      *((_DWORD *)v204 + 8) = v202;
      *((_BYTE *)v204 + 36) = 1;
      v209 = *v41;
      v42 = (unsigned __int8 **)(a1 + 376);
      if (*v41)
      {
        while (1)
        {
          while (1)
          {
            v42 = (unsigned __int8 **)v209;
            v210 = v209[28];
            if (v210 < 0xE)
              break;
            v209 = *v42;
            v41 = v42;
            if (!*v42)
              goto LABEL_272;
          }
          if (v210 == 13)
            goto LABEL_277;
          v209 = v42[1];
          if (!v209)
          {
            v41 = v42 + 1;
            break;
          }
        }
      }
LABEL_272:
      v44 = (unsigned __int8 *)operator new(0x28uLL);
      v45 = v44;
      v74 = 13;
    }
    v44[28] = v74;
  }
  v44[32] = 0;
  v44[36] = 0;
  *(_QWORD *)v44 = 0;
  *((_QWORD *)v44 + 1) = 0;
  *((_QWORD *)v44 + 2) = v42;
  *v41 = v44;
  v91 = **(_QWORD **)(a1 + 368);
  if (v91)
    goto LABEL_275;
LABEL_112:
  v42 = (unsigned __int8 **)v45;
LABEL_276:
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 376), (uint64_t *)v45);
  ++*(_QWORD *)(a1 + 384);
LABEL_277:
  *((_DWORD *)v42 + 8) = 1;
  *((_BYTE *)v42 + 36) = 1;
  return result;
}

void ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke(_QWORD *a1, void *a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = objc_msgSend(a2, "copy");
      v12 = (std::__shared_weak_count *)v5[16];
      if (!v12 || (v13 = v5[15], (v14 = std::__shared_weak_count::lock(v12)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v15 = v14;
      v16 = operator new(0x10uLL);
      *v16 = v11;
      v16[1] = v5;
      v17 = v5[17];
      v18 = (unint64_t *)&v15->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v20 = operator new(0x18uLL);
      *v20 = v16;
      v20[1] = v13;
      v20[2] = v15;
      dispatch_async_f(v17, v20, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_20initPowerConfig_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_);
      do
        v21 = __ldaxr(v18);
      while (__stlxr(v21 - 1, v18));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

void sub_1BF6C03DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, char a18)
{
  NSObject *v18;

  if (aBlock)
    _Block_release(aBlock);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
    dispatch_group_leave(v18);
    dispatch_release(v18);
    dispatch_release(v18);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

id ___ZN10CPMSModule20initPowerConfig_syncEv_block_invoke_42(uint64_t a1)
{
  return PowerBudget::getNSDict((id *)(*(_QWORD *)(a1 + 32) + 400));
}

void CPMSModule::evaluateBrickMode_sync(uint64_t a1, __int128 *a2)
{
  _QWORD *v4;
  uint64_t (***v5)();
  uint64_t (***v6)();
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  __CFDictionary *Mutable;
  const __CFAllocator *v16;
  const void *v17;
  size_t v18;
  void *v19;
  void **v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  CFTypeID v24;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t (**v30)();
  unsigned __int8 *v31;
  uint64_t (***v32)();
  __int128 buf;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!config::hw::watch((config::hw *)a1))
    return;
  v29 = 0;
  *((_QWORD *)&buf + 1) = 0;
  v34 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;
  if (&buf == a2)
  {
    v30 = off_1E791E738;
    v31 = &v29;
    v5 = &v30;
    v32 = &v30;
    goto LABEL_18;
  }
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&buf, *(_QWORD **)a2, (_QWORD *)a2 + 1);
  v4 = (_QWORD *)buf;
  v30 = off_1E791E738;
  v31 = &v29;
  v5 = &v30;
  v32 = &v30;
  if ((__int128 *)buf == (__int128 *)((char *)&buf + 8))
  {
LABEL_18:
    v10 = 4;
    goto LABEL_19;
  }
  v6 = &v30;
  while (((unsigned int (*)(uint64_t (***)(), uint64_t, _QWORD *))(*v6)[6])(v6, (uint64_t)v4 + 28, v4 + 4))
  {
    v7 = (_QWORD *)v4[1];
    v8 = v4;
    if (v7)
    {
      do
      {
        v4 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v8[2];
        v9 = *v4 == (_QWORD)v8;
        v8 = v4;
      }
      while (!v9);
    }
    if (v4 == (_QWORD *)((char *)&buf + 8))
      break;
    v6 = v32;
    if (!v32)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  v5 = v32;
  if (v32 == &v30)
  {
    v10 = 4;
    v5 = &v30;
  }
  else
  {
    if (!v32)
      goto LABEL_20;
    v10 = 5;
  }
LABEL_19:
  (*v5)[v10]();
LABEL_20:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
  v11 = v29;
  if (*(unsigned __int8 *)(a1 + 236) == v29)
    return;
  *(_BYTE *)(a1 + 236) = v29;
  v12 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = "enabled";
    if (!v11)
      v13 = "disabled";
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Brick mode is %s", (uint8_t *)&buf, 0xCu);
  }
  *(_QWORD *)&buf = 0;
  v14 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    *(_QWORD *)&buf = Mutable;
  ctu::cf::insert<char const*,BOOL>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB4D0], *(unsigned __int8 *)(a1 + 236), v14, v16);
  v17 = (const void *)*MEMORY[0x1E0CFB1E0];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB1E0]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = (void *)v18;
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    v20 = (void **)operator new(v22 + 1);
    __dst[1] = v19;
    v28 = v23 | 0x8000000000000000;
    __dst[0] = v20;
  }
  else
  {
    HIBYTE(v28) = v18;
    v20 = __dst;
    if (!v18)
    {
      LOBYTE(__dst[0]) = 0;
      v21 = (const void *)buf;
      if (!(_QWORD)buf)
        goto LABEL_38;
      goto LABEL_36;
    }
  }
  memmove(v20, v17, (size_t)v19);
  *((_BYTE *)v19 + (_QWORD)v20) = 0;
  v21 = (const void *)buf;
  if (!(_QWORD)buf)
  {
LABEL_38:
    cf = 0;
    goto LABEL_39;
  }
LABEL_36:
  v24 = CFGetTypeID(v21);
  if (v24 != CFDictionaryGetTypeID())
    goto LABEL_38;
  cf = v21;
  CFRetain(v21);
LABEL_39:
  aBlock = 0;
  Service::broadcastEvent(a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__dst[0]);
    if (!v21)
      return;
  }
  else if (!v21)
  {
    return;
  }
  CFRelease(v21);
}

void sub_1BF6C07A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void CPMSModule::reportThermalDataToSMC_sync(uint64_t a1, float **a2)
{
  unsigned __int8 v4;
  int v5;
  char v6;
  int v7;
  int v8;
  NSObject *v9;
  float *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  float v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  const char *v20;
  capabilities::abs *v21;
  _BYTE v22[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint8_t buf[4];
  _BYTE v32[14];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)&qword_1ED70F800);
  if ((v4 & 1) == 0)
  {
    v21 = (capabilities::abs *)__cxa_guard_acquire(&qword_1ED70F800);
    if ((_DWORD)v21)
    {
      dword_1ED70F7FC = capabilities::abs::thermalSensorMaxCount(v21);
      __cxa_guard_release(&qword_1ED70F800);
    }
  }
  v30 = 0;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v5 = dword_1ED70F7FC;
  if (dword_1ED70F7FC == 2)
  {
    v6 = 2;
    v7 = 2;
  }
  else
  {
    if (dword_1ED70F7FC != 3)
    {
      v16 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v32 = v5;
        _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Failed to find the SMC Exchange BB version with the number of sensor capability %u", buf, 8u);
      }
      return;
    }
    v6 = 1;
    v7 = 1;
  }
  v22[1] = v6;
  v22[0] = dword_1ED70F7FC;
  v8 = _MergedGlobals_5++;
  v22[2] = v8;
  v22[3] = 0;
  v9 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v32 = v7;
    _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Version: %u", buf, 8u);
    v9 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
LABEL_8:
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    goto LABEL_8;
  }
  *(_DWORD *)buf = 67109120;
  *(_DWORD *)v32 = v5;
  _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Number of Sensors: %u", buf, 8u);
  v9 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
LABEL_9:
    v10 = *a2;
    v11 = (unsigned __int8 *)a2[1];
    if (*a2 != (float *)v11)
      goto LABEL_10;
LABEL_24:
    v18 = TelephonyBasebandReportThermalData();
    v19 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = "Failed";
      if (v18)
        v20 = "Succeeded";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v32 = v20;
      *(_WORD *)&v32[8] = 1024;
      *(_DWORD *)&v32[10] = 255;
      _os_log_impl(&dword_1BF566000, v19, OS_LOG_TYPE_DEFAULT, "#I %s to report the thermal data to SMC, result: %u", buf, 0x12u);
    }
    return;
  }
LABEL_23:
  *(_DWORD *)buf = 67109120;
  *(_DWORD *)v32 = v8;
  _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Sequence Number: %u", buf, 8u);
  v10 = *a2;
  v11 = (unsigned __int8 *)a2[1];
  if (*a2 == (float *)v11)
    goto LABEL_24;
LABEL_10:
  v12 = dword_1ED70F7FC;
  while (1)
  {
    v13 = *(unsigned __int8 *)v10;
    if (v12 <= v13)
      break;
    v14 = v10[1];
    *(float *)&v22[4 * *(unsigned __int8 *)v10 + 4] = v14;
    v15 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v32 = v13;
      *(_WORD *)&v32[4] = 2048;
      *(double *)&v32[6] = v14;
      _os_log_debug_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEBUG, "#D Thermal Report to SMC: Sensor ID: %d, Sensor Data: %f", buf, 0x12u);
      v12 = dword_1ED70F7FC;
      v10 += 2;
      if (v10 == (float *)v11)
        goto LABEL_24;
    }
    else
    {
      v10 += 2;
      if (v10 == (float *)v11)
        goto LABEL_24;
    }
  }
  v17 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)v32 = v13;
    *(_WORD *)&v32[4] = 1024;
    *(_DWORD *)&v32[6] = v12;
    _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Sensor ID (%d) cannot exceed the max number of sensors (%u) in the device", buf, 0xEu);
  }
}

void sub_1BF6C0C88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED70F800);
  _Unwind_Resume(a1);
}

void ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke(uint64_t a1, float **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  float *v11;
  float *v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  _BOOL4 v16;
  double v17;
  NSObject *v18;
  const char *v19;
  uint32_t v20;
  int v21;
  int v22;
  int v23;
  NSObject *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  uint64_t v27;
  xpc_object_t v28;
  NSObject *v29;
  xpc_object_t v30;
  xpc_object_t v31;
  NSObject *v32;
  const void *v33;
  size_t v34;
  void *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  const object *v39;
  const void *v40;
  CFTypeID v41;
  _BYTE *v42;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v46;
  xpc_object_t xdict;
  _BYTE buf[12];
  char v49;
  _BYTE object[24];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = a2[1];
      if (*a2 != v12)
      {
        if (*(_BYTE *)(a1 + 56))
        {
          v13 = *(NSObject **)(v5 + 88);
          if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            if (v11 != v12)
              goto LABEL_16;
            goto LABEL_65;
          }
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEBUG, "#D Reporting thermal data to SMC:", buf, 2u);
          v11 = *a2;
          v12 = a2[1];
          if (*a2 == v12)
          {
LABEL_65:
            CPMSModule::reportThermalDataToSMC_sync(v5, a2);
            return;
          }
          while (1)
          {
LABEL_16:
            v14 = *(NSObject **)(v5 + 88);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              v21 = *(unsigned __int8 *)v11;
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v21;
              _os_log_debug_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEBUG, "#D Sensor ID: %d", buf, 8u);
              v14 = *(NSObject **)(v5 + 88);
              v22 = *(unsigned __int8 *)(a1 + 56);
              v16 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
              if (v22)
              {
LABEL_18:
                if (v16)
                {
                  v17 = v11[1];
                  *(_DWORD *)buf = 134217984;
                  *(double *)&buf[4] = v17;
                  v18 = v14;
                  v19 = "#D Sensor Data (float): %f";
                  v20 = 12;
LABEL_23:
                  _os_log_debug_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEBUG, v19, buf, v20);
                  goto LABEL_15;
                }
                goto LABEL_15;
              }
            }
            else
            {
              v15 = *(unsigned __int8 *)(a1 + 56);
              v16 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
              if (v15)
                goto LABEL_18;
            }
            if (v16)
            {
              v23 = *((_DWORD *)v11 + 1);
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v23;
              v18 = v14;
              v19 = "#D Sensor Data (int32): %d";
              v20 = 8;
              goto LABEL_23;
            }
LABEL_15:
            v11 += 2;
            if (v11 == v12)
              goto LABEL_65;
          }
        }
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        v25 = xpc_dictionary_create(0, 0, 0);
        v26 = v25;
        v27 = MEMORY[0x1E0C812F8];
        if (v25)
        {
          xdict = v25;
        }
        else
        {
          v26 = xpc_null_create();
          xdict = v26;
          if (!v26)
          {
            v28 = xpc_null_create();
            v26 = 0;
            goto LABEL_33;
          }
        }
        if (MEMORY[0x1C3B8CD78](v26) == v27)
        {
          xpc_retain(v26);
          goto LABEL_34;
        }
        v28 = xpc_null_create();
LABEL_33:
        xdict = v28;
LABEL_34:
        xpc_release(v26);
        if (MEMORY[0x1C3B8CD78](xdict) != v27)
        {
          v29 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1BF566000, v29, OS_LOG_TYPE_ERROR, "Failed to create xpc dictionary!", buf, 2u);
          }
LABEL_63:
          xpc_release(xdict);
          return;
        }
        v30 = xpc_data_create(*a2, (char *)a2[1] - (char *)*a2);
        if (!v30)
          v30 = xpc_null_create();
        xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0F0], v30);
        v31 = xpc_null_create();
        xpc_release(v30);
        xpc_release(v31);
        v32 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          xpc::dict::to_debug_string((xpc::dict *)&xdict, buf);
          v42 = v49 >= 0 ? buf : *(_BYTE **)buf;
          *(_DWORD *)object = 136315138;
          *(_QWORD *)&object[4] = v42;
          _os_log_debug_impl(&dword_1BF566000, v32, OS_LOG_TYPE_DEBUG, "#D Reporting thermal data to Thermal Monitor: %s", object, 0xCu);
          if (v49 < 0)
            operator delete(*(void **)buf);
        }
        v33 = (const void *)*MEMORY[0x1E0CFB318];
        v34 = strlen((const char *)*MEMORY[0x1E0CFB318]);
        if (v34 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v35 = (void *)v34;
        if (v34 >= 0x17)
        {
          v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v37 = v34 | 7;
          v38 = v37 + 1;
          v36 = (void **)operator new(v37 + 1);
          __dst[1] = v35;
          v46 = v38 | 0x8000000000000000;
          __dst[0] = v36;
        }
        else
        {
          HIBYTE(v46) = v34;
          v36 = __dst;
          if (!v34)
            goto LABEL_48;
        }
        memmove(v36, v33, (size_t)v35);
LABEL_48:
        *((_BYTE *)v35 + (_QWORD)v36) = 0;
        *(_QWORD *)object = xdict;
        if (xdict)
          xpc_retain(xdict);
        else
          *(_QWORD *)object = xpc_null_create();
        xpc::bridge((xpc *)object, v39);
        v40 = *(const void **)buf;
        if (*(_QWORD *)buf && (v41 = CFGetTypeID(*(CFTypeRef *)buf), v41 == CFDictionaryGetTypeID()))
        {
          cf = v40;
          CFRetain(v40);
        }
        else
        {
          cf = 0;
        }
        aBlock = 0;
        Service::broadcastEvent(v5, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        if (cf)
          CFRelease(cf);
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
        xpc_release(*(xpc_object_t *)object);
        if (SHIBYTE(v46) < 0)
          operator delete(__dst[0]);
        goto LABEL_63;
      }
      v24 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I Thermal Data is empty!", buf, 2u);
      }
    }
  }
}

void sub_1BF6C1214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object,char a22,uint64_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10CPMSModule36configureThermalReportFrequency_syncEjN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_60(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  int v19;
  xpc_object_t object[2];

  object[1] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if (*a2)
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v11 = 0;
      if (!v11 && (v12 = *(NSObject **)(v5 + 88), os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG)))
      {
        v19 = *(_DWORD *)(a1 + 64);
        LODWORD(object[0]) = 67109120;
        HIDWORD(object[0]) = v19;
        _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D Thermal Report Interval (%u ms) is set.", (uint8_t *)object, 8u);
        if (!*(_QWORD *)(a1 + 56))
          return;
      }
      else if (!*(_QWORD *)(a1 + 56))
      {
        return;
      }
      if (*a2)
        v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v13 = 0;
      if (v13)
      {
        v14 = xpc_null_create();
        v15 = *(_QWORD *)(a1 + 56);
        object[0] = v14;
        v16 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v15 + 16))(v15, 3760250880, object);
      }
      else
      {
        v17 = xpc_null_create();
        v18 = *(_QWORD *)(a1 + 56);
        object[0] = v17;
        v16 = xpc_null_create();
        (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v18 + 16))(v18, 0, object);
      }
      xpc_release(object[0]);
      xpc_release(v16);
    }
  }
}

void sub_1BF6C1498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void *__copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_2(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  id *v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t v14;
  ctu *v15;
  const void *v16;
  xpc_object_t v17;
  uint64_t v18;
  int v19;
  int v20;
  xpc_object_t *v21;
  id NSDict;
  xpc_object_t *v23;
  xpc_object_t __p[2];
  char v25;
  _BYTE object[12];
  __int16 v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[6];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = (id *)(v5 + 400);

      *(_QWORD *)(v5 + 424) = 0;
      if (v5 + 400 != a2)
        std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(v5 + 400, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
      v12 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        PowerBudget::to_string((PowerBudget *)(v5 + 400), __p);
        v20 = v25;
        v21 = (xpc_object_t *)__p[0];
        NSDict = PowerBudget::getNSDict(v11);
        v23 = __p;
        if (v20 < 0)
          v23 = v21;
        *(_DWORD *)object = 136315394;
        *(_QWORD *)&object[4] = v23;
        v27 = 2112;
        v28 = NSDict;
        _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D Current power estimation in baseband side: %s, and reporting back to CPMS: %@", object, 0x16u);
        if (v25 < 0)
          operator delete(__p[0]);
      }
      v14 = a1[8];
      v13 = a1 + 8;
      if (v14)
      {
        v15 = (ctu *)PowerBudget::getNSDict(v11);
        ctu::cf_to_xpc(v15, v16);
        v17 = *(xpc_object_t *)object;
        __p[0] = *(xpc_object_t *)object;
        v18 = MEMORY[0x1E0C812F8];
        if (*(_QWORD *)object && MEMORY[0x1C3B8CD78](*(_QWORD *)object) == v18)
        {
          xpc_retain(v17);
        }
        else
        {
          v17 = xpc_null_create();
          __p[0] = v17;
        }
        xpc_release(*(xpc_object_t *)object);
        if (MEMORY[0x1C3B8CD78](v17) == v18)
          v19 = 0;
        else
          v19 = -534716416;
        *(_DWORD *)object = v19;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v13, (unsigned int *)object, __p);
        xpc_release(__p[0]);
      }
    }
  }
}

void sub_1BF6C17D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *result;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  result = (void *)a2[8];
  if (result)
    result = _Block_copy(result);
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE64c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1)
{
  const void *v2;
  std::__shared_weak_count *v3;
  NSObject *v4;
  NSObject *v5;

  v2 = (const void *)a1[8];
  if (v2)
    _Block_release(v2);
  v3 = (std::__shared_weak_count *)a1[7];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = a1[5];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = a1[5];
    if (v5)
      dispatch_release(v5);
  }
}

void ___ZN10CPMSModule15getCurrentPowerEN8dispatch13group_sessionENS0_5blockIU13block_pointerFviN3xpc4dictEEEE_block_invoke_63(_QWORD *a1)
{
  uint64_t v2;
  id *v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  id NSDict;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = a1[6];
  v3 = (id *)(v2 + 400);
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(v2 + 400, *(_QWORD **)(v2 + 336), (_QWORD *)(v2 + 344));

  *(_QWORD *)(v2 + 424) = objc_msgSend(*(id *)(v2 + 360), "copy");
  v4 = *(NSObject **)(v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = a1[5];
    if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
      v6 = "true";
    else
      v6 = "false";
    if (*(_BYTE *)(*(_QWORD *)(v5 + 8) + 24))
      v7 = "true";
    else
      v7 = "false";
    v8 = 136315650;
    v9 = v6;
    v10 = 2080;
    v11 = v7;
    v12 = 2112;
    NSDict = PowerBudget::getNSDict(v3);
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Because baseband is not in traffic(%s) or online(%s), reporting idle power estimation back to CPMS: %@", (uint8_t *)&v8, 0x20u);
  }
}

uint64_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791E5B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791E5B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule*)#1}::operator() const(CPMSModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CPMSModule *,std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule *)#1},std::allocator<CPMSModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10CPMSModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<CPMSModule> ctu::SharedSynchronizable<CPMSModule>::make_shared_ptr<CPMSModule>(CPMSModule*)::{lambda(CPMSModule*)#1}::operator() const(CPMSModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<CPMSModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791E5B0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CPMSModule>::execute_wrapped<CPMSModule::shutdown(dispatch::group_session)::$_0>(CPMSModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CPMSModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CPMSModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(config::hw *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD ***)a1;
  if ((config::hw::watch(a1) & 1) == 0)
  {
    v4 = v3[24];
    if (v4)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 48))(v4, 0, 5);
  }
  v5 = (std::__shared_weak_count *)v3[20];
  v3[19] = 0;
  v3[20] = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v10)
    goto LABEL_16;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    operator delete(a1);
  }
  else
  {
LABEL_16:
    operator delete(a1);
  }
}

void sub_1BF6C1DA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *v19;
  void *aBlock;
  dispatch_object_t object;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)(*a1 + 16);
  v3 = *(void **)(*a1 + 24);
  if (v3)
  {
    v5 = v4[24];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3321888768;
    v17[2] = ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
    v17[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e172_v32__0_vector_abm::BasebandThermalID__std::allocator_abm::BasebandThermalID____C_C___compressed_pair_abm::BasebandThermalID____std::allocator_abm::BasebandThermalID____C__8l;
    v17[4] = v4;
    v17[5] = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v18 = v6;
    if (!v6)
      goto LABEL_6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v3 = (void *)v2[3];
    if (v3)
LABEL_6:
      v3 = _Block_copy(v3);
    v19 = v3;
    v9 = _Block_copy(v17);
    v10 = v4[17];
    if (v10)
      dispatch_retain(v10);
    aBlock = v9;
    object = v10;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 56))(v5, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v19)
      _Block_release(v19);
    if (v18)
    {
      std::__shared_weak_count::__release_weak(v18);
      v11 = (const void *)v2[3];
      if (!v11)
        goto LABEL_21;
LABEL_20:
      _Block_release(v11);
      goto LABEL_21;
    }
LABEL_19:
    v11 = (const void *)v2[3];
    if (!v11)
      goto LABEL_21;
    goto LABEL_20;
  }
  v12 = v4[11];
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    goto LABEL_19;
  LOWORD(v17[0]) = 0;
  _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Expected response handler", (uint8_t *)v17, 2u);
  v11 = (const void *)v2[3];
  if (v11)
    goto LABEL_20;
LABEL_21:
  v13 = (std::__shared_weak_count *)v2[1];
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1BF6C1FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, void *aBlock, dispatch_object_t object)
{
  _QWORD *v18;
  _QWORD *v19;
  const void *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    _Block_release(a16);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  v21 = (const void *)v19[3];
  if (v21)
    _Block_release(v21);
  v22 = (std::__shared_weak_count *)v19[1];
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  operator delete(v19);
  v23 = (std::__shared_weak_count *)v18[2];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  xpc_object_t v16;
  uint64_t v17;
  xpc_object_t v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  NSObject *v22;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  void *v26;
  xpc_object_t object[2];

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v11;
  v13 = MEMORY[0x1E0C812F8];
  if (v11)
  {
    v26 = v11;
  }
  else
  {
    v12 = xpc_null_create();
    v26 = v12;
    if (!v12)
    {
      v14 = xpc_null_create();
      v12 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C3B8CD78](v12) != v13)
  {
    v14 = xpc_null_create();
LABEL_16:
    v26 = v14;
    goto LABEL_17;
  }
  xpc_retain(v12);
LABEL_17:
  xpc_release(v12);
  v15 = v26;
  if (MEMORY[0x1C3B8CD78](v26) == v13)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v19)
    {
      v22 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(object[0]) = 0;
        _os_log_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEFAULT, "#I Thermal IDs are empty!", (uint8_t *)object, 2u);
      }
      v23 = xpc_null_create();
      v24 = a1[7];
      object[0] = v23;
      v25 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v24 + 16))(v24, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v25);
    }
    else
    {
      v20 = xpc_data_create(*(const void **)a2, v19 - *(_QWORD *)a2);
      if (!v20)
        v20 = xpc_null_create();
      xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0CFB070], v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      LODWORD(object[0]) = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 7, (unsigned int *)object, &v26);
      v15 = v26;
    }
  }
  else
  {
    v16 = xpc_null_create();
    v17 = a1[7];
    object[0] = v16;
    v18 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v17 + 16))(v17, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v18);
  }
  xpc_release(v15);
}

void sub_1BF6C22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  void *v11;
  void *v12;

  xpc_release(object);
  xpc_release(v12);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)(*a1 + 16);
  v4 = *(unsigned int *)(*a1 + 24);
  v5 = *(const void **)(*a1 + 32);
  if (v5)
    v6 = _Block_copy(v5);
  else
    v6 = 0;
  v12 = v6;
  CPMSModule::configureThermalReportFrequency_sync(v3, v4, &v12);
  if (v6)
    _Block_release(v6);
  v7 = (const void *)v2[4];
  if (v7)
    _Block_release(v7);
  v8 = (std::__shared_weak_count *)v2[1];
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF6C2464(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  const void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (v3)
    _Block_release(v3);
  v5 = (const void *)v2[4];
  if (v5)
    _Block_release(v5);
  v6 = (std::__shared_weak_count *)v2[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(v2);
  v7 = (std::__shared_weak_count *)v1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  void *v19;
  void *aBlock;
  dispatch_object_t object;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)(*a1 + 16);
  v3 = *(void **)(*a1 + 24);
  if (v3)
  {
    v5 = v4[24];
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3321888768;
    v17[2] = ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
    v17[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10CPMSModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e240_v32__0_vector_abm::PowerMitigationData__std::allocator_abm::PowerMitigationData_____PowerMitigationData___PowerMitigationData____compressed_pair_abm::PowerMitigationData____std::allocator_abm::PowerMitigationData_____PowerMitigationData___8l;
    v17[4] = v4;
    v17[5] = *v2;
    v6 = (std::__shared_weak_count *)v2[1];
    v18 = v6;
    if (!v6)
      goto LABEL_6;
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v3 = (void *)v2[3];
    if (v3)
LABEL_6:
      v3 = _Block_copy(v3);
    v19 = v3;
    v9 = _Block_copy(v17);
    v10 = v4[17];
    if (v10)
      dispatch_retain(v10);
    aBlock = v9;
    object = v10;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 72))(v5, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
    if (v19)
      _Block_release(v19);
    if (v18)
    {
      std::__shared_weak_count::__release_weak(v18);
      v11 = (const void *)v2[3];
      if (!v11)
        goto LABEL_21;
LABEL_20:
      _Block_release(v11);
      goto LABEL_21;
    }
LABEL_19:
    v11 = (const void *)v2[3];
    if (!v11)
      goto LABEL_21;
    goto LABEL_20;
  }
  v12 = v4[11];
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    goto LABEL_19;
  LOWORD(v17[0]) = 0;
  _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Expected response handler", (uint8_t *)v17, 2u);
  v11 = (const void *)v2[3];
  if (v11)
    goto LABEL_20;
LABEL_21:
  v13 = (std::__shared_weak_count *)v2[1];
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1BF6C26B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *a16, void *aBlock, dispatch_object_t object)
{
  _QWORD *v18;
  _QWORD *v19;
  const void *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a16)
    _Block_release(a16);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  v21 = (const void *)v19[3];
  if (v21)
    _Block_release(v21);
  v22 = (std::__shared_weak_count *)v19[1];
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  operator delete(v19);
  v23 = (std::__shared_weak_count *)v18[2];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v18);
  _Unwind_Resume(a1);
}

void ___ZZZZN10CPMSModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  void *v15;
  xpc_object_t v16;
  uint64_t v17;
  xpc_object_t v18;
  uint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  NSObject *v22;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  void *v26;
  xpc_object_t object[2];

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  if (!v6)
    return;
  v7 = v6;
  v8 = a1[5];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (v10)
  {
    if (!v8)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if (!v8)
      return;
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = v11;
  v13 = MEMORY[0x1E0C812F8];
  if (v11)
  {
    v26 = v11;
  }
  else
  {
    v12 = xpc_null_create();
    v26 = v12;
    if (!v12)
    {
      v14 = xpc_null_create();
      v12 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C3B8CD78](v12) != v13)
  {
    v14 = xpc_null_create();
LABEL_16:
    v26 = v14;
    goto LABEL_17;
  }
  xpc_retain(v12);
LABEL_17:
  xpc_release(v12);
  v15 = v26;
  if (MEMORY[0x1C3B8CD78](v26) == v13)
  {
    v19 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 == v19)
    {
      v22 = *(NSObject **)(v5 + 88);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(object[0]) = 0;
        _os_log_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEFAULT, "#I Power Mitigation Data are empty!", (uint8_t *)object, 2u);
      }
      v23 = xpc_null_create();
      v24 = a1[7];
      object[0] = v23;
      v25 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v24 + 16))(v24, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v25);
    }
    else
    {
      v20 = xpc_data_create(*(const void **)a2, v19 - *(_QWORD *)a2);
      if (!v20)
        v20 = xpc_null_create();
      xpc_dictionary_set_value(v26, (const char *)*MEMORY[0x1E0CFB7C8], v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      LODWORD(object[0]) = 0;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 7, (unsigned int *)object, &v26);
      v15 = v26;
    }
  }
  else
  {
    v16 = xpc_null_create();
    v17 = a1[7];
    object[0] = v16;
    v18 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v17 + 16))(v17, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v18);
  }
  xpc_release(v15);
}

void sub_1BF6C29B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  void *v11;
  void *v12;

  xpc_release(object);
  xpc_release(v12);
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t value;
  xpc_object_t v10;
  xpc_object_t v11;
  const void *bytes_ptr;
  int64_t length;
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t **v19;
  unsigned int v20;
  NSObject *v21;
  void *p_object;
  int v23;
  char *v25;
  int v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  unsigned int v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t *v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  const void *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unint64_t v46;
  xpc_object_t object;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  void *__p[3];
  _BYTE v52[12];
  __int16 v53;
  int v54;
  uint64_t v55;

  v1 = a1;
  v55 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  if (MEMORY[0x1C3B8CD78](*(_QWORD *)(*a1 + 24)) != MEMORY[0x1E0C812F8] || (v8 = *(void **)(v2 + 24)) == 0)
  {
    v4 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object) = 0;
      _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "Expected intput/response handler", (uint8_t *)&object, 2u);
      if (!*(_QWORD *)(v2 + 32))
        goto LABEL_49;
    }
    else if (!*(_QWORD *)(v2 + 32))
    {
      goto LABEL_49;
    }
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    object = v5;
    v7 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
    xpc_release(object);
    xpc_release(v7);
    goto LABEL_49;
  }
  memset(__p, 170, sizeof(__p));
  value = xpc_dictionary_get_value(v8, (const char *)*MEMORY[0x1E0CFB540]);
  *(_QWORD *)v52 = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)v52 = xpc_null_create();
  object = 0;
  v48 = 0;
  v49 = 0;
  v42 = v1;
  v44 = v2;
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)v52);
  v10 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB160]);
  v11 = v10;
  if (v10)
    xpc_retain(v10);
  else
    v11 = xpc_null_create();
  v43 = v11;
  bytes_ptr = xpc_data_get_bytes_ptr(v11);
  length = xpc_data_get_length(v11);
  v14 = length;
  if (length >= 4)
  {
    v15 = (char *)operator new(length & 0xFFFFFFFFFFFFFFFCLL);
    memcpy(v15, bytes_ptr, v14 & 0xFFFFFFFFFFFFFFFCLL);
    v16 = &v15[4 * (v14 >> 2)];
    v17 = (unsigned __int8 *)__p[0];
    v45 = (unsigned __int8 *)__p[1];
    if (__p[0] == __p[1])
      goto LABEL_41;
LABEL_16:
    v18 = 0;
    v19 = (uint64_t **)(v3 + 248);
    v46 = (v16 - v15) >> 2;
    do
    {
      v20 = *v17;
      v21 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        abm::asString();
        if (v46 <= v18)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        p_object = &object;
        if (v49 < 0)
          p_object = object;
        v23 = *(_DWORD *)&v15[4 * v18];
        *(_DWORD *)v52 = 136315394;
        *(_QWORD *)&v52[4] = p_object;
        v53 = 1024;
        v54 = v23;
        _os_log_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEFAULT, "#I Budget Scale: %s, value: %d", v52, 0x12u);
        if (SHIBYTE(v49) < 0)
          operator delete(object);
      }
      if (v46 <= v18)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      if (v20 <= 0xD && ((1 << v20) & 0x3C07) != 0)
      {
        v25 = v15;
        v26 = *(_DWORD *)&v15[4 * v18];
        v27 = *v19;
        v28 = (uint64_t **)(v3 + 248);
        v29 = (uint64_t **)(v3 + 248);
        if (*v19)
        {
          while (1)
          {
            while (1)
            {
              v29 = (uint64_t **)v27;
              v30 = *((unsigned __int8 *)v27 + 28);
              if (v30 <= v20)
                break;
              v27 = *v29;
              v28 = v29;
              if (!*v29)
                goto LABEL_38;
            }
            if (v30 >= v20)
              break;
            v27 = v29[1];
            if (!v27)
            {
              v28 = v29 + 1;
              goto LABEL_38;
            }
          }
          v31 = v29;
        }
        else
        {
LABEL_38:
          v31 = operator new(0x28uLL);
          v31[28] = v20;
          v31[32] = 0;
          v31[36] = 0;
          *(_QWORD *)v31 = 0;
          *((_QWORD *)v31 + 1) = 0;
          *((_QWORD *)v31 + 2) = v29;
          *v28 = (uint64_t *)v31;
          v32 = **(_QWORD **)(v3 + 240);
          v33 = (uint64_t *)v31;
          if (v32)
          {
            *(_QWORD *)(v3 + 240) = v32;
            v33 = *v28;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 248), v33);
          ++*(_QWORD *)(v3 + 256);
        }
        *((_DWORD *)v31 + 8) = v26;
        v31[36] = 1;
        v15 = v25;
      }
      ++v18;
      ++v17;
    }
    while (v17 != v45);
    goto LABEL_41;
  }
  v15 = 0;
  v16 = 0;
  v17 = (unsigned __int8 *)__p[0];
  v45 = (unsigned __int8 *)__p[1];
  if (__p[0] != __p[1])
    goto LABEL_16;
LABEL_41:
  object = &v48;
  v48 = 0;
  v49 = 0;
  v50 = 0;
  if ((xpc_object_t *)(v3 + 240) != &object)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&object, *(_QWORD **)(v3 + 240), (_QWORD *)(v3 + 248));
  v50 = (id)objc_msgSend(*(id *)(v3 + 264), "copy");
  v2 = v44;
  CPMSModule::sendPowerBudgetToBB_sync(v3, (_QWORD **)&object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&object, v48);
  v48 = 0;
  v49 = 0;
  object = &v48;

  v50 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&object, v48);
  v48 = 0;
  v49 = 0;
  object = &v48;
  v1 = v42;
  if (*(_QWORD *)(v44 + 32))
  {
    v34 = xpc_null_create();
    v35 = *(_QWORD *)(v44 + 32);
    *(_QWORD *)v52 = v34;
    v36 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, _BYTE *))(v35 + 16))(v35, 0, v52);
    xpc_release(*(xpc_object_t *)v52);
    xpc_release(v36);
  }
  if (v15)
    operator delete(v15);
  xpc_release(v43);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_49:
  v37 = *(const void **)(v2 + 32);
  if (v37)
    _Block_release(v37);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v38 = *(std::__shared_weak_count **)(v2 + 8);
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  operator delete((void *)v2);
  v39 = (std::__shared_weak_count *)v1[2];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v1);
}

void sub_1BF6C2F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, xpc_object_t object, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,xpc_object_t a25)
{
  const void *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  xpc_release(object);
  if (__p)
    operator delete(__p);
  if (a12)
  {
    v26 = (const void *)*((_QWORD *)a12 + 4);
    if (v26)
      _Block_release(v26);
    xpc_release(*((xpc_object_t *)a12 + 3));
    *((_QWORD *)a12 + 3) = 0;
    v27 = (std::__shared_weak_count *)*((_QWORD *)a12 + 1);
    if (v27)
      std::__shared_weak_count::__release_weak(v27);
    operator delete(a12);
  }
  v28 = (std::__shared_weak_count *)a10[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1BF6C3194(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_10initializeENS_13group_sessionEEUb_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(void *a1)
{
  CPMSModule **v2;
  CPMSModule *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(CPMSModule ***)a1;
  v3 = **(CPMSModule ***)a1;
  CPMSModule::finishInitialization_sync(v3);
  CPMSModule::evaluatePowerBudgetNeed_sync(v3);
  operator delete(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF6C3254(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10CPMSModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10CPMSModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10CPMSModuleE15execute_wrappedIZZNS3_20initPowerConfig_syncEvEUb4_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS7_NSC_14default_deleteIS7_EEEEENUlPvE_8__invokeESH_(void *a1)
{
  NSDictionary **v2;
  NSDictionary *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  void **v8;
  void **p_p;
  _BYTE *v10;
  int v11;
  NSObject *v12;
  id NSDict;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  _BYTE v22[24];
  id v23;
  _BYTE v24[24];
  id v25;
  __int128 buf;
  uint64_t v27;
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(NSDictionary ***)a1;
  v3 = **(NSDictionary ***)a1;
  if (!v3)
    goto LABEL_17;
  v4 = (uint64_t)v2[1];
  v5 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Given budget from CPMS is %@", (uint8_t *)&buf, 0xCu);
    v3 = *v2;
  }
  PowerBudget::fill((id *)(v4 + 240), v3);
  *(_QWORD *)&buf = (char *)&buf + 8;
  *((_QWORD *)&buf + 1) = 0;
  v27 = 0;
  v28 = 0;
  PowerBudget::fill((id *)&buf, *v2);
  v6 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    PowerBudget::to_string((PowerBudget *)&buf, &__p);
    v7 = SHIBYTE(v20);
    v8 = (void **)__p;
    PowerBudget::to_string((PowerBudget *)(v4 + 240), v24);
    p_p = &__p;
    if (v7 < 0)
      p_p = v8;
    if (v24[23] >= 0)
      v10 = v24;
    else
      v10 = *(_BYTE **)v24;
    *(_DWORD *)v22 = 136315394;
    *(_QWORD *)&v22[4] = p_p;
    *(_WORD *)&v22[12] = 2080;
    *(_QWORD *)&v22[14] = v10;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Budget from CPMS: %s, Cached Budgets: %s", v22, 0x16u);
    if ((v24[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)v24);
      if ((SHIBYTE(v20) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else if ((SHIBYTE(v20) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(__p);
  }
LABEL_12:
  __p = &v19;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)&__p, (_QWORD *)buf, (_QWORD *)&buf + 1);
  v21 = (id)objc_msgSend(v28, "copy");
  v11 = objc_msgSend(*(id *)(v4 + 168), "acknowledgePowerBudget:forClientId:error:", PowerBudget::getNSDict(&__p), 4, 0);
  v12 = *(NSObject **)(v4 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    NSDict = PowerBudget::getNSDict(&__p);
    v14 = "failed";
    if (v11)
      v14 = "succeeded";
    *(_DWORD *)v24 = 136315394;
    *(_QWORD *)&v24[4] = v14;
    *(_WORD *)&v24[12] = 2112;
    *(_QWORD *)&v24[14] = NSDict;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Acked CPMS %s for power budget %@", v24, 0x16u);
  }
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__p, v19);
  v19 = 0;
  v20 = 0;
  __p = &v19;

  v21 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__p, v19);
  v19 = 0;
  v20 = 0;
  __p = &v19;
  v25 = 0;
  *(_QWORD *)v24 = &v24[8];
  *(_OWORD *)&v24[8] = 0uLL;
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)v24, (_QWORD *)buf, (_QWORD *)&buf + 1);
  v25 = (id)objc_msgSend(v28, "copy");
  CPMSModule::evaluateBrickMode_sync(v4, (__int128 *)v24);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v24, *(_QWORD **)&v24[8]);
  *(_OWORD *)&v24[8] = 0uLL;
  *(_QWORD *)v24 = &v24[8];

  v25 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v24, *(_QWORD **)&v24[8]);
  *(_OWORD *)&v24[8] = 0uLL;
  v23 = 0;
  *(_QWORD *)v24 = &v24[8];
  *(_OWORD *)&v22[8] = 0uLL;
  *(_QWORD *)v22 = &v22[8];
  std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)v22, (_QWORD *)buf, (_QWORD *)&buf + 1);
  v23 = (id)objc_msgSend(v28, "copy");
  CPMSModule::sendPowerBudgetToBB_sync(v4, (_QWORD **)v22);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v22, *(_QWORD **)&v22[8]);
  *(_OWORD *)&v22[8] = 0uLL;
  *(_QWORD *)v22 = &v22[8];

  v23 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v22, *(_QWORD **)&v22[8]);
  *(_OWORD *)&v22[8] = 0uLL;
  *(_QWORD *)v22 = &v22[8];

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
  *((_QWORD *)&buf + 1) = 0;
  v27 = 0;
  *(_QWORD *)&buf = (char *)&buf + 8;

  v28 = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
LABEL_17:
  operator delete(v2);
  v15 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1BF6C3738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  void *v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  if (a14 < 0)
    operator delete(__p);
  PowerBudget::~PowerBudget((PowerBudget *)&a24);
  operator delete(v25);
  v27 = (std::__shared_weak_count *)v24[2];
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFP12NSDictionaryvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS6_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 40) + 16))();
  **(_QWORD **)(a1 + 32) = result;
  return result;
}

_QWORD *std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E791E738;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E791E738;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL *v3;
  _BOOL8 result;

  if (!*(_BYTE *)(a3 + 4))
    return 1;
  v3 = *(BOOL **)(a1 + 8);
  result = *(_DWORD *)a3 != 0;
  *v3 = *(_DWORD *)a3 == 0;
  return result;
}

uint64_t std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN10CPMSModule22evaluateBrickMode_syncE11PowerBudgetE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0,std::allocator<CPMSModule::evaluateBrickMode_sync(PowerBudget)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

uint64_t __cxx_global_var_init_64()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

BOOL prop::bbipc::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB240];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB240]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF6C3AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::compression::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB248];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB248]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF6C3BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::ttr::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB198];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB198]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF6C3D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::logfilter::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFAFC0];
  v5 = strlen((const char *)*MEMORY[0x1E0CFAFC0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF6C3E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::systemlogs::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB190];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB190]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF6C3F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::profile::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB048];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB048]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF6C400C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tailspin::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB0A0];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB0A0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF6C4110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB098];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB098]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF6C4214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t prop::set(char *a1, char *a2, char *a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  const char *v13;
  __int16 v14;
  char *v15;
  __int16 v16;
  char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB088])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC200])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01AA8])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01A80]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB090]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC248]) && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB118]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB240]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB248]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB198]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAFC0]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB190]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB048]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB0A0]))
                        goto LABEL_16;
                      return prop::tailspin::set((uint64_t)a2, a3);
                    }
                    return prop::profile::set(a2, a3);
                  }
                  return prop::systemlogs::set(a2, a3);
                }
                return prop::logfilter::set(a2, a3);
              }
              return prop::ttr::set(a2, a3);
            }
            return prop::compression::set(a2, a3);
          }
          return prop::bbipc::set(a2, a3);
        }
        return prop::ipc::set(a2, a3);
      }
      return prop::coredump::set((uint64_t)a2, a3);
    }
    return prop::bbtrace::set(a2, a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB088])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC200])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01AA8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01A80]))
  {
    return prop::bbtrace::set(a2, a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB090]))
    return prop::coredump::set((uint64_t)a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC248]) || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB118]))
    return prop::ipc::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB240]))
    return prop::bbipc::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB248]))
    return prop::compression::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB198]))
    return prop::ttr::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFAFC0]))
    return prop::logfilter::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB190]))
    return prop::systemlogs::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB048]))
    return prop::profile::set(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB0A0]))
    return prop::tailspin::set((uint64_t)a2, a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB098]))
    return prop::tracesettings::set(a2, (uint64_t)a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(char **)a2;
    if (a3[23] >= 0)
      v11 = a3;
    else
      v11 = *(char **)a3;
    v12 = 136315906;
    v13 = "prop";
    v14 = 2080;
    v15 = v9;
    v16 = 2080;
    v17 = v10;
    v18 = 2080;
    v19 = v11;
    _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "%s: set: Invalid domain; domain='%s' key='%s' value='%s'",
      (uint8_t *)&v12,
      0x2Au);
  }
  return 0;
}

uint64_t prop::bbtrace::set(char *a1, const char *a2)
{
  const char *v2;
  int v4;
  char *v5;
  const char *v6;
  capabilities::radio *v7;
  const char *v8;
  const char *v9;
  capabilities::radio *v10;
  capabilities::trace *v11;
  uint64_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  capabilities::radio *v22;
  int v23;
  capabilities::radio *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  size_t v29;
  size_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  const char *v47;
  capabilities::radio *v48;
  const char *v49;
  capabilities::radio *v50;
  const char *v51;
  capabilities::radio *v52;
  const char *v53;
  const char *v54;
  capabilities::radio *v55;
  const char *v56;
  capabilities::radio *v57;
  const char *v58;
  const char *v59;
  capabilities::radio *v60;
  const char *v61;
  capabilities::radio *v62;
  const char *v63;
  capabilities::radio *v64;
  const char *v65;
  capabilities::radio *v66;
  int v67;
  int v68;
  const char *v69;
  const char *v70;
  capabilities::radio *v71;
  int v72;
  int v73;
  const char *v74;
  capabilities::radio *v75;
  const char *v76;
  NSObject *v77;
  uint64_t v78;
  char *v79;
  std::string *v80;
  const char *v81;
  NSObject *v82;
  uint32_t v83;
  capabilities::radio *v84;
  unsigned int v85;
  capabilities::abs *v86;
  capabilities::radio *shouldUseMinBasebandTransportIOReadSize;
  unsigned int v88;
  capabilities::abs *v89;
  int v90;
  NSObject *v91;
  std::string __p;
  int __val;
  int data;
  std::string v96;
  _BYTE __dst[24];
  char *v98;
  __int16 v99;
  std::string *v100;
  uint64_t v101;

  v2 = a2;
  v101 = *MEMORY[0x1E0C80C00];
  memset(&v96, 170, sizeof(v96));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(const char **)v2;
    if (strcmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v96 = *(std::string *)a2;
    if (strcmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::bbtrace::get(a1, (std::string::size_type *)&v96))
    goto LABEL_247;
LABEL_8:
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB230]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB460]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB338]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB2D8]))
              {
                v5 = (char *)*MEMORY[0x1E0CFB178];
                v6 = a1;
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]))
                  goto LABEL_16;
                goto LABEL_31;
              }
LABEL_80:
              *(_DWORD *)__dst = -1431655766;
              if (!util::convert<int>(&v96, __dst, 0))
                goto LABEL_247;
              v36 = *(_DWORD *)__dst;
              std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
              LODWORD(__p.__r_.__value_.__l.__data_) = v36;
              v35 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
LABEL_97:
              v12 = v35;
LABEL_98:
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              goto LABEL_248;
            }
LABEL_67:
            v28 = (const void *)*MEMORY[0x1E0CFC200];
            v29 = strlen((const char *)*MEMORY[0x1E0CFC200]);
            if (v29 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v30 = v29;
            if (v29 >= 0x17)
            {
              v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v29 | 7) != 0x17)
                v37 = v29 | 7;
              v38 = v37 + 1;
              v31 = operator new(v37 + 1);
              *(_QWORD *)&__dst[8] = v30;
              *(_QWORD *)&__dst[16] = v38 | 0x8000000000000000;
              *(_QWORD *)__dst = v31;
            }
            else
            {
              __dst[23] = v29;
              v31 = __dst;
              if (!v29)
                goto LABEL_86;
            }
            memmove(v31, v28, v30);
LABEL_86:
            v31[v30] = 0;
            v35 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v96);
            goto LABEL_97;
          }
LABEL_57:
          LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
          v22 = (capabilities::radio *)util::convert<int>(&v96, &__p, 0);
          v23 = (int)v22;
          v24 = (capabilities::radio *)capabilities::radio::maverick(v22);
          if ((_DWORD)v24)
          {
            if (LODWORD(__p.__r_.__value_.__l.__data_) < 5)
              v25 = v23;
            else
              v25 = 0;
            if ((v25 & 1) == 0)
              goto LABEL_247;
          }
          else
          {
            v32 = capabilities::radio::ice(v24);
            if ((v32 & v23) == 1)
            {
              v12 = 0;
              if (LODWORD(__p.__r_.__value_.__l.__data_) > 6 || ((1 << __p.__r_.__value_.__s.__data_[0]) & 0x45) == 0)
                goto LABEL_248;
            }
            else if ((v23 & ~v32) != 1)
            {
              goto LABEL_247;
            }
          }
          v39 = (const void *)*MEMORY[0x1E0CFC200];
          v40 = strlen((const char *)*MEMORY[0x1E0CFC200]);
          if (v40 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v41 = v40;
          if (v40 >= 0x17)
          {
            v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17)
              v43 = v40 | 7;
            v44 = v43 + 1;
            v42 = operator new(v43 + 1);
            *(_QWORD *)&__dst[8] = v41;
            *(_QWORD *)&__dst[16] = v44 | 0x8000000000000000;
            *(_QWORD *)__dst = v42;
          }
          else
          {
            __dst[23] = v40;
            v42 = __dst;
            if (!v40)
              goto LABEL_96;
          }
          memmove(v42, v39, v41);
LABEL_96:
          v42[v41] = 0;
          v35 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
          goto LABEL_97;
        }
LABEL_48:
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (!util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
          goto LABEL_247;
        v14 = (const void *)*MEMORY[0x1E0CFC200];
        v19 = strlen((const char *)*MEMORY[0x1E0CFC200]);
        if (v19 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v16 = v19;
        if (v19 >= 0x17)
        {
          v33 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v33 = v19 | 7;
          v34 = v33 + 1;
          v17 = operator new(v33 + 1);
          *(_QWORD *)&__dst[8] = v16;
          *(_QWORD *)&__dst[16] = v34 | 0x8000000000000000;
          *(_QWORD *)__dst = v17;
        }
        else
        {
          __dst[23] = v19;
          v17 = __dst;
          if (!v19)
            goto LABEL_79;
        }
        goto LABEL_78;
      }
LABEL_43:
      __p.__r_.__value_.__s.__data_[0] = -86;
      if (!util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
        goto LABEL_247;
      v14 = (const void *)*MEMORY[0x1E0CFC200];
      v18 = strlen((const char *)*MEMORY[0x1E0CFC200]);
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v16 = v18;
      if (v18 >= 0x17)
      {
        v26 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v26 = v18 | 7;
        v27 = v26 + 1;
        v17 = operator new(v26 + 1);
        *(_QWORD *)&__dst[8] = v16;
        *(_QWORD *)&__dst[16] = v27 | 0x8000000000000000;
        *(_QWORD *)__dst = v17;
      }
      else
      {
        __dst[23] = v18;
        v17 = __dst;
        if (!v18)
          goto LABEL_79;
      }
      goto LABEL_78;
    }
LABEL_38:
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (!util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
      goto LABEL_247;
    v14 = (const void *)*MEMORY[0x1E0CFC200];
    v15 = strlen((const char *)*MEMORY[0x1E0CFC200]);
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v20 = v15 | 7;
      v21 = v20 + 1;
      v17 = operator new(v20 + 1);
      *(_QWORD *)&__dst[8] = v16;
      *(_QWORD *)&__dst[16] = v21 | 0x8000000000000000;
      *(_QWORD *)__dst = v17;
    }
    else
    {
      __dst[23] = v15;
      v17 = __dst;
      if (!v15)
        goto LABEL_79;
    }
LABEL_78:
    memmove(v17, v14, v16);
LABEL_79:
    v17[v16] = 0;
    v35 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
    goto LABEL_97;
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]))
    goto LABEL_38;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB230]))
    goto LABEL_43;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB460]))
    goto LABEL_48;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_57;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB338]))
    goto LABEL_67;
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB2D8]))
    goto LABEL_80;
  v5 = (char *)*MEMORY[0x1E0CFB178];
  if (strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB178]))
  {
LABEL_16:
    v7 = (capabilities::radio *)strcasecmp(v6, (const char *)*MEMORY[0x1E0CF1210]);
    if (!(_DWORD)v7)
    {
      v45 = capabilities::radio::maverick(v7);
      if ((v45 & 1) != 0 || (capabilities::radio::ice((capabilities::radio *)v45) & 1) != 0)
      {
        *(_DWORD *)__dst = -1431655766;
        if ((util::convert<int>(&v96, __dst, 0) & 1) == 0)
          goto LABEL_247;
        v46 = *(_DWORD *)__dst;
        if (*(_DWORD *)__dst > 2u)
          goto LABEL_247;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
        LODWORD(__p.__r_.__value_.__l.__data_) = v46;
        v35 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
    }
    v8 = *(const char **)a1;
    if ((v4 & 0x80u) == 0)
      v9 = a1;
    else
      v9 = *(const char **)a1;
    v10 = (capabilities::radio *)strcasecmp(v9, (const char *)*MEMORY[0x1E0CF1200]);
    if (!(_DWORD)v10)
    {
      if ((capabilities::radio::maverick(v10) & 1) != 0)
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
          goto LABEL_245;
        goto LABEL_247;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v47 = a1;
    else
      v47 = v8;
    v48 = (capabilities::radio *)strcasecmp(v47, (const char *)*MEMORY[0x1E0CF11F8]);
    if (!(_DWORD)v48)
    {
      if ((capabilities::radio::maverick(v48) & 1) != 0)
      {
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
          goto LABEL_245;
        goto LABEL_247;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v49 = a1;
    else
      v49 = v8;
    v50 = (capabilities::radio *)strcasecmp(v49, (const char *)*MEMORY[0x1E0CF1218]);
    if (!(_DWORD)v50)
    {
      if ((capabilities::radio::maverick(v50) & 1) != 0)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!util::convert<unsigned int>(&v96, &__p))
          goto LABEL_247;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
        v35 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&__p);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
      v8 = *(const char **)a1;
    }
    if ((v4 & 0x80u) == 0)
      v51 = a1;
    else
      v51 = v8;
    v52 = (capabilities::radio *)strcasecmp(v51, (const char *)*MEMORY[0x1E0CF1220]);
    if (!(_DWORD)v52)
    {
      if ((capabilities::radio::maverick(v52) & 1) != 0)
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
        if (!diag::config::asEnum())
          goto LABEL_247;
        std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
        data = (int)__p.__r_.__value_.__l.__data_;
        v35 = prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
        goto LABEL_97;
      }
      LOBYTE(v4) = a1[23];
    }
    if ((v4 & 0x80) != 0)
    {
      v53 = *(const char **)a1;
      if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CF1208]))
      {
LABEL_133:
        v54 = (const char *)*MEMORY[0x1E0CFBB60];
        v55 = (capabilities::radio *)strcasecmp(v53, (const char *)*MEMORY[0x1E0CFBB60]);
        if (!(_DWORD)v55)
        {
          if ((capabilities::radio::maverick(v55) & 1) != 0)
          {
LABEL_221:
            std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
            v35 = prop::file::set<std::string>((const void **)__dst, (uint64_t)a1, (uint64_t)&v96);
            goto LABEL_97;
          }
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          v56 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFBD20]))
            goto LABEL_221;
        }
        else
        {
          v56 = a1;
          if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBD20]))
            goto LABEL_221;
        }
        v57 = (capabilities::radio *)strcasecmp(v56, (const char *)*MEMORY[0x1E0CF11F0]);
        if (!(_DWORD)v57)
        {
          if ((capabilities::radio::maverick(v57) & 1) != 0)
            goto LABEL_221;
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0)
          v58 = a1;
        else
          v58 = *(const char **)a1;
        v59 = (const char *)*MEMORY[0x1E0CFB940];
        v60 = (capabilities::radio *)strcasecmp(v58, (const char *)*MEMORY[0x1E0CFB940]);
        if (!(_DWORD)v60)
        {
          if ((capabilities::radio::maverick(v60) & 1) != 0)
            goto LABEL_221;
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          v61 = *(const char **)a1;
          if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFBC00]))
            goto LABEL_221;
        }
        else
        {
          v61 = a1;
          if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBC00]))
            goto LABEL_221;
        }
        v62 = (capabilities::radio *)strcasecmp(v61, v54);
        if (!(_DWORD)v62)
        {
          if ((capabilities::radio::ice(v62) & 1) != 0)
            goto LABEL_221;
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80u) == 0)
          v63 = a1;
        else
          v63 = *(const char **)a1;
        v64 = (capabilities::radio *)strcasecmp(v63, v59);
        if (!(_DWORD)v64)
        {
          if ((capabilities::radio::ice(v64) & 1) != 0)
            goto LABEL_221;
          LOBYTE(v4) = a1[23];
        }
        if ((v4 & 0x80) != 0)
        {
          v65 = *(const char **)a1;
          if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0D01AD8]))
          {
LABEL_170:
            v66 = (capabilities::radio *)strcasecmp(v65, (const char *)*MEMORY[0x1E0D01AC8]);
            if (!(_DWORD)v66)
            {
              if ((capabilities::radio::ice(v66) & 1) != 0)
              {
                LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
                v67 = util::convert<int>(&v96, &__p, 0);
                if (LODWORD(__p.__r_.__value_.__l.__data_) < 0x65)
                  v68 = v67;
                else
                  v68 = 0;
                if (v68 != 1)
                  goto LABEL_247;
                goto LABEL_190;
              }
              LOBYTE(v4) = a1[23];
            }
            v69 = *(const char **)a1;
            if ((v4 & 0x80u) == 0)
              v70 = a1;
            else
              v70 = *(const char **)a1;
            v71 = (capabilities::radio *)strcasecmp(v70, (const char *)*MEMORY[0x1E0D01AC0]);
            if (!(_DWORD)v71)
            {
              if ((capabilities::radio::ice(v71) & 1) != 0)
              {
                LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
                v72 = util::convert<int>(&v96, &__p, 0);
                if (LODWORD(__p.__r_.__value_.__l.__data_) < 0x65)
                  v73 = v72;
                else
                  v73 = 0;
                if (v73 != 1)
                  goto LABEL_247;
                goto LABEL_190;
              }
              LOBYTE(v4) = a1[23];
              v69 = *(const char **)a1;
            }
            if ((v4 & 0x80u) == 0)
              v74 = a1;
            else
              v74 = v69;
            v75 = (capabilities::radio *)strcasecmp(v74, (const char *)*MEMORY[0x1E0D01AB8]);
            if (!(_DWORD)v75)
            {
              if ((capabilities::radio::ice(v75) & 1) != 0)
                goto LABEL_221;
              LOBYTE(v4) = a1[23];
            }
            if ((v4 & 0x80) != 0)
            {
              v76 = *(const char **)a1;
              if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFC0A0]))
              {
                if (!strcasecmp(v76, (const char *)*MEMORY[0x1E0CFC058])
                  || !strcasecmp(v76, (const char *)*MEMORY[0x1E0CFC060]))
                {
                  goto LABEL_221;
                }
                if (strcasecmp(v76, (const char *)*MEMORY[0x1E0CFB228]))
                {
                  if (!strcasecmp(v76, (const char *)*MEMORY[0x1E0CFB7D8])
                    || !strcasecmp(v76, (const char *)*MEMORY[0x1E0CFB950]))
                  {
                    goto LABEL_221;
                  }
LABEL_206:
                  if (!strcasecmp(v76, (const char *)*MEMORY[0x1E0CFBD18]))
                  {
                    __p.__r_.__value_.__s.__data_[0] = -86;
                    if (util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
                    {
LABEL_245:
                      std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
                      v35 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&__p);
                      goto LABEL_97;
                    }
LABEL_247:
                    v12 = 0;
                    goto LABEL_248;
                  }
                  v77 = GetOsLogContext()[1];
                  if (!os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
                    goto LABEL_247;
                  v78 = *MEMORY[0x1E0CFC200];
                  if (a1[23] >= 0)
                    v79 = a1;
                  else
                    v79 = *(char **)a1;
                  v80 = &v96;
                  if ((v96.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v80 = (std::string *)v96.__r_.__value_.__r.__words[0];
                  *(_DWORD *)__dst = 136315906;
                  *(_QWORD *)&__dst[4] = "prop";
                  *(_WORD *)&__dst[12] = 2080;
                  *(_QWORD *)&__dst[14] = v78;
                  *(_WORD *)&__dst[22] = 2080;
                  v98 = v79;
                  v99 = 2080;
                  v100 = v80;
                  v81 = "%s: [bbtrace] set: Invalid key; domain='%s' key='%s' value='%s'";
                  v82 = v77;
                  v83 = 42;
LABEL_214:
                  _os_log_error_impl(&dword_1BF566000, v82, OS_LOG_TYPE_ERROR, v81, __dst, v83);
                  goto LABEL_247;
                }
LABEL_226:
                data = -1431655766;
                v84 = (capabilities::radio *)util::convert<unsigned int>(&v96, &data);
                if ((_DWORD)v84)
                {
                  v85 = data;
                  v86 = (capabilities::abs *)capabilities::radio::vendor(v84);
                  shouldUseMinBasebandTransportIOReadSize = (capabilities::radio *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v86);
                  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
                    v88 = 0x4000;
                  else
                    v88 = 0x8000;
                  if (v85 >= v88)
                  {
                    if (!v85)
                    {
                      v91 = GetOsLogContext()[1];
                      if (!os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
                        goto LABEL_247;
                      *(_WORD *)__dst = 0;
                      v81 = "file size cannot be 0";
                      v82 = v91;
                      v83 = 2;
                      goto LABEL_214;
                    }
                  }
                  else
                  {
                    v89 = (capabilities::abs *)capabilities::radio::vendor(shouldUseMinBasebandTransportIOReadSize);
                    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v89))
                      v85 = 0x4000;
                    else
                      v85 = 0x8000;
                  }
                  data = 1 << (__clz(v85) ^ 0x1F);
                  std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
                  v84 = (capabilities::radio *)prop::file::set<unsigned int>((const void **)__dst, (uint64_t)a1, (unsigned int *)&data);
                  v90 = (int)v84;
                  if ((__dst[23] & 0x80000000) != 0)
                    operator delete(*(void **)__dst);
                }
                else
                {
                  v90 = 0;
                }
                __val = capabilities::trace::defaultHistorySizeMB(v84);
                std::string::basic_string[abi:ne180100]<0>(__dst, v5);
                prop::bbtrace::get<int>(__dst, &__val);
                if ((__dst[23] & 0x80000000) != 0)
                  operator delete(*(void **)__dst);
                if (v90)
                {
                  std::string::basic_string[abi:ne180100]<0>(__dst, v5);
                  std::to_string(&__p, __val);
                  v12 = prop::bbtrace::set(__dst, &__p);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__p.__r_.__value_.__l.__data_);
                  goto LABEL_98;
                }
                goto LABEL_247;
              }
            }
            else if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC0A0]))
            {
              if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC058])
                || !strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC060]))
              {
                goto LABEL_221;
              }
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB228]))
              {
                if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB7D8]))
                  goto LABEL_221;
                v76 = a1;
                if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB950]))
                  goto LABEL_221;
                goto LABEL_206;
              }
              goto LABEL_226;
            }
            __p.__r_.__value_.__s.__data_[0] = 0;
            if (util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
              goto LABEL_245;
            goto LABEL_247;
          }
        }
        else
        {
          v65 = a1;
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0D01AD8]))
            goto LABEL_170;
        }
        __p.__r_.__value_.__s.__data_[0] = -86;
        if (util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
          goto LABEL_245;
        goto LABEL_247;
      }
    }
    else
    {
      v53 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CF1208]))
        goto LABEL_133;
    }
    __p.__r_.__value_.__s.__data_[0] = -86;
    if (util::convert<BOOL>(&v96, (BOOL *)&__p, 0))
      goto LABEL_245;
    goto LABEL_247;
  }
LABEL_31:
  LODWORD(__p.__r_.__value_.__l.__data_) = -1431655766;
  v11 = (capabilities::trace *)util::convert<int>(&v96, &__p, 0);
  v12 = (uint64_t)v11;
  if (SLODWORD(__p.__r_.__value_.__l.__data_) < 0)
    v13 = (int)v11;
  else
    v13 = 0;
  if (v13 == 1)
    LODWORD(__p.__r_.__value_.__l.__data_) = capabilities::trace::defaultHistorySizeMB(v11);
  if ((_DWORD)v12)
  {
LABEL_190:
    std::string::basic_string[abi:ne180100]<0>(__dst, (char *)*MEMORY[0x1E0CFC200]);
    v35 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, (int *)&__p);
    goto LABEL_97;
  }
LABEL_248:
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1BF6C5AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::coredump::set(uint64_t a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  std::string v19;
  _BYTE buf[24];
  const char *v21;
  __int16 v22;
  std::string *v23;
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x1E0C80C00];
  memset(&v19, 170, sizeof(v19));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v19 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::coredump::get((const char *)a1, (uint64_t)&v19))
    goto LABEL_36;
LABEL_8:
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB170]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    v7 = *MEMORY[0x1E0CFB090];
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    v9 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v21 = v8;
    v22 = 2080;
    v23 = v9;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: [coredump] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_36:
    v16 = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    return v16;
  }
  v18 = -86;
  if (!util::convert<BOOL>(&v19, (BOOL *)&v18, 0))
    goto LABEL_36;
  v10 = (const void *)*MEMORY[0x1E0CFB090];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB090]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)&buf[8] = v12;
    *(_QWORD *)&buf[16] = v15 | 0x8000000000000000;
    *(_QWORD *)buf = v13;
    goto LABEL_29;
  }
  buf[23] = v11;
  v13 = buf;
  if (v11)
LABEL_29:
    memmove(v13, v10, v12);
  v13[v12] = 0;
  v16 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v18);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
  }
  else if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_37:
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_1BF6C5FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ipc::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  capabilities::ipc *v5;
  unsigned __int8 v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  std::string *v10;
  int v11;
  int v12;
  const void *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  std::string v29;
  _BYTE buf[24];
  char *v31;
  __int16 v32;
  std::string *v33;
  uint64_t v34;

  v2 = a2;
  v34 = *MEMORY[0x1E0C80C00];
  memset(&v29, 170, sizeof(v29));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v29 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::ipc::get(a1, (uint64_t)&v29))
    goto LABEL_53;
LABEL_8:
  if (a1[23] < 0)
  {
    v4 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]))
    {
      if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB178]))
        goto LABEL_11;
      goto LABEL_24;
    }
LABEL_32:
    LOBYTE(v28) = -86;
    if (!util::convert<BOOL>(&v29, (BOOL *)&v28, 0))
      goto LABEL_53;
    v17 = (const void *)*MEMORY[0x1E0CFC248];
    v18 = strlen((const char *)*MEMORY[0x1E0CFC248]);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v19 = v18;
    if (v18 >= 0x17)
    {
      v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v21 = v18 | 7;
      v22 = v21 + 1;
      v20 = operator new(v21 + 1);
      *(_QWORD *)&buf[8] = v19;
      *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
      *(_QWORD *)buf = v20;
    }
    else
    {
      buf[23] = v18;
      v20 = buf;
      if (!v18)
        goto LABEL_41;
    }
    memmove(v20, v17, v19);
LABEL_41:
    v20[v19] = 0;
    v23 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v28);
    goto LABEL_47;
  }
  if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]))
    goto LABEL_32;
  v4 = a1;
  if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]))
  {
LABEL_11:
    v5 = (capabilities::ipc *)strcasecmp(v4, "BufferCount");
    if ((_DWORD)v5 || (capabilities::ipc::supportsPCI(v5) & 1) == 0)
    {
      {
        GetOsLogContext(void)::sOsLogContext = 0;
        qword_1ED70F6F8 = 0;
        __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
      }
      if (GetOsLogContext(void)::onceToken == -1)
      {
        v7 = qword_1ED70F6F8;
        if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
      }
      else
      {
        dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
        v7 = qword_1ED70F6F8;
        if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
          goto LABEL_53;
      }
      v8 = *MEMORY[0x1E0CFC248];
      if (a1[23] >= 0)
        v9 = a1;
      else
        v9 = *(char **)a1;
      v10 = &v29;
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v10 = (std::string *)v29.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "prop";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 2080;
      v31 = v9;
      v32 = 2080;
      v33 = v10;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "%s: [ipc] set: Invalid key; domain='%s' key='%s' value='%s'",
        buf,
        0x2Au);
    }
LABEL_53:
    v26 = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_54;
    return v26;
  }
LABEL_24:
  v28 = -1431655766;
  v11 = util::convert<int>(&v29, &v28, 0);
  if (v28 >= 0)
    v12 = v11;
  else
    v12 = 0;
  if (v12 != 1)
    goto LABEL_53;
  v13 = (const void *)*MEMORY[0x1E0CFC248];
  v14 = strlen((const char *)*MEMORY[0x1E0CFC248]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v24 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v24 = v14 | 7;
    v25 = v24 + 1;
    v16 = operator new(v24 + 1);
    *(_QWORD *)&buf[8] = v15;
    *(_QWORD *)&buf[16] = v25 | 0x8000000000000000;
    *(_QWORD *)buf = v16;
  }
  else
  {
    buf[23] = v14;
    v16 = buf;
    if (!v14)
      goto LABEL_46;
  }
  memmove(v16, v13, v15);
LABEL_46:
  v16[v15] = 0;
  v23 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v28);
LABEL_47:
  v26 = v23;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_54;
  }
  else if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_54:
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return v26;
}

void sub_1BF6C6480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::bbipc::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  std::string v32;
  _BYTE buf[24];
  char *v34;
  __int16 v35;
  std::string *v36;
  uint64_t v37;

  v2 = a2;
  v37 = *MEMORY[0x1E0C80C00];
  memset(&v32, 170, sizeof(v32));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v32 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::bbipc::get(a1, (uint64_t)&v32))
    goto LABEL_59;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB238]))
        goto LABEL_11;
LABEL_23:
      v31 = -1431655766;
      if (!util::convert<int>(&v32, &v31, 0))
        goto LABEL_59;
      v10 = (const void *)*MEMORY[0x1E0CFB240];
      v11 = strlen((const char *)*MEMORY[0x1E0CFB240]);
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v12 = v11;
      if (v11 >= 0x17)
      {
        v25 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v25 = v11 | 7;
        v26 = v25 + 1;
        v13 = operator new(v25 + 1);
        *(_QWORD *)&buf[8] = v12;
        *(_QWORD *)&buf[16] = v26 | 0x8000000000000000;
        *(_QWORD *)buf = v13;
      }
      else
      {
        buf[23] = v11;
        v13 = buf;
        if (!v11)
          goto LABEL_47;
      }
      memmove(v13, v10, v12);
LABEL_47:
      v13[v12] = 0;
      v24 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v31);
      goto LABEL_53;
    }
LABEL_28:
    LOBYTE(v31) = -86;
    if (!util::convert<BOOL>(&v32, (BOOL *)&v31, 0))
      goto LABEL_59;
    v14 = (const void *)*MEMORY[0x1E0CFB240];
    v15 = strlen((const char *)*MEMORY[0x1E0CFB240]);
    if (v15 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v16 = v15;
    if (v15 >= 0x17)
    {
      v22 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v15 | 7) != 0x17)
        v22 = v15 | 7;
      v23 = v22 + 1;
      v17 = operator new(v22 + 1);
      *(_QWORD *)&buf[8] = v16;
      *(_QWORD *)&buf[16] = v23 | 0x8000000000000000;
      *(_QWORD *)buf = v17;
    }
    else
    {
      buf[23] = v15;
      v17 = buf;
      if (!v15)
        goto LABEL_42;
    }
    memmove(v17, v14, v16);
LABEL_42:
    v17[v16] = 0;
    v24 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v31);
    goto LABEL_53;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]))
    goto LABEL_28;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB238]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB468]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_59;
    }
    v7 = *MEMORY[0x1E0CFB240];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v32;
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v32.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v34 = v8;
    v35 = 2080;
    v36 = v9;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: [bbipc] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_59:
    v29 = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_60;
    return v29;
  }
  v31 = -1431655766;
  if (!util::convert<unsigned int>(&v32, &v31))
    goto LABEL_59;
  v18 = (const void *)*MEMORY[0x1E0CFB240];
  v19 = strlen((const char *)*MEMORY[0x1E0CFB240]);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v27 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v27 = v19 | 7;
    v28 = v27 + 1;
    v21 = operator new(v27 + 1);
    *(_QWORD *)&buf[8] = v20;
    *(_QWORD *)&buf[16] = v28 | 0x8000000000000000;
    *(_QWORD *)buf = v21;
  }
  else
  {
    buf[23] = v19;
    v21 = buf;
    if (!v19)
      goto LABEL_52;
  }
  memmove(v21, v18, v20);
LABEL_52:
  v21[v20] = 0;
  v24 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, (unsigned int *)&v31);
LABEL_53:
  v29 = v24;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_60;
  }
  else if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_60:
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  return v29;
}

void sub_1BF6C69F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::compression::set(char *a1, char *a2)
{
  char *v2;
  int v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  size_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unsigned __int8 v15;
  NSObject *v16;
  uint64_t v17;
  char *v18;
  std::string *v19;
  const void *v20;
  size_t v21;
  size_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  int v27;
  std::string v28;
  _BYTE __dst[24];
  char *v30;
  __int16 v31;
  std::string *v32;
  uint64_t v33;

  v2 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  memset(&v28, 170, sizeof(v28));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v28 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::compression::get(a1, (uint64_t)&v28))
    goto LABEL_44;
LABEL_8:
  v4 = a1[23];
  v5 = *(const char **)a1;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *(const char **)a1;
  if (strcasecmp(v6, (const char *)*MEMORY[0x1E0CF11E8]))
  {
    v7 = 0;
    goto LABEL_26;
  }
  v27 = 0;
  if (util::convert<int>(&v28, &v27, 0))
  {
    v8 = (const void *)*MEMORY[0x1E0CFB248];
    v9 = strlen((const char *)*MEMORY[0x1E0CFB248]);
    if (v9 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v10 = v9;
    if (v9 >= 0x17)
    {
      v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v12 = v9 | 7;
      v13 = v12 + 1;
      v11 = operator new(v12 + 1);
      *(_QWORD *)&__dst[8] = v10;
      *(_QWORD *)&__dst[16] = v13 | 0x8000000000000000;
      *(_QWORD *)__dst = v11;
    }
    else
    {
      __dst[23] = v9;
      v11 = __dst;
      if (!v9)
      {
LABEL_23:
        v11[v10] = 0;
        v7 = prop::file::set<int>((const void **)__dst, (uint64_t)a1, &v27);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        goto LABEL_25;
      }
    }
    memmove(v11, v8, v10);
    goto LABEL_23;
  }
  v7 = 0;
LABEL_25:
  LOBYTE(v4) = a1[23];
  v5 = *(const char **)a1;
LABEL_26:
  if ((v4 & 0x80u) == 0)
    v14 = a1;
  else
    v14 = v5;
  if (!strcasecmp(v14, (const char *)*MEMORY[0x1E0CF1070]))
  {
    LOBYTE(v27) = 1;
    if (util::convert<BOOL>(&v28, (BOOL *)&v27, 0))
    {
      v20 = (const void *)*MEMORY[0x1E0CFB248];
      v21 = strlen((const char *)*MEMORY[0x1E0CFB248]);
      if (v21 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v22 = v21;
      if (v21 >= 0x17)
      {
        v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v24 = v21 | 7;
        v25 = v24 + 1;
        v23 = operator new(v24 + 1);
        *(_QWORD *)&__dst[8] = v22;
        *(_QWORD *)&__dst[16] = v25 | 0x8000000000000000;
        *(_QWORD *)__dst = v23;
      }
      else
      {
        __dst[23] = v21;
        v23 = __dst;
        if (!v21)
        {
LABEL_49:
          v23[v22] = 0;
          v7 = prop::file::set<BOOL>((const void **)__dst, (uint64_t)a1, (unsigned __int8 *)&v27);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          goto LABEL_51;
        }
      }
      memmove(v23, v20, v22);
      goto LABEL_49;
    }
LABEL_44:
    v7 = 0;
    goto LABEL_51;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v16 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v16 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_51;
  }
  v17 = *MEMORY[0x1E0CFB248];
  if (a1[23] >= 0)
    v18 = a1;
  else
    v18 = *(char **)a1;
  v19 = &v28;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
  *(_DWORD *)__dst = 136315906;
  *(_QWORD *)&__dst[4] = "prop";
  *(_WORD *)&__dst[12] = 2080;
  *(_QWORD *)&__dst[14] = v17;
  *(_WORD *)&__dst[22] = 2080;
  v30 = v18;
  v31 = 2080;
  v32 = v19;
  _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "%s: [compression] set: Invalid key; domain='%s' key='%s' value='%s'",
    __dst,
    0x2Au);
LABEL_51:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BF6C6E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::ttr::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  std::string v26;
  _BYTE buf[24];
  char *v28;
  __int16 v29;
  std::string *v30;
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  memset(&v26, 170, sizeof(v26));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v26 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::ttr::get(a1, (uint64_t)&v26))
    goto LABEL_51;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
      goto LABEL_10;
LABEL_21:
    v25 = -1431655766;
    v10 = util::convert<unsigned int>(&v26, &v25);
    if (v25 < 4)
      v11 = v10;
    else
      v11 = 0;
    if (v11 != 1)
      goto LABEL_51;
    v12 = (const void *)*MEMORY[0x1E0CFB198];
    v13 = strlen((const char *)*MEMORY[0x1E0CFB198]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v19 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v19 = v13 | 7;
      v20 = v19 + 1;
      v15 = operator new(v19 + 1);
      *(_QWORD *)&buf[8] = v14;
      *(_QWORD *)&buf[16] = v20 | 0x8000000000000000;
      *(_QWORD *)buf = v15;
    }
    else
    {
      buf[23] = v13;
      v15 = buf;
      if (!v13)
        goto LABEL_45;
    }
    goto LABEL_44;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_21;
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBBF8]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_51;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_51;
    }
    v7 = *MEMORY[0x1E0CFB198];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v28 = v8;
    v29 = 2080;
    v30 = v9;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: [ttr] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_51:
    v23 = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_52;
    return v23;
  }
  v25 = -1431655766;
  v16 = util::convert<unsigned int>(&v26, &v25);
  if (v25)
    v17 = v16;
  else
    v17 = 0;
  if (v17 != 1)
    goto LABEL_51;
  v12 = (const void *)*MEMORY[0x1E0CFB198];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB198]);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v15 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v14;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v15;
    goto LABEL_44;
  }
  buf[23] = v18;
  v15 = buf;
  if (v18)
LABEL_44:
    memmove(v15, v12, v14);
LABEL_45:
  v15[v14] = 0;
  v23 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v25);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_52;
  }
  else if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_52:
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v23;
}

void sub_1BF6C7320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::logfilter::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  std::string v33;
  _BYTE buf[24];
  char *v35;
  __int16 v36;
  std::string *v37;
  uint64_t v38;

  v2 = a2;
  v38 = *MEMORY[0x1E0C80C00];
  memset(&v33, 170, sizeof(v33));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v33 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::logfilter::get(a1, (uint64_t)&v33))
    goto LABEL_64;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB570]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB7E8]))
        goto LABEL_11;
LABEL_23:
      v32 = -1431655766;
      v10 = util::convert<int>(&v33, &v32, 0);
      if (v32 > -2)
        v11 = v10;
      else
        v11 = 0;
      if (v11 != 1)
        goto LABEL_64;
      v12 = (const void *)*MEMORY[0x1E0CFAFC0];
      v13 = strlen((const char *)*MEMORY[0x1E0CFAFC0]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v26 = v13 | 7;
        v27 = v26 + 1;
        v15 = operator new(v26 + 1);
        *(_QWORD *)&buf[8] = v14;
        *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
        *(_QWORD *)buf = v15;
      }
      else
      {
        buf[23] = v13;
        v15 = buf;
        if (!v13)
          goto LABEL_48;
      }
LABEL_47:
      memmove(v15, v12, v14);
LABEL_48:
      v15[v14] = 0;
      v25 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v32);
      goto LABEL_58;
    }
LABEL_31:
    v32 = -1431655766;
    v16 = util::convert<int>(&v33, &v32, 0);
    if (v32 > -2)
      v17 = v16;
    else
      v17 = 0;
    if (v17 != 1)
      goto LABEL_64;
    v12 = (const void *)*MEMORY[0x1E0CFAFC0];
    v18 = strlen((const char *)*MEMORY[0x1E0CFAFC0]);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v18;
    if (v18 >= 0x17)
    {
      v23 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v23 = v18 | 7;
      v24 = v23 + 1;
      v15 = operator new(v23 + 1);
      *(_QWORD *)&buf[8] = v14;
      *(_QWORD *)&buf[16] = v24 | 0x8000000000000000;
      *(_QWORD *)buf = v15;
    }
    else
    {
      buf[23] = v18;
      v15 = buf;
      if (!v18)
        goto LABEL_48;
    }
    goto LABEL_47;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB570]))
    goto LABEL_31;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB7E8]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFC0C0]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
    }
    v7 = *MEMORY[0x1E0CFAFC0];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v33;
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v35 = v8;
    v36 = 2080;
    v37 = v9;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: [logfilter] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_64:
    v30 = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_65;
    return v30;
  }
  LOBYTE(v32) = 1;
  if (!util::convert<BOOL>(&v33, (BOOL *)&v32, 0))
    goto LABEL_64;
  v19 = (const void *)*MEMORY[0x1E0CFAFC0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFAFC0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v28 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v28 = v20 | 7;
    v29 = v28 + 1;
    v22 = operator new(v28 + 1);
    *(_QWORD *)&buf[8] = v21;
    *(_QWORD *)&buf[16] = v29 | 0x8000000000000000;
    *(_QWORD *)buf = v22;
  }
  else
  {
    buf[23] = v20;
    v22 = buf;
    if (!v20)
      goto LABEL_57;
  }
  memmove(v22, v19, v21);
LABEL_57:
  v22[v21] = 0;
  v25 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v32);
LABEL_58:
  v30 = v25;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_65;
  }
  else if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_65:
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return v30;
}

void sub_1BF6C78B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::systemlogs::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  int v10;
  int v11;
  const void *v12;
  size_t v13;
  size_t v14;
  _BYTE *v15;
  int IsCarrierBuild;
  unsigned int v17;
  const void *v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  const void *v22;
  size_t v23;
  size_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v35;
  std::string v36;
  _BYTE buf[24];
  char *v38;
  __int16 v39;
  std::string *v40;
  uint64_t v41;

  v2 = a2;
  v41 = *MEMORY[0x1E0C80C00];
  memset(&v36, 170, sizeof(v36));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v36 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::systemlogs::get(a1, (uint64_t)&v36))
    goto LABEL_69;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]))
        goto LABEL_11;
LABEL_23:
      v35 = -1431655766;
      v10 = util::convert<int>(&v36, &v35, 0);
      if ((int)v35 > 0)
        v11 = v10;
      else
        v11 = 0;
      if (v11 != 1)
        goto LABEL_69;
      v12 = (const void *)*MEMORY[0x1E0CFB190];
      v13 = strlen((const char *)*MEMORY[0x1E0CFB190]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = v13;
      if (v13 >= 0x17)
      {
        v26 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v26 = v13 | 7;
        v27 = v26 + 1;
        v15 = operator new(v26 + 1);
        *(_QWORD *)&buf[8] = v14;
        *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
        *(_QWORD *)buf = v15;
      }
      else
      {
        buf[23] = v13;
        v15 = buf;
        if (!v13)
          goto LABEL_52;
      }
      memmove(v15, v12, v14);
LABEL_52:
      v15[v14] = 0;
      v28 = prop::file::set<int>((const void **)buf, (uint64_t)a1, (int *)&v35);
      goto LABEL_63;
    }
LABEL_31:
    v35 = -1431655766;
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    if (!util::convert<unsigned int>(&v36, &v35))
      goto LABEL_69;
    v17 = IsCarrierBuild ? 3 : 2;
    if (v35 >= v17)
      goto LABEL_69;
    v18 = (const void *)*MEMORY[0x1E0CFB190];
    v19 = strlen((const char *)*MEMORY[0x1E0CFB190]);
    if (v19 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v20 = v19;
    if (v19 >= 0x17)
    {
      v29 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v29 = v19 | 7;
      v30 = v29 + 1;
      v21 = operator new(v29 + 1);
      *(_QWORD *)&buf[8] = v20;
      *(_QWORD *)&buf[16] = v30 | 0x8000000000000000;
      *(_QWORD *)buf = v21;
    }
    else
    {
      buf[23] = v19;
      v21 = buf;
      if (!v19)
        goto LABEL_57;
    }
    memmove(v21, v18, v20);
LABEL_57:
    v21[v20] = 0;
    v28 = prop::file::set<unsigned int>((const void **)buf, (uint64_t)a1, &v35);
    goto LABEL_63;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_31;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB178]))
    goto LABEL_23;
LABEL_11:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBA40]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_69;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_69;
    }
    v7 = *MEMORY[0x1E0CFB190];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v36.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v38 = v8;
    v39 = 2080;
    v40 = v9;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: [systemlogs] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_69:
    v33 = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_70;
    return v33;
  }
  LOBYTE(v35) = -86;
  if (!util::convert<BOOL>(&v36, (BOOL *)&v35, 0))
    goto LABEL_69;
  v22 = (const void *)*MEMORY[0x1E0CFB190];
  v23 = strlen((const char *)*MEMORY[0x1E0CFB190]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v31 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v31 = v23 | 7;
    v32 = v31 + 1;
    v25 = operator new(v31 + 1);
    *(_QWORD *)&buf[8] = v24;
    *(_QWORD *)&buf[16] = v32 | 0x8000000000000000;
    *(_QWORD *)buf = v25;
  }
  else
  {
    buf[23] = v23;
    v25 = buf;
    if (!v23)
      goto LABEL_62;
  }
  memmove(v25, v22, v24);
LABEL_62:
  v25[v24] = 0;
  v28 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v35);
LABEL_63:
  v33 = v28;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_70;
  }
  else if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_70:
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  return v33;
}

void sub_1BF6C7E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t prop::profile::set(char *a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v25;
  std::string v26;
  _BYTE buf[24];
  char *v28;
  __int16 v29;
  std::string *v30;
  uint64_t v31;

  v2 = a2;
  v31 = *MEMORY[0x1E0C80C00];
  memset(&v26, 170, sizeof(v26));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v26 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::profile::get(a1, (uint64_t)&v26))
    goto LABEL_47;
LABEL_8:
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]))
      goto LABEL_10;
LABEL_21:
    LOBYTE(v25) = -86;
    if (!util::convert<BOOL>(&v26, (BOOL *)&v25, 0))
      goto LABEL_47;
    v10 = (const void *)*MEMORY[0x1E0CFB048];
    v11 = strlen((const char *)*MEMORY[0x1E0CFB048]);
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = v11;
    if (v11 >= 0x17)
    {
      v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v18 = v11 | 7;
      v19 = v18 + 1;
      v13 = operator new(v18 + 1);
      *(_QWORD *)&buf[8] = v12;
      *(_QWORD *)&buf[16] = v19 | 0x8000000000000000;
      *(_QWORD *)buf = v13;
    }
    else
    {
      buf[23] = v11;
      v13 = buf;
      if (!v11)
        goto LABEL_35;
    }
    memmove(v13, v10, v12);
LABEL_35:
    v13[v12] = 0;
    v20 = prop::file::set<BOOL>((const void **)buf, (uint64_t)a1, (unsigned __int8 *)&v25);
    goto LABEL_41;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFAF68]))
    goto LABEL_21;
LABEL_10:
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFC078]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_47;
    }
    v7 = *MEMORY[0x1E0CFB048];
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    v9 = &v26;
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v28 = v8;
    v29 = 2080;
    v30 = v9;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: [profile] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_47:
    v23 = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_48;
    return v23;
  }
  v25 = -1431655766;
  if (!util::convert<int>(&v26, &v25, 0))
    goto LABEL_47;
  v14 = (const void *)*MEMORY[0x1E0CFB048];
  v15 = strlen((const char *)*MEMORY[0x1E0CFB048]);
  if (v15 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v16 = v15;
  if (v15 >= 0x17)
  {
    v21 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v21 = v15 | 7;
    v22 = v21 + 1;
    v17 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v16;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v17;
  }
  else
  {
    buf[23] = v15;
    v17 = buf;
    if (!v15)
      goto LABEL_40;
  }
  memmove(v17, v14, v16);
LABEL_40:
  v17[v16] = 0;
  v20 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v26);
LABEL_41:
  v23 = v20;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_48;
  }
  else if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_48:
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  return v23;
}

void sub_1BF6C8304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tailspin::set(uint64_t a1, char *a2)
{
  char *v2;
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  std::string *v9;
  const void *v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  std::string v19;
  _BYTE buf[24];
  const char *v21;
  __int16 v22;
  std::string *v23;
  uint64_t v24;

  v2 = a2;
  v24 = *MEMORY[0x1E0C80C00];
  memset(&v19, 170, sizeof(v19));
  if (a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    if (v2[23] < 0)
      v2 = *(char **)v2;
    if (strcasecmp(v2, "default"))
      goto LABEL_8;
  }
  else
  {
    v19 = *(std::string *)a2;
    if (strcasecmp(a2, "default"))
      goto LABEL_8;
  }
  if (!defaults::tailspin::get((const char *)a1, (uint64_t)&v19))
    goto LABEL_36;
LABEL_8:
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  if (strcasecmp(v4, (const char *)*MEMORY[0x1E0CFAF68]))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_36;
    }
    v7 = *MEMORY[0x1E0CFB0A0];
    if (*(char *)(a1 + 23) >= 0)
      v8 = (const char *)a1;
    else
      v8 = *(const char **)a1;
    v9 = &v19;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "prop";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2080;
    v21 = v8;
    v22 = 2080;
    v23 = v9;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: [tailspin] set: Invalid key; domain='%s' key='%s' value='%s'",
      buf,
      0x2Au);
LABEL_36:
    v16 = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    return v16;
  }
  v18 = -86;
  if (!util::convert<BOOL>(&v19, (BOOL *)&v18, 0))
    goto LABEL_36;
  v10 = (const void *)*MEMORY[0x1E0CFB0A0];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB0A0]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    *(_QWORD *)&buf[8] = v12;
    *(_QWORD *)&buf[16] = v15 | 0x8000000000000000;
    *(_QWORD *)buf = v13;
    goto LABEL_29;
  }
  buf[23] = v11;
  v13 = buf;
  if (v11)
LABEL_29:
    memmove(v13, v10, v12);
  v13[v12] = 0;
  v16 = prop::file::set<BOOL>((const void **)buf, a1, (unsigned __int8 *)&v18);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
  }
  else if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_37:
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_1BF6C869C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::tracesettings::set(char *a1, uint64_t a2)
{
  const char *v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  char *v7;
  std::string *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  std::string v31;
  _BYTE buf[24];
  char *v33;
  __int16 v34;
  std::string *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  memset(&v31, 170, sizeof(v31));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v31 = *(std::string *)a2;
  if (a1[23] < 0)
  {
    v3 = *(const char **)a1;
    if (strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB938]))
    {
      if (strcasecmp(v3, (const char *)*MEMORY[0x1E0CFBA30]))
      {
        if (strcasecmp(v3, (const char *)*MEMORY[0x1E0CFB470]))
        {
LABEL_8:
          if (strcasecmp(v3, (const char *)*MEMORY[0x1E0CFB7D0]))
          {
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED70F6F8 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v5 = qword_1ED70F6F8;
              if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
                goto LABEL_63;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
              v5 = qword_1ED70F6F8;
              if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
                goto LABEL_63;
            }
            v6 = *MEMORY[0x1E0CFB098];
            if (a1[23] >= 0)
              v7 = a1;
            else
              v7 = *(char **)a1;
            v8 = &v31;
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "prop";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v6;
            *(_WORD *)&buf[22] = 2080;
            v33 = v7;
            v34 = 2080;
            v35 = v8;
            _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "%s: [tracesettings] set: Invalid key; domain='%s' key='%s' value='%s'",
              buf,
              0x2Au);
LABEL_63:
            v28 = 0;
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_64;
            return v28;
          }
          v30 = -1431655766;
          if (!util::convert<int>(&v31, &v30, 0))
            goto LABEL_63;
          v13 = (const void *)*MEMORY[0x1E0CFB098];
          v23 = strlen((const char *)*MEMORY[0x1E0CFB098]);
          if (v23 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v15 = v23;
          if (v23 >= 0x17)
          {
            v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v23 | 7) != 0x17)
              v26 = v23 | 7;
            v27 = v26 + 1;
            v16 = operator new(v26 + 1);
            *(_QWORD *)&buf[8] = v15;
            *(_QWORD *)&buf[16] = v27 | 0x8000000000000000;
            *(_QWORD *)buf = v16;
          }
          else
          {
            buf[23] = v23;
            v16 = buf;
            if (!v23)
              goto LABEL_56;
          }
          goto LABEL_55;
        }
LABEL_21:
        v9 = (const void *)*MEMORY[0x1E0CFB098];
        v10 = strlen((const char *)*MEMORY[0x1E0CFB098]);
        if (v10 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v11 = v10;
        if (v10 >= 0x17)
        {
          v24 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v24 = v10 | 7;
          v25 = v24 + 1;
          v12 = operator new(v24 + 1);
          *(_QWORD *)&buf[8] = v11;
          *(_QWORD *)&buf[16] = v25 | 0x8000000000000000;
          *(_QWORD *)buf = v12;
        }
        else
        {
          buf[23] = v10;
          v12 = buf;
          if (!v10)
            goto LABEL_38;
        }
LABEL_37:
        memmove(v12, v9, v11);
LABEL_38:
        v12[v11] = 0;
        v20 = prop::file::set<std::string>((const void **)buf, (uint64_t)a1, (uint64_t)&v31);
        goto LABEL_57;
      }
LABEL_30:
      v9 = (const void *)*MEMORY[0x1E0CFB098];
      v17 = strlen((const char *)*MEMORY[0x1E0CFB098]);
      if (v17 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v11 = v17;
      if (v17 >= 0x17)
      {
        v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17)
          v18 = v17 | 7;
        v19 = v18 + 1;
        v12 = operator new(v18 + 1);
        *(_QWORD *)&buf[8] = v11;
        *(_QWORD *)&buf[16] = v19 | 0x8000000000000000;
        *(_QWORD *)buf = v12;
      }
      else
      {
        buf[23] = v17;
        v12 = buf;
        if (!v17)
          goto LABEL_38;
      }
      goto LABEL_37;
    }
  }
  else if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB938]))
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBA30]))
    {
      v3 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB470]))
        goto LABEL_8;
      goto LABEL_21;
    }
    goto LABEL_30;
  }
  v30 = -1431655766;
  if (!util::convert<int>(&v31, &v30, 0))
    goto LABEL_63;
  v13 = (const void *)*MEMORY[0x1E0CFB098];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB098]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v21 = v14 | 7;
    v22 = v21 + 1;
    v16 = operator new(v21 + 1);
    *(_QWORD *)&buf[8] = v15;
    *(_QWORD *)&buf[16] = v22 | 0x8000000000000000;
    *(_QWORD *)buf = v16;
  }
  else
  {
    buf[23] = v14;
    v16 = buf;
    if (!v14)
      goto LABEL_56;
  }
LABEL_55:
  memmove(v16, v13, v15);
LABEL_56:
  v16[v15] = 0;
  v20 = prop::file::set<int>((const void **)buf, (uint64_t)a1, &v30);
LABEL_57:
  v28 = v20;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_64;
  }
  else if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
LABEL_64:
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  return v28;
}

void sub_1BF6C8C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t prop::file::set<BOOL>(const void **a1, uint64_t a2, unsigned __int8 *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  __int128 v36;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((_QWORD)xmmword_1ED70F248)
  {
LABEL_32:
    v22 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    LODWORD(v23) = xmmword_1ED70F248;
    v36 = xmmword_1ED70F248;
    if (!*((_QWORD *)&xmmword_1ED70F248 + 1))
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E7919E70;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
  *(_QWORD *)&xmmword_1ED70F248 = v23;
  *((_QWORD *)&xmmword_1ED70F248 + 1) = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  *(_QWORD *)&v36 = v23;
  *((_QWORD *)&v36 + 1) = v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1BF6C9040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<int>(const void **a1, uint64_t a2, int *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  __int128 v36;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((_QWORD)xmmword_1ED70F248)
  {
LABEL_32:
    v22 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    LODWORD(v23) = xmmword_1ED70F248;
    v36 = xmmword_1ED70F248;
    if (!*((_QWORD *)&xmmword_1ED70F248 + 1))
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E7919E70;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
  *(_QWORD *)&xmmword_1ED70F248 = v23;
  *((_QWORD *)&xmmword_1ED70F248 + 1) = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  *(_QWORD *)&v36 = v23;
  *((_QWORD *)&v36 + 1) = v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1BF6C9484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<std::string>(const void **a1, uint64_t a2, uint64_t a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  _QWORD *v20;
  void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string __p;
  __int128 v34;
  void *v35[4];
  std::string __dst;

  memset(v35, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v35[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v35 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35[2]) >= 0)
    v18 = (void **)((char *)v35 + HIBYTE(v35[2]));
  else
    v18 = (void **)((char *)v35[0] + (unint64_t)v35[1]);
  if (SHIBYTE(v35[2]) >= 0)
    v19 = v35;
  else
    v19 = (void **)v35[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(_QWORD)xmmword_1ED70F248)
  {
    v21 = operator new(0x18uLL);
    MEMORY[0x1C3B8B8C0](v21, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v20 = operator new(0x20uLL);
    *v20 = &unk_1E7919E70;
    v20[1] = 0;
    v20[2] = 0;
    v20[3] = v21;
    v22 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    *(_QWORD *)&xmmword_1ED70F248 = v21;
    *((_QWORD *)&xmmword_1ED70F248 + 1) = v20;
    if (!v22)
    {
      *(_QWORD *)&v34 = v21;
      *((_QWORD *)&v34 + 1) = v20;
LABEL_40:
      v25 = v20 + 1;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      goto LABEL_42;
    }
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v20 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
  LODWORD(v21) = xmmword_1ED70F248;
  v34 = xmmword_1ED70F248;
  if (*((_QWORD *)&xmmword_1ED70F248 + 1))
    goto LABEL_40;
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  if (SHIBYTE(v35[2]) >= 0)
    v27 = (char *)v35;
  else
    v27 = (char *)v35[0];
  v28 = ctu::cf::plist_adapter::set<std::string>((int)v21, (uint64_t)&__dst, v27);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
      if (!*((_QWORD *)&v34 + 1))
        goto LABEL_60;
      goto LABEL_57;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_53;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_60;
LABEL_57:
  v30 = (unint64_t *)&v29->__shared_owners_;
  do
    v31 = __ldaxr(v30);
  while (__stlxr(v31 - 1, v30));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    if ((SHIBYTE(v35[2]) & 0x80000000) == 0)
      return v28;
    goto LABEL_61;
  }
LABEL_60:
  if (SHIBYTE(v35[2]) < 0)
LABEL_61:
    operator delete(v35[0]);
  return v28;
}

void sub_1BF6C98AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t prop::file::set<unsigned int>(const void **a1, uint64_t a2, unsigned int *a3)
{
  int v3;
  size_t v4;
  unint64_t v5;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void **v18;
  void **v19;
  __int128 v20;
  std::string::size_type v21;
  _QWORD *v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v35;
  __int128 v36;
  void *__p[4];
  std::string __dst;

  memset(__p, 170, 24);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = (size_t)a1[1];
  v5 = v4 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v4 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 >= 0x17)
  {
    v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v10 = v5 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v4 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4 + 1;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *a1;
  memmove(p_dst, v12, v4);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v4) = 46;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a2;
  else
    v14 = *(const std::string::value_type **)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = std::string::append(&__dst, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  __p[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = (void **)((char *)__p + HIBYTE(__p[2]));
  else
    v18 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  if (SHIBYTE(__p[2]) >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  for (; v19 != v18; v19 = (void **)((char *)v19 + 1))
    *(_BYTE *)v19 = __tolower(*(char *)v19);
  std::to_string(&__dst, *a3);
  v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v21 = __dst.__r_.__value_.__r.__words[2];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((_QWORD)xmmword_1ED70F248)
  {
LABEL_32:
    v22 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    LODWORD(v23) = xmmword_1ED70F248;
    v36 = xmmword_1ED70F248;
    if (!*((_QWORD *)&xmmword_1ED70F248 + 1))
      goto LABEL_42;
    goto LABEL_40;
  }
  v23 = operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v22 = operator new(0x20uLL);
  *v22 = &unk_1E7919E70;
  v22[1] = 0;
  v22[2] = 0;
  v22[3] = v23;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
  *(_QWORD *)&xmmword_1ED70F248 = v23;
  *((_QWORD *)&xmmword_1ED70F248 + 1) = v22;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    goto LABEL_32;
  }
  *(_QWORD *)&v36 = v23;
  *((_QWORD *)&v36 + 1) = v22;
LABEL_40:
  v27 = v22 + 1;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if ((v21 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v20;
    v35.__r_.__value_.__r.__words[2] = v21;
LABEL_45:
    __dst = v35;
    goto LABEL_46;
  }
  std::string::__init_copy_ctor_external(&v35, (const std::string::value_type *)v20, *((std::string::size_type *)&v20 + 1));
  if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_45;
  std::string::__init_copy_ctor_external(&__dst, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
LABEL_46:
  if (SHIBYTE(__p[2]) >= 0)
    v29 = (char *)__p;
  else
    v29 = (char *)__p[0];
  v30 = ctu::cf::plist_adapter::set<std::string>((int)v23, (uint64_t)&__dst, v29);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_51;
LABEL_54:
    operator delete(v35.__r_.__value_.__l.__data_);
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
      goto LABEL_58;
    goto LABEL_55;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_54;
LABEL_51:
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (!*((_QWORD *)&v36 + 1))
    goto LABEL_58;
LABEL_55:
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_58:
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_59;
LABEL_62:
    operator delete((void *)v20);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return v30;
LABEL_63:
    operator delete(__p[0]);
    return v30;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v21 & 0x8000000000000000) != 0)
    goto LABEL_62;
LABEL_59:
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_63;
  return v30;
}

void sub_1BF6C9CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  uint64_t v31;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (v31 < 0)
    operator delete(v30);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t util::convert<unsigned int>(const std::string *a1, _DWORD *a2)
{
  unint64_t v4;
  const char *v5;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v4) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v4)
      goto LABEL_29;
    LODWORD(v4) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v4)
      goto LABEL_29;
    LODWORD(v4) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v4)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v5 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v4) = 1;
    goto LABEL_29;
  }
  v5 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v4) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v4)
    goto LABEL_29;
  LODWORD(v4) = strcasecmp(v5, "off");
  if (!(_DWORD)v4)
    goto LABEL_29;
  LODWORD(v4) = strcasecmp(v5, "no");
  if (!(_DWORD)v4)
    goto LABEL_29;
  if (!strcasecmp(v5, "true")
    || !strcasecmp(v5, "on")
    || !strcasecmp(v5, "yes")
    || !strcasecmp(v5, "full")
    || !strcasecmp(v5, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v5, "lite"))
  {
LABEL_30:
    LODWORD(v4) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v5, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v4 = std::stol(a1, &__idx, 0);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || (v4 & 0x8000000000000000) != 0 || HIDWORD(v4))
    return 0;
LABEL_29:
  *a2 = v4;
  return 1;
}

uint64_t sub_1BF6C9FD0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void prop::bbtrace::get<int>(char *a1, _DWORD *a2)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get(a1, (uint64_t)&__p))
    util::convert<int>(&__p, a2, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF6CA058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::tracesettings::anyEnabled(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB190], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB090], v3)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v4)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v5)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB240], v6)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB0A0], v7);
}

BOOL prop::tracesettings::isContinuous(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v3);
}

BOOL prop::tracesettings::mobileBasebandServicesEnabled(prop::tracesettings *this, const char *a2)
{
  const char *v2;
  const char *v3;

  return prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v2)
      || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v3);
}

uint64_t ctu::cf::plist_adapter::set<std::string>(int a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v6;
  std::string v7;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a3);
  v4 = ctu::cf::plist_adapter::set<std::string>();
  MEMORY[0x1C3B8B878](&v6);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t ctu::cf::plist_adapter::set<std::string>()
{
  ctu::cf::convert_copy();
  return 0;
}

void sub_1BF6CA358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

const char *AccessorySimulatorDelegate::getName(AccessorySimulatorDelegate *this)
{
  return "AccessorySimulator.delegate";
}

uint64_t AccessorySimulatorDelegate::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = (std::__shared_weak_count_vtbl *)operator new(0x80uLL);
  v7 = a1[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v28 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v27);
LABEL_6:
  v8 = *a2;
  v24 = v8;
  if (v8)
    dispatch_retain(v8);
  AccessorySimulatorDelegate::AccessorySimulatorDelegate((uint64_t)v6, v27, &v24);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E791E8C0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v25 = v6;
  v26 = v11;
  if (v8)
    dispatch_release(v8);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_27;
  }
  if (v28)
  {
    v22 = 5;
LABEL_27:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v9, v10);
  }
  result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1BF6CA59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t AccessorySimulatorDelegate::AccessorySimulatorDelegate(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E791E7C8;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v13 = 0;
  }
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", v7);
  *(_QWORD *)a1 = off_1E791FD60;
  v8 = (uint64_t)v13;
  if (!v13)
    goto LABEL_13;
  if (v13 != v12)
  {
    v8 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_13:
    *(_QWORD *)(a1 + 72) = v8;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD *))(v12[0] + 24))(v12);
LABEL_15:
  *(_BYTE *)(a1 + 80) = 0;
  if (v6)
    dispatch_release(v6);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_21;
  }
  if (v13)
  {
    v10 = 5;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)a1 = off_1E791E7C8;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  return a1;
}

void sub_1BF6CA828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  NSObject *v13;
  _QWORD *v14;

  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v14);
  if (v13)
    dispatch_release(v13);
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(a1);
  }
  if (!a13)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::~AccessorySimulatorDelegate(AccessorySimulatorDelegate *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  AccessorySimulatorDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E791E7C8;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = off_1E791FD60;
  v5 = (AccessorySimulatorDelegate *)*((_QWORD *)this + 9);
  if (v5 == (AccessorySimulatorDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (AccessorySimulatorDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  AccessorySimulatorDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E791E7C8;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = off_1E791FD60;
  v5 = (AccessorySimulatorDelegate *)*((_QWORD *)this + 9);
  if (v5 == (AccessorySimulatorDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (AccessorySimulatorDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  AccessorySimulatorDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E791E7C8;
  v2 = (_QWORD *)*((_QWORD *)this + 13);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
    operator delete(v4);
  *(_QWORD *)this = off_1E791FD60;
  v5 = (AccessorySimulatorDelegate *)*((_QWORD *)this + 9);
  if (v5 == (AccessorySimulatorDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (AccessorySimulatorDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_10;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_10:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  operator delete(this);
}

uint64_t AccessorySimulatorDelegate::handleServerCommand(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  const void *v6;
  size_t v7;
  size_t v8;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  int v16;
  void **v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  char v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  int v37;
  void **v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char v44;
  _QWORD v46[5];
  _QWORD v47[5];
  xpc_object_t object;
  void **__dst;
  size_t v50;
  int64_t v51;

  v6 = (const void *)*MEMORY[0x1E0CFC040];
  v7 = strlen((const char *)*MEMORY[0x1E0CFC040]);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_71:
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    v50 = v8;
    v51 = v11 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v51) = v7;
  p_dst = (void **)&__dst;
  if (v7)
LABEL_8:
    memmove(p_dst, v6, v8);
  v12 = 0;
  *((_BYTE *)p_dst + v8) = 0;
  v13 = a2[23];
  if ((v13 & 0x80u) == 0)
    v14 = a2[23];
  else
    v14 = *((_QWORD *)a2 + 1);
  v15 = HIBYTE(v51);
  v16 = SHIBYTE(v51);
  if (v51 < 0)
    v15 = v50;
  if (v14 != v15)
  {
LABEL_28:
    if ((v16 & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_32;
  }
  if (v51 >= 0)
    v17 = (void **)&__dst;
  else
    v17 = __dst;
  if ((v13 & 0x80) != 0)
  {
    v12 = memcmp(*(const void **)a2, v17, *((_QWORD *)a2 + 1)) == 0;
    goto LABEL_28;
  }
  if (a2[23])
  {
    v18 = v13 - 1;
    v19 = a2;
    do
    {
      v21 = *v19++;
      v20 = v21;
      v23 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v22 = v23;
      v24 = v18-- != 0;
      v25 = v24;
      v12 = v20 == v22;
    }
    while (v20 == v22 && (v25 & 1) != 0);
    goto LABEL_28;
  }
  v12 = 1;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_29:
    if (!v12)
      goto LABEL_37;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(__dst);
  if (!v12)
    goto LABEL_37;
LABEL_33:
  v47[0] = MEMORY[0x1E0C809B0];
  v47[1] = 1174405120;
  v47[2] = ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke;
  v47[3] = &__block_descriptor_tmp_29;
  v26 = *a3;
  v47[4] = a1;
  object = v26;
  if (v26)
    xpc_retain(v26);
  else
    object = xpc_null_create();
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v47);
  xpc_release(object);
  object = 0;
LABEL_37:
  v27 = (const void *)*MEMORY[0x1E0CFC008];
  v28 = strlen((const char *)*MEMORY[0x1E0CFC008]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_71;
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v50 = v29;
    v51 = v32 | 0x8000000000000000;
    __dst = v30;
    goto LABEL_44;
  }
  HIBYTE(v51) = v28;
  v30 = (void **)&__dst;
  if (v28)
LABEL_44:
    memmove(v30, v27, v29);
  v33 = 0;
  *((_BYTE *)v30 + v29) = 0;
  v34 = a2[23];
  if ((v34 & 0x80u) == 0)
    v35 = a2[23];
  else
    v35 = *((_QWORD *)a2 + 1);
  v36 = HIBYTE(v51);
  v37 = SHIBYTE(v51);
  if (v51 < 0)
    v36 = v50;
  if (v35 != v36)
  {
LABEL_64:
    if ((v37 & 0x80000000) == 0)
      goto LABEL_65;
LABEL_69:
    operator delete(__dst);
    if (!v33)
      return v12;
    goto LABEL_66;
  }
  if (v51 >= 0)
    v38 = (void **)&__dst;
  else
    v38 = __dst;
  if ((v34 & 0x80) != 0)
  {
    v33 = memcmp(*(const void **)a2, v38, *((_QWORD *)a2 + 1)) == 0;
    goto LABEL_64;
  }
  if (a2[23])
  {
    v39 = v34 - 1;
    do
    {
      v41 = *a2++;
      v40 = v41;
      v43 = *(unsigned __int8 *)v38;
      v38 = (void **)((char *)v38 + 1);
      v42 = v43;
      v24 = v39-- != 0;
      v44 = v24;
      v33 = v40 == v42;
    }
    while (v40 == v42 && (v44 & 1) != 0);
    goto LABEL_64;
  }
  v33 = 1;
  if (SHIBYTE(v51) < 0)
    goto LABEL_69;
LABEL_65:
  if (v33)
  {
LABEL_66:
    v46[0] = MEMORY[0x1E0C809B0];
    v46[1] = 0x40000000;
    v46[2] = ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke_3;
    v46[3] = &__block_descriptor_tmp_4_2;
    v46[4] = a1;
    ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v46);
    return 1;
  }
  return v12;
}

void ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t ***v13;
  uint64_t **v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  CFTypeRef v18;
  void **v19;
  unsigned __int16 *v20;
  unint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  _QWORD *v26;
  _BOOL8 v27;
  unint64_t v28;
  unint64_t v29;
  size_t prime;
  void *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  size_t v36;
  size_t v37;
  size_t v38;
  _QWORD *i;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  size_t v48;
  uint64_t v49;
  unint64_t v50;
  void *v51;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  void **v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  void *v66;
  char *v67;
  CFTypeRef v68;
  void *__p;
  __int128 v70;
  CFTypeRef cf;
  xpc_object_t object;
  CFTypeRef v73;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  object = v1;
  v73 = 0;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  v3 = abm::AccessoryInfo::create();
  v5 = v4;
  xpc_release(object);
  object = 0;
  v6 = (unsigned __int16)v3;
  v7 = *(_QWORD *)(v2 + 96);
  if ((v3 & 0xFFFF0000) != 0x10000)
  {
    if (v7)
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v11 = (unsigned __int16)v3;
        if (v7 <= (unsigned __int16)v3)
          v11 = (unsigned __int16)v3 % v7;
      }
      else
      {
        v11 = ((_DWORD)v7 - 1) & (unsigned __int16)v3;
      }
      v19 = *(void ***)(*(_QWORD *)(v2 + 88) + 8 * v11);
      if (v19)
      {
        v20 = (unsigned __int16 *)*v19;
        if (*v19)
        {
          if (v10.u32[0] < 2uLL)
          {
            while (1)
            {
              v22 = *((_QWORD *)v20 + 1);
              if (v22 == (unsigned __int16)v3)
              {
                if (v20[8] == (unsigned __int16)v3)
                  goto LABEL_121;
              }
              else if ((v22 & (v7 - 1)) != v11)
              {
                goto LABEL_48;
              }
              v20 = *(unsigned __int16 **)v20;
              if (!v20)
                goto LABEL_48;
            }
          }
          do
          {
            v21 = *((_QWORD *)v20 + 1);
            if (v21 == (unsigned __int16)v3)
            {
              if (v20[8] == (unsigned __int16)v3)
                goto LABEL_121;
            }
            else
            {
              if (v21 >= v7)
                v21 %= v7;
              if (v21 != v11)
                break;
            }
            v20 = *(unsigned __int16 **)v20;
          }
          while (v20);
        }
      }
    }
    else
    {
      v11 = 0xAAAAAAAAAAAAAAAALL;
    }
LABEL_48:
    v20 = (unsigned __int16 *)operator new(0x20uLL);
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = (unsigned __int16)v3;
    v20[8] = v3;
    v20[9] = -1;
    *(_QWORD *)(v20 + 10) = 0;
    v20[14] = 0;
    v23 = (float)(unint64_t)(*(_QWORD *)(v2 + 112) + 1);
    v24 = *(float *)(v2 + 120);
    if (v7 && (float)(v24 * (float)v7) >= v23)
    {
      v25 = *(_QWORD *)(v2 + 88);
      v26 = *(_QWORD **)(v25 + 8 * v11);
      if (v26)
      {
LABEL_51:
        *(_QWORD *)v20 = *v26;
        goto LABEL_119;
      }
LABEL_113:
      *(_QWORD *)v20 = *(_QWORD *)(v2 + 104);
      *(_QWORD *)(v2 + 104) = v20;
      *(_QWORD *)(v25 + 8 * v11) = v2 + 104;
      if (!*(_QWORD *)v20)
      {
LABEL_120:
        ++*(_QWORD *)(v2 + 112);
LABEL_121:
        v18 = 0;
        *(_QWORD *)(v20 + 9) = v3;
        *(_DWORD *)(v20 + 13) = v5;
        goto LABEL_122;
      }
      v52 = *(_QWORD *)(*(_QWORD *)v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v52 >= v7)
          v52 %= v7;
      }
      else
      {
        v52 &= v7 - 1;
      }
      v26 = (_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v52);
LABEL_119:
      *v26 = v20;
      goto LABEL_120;
    }
    v27 = 1;
    if (v7 >= 3)
      v27 = (v7 & (v7 - 1)) != 0;
    v28 = v27 | (2 * v7);
    v29 = vcvtps_u32_f32(v23 / v24);
    if (v28 <= v29)
      prime = v29;
    else
      prime = v28;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(v2 + 96);
    }
    if (prime > v7)
    {
LABEL_62:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v31 = operator new(8 * prime);
      v32 = *(void **)(v2 + 88);
      *(_QWORD *)(v2 + 88) = v31;
      if (v32)
        operator delete(v32);
      v33 = 0;
      *(_QWORD *)(v2 + 96) = prime;
      do
        *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v33++) = 0;
      while (prime != v33);
      v35 = v2 + 104;
      v34 = *(_QWORD **)(v2 + 104);
      if (!v34)
        goto LABEL_94;
      v36 = v34[1];
      v37 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v38 = v36 & v37;
        *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v38) = v35;
        for (i = (_QWORD *)*v34; *v34; i = (_QWORD *)*v34)
        {
          v40 = i[1] & v37;
          if (v40 == v38)
          {
            v34 = i;
          }
          else
          {
            v41 = *(_QWORD *)(v2 + 88);
            if (*(_QWORD *)(v41 + 8 * v40))
            {
              *v34 = *i;
              v42 = 8 * v40;
              *i = **(_QWORD **)(*(_QWORD *)(v2 + 88) + v42);
              **(_QWORD **)(*(_QWORD *)(v2 + 88) + v42) = i;
            }
            else
            {
              *(_QWORD *)(v41 + 8 * v40) = v34;
              v34 = i;
              v38 = v40;
            }
          }
        }
        goto LABEL_94;
      }
      if (v36 >= prime)
        v36 %= prime;
      *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v36) = v35;
      v46 = (_QWORD *)*v34;
      if (!*v34)
      {
LABEL_94:
        v7 = prime;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_95;
        goto LABEL_112;
      }
      while (1)
      {
        v48 = v46[1];
        if (v48 >= prime)
          v48 %= prime;
        if (v48 == v36)
          goto LABEL_88;
        v49 = *(_QWORD *)(v2 + 88);
        if (*(_QWORD *)(v49 + 8 * v48))
        {
          *v34 = *v46;
          v47 = 8 * v48;
          *v46 = **(_QWORD **)(*(_QWORD *)(v2 + 88) + v47);
          **(_QWORD **)(*(_QWORD *)(v2 + 88) + v47) = v46;
          v46 = v34;
LABEL_88:
          v34 = v46;
          v46 = (_QWORD *)*v46;
          if (!v46)
            goto LABEL_94;
        }
        else
        {
          *(_QWORD *)(v49 + 8 * v48) = v34;
          v34 = v46;
          v46 = (_QWORD *)*v46;
          v36 = v48;
          if (!v46)
            goto LABEL_94;
        }
      }
    }
    if (prime < v7)
    {
      v43 = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 112) / *(float *)(v2 + 120));
      if (v7 < 3 || (v44 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v44.i16[0] = vaddlv_u8(v44), v44.u32[0] > 1uLL))
      {
        v43 = std::__next_prime(v43);
      }
      else
      {
        v45 = 1 << -(char)__clz(v43 - 1);
        if (v43 >= 2)
          v43 = v45;
      }
      if (prime <= v43)
        prime = v43;
      if (prime < v7)
      {
        if (!prime)
        {
          v51 = *(void **)(v2 + 88);
          *(_QWORD *)(v2 + 88) = 0;
          if (v51)
            operator delete(v51);
          v7 = 0;
          *(_QWORD *)(v2 + 96) = 0;
          goto LABEL_112;
        }
        goto LABEL_62;
      }
      v7 = *(_QWORD *)(v2 + 96);
    }
    if ((v7 & (v7 - 1)) != 0)
    {
LABEL_95:
      if (v7 <= (unsigned __int16)v3)
      {
        v11 = (unsigned __int16)v3 % v7;
        v25 = *(_QWORD *)(v2 + 88);
        v26 = *(_QWORD **)(v25 + 8 * v11);
        if (v26)
          goto LABEL_51;
      }
      else
      {
        v11 = (unsigned __int16)v3;
        v25 = *(_QWORD *)(v2 + 88);
        v26 = *(_QWORD **)(v25 + 8 * (unsigned __int16)v3);
        if (v26)
          goto LABEL_51;
      }
      goto LABEL_113;
    }
LABEL_112:
    v11 = ((_DWORD)v7 - 1) & (unsigned __int16)v3;
    v25 = *(_QWORD *)(v2 + 88);
    v26 = *(_QWORD **)(v25 + 8 * v11);
    if (v26)
      goto LABEL_51;
    goto LABEL_113;
  }
  if (!v7)
    goto LABEL_29;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = (unsigned __int16)v3;
    if (v7 <= (unsigned __int16)v3)
      v9 = (unsigned __int16)v3 % v7;
  }
  else
  {
    v9 = ((_DWORD)v7 - 1) & (unsigned __int16)v3;
  }
  v12 = *(_QWORD *)(v2 + 88);
  v13 = *(uint64_t ****)(v12 + 8 * v9);
  if (!v13 || (v14 = *v13) == 0)
  {
LABEL_29:
    __p = operator new(0x48uLL);
    v70 = xmmword_1BF743940;
    strcpy((char *)__p, "Invalid AccessoryID, could not find in cached accessory dictionary");
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v2 + 48))(&cf, v2, &__p, 5);
    v18 = cf;
    v73 = cf;
    cf = 0;
    if (SHIBYTE(v70) < 0)
      operator delete(__p);
    goto LABEL_122;
  }
  v15 = v7 - 1;
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v16 = v14[1];
      if (v16 == (uint64_t *)(unsigned __int16)v3)
      {
        if (*((unsigned __int16 *)v14 + 8) == (unsigned __int16)v3)
          goto LABEL_100;
      }
      else if (((unint64_t)v16 & v15) != v9)
      {
        goto LABEL_29;
      }
      v14 = (uint64_t **)*v14;
      if (!v14)
        goto LABEL_29;
    }
  }
  while (1)
  {
    v17 = (unint64_t)v14[1];
    if (v17 == (unsigned __int16)v3)
      break;
    if (v17 >= v7)
      v17 %= v7;
    if (v17 != v9)
      goto LABEL_29;
LABEL_24:
    v14 = (uint64_t **)*v14;
    if (!v14)
      goto LABEL_29;
  }
  if (*((unsigned __int16 *)v14 + 8) != (unsigned __int16)v3)
    goto LABEL_24;
LABEL_100:
  if (v8.u32[0] > 1uLL)
  {
    v50 = (unsigned __int16)v3;
    if (v7 <= (unsigned __int16)v3)
      v50 = (unsigned __int16)v3 % v7;
  }
  else
  {
    v50 = ((_DWORD)v7 - 1) & (unsigned __int16)v3;
  }
  v55 = *(void ***)(v12 + 8 * v50);
  if (!v55 || (v56 = *v55) == 0)
  {
LABEL_151:
    v18 = 0;
    goto LABEL_122;
  }
  if (v8.u32[0] < 2uLL)
  {
    while (1)
    {
      v57 = v56[1];
      if (v57 == (unsigned __int16)v3)
      {
        if (*((unsigned __int16 *)v56 + 8) == (unsigned __int16)v3)
          goto LABEL_152;
      }
      else if ((v57 & v15) != v50)
      {
        goto LABEL_151;
      }
      v18 = 0;
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_122;
    }
  }
  while (2)
  {
    v58 = v56[1];
    if (v58 != (unsigned __int16)v3)
    {
      if (v58 >= v7)
        v58 %= v7;
      if (v58 != v50)
        goto LABEL_151;
      goto LABEL_146;
    }
    if (*((unsigned __int16 *)v56 + 8) != (unsigned __int16)v3)
    {
LABEL_146:
      v18 = 0;
      v56 = (_QWORD *)*v56;
      if (!v56)
        goto LABEL_122;
      continue;
    }
    break;
  }
LABEL_152:
  if (v8.u32[0] > 1uLL)
  {
    if (v7 <= (unsigned __int16)v3)
      v6 = (unsigned __int16)v3 % v7;
  }
  else
  {
    v6 = v15 & (unsigned __int16)v3;
  }
  v59 = *(_QWORD **)(v12 + 8 * v6);
  do
  {
    v60 = v59;
    v59 = (_QWORD *)*v59;
  }
  while (v59 != v56);
  if (v60 == (_QWORD *)(v2 + 104))
    goto LABEL_169;
  v61 = v60[1];
  if (v8.u32[0] > 1uLL)
  {
    if (v61 >= v7)
      v61 %= v7;
  }
  else
  {
    v61 &= v15;
  }
  if (v61 != v6)
  {
LABEL_169:
    if (!*v56)
      goto LABEL_170;
    v62 = *(_QWORD *)(*v56 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v62 >= v7)
        v62 %= v7;
    }
    else
    {
      v62 &= v15;
    }
    if (v62 != v6)
LABEL_170:
      *(_QWORD *)(v12 + 8 * v6) = 0;
  }
  v63 = *v56;
  if (*v56)
  {
    v64 = *(_QWORD *)(v63 + 8);
    if (v8.u32[0] > 1uLL)
    {
      if (v64 >= v7)
        v64 %= v7;
    }
    else
    {
      v64 &= v15;
    }
    if (v64 != v6)
    {
      *(_QWORD *)(*(_QWORD *)(v2 + 88) + 8 * v64) = v60;
      v63 = *v56;
    }
  }
  *v60 = v63;
  *v56 = 0;
  --*(_QWORD *)(v2 + 112);
  operator delete(v56);
  v18 = 0;
LABEL_122:
  if (*(_BYTE *)(v2 + 80) && *(_QWORD *)(v2 + 72))
  {
    v68 = v18;
    if (v18)
      CFRetain(v18);
    v53 = operator new(0xCuLL);
    v66 = v53 + 3;
    v67 = (char *)(v53 + 3);
    *(_QWORD *)v53 = v3;
    v53[2] = v5;
    v65 = v53;
    v54 = *(_QWORD *)(v2 + 72);
    if (!v54)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v54 + 48))(v54, &v68, &v65);
    if (v65)
    {
      v66 = v65;
      operator delete(v65);
    }
    if (v68)
      CFRelease(v68);
  }
  if (v18)
    CFRelease(v18);
}

void sub_1BF6CB6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, const void *a18)
{
  void *v18;

  operator delete(v18);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a18);
  _Unwind_Resume(a1);
}

void sub_1BF6CB6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  const void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF6CB6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t object,const void *a21)
{
  if (a18 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a21);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN26AccessorySimulatorDelegate19handleServerCommandENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictE_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  int v10;
  void *__p;
  void *v12;
  char *v13;
  CFTypeRef cf;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 80))
  {
    v2 = *(uint64_t **)(v1 + 104);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 72);
      if (v3)
      {
        *((_WORD *)v2 + 10) = 1;
LABEL_5:
        v9 = *(uint64_t *)((char *)v2 + 18);
        v10 = *(_DWORD *)((char *)v2 + 26);
        __p = 0;
        v12 = 0;
        v13 = 0;
        cf = 0;
        v4 = operator new(0xCuLL);
        v12 = v4 + 3;
        v13 = (char *)(v4 + 3);
        *(_QWORD *)v4 = v9;
        v4[2] = v10;
        __p = v4;
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v3 + 48))(v3, &cf, &__p);
        if (__p)
        {
          v12 = __p;
          operator delete(__p);
        }
        if (cf)
          CFRelease(cf);
        while (1)
        {
          v2 = (uint64_t *)*v2;
          if (!v2)
            break;
          v3 = *(_QWORD *)(v1 + 72);
          *((_WORD *)v2 + 10) = 1;
          if (v3)
            goto LABEL_5;
        }
      }
      else
      {
        do
        {
          *((_WORD *)v2 + 10) = 1;
          v2 = (uint64_t *)*v2;
        }
        while (v2);
      }
    }
  }
  if (*(_QWORD *)(v1 + 112))
  {
    v5 = *(_QWORD **)(v1 + 104);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    *(_QWORD *)(v1 + 104) = 0;
    v7 = *(_QWORD *)(v1 + 96);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*(_QWORD *)(v1 + 88) + 8 * i) = 0;
    }
    *(_QWORD *)(v1 + 112) = 0;
  }
}

void sub_1BF6CB948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  if (__p)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::start(AccessorySimulatorDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN26AccessorySimulatorDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_8;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN26AccessorySimulatorDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  void *__p;
  void *v11;
  char *v12;
  CFTypeRef cf;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", (uint8_t *)&v8, 2u);
    }
  }
  else
  {
    if (v4)
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", (uint8_t *)&v8, 2u);
    }
    *(_BYTE *)(v1 + 80) = 1;
    v5 = *(uint64_t **)(v1 + 104);
    if (v5)
    {
      v6 = *(_QWORD *)(v1 + 72);
      if (v6)
      {
LABEL_8:
        v8 = *(uint64_t *)((char *)v5 + 18);
        v9 = *(_DWORD *)((char *)v5 + 26);
        __p = 0;
        v11 = 0;
        v12 = 0;
        cf = 0;
        v7 = operator new(0xCuLL);
        v11 = v7 + 3;
        v12 = (char *)(v7 + 3);
        *(_QWORD *)v7 = v8;
        v7[2] = v9;
        __p = v7;
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v6 + 48))(v6, &cf, &__p);
        if (__p)
        {
          v11 = __p;
          operator delete(__p);
        }
        if (cf)
          CFRelease(cf);
        while (1)
        {
          v5 = (uint64_t *)*v5;
          if (!v5)
            break;
          v6 = *(_QWORD *)(v1 + 72);
          if (v6)
            goto LABEL_8;
        }
      }
      else
      {
        do
          v5 = (uint64_t *)*v5;
        while (v5);
      }
    }
  }
}

void sub_1BF6CBB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, const void *a14)
{
  if (__p)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

void AccessorySimulatorDelegate::stop(AccessorySimulatorDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN26AccessorySimulatorDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_7;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN26AccessorySimulatorDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 0;
  }
  else if (v4)
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v5, 2u);
  }
}

void std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate*)#1}::operator() const(AccessorySimulatorDelegate*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AccessorySimulatorDelegate *,std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate *)#1},std::allocator<AccessorySimulatorDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelega"
                     "teEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimu"
                                "latorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI26AccessorySimulatorDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AccessorySimulatorDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<AccessorySimulatorDelegate>(AccessorySimulatorDelegate*)::{lambda(AccessorySimulatorDelegate*)#1}::operator() const(AccessorySimulatorDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *GetOsLogContext(void)
{
  unsigned __int8 v0;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  return &GetOsLogContext(void)::sOsLogContext;
}

void ___Z15GetOsLogContextv_block_invoke()
{
  _BYTE v0[16];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v0, "com.apple.telephony.abm", "global");
  ctu::OsLogContext::operator=();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v0);
}

void *GetGlobalLogger(uint64_t *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];
  std::__shared_weak_count *v11;

  if ((v2 & 1) == 0
  {
    MEMORY[0x1C3B8B7A0](&GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger);
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3788], &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger, &dword_1BF566000);
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v10[3] = &__block_descriptor_tmp_3_3;
  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v10[4] = v3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::onceToken != -1)
  {
    dispatch_once(&GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::onceToken, v10);
    v4 = v11;
    if (v11)
      goto LABEL_7;
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
  }
  if (!v4)
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
LABEL_7:
  v7 = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return &GetGlobalLogger(std::shared_ptr<ctu::LogServer>)::sLogger;
}

void sub_1BF6CBF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___Z15GetGlobalLoggerNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE v10[16];
  _BYTE v11[48];
  uint64_t v12;
  uint64_t v13;

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const ctu::OsLogContext *)&GetOsLogContext(void)::sOsLogContext);
  MEMORY[0x1C3B8B794](v11, v10, a1 + 32);
  ctu::LoggerCommonBase::operator=();
  v4 = v12;
  v3 = v13;
  if (v13)
  {
    v5 = (unint64_t *)(v13 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)qword_1ED70F6E0;
  qword_1ED70F6D8 = v4;
  qword_1ED70F6E0 = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
}

void sub_1BF6CC0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrIN3ctu9LogServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void PPMManager::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x28uLL);
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1E791EA80;
  v6 = v4 + 3;
  v7 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  v13[0] = v7;
  v13[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  PPMManager::PPMManager(v4 + 3, v13);
  if (!v8)
    goto LABEL_8;
  v11 = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    *a2 = v6;
    a2[1] = v5;
  }
  else
  {
LABEL_8:
    *a2 = v6;
    a2[1] = v5;
  }
}

void sub_1BF6CC20C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

const char *PPMManager::getName(PPMManager *this)
{
  return "ppm.mgr";
}

_QWORD *PPMManager::PPMManager(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  NSError *v16;
  void *v17;
  NSObject *v18;
  std::string *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string __p;
  id v29;
  uint8_t buf[4];
  std::string *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = operator new(0x68uLL);
  v8 = v7;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_1E791E980;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v7[3] = off_1E791EA40;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 8;
  strcpy((char *)&__p, "ppm.hdlr");
  ctu::LoggerCommonBase::LoggerCommonBase();
  v8[4] = &unk_1E7911E48;
  v8[10] = v4;
  v8[11] = v3;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8[3] = off_1E791E9D0;
  v8[12] = 0;
  if (v3)
  {
    v13 = (unint64_t *)&v3->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v29 = 0;
  objc_msgSend(MEMORY[0x1E0DE2D00], "sharedInstanceWithClientRepresentation:error:", CFSTR("com.apple.duet.ppm-attr.bsbd"), &v29, v26);
  v15 = objc_claimAutoreleasedReturnValue();
  v16 = (NSError *)v29;
  v17 = (void *)v8[12];
  v8[12] = v15;

  if (v16 || !v8[12])
  {
    v18 = v8[8];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v16);
      v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v31 = v19;
      _os_log_error_impl(&dword_1BF566000, v18, OS_LOG_TYPE_ERROR, "Failed to get PPM instance: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

  v20 = (std::__shared_weak_count *)a1[1];
  *a1 = v8 + 3;
  a1[1] = v8;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v27)
  {
    v23 = (unint64_t *)&v27->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return a1;
}

void sub_1BF6CC568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void *v12;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1BF6CC598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;

  if (a18 < 0)
    operator delete(__p);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void sub_1BF6CC604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void PPMManager::start(PPMHandler **this)
{
  PPMHandler::start(*this);
}

void PPMHandler::start(PPMHandler *this)
{
  void *v2;
  char v3;
  NSError *v4;
  char v5;
  NSObject *v6;
  std::string *p_p;
  std::string __p;
  id v9;
  uint8_t buf[4];
  std::string *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 9);
  v9 = 0;
  v3 = objc_msgSend(v2, "activityStartedWithLevel:options:error:", &unk_1E7924530, 0, &v9);
  v4 = (NSError *)v9;
  if (v4)
    v5 = 0;
  else
    v5 = v3;
  if ((v5 & 1) == 0)
  {
    v6 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v11 = p_p;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Failed to set PPM activity started level: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

}

void sub_1BF6CC740(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void PPMManager::reportTelemetry(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  xpc_object_t object;

  v2 = *a1;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  PPMHandler::reportTelemetry(v2, &object);
  xpc_release(object);
}

void sub_1BF6CC7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void PPMHandler::reportTelemetry(uint64_t a1, _QWORD *a2)
{
  void *v4;
  const object *v5;
  const void *v6;
  CFTypeID v7;
  const void *v8;
  void *v9;
  NSError *v10;
  NSObject *v11;
  std::string *v12;
  std::string cf;
  id v14;
  std::string::size_type v15;
  _BYTE object[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
    return;
  v4 = (void *)*a2;
  v15 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)object = v4;
  if (v4)
    xpc_retain(v4);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::bridge((xpc *)object, v5);
  v6 = (const void *)cf.__r_.__value_.__r.__words[0];
  if (cf.__r_.__value_.__r.__words[0])
  {
    v7 = CFGetTypeID(cf.__r_.__value_.__l.__data_);
    if (v7 == CFDictionaryGetTypeID())
    {
      v15 = cf.__r_.__value_.__r.__words[0];
      CFRetain(cf.__r_.__value_.__l.__data_);
      v8 = (const void *)cf.__r_.__value_.__r.__words[0];
LABEL_9:
      CFRelease(v8);
      goto LABEL_10;
    }
  }
  v6 = 0;
  v15 = 0;
  v8 = (const void *)cf.__r_.__value_.__r.__words[0];
  if (cf.__r_.__value_.__r.__words[0])
    goto LABEL_9;
LABEL_10:
  xpc_release(*(xpc_object_t *)object);
  v9 = *(void **)(a1 + 72);
  v14 = 0;
  objc_msgSend(v9, "pushTelemetryToPPM:error:", v6, &v14);
  v10 = (NSError *)v14;
  if (v10)
  {
    v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&cf, v10);
      v12 = (cf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &cf
          : (std::string *)cf.__r_.__value_.__r.__words[0];
      *(_DWORD *)object = 136315138;
      *(_QWORD *)&object[4] = v12;
      _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Failed to report telemetry to PPM: %s", object, 0xCu);
      if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(cf.__r_.__value_.__l.__data_);
    }
  }
  if (v6)
    CFRelease(v6);

}

void sub_1BF6CC970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void PPMManager::shutdown(PPMHandler **this)
{
  PPMHandler::shutdown(*this);
}

void PPMHandler::shutdown(PPMHandler *this)
{
  void *v2;
  char v3;
  NSError *v4;
  char v5;
  NSObject *v6;
  void *v7;
  NSError *v8;
  char v9;
  NSObject *v10;
  std::string *v11;
  std::string *p_p;
  NSError *v13;
  std::string __p;
  id v15;
  uint8_t buf[4];
  std::string *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (void *)*((_QWORD *)this + 9);
  v15 = 0;
  v3 = objc_msgSend(v2, "activityStoppedWithLevel:options:error:", 0, 0, &v15);
  v4 = (NSError *)v15;
  if (v4)
    v5 = 0;
  else
    v5 = v3;
  if ((v5 & 1) == 0)
  {
    v6 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v4);
      v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v17 = v11;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Failed to set PPM activity stopped level: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v7 = (void *)*((_QWORD *)this + 9);
  v13 = v4;
  objc_msgSend(v7, "endInteraction:", &v13);
  v8 = v13;

  if (v8)
    v9 = 0;
  else
    v9 = v3;
  if ((v9 & 1) == 0)
  {
    v10 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      PPMHandler::getErrorMsg(&__p, v8);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v17 = p_p;
      _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Failed to end interaction: %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

}

void sub_1BF6CCBA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PPMHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791E980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PPMHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791E980;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<PPMHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void PPMHandler::~PPMHandler(id *this)
{

  *this = off_1E791EA40;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{

  *this = off_1E791EA40;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "ppm.hdlr");
}

uint64_t ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791EA40;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<PPMHandler,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791EA40;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void PPMHandler::getErrorMsg(std::string *this, NSError *a2)
{
  NSError *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  NSError *v10;

  v3 = a2;
  this->__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  this->__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = 13;
  strcpy((char *)this, "Unknown error");
  if (v3)
  {
    v10 = v3;
    -[NSError localizedDescription](v3, "localizedDescription");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSError localizedFailureReason](v10, "localizedFailureReason");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      -[NSError localizedFailureReason](v10, "localizedFailureReason");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Not found localizedFailureReason"), &stru_1E7923080, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@: %@"), v4, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = objc_retainAutorelease(v8);
    std::string::__assign_external(this, (const std::string::value_type *)objc_msgSend(v9, "UTF8String"));

    v3 = v10;
  }

}

void sub_1BF6CCE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  v16 = v15;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PPMManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791EA80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PPMManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791EA80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<PPMManager>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t abm::ParseWakeDataIce(xpc_object_t *a1, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  xpc_object_t v7;
  xpc_object_t v8;
  const char *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  void *v40;
  xpc_object_t v41;
  xpc_object_t object[2];
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;

  v4 = MEMORY[0x1C3B8CD78](*a1);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8] || MEMORY[0x1C3B8CD78](*a2) != v5)
    return 0;
  v7 = xpc_string_create((const char *)*MEMORY[0x1E0CFB258]);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB2B8], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = (const char *)*MEMORY[0x1E0CFB7A8];
  value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB7A8]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v12 = xpc_int64_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, v9, v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = (const char *)*MEMORY[0x1E0CFB408];
  v15 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB408]);
  if (v15)
  {
    v16 = v15;
    xpc_retain(v15);
  }
  else
  {
    v16 = xpc_null_create();
  }
  v17 = MEMORY[0x1C3B8CD78](v16);
  v18 = MEMORY[0x1E0C81350];
  if (v17 != MEMORY[0x1E0C81350])
  {
    if (v16)
    {
      xpc_retain(v16);
      v19 = v16;
    }
    else
    {
      v19 = xpc_null_create();
    }
    xpc_dictionary_set_value(*a2, v14, v19);
    v20 = xpc_null_create();
    xpc_release(v19);
    xpc_release(v20);
  }
  switch(v11)
  {
    case 1:
      v21 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5A8]);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      v23 = xpc_string_create((const char *)*MEMORY[0x1E0CFBA68]);
      if (!v23)
        v23 = xpc_null_create();
      goto LABEL_58;
    case 2:
      v32 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5A8]);
      if (!v32)
        v32 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      v23 = xpc_string_create((const char *)*MEMORY[0x1E0CFB830]);
      if (!v23)
        v23 = xpc_null_create();
      goto LABEL_58;
    case 3:
      v24 = xpc_string_create((const char *)*MEMORY[0x1E0CFB838]);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      v26 = xpc_string_create((const char *)*MEMORY[0x1E0CFB6D8]);
      if (!v26)
        v26 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB7B0], v26);
      v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      if (MEMORY[0x1C3B8CD78](v16) != v18)
      {
        v45 = v16;
        v46 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        if (v16)
          xpc_retain(v16);
        else
          v45 = xpc_null_create();
        abm::_ParseIceARI(&v46);
        xpc_release(v45);
        v45 = 0;
        xpc::dict::dict(&v43, &v46);
        v40 = (void *)*MEMORY[0x1E0CFBB10];
        object[0] = a2;
        object[1] = v40;
        xpc::dict::object_proxy::operator=((uint64_t)object, &v43, &v44);
        xpc_release(v44);
        v44 = 0;
        xpc_release(v43);
        v43 = 0;
        xpc_release(v46);
      }
      goto LABEL_63;
    case 4:
      v34 = *a1;
      v41 = v34;
      if (v34)
        xpc_retain(v34);
      else
        v41 = xpc_null_create();
      abm::ParseWakeDataIP(&v41, a2);
      xpc_release(v41);
      v41 = 0;
      goto LABEL_63;
    case 5:
      v28 = xpc_string_create((const char *)*MEMORY[0x1E0CFB4C0]);
      if (!v28)
        v28 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v28);
      v29 = xpc_null_create();
      xpc_release(v28);
      xpc_release(v29);
      v23 = xpc_string_create((const char *)*MEMORY[0x1E0CFB7F8]);
      if (!v23)
        v23 = xpc_null_create();
      goto LABEL_58;
    case 6:
      v35 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5B0]);
      if (!v35)
        v35 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v35);
      v36 = xpc_null_create();
      xpc_release(v35);
      xpc_release(v36);
      v23 = xpc_string_create((const char *)*MEMORY[0x1E0CFB6F0]);
      if (!v23)
        v23 = xpc_null_create();
      goto LABEL_58;
    case 7:
      v37 = xpc_string_create((const char *)*MEMORY[0x1E0CFB5A8]);
      if (!v37)
        v37 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v37);
      v38 = xpc_null_create();
      xpc_release(v37);
      xpc_release(v38);
      v23 = xpc_string_create((const char *)*MEMORY[0x1E0CFB6E0]);
      if (!v23)
        v23 = xpc_null_create();
      goto LABEL_58;
    default:
      v30 = xpc_string_create((const char *)*MEMORY[0x1E0CFB840]);
      if (!v30)
        v30 = xpc_null_create();
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB410], v30);
      v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      v23 = xpc_string_create((const char *)*MEMORY[0x1E0CFBD38]);
      if (!v23)
        v23 = xpc_null_create();
LABEL_58:
      xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB7B0], v23);
      v39 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v39);
LABEL_63:
      xpc_release(v16);
      result = 1;
      break;
  }
  return result;
}

void sub_1BF6CD6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  void *v15;

  xpc_release(object);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void abm::_ParseIceARI(xpc_object_t *a1)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  _DWORD value[3];
  unint64_t v8;
  unint64_t v9;
  void *__p;
  uint64_t v11;
  uint64_t v12;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v8 = 0xAAAAAAAAAAAAAAAALL;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&value[1] = 0xAAAAAAAAAAAAAAAALL;
  __p = 0;
  v11 = 0;
  v12 = 0;
  xpc::dyn_cast_or_default();
  v5 = xpc_BOOL_create(1);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, (const char *)*MEMORY[0x1E0CFBF78], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v8 = *(_QWORD *)&value[1];
  operator delete(*(void **)&value[1]);
}

void sub_1BF6CDD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  xpc_object_t *v19;

  if (a19 < 0)
    operator delete(__p);
  if (a11)
    operator delete(a11);
  xpc::dict::~dict(v19);
  _Unwind_Resume(a1);
}

void CMHandDetectionDelegate::create(NSObject **a1@<X0>, NSObject **a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v6;
  void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char isCMHandDetectionSupported;
  char v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  NSObject *v21;
  NSObject *v22;
  dispatch_object_t v23[2];
  NSObject *v24;

  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v6 = unk_1ED70F1F8;
  if (!unk_1ED70F1F8)
  {
    v7 = operator new(1uLL);
    v8 = operator new(0x20uLL);
    *v8 = off_1E7922580;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = v7;
    v9 = (std::__shared_weak_count *)off_1ED70F200;
    unk_1ED70F1F8 = v7;
    off_1ED70F200 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v6 = unk_1ED70F1F8;
  }
  v12 = (std::__shared_weak_count *)off_1ED70F200;
  v23[0] = v6;
  v23[1] = (dispatch_object_t)off_1ED70F200;
  if (off_1ED70F200)
  {
    v13 = (unint64_t *)((char *)off_1ED70F200 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  isCMHandDetectionSupported = Capabilities::isCMHandDetectionSupported((Capabilities *)v6);
  v16 = isCMHandDetectionSupported;
  if (v12)
  {
    v17 = (unint64_t *)&v12->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if ((v16 & 1) != 0)
        goto LABEL_16;
LABEL_26:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
  }
  if ((isCMHandDetectionSupported & 1) == 0)
    goto LABEL_26;
LABEL_16:
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v19 = operator new(0x28uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = off_1E791EB50;
  v20 = v19 + 3;
  v21 = *a1;
  v23[0] = v21;
  if (v21)
    dispatch_retain(v21);
  v22 = *a2;
  v24 = v22;
  if (v22)
    dispatch_retain(v22);
  CMHandDetectionDelegate::CMHandDetectionDelegate(v20, v23, &v24);
  if (v22)
    dispatch_release(v22);
  if (v21)
    dispatch_release(v21);
  *a3 = v20;
  a3[1] = v19;
}

void sub_1BF6CE034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF6CE060(_Unwind_Exception *a1)
{
  NSObject *v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  void *v5;
  void *v6;

  if (v1)
  {
    dispatch_release(v1);
    if (!v2)
    {
LABEL_3:
      std::__shared_weak_count::~__shared_weak_count(v3);
      operator delete(v5);
      _Unwind_Resume(a1);
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  dispatch_release(v2);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_1BF6CE0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *CMHandDetectionDelegate::CMHandDetectionDelegate(_QWORD *a1, dispatch_object_t *a2, NSObject **a3)
{
  NSObject *v5;
  NSObject *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v5 = *a2;
  if (*a2)
    dispatch_retain(*a2);
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  *a1 = 0;
  a1[1] = 0;
  if (objc_msgSend(MEMORY[0x1E0CA5600], "isCallHandednessAvailable"))
  {
    v7 = operator new(0x40uLL);
    if (v5)
      dispatch_retain(v5);
    if (v6)
      dispatch_retain(v6);
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v5;
    if (v5)
      dispatch_retain(v5);
    *((_QWORD *)v7 + 3) = v6;
    if (v6)
      dispatch_retain(v6);
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_BYTE *)v7 + 56) = 0;
    *((_QWORD *)v7 + 4) = objc_alloc_init(MEMORY[0x1E0CA5600]);
    v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_1E791EAD0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v10 = (std::__shared_weak_count *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      if (v10->__shared_owners_ != -1)
      {
LABEL_27:
        *a1 = v7;
        a1[1] = v8;
        if (v6)
          dispatch_release(v6);
        if (v5)
          dispatch_release(v5);
        goto LABEL_31;
      }
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
      *(_QWORD *)v7 = v7;
      *((_QWORD *)v7 + 1) = v8;
      std::__shared_weak_count::__release_weak(v10);
    }
    else
    {
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      v15 = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      *(_QWORD *)v7 = v7;
      *((_QWORD *)v7 + 1) = v8;
    }
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_27;
  }
LABEL_31:
  if (v6)
    dispatch_release(v6);
  if (v5)
    dispatch_release(v5);
  return a1;
}

void sub_1BF6CE278(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF6CE298(_Unwind_Exception *a1)
{
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;

  __cxa_end_catch();
  if (v3)
  {
    dispatch_release(v3);
    if (!v1)
      goto LABEL_3;
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  dispatch_release(v1);
LABEL_3:
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v3)
  {
    dispatch_release(v3);
    if (!v1)
LABEL_5:
      _Unwind_Resume(a1);
  }
  else if (!v1)
  {
    goto LABEL_5;
  }
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void CMHandDetectionDelegate::~CMHandDetectionDelegate(CMHandDetectionDelegate *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t CMHandDetectionDelegate::isSupported(CMHandDetectionDelegate *this)
{
  unsigned __int8 v1;
  Capabilities *v3;
  unint64_t *v4;
  unint64_t v5;
  char v6;
  Capabilities *v7;
  void *v8;
  __int128 v9;

  v1 = atomic_load((unsigned __int8 *)&qword_1ED70F810);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_1ED70F810))
    return _MergedGlobals_6;
  pthread_mutex_lock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  v3 = (Capabilities *)unk_1ED70F1F8;
  if (!unk_1ED70F1F8)
  {
    Capabilities::create_default_global(&v9);
    std::shared_ptr<Capabilities>::operator=[abi:ne180100](&v9);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v9);
    v3 = (Capabilities *)unk_1ED70F1F8;
  }
  v7 = v3;
  v8 = off_1ED70F200;
  if (off_1ED70F200)
  {
    v4 = (unint64_t *)((char *)off_1ED70F200 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  if (Capabilities::isCMHandDetectionSupported(v3))
    v6 = objc_msgSend(MEMORY[0x1E0CA5600], "isCallHandednessAvailable", v7, v8);
  else
    v6 = 0;
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&v7);
  _MergedGlobals_6 = v6;
  __cxa_guard_release(&qword_1ED70F810);
  return _MergedGlobals_6;
}

void sub_1BF6CE520(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance);
  __cxa_guard_abort(&qword_1ED70F810);
  _Unwind_Resume(a1);
}

void CMHandDetectionDelegate::start(uint64_t **this)
{
  uint64_t v1;

  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(*this, &v1);
}

void CMHandDetectionDelegate::stop(uint64_t **this)
{
  uint64_t v1;

  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(*this, &v1);
}

void CMHandDetectionDelegate::registerCallback(uint64_t **a1, const void **a2)
{
  uint64_t *v2;
  void *v3;
  const void *v4;
  char v5;
  void *v6;
  uint64_t *v7;
  void *aBlock;

  v2 = *a1;
  if (!*a2)
  {
    v4 = 0;
    v7 = *a1;
LABEL_6:
    v5 = 1;
    aBlock = 0;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(v2, (uint64_t)&v7);
    v6 = aBlock;
    if (!aBlock)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = _Block_copy(*a2);
  v4 = v3;
  v7 = v2;
  if (!v3)
    goto LABEL_6;
  v5 = 0;
  aBlock = _Block_copy(v3);
  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(v2, (uint64_t)&v7);
  v6 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v6);
LABEL_8:
  if ((v5 & 1) == 0)
    _Block_release(v4);
}

void CMHandDetectionDelegate::shutdown(uint64_t **this)
{
  uint64_t v1;

  ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(*this, &v1);
}

const char *CMHandDetectionDelegate::toString(unsigned int a1)
{
  if (a1 > 2)
    return "Unknown Hand Detection";
  else
    return off_1E791EB90[a1];
}

void std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CMHandDetectionHandler *,std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler *)#1},std::allocator<CMHandDetectionHandler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110sh"
                                "ared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<CMHandDetectionHandler> ctu::SharedSynchronizable<CMHandDetectionHandler>::make_shared_ptr<CMHandDetectionHandler>(CMHandDetectionHandler*)::{lambda(CMHandDetectionHandler*)#1}::operator() const(CMHandDetectionHandler*)::{lambda(void *)#1}::__invoke(_QWORD *__p)
{
  const void *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  if (__p)
  {
    v2 = (const void *)__p[6];
    if (v2)
      _Block_release(v2);
    v3 = __p[3];
    if (v3)
      dispatch_release(v3);
    v4 = __p[2];
    if (v4)
      dispatch_release(v4);
    v5 = (std::__shared_weak_count *)__p[1];
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete(__p);
  }
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(8uLL);
  *v8 = *a2;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(CMHandDetectionHandler::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(CMHandDetectionHandler::start(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::start(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::start(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = *(void **)(v3 + 32);
  if (v4 && !*(_BYTE *)(v3 + 56))
  {
    objc_msgSend(v4, "startCallHandednessUpdates");
    *(_BYTE *)(v3 + 56) = 1;
  }
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_8:
    operator delete(a1);
  }
}

void sub_1BF6CE94C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(8uLL);
  *v8 = *a2;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(CMHandDetectionHandler::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(CMHandDetectionHandler::stop(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::stop(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = *(void **)(v3 + 32);
  if (v4 && *(_BYTE *)(v3 + 56))
  {
    objc_msgSend(v4, "stopCallHandednessUpdates");
    *(_BYTE *)(v3 + 56) = 0;
  }
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_8:
    operator delete(a1);
  }
}

void sub_1BF6CEB24(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _OWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>(CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::registerCallback(dispatch::block<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t ***a1)
{
  uint64_t **v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  const void *v13;
  CMHandDetectionDelegateInternal *v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD *, uint64_t);
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *aBlock;

  v2 = *a1;
  v3 = **a1;
  if (!v3[4] || !v2[1])
    goto LABEL_23;
  v4 = (std::__shared_weak_count *)v3[1];
  if (!v4 || (v5 = *v3, (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = v2[1];
    if (!v12)
      goto LABEL_14;
    goto LABEL_13;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = v2[1];
  if (v12)
LABEL_13:
    v12 = (uint64_t *)_Block_copy(v12);
LABEL_14:
  v13 = (const void *)v3[6];
  v3[6] = (uint64_t)v12;
  if (v13)
    _Block_release(v13);
  v14 = objc_alloc_init(CMHandDetectionDelegateInternal);
  v3[5] = (uint64_t)v14;
  v20 = MEMORY[0x1E0C809B0];
  v21 = 3321888768;
  v22 = ___ZZN22CMHandDetectionHandler16registerCallbackEN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEv_block_invoke;
  v23 = &__block_descriptor_56_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE_e8_v16__0q8l;
  v24 = v3;
  v25 = v5;
  v26 = v7;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  aBlock = _Block_copy(&v20);
  -[CMHandDetectionDelegateInternal registerHandler:](v14, "registerHandler:", &aBlock, v20, v21, v22, v23, v24, v25);
  if (aBlock)
    _Block_release(aBlock);
  objc_msgSend((id)v3[4], "setDelegate:", v3[5]);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v7);
LABEL_23:
  v16 = v2[1];
  if (v16)
    _Block_release(v16);
  operator delete(v2);
  v17 = (std::__shared_weak_count *)a1[2];
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(a1);
}

void sub_1BF6CEE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock)
{
  _QWORD *v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  const void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v18);
  v20 = (const void *)v17[1];
  if (v20)
    _Block_release(v20);
  operator delete(v17);
  v21 = (std::__shared_weak_count *)v16[2];
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void ___ZZN22CMHandDetectionHandler16registerCallbackEN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEv_block_invoke(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (uint64_t *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = (std::__shared_weak_count *)v5[1];
        if (!v8 || (v9 = *v5, (v10 = std::__shared_weak_count::lock(v8)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v11 = v10;
        v12 = operator new(0x10uLL);
        *v12 = v5;
        v12[1] = a2;
        v13 = v5[2];
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = operator new(0x18uLL);
        *v16 = v12;
        v16[1] = v9;
        v16[2] = v11;
        dispatch_async_f(v13, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15execute_wrappedIZZZNS3_16registerCallbackENS_5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISE_NSJ_14default_deleteISE_EEEEENUlPvE_8__invokeESO_);
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v18 = (unint64_t *)&v7->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__18weak_ptrI22CMHandDetectionHandlerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI22CMHandDetectionHandlerE15execute_wrappedIZZZNS3_16registerCallbackENS_5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISE_NSJ_14default_deleteISE_EEEEENUlPvE_8__invokeESO_(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (void *)*a1;
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)*a1 + 48) + 16))();
  operator delete(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF6CF0F0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(8uLL);
  *v8 = *a2;
  v9 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(CMHandDetectionHandler::shutdown(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(CMHandDetectionHandler::shutdown(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *a1;
  v3 = **a1;
  v4 = *(void **)(v3 + 32);
  if (v4)
  {

    *(_QWORD *)(v3 + 32) = 0;
  }
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_7:
    operator delete(a1);
  }
}

void sub_1BF6CF2C0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = v2;
  operator delete(v3);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<Capabilities>::operator=[abi:ne180100](__int128 *a1)
{
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = (std::__shared_weak_count *)off_1ED70F200;
  unk_1ED70F1F8 = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791EB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791EB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<CMHandDetectionDelegate>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __cxx_global_var_init_9()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<Capabilities>::~PthreadMutexGuardPolicy, &ctu::Singleton<Capabilities,Capabilities,ctu::PthreadMutexGuardPolicy<Capabilities>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void ClientGetLogServer(_QWORD *a1@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_31;
  block[4] = &qword_1ED70F820;
  if (_MergedGlobals_7 == -1)
  {
    v2 = *(_QWORD *)algn_1ED70F828;
    *a1 = qword_1ED70F820;
    a1[1] = v2;
    if (!v2)
      return;
  }
  else
  {
    dispatch_once(&_MergedGlobals_7, block);
    v2 = *(_QWORD *)algn_1ED70F828;
    *a1 = qword_1ED70F820;
    a1[1] = v2;
    if (!v2)
      return;
  }
  v3 = (unint64_t *)(v2 + 8);
  do
    v4 = __ldxr(v3);
  while (__stxr(v4 + 1, v3));
}

uint64_t ___ZL19ClientLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::ios_base *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  std::__shared_weak_count_vtbl *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v30;
  void *__p;
  _OWORD v32[4];
  void *v33[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  __p = operator new(0x20uLL);
  v32[0] = xmmword_1BF743000;
  strcpy((char *)__p, "AppleBasebandManagerClientLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v46;
  v46 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v46 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v46 + 1) + 16))(*((_QWORD *)&v46 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v46 + 1));
      if ((SHIBYTE(v32[0]) & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (SHIBYTE(v32[0]) < 0)
LABEL_11:
    operator delete(__p);
LABEL_12:
  *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34 = v9;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v9;
  v44 = v9;
  v43 = v9;
  v42 = v9;
  v41 = v9;
  v40 = v9;
  v39 = v9;
  v38 = v9;
  v37 = v9;
  v32[3] = v9;
  *(_OWORD *)v33 = v9;
  v32[1] = v9;
  v32[2] = v9;
  v32[0] = v9;
  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v36 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = MEMORY[0x1E0DE4F60];
  v13 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
  __p = *(void **)(MEMORY[0x1E0DE4F60] + 8);
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = v13;
  v14 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
  std::ios_base::init(v14, v32);
  v14[1].__vftable = 0;
  v14[1].__fmtflags_ = -1;
  __p = (void *)(v10 + 24);
  v36 = v11;
  std::streambuf::basic_streambuf();
  v15 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v32[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"/tmp/ABM.", 9);
  v17 = getprogname();
  v18 = strlen(v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  LOBYTE(v46) = 46;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v46, 1);
  getpid();
  std::ostream::operator<<();
  v20 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v20->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1E791C6C0;
  *(_QWORD *)&v46 = v20;
  v21 = (std::__shared_weak_count *)operator new(0x20uLL);
  v21->__shared_owners_ = 0;
  v22 = (unint64_t *)&v21->__shared_owners_;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E791C728;
  v21->__shared_weak_owners_ = 0;
  v21[1].__vftable = v20;
  *((_QWORD *)&v46 + 1) = v21;
  v30 = v21;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  ctu::LogServer::addWriter();
  if (v30)
  {
    v24 = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  __p = *(void **)v12;
  *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v12 + 24);
  *(_QWORD *)&v32[0] = v15 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(v33[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8C364](&v36);
}

void sub_1BF6CF888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v17 - 80);
  std::ostringstream::~ostringstream((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_1BF6CF934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void CellularCertModule::create(capabilities::abs *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34[2];
  uint64_t block;
  uint64_t v36;
  void (*v37)(uint64_t);
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  if ((capabilities::abs::supportsCellularCert(a1) & 1) == 0
    || (TelephonyUtilIsInternalBuild() & 1) == 0 && (TelephonyUtilIsCarrierBuild() & 1) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xC8uLL);
  v5 = v4;
  v6 = *(_QWORD *)a1;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v34[0] = v6;
  v34[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  CellularCertModule::CellularCertModule((uint64_t)v4, v34);
  *a2 = v5;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E791ED78;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  a2[1] = v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 16);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_19;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
LABEL_19:
    v20 = (_QWORD *)*a2;
    if (*(_QWORD *)(*a2 + 104))
      goto LABEL_20;
    goto LABEL_36;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  v20 = (_QWORD *)*a2;
  if (*(_QWORD *)(*a2 + 104))
  {
LABEL_20:
    v21 = (std::__shared_weak_count *)v20[16];
    if (!v21 || (v22 = v20[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v24 = v23;
    block = v22;
    v36 = (uint64_t)v23;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v20 + 7));
    v25 = v22 + 48;
    if (!v22)
      v25 = 0;
    v41 = v25;
    v42 = v24;
    block = 0;
    v36 = 0;
    ctu::TrackedLogger::registerLoggerToServer();
    v26 = v42;
    if (v42)
    {
      v27 = (unint64_t *)&v42->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)v36;
    if (v36)
    {
      v30 = (unint64_t *)(v36 + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
LABEL_36:
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v32 = *a2 + 120;
  v41 = *a2;
  block = MEMORY[0x1E0C809B0];
  v36 = 0x40000000;
  v37 = ___ZNK3ctu20SharedSynchronizableI18CellularCertModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v38 = &__block_descriptor_tmp_32;
  v39 = v32;
  v40 = &v41;
  v33 = *(NSObject **)(v41 + 136);
  if (*(_QWORD *)(v41 + 144))
    dispatch_async_and_wait(v33, &block);
  else
    dispatch_sync(v33, &block);
}

void sub_1BF6CFBF4()
{
  __break(1u);
}

void sub_1BF6CFC38()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF6CFC60);
}

void sub_1BF6CFC48()
{
  JUMPOUT(0x1BF6CFC64);
}

void CellularCertModule::init(CellularCertModule *this)
{
  NSObject *v1;
  char *v2;
  CellularCertModule *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18CellularCertModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_32;
  block[4] = (char *)this + 120;
  block[5] = &v3;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void CellularCertModule::~CellularCertModule(CellularCertModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  uint8_t v19[16];

  *(_QWORD *)this = off_1E791EBD8;
  *((_QWORD *)this + 6) = &unk_1E791EC48;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v19, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *((_QWORD *)this + 6) = off_1E791ED38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v12 = *((_QWORD *)this + 18);
  if (v12)
    dispatch_release(v12);
  v13 = *((_QWORD *)this + 17);
  if (v13)
    dispatch_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  *(_QWORD *)this = off_1E79228B8;
  v15 = *((_QWORD *)this + 3);
  if (v15)
  {
    v16 = *((_QWORD *)this + 4);
    v17 = (void *)*((_QWORD *)this + 3);
    if (v16 != v15)
    {
      do
      {
        if (*(char *)(v16 - 1) < 0)
          operator delete(*(void **)(v16 - 24));
        v16 -= 24;
      }
      while (v16 != v15);
      v17 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v15;
    operator delete(v17);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
}

{
  void *v1;

  CellularCertModule::~CellularCertModule(this);
  operator delete(v1);
}

_QWORD *ctu::SharedLoggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791ED38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791ED38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void `non-virtual thunk to'CellularCertModule::~CellularCertModule(CellularCertModule *this)
{
  CellularCertModule::~CellularCertModule((CellularCertModule *)((char *)this - 48));
}

{
  void *v1;

  CellularCertModule::~CellularCertModule((CellularCertModule *)((char *)this - 48));
  operator delete(v1);
}

const char *CellularCertModule::getName(CellularCertModule *this)
{
  return "cellularcert.mod";
}

uint64_t CellularCertModule::CellularCertModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *initially_inactive;
  NSObject *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  CommandDriverFactory *v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 block;
  void (*v45)(uint64_t);
  void *v46;
  __int128 *v47;
  __int128 v48;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E791EBD8;
  *(_QWORD *)(a1 + 48) = &unk_1E791EC48;
  v9 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v42, "com.apple.telephony.abm", "cellularcert.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v45 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v46 = &__block_descriptor_tmp_13_8;
  v47 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v12 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v12 = GetABMLogServer(void)::sLogServer;
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v16 = dispatch_queue_create_with_target_V2("cellularcert.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v16, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v16);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v16;
  if (v16)
  {
    dispatch_retain(v16);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v16);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E791ED38;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = v11;
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v48);
    *v9 = off_1E791EDC8;
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v48);
    *v9 = off_1E791EDC8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v42);
  *(_QWORD *)a1 = off_1E791EBD8;
  *(_QWORD *)(a1 + 48) = &unk_1E791EC48;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  v20 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v21 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v20);
    v22 = block;
    block = 0uLL;
    v23 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v21 = off_1ED70F4D0;
  }
  v42 = v21;
  v43 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v29 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v21 + 152))(&v48, v21);
  v31 = v48;
  v48 = 0uLL;
  v32 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = v43;
  if (v43)
  {
    v39 = (unint64_t *)&v43->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  return a1;
}

void sub_1BF6D0424(_Unwind_Exception *a1)
{
  Service *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  ctu::SharedLoggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6D0484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  Service *v19;
  _QWORD *v20;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a19);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v20);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  Service::~Service(v19);
  _Unwind_Resume(a1);
}

void sub_1BF6D04C0(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

_BYTE *CellularCertModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void CellularCertModule::shutdown(_QWORD *a1, uint64_t a2, dispatch_object_t *a3)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v4 = *a3;
  if (*a3)
  {
    dispatch_retain(*a3);
    dispatch_group_enter(v4);
  }
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x10uLL);
  *v9 = a1;
  v9[1] = v4;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v11 = a1[17];
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v11, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void CellularCertModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v12);
  }
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = a1;
  v18[1] = v12;
  v18[2] = v5;
  v18[3] = v7;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::initialize(dispatch::group_session)::$_0>(CellularCertModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void CellularCertModule::start(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v12);
  }
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = a1;
  v18[1] = v12;
  v18[2] = v5;
  v18[3] = v7;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::start(dispatch::group_session)::$_0>(CellularCertModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void CellularCertModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v12);
  }
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = a1;
  v18[1] = v12;
  v18[2] = v5;
  v18[3] = v7;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::sleep(dispatch::group_session)::$_0>(CellularCertModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void CellularCertModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v12);
  }
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = a1;
  v18[1] = v12;
  v18[2] = v5;
  v18[3] = v7;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::wake(dispatch::group_session)::$_0>(CellularCertModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void CellularCertModule::bootstrapTest_sync(CellularCertModule *this@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to initialize test", v5, 2u);
  }
  CellularCertClient::bootstrapTest(*((CellularCertClient **)this + 23), a2);
}

void CellularCertModule::shutdownTest_sync(CellularCertModule *this@<X0>, uint64_t a2@<X8>)
{
  NSObject *v4;
  uint8_t v5[16];

  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to shutdown test", v5, 2u);
  }
  CellularCertClient::shutdownTest(*((CellularCertClient **)this + 23), a2);
}

void CellularCertModule::configureTest_sync(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint8_t buf[16];

  v6 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Send request to configure test", buf, 2u);
  }
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *a2;
  v9 = v8;
  if (v8)
  {
    xpc_retain(v8);
  }
  else
  {
    v8 = xpc_null_create();
    v9 = v8;
  }
  CellularCertClient::configureTest(v7, &v9, a3);
  xpc_release(v8);
}

void sub_1BF6D0D48(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791ED38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791ED38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<CellularCertModule *,std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule *)#1},std::allocator<CellularCertModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CellularCertModule *,std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule *)#1},std::allocator<CellularCertModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule*)#1}::operator() const(CellularCertModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CellularCertModule *,std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule *)#1},std::allocator<CellularCertModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI18CellularCertModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI18CellularCertModuleE15make_shared_ptrIS1_EENSt3__110shared"
                                "_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI18CellularCertModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI18CellularCertModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<CellularCertModule> ctu::SharedSynchronizable<CellularCertModule>::make_shared_ptr<CellularCertModule>(CellularCertModule*)::{lambda(CellularCertModule*)#1}::operator() const(CellularCertModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<CellularCertModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791ED38;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ___ZNK3ctu20SharedSynchronizableI18CellularCertModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t v1;
  ctu::OsLogLogger *v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  NSObject *v20;
  __int128 v21;
  void (*v22)(_QWORD *, const char *, xpc_object_t *);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  const void *v27;
  dispatch_object_t v28;

  v1 = **(_QWORD **)(a1 + 40);
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v2 = (ctu::OsLogLogger *)operator new(0x18uLL);
  ctu::OsLogLogger::OsLogLogger(v2, "com.apple.telephony.abm", "cellularcert.client");
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  std::shared_ptr<CellularCertClient>::shared_ptr[abi:ne180100]<CellularCertClient,void>(&v21, (uint64_t)v2);
  v3 = v21;
  v21 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v1 + 192);
  *(_OWORD *)(v1 + 184) = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v10 || (v11 = *(_QWORD *)(v1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v27 = (const void *)0xAAAAAAAAAAAAAAAALL;
  v28 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v21 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v21 + 1) = 1174405120;
  v22 = ___ZZN18CellularCertModule4initEvENK3__0clEv_block_invoke;
  v23 = &__block_descriptor_tmp_9_7;
  v24 = v1;
  v25 = v11;
  v26 = v13;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = _Block_copy(&v21);
  v20 = *(NSObject **)(v1 + 136);
  if (v20)
    dispatch_retain(*(dispatch_object_t *)(v1 + 136));
  v27 = v19;
  v28 = v20;
  (*(void (**)(_QWORD, const void **))(**(_QWORD **)(v1 + 168) + 48))(*(_QWORD *)(v1 + 168), &v27);
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF6D11DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  NSObject *v18;
  const void *v19;

  v18 = *(NSObject **)(v16 - 40);
  if (v18)
    dispatch_release(v18);
  v19 = *(const void **)(v16 - 48);
  if (v19)
    _Block_release(v19);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v15);
  _Unwind_Resume(a1);
}

void sub_1BF6D121C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZZN18CellularCertModule4initEvENK3__0clEv_block_invoke(_QWORD *a1, const char *a2, xpc_object_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  size_t v8;
  void *v9;
  unint64_t *p_dst;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void *v20;
  const char *v21;
  int v22;
  uint8_t *v23;
  uint8_t *v24;
  int v25;
  size_t v26;
  void *v27;
  unint64_t *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  size_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void *v40;
  const char *v41;
  int v42;
  uint8_t *v43;
  uint8_t *v44;
  int v45;
  size_t v46;
  void *v47;
  unint64_t *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  size_t v54;
  size_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  void *v60;
  const char *v61;
  int v62;
  uint8_t *v63;
  uint8_t *v64;
  int v65;
  uint64_t v66;
  xpc_object_t v67;
  std::__shared_weak_count *v68;
  unint64_t *p_shared_owners;
  unint64_t v70;
  xpc_object_t v71;
  uint8_t buf[8];
  size_t v73;
  int64_t v74;
  unint64_t __dst;
  xpc_object_t object;
  int64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;

  v4 = a1[4];
  v78 = 0;
  v79 = 0;
  v5 = (std::__shared_weak_count *)a1[6];
  if (!v5)
    goto LABEL_96;
  v79 = std::__shared_weak_count::lock(v5);
  if (!v79)
    return;
  v78 = a1[5];
  if (!v78)
    goto LABEL_96;
  v8 = strlen(a2);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (unint64_t *)operator new(v11 + 1);
    object = v9;
    v77 = v12 | 0x8000000000000000;
    __dst = (unint64_t)p_dst;
    goto LABEL_11;
  }
  HIBYTE(v77) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_11:
    memcpy(p_dst, a2, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)p_dst) = 0;
  v13 = abm::kCommandCellularCertBootstrap;
  v14 = strlen(abm::kCommandCellularCertBootstrap);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    v73 = v15;
    v74 = v18 | 0x8000000000000000;
    *(_QWORD *)buf = v16;
    goto LABEL_19;
  }
  HIBYTE(v74) = v14;
  v16 = buf;
  if (v14)
LABEL_19:
    memmove(v16, v13, v15);
  *((_BYTE *)v16 + v15) = 0;
  v19 = SHIBYTE(v77);
  v20 = (void *)__dst;
  if (v77 >= 0)
    v21 = (const char *)&__dst;
  else
    v21 = (const char *)__dst;
  v22 = SHIBYTE(v74);
  v23 = *(uint8_t **)buf;
  if (v74 >= 0)
    v24 = buf;
  else
    v24 = *(uint8_t **)buf;
  v25 = strcasecmp(v21, (const char *)v24);
  if (v22 < 0)
  {
    operator delete(v23);
    if ((v19 & 0x80000000) == 0)
    {
LABEL_28:
      if (v25)
        goto LABEL_29;
LABEL_35:
      __dst = 0xAAAAAAAAAAAAAAAALL;
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v29 = v78;
      v30 = *(NSObject **)(v78 + 88);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v30, OS_LOG_TYPE_DEFAULT, "#I Send request to initialize test", buf, 2u);
      }
      CellularCertClient::bootstrapTest(*(CellularCertClient **)(v29 + 184), (uint64_t)&__dst);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 168) + 56))(*(_QWORD *)(v4 + 168), __dst);
      xpc_release(object);
      goto LABEL_96;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_28;
  }
  operator delete(v20);
  if (!v25)
    goto LABEL_35;
LABEL_29:
  v26 = strlen(a2);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v31 = v26 | 7;
    v32 = v31 + 1;
    v28 = (unint64_t *)operator new(v31 + 1);
    object = v27;
    v77 = v32 | 0x8000000000000000;
    __dst = (unint64_t)v28;
    goto LABEL_41;
  }
  HIBYTE(v77) = v26;
  v28 = &__dst;
  if (v26)
LABEL_41:
    memcpy(v28, a2, (size_t)v27);
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  v33 = abm::kCommandCellularCertShutdown;
  v34 = strlen(abm::kCommandCellularCertShutdown);
  if (v34 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v35 = v34;
  if (v34 >= 0x17)
  {
    v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v34 | 7) != 0x17)
      v37 = v34 | 7;
    v38 = v37 + 1;
    v36 = operator new(v37 + 1);
    v73 = v35;
    v74 = v38 | 0x8000000000000000;
    *(_QWORD *)buf = v36;
    goto LABEL_49;
  }
  HIBYTE(v74) = v34;
  v36 = buf;
  if (v34)
LABEL_49:
    memmove(v36, v33, v35);
  *((_BYTE *)v36 + v35) = 0;
  v39 = SHIBYTE(v77);
  v40 = (void *)__dst;
  if (v77 >= 0)
    v41 = (const char *)&__dst;
  else
    v41 = (const char *)__dst;
  v42 = SHIBYTE(v74);
  v43 = *(uint8_t **)buf;
  if (v74 >= 0)
    v44 = buf;
  else
    v44 = *(uint8_t **)buf;
  v45 = strcasecmp(v41, (const char *)v44);
  if (v42 < 0)
  {
    operator delete(v43);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_58:
      if (v45)
        goto LABEL_59;
LABEL_65:
      __dst = 0xAAAAAAAAAAAAAAAALL;
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v49 = v78;
      v50 = *(NSObject **)(v78 + 88);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v50, OS_LOG_TYPE_DEFAULT, "#I Send request to shutdown test", buf, 2u);
      }
      CellularCertClient::shutdownTest(*(CellularCertClient **)(v49 + 184), (uint64_t)&__dst);
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 168) + 56))(*(_QWORD *)(v4 + 168), __dst);
      xpc_release(object);
      goto LABEL_96;
    }
  }
  else if ((v39 & 0x80000000) == 0)
  {
    goto LABEL_58;
  }
  operator delete(v40);
  if (!v45)
    goto LABEL_65;
LABEL_59:
  v46 = strlen(a2);
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v47 = (void *)v46;
  if (v46 >= 0x17)
  {
    v51 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v51 = v46 | 7;
    v52 = v51 + 1;
    v48 = (unint64_t *)operator new(v51 + 1);
    object = v47;
    v77 = v52 | 0x8000000000000000;
    __dst = (unint64_t)v48;
    goto LABEL_71;
  }
  HIBYTE(v77) = v46;
  v48 = &__dst;
  if (v46)
LABEL_71:
    memcpy(v48, a2, (size_t)v47);
  *((_BYTE *)v47 + (_QWORD)v48) = 0;
  v53 = abm::kCommandCellularCertConfigure;
  v54 = strlen(abm::kCommandCellularCertConfigure);
  if (v54 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v55 = v54;
  if (v54 >= 0x17)
  {
    v57 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v54 | 7) != 0x17)
      v57 = v54 | 7;
    v58 = v57 + 1;
    v56 = operator new(v57 + 1);
    v73 = v55;
    v74 = v58 | 0x8000000000000000;
    *(_QWORD *)buf = v56;
    goto LABEL_79;
  }
  HIBYTE(v74) = v54;
  v56 = buf;
  if (v54)
LABEL_79:
    memmove(v56, v53, v55);
  *((_BYTE *)v56 + v55) = 0;
  v59 = SHIBYTE(v77);
  v60 = (void *)__dst;
  if (v77 >= 0)
    v61 = (const char *)&__dst;
  else
    v61 = (const char *)__dst;
  v62 = SHIBYTE(v74);
  v63 = *(uint8_t **)buf;
  if (v74 >= 0)
    v64 = buf;
  else
    v64 = *(uint8_t **)buf;
  v65 = strcasecmp(v61, (const char *)v64);
  if (v62 < 0)
  {
    operator delete(v63);
    if ((v59 & 0x80000000) == 0)
    {
LABEL_88:
      if (!v65)
        goto LABEL_92;
      goto LABEL_96;
    }
  }
  else if ((v59 & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(v60);
  if (!v65)
  {
LABEL_92:
    __dst = 0xAAAAAAAAAAAAAAAALL;
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v66 = v78;
    v67 = *a3;
    v71 = v67;
    if (v67)
    {
      xpc_retain(v67);
    }
    else
    {
      v67 = xpc_null_create();
      v71 = v67;
    }
    CellularCertModule::configureTest_sync(v66, &v71, (uint64_t)&__dst);
    xpc_release(v67);
    v71 = 0;
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v4 + 168) + 64))(*(_QWORD *)(v4 + 168), __dst);
    xpc_release(object);
  }
LABEL_96:
  v68 = v79;
  if (v79)
  {
    p_shared_owners = (unint64_t *)&v79->__shared_owners_;
    do
      v70 = __ldaxr(p_shared_owners);
    while (__stlxr(v70 - 1, p_shared_owners));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_1BF6D1844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, xpc_object_t object, int a16, __int16 a17, char a18, char a19, char a20)
{
  xpc_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18CellularCertModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrI18CellularCertModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>(CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::shutdown(ShutdownStage,dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint8_t v10[8];
  xpc_object_t object;

  v2 = *a1;
  v3 = **a1;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to shutdown test", v10, 2u);
  }
  CellularCertClient::shutdownTest(*(CellularCertClient **)(v3 + 184), (uint64_t)v10);
  xpc_release(object);
  v5 = v2[1];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = v2[1];
    if (v6)
      dispatch_release(v6);
  }
  operator delete(v2);
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_1BF6D1A50(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)v1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::initialize(dispatch::group_session)::$_0>(CellularCertModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  void *v14;
  char *v15;
  size_t v16;
  size_t v17;
  void *p_p;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  char *v25;
  size_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  NSObject *v36;
  NSObject *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *__p;
  uint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  const void *v48;
  void *v49[2];
  unint64_t v50;
  void **__dst;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  const void *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  const void *v61;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = abm::kCommandCellularCertBootstrap;
  v5 = strlen(abm::kCommandCellularCertBootstrap);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v52 = v6;
    v53 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v53) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = (void **)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_12_8;
  aBlock[4] = v3;
  aBlock[5] = v2[2];
  v11 = (std::__shared_weak_count *)v2[3];
  v60 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = _Block_copy(aBlock);
  v61 = v14;
  Service::registerCommandHandler(v3, (uint64_t)&__dst, &v61);
  if (v14)
    _Block_release(v14);
  if (SHIBYTE(v53) < 0)
    operator delete(__dst);
  v15 = abm::kCommandCellularCertShutdown;
  v16 = strlen(abm::kCommandCellularCertShutdown);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    v42 = v17;
    v43 = v20 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_23;
  }
  HIBYTE(v43) = v16;
  p_p = &__p;
  if (v16)
LABEL_23:
    memmove(p_p, v15, v17);
  *((_BYTE *)p_p + v17) = 0;
  __dst = v10;
  v52 = 1174405120;
  v53 = (unint64_t)___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_13;
  v54 = &__block_descriptor_tmp_14_1;
  v55 = v3;
  v56 = v2[2];
  v21 = (std::__shared_weak_count *)v2[3];
  v57 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = _Block_copy(&__dst);
  v58 = v24;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v58);
  if (v24)
    _Block_release(v24);
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
  v25 = abm::kCommandCellularCertConfigure;
  v26 = strlen(abm::kCommandCellularCertConfigure);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = (void *)v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    v49[1] = v27;
    v50 = v30 | 0x8000000000000000;
    v49[0] = v28;
    goto LABEL_38;
  }
  HIBYTE(v50) = v26;
  v28 = v49;
  if (v26)
LABEL_38:
    memmove(v28, v25, (size_t)v27);
  *((_BYTE *)v27 + (_QWORD)v28) = 0;
  __p = v10;
  v42 = 1174405120;
  v43 = (unint64_t)___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_15;
  v44 = &__block_descriptor_tmp_16_5;
  v45 = v3;
  v46 = v2[2];
  v31 = (std::__shared_weak_count *)v2[3];
  v47 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = _Block_copy(&__p);
  v48 = v34;
  Service::registerCommandHandler(v3, (uint64_t)v49, &v48);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v50) < 0)
    operator delete(v49[0]);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
  v35 = (std::__shared_weak_count *)v2[3];
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  v36 = v2[1];
  if (v36)
  {
    dispatch_group_leave(v36);
    v37 = v2[1];
    if (v37)
      dispatch_release(v37);
  }
  operator delete(v2);
  v38 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(a1);
}

void sub_1BF6D1EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  _QWORD *v44;
  _QWORD *v45;
  const void *v46;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  NSObject *v50;
  NSObject *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;

  if (v46)
    _Block_release(v46);
  if (a19)
  {
    std::__shared_weak_count::__release_weak(a19);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_5:
      v48 = a36;
      if (!a36)
      {
LABEL_10:
        if (a44)
          std::__shared_weak_count::__release_weak(a44);
        v49 = (std::__shared_weak_count *)v45[3];
        if (v49)
          std::__shared_weak_count::__release_weak(v49);
        v50 = v45[1];
        if (v50)
        {
          dispatch_group_leave(v50);
          v51 = v45[1];
          if (v51)
            dispatch_release(v51);
        }
        operator delete(v45);
        v52 = (std::__shared_weak_count *)v44[2];
        if (v52)
        {
          p_shared_owners = (unint64_t *)&v52->__shared_owners_;
          do
            v54 = __ldaxr(p_shared_owners);
          while (__stlxr(v54 - 1, p_shared_owners));
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
        operator delete(v44);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v48);
      goto LABEL_10;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  v48 = a36;
  if (!a36)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  NSObject *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = (_QWORD *)a1[5];
      if (v9)
      {
        if (*a3)
        {
          v10 = _Block_copy(*a3);
          v11 = (std::__shared_weak_count *)v9[16];
          if (!v11)
LABEL_20:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v10 = 0;
          v11 = (std::__shared_weak_count *)v9[16];
          if (!v11)
            goto LABEL_20;
        }
        v12 = v9[15];
        v13 = std::__shared_weak_count::lock(v11);
        if (!v13)
          goto LABEL_20;
        v14 = v13;
        v15 = operator new(0x10uLL);
        *v15 = v6;
        v15[1] = v10;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        v17 = v9[17];
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = operator new(0x18uLL);
        *v19 = v15;
        v19[1] = v12;
        v19[2] = v14;
        dispatch_async_f(v17, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v21 = (unint64_t *)&v8->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_13(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  void *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  NSObject *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = (_QWORD *)a1[5];
      if (v9)
      {
        if (*a3)
        {
          v10 = _Block_copy(*a3);
          v11 = (std::__shared_weak_count *)v9[16];
          if (!v11)
LABEL_20:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v10 = 0;
          v11 = (std::__shared_weak_count *)v9[16];
          if (!v11)
            goto LABEL_20;
        }
        v12 = v9[15];
        v13 = std::__shared_weak_count::lock(v11);
        if (!v13)
          goto LABEL_20;
        v14 = v13;
        v15 = operator new(0x10uLL);
        *v15 = v6;
        v15[1] = v10;
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        v17 = v9[17];
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = operator new(0x18uLL);
        *v19 = v15;
        v19[1] = v12;
        v19[2] = v14;
        dispatch_async_f(v17, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v21 = (unint64_t *)&v8->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZZN18CellularCertModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_15(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  const void *v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (!v10)
      {
LABEL_18:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = *a2;
      if (v11)
      {
        xpc_retain(v11);
        v12 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v11 = xpc_null_create();
        v12 = *a3;
        if (*a3)
        {
LABEL_6:
          v13 = _Block_copy(v12);
          v14 = (std::__shared_weak_count *)v10[16];
          if (!v14)
LABEL_23:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_10;
        }
      }
      v13 = 0;
      v14 = (std::__shared_weak_count *)v10[16];
      if (!v14)
        goto LABEL_23;
LABEL_10:
      v15 = v10[15];
      v16 = std::__shared_weak_count::lock(v14);
      if (!v16)
        goto LABEL_23;
      v17 = v16;
      v18 = operator new(0x18uLL);
      *v18 = v7;
      v18[1] = v11;
      v19 = xpc_null_create();
      v18[2] = v13;
      v20 = v10[17];
      v21 = (unint64_t *)&v17->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v23 = operator new(0x18uLL);
      *v23 = v18;
      v23[1] = v15;
      v23[2] = v17;
      dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 - 1, v21));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      xpc_release(v19);
      goto LABEL_18;
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const void **v5;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int v10[4];
  unint64_t v11;
  xpc_object_t object;

  v2 = *a1;
  v3 = **a1;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to initialize test", (uint8_t *)v10, 2u);
  }
  CellularCertClient::bootstrapTest(*(CellularCertClient **)(v3 + 184), (uint64_t)&v11);
  v5 = (const void **)(v2 + 1);
  if ((_BYTE)v11)
    v6 = 0;
  else
    v6 = -534716416;
  v10[0] = v6;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 1, v10, &object);
  xpc_release(object);
  if (*v5)
    _Block_release(*v5);
  operator delete(v2);
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_1BF6D25C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  _QWORD *v12;
  _QWORD *v13;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  xpc_release(object);
  v15 = (const void *)v13[1];
  if (v15)
    _Block_release(v15);
  operator delete(v13);
  v16 = (std::__shared_weak_count *)v12[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const void **v5;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int v10[4];
  unint64_t v11;
  xpc_object_t object;

  v2 = *a1;
  v3 = **a1;
  v11 = 0xAAAAAAAAAAAAAAAALL;
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Send request to shutdown test", (uint8_t *)v10, 2u);
  }
  CellularCertClient::shutdownTest(*(CellularCertClient **)(v3 + 184), (uint64_t)&v11);
  v5 = (const void **)(v2 + 1);
  if ((_BYTE)v11)
    v6 = 0;
  else
    v6 = -534716416;
  v10[0] = v6;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 1, v10, &object);
  xpc_release(object);
  if (*v5)
    _Block_release(*v5);
  operator delete(v2);
  v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_1BF6D2758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  _QWORD *v12;
  _QWORD *v13;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  xpc_release(object);
  v15 = (const void *)v13[1];
  if (v15)
    _Block_release(v15);
  operator delete(v13);
  v16 = (std::__shared_weak_count *)v12[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18CellularCertModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  xpc_object_t v4;
  const void **v5;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unsigned int v10;
  xpc_object_t v11;
  unint64_t v12;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v12 = 0xAAAAAAAAAAAAAAAALL;
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = (xpc_object_t)v2[1];
  v11 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    v4 = xpc_null_create();
    v11 = v4;
  }
  CellularCertModule::configureTest_sync(v3, &v11, (uint64_t)&v12);
  xpc_release(v4);
  v11 = 0;
  v5 = (const void **)(v2 + 2);
  if ((_BYTE)v12)
    v6 = 0;
  else
    v6 = -534716416;
  v10 = v6;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 2, &v10, &object);
  xpc_release(object);
  if (*v5)
    _Block_release(*v5);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_1BF6D28EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  _QWORD *v12;
  uint64_t v13;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  xpc_release(object);
  v15 = *(const void **)(v13 + 16);
  if (v15)
    _Block_release(v15);
  xpc_release(*(xpc_object_t *)(v13 + 8));
  operator delete((void *)v13);
  v16 = (std::__shared_weak_count *)v12[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v12);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::start(dispatch::group_session)::$_0>(CellularCertModule::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  const char *v7;
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  const void *v21;
  size_t v22;
  void *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  const void *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  NSObject *v43;
  const void *v44;
  size_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  void *v53;
  NSObject *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  NSObject *v58;
  NSObject *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD v63[6];
  std::__shared_weak_count *v64;
  void *v65;
  dispatch_object_t v66;
  void *v67[2];
  unint64_t v68;
  _QWORD v69[6];
  std::__shared_weak_count *v70;
  void *v71;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v74;
  __int128 aBlock;
  void (*v76)(_QWORD *, abm::client::Event **);
  void *v77;
  uint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  const void *v81;
  dispatch_object_t v82;
  void *v83[2];
  unint64_t v84;
  const void *v85;
  void *__dst[2];
  unint64_t v87;

  v2 = *a1;
  v3 = (std::__shared_weak_count *)(*a1)[3];
  if (!v3)
    goto LABEL_91;
  v4 = *v2;
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    goto LABEL_91;
  v6 = v5;
  if (v2[2])
  {
    v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    v8 = strlen(v7);
    if (v8 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v11 = v8 | 7;
      v12 = v11 + 1;
      v10 = (void **)operator new(v11 + 1);
      __dst[1] = v9;
      v87 = v12 | 0x8000000000000000;
      __dst[0] = v10;
    }
    else
    {
      HIBYTE(v87) = v8;
      v10 = __dst;
      if (!v8)
        goto LABEL_12;
    }
    memmove(v10, v7, (size_t)v9);
LABEL_12:
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    v85 = 0;
    AppleBasebandManager::create();
    v13 = aBlock;
    aBlock = 0uLL;
    v14 = *(std::__shared_weak_count **)(v4 + 160);
    *(_OWORD *)(v4 + 152) = v13;
    if (!v14)
      goto LABEL_16;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = (std::__shared_weak_count *)*((_QWORD *)&aBlock + 1);
      if (!*((_QWORD *)&aBlock + 1))
        goto LABEL_20;
    }
    else
    {
LABEL_16:
      v17 = (std::__shared_weak_count *)*((_QWORD *)&aBlock + 1);
      if (!*((_QWORD *)&aBlock + 1))
        goto LABEL_20;
    }
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = v85;
      if (!v85)
      {
LABEL_22:
        if (SHIBYTE(v87) < 0)
          operator delete(__dst[0]);
        v21 = (const void *)*MEMORY[0x1E0CFBD68];
        v22 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
        if (v22 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v23 = (void *)v22;
        if (v22 >= 0x17)
        {
          v25 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v22 | 7) != 0x17)
            v25 = v22 | 7;
          v26 = v25 + 1;
          v24 = (void **)operator new(v25 + 1);
          v83[1] = v23;
          v84 = v26 | 0x8000000000000000;
          v83[0] = v24;
        }
        else
        {
          HIBYTE(v84) = v22;
          v24 = v83;
          if (!v22)
          {
LABEL_32:
            *((_BYTE *)v23 + (_QWORD)v24) = 0;
            v27 = MEMORY[0x1E0C809B0];
            *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
            *((_QWORD *)&aBlock + 1) = 1174405120;
            v76 = ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
            v77 = &__block_descriptor_tmp_18_5;
            v78 = v4;
            v79 = v2[2];
            v28 = (std::__shared_weak_count *)v2[3];
            v80 = v28;
            if (v28)
            {
              p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
              do
                v30 = __ldxr(p_shared_weak_owners);
              while (__stxr(v30 + 1, p_shared_weak_owners));
            }
            v31 = _Block_copy(&aBlock);
            v32 = *(NSObject **)(v4 + 136);
            if (v32)
              dispatch_retain(*(dispatch_object_t *)(v4 + 136));
            v81 = v31;
            v82 = v32;
            AppleBasebandManager::setEventHandler();
            if (v82)
              dispatch_release(v82);
            if (v81)
              _Block_release(v81);
            if (SHIBYTE(v84) < 0)
              operator delete(v83[0]);
            v33 = (const void *)*MEMORY[0x1E0CFBBB0];
            v34 = strlen((const char *)*MEMORY[0x1E0CFBBB0]);
            if (v34 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v35 = (void *)v34;
            if (v34 >= 0x17)
            {
              v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v37 = v34 | 7;
              v38 = v37 + 1;
              v36 = operator new(v37 + 1);
              __p[1] = v35;
              v74 = v38 | 0x8000000000000000;
              __p[0] = v36;
            }
            else
            {
              HIBYTE(v74) = v34;
              v36 = __p;
              if (!v34)
              {
LABEL_51:
                *((_BYTE *)v35 + (_QWORD)v36) = 0;
                v69[0] = v27;
                v69[1] = 1174405120;
                v69[2] = ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_19;
                v69[3] = &__block_descriptor_tmp_20_7;
                v69[4] = v4;
                v69[5] = v2[2];
                v39 = (std::__shared_weak_count *)v2[3];
                v70 = v39;
                if (v39)
                {
                  v40 = (unint64_t *)&v39->__shared_weak_owners_;
                  do
                    v41 = __ldxr(v40);
                  while (__stxr(v41 + 1, v40));
                }
                v42 = _Block_copy(v69);
                v43 = *(NSObject **)(v4 + 136);
                if (v43)
                  dispatch_retain(*(dispatch_object_t *)(v4 + 136));
                v71 = v42;
                object = v43;
                AppleBasebandManager::setEventHandler();
                if (object)
                  dispatch_release(object);
                if (v71)
                  _Block_release(v71);
                if (SHIBYTE(v74) < 0)
                  operator delete(__p[0]);
                v44 = (const void *)*MEMORY[0x1E0CFB9A8];
                v45 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
                if (v45 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v46 = (void *)v45;
                if (v45 >= 0x17)
                {
                  v48 = (v45 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v45 | 7) != 0x17)
                    v48 = v45 | 7;
                  v49 = v48 + 1;
                  v47 = operator new(v48 + 1);
                  v67[1] = v46;
                  v68 = v49 | 0x8000000000000000;
                  v67[0] = v47;
                }
                else
                {
                  HIBYTE(v68) = v45;
                  v47 = v67;
                  if (!v45)
                    goto LABEL_70;
                }
                memmove(v47, v44, (size_t)v46);
LABEL_70:
                *((_BYTE *)v46 + (_QWORD)v47) = 0;
                v63[0] = v27;
                v63[1] = 1174405120;
                v63[2] = ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_21;
                v63[3] = &__block_descriptor_tmp_22_7;
                v63[4] = v4;
                v63[5] = v2[2];
                v50 = (std::__shared_weak_count *)v2[3];
                v64 = v50;
                if (v50)
                {
                  v51 = (unint64_t *)&v50->__shared_weak_owners_;
                  do
                    v52 = __ldxr(v51);
                  while (__stxr(v52 + 1, v51));
                }
                v53 = _Block_copy(v63);
                v54 = *(NSObject **)(v4 + 136);
                if (v54)
                  dispatch_retain(*(dispatch_object_t *)(v4 + 136));
                v65 = v53;
                v66 = v54;
                AppleBasebandManager::setEventHandler();
                if (v66)
                  dispatch_release(v66);
                if (v65)
                  _Block_release(v65);
                if (SHIBYTE(v68) < 0)
                  operator delete(v67[0]);
                AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v4 + 152));
                if (v64)
                  std::__shared_weak_count::__release_weak(v64);
                if (v70)
                  std::__shared_weak_count::__release_weak(v70);
                if (v80)
                  std::__shared_weak_count::__release_weak(v80);
                goto LABEL_87;
              }
            }
            memmove(v36, v33, (size_t)v35);
            goto LABEL_51;
          }
        }
        memmove(v24, v21, (size_t)v23);
        goto LABEL_32;
      }
LABEL_21:
      CFRelease(v20);
      goto LABEL_22;
    }
LABEL_20:
    v20 = v85;
    if (!v85)
      goto LABEL_22;
    goto LABEL_21;
  }
LABEL_87:
  v55 = (unint64_t *)&v6->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_91:
  v57 = (std::__shared_weak_count *)v2[3];
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  v58 = v2[1];
  if (v58)
  {
    dispatch_group_leave(v58);
    v59 = v2[1];
    if (v59)
      dispatch_release(v59);
  }
  operator delete(v2);
  v60 = (std::__shared_weak_count *)a1[2];
  if (v60)
  {
    v61 = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  operator delete(a1);
}

void sub_1BF6D2FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,dispatch_object_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  _QWORD *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v50;
  std::__shared_weak_count *v51;
  NSObject *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  p_shared_owners = (unint64_t *)&v47->__shared_owners_;
  do
    v50 = __ldaxr(p_shared_owners);
  while (__stlxr(v50 - 1, p_shared_owners));
  if (v50)
  {
    v51 = (std::__shared_weak_count *)v46[3];
    if (v51)
    {
LABEL_11:
      std::__shared_weak_count::__release_weak(v51);
      v52 = v46[1];
      if (!v52)
        goto LABEL_17;
LABEL_15:
      dispatch_group_leave(v52);
      v53 = v46[1];
      if (v53)
        dispatch_release(v53);
LABEL_17:
      operator delete(v46);
      v54 = (std::__shared_weak_count *)v45[2];
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      operator delete(v45);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
    v51 = (std::__shared_weak_count *)v46[3];
    if (v51)
      goto LABEL_11;
  }
  v52 = v46[1];
  if (!v52)
    goto LABEL_17;
  goto LABEL_15;
}

void ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFTypeRef v8;
  NSObject *v9;
  void **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;
  _QWORD v15[2];
  CFTypeRef cf;
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint8_t buf[16];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v18 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v15[0] = 0xAAAAAAAAAAAAAAAALL;
          v15[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          __p[0] = 0;
          __p[1] = 0;
          v14 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v19, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8B878](&v19);
          *(_OWORD *)__p = *(_OWORD *)buf;
          v14 = v21;
          v9 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = __p;
            if (v14 < 0)
              v10 = (void **)__p[0];
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v10;
            _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Boot state is %s", buf, 0xCu);
          }
          if (SHIBYTE(v14) < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B8B8B4](v15);
          v8 = cf;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF6D3388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_19(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Reset Detected", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void ___ZZN18CellularCertModule5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_21(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Dump state begin", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::sleep(dispatch::group_session)::$_0>(CellularCertModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  v2 = *a1;
  v3 = (std::__shared_weak_count *)(*a1)[3];
  if (v3)
  {
    v4 = *v2;
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (v2[2])
      {
        v7 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v16 = 0;
          _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Sleep", v16, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v10 = (std::__shared_weak_count *)v2[3];
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
  }
  v11 = v2[1];
  if (v11)
  {
    dispatch_group_leave(v11);
    v12 = v2[1];
    if (v12)
      dispatch_release(v12);
  }
  operator delete(v2);
  v13 = (std::__shared_weak_count *)a1[2];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<CellularCertModule>::execute_wrapped<CellularCertModule::wake(dispatch::group_session)::$_0>(CellularCertModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<CellularCertModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<CellularCertModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint8_t v16[16];

  v2 = *a1;
  v3 = (std::__shared_weak_count *)(*a1)[3];
  if (v3)
  {
    v4 = *v2;
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      if (v2[2])
      {
        v7 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v16 = 0;
          _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Wake", v16, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v10 = (std::__shared_weak_count *)v2[3];
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
  }
  v11 = v2[1];
  if (v11)
  {
    dispatch_group_leave(v11);
    v12 = v2[1];
    if (v12)
      dispatch_release(v12);
  }
  operator delete(v2);
  v13 = (std::__shared_weak_count *)a1[2];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(a1);
}

uint64_t __cxx_global_var_init_3_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

const char *IOKitAccessoriesDelegate::getName(IOKitAccessoriesDelegate *this)
{
  return "IOKitAccessories.delegate";
}

uint64_t IOKitAccessoriesDelegate::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = (std::__shared_weak_count_vtbl *)operator new(0xB8uLL);
  v7 = a1[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v28 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v27);
LABEL_6:
  v8 = *a2;
  v24 = v8;
  if (v8)
    dispatch_retain(v8);
  IOKitAccessoriesDelegate::IOKitAccessoriesDelegate((uint64_t)v6, v27, &v24);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E791F0A0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v25 = v6;
  v26 = v11;
  if (v8)
    dispatch_release(v8);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_27;
  }
  if (v28)
  {
    v22 = 5;
LABEL_27:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v9, v10);
  }
  result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1BF6D3A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t IOKitAccessoriesDelegate::IOKitAccessoriesDelegate(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v30;
  __int128 block;
  void (*v32)(uint64_t);
  void *v33;
  uint64_t *v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E791EF78;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v36 = v35;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v35);
    }
    else
    {
      v36 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v36 = 0;
  }
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", v7);
  *(_QWORD *)a1 = off_1E791FD60;
  v8 = (uint64_t)v36;
  if (!v36)
    goto LABEL_13;
  if (v36 != v35)
  {
    v8 = (*(uint64_t (**)(void))(*v36 + 16))();
LABEL_13:
    *(_QWORD *)(a1 + 72) = v8;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD *))(v35[0] + 24))(v35);
LABEL_15:
  *(_BYTE *)(a1 + 80) = 0;
  if (v6)
    dispatch_release(v6);
  v9 = v36;
  if (v36 == v35)
  {
    v10 = 4;
    v9 = v35;
    goto LABEL_21;
  }
  if (v36)
  {
    v10 = 5;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)a1 = off_1E791EF78;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v32 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v33 = &__block_descriptor_tmp_13_8;
  v34 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = unk_1ED70F6A0;
    v30 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_27;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v12 = unk_1ED70F6A0;
    v30 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_27;
  }
  v13 = (unint64_t *)(v12 + 8);
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
LABEL_27:
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&block);
    v15 = block;
    block = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v30)
  {
    v27 = (unint64_t *)&v30->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 1065353216;
  return a1;
}

void sub_1BF6D3EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  AccessoriesDelegateBase *v3;
  va_list va;

  va_start(va, a3);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  AccessoriesDelegateBase::~AccessoriesDelegateBase(v3);
  _Unwind_Resume(a1);
}

void sub_1BF6D3F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t *a21)
{
  NSObject *v21;
  _QWORD *v22;
  _QWORD *v23;

  v23 = v22;
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v23);
  if (v21)
    dispatch_release(v21);
  if (a21 == &a18)
  {
    (*(void (**)(void))(a18 + 32))();
    _Unwind_Resume(a1);
  }
  if (!a21)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*a21 + 40))();
  _Unwind_Resume(a1);
}

void IOKitAccessoriesDelegate::~IOKitAccessoriesDelegate(IOKitAccessoriesDelegate *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  IOKitAccessoriesDelegate *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)this = off_1E791EF78;
  v2 = (_QWORD *)*((_QWORD *)this + 20);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v4)
    operator delete(v4);
  v5 = (_QWORD *)*((_QWORD *)this + 15);
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      operator delete(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v7)
    operator delete(v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)this = off_1E791FD60;
  v11 = (IOKitAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v11 == (IOKitAccessoriesDelegate *)((char *)this + 48))
  {
    v12 = 4;
    v11 = (IOKitAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v11)
      goto LABEL_19;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_19:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v13 = *((_QWORD *)this + 4);
  if (v13)
    dispatch_release(v13);
  v14 = *((_QWORD *)this + 3);
  if (v14)
    dispatch_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

{
  void *v1;

  IOKitAccessoriesDelegate::~IOKitAccessoriesDelegate(this);
  operator delete(v1);
}

void IOKitAccessoriesDelegate::init(IOKitAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_33;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

double ___ZN24IOKitAccessoriesDelegate4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  double result;
  int v7;

  v1 = *(_QWORD *)(a1 + 32) + 104;
  v7 = 2;
  v2 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 2u, &v7);
  *(_QWORD *)((char *)v2 + 20) = 0x2000000000004;
  *((_DWORD *)v2 + 7) = 0x10000;
  v7 = 8;
  v3 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 8u, &v7);
  *(_QWORD *)((char *)v3 + 20) = 0x3000000000000;
  *((_DWORD *)v3 + 7) = 0;
  v7 = 4;
  v4 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 4u, &v7);
  *(_QWORD *)((char *)v4 + 20) = 0x300000000000FLL;
  *((_DWORD *)v4 + 7) = 0;
  v7 = 32;
  v5 = std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(v1, 0x20u, &v7);
  *(_QWORD *)&result = 0x3000000000010;
  *(_QWORD *)((char *)v5 + 20) = 0x3000000000010;
  *((_DWORD *)v5 + 7) = 0;
  return result;
}

void IOKitAccessoriesDelegate::start(IOKitAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_10_4;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  capabilities::abs *v17;
  unint64_t v18;
  void *v19;
  NSObject *v20;
  _QWORD v21[6];
  std::__shared_weak_count *v22;
  void *v23;
  dispatch_object_t v24;
  _QWORD aBlock[6];
  std::__shared_weak_count *v26;
  void *v27;
  dispatch_object_t object;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", buf, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 1;
    v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v5 || (v6 = *(_QWORD *)(v1 + 8), (v7 = std::__shared_weak_count::lock(v5)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v8 = v7;
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
    }
    v13 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_5_9;
    aBlock[4] = v1;
    aBlock[5] = v6;
    v26 = v8;
    do
      v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
    v15 = _Block_copy(aBlock);
    v16 = *(NSObject **)(v1 + 24);
    if (v16)
      dispatch_retain(*(dispatch_object_t *)(v1 + 24));
    v27 = v15;
    object = v16;
    ctu::iokit::Controller::setPowerSourceCallback();
    if (object)
      dispatch_release(object);
    v17 = (capabilities::abs *)v27;
    if (v27)
      _Block_release(v27);
    if (capabilities::abs::supportsDisplayCoverAccessory(v17))
    {
      v21[0] = v13;
      v21[1] = 1174405120;
      v21[2] = ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_6;
      v21[3] = &__block_descriptor_tmp_9_8;
      v21[4] = v1;
      v21[5] = v6;
      v22 = v8;
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      v19 = _Block_copy(v21);
      v20 = *(NSObject **)(v1 + 24);
      if (v20)
        dispatch_retain(*(dispatch_object_t *)(v1 + 24));
      v23 = v19;
      v24 = v20;
      ctu::iokit::Controller::registerForDisplayCoverStateChanged();
      if (v24)
        dispatch_release(v24);
      if (v23)
        _Block_release(v23);
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
    }
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1BF6D44BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,char a25)
{
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v27;

  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayCoverState)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    v27 = a24;
    if (!a24)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v27 = a24;
    if (!a24)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v27);
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_2(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  char v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  __int16 v11;
  uint64_t *v12;
  unint64_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL8 v23;
  void *p_p;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  void **v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  size_t prime;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  _WORD *v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  NSObject *v54;
  _BOOL8 v55;
  void *v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  int v67;
  _DWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  int8x8_t v77;
  char *v78;
  unint64_t v79;
  uint8x8_t v80;
  unint64_t v81;
  uint64_t v82;
  _DWORD **v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  __int16 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  std::ios_base *v100;
  uint64_t v101;
  std::string::size_type v102;
  std::string *p_buf;
  NSObject *v104;
  uint64_t v105;
  void **v106;
  _QWORD *v107;
  __int16 v108;
  _DWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t i;
  uint64_t v115;
  uint64_t v116;
  const void *v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  std::string *v122;
  CFTypeRef v123;
  const void *v124;
  _WORD *v125;
  uint64_t v126;
  unint64_t *p_shared_owners;
  unint64_t v128;
  __int16 v129;
  __int16 v130;
  _QWORD *v131;
  __int16 v132;
  __int16 v133;
  __int16 v134;
  void *v136;
  void *v137;
  _WORD *v138;
  CFTypeRef cf;
  std::string v140;
  void *__p;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  unint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  void *v159;
  void *v160;
  char *v161;
  CFTypeRef v162;
  void *v163;
  void *v164;
  char *v165;
  CFTypeRef v166;
  void *v167;
  void *v168;
  _WORD *v169;
  CFTypeRef v170;
  CFTypeRef v171;
  std::__shared_weak_count *v173;
  _BYTE v174[12];
  std::string buf;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v4 = a1[4];
  v5 = std::__shared_weak_count::lock(v3);
  v173 = v5;
  if (!v5)
    return;
  if (!a1[5])
  {
    v47 = v5;
    goto LABEL_286;
  }
  v171 = 0;
  v6 = *(uint64_t **)(v4 + 120);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    v134 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (uint64_t *)(v4 + 144);
    v131 = (_QWORD *)(v4 + 160);
    v133 = -1;
    while (1)
    {
      v13 = *((unsigned int *)v6 + 4);
      if ((v13 & a2) != 0)
        break;
LABEL_7:
      v6 = (uint64_t *)*v6;
      if (!v6)
        goto LABEL_105;
    }
    v14 = *(int8x8_t *)(v4 + 152);
    if (v14)
    {
      v15 = (uint8x8_t)vcnt_s8(v14);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        v16 = *((unsigned int *)v6 + 4);
        if (*(_QWORD *)&v14 <= v13)
          v16 = v13 % *(_QWORD *)&v14;
      }
      else
      {
        v16 = (v14.i32[0] - 1) & v13;
      }
      v17 = *(uint64_t ***)(*v12 + 8 * v16);
      if (v17)
      {
        v18 = *v17;
        if (v18)
        {
          if (v15.u32[0] < 2uLL)
          {
            v19 = *(_QWORD *)&v14 - 1;
            while (1)
            {
              v21 = v18[1];
              if (v21 == v13)
              {
                if (*((_DWORD *)v18 + 4) == (_DWORD)v13)
                  goto LABEL_6;
              }
              else if ((v21 & v19) != v16)
              {
                goto LABEL_30;
              }
              v18 = (uint64_t *)*v18;
              if (!v18)
                goto LABEL_30;
            }
          }
          do
          {
            v20 = v18[1];
            if (v20 == v13)
            {
              if (*((_DWORD *)v18 + 4) == (_DWORD)v13)
                goto LABEL_6;
            }
            else
            {
              if (v20 >= *(_QWORD *)&v14)
                v20 %= *(_QWORD *)&v14;
              if (v20 != v16)
                break;
            }
            v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
      }
    }
LABEL_30:
    v22 = *(NSObject **)(v4 + 40);
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      ctu::iokit::asString();
      p_p = &__p;
      if (v142 < 0)
        p_p = __p;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEFAULT, "#I Power Source attached: %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v142) < 0)
        operator delete(__p);
    }
    v133 = *((_WORD *)v6 + 10);
    v134 = *((_WORD *)v6 + 12);
    v9 = *((unsigned __int16 *)v6 + 13);
    v10 = *((_WORD *)v6 + 14);
    capabilities::abs::supportedSARFeatures((capabilities::abs *)v23);
    if (capabilities::abs::operator&())
      v11 = 2;
    else
      v11 = 1;
    v25 = *((unsigned int *)v6 + 4);
    v26 = *(_QWORD *)(v4 + 152);
    if (v26)
    {
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)v26);
      v27.i16[0] = vaddlv_u8(v27);
      if (v27.u32[0] > 1uLL)
      {
        v28 = *((unsigned int *)v6 + 4);
        if (v26 <= v25)
          v28 = v25 % v26;
      }
      else
      {
        v28 = ((_DWORD)v26 - 1) & v25;
      }
      v29 = *(void ***)(*v12 + 8 * v28);
      if (v29)
      {
        v30 = *v29;
        if (*v29)
        {
          if (v27.u32[0] < 2uLL)
          {
            while (1)
            {
              v32 = v30[1];
              if (v32 == v25)
              {
                if (*((_DWORD *)v30 + 4) == (_DWORD)v25)
                  goto LABEL_97;
              }
              else if ((v32 & (v26 - 1)) != v28)
              {
                goto LABEL_59;
              }
              v30 = (_QWORD *)*v30;
              if (!v30)
                goto LABEL_59;
            }
          }
          do
          {
            v31 = v30[1];
            if (v31 == v25)
            {
              if (*((_DWORD *)v30 + 4) == (_DWORD)v25)
                goto LABEL_97;
            }
            else
            {
              if (v31 >= v26)
                v31 %= v26;
              if (v31 != v28)
                break;
            }
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
      }
    }
    else
    {
      v28 = 0xAAAAAAAAAAAAAAAALL;
    }
LABEL_59:
    v30 = operator new(0x20uLL);
    *v30 = 0;
    v30[1] = v25;
    *((_DWORD *)v30 + 4) = *((_DWORD *)v6 + 4);
    *((_WORD *)v30 + 10) = -1;
    *(_QWORD *)((char *)v30 + 22) = 0;
    *((_WORD *)v30 + 15) = 0;
    v33 = (float)(unint64_t)(*(_QWORD *)(v4 + 168) + 1);
    v34 = *(float *)(v4 + 176);
    if (v26 && (float)(v34 * (float)v26) >= v33)
    {
      v25 = v28;
    }
    else
    {
      v35 = (v26 & (v26 - 1)) != 0;
      if (v26 < 3)
        v35 = 1;
      v36 = v35 | (2 * v26);
      v37 = vcvtps_u32_f32(v33 / v34);
      if (v36 <= v37)
        prime = v37;
      else
        prime = v36;
      if (prime == 1)
      {
        prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        prime = std::__next_prime(prime);
        v26 = *(_QWORD *)(v4 + 152);
      }
      if (prime > v26)
        goto LABEL_72;
      if (prime < v26)
      {
        v39 = vcvtps_u32_f32((float)*(unint64_t *)(v4 + 168) / *(float *)(v4 + 176));
        if (v26 < 3 || (v40 = (uint8x8_t)vcnt_s8((int8x8_t)v26), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
        {
          v39 = std::__next_prime(v39);
        }
        else
        {
          v41 = 1 << -(char)__clz(v39 - 1);
          if (v39 >= 2)
            v39 = v41;
        }
        if (prime <= v39)
          prime = v39;
        if (prime < v26)
LABEL_72:
          std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(v4 + 144, prime);
      }
      v26 = *(_QWORD *)(v4 + 152);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v26 <= v25)
          v25 %= v26;
      }
      else
      {
        v25 = ((_DWORD)v26 - 1) & v25;
      }
    }
    v42 = *v12;
    v43 = *(_QWORD **)(*v12 + 8 * v25);
    if (v43)
    {
      *v30 = *v43;
    }
    else
    {
      *v30 = *v131;
      *v131 = v30;
      *(_QWORD *)(v42 + 8 * v25) = v131;
      if (!*v30)
      {
LABEL_96:
        ++*(_QWORD *)(v4 + 168);
LABEL_97:
        *((_WORD *)v30 + 10) = v133;
        v8 = 2;
        *((_WORD *)v30 + 11) = 2;
        *((_WORD *)v30 + 12) = v134;
        *((_WORD *)v30 + 13) = v9;
        *((_WORD *)v30 + 14) = v10;
        *((_WORD *)v30 + 15) = v11;
        v45 = *(_QWORD *)(v4 + 72);
        if (v45)
        {
          v169 = 0;
          v170 = 0;
          v167 = 0;
          v168 = 0;
          v46 = operator new(0xCuLL);
          v168 = v46 + 6;
          v169 = v46 + 6;
          *v46 = v133;
          v46[1] = 2;
          v46[2] = v134;
          v46[3] = v9;
          v46[4] = v10;
          v46[5] = v11;
          v167 = v46;
          (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v45 + 48))(v45, &v170, &v167);
          if (v167)
          {
            v168 = v167;
            operator delete(v167);
          }
          if (v170)
            CFRelease(v170);
          v7 = 1;
          v8 = 2;
        }
        else
        {
LABEL_6:
          v7 = 1;
        }
        goto LABEL_7;
      }
      v44 = *(_QWORD *)(*v30 + 8);
      if ((v26 & (v26 - 1)) != 0)
      {
        if (v44 >= v26)
          v44 %= v26;
      }
      else
      {
        v44 &= v26 - 1;
      }
      v43 = (_QWORD *)(*v12 + 8 * v44);
    }
    *v43 = v30;
    goto LABEL_96;
  }
  v11 = 0;
  v10 = 0;
  v9 = 0;
  v8 = 0;
  v7 = 0;
  v133 = -1;
  v134 = 0;
LABEL_105:
  v129 = v8;
  v130 = v11;
  v48 = (_QWORD *)(v4 + 160);
  v49 = *(uint64_t **)(v4 + 160);
  if (!v49)
  {
    v50 = 0;
    if ((a2 & 1) == 0)
      goto LABEL_206;
    goto LABEL_211;
  }
  v132 = v10;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  do
  {
    if (((_DWORD)v49[2] & a2) == 0)
    {
      v54 = *(NSObject **)(v4 + 40);
      v55 = os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT);
      if (v55)
      {
        ctu::iokit::asString();
        v56 = &__p;
        if (v142 < 0)
          v56 = __p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
        _os_log_impl(&dword_1BF566000, v54, OS_LOG_TYPE_DEFAULT, "#I Power Source detached: %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v142) < 0)
          operator delete(__p);
      }
      v57 = v9;
      *((_WORD *)v49 + 11) = 1;
      capabilities::abs::supportedSARFeatures((capabilities::abs *)v55);
      if (capabilities::abs::operator&())
        v58 = 2;
      else
        v58 = 1;
      *((_WORD *)v49 + 15) = v58;
      if (v53 < v52)
      {
        *(_DWORD *)v53 = *((_DWORD *)v49 + 4);
        v59 = (uint64_t)(v53 + 4);
        if (!*(_QWORD *)(v4 + 72))
          goto LABEL_107;
        goto LABEL_136;
      }
      v60 = (v53 - v51) >> 2;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 62)
        std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
      if ((v52 - v51) >> 1 > v61)
        v61 = (v52 - v51) >> 1;
      if ((unint64_t)(v52 - v51) >= 0x7FFFFFFFFFFFFFFCLL)
        v62 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v62 = v61;
      if (v62)
      {
        if (v62 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v63 = operator new(4 * v62);
        v50 = &v63[4 * v60];
        *(_DWORD *)v50 = *((_DWORD *)v49 + 4);
        v59 = (uint64_t)(v50 + 4);
        v64 = v53 - v51;
        if (v53 != v51)
        {
LABEL_130:
          v65 = v64 - 4;
          if (v65 < 0xBC
            || (v70 = (v53 - 4 - v51) & 0xFFFFFFFFFFFFFFFCLL, &v63[v53 - v51 - 4 - v70] > &v63[v53 - v51 - 4])
            || &v53[-v70 - 4] > v53 - 4
            || (unint64_t)(v51 - v63) < 0x20)
          {
            v66 = v53;
            v9 = v57;
          }
          else
          {
            v71 = (v65 >> 2) + 1;
            v72 = 4 * (v71 & 0x7FFFFFFFFFFFFFF8);
            v66 = &v53[-v72];
            v50 -= v72;
            v73 = &v63[4 * v60 - 16];
            v74 = v53 - 16;
            v75 = v71 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v76 = *(_OWORD *)v74;
              *(v73 - 1) = *((_OWORD *)v74 - 1);
              *v73 = v76;
              v73 -= 2;
              v74 -= 32;
              v75 -= 8;
            }
            while (v75);
            v9 = v57;
            if (v71 == (v71 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_133:
              v52 = &v63[4 * v62];
              if (!v51)
                goto LABEL_135;
              goto LABEL_134;
            }
          }
          do
          {
            v67 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *((_DWORD *)v50 - 1) = v67;
            v50 -= 4;
          }
          while (v66 != v51);
          goto LABEL_133;
        }
      }
      else
      {
        v63 = 0;
        v50 = (char *)(4 * v60);
        *(_DWORD *)(4 * v60) = *((_DWORD *)v49 + 4);
        v59 = 4 * v60 + 4;
        v64 = v53 - v51;
        if (v53 != v51)
          goto LABEL_130;
      }
      v9 = v57;
      v52 = &v63[4 * v62];
      if (!v51)
      {
LABEL_135:
        v51 = v50;
        if (!*(_QWORD *)(v4 + 72))
        {
LABEL_107:
          v7 = 1;
          v53 = (char *)v59;
          goto LABEL_108;
        }
LABEL_136:
        v166 = v171;
        if (v171)
          CFRetain(v171);
        __p = *(void **)((char *)v49 + 20);
        LODWORD(v142) = *((_DWORD *)v49 + 7);
        v163 = 0;
        v164 = 0;
        v165 = 0;
        v68 = operator new(0xCuLL);
        v164 = v68 + 3;
        v165 = (char *)(v68 + 3);
        v68[2] = v142;
        *(_QWORD *)v68 = __p;
        v163 = v68;
        v69 = *(_QWORD *)(v4 + 72);
        if (!v69)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v69 + 48))(v69, &v166, &v163);
        if (v163)
        {
          v164 = v163;
          operator delete(v163);
        }
        if (v166)
          CFRelease(v166);
        goto LABEL_107;
      }
LABEL_134:
      operator delete(v51);
      goto LABEL_135;
    }
LABEL_108:
    v49 = (uint64_t *)*v49;
  }
  while (v49);
  if (v50 == v53)
  {
    v10 = v132;
    v48 = (_QWORD *)(v4 + 160);
    if ((a2 & 1) == 0)
      goto LABEL_206;
    goto LABEL_211;
  }
  v77 = *(int8x8_t *)(v4 + 152);
  v10 = v132;
  v48 = (_QWORD *)(v4 + 160);
  if (v77)
  {
    v78 = v50;
LABEL_157:
    v79 = *(unsigned int *)v78;
    v80 = (uint8x8_t)vcnt_s8(v77);
    v80.i16[0] = vaddlv_u8(v80);
    if (v80.u32[0] > 1uLL)
    {
      v81 = *(unsigned int *)v78;
      if (*(_QWORD *)&v77 <= v79)
        v81 = v79 % *(_QWORD *)&v77;
    }
    else
    {
      v81 = (v77.i32[0] - 1) & v79;
    }
    v82 = *(_QWORD *)(v4 + 144);
    v83 = *(_DWORD ***)(v82 + 8 * v81);
    if (v83)
    {
      v84 = *v83;
      if (*v83)
      {
        v85 = *(_QWORD *)&v77 - 1;
        if (v80.u32[0] < 2uLL)
        {
          while (1)
          {
            v86 = *((_QWORD *)v84 + 1);
            if (v86 == v79)
            {
              if (v84[4] == (_DWORD)v79)
                goto LABEL_177;
            }
            else if ((v86 & v85) != v81)
            {
              goto LABEL_204;
            }
            v84 = *(_DWORD **)v84;
            if (!v84)
              goto LABEL_204;
          }
        }
        do
        {
          v87 = *((_QWORD *)v84 + 1);
          if (v87 == v79)
          {
            if (v84[4] == (_DWORD)v79)
            {
LABEL_177:
              if (v80.u32[0] > 1uLL)
              {
                if (*(_QWORD *)&v77 <= v79)
                  v79 %= *(_QWORD *)&v77;
              }
              else
              {
                v79 &= v85;
              }
              v88 = *(_QWORD **)(v82 + 8 * v79);
              do
              {
                v89 = v88;
                v88 = (_QWORD *)*v88;
              }
              while (v88 != (_QWORD *)v84);
              if (v89 == (_QWORD *)(v4 + 160))
                goto LABEL_194;
              v90 = v89[1];
              if (v80.u32[0] > 1uLL)
              {
                if (v90 >= *(_QWORD *)&v77)
                  v90 %= *(_QWORD *)&v77;
              }
              else
              {
                v90 &= v85;
              }
              if (v90 != v79)
              {
LABEL_194:
                if (!*(_QWORD *)v84)
                  goto LABEL_195;
                v91 = *(_QWORD *)(*(_QWORD *)v84 + 8);
                if (v80.u32[0] > 1uLL)
                {
                  if (v91 >= *(_QWORD *)&v77)
                    v91 %= *(_QWORD *)&v77;
                }
                else
                {
                  v91 &= v85;
                }
                if (v91 != v79)
LABEL_195:
                  *(_QWORD *)(v82 + 8 * v79) = 0;
              }
              v92 = *(_QWORD *)v84;
              if (*(_QWORD *)v84)
              {
                v93 = *(_QWORD *)(v92 + 8);
                if (v80.u32[0] > 1uLL)
                {
                  if (v93 >= *(_QWORD *)&v77)
                    v93 %= *(_QWORD *)&v77;
                }
                else
                {
                  v93 &= v85;
                }
                if (v93 != v79)
                {
                  *(_QWORD *)(*(_QWORD *)(v4 + 144) + 8 * v93) = v89;
                  v92 = *(_QWORD *)v84;
                }
              }
              *v89 = v92;
              *(_QWORD *)v84 = 0;
              --*(_QWORD *)(v4 + 168);
              operator delete(v84);
              break;
            }
          }
          else
          {
            if (v87 >= *(_QWORD *)&v77)
              v87 %= *(_QWORD *)&v77;
            if (v87 != v81)
              break;
          }
          v84 = *(_DWORD **)v84;
        }
        while (v84);
      }
    }
LABEL_204:
    while (1)
    {
      v78 += 4;
      if (v78 == v53)
        break;
      v77 = *(int8x8_t *)(v4 + 152);
      if (v77)
        goto LABEL_157;
    }
  }
  if ((a2 & 1) != 0)
  {
LABEL_211:
    if (*(_QWORD *)(v4 + 168))
    {
      v104 = *(NSObject **)(v4 + 40);
      v105 = os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v105)
      {
        ctu::iokit::asString();
        v106 = v142 >= 0 ? &__p : (void **)__p;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v106;
        _os_log_impl(&dword_1BF566000, v104, OS_LOG_TYPE_DEFAULT, "#I Power Source: %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(v142) < 0)
          operator delete(__p);
      }
      v107 = (_QWORD *)*v48;
      if (*v48)
      {
        do
        {
          while (((_DWORD)v107[2] & a2) != 0)
          {
            v107 = (_QWORD *)*v107;
            if (!v107)
              goto LABEL_207;
          }
          *((_WORD *)v107 + 11) = 1;
          capabilities::abs::supportedSARFeatures((capabilities::abs *)v105);
          v105 = capabilities::abs::operator&();
          if ((_DWORD)v105)
            v108 = 2;
          else
            v108 = 1;
          *((_WORD *)v107 + 15) = v108;
          if (*(_QWORD *)(v4 + 72))
          {
            v162 = v171;
            if (v171)
              CFRetain(v171);
            __p = *(void **)((char *)v107 + 20);
            LODWORD(v142) = *((_DWORD *)v107 + 7);
            v159 = 0;
            v160 = 0;
            v161 = 0;
            v109 = operator new(0xCuLL);
            v160 = v109 + 3;
            v161 = (char *)(v109 + 3);
            v109[2] = v142;
            *(_QWORD *)v109 = __p;
            v159 = v109;
            v110 = *(_QWORD *)(v4 + 72);
            if (!v110)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v110 + 48))(v110, &v162, &v159);
            if (v159)
            {
              v160 = v159;
              operator delete(v159);
            }
            v105 = (uint64_t)v162;
            if (v162)
              CFRelease(v162);
          }
          v107 = (_QWORD *)*v107;
        }
        while (v107);
      }
      if (*(_QWORD *)(v4 + 168))
      {
        v111 = (_QWORD *)*v48;
        if (*v48)
        {
          do
          {
            v112 = (_QWORD *)*v111;
            operator delete(v111);
            v111 = v112;
          }
          while (v112);
        }
        *(_QWORD *)(v4 + 160) = 0;
        v113 = *(_QWORD *)(v4 + 152);
        if (v113)
        {
          for (i = 0; i != v113; ++i)
            *(_QWORD *)(*(_QWORD *)(v4 + 144) + 8 * i) = 0;
        }
        *(_QWORD *)(v4 + 168) = 0;
      }
    }
    goto LABEL_281;
  }
LABEL_206:
  if ((v7 & 1) == 0)
  {
LABEL_207:
    v94 = v9;
    *(_QWORD *)&v95 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v95 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v148 = 0xAAAAAAAAAAAAAAAALL;
    v158 = v95;
    v157 = v95;
    v156 = v95;
    v155 = v95;
    v154 = v95;
    v153 = v95;
    v152 = v95;
    v151 = v95;
    v150 = v95;
    v147 = v95;
    v146 = v95;
    v145 = v95;
    v144 = v95;
    v143 = v95;
    v142 = v95;
    v96 = MEMORY[0x1E0DE4FE0];
    v97 = MEMORY[0x1E0DE4FE0] + 64;
    v149 = MEMORY[0x1E0DE4FE0] + 64;
    v98 = MEMORY[0x1E0DE4F60];
    v99 = *(void **)(MEMORY[0x1E0DE4F60] + 16);
    __p = *(void **)(MEMORY[0x1E0DE4F60] + 8);
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = v99;
    v100 = (std::ios_base *)((char *)&__p + *((_QWORD *)__p - 3));
    std::ios_base::init(v100, &v142);
    v100[1].__vftable = 0;
    v100[1].__fmtflags_ = -1;
    __p = (void *)(v96 + 24);
    v149 = v97;
    std::streambuf::basic_streambuf();
    v101 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v142 = MEMORY[0x1E0DE4FB8] + 16;
    v146 = 0u;
    v147 = 0u;
    LODWORD(v148) = 16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unexpected Power Source event: ", 31);
    std::ostream::operator<<();
    memset(&buf, 170, sizeof(buf));
    if ((v148 & 0x10) != 0)
    {
      v115 = *((_QWORD *)&v147 + 1);
      if (*((_QWORD *)&v147 + 1) < (unint64_t)v145)
      {
        *((_QWORD *)&v147 + 1) = v145;
        v115 = v145;
      }
      v116 = v101;
      v117 = (const void *)*((_QWORD *)&v144 + 1);
      v102 = v115 - *((_QWORD *)&v144 + 1);
      if ((unint64_t)(v115 - *((_QWORD *)&v144 + 1)) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_258;
    }
    else
    {
      if ((v148 & 8) == 0)
      {
        v102 = 0;
        *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
        p_buf = &buf;
        goto LABEL_254;
      }
      v116 = v101;
      v117 = (const void *)v143;
      v102 = v144 - v143;
      if ((_QWORD)v144 - (_QWORD)v143 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_258:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v102 >= 0x17)
    {
      v118 = v94;
      v119 = (v102 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v102 | 7) != 0x17)
        v119 = v102 | 7;
      v120 = v119 + 1;
      p_buf = (std::string *)operator new(v119 + 1);
      buf.__r_.__value_.__l.__size_ = v102;
      buf.__r_.__value_.__r.__words[2] = v120 | 0x8000000000000000;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
      v94 = v118;
      v98 = MEMORY[0x1E0DE4F60];
    }
    else
    {
      *((_BYTE *)&buf.__r_.__value_.__s + 23) = v102;
      p_buf = &buf;
      if (!v102)
        goto LABEL_253;
    }
    memmove(p_buf, v117, v102);
LABEL_253:
    v101 = v116;
LABEL_254:
    p_buf->__r_.__value_.__s.__data_[v102] = 0;
    v121 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
    {
      v122 = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v122 = (std::string *)buf.__r_.__value_.__r.__words[0];
      *(_DWORD *)v174 = 136315138;
      *(_QWORD *)&v174[4] = v122;
      _os_log_error_impl(&dword_1BF566000, v121, OS_LOG_TYPE_ERROR, "%s", v174, 0xCu);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_262;
LABEL_256:
      v140 = buf;
    }
    else
    {
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_256;
LABEL_262:
      std::string::__init_copy_ctor_external(&v140, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *, uint64_t))(*(_QWORD *)v4 + 48))(v174, v4, &v140, 5);
    v123 = v171;
    v124 = *(const void **)v174;
    v171 = *(CFTypeRef *)v174;
    *(_QWORD *)v174 = 0;
    if (v123)
    {
      CFRelease(v123);
      if (*(_QWORD *)v174)
        CFRelease(*(CFTypeRef *)v174);
    }
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    if (*(_QWORD *)(v4 + 72))
    {
      cf = v124;
      if (v124)
        CFRetain(v124);
      v125 = operator new(0xCuLL);
      v137 = v125 + 6;
      v138 = v125 + 6;
      *v125 = v133;
      v125[1] = v129;
      v125[2] = v134;
      v125[3] = v94;
      v125[4] = v10;
      v125[5] = v130;
      v136 = v125;
      v126 = *(_QWORD *)(v4 + 72);
      if (!v126)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v126 + 48))(v126, &cf, &v136);
      if (v136)
      {
        v137 = v136;
        operator delete(v136);
      }
      if (cf)
        CFRelease(cf);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    __p = *(void **)v98;
    *(void **)((char *)&__p + *((_QWORD *)__p - 3)) = *(void **)(v98 + 24);
    *(_QWORD *)&v142 = v101 + 16;
    if (SBYTE7(v147) < 0)
      operator delete((void *)v146);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3B8C364](&v149);
  }
LABEL_281:
  if (v50)
    operator delete(v50);
  if (v171)
    CFRelease(v171);
  v47 = v173;
  if (v173)
  {
LABEL_286:
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v128 = __ldaxr(p_shared_owners);
    while (__stlxr(v128 - 1, p_shared_owners));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
}

void sub_1BF6D5640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62)
{
  void *v62;
  uint64_t v63;

  if (*(char *)(v63 - 105) < 0)
    operator delete(*(void **)(v63 - 128));
  std::ostringstream::~ostringstream((uint64_t)&a28);
  if (v62)
    operator delete(v62);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v63 - 168));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v63 - 160);
  _Unwind_Resume(a1);
}

void ___ZN24IOKitAccessoriesDelegate5startEv_block_invoke_6(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  NSObject *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  size_t v21;
  std::string::size_type v22;
  std::string *p_dst;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  std::string *v29;
  CFTypeRef v30;
  char *v31;
  uint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  void *v35;
  void *v36;
  char *v37;
  CFTypeRef v38;
  std::string v39;
  std::string __dst;
  CFTypeRef cf;
  std::__shared_weak_count *v43;
  _BYTE v44[12];
  _BYTE buf[24];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 __p;
  __int128 v50;
  _OWORD v51[10];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = (_QWORD *)a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v43 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v10 = v6;
LABEL_52:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v34 = __ldaxr(p_shared_owners);
    while (__stlxr(v34 - 1, p_shared_owners));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  cf = 0;
  if (a2 < 4)
  {
    v7 = 0x4000300010002uLL >> (16 * a2);
    v8 = v5[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = ctu::iokit::asString();
      _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Display Cover event: %s", buf, 0xCu);
    }
    v9 = 0;
    if (!v5[9])
      goto LABEL_49;
LABEL_42:
    v38 = v9;
    if (v9)
      CFRetain(v9);
    v31 = (char *)operator new(0xCuLL);
    v36 = v31 + 12;
    v37 = v31 + 12;
    *(_WORD *)v31 = 13;
    *((_WORD *)v31 + 1) = v7;
    *(_QWORD *)(v31 + 4) = 0;
    v35 = v31;
    v32 = v5[9];
    if (!v32)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v32 + 48))(v32, &v38, &v35);
    if (v35)
    {
      v36 = v35;
      operator delete(v35);
    }
    if (v38)
      CFRelease(v38);
    goto LABEL_49;
  }
  *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v51[0] = v11;
  v51[9] = v11;
  v51[8] = v11;
  v51[7] = v11;
  v51[6] = v11;
  v51[5] = v11;
  v51[4] = v11;
  v51[3] = v11;
  v51[2] = v11;
  v51[1] = v11;
  v50 = v11;
  __p = v11;
  v48 = v11;
  v47 = v11;
  v46 = v11;
  *(_OWORD *)&buf[8] = v11;
  v12 = MEMORY[0x1E0DE4FE0];
  v13 = MEMORY[0x1E0DE4FE0] + 64;
  v14 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *((_QWORD *)&v51[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)buf = v15;
  *(_QWORD *)&buf[*(_QWORD *)(v15 - 24)] = v16;
  v17 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v17, &buf[8]);
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v12 + 24;
  *((_QWORD *)&v51[0] + 1) = v13;
  std::streambuf::basic_streambuf();
  v18 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v50 = 0u;
  LODWORD(v51[0]) = 16;
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Unexpected Display Cover event: ", 32);
  v20 = (const char *)ctu::iokit::asString();
  v21 = strlen(v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  memset(&__dst, 170, sizeof(__dst));
  if ((v51[0] & 0x10) != 0)
  {
    v24 = *((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1) < (unint64_t)v48)
    {
      *((_QWORD *)&v50 + 1) = v48;
      v24 = v48;
    }
    v25 = (const void *)*((_QWORD *)&v47 + 1);
    v22 = v24 - *((_QWORD *)&v47 + 1);
    if ((unint64_t)(v24 - *((_QWORD *)&v47 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v51[0] & 8) == 0)
    {
      v22 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_23;
    }
    v25 = (const void *)v46;
    v22 = v47 - v46;
    if ((_QWORD)v47 - (_QWORD)v46 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v22 >= 0x17)
  {
    v26 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v26 = v22 | 7;
    v27 = v26 + 1;
    p_dst = (std::string *)operator new(v26 + 1);
    __dst.__r_.__value_.__l.__size_ = v22;
    __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_22;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v22;
  p_dst = &__dst;
  if (v22)
LABEL_22:
    memmove(p_dst, v25, v22);
LABEL_23:
  p_dst->__r_.__value_.__s.__data_[v22] = 0;
  v28 = v5[5];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    v29 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)v44 = 136315138;
    *(_QWORD *)&v44[4] = v29;
    _os_log_error_impl(&dword_1BF566000, v28, OS_LOG_TYPE_ERROR, "%s", v44, 0xCu);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_31:
    std::string::__init_copy_ctor_external(&v39, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_31;
LABEL_25:
  v39 = __dst;
LABEL_32:
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, std::string *, uint64_t))(*v5 + 48))(v44, v5, &v39, 5);
  v30 = cf;
  v9 = *(const void **)v44;
  cf = *(CFTypeRef *)v44;
  *(_QWORD *)v44 = 0;
  if (v30)
  {
    CFRelease(v30);
    if (*(_QWORD *)v44)
      CFRelease(*(CFTypeRef *)v44);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *(_QWORD *)buf = *v14;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v14[3];
  *(_QWORD *)&buf[8] = v18 + 16;
  if (SBYTE7(v50) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364]((char *)v51 + 8);
  LOWORD(v7) = 0;
  if (v5[9])
    goto LABEL_42;
LABEL_49:
  if (v9)
    CFRelease(v9);
  v10 = v43;
  if (v43)
    goto LABEL_52;
}

void sub_1BF6D5CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a25 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a33);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a26);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayCoverState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void IOKitAccessoriesDelegate::stop(IOKitAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN24IOKitAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_11_7;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN24IOKitAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  uint8_t v9[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 0;
    v5 = (_QWORD *)ctu::iokit::Controller::stopPowerSourceNotifications(*(ctu::iokit::Controller **)(v1 + 88));
    if (*(_QWORD *)(v1 + 168))
    {
      v5 = *(_QWORD **)(v1 + 160);
      if (v5)
      {
        do
        {
          v6 = (_QWORD *)*v5;
          operator delete(v5);
          v5 = v6;
        }
        while (v6);
      }
      *(_QWORD *)(v1 + 160) = 0;
      v7 = *(_QWORD *)(v1 + 152);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
          *(_QWORD *)(*(_QWORD *)(v1 + 144) + 8 * i) = 0;
      }
      *(_QWORD *)(v1 + 168) = 0;
    }
    if (capabilities::abs::supportsDisplayCoverAccessory((capabilities::abs *)v5))
      ctu::iokit::Controller::stopDisplayCoverStateNotifications(*(ctu::iokit::Controller **)(v1 + 88));
  }
  else if (v4)
  {
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v9, 2u);
  }
}

void std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate*)#1}::operator() const(IOKitAccessoriesDelegate*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<IOKitAccessoriesDelegate *,std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate *)#1},std::allocator<IOKitAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegate"
                     "EENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessor"
                                "iesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI24IOKitAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<IOKitAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOKitAccessoriesDelegate>(IOKitAccessoriesDelegate*)::{lambda(IOKitAccessoriesDelegate*)#1}::operator() const(IOKitAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__emplace_unique_key_args<ctu::iokit::TelephonyIOKitPowerSource,std::piecewise_construct_t const&,std::tuple<ctu::iokit::TelephonyIOKitPowerSource&&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t prime;
  unint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;

  v5 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = ((_DWORD)v6 - 1) & a2;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v7.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == a2)
            {
              if (*((_DWORD *)v10 + 4) == a2)
                return v10;
            }
            else if ((v12 & (v6 - 1)) != v8)
            {
              goto LABEL_22;
            }
            v10 = (_QWORD *)*v10;
            if (!v10)
              goto LABEL_22;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v11 >= v6)
              v11 %= v6;
            if (v11 != v8)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_22:
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *((_WORD *)v10 + 10) = -1;
  *(_QWORD *)((char *)v10 + 22) = 0;
  *((_WORD *)v10 + 15) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (v6 && (float)(v14 * (float)v6) >= v13)
  {
    v5 = v8;
  }
  else
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = v17;
    else
      prime = v16;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v6 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v6)
      goto LABEL_35;
    if (prime < v6)
    {
      v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v6 < 3 || (v20 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        v19 = std::__next_prime(v19);
      }
      else
      {
        v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2)
          v19 = v21;
      }
      if (prime <= v19)
        prime = v19;
      if (prime < v6)
LABEL_35:
        std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(a1, prime);
    }
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v5 %= v6;
    }
    else
    {
      v5 = ((_DWORD)v6 - 1) & v5;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v5);
  if (v23)
  {
    *v10 = *v23;
LABEL_58:
    *v23 = v10;
    goto LABEL_59;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    v24 = *(_QWORD *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v24 >= v6)
        v24 %= v6;
    }
    else
    {
      v24 &= v6 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1BF6D62EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

uint64_t __cxx_global_var_init_10()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy, &ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void AntennaModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  NSObject *v4;
  void *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36[2];
  uint64_t block;
  uint64_t v38;
  void (*v39)(uint64_t);
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  v4 = dispatch_workloop_create("antenna.wl");
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0xC0uLL);
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v36[0] = v6;
  v36[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v35 = v4;
  if (v4)
    dispatch_retain(v4);
  AntennaModule::AntennaModule((uint64_t)v5, v36, &v35);
  *a2 = (uint64_t)v5;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E791F4A0;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  a2[1] = (uint64_t)v10;
  v12 = (std::__shared_weak_count *)*((_QWORD *)v5 + 16);
  if (v12)
  {
    if (v12->__shared_owners_ != -1)
      goto LABEL_18;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    *((_QWORD *)v5 + 15) = v5;
    *((_QWORD *)v5 + 16) = v10;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v20 = (_QWORD *)*a2;
    if (!*(_QWORD *)(*a2 + 104))
      goto LABEL_34;
    goto LABEL_19;
  }
LABEL_18:
  v20 = (_QWORD *)*a2;
  if (!*(_QWORD *)(*a2 + 104))
    goto LABEL_34;
LABEL_19:
  v21 = (std::__shared_weak_count *)v20[16];
  if (!v21 || (v22 = v20[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  block = v22;
  v38 = (uint64_t)v23;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v20 + 7));
  v25 = v22 + 48;
  if (!v22)
    v25 = 0;
  v43 = v25;
  v44 = v24;
  block = 0;
  v38 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v26 = v44;
  if (v44)
  {
    v27 = (unint64_t *)&v44->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v30 = (unint64_t *)(v38 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_34:
  if (v4)
    dispatch_release(v4);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  v32 = *a2;
  v43 = v32;
  if (*(_QWORD *)(v32 + 144))
  {
    if ((dispatch_workloop_is_current() & 1) != 0)
    {
      AntennaModule::init(void)::$_0::operator()(v32);
      if (!v4)
        return;
      goto LABEL_41;
    }
    v33 = *(_QWORD *)(v32 + 144) == 0;
  }
  else
  {
    v33 = 1;
  }
  block = MEMORY[0x1E0C809B0];
  v38 = 0x40000000;
  v39 = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v40 = &__block_descriptor_tmp_32_3;
  v41 = v32 + 120;
  v42 = &v43;
  v34 = *(NSObject **)(v32 + 136);
  if (v33)
  {
    dispatch_sync(v34, &block);
    if (!v4)
      return;
LABEL_41:
    dispatch_release(v4);
    return;
  }
  dispatch_async_and_wait(v34, &block);
  if (v4)
    goto LABEL_41;
}

void sub_1BF6D67E4()
{
  __break(1u);
}

void sub_1BF6D682C()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF6D6860);
}

void sub_1BF6D683C()
{
  JUMPOUT(0x1BF6D6864);
}

void sub_1BF6D6848()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1BF6D687CLL);
  JUMPOUT(0x1BF6D68A8);
}

void AntennaModule::init(NSObject **this)
{
  _BOOL4 v2;
  NSObject *v3;
  AntennaModule *v4;
  _QWORD block[6];

  v4 = (AntennaModule *)this;
  if (this[18])
  {
    if ((dispatch_workloop_is_current() & 1) != 0)
    {
      AntennaModule::init(void)::$_0::operator()((uint64_t)this);
      return;
    }
    v2 = this[18] == 0;
  }
  else
  {
    v2 = 1;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_32_3;
  block[4] = this + 15;
  block[5] = &v4;
  v3 = this[17];
  if (v2)
    dispatch_sync(v3, block);
  else
    dispatch_async_and_wait(v3, block);
}

const char *AntennaModule::getName(AntennaModule *this)
{
  return "antenna.mod";
}

uint64_t AntennaModule::AntennaModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void (**v12)(AntennaModule *__hidden);
  const char *v13;
  unsigned __int8 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *initially_inactive;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE v25[16];
  _QWORD block[5];
  _BYTE v27[16];

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E791F0F0;
  *(_QWORD *)(a1 + 48) = &unk_1E791F160;
  v11 = *a3;
  if (v11)
  {
    dispatch_retain(v11);
    v12 = *(void (***)(AntennaModule *__hidden))a1;
  }
  else
  {
    v12 = off_1E791F0F0;
  }
  v13 = (const char *)((uint64_t (*)(uint64_t))v12[2])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v25, "com.apple.telephony.abm", v13);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v16 = GetABMLogServer(void)::sLogServer;
    v15 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v16 = GetABMLogServer(void)::sLogServer;
    v15 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
LABEL_17:
  if (v11)
    dispatch_retain(v11);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v20 = dispatch_queue_create_with_target_V2("antenna.mod", initially_inactive, v11);
  dispatch_set_qos_class_floor(v20, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v20);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v20;
  if (v20)
    dispatch_retain(v20);
  *(_QWORD *)(a1 + 144) = v11;
  if (v11)
    dispatch_retain(v11);
  if (v20)
    dispatch_release(v20);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)(a1 + 48) = off_1E791F460;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 112) = v15;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v27);
    *(_QWORD *)(a1 + 48) = off_1E791F4F0;
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v27);
    *(_QWORD *)(a1 + 48) = off_1E791F4F0;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v25);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)a1 = off_1E791F0F0;
  *(_QWORD *)(a1 + 48) = &unk_1E791F160;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

void sub_1BF6D6CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  v16 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v3)
    dispatch_release(v3);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void AntennaModule::~AntennaModule(AntennaModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  std::__shared_weak_count *v17;
  __int16 v18[8];

  *(_QWORD *)this = off_1E791F0F0;
  *((_QWORD *)this + 6) = &unk_1E791F160;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", (uint8_t *)v18, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v6)
      goto LABEL_13;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 21);
    if (!v6)
      goto LABEL_13;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_13:
  v9 = (void **)*((_QWORD *)this + 19);
  if (v9)
  {
    do
    {
      v16 = (void **)*v9;
      if (*((char *)v9 + 31) < 0)
        operator delete(v9[1]);
      operator delete(v9);
      v9 = v16;
    }
    while (v16);
  }
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 6) = off_1E791F460;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v10 = *((_QWORD *)this + 18);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 17);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  *(_QWORD *)this = off_1E79228B8;
  v13 = *((_QWORD *)this + 3);
  if (v13)
  {
    v14 = *((_QWORD *)this + 4);
    v15 = (void *)*((_QWORD *)this + 3);
    if (v14 != v13)
    {
      do
      {
        if (*(char *)(v14 - 1) < 0)
          operator delete(*(void **)(v14 - 24));
        v14 -= 24;
      }
      while (v14 != v13);
      v15 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v13;
    operator delete(v15);
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
}

{
  void *v1;

  AntennaModule::~AntennaModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'AntennaModule::~AntennaModule(AntennaModule *this)
{
  AntennaModule::~AntennaModule((AntennaModule *)((char *)this - 48));
}

{
  void *v1;

  AntennaModule::~AntennaModule((AntennaModule *)((char *)this - 48));
  operator delete(v1);
}

_WORD *AntennaModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _WORD *v3;
  _WORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(2uLL);
  *a1 = v3;
  *v3 = 770;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void AntennaModule::shutdown(uint64_t a1, int a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t *v6;
  NSObject *v7;
  _QWORD v8[5];
  dispatch_group_t object;
  _QWORD v10[5];
  dispatch_group_t group;

  if (a2 != 3)
  {
    if (a2 != 2)
      return;
    v3 = (uint64_t *)(a1 + 120);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1174405120;
    v10[2] = ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
    v10[3] = &__block_descriptor_tmp_34;
    v4 = *a3;
    v10[4] = a1;
    group = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
    }
    ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v3, (uint64_t)v10);
    if (!group)
      return;
    dispatch_group_leave(group);
    v5 = group;
    if (!group)
      return;
LABEL_12:
    dispatch_release(v5);
    return;
  }
  v6 = (uint64_t *)(a1 + 120);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_5;
  v8[3] = &__block_descriptor_tmp_6_8;
  v7 = *a3;
  v8[4] = a1;
  object = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v6, (uint64_t)v8);
  if (object)
  {
    dispatch_group_leave(object);
    v5 = object;
    if (object)
      goto LABEL_12;
  }
}

void ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  antenna::Service::Internal *v1;

  v1 = **(antenna::Service::Internal ***)(*(_QWORD *)(a1 + 32) + 176);
  if (v1)
    antenna::Service::Internal::shutdown(v1);
}

void ___ZN13AntennaModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke_5(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 168);
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void AntennaModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_15_6;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initialize(dispatch::group_session)::$_0>(AntennaModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  const void *v45;
  _QWORD v46[6];
  std::__shared_weak_count *v47;
  const void *v48;
  _QWORD v49[6];
  std::__shared_weak_count *v50;
  const void *v51;
  _QWORD aBlock[6];
  std::__shared_weak_count *v53;
  const void *v54;
  void **__dst;
  size_t v56;
  unint64_t v57;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB4E8];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB4E8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v56 = v12;
    v57 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v57) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_8_7;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v53 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v54 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v54);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFB1C8];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB1C8]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v56 = v21;
    v57 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v57) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v49[0] = v16;
  v49[1] = 1174405120;
  v49[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_9;
  v49[3] = &__block_descriptor_tmp_10_5;
  v49[4] = v1;
  v49[5] = v3;
  v50 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v49);
  v51 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v51);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFBAB8];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBAB8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v56 = v29;
    v57 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v57) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v46[0] = v16;
  v46[1] = 1174405120;
  v46[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_11;
  v46[3] = &__block_descriptor_tmp_12_9;
  v46[4] = v1;
  v46[5] = v3;
  v47 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v46);
  v48 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v48);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  v35 = (const void *)*MEMORY[0x1E0CFBAA8];
  v36 = strlen((const char *)*MEMORY[0x1E0CFBAA8]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v56 = v37;
    v57 = v40 | 0x8000000000000000;
    __dst = v38;
  }
  else
  {
    HIBYTE(v57) = v36;
    v38 = (void **)&__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v43[0] = v16;
  v43[1] = 1174405120;
  v43[2] = ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_13;
  v43[3] = &__block_descriptor_tmp_14_2;
  v43[4] = v1;
  v43[5] = v3;
  v44 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v43);
  v45 = v42;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v45);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v57) < 0)
    operator delete(__dst);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF6D7744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  std::__shared_weak_count *v39;
  const void *v40;
  uint64_t v41;
  std::__shared_weak_count *v43;

  if (v40)
    _Block_release(v40);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v41 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v43 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
          std::__shared_weak_count::__release_weak(a31);
        if (a39)
        {
          std::__shared_weak_count::__release_weak(a39);
          std::__shared_weak_count::__release_weak(v39);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v39);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v43);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v41 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v41 - 128));
  v43 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13AntennaModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__18weak_ptrI13AntennaModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_9(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_11(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_13(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void AntennaModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  const void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  NSObject *v51;
  const void *v52;
  size_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  NSObject *v60;
  _QWORD v61[6];
  std::__shared_weak_count *v62;
  void *v63;
  dispatch_object_t v64;
  void *v65[2];
  unint64_t v66;
  _QWORD v67[6];
  std::__shared_weak_count *v68;
  void *v69;
  dispatch_object_t v70;
  void *v71[2];
  unint64_t v72;
  _QWORD v73[6];
  std::__shared_weak_count *v74;
  void *v75;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v78;
  _QWORD aBlock[6];
  std::__shared_weak_count *v80;
  const void *v81;
  dispatch_object_t v82;
  void *v83[2];
  unint64_t v84;
  const void *v85;
  void *__dst[2];
  unint64_t v87;
  __int128 v88;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v87 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v87) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  v85 = 0;
  AppleBasebandManager::create();
  v8 = v88;
  v88 = 0uLL;
  v9 = this[21];
  *((_OWORD *)this + 10) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (!*((_QWORD *)&v88 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = v85;
    if (!v85)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = v85;
  if (v85)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v87) < 0)
    operator delete(__dst[0]);
  v16 = this[16];
  if (!v16 || (v17 = this[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFB9A8];
  v25 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = (void **)operator new(v28 + 1);
    v83[1] = v26;
    v84 = v29 | 0x8000000000000000;
    v83[0] = v27;
  }
  else
  {
    HIBYTE(v84) = v25;
    v27 = v83;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v30 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_17_4;
  aBlock[4] = this;
  aBlock[5] = v17;
  v80 = v19;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(aBlock);
  v33 = this[17];
  if (v33)
    dispatch_retain((dispatch_object_t)this[17]);
  v81 = v32;
  v82 = v33;
  AppleBasebandManager::setEventHandler();
  if (v82)
    dispatch_release(v82);
  if (v81)
    _Block_release(v81);
  if (SHIBYTE(v84) < 0)
    operator delete(v83[0]);
  v34 = (const void *)*MEMORY[0x1E0CFB9B0];
  v35 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = (void *)v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v37 = operator new(v38 + 1);
    __p[1] = v36;
    v78 = v39 | 0x8000000000000000;
    __p[0] = v37;
  }
  else
  {
    HIBYTE(v78) = v35;
    v37 = __p;
    if (!v35)
      goto LABEL_56;
  }
  memmove(v37, v34, (size_t)v36);
LABEL_56:
  *((_BYTE *)v36 + (_QWORD)v37) = 0;
  v73[0] = v30;
  v73[1] = 1174405120;
  v73[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_18;
  v73[3] = &__block_descriptor_tmp_19_5;
  v73[4] = this;
  v73[5] = v17;
  v74 = v19;
  do
    v40 = __ldxr(p_shared_weak_owners);
  while (__stxr(v40 + 1, p_shared_weak_owners));
  v41 = _Block_copy(v73);
  v42 = this[17];
  if (v42)
    dispatch_retain((dispatch_object_t)this[17]);
  v75 = v41;
  object = v42;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (v75)
    _Block_release(v75);
  if (SHIBYTE(v78) < 0)
    operator delete(__p[0]);
  v43 = (const void *)*MEMORY[0x1E0CFBD68];
  v44 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = operator new(v47 + 1);
    v71[1] = v45;
    v72 = v48 | 0x8000000000000000;
    v71[0] = v46;
  }
  else
  {
    HIBYTE(v72) = v44;
    v46 = v71;
    if (!v44)
      goto LABEL_74;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_74:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v67[0] = v30;
  v67[1] = 1174405120;
  v67[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_20;
  v67[3] = &__block_descriptor_tmp_21_5;
  v67[4] = this;
  v67[5] = v17;
  v68 = v19;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v67);
  v51 = this[17];
  if (v51)
    dispatch_retain((dispatch_object_t)this[17]);
  v69 = v50;
  v70 = v51;
  AppleBasebandManager::setEventHandler();
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  if (SHIBYTE(v72) < 0)
    operator delete(v71[0]);
  v52 = (const void *)*MEMORY[0x1E0CFB0B0];
  v53 = strlen((const char *)*MEMORY[0x1E0CFB0B0]);
  if (v53 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v54 = (void *)v53;
  if (v53 >= 0x17)
  {
    v56 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v56 = v53 | 7;
    v57 = v56 + 1;
    v55 = operator new(v56 + 1);
    v65[1] = v54;
    v66 = v57 | 0x8000000000000000;
    v65[0] = v55;
  }
  else
  {
    HIBYTE(v66) = v53;
    v55 = v65;
    if (!v53)
      goto LABEL_92;
  }
  memmove(v55, v52, (size_t)v54);
LABEL_92:
  *((_BYTE *)v54 + (_QWORD)v55) = 0;
  v61[0] = v30;
  v61[1] = 1174405120;
  v61[2] = ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_22;
  v61[3] = &__block_descriptor_tmp_23_7;
  v61[4] = this;
  v61[5] = v17;
  v62 = v19;
  do
    v58 = __ldxr(p_shared_weak_owners);
  while (__stxr(v58 + 1, p_shared_weak_owners));
  v59 = _Block_copy(v61);
  v60 = this[17];
  if (v60)
    dispatch_retain((dispatch_object_t)this[17]);
  v63 = v59;
  v64 = v60;
  AppleBasebandManager::setEventHandler();
  if (v64)
    dispatch_release(v64);
  if (v63)
    _Block_release(v63);
  if (SHIBYTE(v66) < 0)
    operator delete(v65[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[20]);
  if (v62)
    std::__shared_weak_count::__release_weak(v62);
  if (v68)
    std::__shared_weak_count::__release_weak(v68);
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  if (v80)
    std::__shared_weak_count::__release_weak(v80);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF6D845C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v56;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a30)
    std::__shared_weak_count::__release_weak(a30);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  v56 = *(std::__shared_weak_count **)(v54 - 208);
  if (v56)
    std::__shared_weak_count::__release_weak(v56);
  std::__shared_weak_count::__release_weak(v53);
  _Unwind_Resume(a1);
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  antenna::Service::Internal **v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = *(antenna::Service::Internal ***)(v3 + 176);
      if (v9)
      {
        if (*v9)
          antenna::Service::Internal::dumpState(*v9);
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_18(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  antenna::Service::Internal **v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = *(antenna::Service::Internal ***)(v3 + 176);
      if (v9)
      {
        if (*v9)
          antenna::Service::Internal::dumpState(*v9);
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_20(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  size_t v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  antenna::Service::Internal *v18;
  antenna::Service::Internal *v19;
  __int128 v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  _QWORD v24[2];
  unint64_t v25;
  uint64_t v26;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if (*(_QWORD *)(v5 + 176))
      {
        v25 = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v11 = (const void *)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v24[0] = 0xAAAAAAAAAAAAAAAALL;
          v24[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          __p[0] = 0;
          __p[1] = 0;
          v23 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v26, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8B878](&v26);
          v23 = v21;
          *(_OWORD *)__p = v20;
          if (v21 >= 0)
            v12 = HIBYTE(v21);
          else
            v12 = *((_QWORD *)&v20 + 1);
          if (v12 == strlen((const char *)*MEMORY[0x1E0CFB980])
            && (v21 >= 0 ? (v13 = __p) : (v13 = (void **)__p[0]), !memcmp(v13, (const void *)*MEMORY[0x1E0CFB980], v12)))
          {
            v19 = **(antenna::Service::Internal ***)(v5 + 176);
            if (v19)
              antenna::Service::Internal::startService(v19);
          }
          else if (v12 == strlen((const char *)*MEMORY[0x1E0CFBB68])
                 && (v21 >= 0 ? (v14 = __p) : (v14 = (void **)__p[0]),
                     !memcmp(v14, (const void *)*MEMORY[0x1E0CFBB68], v12))
                 || v12 == strlen((const char *)*MEMORY[0x1E0CFBD30])
                 && (v21 >= 0 ? (v15 = __p) : (v15 = (void **)__p[0]),
                     !memcmp(v15, (const void *)*MEMORY[0x1E0CFBD30], v12))
                 || v12 == strlen((const char *)*MEMORY[0x1E0CFB588])
                 && (v21 >= 0 ? (v16 = __p) : (v16 = (void **)__p[0]),
                     !memcmp(v16, (const void *)*MEMORY[0x1E0CFB588], v12))
                 || v12 == strlen((const char *)*MEMORY[0x1E0CFB988])
                 && (v21 >= 0 ? (v17 = __p) : (v17 = (void **)__p[0]),
                     !memcmp(v17, (const void *)*MEMORY[0x1E0CFB988], v12)))
          {
            v18 = **(antenna::Service::Internal ***)(v5 + 176);
            if (v18)
              antenna::Service::Internal::stopService(v18);
          }
          if (SHIBYTE(v23) < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B8B8B4](v24);
          v11 = (const void *)v25;
        }
        if (v11)
          CFRelease(v11);
      }
    }
  }
}

void ___ZN13AntennaModule25finishInitialization_syncEv_block_invoke_22(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  xpc_object_t v12;
  NSObject *v13;
  NSObject *v14;
  xpc_object_t value;
  int v16;
  antenna::Service *v17;
  xpc_object_t object[2];
  uint8_t buf[8];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      if (*(_QWORD *)(v5 + 176))
      {
        *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          ctu::cf_to_xpc((ctu *)0xAAAAAAAAAAAAAAAALL, v11);
          v12 = object[0];
          if (object[0] && MEMORY[0x1C3B8CD78](object[0]) == MEMORY[0x1E0C812F8])
            xpc_retain(object[0]);
          else
            v12 = xpc_null_create();
          xpc_release(object[0]);
          value = xpc_dictionary_get_value(v12, (const char *)*MEMORY[0x1E0CFB040]);
          object[0] = value;
          if (value)
            xpc_retain(value);
          else
            object[0] = xpc_null_create();
          v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          v17 = *(antenna::Service **)(v5 + 176);
          if (v16)
            antenna::Service::callActive(v17);
          else
            antenna::Service::callInactive(v17);
          xpc_release(v12);
        }
        else
        {
          v14 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            LOWORD(object[0]) = 0;
            _os_log_error_impl(&dword_1BF566000, v14, OS_LOG_TYPE_ERROR, "No input is given for voice call active state", (uint8_t *)object, 2u);
          }
        }
        if (*(_QWORD *)buf)
          CFRelease(*(CFTypeRef *)buf);
      }
      else
      {
        v13 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Antenna Service has not created yet.", buf, 2u);
        }
      }
    }
  }
}

void sub_1BF6D8BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, const void *a11)
{
  void *v11;

  xpc_release(v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  _Unwind_Resume(a1);
}

void AntennaModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::sleep(dispatch::group_session)::$_0>(AntennaModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AntennaModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::wake(dispatch::group_session)::$_0>(AntennaModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AntennaModule::setPreference_sync<std::string>(uint64_t a1, const void **a2, uint64_t a3)
{
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  const void *v20;
  char *v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  std::string __p;
  __int128 v29;
  std::string v30;
  uint8_t buf[24];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(_QWORD)xmmword_1ED70F248)
  {
    v7 = operator new(0x18uLL);
    MEMORY[0x1C3B8B8C0](v7, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v6 = operator new(0x20uLL);
    *v6 = &unk_1E7919E70;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    *(_QWORD *)&xmmword_1ED70F248 = v7;
    *((_QWORD *)&xmmword_1ED70F248 + 1) = v6;
    if (!v8)
    {
      *(_QWORD *)&v29 = v7;
      *((_QWORD *)&v29 + 1) = v6;
LABEL_10:
      v11 = v6 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v6 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
  LODWORD(v7) = xmmword_1ED70F248;
  v29 = xmmword_1ED70F248;
  if (*((_QWORD *)&xmmword_1ED70F248 + 1))
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (size_t)a2[1];
  v15 = v14 + 16;
  memset(buf, 170, sizeof(buf));
  if (v14 + 16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    *(_QWORD *)&buf[8] = v14 + 16;
    *(_QWORD *)&buf[16] = v18 | 0x8000000000000000;
    *(_QWORD *)buf = v19;
    *v19 = *(_OWORD *)"AntennaSetting::";
    v16 = (uint8_t *)(v19 + 1);
LABEL_23:
    if (v13 >= 0)
      v20 = a2;
    else
      v20 = *a2;
    memmove(v16, v20, v14);
    v16[v14] = 0;
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_27;
  }
  v16 = &buf[16];
  *(_QWORD *)&buf[16] = 0;
  buf[23] = v14 + 16;
  *(_OWORD *)buf = *(_OWORD *)"AntennaSetting::";
  if (v14)
    goto LABEL_23;
  buf[16] = 0;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
LABEL_19:
    __p = *(std::string *)a3;
    goto LABEL_28;
  }
LABEL_27:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_28:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v30 = __p;
  if ((buf[23] & 0x80u) == 0)
    v21 = (char *)buf;
  else
    v21 = *(char **)buf;
  v22 = ctu::cf::plist_adapter::set<std::string>((int)v7, (uint64_t)&v30, v21);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v30.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_36:
      if (((char)buf[23] & 0x80000000) == 0)
        goto LABEL_37;
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (((char)buf[23] & 0x80000000) == 0)
  {
LABEL_37:
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (!*((_QWORD *)&v29 + 1))
      goto LABEL_45;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(*(void **)buf);
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (!*((_QWORD *)&v29 + 1))
    goto LABEL_45;
LABEL_42:
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if ((v22 & 1) != 0)
      return;
    goto LABEL_46;
  }
LABEL_45:
  if ((v22 & 1) != 0)
    return;
LABEL_46:
  v26 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)"AntennaSetting::";
    v30.__r_.__value_.__r.__words[2] = 0x1000000000000000;
    if (*((char *)a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = (void *)*a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = &v30;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v27;
    _os_log_error_impl(&dword_1BF566000, v26, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
}

void sub_1BF6D91C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
    {
LABEL_3:
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1BF6D9298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::setPreference_sync<int>(uint64_t a1, const void **a2, int a3)
{
  _QWORD *v6;
  CFStringRef *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  const void *v20;
  void **v21;
  const __CFString *v22;
  const __CFAllocator *v23;
  CFNumberRef v24;
  const __CFString *v25;
  BOOL v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  void *v31;
  void *__p[3];
  _QWORD v33[2];
  int valuePtr;
  _BYTE buf[22];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(_QWORD)xmmword_1ED70F248)
  {
    v7 = (CFStringRef *)operator new(0x18uLL);
    MEMORY[0x1C3B8B8C0](v7, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v6 = operator new(0x20uLL);
    *v6 = &unk_1E7919E70;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    *(_QWORD *)&xmmword_1ED70F248 = v7;
    *((_QWORD *)&xmmword_1ED70F248 + 1) = v6;
    if (!v8)
    {
      *(_QWORD *)buf = v7;
      *(_QWORD *)&buf[8] = v6;
LABEL_10:
      v11 = v6 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v6 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
  v7 = (CFStringRef *)xmmword_1ED70F248;
  *(_OWORD *)buf = xmmword_1ED70F248;
  if (*((_QWORD *)&xmmword_1ED70F248 + 1))
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (size_t)a2[1];
  v15 = v14 + 16;
  memset(__p, 170, sizeof(__p));
  if (v14 + 16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v19 = (void **)operator new(v17 + 1);
    __p[1] = (void *)(v14 + 16);
    __p[2] = (void *)(v18 | 0x8000000000000000);
    __p[0] = v19;
    *(_OWORD *)v19 = *(_OWORD *)"AntennaSetting::";
    v16 = v19 + 2;
  }
  else
  {
    v16 = &__p[2];
    __p[2] = 0;
    HIBYTE(__p[2]) = v14 + 16;
    *(_OWORD *)__p = *(_OWORD *)"AntennaSetting::";
    if (!v14)
      goto LABEL_26;
  }
  if (v13 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  memmove(v16, v20, v14);
LABEL_26:
  *((_BYTE *)v16 + v14) = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v33, (const char *)v21);
  v22 = (const __CFString *)v33[0];
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = a3;
  v24 = CFNumberCreate(v23, kCFNumberIntType, &valuePtr);
  v33[1] = v24;
  if (v24)
  {
    v25 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(v22, v24, v7[1], v7[2], (CFStringRef)*MEMORY[0x1E0C9B250]);
    v26 = CFPreferencesSynchronize(v7[1], v7[2], v25) != 0;
    CFRelease(v24);
    MEMORY[0x1C3B8B878](v33);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_31;
  }
  else
  {
    v26 = 0;
    MEMORY[0x1C3B8B878](v33);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_31:
      v27 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_38;
      goto LABEL_35;
    }
  }
  operator delete(__p[0]);
  v27 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_38;
LABEL_35:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
    if (v26)
      return;
    goto LABEL_39;
  }
LABEL_38:
  if (v26)
    return;
LABEL_39:
  v30 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)__p = *(_OWORD *)"AntennaSetting::";
    __p[2] = (void *)0x1000000000000000;
    if (*((char *)a2 + 23) >= 0)
      v31 = a2;
    else
      v31 = (void *)*a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = __p;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v31;
    _os_log_error_impl(&dword_1BF566000, v30, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
}

void AntennaModule::setPreference_sync<unsigned int>(uint64_t a1, const void **a2, unsigned int a3)
{
  _QWORD *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  size_t v14;
  unint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  const void *v20;
  void **v21;
  BOOL v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  void *__p[3];
  const __CFString *v29;
  _BYTE buf[22];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(_QWORD)xmmword_1ED70F248)
  {
    v7 = operator new(0x18uLL);
    MEMORY[0x1C3B8B8C0](v7, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v6 = operator new(0x20uLL);
    *v6 = &unk_1E7919E70;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = v7;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    *(_QWORD *)&xmmword_1ED70F248 = v7;
    *((_QWORD *)&xmmword_1ED70F248 + 1) = v6;
    if (!v8)
    {
      *(_QWORD *)buf = v7;
      *(_QWORD *)&buf[8] = v6;
LABEL_10:
      v11 = v6 + 1;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v6 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
  v7 = (void *)xmmword_1ED70F248;
  *(_OWORD *)buf = xmmword_1ED70F248;
  if (*((_QWORD *)&xmmword_1ED70F248 + 1))
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v13 = *((char *)a2 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (size_t)a2[1];
  v15 = v14 + 16;
  memset(__p, 170, sizeof(__p));
  if (v14 + 16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v15 >= 0x17)
  {
    v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v17 = v15 | 7;
    v18 = v17 + 1;
    v19 = (void **)operator new(v17 + 1);
    __p[1] = (void *)(v14 + 16);
    __p[2] = (void *)(v18 | 0x8000000000000000);
    __p[0] = v19;
    *(_OWORD *)v19 = *(_OWORD *)"AntennaSetting::";
    v16 = v19 + 2;
  }
  else
  {
    v16 = &__p[2];
    __p[2] = 0;
    HIBYTE(__p[2]) = v14 + 16;
    *(_OWORD *)__p = *(_OWORD *)"AntennaSetting::";
    if (!v14)
      goto LABEL_26;
  }
  if (v13 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  memmove(v16, v20, v14);
LABEL_26:
  *((_BYTE *)v16 + v14) = 0;
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, (const char *)v21);
  v22 = ctu::cf::plist_adapter::set<unsigned int>((uint64_t)v7, a3, v29, 1);
  MEMORY[0x1C3B8B878](&v29);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v23 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_35;
  v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (v22)
      return;
  }
  else
  {
LABEL_35:
    if (v22)
      return;
  }
  v26 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_OWORD *)__p = *(_OWORD *)"AntennaSetting::";
    __p[2] = (void *)0x1000000000000000;
    if (*((char *)a2 + 23) >= 0)
      v27 = a2;
    else
      v27 = (void *)*a2;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = __p;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v27;
    _os_log_error_impl(&dword_1BF566000, v26, OS_LOG_TYPE_ERROR, "Failed to set property with %s%s", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
}

void AntennaModule::initializeProperty(AntennaModule *this)
{
  uint64_t *i;
  __int128 v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  char *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  AntennaModule *v14;
  std::string __p;
  std::string v16;

  for (i = (uint64_t *)*((_QWORD *)this + 19); i; i = (uint64_t *)*i)
  {
    memset(&v16, 170, sizeof(v16));
    if (*((char *)i + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)i[1], i[2]);
      v14 = this;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_8:
        std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        goto LABEL_9;
      }
    }
    else
    {
      v3 = *(_OWORD *)(i + 1);
      v16.__r_.__value_.__r.__words[2] = i[3];
      *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
      v14 = this;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_8;
    }
    __p = v16;
LABEL_9:
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v4 || (v5 = *((_QWORD *)this + 15), (v6 = std::__shared_weak_count::lock(v4)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v6;
    v8 = (char *)operator new(0x20uLL);
    *(_QWORD *)v8 = v14;
    *(std::string *)(v8 + 8) = __p;
    memset(&__p, 0, sizeof(__p));
    v9 = *((_QWORD *)this + 17);
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = operator new(0x18uLL);
    *v12 = v8;
    v12[1] = v5;
    v12[2] = v7;
    dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initializeProperty(void)::$_0>(AntennaModule::initializeProperty(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initializeProperty(void)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initializeProperty(void)::$_0>>)::{lambda(void *)#1}::__invoke);
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (v13)
    {
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_17;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_17:
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_21;
        continue;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
LABEL_21:
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1BF6D9C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AntennaModule::initializeProperty_sync(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  const void *v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  size_t v15;
  size_t v16;
  const void *v17;
  _QWORD *v18;
  uint64_t (***v19)(void *, int64_t);
  size_t v20;
  const void *v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  _QWORD *v27;
  uint64_t (***v28)(void *, int64_t);
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  size_t v32;
  _QWORD *v33;
  uint64_t (***v34)(void *, int64_t);
  const void *v35;
  size_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  size_t v46;
  unint64_t v47;
  __int128 *v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  const void *v52;
  const char *v53;
  const void *v54;
  int v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t v59;
  xpc_object_t v60;
  size_t v61;
  _QWORD *v62;
  uint64_t (***v63)(void *, int64_t);
  const void *v64;
  size_t v65;
  size_t v66;
  size_t v67;
  size_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int v74;
  size_t v75;
  unint64_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  const void *v81;
  const char *v82;
  const void *v83;
  int v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  void *v91;
  xpc_object_t v92;
  xpc_object_t v93;
  xpc_object_t v94;
  xpc_object_t v95;
  const char *v96;
  xpc_object_t v97;
  xpc_object_t v98;
  size_t v99;
  _QWORD *v100;
  uint64_t (***v101)(void *, int64_t);
  const char *v102;
  size_t v103;
  size_t v104;
  size_t v105;
  const void *v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  int v112;
  size_t v113;
  unint64_t v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  _OWORD *v118;
  const void *v119;
  const char *v120;
  const void *v121;
  int v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  xpc_object_t v126;
  xpc_object_t v127;
  xpc_object_t v128;
  void *v129;
  xpc_object_t v130;
  xpc_object_t v131;
  const char *v132;
  xpc_object_t v133;
  xpc_object_t v134;
  size_t v135;
  xpc_object_t v136;
  xpc_object_t v137;
  size_t v138;
  size_t v139;
  size_t v140;
  const void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  int v147;
  size_t v148;
  unint64_t v149;
  __int128 *v150;
  uint64_t v151;
  uint64_t v152;
  _OWORD *v153;
  const void *v154;
  const char *v155;
  const void *v156;
  int v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  xpc_object_t v161;
  xpc_object_t v162;
  xpc_object_t v163;
  void *v164;
  xpc_object_t v165;
  xpc_object_t v166;
  xpc_object_t v167;
  const char *v168;
  xpc_object_t v169;
  xpc_object_t v170;
  size_t v171;
  uint64_t (***v172)(void *, int64_t);
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  int v176;
  size_t v177;
  unint64_t v178;
  __int128 *v179;
  size_t v180;
  size_t v181;
  size_t v182;
  const void *v183;
  unint64_t *v184;
  unint64_t v185;
  int v186;
  size_t v187;
  unint64_t v188;
  __int128 *v189;
  uint64_t v190;
  uint64_t v191;
  _OWORD *v192;
  const void *v193;
  const char *v194;
  const void *v195;
  int v196;
  unint64_t *v197;
  unint64_t v198;
  xpc_object_t v199;
  xpc_object_t v200;
  xpc_object_t v201;
  void *v202;
  xpc_object_t v203;
  xpc_object_t v204;
  xpc_object_t v205;
  const char *v206;
  xpc_object_t v207;
  xpc_object_t v208;
  uint64_t v209;
  uint64_t v210;
  _OWORD *v211;
  const void *v212;
  const char *v213;
  const void *v214;
  int v215;
  size_t v216;
  void *v217;
  unint64_t *v218;
  unint64_t v219;
  int v220;
  xpc_object_t v221;
  xpc_object_t v222;
  size_t v223;
  size_t v224;
  const void *v225;
  unint64_t *v226;
  unint64_t v227;
  xpc_object_t v228;
  xpc_object_t v229;
  xpc_object_t v230;
  void *v231;
  xpc_object_t v232;
  xpc_object_t v233;
  uint64_t (***v234)(void *, int64_t);
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  const void *v238;
  size_t v239;
  unint64_t v240;
  size_t v241;
  __int128 *v242;
  uint64_t v243;
  uint64_t v244;
  _OWORD *v245;
  const char *v246;
  const void *v247;
  int v248;
  unint64_t *v249;
  unint64_t v250;
  const char *v251;
  uint64_t (***v252)(void *, int64_t);
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  const void *v256;
  size_t v257;
  unint64_t v258;
  size_t v259;
  __int128 *v260;
  uint64_t v261;
  uint64_t v262;
  _OWORD *v263;
  const char *v264;
  const void *v265;
  int v266;
  unint64_t *v267;
  unint64_t v268;
  const char *v269;
  xpc_object_t v270;
  void *v271;
  xpc_object_t v272;
  xpc_object_t v273;
  xpc_object_t v274;
  const char *v275;
  xpc_object_t v276;
  xpc_object_t v277;
  xpc_object_t v278;
  xpc_object_t v279;
  size_t v280;
  void *v281;
  unint64_t *v282;
  unint64_t v283;
  int v284;
  xpc_object_t v285;
  xpc_object_t v286;
  void *v287;
  unint64_t *v288;
  unint64_t v289;
  int v290;
  xpc_object_t v291;
  xpc_object_t v292;
  xpc_object_t v293;
  void *v294;
  unint64_t *v295;
  unint64_t v296;
  int v297;
  xpc_object_t v298;
  xpc_object_t v299;
  xpc_object_t v300;
  const char *v301;
  uint64_t v302;
  const char *v303;
  uint64_t v304;
  void *v305;
  unint64_t *v306;
  unint64_t v307;
  int v308;
  xpc_object_t v309;
  xpc_object_t v310;
  xpc_object_t v311;
  void *v312;
  unint64_t *v313;
  unint64_t v314;
  int v315;
  xpc_object_t v316;
  xpc_object_t v317;
  const char *v318;
  uint64_t v319;
  const char *v320;
  uint64_t v321;
  xpc_object_t v322;
  const char *v323;
  uint64_t v324;
  const char *v325;
  uint64_t v326;
  xpc_object_t v327;
  xpc_object_t v328;
  const char *v329;
  uint64_t v330;
  const char *v331;
  uint64_t v332;
  xpc_object_t v333;
  const char *v334;
  uint64_t v335;
  const char *v336;
  uint64_t v337;
  const char *v338;
  size_t v339;
  void *v340;
  unint64_t *v341;
  unint64_t v342;
  uint64_t (***v343)(_QWORD, uint64_t);
  uint64_t v344;
  void *v345;
  unint64_t *v346;
  unint64_t v347;
  uint64_t (***v348)(_QWORD, uint64_t);
  uint64_t v349;
  void *v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t (***v353)(_QWORD, uint64_t);
  uint64_t v354;
  void *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t (***v358)(_QWORD, uint64_t);
  uint64_t v359;
  const char *v360;
  uint64_t v361;
  const char *v362;
  uint64_t v363;
  const char *v364;
  void *v365;
  unint64_t *v366;
  unint64_t v367;
  uint64_t (***v368)(_QWORD, uint64_t);
  void *v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t (***v372)(_QWORD, uint64_t);
  void *v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t (***v376)(_QWORD, uint64_t);
  void *v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t (***v380)(_QWORD, uint64_t);
  xpc_object_t v381;
  xpc_object_t v382;
  xpc_object_t v383;
  const char *v384;
  uint64_t v385;
  int64_t v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t (***v389)(_QWORD, uint64_t);
  void *v390;
  const char *v391;
  int64_t v392;
  unint64_t *v393;
  unint64_t v394;
  uint64_t (***v395)(_QWORD, uint64_t);
  void *v396;
  int64_t v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t (***v400)(_QWORD, uint64_t);
  void *v401;
  int64_t v402;
  unint64_t *v403;
  unint64_t v404;
  uint64_t (***v405)(_QWORD, uint64_t);
  void *v406;
  void *v407;
  antenna::Service::Internal *v408;
  xpc_object_t v409;
  xpc_object_t v410;
  xpc_object_t v411;
  xpc_object_t v412;
  xpc_object_t v413;
  xpc_object_t v414;
  xpc_object_t v415;
  xpc_object_t v416;
  xpc_object_t v417;
  xpc_object_t v418;
  void *__p[2];
  char v420;
  int64_t value;
  void *v422;
  xpc_object_t v423;
  xpc_object_t v424;
  int64_t v425;
  xpc_object_t v426;
  xpc_object_t v427;
  _DWORD v428[3];
  xpc_object_t v429;
  _DWORD v430[3];
  xpc_object_t v431;
  xpc_object_t v432;
  xpc_object_t v433;
  xpc_object_t v434;
  xpc_object_t v435;
  xpc_object_t v436;
  xpc_object_t v437;
  xpc_object_t v438;
  xpc_object_t v439;
  xpc_object_t v440;
  xpc_object_t v441;
  xpc_object_t v442;
  xpc_object_t v443;
  xpc_object_t v444;
  xpc_object_t v445;
  xpc_object_t v446;
  xpc_object_t v447;
  xpc_object_t v448;
  xpc_object_t v449;
  xpc_object_t v450;
  xpc_object_t v451;
  xpc_object_t v452;
  xpc_object_t v453;
  xpc_object_t v454;
  xpc_object_t object;
  xpc_object_t v456;
  xpc_object_t v457;
  xpc_object_t v458;
  xpc_object_t v459;
  xpc_object_t v460;
  xpc_object_t v461;
  xpc_object_t v462;
  xpc_object_t v463;
  xpc_object_t v464;
  xpc_object_t v465;
  xpc_object_t v466;
  xpc_object_t v467;
  xpc_object_t v468;
  xpc_object_t v469;
  __int128 __dst[2];
  char *v471;
  uint64_t v472;
  uint64_t v473;
  xpc_object_t v474;

  v474 = xpc_null_create();
  v4 = (const void *)*MEMORY[0x1E0CFB990];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB990]);
  v6 = v5;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (v5 == -1)
      goto LABEL_827;
    v9 = *(const void **)a2;
    v8 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
    v9 = (const void *)a2;
    if (v6 == -1)
LABEL_827:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = !memcmp(v9, v4, v10) && v8 == v6;
  v12 = MEMORY[0x1E0C812F8];
  if (v11)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!qword_1ED70F248)
    {
      v19 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
      MEMORY[0x1C3B8B8C0](v19, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
      v18 = operator new(0x20uLL);
      *v18 = &unk_1E7919E70;
      v18[1] = 0;
      v18[2] = 0;
      v18[3] = v19;
      v29 = (std::__shared_weak_count *)off_1ED70F250;
      qword_1ED70F248 = (uint64_t)v19;
      off_1ED70F250 = v18;
      if (!v29)
      {
        __p[0] = v19;
        __p[1] = v18;
        goto LABEL_65;
      }
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v19 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
    v18 = off_1ED70F250;
    __p[0] = (void *)qword_1ED70F248;
    __p[1] = off_1ED70F250;
    if (!off_1ED70F250)
    {
LABEL_67:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      v45 = *(char *)(a2 + 23);
      if (v45 >= 0)
        v46 = *(unsigned __int8 *)(a2 + 23);
      else
        v46 = *(_QWORD *)(a2 + 8);
      v47 = v46 + 16;
      memset(__dst, 170, 24);
      if (v46 + 16 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v47 >= 0x17)
      {
        v49 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v47 | 7) != 0x17)
          v49 = v47 | 7;
        v50 = v49 + 1;
        v51 = operator new(v49 + 1);
        *((_QWORD *)&__dst[0] + 1) = v46 + 16;
        *(_QWORD *)&__dst[1] = v50 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v51;
        *v51 = *(_OWORD *)"AntennaSetting::";
        v48 = v51 + 1;
      }
      else
      {
        v48 = &__dst[1];
        *(_QWORD *)&__dst[1] = 0;
        BYTE7(__dst[1]) = v46 + 16;
        __dst[0] = *(_OWORD *)"AntennaSetting::";
        if (!v46)
          goto LABEL_81;
      }
      if (v45 >= 0)
        v52 = (const void *)a2;
      else
        v52 = *(const void **)a2;
      memmove(v48, v52, v46);
LABEL_81:
      *((_BYTE *)v48 + v46) = 0;
      if ((SBYTE7(__dst[1]) & 0x80u) == 0)
        v53 = (const char *)__dst;
      else
        v53 = *(const char **)&__dst[0];
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v53);
      v54 = (const void *)(**v19)(v19, value);
      if (v54)
      {
        v55 = ctu::cf::assign();
        CFRelease(v54);
        MEMORY[0x1C3B8B878](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_86;
      }
      else
      {
        v55 = 0;
        MEMORY[0x1C3B8B878](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        {
LABEL_86:
          v56 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_93;
          goto LABEL_90;
        }
      }
      operator delete(*(void **)&__dst[0]);
      v56 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_93;
LABEL_90:
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        if (!v55)
          goto LABEL_821;
LABEL_94:
        v59 = xpc_dictionary_create(0, 0, 0);
        if (v59 || (v59 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v59) == v12)
          {
            xpc_retain(v59);
            v60 = v59;
          }
          else
          {
            v60 = xpc_null_create();
          }
        }
        else
        {
          v60 = xpc_null_create();
          v59 = 0;
        }
        xpc_release(v59);
        v90 = xpc_null_create();
        v91 = v474;
        v474 = v60;
        xpc_release(v91);
        xpc_release(v90);
        v92 = xpc_string_create((const char *)v4);
        if (!v92)
          v92 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v92);
        v93 = xpc_null_create();
        xpc_release(v92);
        xpc_release(v93);
        v94 = xpc_dictionary_create(0, 0, 0);
        if (v94 || (v94 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v94) == v12)
          {
            xpc_retain(v94);
            v95 = v94;
          }
          else
          {
            v95 = xpc_null_create();
          }
        }
        else
        {
          v95 = xpc_null_create();
          v94 = 0;
        }
        xpc_release(v94);
        if (v473 >= 0)
          v96 = (const char *)&v471;
        else
          v96 = v471;
        v97 = xpc_string_create(v96);
        if (!v97)
          v97 = xpc_null_create();
        xpc_dictionary_set_value(v95, (const char *)*MEMORY[0x1E0CFC0E8], v97);
        v98 = xpc_null_create();
        xpc_release(v97);
        xpc_release(v98);
        if (v95)
        {
LABEL_511:
          xpc_retain(v95);
          v278 = v95;
LABEL_513:
          xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB4D0], v278);
          v279 = xpc_null_create();
          xpc_release(v278);
          xpc_release(v279);
          xpc_release(v95);
          goto LABEL_821;
        }
LABEL_512:
        v278 = xpc_null_create();
        goto LABEL_513;
      }
LABEL_93:
      if (!v55)
        goto LABEL_821;
      goto LABEL_94;
    }
LABEL_65:
    v43 = v18 + 1;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    goto LABEL_67;
  }
  v13 = (const char *)*MEMORY[0x1E0CFB3B0];
  v14 = strlen((const char *)*MEMORY[0x1E0CFB3B0]);
  v15 = v14;
  if ((v7 & 0x80) != 0)
  {
    if (v14 == -1)
      goto LABEL_828;
    v17 = *(const void **)a2;
    v16 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v16 = v7;
    v17 = (const void *)a2;
    if (v15 == -1)
LABEL_828:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v16 >= v15)
    v20 = v15;
  else
    v20 = v16;
  if (!memcmp(v17, v13, v20) && v16 == v15)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!qword_1ED70F248)
    {
      v28 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
      MEMORY[0x1C3B8B8C0](v28, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
      v27 = operator new(0x20uLL);
      *v27 = &unk_1E7919E70;
      v27[1] = 0;
      v27[2] = 0;
      v27[3] = v28;
      v40 = (std::__shared_weak_count *)off_1ED70F250;
      qword_1ED70F248 = (uint64_t)v28;
      off_1ED70F250 = v27;
      if (!v40)
      {
        __p[0] = v28;
        __p[1] = v27;
        goto LABEL_123;
      }
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v28 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
    v27 = off_1ED70F250;
    __p[0] = (void *)qword_1ED70F248;
    __p[1] = off_1ED70F250;
    if (!off_1ED70F250)
    {
LABEL_125:
      pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      v74 = *(char *)(a2 + 23);
      if (v74 >= 0)
        v75 = *(unsigned __int8 *)(a2 + 23);
      else
        v75 = *(_QWORD *)(a2 + 8);
      v76 = v75 + 16;
      memset(__dst, 170, 24);
      if (v75 + 16 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v76 >= 0x17)
      {
        v78 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v76 | 7) != 0x17)
          v78 = v76 | 7;
        v79 = v78 + 1;
        v80 = operator new(v78 + 1);
        *((_QWORD *)&__dst[0] + 1) = v75 + 16;
        *(_QWORD *)&__dst[1] = v79 | 0x8000000000000000;
        *(_QWORD *)&__dst[0] = v80;
        *v80 = *(_OWORD *)"AntennaSetting::";
        v77 = v80 + 1;
      }
      else
      {
        v77 = &__dst[1];
        *(_QWORD *)&__dst[1] = 0;
        BYTE7(__dst[1]) = v75 + 16;
        __dst[0] = *(_OWORD *)"AntennaSetting::";
        if (!v75)
          goto LABEL_139;
      }
      if (v74 >= 0)
        v81 = (const void *)a2;
      else
        v81 = *(const void **)a2;
      memmove(v77, v81, v75);
LABEL_139:
      *((_BYTE *)v77 + v75) = 0;
      if ((SBYTE7(__dst[1]) & 0x80u) == 0)
        v82 = (const char *)__dst;
      else
        v82 = *(const char **)&__dst[0];
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v82);
      v83 = (const void *)(**v28)(v28, value);
      if (v83)
      {
        v84 = ctu::cf::assign();
        CFRelease(v83);
        MEMORY[0x1C3B8B878](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          goto LABEL_144;
      }
      else
      {
        v84 = 0;
        MEMORY[0x1C3B8B878](&value);
        if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
        {
LABEL_144:
          v85 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_151;
          goto LABEL_148;
        }
      }
      operator delete(*(void **)&__dst[0]);
      v85 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_151;
LABEL_148:
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
        if (!v84)
          goto LABEL_821;
LABEL_152:
        v88 = xpc_dictionary_create(0, 0, 0);
        if (v88 || (v88 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v88) == v12)
          {
            xpc_retain(v88);
            v89 = v88;
          }
          else
          {
            v89 = xpc_null_create();
          }
        }
        else
        {
          v89 = xpc_null_create();
          v88 = 0;
        }
        xpc_release(v88);
        v128 = xpc_null_create();
        v129 = v474;
        v474 = v89;
        xpc_release(v129);
        xpc_release(v128);
        v130 = xpc_string_create(v13);
        if (!v130)
          v130 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v130);
        v131 = xpc_null_create();
        xpc_release(v130);
        xpc_release(v131);
        if (v473 >= 0)
          v132 = (const char *)&v471;
        else
          v132 = v471;
        v133 = xpc_string_create(v132);
        if (!v133)
          v133 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB4D0], v133);
        v134 = xpc_null_create();
        xpc_release(v133);
        xpc_release(v134);
        goto LABEL_821;
      }
LABEL_151:
      if (!v84)
        goto LABEL_821;
      goto LABEL_152;
    }
LABEL_123:
    v72 = v27 + 1;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
    goto LABEL_125;
  }
  v22 = (const void *)*MEMORY[0x1E0CFB5B8];
  v23 = strlen((const char *)*MEMORY[0x1E0CFB5B8]);
  v24 = v23;
  if ((v7 & 0x80) == 0)
  {
    v25 = v7;
    if (v23 != -1)
    {
      if (v7 >= v23)
        v26 = v23;
      else
        v26 = v7;
      if (memcmp((const void *)a2, v22, v26))
        goto LABEL_52;
LABEL_48:
      if (v25 != v24)
        goto LABEL_52;
      v471 = 0;
      v472 = 0;
      v473 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1ED70F248)
      {
        v34 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C3B8B8C0](v34, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
        v33 = operator new(0x20uLL);
        *v33 = &unk_1E7919E70;
        v33[1] = 0;
        v33[2] = 0;
        v33[3] = v34;
        v69 = (std::__shared_weak_count *)off_1ED70F250;
        qword_1ED70F248 = (uint64_t)v34;
        off_1ED70F250 = v33;
        if (!v69)
        {
          __p[0] = v34;
          __p[1] = v33;
          goto LABEL_193;
        }
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v34 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
      v33 = off_1ED70F250;
      __p[0] = (void *)qword_1ED70F248;
      __p[1] = off_1ED70F250;
      if (!off_1ED70F250)
      {
LABEL_195:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v112 = *(char *)(a2 + 23);
        if (v112 >= 0)
          v113 = *(unsigned __int8 *)(a2 + 23);
        else
          v113 = *(_QWORD *)(a2 + 8);
        v114 = v113 + 16;
        memset(__dst, 170, 24);
        if (v113 + 16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v114 >= 0x17)
        {
          v116 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17)
            v116 = v114 | 7;
          v117 = v116 + 1;
          v118 = operator new(v116 + 1);
          *((_QWORD *)&__dst[0] + 1) = v113 + 16;
          *(_QWORD *)&__dst[1] = v117 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v118;
          *v118 = *(_OWORD *)"AntennaSetting::";
          v115 = v118 + 1;
        }
        else
        {
          v115 = &__dst[1];
          *(_QWORD *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v113 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v113)
            goto LABEL_209;
        }
        if (v112 >= 0)
          v119 = (const void *)a2;
        else
          v119 = *(const void **)a2;
        memmove(v115, v119, v113);
LABEL_209:
        *((_BYTE *)v115 + v113) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v120 = (const char *)__dst;
        else
          v120 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v120);
        v121 = (const void *)(**v34)(v34, value);
        if (v121)
        {
          v122 = ctu::cf::assign();
          CFRelease(v121);
          MEMORY[0x1C3B8B878](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
            goto LABEL_214;
        }
        else
        {
          v122 = 0;
          MEMORY[0x1C3B8B878](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          {
LABEL_214:
            v123 = (std::__shared_weak_count *)__p[1];
            if (!__p[1])
              goto LABEL_222;
            goto LABEL_218;
          }
        }
        operator delete(*(void **)&__dst[0]);
        v123 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_222;
LABEL_218:
        v124 = (unint64_t *)&v123->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
LABEL_222:
        if (!v122)
          goto LABEL_821;
        v126 = xpc_dictionary_create(0, 0, 0);
        if (v126 || (v126 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v126) == v12)
          {
            xpc_retain(v126);
            v127 = v126;
          }
          else
          {
            v127 = xpc_null_create();
          }
        }
        else
        {
          v127 = xpc_null_create();
          v126 = 0;
        }
        xpc_release(v126);
        v163 = xpc_null_create();
        v164 = v474;
        v474 = v127;
        xpc_release(v164);
        xpc_release(v163);
        v165 = xpc_string_create((const char *)v22);
        if (!v165)
          v165 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v165);
        v166 = xpc_null_create();
        xpc_release(v165);
        xpc_release(v166);
        v167 = xpc_dictionary_create(0, 0, 0);
        if (v167 || (v167 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v167) == v12)
          {
            xpc_retain(v167);
            v95 = v167;
          }
          else
          {
            v95 = xpc_null_create();
          }
        }
        else
        {
          v95 = xpc_null_create();
          v167 = 0;
        }
        xpc_release(v167);
        if (v473 >= 0)
          v168 = (const char *)&v471;
        else
          v168 = v471;
        v169 = xpc_string_create(v168);
        if (!v169)
          v169 = xpc_null_create();
        xpc_dictionary_set_value(v95, (const char *)*MEMORY[0x1E0CFBF30], v169);
        v170 = xpc_null_create();
        xpc_release(v169);
        xpc_release(v170);
        if (v95)
          goto LABEL_511;
        goto LABEL_512;
      }
LABEL_193:
      v110 = v33 + 1;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
      goto LABEL_195;
    }
LABEL_830:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v23 == -1)
    goto LABEL_830;
  v25 = *(_QWORD *)(a2 + 8);
  if (v25 >= v23)
    v32 = v23;
  else
    v32 = *(_QWORD *)(a2 + 8);
  if (!memcmp(*(const void **)a2, v22, v32))
    goto LABEL_48;
LABEL_52:
  v35 = (const void *)*MEMORY[0x1E0CFB708];
  v36 = strlen((const char *)*MEMORY[0x1E0CFB708]);
  v37 = v36;
  if ((v7 & 0x80) == 0)
  {
    v38 = v7;
    if (v36 != -1)
    {
      if (v7 >= v36)
        v39 = v36;
      else
        v39 = v7;
      if (memcmp((const void *)a2, v35, v39))
        goto LABEL_110;
LABEL_106:
      if (v38 != v37)
        goto LABEL_110;
      v471 = 0;
      v472 = 0;
      v473 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1ED70F248)
      {
        v63 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C3B8B8C0](v63, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
        v62 = operator new(0x20uLL);
        *v62 = &unk_1E7919E70;
        v62[1] = 0;
        v62[2] = 0;
        v62[3] = v63;
        v107 = (std::__shared_weak_count *)off_1ED70F250;
        qword_1ED70F248 = (uint64_t)v63;
        off_1ED70F250 = v62;
        if (!v107)
        {
          __p[0] = v63;
          __p[1] = v62;
          goto LABEL_257;
        }
        v108 = (unint64_t *)&v107->__shared_owners_;
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 - 1, v108));
        if (!v109)
        {
          ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
          std::__shared_weak_count::__release_weak(v107);
        }
      }
      v63 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
      v62 = off_1ED70F250;
      __p[0] = (void *)qword_1ED70F248;
      __p[1] = off_1ED70F250;
      if (!off_1ED70F250)
      {
LABEL_259:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v147 = *(char *)(a2 + 23);
        if (v147 >= 0)
          v148 = *(unsigned __int8 *)(a2 + 23);
        else
          v148 = *(_QWORD *)(a2 + 8);
        v149 = v148 + 16;
        memset(__dst, 170, 24);
        if (v148 + 16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v149 >= 0x17)
        {
          v151 = (v149 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v149 | 7) != 0x17)
            v151 = v149 | 7;
          v152 = v151 + 1;
          v153 = operator new(v151 + 1);
          *((_QWORD *)&__dst[0] + 1) = v148 + 16;
          *(_QWORD *)&__dst[1] = v152 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v153;
          *v153 = *(_OWORD *)"AntennaSetting::";
          v150 = v153 + 1;
        }
        else
        {
          v150 = &__dst[1];
          *(_QWORD *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v148 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v148)
            goto LABEL_273;
        }
        if (v147 >= 0)
          v154 = (const void *)a2;
        else
          v154 = *(const void **)a2;
        memmove(v150, v154, v148);
LABEL_273:
        *((_BYTE *)v150 + v148) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v155 = (const char *)__dst;
        else
          v155 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v155);
        v156 = (const void *)(**v63)(v63, value);
        if (v156)
        {
          v157 = ctu::cf::assign();
          CFRelease(v156);
          MEMORY[0x1C3B8B878](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
            goto LABEL_278;
        }
        else
        {
          v157 = 0;
          MEMORY[0x1C3B8B878](&value);
          if ((SBYTE7(__dst[1]) & 0x80000000) == 0)
          {
LABEL_278:
            v158 = (std::__shared_weak_count *)__p[1];
            if (!__p[1])
              goto LABEL_286;
            goto LABEL_282;
          }
        }
        operator delete(*(void **)&__dst[0]);
        v158 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_286;
LABEL_282:
        v159 = (unint64_t *)&v158->__shared_owners_;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 - 1, v159));
        if (!v160)
        {
          ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
          std::__shared_weak_count::__release_weak(v158);
        }
LABEL_286:
        if (!v157)
          goto LABEL_821;
        v161 = xpc_dictionary_create(0, 0, 0);
        if (v161 || (v161 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v161) == v12)
          {
            xpc_retain(v161);
            v162 = v161;
          }
          else
          {
            v162 = xpc_null_create();
          }
        }
        else
        {
          v162 = xpc_null_create();
          v161 = 0;
        }
        xpc_release(v161);
        v201 = xpc_null_create();
        v202 = v474;
        v474 = v162;
        xpc_release(v202);
        xpc_release(v201);
        v203 = xpc_string_create((const char *)v35);
        if (!v203)
          v203 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v203);
        v204 = xpc_null_create();
        xpc_release(v203);
        xpc_release(v204);
        v205 = xpc_dictionary_create(0, 0, 0);
        if (v205 || (v205 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v205) == v12)
          {
            xpc_retain(v205);
            v95 = v205;
          }
          else
          {
            v95 = xpc_null_create();
          }
        }
        else
        {
          v95 = xpc_null_create();
          v205 = 0;
        }
        xpc_release(v205);
        if (v473 >= 0)
          v206 = (const char *)&v471;
        else
          v206 = v471;
        v207 = xpc_string_create(v206);
        if (!v207)
          v207 = xpc_null_create();
        xpc_dictionary_set_value(v95, (const char *)*MEMORY[0x1E0CFBFA8], v207);
        v208 = xpc_null_create();
        xpc_release(v207);
        xpc_release(v208);
        if (v95)
          goto LABEL_511;
        goto LABEL_512;
      }
LABEL_257:
      v145 = v62 + 1;
      do
        v146 = __ldxr(v145);
      while (__stxr(v146 + 1, v145));
      goto LABEL_259;
    }
LABEL_832:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v36 == -1)
    goto LABEL_832;
  v38 = *(_QWORD *)(a2 + 8);
  if (v38 >= v36)
    v61 = v36;
  else
    v61 = *(_QWORD *)(a2 + 8);
  if (!memcmp(*(const void **)a2, v35, v61))
    goto LABEL_106;
LABEL_110:
  v64 = (const void *)*MEMORY[0x1E0CFBE18];
  v65 = strlen((const char *)*MEMORY[0x1E0CFBE18]);
  v66 = v65;
  if ((v7 & 0x80) == 0)
  {
    v67 = v7;
    if (v65 != -1)
    {
      if (v7 >= v65)
        v68 = v65;
      else
        v68 = v7;
      if (memcmp((const void *)a2, v64, v68))
        goto LABEL_184;
LABEL_180:
      if (v67 != v66)
        goto LABEL_184;
      v471 = 0;
      v472 = 0;
      v473 = 0;
      pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
      if (!qword_1ED70F248)
      {
        v101 = (uint64_t (***)(void *, int64_t))operator new(0x18uLL);
        MEMORY[0x1C3B8B8C0](v101, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
        v100 = operator new(0x20uLL);
        *v100 = &unk_1E7919E70;
        v100[1] = 0;
        v100[2] = 0;
        v100[3] = v101;
        v142 = (std::__shared_weak_count *)off_1ED70F250;
        qword_1ED70F248 = (uint64_t)v101;
        off_1ED70F250 = v100;
        if (!v142)
        {
          __p[0] = v101;
          __p[1] = v100;
          goto LABEL_332;
        }
        v143 = (unint64_t *)&v142->__shared_owners_;
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }
      v101 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
      v100 = off_1ED70F250;
      __p[0] = (void *)qword_1ED70F248;
      __p[1] = off_1ED70F250;
      if (!off_1ED70F250)
      {
LABEL_334:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v186 = *(char *)(a2 + 23);
        if (v186 >= 0)
          v187 = *(unsigned __int8 *)(a2 + 23);
        else
          v187 = *(_QWORD *)(a2 + 8);
        v188 = v187 + 16;
        memset(__dst, 170, 24);
        if (v187 + 16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v188 >= 0x17)
        {
          v190 = (v188 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v188 | 7) != 0x17)
            v190 = v188 | 7;
          v191 = v190 + 1;
          v192 = operator new(v190 + 1);
          *((_QWORD *)&__dst[0] + 1) = v187 + 16;
          *(_QWORD *)&__dst[1] = v191 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v192;
          *v192 = *(_OWORD *)"AntennaSetting::";
          v189 = v192 + 1;
        }
        else
        {
          v189 = &__dst[1];
          *(_QWORD *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v187 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v187)
            goto LABEL_348;
        }
        if (v186 >= 0)
          v193 = (const void *)a2;
        else
          v193 = *(const void **)a2;
        memmove(v189, v193, v187);
LABEL_348:
        *((_BYTE *)v189 + v187) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v194 = (const char *)__dst;
        else
          v194 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v194);
        v195 = (const void *)(**v101)(v101, value);
        if (v195)
        {
          v196 = ctu::cf::assign();
          CFRelease(v195);
        }
        else
        {
          v196 = 0;
        }
        MEMORY[0x1C3B8B878](&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        if (__p[1])
        {
          v197 = (unint64_t *)((char *)__p[1] + 8);
          do
            v198 = __ldaxr(v197);
          while (__stlxr(v198 - 1, v197));
          if (!v198)
          {
            (*(void (**)(void *))(*(_QWORD *)__p[1] + 16))(__p[1]);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
          }
        }
        if (!v196)
          goto LABEL_821;
        v199 = xpc_dictionary_create(0, 0, 0);
        if (v199 || (v199 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v199) == v12)
          {
            xpc_retain(v199);
            v200 = v199;
          }
          else
          {
            v200 = xpc_null_create();
          }
        }
        else
        {
          v200 = xpc_null_create();
          v199 = 0;
        }
        xpc_release(v199);
        v270 = xpc_null_create();
        v271 = v474;
        v474 = v200;
        xpc_release(v271);
        xpc_release(v270);
        v272 = xpc_string_create((const char *)v64);
        if (!v272)
          v272 = xpc_null_create();
        xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v272);
        v273 = xpc_null_create();
        xpc_release(v272);
        xpc_release(v273);
        v274 = xpc_dictionary_create(0, 0, 0);
        if (v274 || (v274 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v274) == v12)
          {
            xpc_retain(v274);
            v95 = v274;
          }
          else
          {
            v95 = xpc_null_create();
          }
        }
        else
        {
          v95 = xpc_null_create();
          v274 = 0;
        }
        xpc_release(v274);
        if (v473 >= 0)
          v275 = (const char *)&v471;
        else
          v275 = v471;
        v276 = xpc_string_create(v275);
        if (!v276)
          v276 = xpc_null_create();
        xpc_dictionary_set_value(v95, (const char *)*MEMORY[0x1E0CFC0C8], v276);
        v277 = xpc_null_create();
        xpc_release(v276);
        xpc_release(v277);
        if (v95)
          goto LABEL_511;
        goto LABEL_512;
      }
LABEL_332:
      v184 = v100 + 1;
      do
        v185 = __ldxr(v184);
      while (__stxr(v185 + 1, v184));
      goto LABEL_334;
    }
LABEL_834:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v65 == -1)
    goto LABEL_834;
  v67 = *(_QWORD *)(a2 + 8);
  if (v67 >= v65)
    v99 = v65;
  else
    v99 = *(_QWORD *)(a2 + 8);
  if (!memcmp(*(const void **)a2, v64, v99))
    goto LABEL_180;
LABEL_184:
  v102 = (const char *)*MEMORY[0x1E0CFBE40];
  v103 = strlen((const char *)*MEMORY[0x1E0CFBE40]);
  v104 = v103;
  if ((v7 & 0x80) != 0)
  {
    if (v103 == -1)
      goto LABEL_836;
    v106 = *(const void **)a2;
    v105 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v105 = v7;
    v106 = (const void *)a2;
    if (v104 == -1)
LABEL_836:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v105 >= v104)
    v135 = v104;
  else
    v135 = v105;
  if (!memcmp(v106, v102, v135) && v105 == v104)
  {
    v136 = xpc_dictionary_create(0, 0, 0);
    if (v136 || (v136 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v136) == v12)
      {
        xpc_retain(v136);
        v137 = v136;
      }
      else
      {
        v137 = xpc_null_create();
      }
    }
    else
    {
      v137 = xpc_null_create();
      v136 = 0;
    }
    xpc_release(v136);
    v230 = xpc_null_create();
    v231 = v474;
    v474 = v137;
    xpc_release(v231);
    xpc_release(v230);
    v471 = 0;
    v472 = 0;
    v473 = 0;
    v232 = xpc_string_create(v102);
    if (!v232)
      v232 = xpc_null_create();
    xpc_dictionary_set_value(v474, (const char *)*MEMORY[0x1E0CFB718], v232);
    v233 = xpc_null_create();
    xpc_release(v232);
    xpc_release(v233);
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v234 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v234 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
    }
    v235 = (std::__shared_weak_count *)off_1ED70F250;
    __p[0] = v234;
    __p[1] = off_1ED70F250;
    if (off_1ED70F250)
    {
      v236 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v237 = __ldxr(v236);
      while (__stxr(v237 + 1, v236));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v238 = (const void *)*MEMORY[0x1E0CFB1B8];
    v239 = strlen((const char *)*MEMORY[0x1E0CFB1B8]);
    v240 = v239 + 16;
    memset(__dst, 170, 24);
    if (v239 + 16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v241 = v239;
    if (v240 >= 0x17)
    {
      v243 = (v240 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v240 | 7) != 0x17)
        v243 = v240 | 7;
      v244 = v243 + 1;
      v245 = operator new(v243 + 1);
      *((_QWORD *)&__dst[0] + 1) = v240;
      *(_QWORD *)&__dst[1] = v244 | 0x8000000000000000;
      *(_QWORD *)&__dst[0] = v245;
      *v245 = *(_OWORD *)"AntennaSetting::";
      v242 = v245 + 1;
    }
    else
    {
      v242 = &__dst[1];
      *(_QWORD *)&__dst[1] = 0;
      BYTE7(__dst[1]) = v239 + 16;
      __dst[0] = *(_OWORD *)"AntennaSetting::";
      if (!v239)
      {
LABEL_443:
        *((_BYTE *)v242 + v241) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v246 = (const char *)__dst;
        else
          v246 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v246);
        v247 = (const void *)(**v234)(v234, value);
        if (v247)
        {
          v248 = ctu::cf::assign();
          CFRelease(v247);
        }
        else
        {
          v248 = 0;
        }
        MEMORY[0x1C3B8B878](&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        if (v235)
        {
          v249 = (unint64_t *)&v235->__shared_owners_;
          do
            v250 = __ldaxr(v249);
          while (__stlxr(v250 - 1, v249));
          if (!v250)
          {
            ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
            std::__shared_weak_count::__release_weak(v235);
          }
        }
        if (v248)
        {
          if (v473 >= 0)
            v251 = (const char *)&v471;
          else
            v251 = v471;
          v468 = xpc_string_create(v251);
          if (!v468)
            v468 = xpc_null_create();
          *(_QWORD *)&__dst[0] = &v474;
          *((_QWORD *)&__dst[0] + 1) = v238;
          xpc::dict::object_proxy::operator=((uint64_t)__dst, &v468, &v469);
          xpc_release(v469);
          v469 = 0;
          xpc_release(v468);
          v468 = 0;
        }
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v252 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v252 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
        }
        v253 = (std::__shared_weak_count *)off_1ED70F250;
        __p[0] = v252;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v254 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v255 = __ldxr(v254);
          while (__stxr(v255 + 1, v254));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v256 = (const void *)*MEMORY[0x1E0CFB398];
        v257 = strlen((const char *)*MEMORY[0x1E0CFB398]);
        v258 = v257 + 16;
        memset(__dst, 170, 24);
        if (v257 + 16 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v259 = v257;
        if (v258 >= 0x17)
        {
          v261 = (v258 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v258 | 7) != 0x17)
            v261 = v258 | 7;
          v262 = v261 + 1;
          v263 = operator new(v261 + 1);
          *((_QWORD *)&__dst[0] + 1) = v258;
          *(_QWORD *)&__dst[1] = v262 | 0x8000000000000000;
          *(_QWORD *)&__dst[0] = v263;
          *v263 = *(_OWORD *)"AntennaSetting::";
          v260 = v263 + 1;
        }
        else
        {
          v260 = &__dst[1];
          *(_QWORD *)&__dst[1] = 0;
          BYTE7(__dst[1]) = v257 + 16;
          __dst[0] = *(_OWORD *)"AntennaSetting::";
          if (!v257)
            goto LABEL_476;
        }
        memmove(v260, v256, v259);
LABEL_476:
        *((_BYTE *)v260 + v259) = 0;
        if ((SBYTE7(__dst[1]) & 0x80u) == 0)
          v264 = (const char *)__dst;
        else
          v264 = *(const char **)&__dst[0];
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v264);
        v265 = (const void *)(**v252)(v252, value);
        if (v265)
        {
          v266 = ctu::cf::assign();
          CFRelease(v265);
        }
        else
        {
          v266 = 0;
        }
        MEMORY[0x1C3B8B878](&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        if (v253)
        {
          v267 = (unint64_t *)&v253->__shared_owners_;
          do
            v268 = __ldaxr(v267);
          while (__stlxr(v268 - 1, v267));
          if (!v268)
          {
            ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
            std::__shared_weak_count::__release_weak(v253);
          }
        }
        if (v266)
        {
          if (v473 >= 0)
            v269 = (const char *)&v471;
          else
            v269 = v471;
          v466 = xpc_string_create(v269);
          if (!v466)
            v466 = xpc_null_create();
          *(_QWORD *)&__dst[0] = &v474;
          *((_QWORD *)&__dst[0] + 1) = v256;
          xpc::dict::object_proxy::operator=((uint64_t)__dst, &v466, &v467);
          xpc_release(v467);
          v467 = 0;
          xpc_release(v466);
          v466 = 0;
        }
        goto LABEL_821;
      }
    }
    memmove(v242, v238, v241);
    goto LABEL_443;
  }
  v138 = strlen((const char *)*MEMORY[0x1E0CFB6B0]);
  v139 = v138;
  if ((v7 & 0x80) != 0)
  {
    if (v138 == -1)
      goto LABEL_838;
    v141 = *(const void **)a2;
    v140 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v140 = v7;
    v141 = (const void *)a2;
    if (v139 == -1)
LABEL_838:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v140 >= v139)
    v171 = v139;
  else
    v171 = v140;
  if (!memcmp(v141, (const void *)*MEMORY[0x1E0CFB6B0], v171) && v140 == v139)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v172 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v172 = (uint64_t (***)(void *, int64_t))qword_1ED70F248;
    }
    v173 = (std::__shared_weak_count *)off_1ED70F250;
    __p[0] = v172;
    __p[1] = off_1ED70F250;
    if (off_1ED70F250)
    {
      v174 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v175 = __ldxr(v174);
      while (__stxr(v175 + 1, v174));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v176 = *(char *)(a2 + 23);
    if (v176 >= 0)
      v177 = *(unsigned __int8 *)(a2 + 23);
    else
      v177 = *(_QWORD *)(a2 + 8);
    v178 = v177 + 16;
    memset(__dst, 170, 24);
    if (v177 + 16 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v178 >= 0x17)
    {
      v209 = (v178 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v178 | 7) != 0x17)
        v209 = v178 | 7;
      v210 = v209 + 1;
      v211 = operator new(v209 + 1);
      *((_QWORD *)&__dst[0] + 1) = v177 + 16;
      *(_QWORD *)&__dst[1] = v210 | 0x8000000000000000;
      *(_QWORD *)&__dst[0] = v211;
      *v211 = *(_OWORD *)"AntennaSetting::";
      v179 = v211 + 1;
    }
    else
    {
      v179 = &__dst[1];
      *(_QWORD *)&__dst[1] = 0;
      BYTE7(__dst[1]) = v177 + 16;
      __dst[0] = *(_OWORD *)"AntennaSetting::";
      if (!v177)
        goto LABEL_391;
    }
    if (v176 >= 0)
      v212 = (const void *)a2;
    else
      v212 = *(const void **)a2;
    memmove(v179, v212, v177);
LABEL_391:
    *((_BYTE *)v179 + v177) = 0;
    if ((SBYTE7(__dst[1]) & 0x80u) == 0)
      v213 = (const char *)__dst;
    else
      v213 = *(const char **)&__dst[0];
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&value, v213);
    v214 = (const void *)(**v172)(v172, value);
    if (v214)
    {
      v215 = ctu::cf::assign();
      CFRelease(v214);
    }
    else
    {
      v215 = 0;
    }
    MEMORY[0x1C3B8B878](&value);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    if (v173)
    {
      v226 = (unint64_t *)&v173->__shared_owners_;
      do
        v227 = __ldaxr(v226);
      while (__stlxr(v227 - 1, v226));
      if (!v227)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    if (!v215)
      goto LABEL_821;
    v228 = xpc_dictionary_create(0, 0, 0);
    v229 = v228;
    if (v228)
    {
      *(_QWORD *)&__dst[0] = v228;
    }
    else
    {
      v229 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v229;
      if (!v229)
      {
        v293 = xpc_null_create();
        v229 = 0;
        goto LABEL_564;
      }
    }
    if (MEMORY[0x1C3B8CD78](v229) == v12)
    {
      xpc_retain(v229);
LABEL_565:
      xpc_release(v229);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v301 = (const char *)a2;
      else
        v301 = *(const char **)a2;
      v464 = xpc_string_create(v301);
      if (!v464)
        v464 = xpc_null_create();
      v302 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v302;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v464, &v465);
      xpc_release(v465);
      v465 = 0;
      xpc_release(v464);
      v464 = 0;
      if (v473 >= 0)
        v303 = (const char *)&v471;
      else
        v303 = v471;
      v462 = xpc_string_create(v303);
      if (!v462)
        v462 = xpc_null_create();
      v304 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v304;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v462, &v463);
      xpc_release(v463);
      v463 = 0;
      xpc_release(v462);
      v462 = 0;
      goto LABEL_821;
    }
    v293 = xpc_null_create();
LABEL_564:
    *(_QWORD *)&__dst[0] = v293;
    goto LABEL_565;
  }
  v180 = strlen((const char *)*MEMORY[0x1E0CFBE10]);
  v181 = v180;
  if ((v7 & 0x80) != 0)
  {
    if (v180 == -1)
      goto LABEL_841;
    v183 = *(const void **)a2;
    v182 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v182 = v7;
    v183 = (const void *)a2;
    if (v181 == -1)
LABEL_841:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v182 >= v181)
    v216 = v181;
  else
    v216 = v182;
  if (!memcmp(v183, (const void *)*MEMORY[0x1E0CFBE10], v216) && v182 == v181)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v217 = (void *)qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v217 = (void *)qword_1ED70F248;
    }
    __p[0] = v217;
    __p[1] = off_1ED70F250;
    if (off_1ED70F250)
    {
      v218 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v219 = __ldxr(v218);
      while (__stxr(v219 + 1, v218));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v220 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v220)
      goto LABEL_821;
    v221 = xpc_dictionary_create(0, 0, 0);
    v222 = v221;
    if (v221)
    {
      *(_QWORD *)&__dst[0] = v221;
    }
    else
    {
      v222 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v222;
      if (!v222)
      {
        v300 = xpc_null_create();
        v222 = 0;
        goto LABEL_601;
      }
    }
    if (MEMORY[0x1C3B8CD78](v222) == v12)
    {
      xpc_retain(v222);
LABEL_602:
      xpc_release(v222);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v318 = (const char *)a2;
      else
        v318 = *(const char **)a2;
      v460 = xpc_string_create(v318);
      if (!v460)
        v460 = xpc_null_create();
      v319 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v319;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v460, &v461);
      xpc_release(v461);
      v461 = 0;
      xpc_release(v460);
      v460 = 0;
      if (v473 >= 0)
        v320 = (const char *)&v471;
      else
        v320 = v471;
      v458 = xpc_string_create(v320);
      if (!v458)
        v458 = xpc_null_create();
      v321 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v321;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v458, &v459);
      xpc_release(v459);
      v459 = 0;
      xpc_release(v458);
      v458 = 0;
      goto LABEL_821;
    }
    v300 = xpc_null_create();
LABEL_601:
    *(_QWORD *)&__dst[0] = v300;
    goto LABEL_602;
  }
  v223 = strlen((const char *)*MEMORY[0x1E0CFBE00]);
  v224 = v223;
  if ((v7 & 0x80) != 0)
  {
    if (v223 == -1)
      goto LABEL_843;
    v225 = *(const void **)a2;
    v7 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v225 = (const void *)a2;
    if (v224 == -1)
LABEL_843:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 >= v224)
    v280 = v224;
  else
    v280 = v7;
  if (!memcmp(v225, (const void *)*MEMORY[0x1E0CFBE00], v280) && v7 == v224)
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v281 = (void *)qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v281 = (void *)qword_1ED70F248;
    }
    __p[0] = v281;
    __p[1] = off_1ED70F250;
    if (off_1ED70F250)
    {
      v282 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v283 = __ldxr(v282);
      while (__stxr(v283 + 1, v282));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v284 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v284)
      goto LABEL_821;
    v285 = xpc_dictionary_create(0, 0, 0);
    v286 = v285;
    if (v285)
    {
      *(_QWORD *)&__dst[0] = v285;
    }
    else
    {
      v286 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v286;
      if (!v286)
      {
        v311 = xpc_null_create();
        v286 = 0;
        goto LABEL_617;
      }
    }
    if (MEMORY[0x1C3B8CD78](v286) == v12)
    {
      xpc_retain(v286);
LABEL_618:
      xpc_release(v286);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v323 = (const char *)a2;
      else
        v323 = *(const char **)a2;
      v456 = xpc_string_create(v323);
      if (!v456)
        v456 = xpc_null_create();
      v324 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v324;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v456, &v457);
      xpc_release(v457);
      v457 = 0;
      xpc_release(v456);
      v456 = 0;
      if (v473 >= 0)
        v325 = (const char *)&v471;
      else
        v325 = v471;
      v454 = xpc_string_create(v325);
      if (!v454)
        v454 = xpc_null_create();
      v326 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v326;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v454, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v454);
      v454 = 0;
      goto LABEL_821;
    }
    v311 = xpc_null_create();
LABEL_617:
    *(_QWORD *)&__dst[0] = v311;
    goto LABEL_618;
  }
  if (!std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E0CFB6B8]))
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v294 = (void *)qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v294 = (void *)qword_1ED70F248;
    }
    __p[0] = v294;
    __p[1] = off_1ED70F250;
    if (off_1ED70F250)
    {
      v295 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v296 = __ldxr(v295);
      while (__stxr(v296 + 1, v295));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v297 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v297)
      goto LABEL_821;
    v298 = xpc_dictionary_create(0, 0, 0);
    v299 = v298;
    if (v298)
    {
      *(_QWORD *)&__dst[0] = v298;
    }
    else
    {
      v299 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v299;
      if (!v299)
      {
        v322 = xpc_null_create();
        v299 = 0;
        goto LABEL_638;
      }
    }
    if (MEMORY[0x1C3B8CD78](v299) == v12)
    {
      xpc_retain(v299);
LABEL_639:
      xpc_release(v299);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v329 = (const char *)a2;
      else
        v329 = *(const char **)a2;
      v452 = xpc_string_create(v329);
      if (!v452)
        v452 = xpc_null_create();
      v330 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v330;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v452, &v453);
      xpc_release(v453);
      v453 = 0;
      xpc_release(v452);
      v452 = 0;
      if (v473 >= 0)
        v331 = (const char *)&v471;
      else
        v331 = v471;
      v450 = xpc_string_create(v331);
      if (!v450)
        v450 = xpc_null_create();
      v332 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v332;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v450, &v451);
      xpc_release(v451);
      v451 = 0;
      xpc_release(v450);
      v450 = 0;
      goto LABEL_821;
    }
    v322 = xpc_null_create();
LABEL_638:
    *(_QWORD *)&__dst[0] = v322;
    goto LABEL_639;
  }
  if (!std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E0CFBE88]))
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v305 = (void *)qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v305 = (void *)qword_1ED70F248;
    }
    __p[0] = v305;
    __p[1] = off_1ED70F250;
    if (off_1ED70F250)
    {
      v306 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v307 = __ldxr(v306);
      while (__stxr(v307 + 1, v306));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v308 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v308)
      goto LABEL_821;
    v309 = xpc_dictionary_create(0, 0, 0);
    v310 = v309;
    if (v309)
    {
      *(_QWORD *)&__dst[0] = v309;
    }
    else
    {
      v310 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v310;
      if (!v310)
      {
        v327 = xpc_null_create();
        v310 = 0;
        goto LABEL_655;
      }
    }
    if (MEMORY[0x1C3B8CD78](v310) == v12)
    {
      xpc_retain(v310);
LABEL_656:
      xpc_release(v310);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v334 = (const char *)a2;
      else
        v334 = *(const char **)a2;
      v448 = xpc_string_create(v334);
      if (!v448)
        v448 = xpc_null_create();
      v335 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v335;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v448, &v449);
      xpc_release(v449);
      v449 = 0;
      xpc_release(v448);
      v448 = 0;
      if (v473 >= 0)
        v336 = (const char *)&v471;
      else
        v336 = v471;
      v446 = xpc_string_create(v336);
      if (!v446)
        v446 = xpc_null_create();
      v337 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v337;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v446, &v447);
      xpc_release(v447);
      v447 = 0;
      xpc_release(v446);
      v446 = 0;
      if (v473 >= 0)
        v338 = (const char *)&v471;
      else
        v338 = v471;
      v339 = strlen((const char *)*MEMORY[0x1E0CFB9A0]);
      if (!strncasecmp(v338, (const char *)*MEMORY[0x1E0CFB9A0], v339))
      {
        LODWORD(value) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v340 = (void *)qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v340 = (void *)qword_1ED70F248;
        }
        __p[0] = v340;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v341 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v342 = __ldxr(v341);
          while (__stxr(v342 + 1, v341));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v343 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        v344 = *MEMORY[0x1E0CFC0D0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFC0D0]);
        Preferences::getPreference<unsigned int>(v343, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v444 = xpc_int64_create(value);
        if (!v444)
          v444 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = v344;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v444, &v445);
        xpc_release(v445);
        v445 = 0;
        xpc_release(v444);
        v444 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v345 = (void *)qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v345 = (void *)qword_1ED70F248;
        }
        __p[0] = v345;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v346 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v347 = __ldxr(v346);
          while (__stxr(v347 + 1, v346));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v348 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        v349 = *MEMORY[0x1E0CFC088];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFC088]);
        Preferences::getPreference<unsigned int>(v348, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v442 = xpc_int64_create(value);
        if (!v442)
          v442 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = v349;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v442, &v443);
        xpc_release(v443);
        v443 = 0;
        xpc_release(v442);
        v442 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v350 = (void *)qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v350 = (void *)qword_1ED70F248;
        }
        __p[0] = v350;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v351 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v352 = __ldxr(v351);
          while (__stxr(v352 + 1, v351));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v353 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        v354 = *MEMORY[0x1E0CFBEF0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFBEF0]);
        Preferences::getPreference<unsigned int>(v353, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v440 = xpc_int64_create(value);
        if (!v440)
          v440 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = v354;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v440, &v441);
        xpc_release(v441);
        v441 = 0;
        xpc_release(v440);
        v440 = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v355 = (void *)qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v355 = (void *)qword_1ED70F248;
        }
        __p[0] = v355;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v356 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v357 = __ldxr(v356);
          while (__stxr(v357 + 1, v356));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v358 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        v359 = *MEMORY[0x1E0CFBEE8];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFBEE8]);
        Preferences::getPreference<unsigned int>(v358, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v438 = xpc_int64_create(value);
        if (!v438)
          v438 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = v359;
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v438, &v439);
        xpc_release(v439);
        v439 = 0;
        xpc_release(v438);
        v438 = 0;
      }
      goto LABEL_821;
    }
    v327 = xpc_null_create();
LABEL_655:
    *(_QWORD *)&__dst[0] = v327;
    goto LABEL_656;
  }
  if (!std::string::compare((const std::string *)a2, "kSetWorkoutInfo"))
  {
    v471 = 0;
    v472 = 0;
    v473 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v312 = (void *)qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__dst);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
      v312 = (void *)qword_1ED70F248;
    }
    __p[0] = v312;
    __p[1] = off_1ED70F250;
    if (off_1ED70F250)
    {
      v313 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v314 = __ldxr(v313);
      while (__stxr(v314 + 1, v313));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
    v315 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
    if (!v315)
      goto LABEL_821;
    v316 = xpc_dictionary_create(0, 0, 0);
    v317 = v316;
    if (v316)
    {
      *(_QWORD *)&__dst[0] = v316;
    }
    else
    {
      v317 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v317;
      if (!v317)
      {
        v328 = xpc_null_create();
        v317 = 0;
        goto LABEL_709;
      }
    }
    if (MEMORY[0x1C3B8CD78](v317) == v12)
    {
      xpc_retain(v317);
LABEL_710:
      xpc_release(v317);
      xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
      xpc_release(*(xpc_object_t *)&__dst[0]);
      if (*(char *)(a2 + 23) >= 0)
        v360 = (const char *)a2;
      else
        v360 = *(const char **)a2;
      v436 = xpc_string_create(v360);
      if (!v436)
        v436 = xpc_null_create();
      v361 = *MEMORY[0x1E0CFB718];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v361;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v436, &v437);
      xpc_release(v437);
      v437 = 0;
      xpc_release(v436);
      v436 = 0;
      if (v473 >= 0)
        v362 = (const char *)&v471;
      else
        v362 = v471;
      v434 = xpc_string_create(v362);
      if (!v434)
        v434 = xpc_null_create();
      v363 = *MEMORY[0x1E0CFB4D0];
      *(_QWORD *)&__dst[0] = &v474;
      *((_QWORD *)&__dst[0] + 1) = v363;
      xpc::dict::object_proxy::operator=((uint64_t)__dst, &v434, &v435);
      xpc_release(v435);
      v435 = 0;
      xpc_release(v434);
      v434 = 0;
      if (v473 >= 0)
        v364 = (const char *)&v471;
      else
        v364 = v471;
      if (!strncasecmp(v364, "OVERRIDE", 8uLL))
      {
        LODWORD(value) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v365 = (void *)qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v365 = (void *)qword_1ED70F248;
        }
        __p[0] = v365;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v366 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v367 = __ldxr(v366);
          while (__stxr(v367 + 1, v366));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v368 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutType");
        Preferences::getPreference<unsigned int>(v368, (const char *)__dst, (ctu::cf *)&value);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v432 = xpc_int64_create(value);
        if (!v432)
          v432 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = "kKeyWorkoutType";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v432, &v433);
        xpc_release(v433);
        v433 = 0;
        xpc_release(v432);
        v432 = 0;
        LODWORD(v425) = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v369 = (void *)qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v369 = (void *)qword_1ED70F248;
        }
        __p[0] = v369;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v370 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v371 = __ldxr(v370);
          while (__stxr(v371 + 1, v370));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v372 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutState");
        Preferences::getPreference<unsigned int>(v372, (const char *)__dst, (ctu::cf *)&v425);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        *(_QWORD *)&v430[1] = xpc_int64_create(v425);
        if (!*(_QWORD *)&v430[1])
          *(_QWORD *)&v430[1] = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = "kKeyWorkoutState";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, (xpc_object_t *)&v430[1], &v431);
        xpc_release(v431);
        v431 = 0;
        xpc_release(*(xpc_object_t *)&v430[1]);
        memset(v430, 0, sizeof(v430));
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v373 = (void *)qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v373 = (void *)qword_1ED70F248;
        }
        __p[0] = v373;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v374 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v375 = __ldxr(v374);
          while (__stxr(v375 + 1, v374));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v376 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeyWorkoutLocation");
        Preferences::getPreference<unsigned int>(v376, (const char *)__dst, (ctu::cf *)v430);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        *(_QWORD *)&v428[1] = xpc_int64_create(v430[0]);
        if (!*(_QWORD *)&v428[1])
          *(_QWORD *)&v428[1] = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = "kKeyWorkoutLocation";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, (xpc_object_t *)&v428[1], &v429);
        xpc_release(v429);
        v429 = 0;
        xpc_release(*(xpc_object_t *)&v428[1]);
        memset(v428, 0, sizeof(v428));
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v377 = (void *)qword_1ED70F248;
        if (!qword_1ED70F248)
        {
          ABMProperties::create_default_global((ABMProperties *)__dst);
          std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
          std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
          v377 = (void *)qword_1ED70F248;
        }
        __p[0] = v377;
        __p[1] = off_1ED70F250;
        if (off_1ED70F250)
        {
          v378 = (unint64_t *)((char *)off_1ED70F250 + 8);
          do
            v379 = __ldxr(v378);
          while (__stxr(v379 + 1, v378));
        }
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v380 = (uint64_t (***)(_QWORD, uint64_t))__p[0];
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", "kKeySwimLocation");
        Preferences::getPreference<unsigned int>(v380, (const char *)__dst, (ctu::cf *)v428);
        if (SBYTE7(__dst[1]) < 0)
          operator delete(*(void **)&__dst[0]);
        std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        v426 = xpc_int64_create(v428[0]);
        if (!v426)
          v426 = xpc_null_create();
        *(_QWORD *)&__dst[0] = &v474;
        *((_QWORD *)&__dst[0] + 1) = "kKeySwimLocation";
        xpc::dict::object_proxy::operator=((uint64_t)__dst, &v426, &v427);
        xpc_release(v427);
        v427 = 0;
        xpc_release(v426);
        v426 = 0;
      }
      goto LABEL_821;
    }
    v328 = xpc_null_create();
LABEL_709:
    *(_QWORD *)&__dst[0] = v328;
    goto LABEL_710;
  }
  if (std::string::compare((const std::string *)a2, (const std::string::value_type *)*MEMORY[0x1E0CFAF90]))
    goto LABEL_823;
  v471 = 0;
  v472 = 0;
  v473 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v287 = (void *)qword_1ED70F248;
  if (!qword_1ED70F248)
  {
    ABMProperties::create_default_global((ABMProperties *)__dst);
    std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__dst);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__dst);
    v287 = (void *)qword_1ED70F248;
  }
  __p[0] = v287;
  __p[1] = off_1ED70F250;
  if (off_1ED70F250)
  {
    v288 = (unint64_t *)((char *)off_1ED70F250 + 8);
    do
      v289 = __ldxr(v288);
    while (__stxr(v289 + 1, v288));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__dst, (const void **)"AntennaSetting::", (const void **)a2);
  v290 = Preferences::getPreference<std::string>((uint64_t (***)(_QWORD, uint64_t))__p[0], (const char *)__dst);
  if (SBYTE7(__dst[1]) < 0)
    operator delete(*(void **)&__dst[0]);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
  if (v290)
  {
    v291 = xpc_dictionary_create(0, 0, 0);
    v292 = v291;
    if (v291)
    {
      *(_QWORD *)&__dst[0] = v291;
    }
    else
    {
      v292 = xpc_null_create();
      *(_QWORD *)&__dst[0] = v292;
      if (!v292)
      {
        v333 = xpc_null_create();
        v292 = 0;
        goto LABEL_762;
      }
    }
    if (MEMORY[0x1C3B8CD78](v292) == v12)
    {
      xpc_retain(v292);
      goto LABEL_763;
    }
    v333 = xpc_null_create();
LABEL_762:
    *(_QWORD *)&__dst[0] = v333;
LABEL_763:
    xpc_release(v292);
    xpc::dict::operator=(&v474, (xpc_object_t *)__dst);
    xpc_release(*(xpc_object_t *)&__dst[0]);
    v425 = 0xAAAAAAAAAAAAAAAALL;
    v381 = xpc_dictionary_create(0, 0, 0);
    v382 = v381;
    if (v381)
    {
      v425 = (int64_t)v381;
    }
    else
    {
      v382 = xpc_null_create();
      v425 = (int64_t)v382;
      if (!v382)
      {
        v383 = xpc_null_create();
        v382 = 0;
        goto LABEL_770;
      }
    }
    if (MEMORY[0x1C3B8CD78](v382) == v12)
    {
      xpc_retain(v382);
      goto LABEL_771;
    }
    v383 = xpc_null_create();
LABEL_770:
    v425 = (int64_t)v383;
LABEL_771:
    xpc_release(v382);
    if (*(char *)(a2 + 23) >= 0)
      v384 = (const char *)a2;
    else
      v384 = *(const char **)a2;
    v423 = xpc_string_create(v384);
    if (!v423)
      v423 = xpc_null_create();
    v385 = *MEMORY[0x1E0CFB718];
    *(_QWORD *)&__dst[0] = &v474;
    *((_QWORD *)&__dst[0] + 1) = v385;
    xpc::dict::object_proxy::operator=((uint64_t)__dst, &v423, &v424);
    xpc_release(v424);
    v424 = 0;
    xpc_release(v423);
    v423 = 0;
    memset(__dst, 170, 24);
    std::string::basic_string[abi:ne180100]<0>(__dst, "");
    v430[0] = 0x7FFF;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v386 = qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((__int128 *)__p);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      v386 = qword_1ED70F248;
    }
    value = v386;
    v422 = off_1ED70F250;
    if (off_1ED70F250)
    {
      v387 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v388 = __ldxr(v387);
      while (__stxr(v388 + 1, v387));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v389 = (uint64_t (***)(_QWORD, uint64_t))value;
    v390 = (void *)*MEMORY[0x1E0CFBB48];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFBB48]);
    Preferences::getPreference<std::string>(v389, (const char *)__p);
    if (v420 < 0)
      operator delete(__p[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    if (SBYTE7(__dst[1]) < 0)
    {
      if (*((_QWORD *)&__dst[0] + 1))
      {
        v391 = *(const char **)&__dst[0];
        goto LABEL_788;
      }
    }
    else if (BYTE7(__dst[1]))
    {
      v391 = (const char *)__dst;
LABEL_788:
      v417 = xpc_string_create(v391);
      if (!v417)
        v417 = xpc_null_create();
      __p[0] = &v425;
      __p[1] = v390;
      xpc::dict::object_proxy::operator=((uint64_t)__p, &v417, &v418);
      xpc_release(v418);
      v418 = 0;
      xpc_release(v417);
      v417 = 0;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v392 = qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((__int128 *)__p);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      v392 = qword_1ED70F248;
    }
    value = v392;
    v422 = off_1ED70F250;
    if (off_1ED70F250)
    {
      v393 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v394 = __ldxr(v393);
      while (__stxr(v394 + 1, v393));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v395 = (uint64_t (***)(_QWORD, uint64_t))value;
    v396 = (void *)*MEMORY[0x1E0CFB308];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFB308]);
    Preferences::getPreference<unsigned int>(v395, (const char *)__p, (ctu::cf *)v430);
    if (v420 < 0)
      operator delete(__p[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    v415 = xpc_int64_create(v430[0]);
    if (!v415)
      v415 = xpc_null_create();
    __p[0] = &v425;
    __p[1] = v396;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v415, &v416);
    xpc_release(v416);
    v416 = 0;
    xpc_release(v415);
    v415 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v397 = qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((__int128 *)__p);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      v397 = qword_1ED70F248;
    }
    value = v397;
    v422 = off_1ED70F250;
    if (off_1ED70F250)
    {
      v398 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v399 = __ldxr(v398);
      while (__stxr(v399 + 1, v398));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v400 = (uint64_t (***)(_QWORD, uint64_t))value;
    v401 = (void *)*MEMORY[0x1E0CFB4C8];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFB4C8]);
    Preferences::getPreference<unsigned int>(v400, (const char *)__p, (ctu::cf *)v430);
    if (v420 < 0)
      operator delete(__p[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    v413 = xpc_int64_create(v430[0]);
    if (!v413)
      v413 = xpc_null_create();
    __p[0] = &v425;
    __p[1] = v401;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v413, &v414);
    xpc_release(v414);
    v414 = 0;
    xpc_release(v413);
    v413 = 0;
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v402 = qword_1ED70F248;
    if (!qword_1ED70F248)
    {
      ABMProperties::create_default_global((ABMProperties *)__p);
      std::shared_ptr<ABMProperties>::operator=[abi:ne180100]((__int128 *)__p);
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      v402 = qword_1ED70F248;
    }
    value = v402;
    v422 = off_1ED70F250;
    if (off_1ED70F250)
    {
      v403 = (unint64_t *)((char *)off_1ED70F250 + 8);
      do
        v404 = __ldxr(v403);
      while (__stxr(v404 + 1, v403));
    }
    pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    v405 = (uint64_t (***)(_QWORD, uint64_t))value;
    v406 = (void *)*MEMORY[0x1E0CFB120];
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (const void **)"AntennaSetting::", (char *)*MEMORY[0x1E0CFB120]);
    Preferences::getPreference<unsigned int>(v405, (const char *)__p, (ctu::cf *)v430);
    if (v420 < 0)
      operator delete(__p[0]);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&value);
    v411 = xpc_int64_create(v430[0]);
    if (!v411)
      v411 = xpc_null_create();
    __p[0] = &v425;
    __p[1] = v406;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v411, &v412);
    xpc_release(v412);
    v412 = 0;
    xpc_release(v411);
    v411 = 0;
    xpc::dict::dict(&v409, (void **)&v425);
    v407 = (void *)*MEMORY[0x1E0CFB4D0];
    __p[0] = &v474;
    __p[1] = v407;
    xpc::dict::object_proxy::operator=((uint64_t)__p, &v409, &v410);
    xpc_release(v410);
    v410 = 0;
    xpc_release(v409);
    v409 = 0;
    if (SBYTE7(__dst[1]) < 0)
      operator delete(*(void **)&__dst[0]);
    xpc_release((xpc_object_t)v425);
  }
LABEL_821:
  if (SHIBYTE(v473) < 0)
    operator delete(v471);
LABEL_823:
  if (MEMORY[0x1C3B8CD78](v474) == v12)
  {
    v408 = **(antenna::Service::Internal ***)(a1 + 176);
    if (v408)
      antenna::Service::Internal::antennaSetProperty(v408, &v474);
  }
  xpc_release(v474);
}

void sub_1BF6DD640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,xpc_object_t object)
{
  uint64_t v29;

  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  xpc_release(*(xpc_object_t *)(v29 - 88));
  _Unwind_Resume(a1);
}

uint64_t Preferences::getPreference<std::string>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v6;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, a2);
  v3 = (const void *)(**a1)(a1, v6);
  if (v3)
  {
    v4 = ctu::cf::assign();
    CFRelease(v3);
  }
  else
  {
    v4 = 0;
  }
  MEMORY[0x1C3B8B878](&v6);
  return v4;
}

_QWORD *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *__dst, const void **a2, const void **a3)
{
  _QWORD *v3;
  int v4;
  size_t v5;
  int v6;
  size_t v7;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char *v14;
  const void *v15;

  v3 = __dst;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  v8 = v7 + v5;
  memset(__dst, 170, 24);
  if (v7 + v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 <= 0x16)
  {
    __dst[1] = 0;
    __dst[2] = 0;
    *__dst = 0;
    *((_BYTE *)__dst + 23) = v8;
    if (!v5)
      goto LABEL_18;
    goto LABEL_14;
  }
  v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v8 | 7) != 0x17)
    v11 = v8 | 7;
  v12 = v11 + 1;
  __dst = operator new(v11 + 1);
  v3[1] = v8;
  v3[2] = v12 | 0x8000000000000000;
  *v3 = __dst;
  v3 = __dst;
  if (v5)
  {
LABEL_14:
    if (v4 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    __dst = memmove(v3, v13, v5);
  }
LABEL_18:
  v14 = (char *)v3 + v5;
  if (v7)
  {
    if (v6 >= 0)
      v15 = a3;
    else
      v15 = *a3;
    __dst = memmove(v14, v15, v7);
  }
  v14[v7] = 0;
  return __dst;
}

_QWORD *std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, const void **a2, char *__s)
{
  int v6;
  size_t v7;
  _QWORD *result;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char *v14;

  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  result = (_QWORD *)strlen(__s);
  v9 = (unint64_t)result + v7;
  memset(a1, 170, 24);
  if ((unint64_t)result + v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (size_t)result;
  if (v9 <= 0x16)
  {
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    *((_BYTE *)a1 + 23) = v9;
    if (!v7)
      goto LABEL_15;
LABEL_11:
    if (v6 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    result = memmove(a1, v13, v7);
    goto LABEL_15;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  result = operator new(v11 + 1);
  a1[1] = v9;
  a1[2] = v12 | 0x8000000000000000;
  *a1 = result;
  a1 = result;
  if (v7)
    goto LABEL_11;
LABEL_15:
  v14 = (char *)a1 + v7;
  if (v10)
    result = memmove(v14, __s, v10);
  v14[v10] = 0;
  return result;
}

void AntennaModule::reportTransmitState(AntennaModule *this, void **a2)
{
  void *v3;
  const object *v4;
  CFTypeRef v5;
  CFTypeID v6;
  CFTypeRef v7;
  uint64_t (*v8)(uint64_t);
  const void *v9;
  size_t v10;
  void *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  void *aBlock;
  CFTypeRef v16;
  void *__dst[2];
  unint64_t v18;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v21;

  v21 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v4);
  v5 = cf;
  if (!cf || (v6 = CFGetTypeID(cf), v6 != CFDictionaryGetTypeID()))
  {
    v5 = 0;
    v21 = 0;
    v7 = cf;
    if (!cf)
      goto LABEL_10;
    goto LABEL_9;
  }
  v21 = v5;
  CFRetain(v5);
  v7 = cf;
  if (cf)
LABEL_9:
    CFRelease(v7);
LABEL_10:
  xpc_release(object);
  v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v5)
    v8 = 0;
  if (!v8)
  {
LABEL_28:
    if (!v5)
      return;
    goto LABEL_29;
  }
  v9 = (const void *)*MEMORY[0x1E0CFBC68];
  v10 = strlen((const char *)*MEMORY[0x1E0CFBC68]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = (void *)v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (void **)operator new(v13 + 1);
    __dst[1] = v11;
    v18 = v14 | 0x8000000000000000;
    __dst[0] = v12;
LABEL_21:
    memmove(v12, v9, (size_t)v11);
    *((_BYTE *)v11 + (_QWORD)v12) = 0;
    v5 = v21;
    v16 = v21;
    if (!v21)
      goto LABEL_23;
    goto LABEL_22;
  }
  HIBYTE(v18) = v10;
  v12 = __dst;
  if (v10)
    goto LABEL_21;
  LOBYTE(__dst[0]) = 0;
  v5 = v21;
  v16 = v21;
  if (v21)
LABEL_22:
    CFRetain(v5);
LABEL_23:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)this, (uint64_t)__dst, &v16, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (v16)
    CFRelease(v16);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_28;
  operator delete(__dst[0]);
  if (v5)
LABEL_29:
    CFRelease(v5);
}

void sub_1BF6DE5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19)
{
  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void sub_1BF6DE640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void AntennaModule::releasePowerAssertion(AntennaModule *this)
{
  unint64_t v1;
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string v9;

  v7 = 0xAAAAAAAAAAAAAAAALL;
  v8 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v7);
  v1 = v7;
  if (v7)
  {
    v2 = (char *)operator new(0x28uLL);
    strcpy(v2, "com.apple.AppleBasebandManager.Antenna");
    v3 = *(_QWORD *)(v1 + 104);
    std::string::__init_copy_ctor_external(&v9, v2, 0x26uLL);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 32))(v3, &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
    operator delete(v2);
  }
  v4 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v5 = (unint64_t *)(v8 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF6DE75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF6DE790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::createPowerAssertion(AntennaModule *this)
{
  unint64_t v1;
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  dispatch_object_t object;
  unint64_t v8;
  unint64_t v9;
  std::string v10;

  v8 = 0xAAAAAAAAAAAAAAAALL;
  v9 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)this + 80))(&v8);
  v1 = v8;
  if (v8)
  {
    v2 = (char *)operator new(0x28uLL);
    strcpy(v2, "com.apple.AppleBasebandManager.Antenna");
    v3 = *(_QWORD *)(v1 + 104);
    std::string::__init_copy_ctor_external(&v10, v2, 0x26uLL);
    (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v3 + 24))(&object, v3, &v10, 0);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    if (object)
      dispatch_release(object);
    operator delete(v2);
  }
  v4 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v5 = (unint64_t *)(v9 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF6DE8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  if (a17 < 0)
    operator delete(__p);
  operator delete(v17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1BF6DE8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void AntennaModule::processCallback(AntennaModule *this, xpc_object_t *a2)
{
  const char *v4;
  xpc_object_t value;
  const char *v6;
  size_t v7;
  const void *v8;
  unsigned __int8 v9;
  const void *v10;
  const void **v11;
  size_t v12;
  const void *v14;
  const void *v15;
  const void *v16;
  unint64_t v17;
  size_t v18;
  const void *v19;
  const void *v20;
  size_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _QWORD v28[2];
  xpc_object_t v29;
  xpc_object_t object[2];
  unint64_t v31;
  const void *__s1[3];

  v4 = (const char *)*MEMORY[0x1E0CFB680];
  if (xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB680]))
  {
    memset(__s1, 170, sizeof(__s1));
    value = xpc_dictionary_get_value(*a2, v4);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v6);
    xpc_release(object[0]);
    v7 = strlen((const char *)*MEMORY[0x1E0CFB5F8]);
    v8 = (const void *)v7;
    v9 = HIBYTE(__s1[2]);
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v7 != -1)
      {
        v11 = (const void **)__s1[0];
        v10 = __s1[1];
LABEL_10:
        if (v10 >= v8)
          v12 = (size_t)v8;
        else
          v12 = (size_t)v10;
        if (!memcmp(v11, (const void *)*MEMORY[0x1E0CFB5F8], v12) && v10 == v8)
        {
          AntennaModule::reportTransmitState(this, a2);
          v9 = HIBYTE(__s1[2]);
        }
        v14 = (const void *)*MEMORY[0x1E0CFB1C0];
        v15 = (const void *)strlen((const char *)*MEMORY[0x1E0CFB1C0]);
        v16 = v15;
        if ((v9 & 0x80) != 0)
        {
          if (v15 != (const void *)-1)
          {
            v17 = (unint64_t)__s1[1];
            if (__s1[1] >= v15)
              v19 = v15;
            else
              v19 = __s1[1];
            if (memcmp(__s1[0], v14, (size_t)v19))
              goto LABEL_43;
            goto LABEL_31;
          }
        }
        else if (v15 != (const void *)-1)
        {
          v17 = v9;
          if (v9 >= (unint64_t)v15)
            v18 = (size_t)v15;
          else
            v18 = v9;
          if (memcmp(__s1, v14, v18))
            goto LABEL_43;
LABEL_31:
          if ((const void *)v17 != v16)
          {
LABEL_43:
            if ((v9 & 0x80) != 0)
              operator delete((void *)__s1[0]);
            return;
          }
          v20 = (const void *)*MEMORY[0x1E0CFB5E0];
          v21 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
          if (v21 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v22 = (void *)v21;
          if (v21 >= 0x17)
          {
            v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v24 = v21 | 7;
            v25 = v24 + 1;
            v23 = operator new(v24 + 1);
            object[1] = v22;
            v31 = v25 | 0x8000000000000000;
            object[0] = v23;
          }
          else
          {
            HIBYTE(v31) = v21;
            v23 = object;
            if (!v21)
              goto LABEL_40;
          }
          memmove(v23, v20, (size_t)v22);
LABEL_40:
          *((_BYTE *)v22 + (_QWORD)v23) = 0;
          v26 = *MEMORY[0x1E0CFB1E8];
          v28[0] = a2;
          v28[1] = v26;
          xpc::dict::object_proxy::operator xpc::dict((uint64_t)v28, &v29);
          v27 = 0;
          Service::runCommand((uint64_t)this, (uint64_t)object, &v29, &v27);
          xpc_release(v29);
          v29 = 0;
          if (SHIBYTE(v31) < 0)
            operator delete(object[0]);
          v9 = HIBYTE(__s1[2]);
          goto LABEL_43;
        }
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else if (v7 != -1)
    {
      v10 = (const void *)HIBYTE(__s1[2]);
      v11 = __s1;
      goto LABEL_10;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
}

void sub_1BF6DEB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791F460;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791F460;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void **xpc::dict::operator=(void **a1, xpc_object_t object)
{
  xpc_object_t v3;
  void *v4;

  if (object)
  {
    v3 = object;
    xpc_retain(object);
  }
  else
  {
    v3 = xpc_null_create();
  }
  v4 = *a1;
  *a1 = v3;
  xpc_release(v4);
  return a1;
}

void std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1}::operator() const(AntennaModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AntennaModule *,std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule *)#1},std::allocator<AntennaModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrI"
                                "T_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI13AntennaModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AntennaModule> ctu::SharedSynchronizable<AntennaModule>::make_shared_ptr<AntennaModule>(AntennaModule*)::{lambda(AntennaModule*)#1}::operator() const(AntennaModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791F460;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<AntennaModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791F460;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void AntennaModule::init(void)::$_0::operator()(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  _QWORD *v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  size_t v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  const void *v35;
  size_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void **v41;
  const void *v42;
  size_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void **v48;
  const void *v49;
  size_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void **v55;
  const void *v56;
  size_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void **v62;
  const void *v63;
  size_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void **v69;
  const void *v70;
  size_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  void **v76;
  const void *v77;
  size_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void **v83;
  const void *v84;
  size_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void **v90;
  const void *v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void **v97;
  const void *v98;
  size_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void **v104;
  const void *v105;
  size_t v106;
  void *v107;
  uint64_t *v108;
  void **v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  void **v113;
  signed __int8 v114;
  __int128 v115;
  uint8_t *v116;
  size_t v117;
  uint64_t v118;
  BOOL v119;
  void **v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  _QWORD *v125;
  uint8_t *v126;
  std::string *v127;
  _QWORD *v128;
  uint64_t v129;
  void **v130;
  _QWORD *v131;
  std::string *v133;
  dispatch_object_t object;
  void *v135;
  dispatch_object_t v136;
  uint64_t v137;
  std::__shared_weak_count *v138;
  _QWORD aBlock[6];
  std::__shared_weak_count *v140;
  void *v141;
  dispatch_object_t v142;
  uint8_t buf[8];
  uint64_t v144;
  unint64_t v145;
  void *v146;
  uint64_t *v147;
  unint64_t v148;
  void *v149[2];
  unint64_t v150;
  void *v151[2];
  unint64_t v152;
  void *v153[2];
  unint64_t v154;
  void *v155[2];
  unint64_t v156;
  void *v157[2];
  unint64_t v158;
  void *v159[2];
  unint64_t v160;
  void *v161[2];
  unint64_t v162;
  void *v163[2];
  unint64_t v164;
  void *v165[2];
  unint64_t v166;
  void *v167[2];
  char v168;
  void *__p[2];
  unint64_t v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v2 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v4 = *(_QWORD *)(a1 + 120), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v141 = (void *)0xAAAAAAAAAAAAAAAALL;
  v142 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v11 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN13AntennaModule4initEvENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_31_3;
  aBlock[4] = a1;
  aBlock[5] = v4;
  v140 = v6;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = _Block_copy(aBlock);
  v14 = *(NSObject **)(a1 + 136);
  if (v14)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v141 = v13;
  v142 = v14;
  v15 = operator new(0x10uLL);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)buf = v11;
  v144 = 0x40000000;
  v145 = (unint64_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v146 = &__block_descriptor_tmp_13_8;
  v147 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v17 = unk_1ED70F6A0;
    v137 = GetABMLogServer(void)::sLogServer;
    v138 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_20;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v17 = unk_1ED70F6A0;
    v137 = GetABMLogServer(void)::sLogServer;
    v138 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_20;
  }
  v18 = (unint64_t *)(v17 + 8);
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
LABEL_20:
  if (v13)
  {
    v135 = _Block_copy(v13);
    v136 = v14;
    if (!v14)
      goto LABEL_23;
    goto LABEL_22;
  }
  v135 = 0;
  v136 = v14;
  if (v14)
LABEL_22:
    dispatch_retain(v14);
LABEL_23:
  v20 = *(NSObject **)(a1 + 144);
  object = v20;
  if (v20)
    dispatch_retain(v20);
  antenna::Service::Service(v15, &v137, (uint64_t)&v135, &object);
  v21 = operator new(0x20uLL);
  *v21 = off_1E791F560;
  v21[1] = 0;
  v21[2] = 0;
  v21[3] = v15;
  v22 = *(std::__shared_weak_count **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v15;
  *(_QWORD *)(a1 + 184) = v21;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (object)
    dispatch_release(object);
  if (v136)
    dispatch_release(v136);
  if (v135)
    _Block_release(v135);
  v25 = v138;
  if (v138)
  {
    v26 = (unint64_t *)&v138->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = (const void *)*MEMORY[0x1E0CFB990];
  v29 = strlen((const char *)*MEMORY[0x1E0CFB990]);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    v31 = operator new(v32 + 1);
    v144 = v30;
    v145 = v33 | 0x8000000000000000;
    *(_QWORD *)buf = v31;
    goto LABEL_48;
  }
  HIBYTE(v145) = v29;
  v31 = buf;
  if (v29)
LABEL_48:
    memmove(v31, v28, v30);
  *((_BYTE *)v31 + v30) = 0;
  v34 = &v146;
  v35 = (const void *)*MEMORY[0x1E0CFB3B0];
  v36 = strlen((const char *)*MEMORY[0x1E0CFB3B0]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v38 = v36 | 7;
    v39 = v38 + 1;
    v40 = operator new(v38 + 1);
    v147 = (uint64_t *)v37;
    v148 = v39 | 0x8000000000000000;
    v146 = v40;
    v34 = (void **)v40;
    goto LABEL_56;
  }
  HIBYTE(v148) = v36;
  if (v36)
LABEL_56:
    memmove(v34, v35, v37);
  *((_BYTE *)v34 + v37) = 0;
  v41 = v149;
  v42 = (const void *)*MEMORY[0x1E0CFB5B8];
  v43 = strlen((const char *)*MEMORY[0x1E0CFB5B8]);
  if (v43 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v44 = (void *)v43;
  if (v43 >= 0x17)
  {
    v45 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v43 | 7) != 0x17)
      v45 = v43 | 7;
    v46 = v45 + 1;
    v47 = operator new(v45 + 1);
    v149[1] = v44;
    v150 = v46 | 0x8000000000000000;
    v149[0] = v47;
    v41 = (void **)v47;
    goto LABEL_64;
  }
  HIBYTE(v150) = v43;
  if (v43)
LABEL_64:
    memmove(v41, v42, (size_t)v44);
  *((_BYTE *)v44 + (_QWORD)v41) = 0;
  v48 = v151;
  v49 = (const void *)*MEMORY[0x1E0CFB708];
  v50 = strlen((const char *)*MEMORY[0x1E0CFB708]);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v51 = (void *)v50;
  if (v50 >= 0x17)
  {
    v52 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v52 = v50 | 7;
    v53 = v52 + 1;
    v54 = operator new(v52 + 1);
    v151[1] = v51;
    v152 = v53 | 0x8000000000000000;
    v151[0] = v54;
    v48 = (void **)v54;
    goto LABEL_72;
  }
  HIBYTE(v152) = v50;
  if (v50)
LABEL_72:
    memmove(v48, v49, (size_t)v51);
  *((_BYTE *)v51 + (_QWORD)v48) = 0;
  v55 = v153;
  v56 = (const void *)*MEMORY[0x1E0CFBE18];
  v57 = strlen((const char *)*MEMORY[0x1E0CFBE18]);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v58 = (void *)v57;
  if (v57 >= 0x17)
  {
    v59 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v59 = v57 | 7;
    v60 = v59 + 1;
    v61 = operator new(v59 + 1);
    v153[1] = v58;
    v154 = v60 | 0x8000000000000000;
    v153[0] = v61;
    v55 = (void **)v61;
    goto LABEL_80;
  }
  HIBYTE(v154) = v57;
  if (v57)
LABEL_80:
    memmove(v55, v56, (size_t)v58);
  *((_BYTE *)v58 + (_QWORD)v55) = 0;
  v62 = v155;
  v63 = (const void *)*MEMORY[0x1E0CFBE40];
  v64 = strlen((const char *)*MEMORY[0x1E0CFBE40]);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v65 = (void *)v64;
  if (v64 >= 0x17)
  {
    v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v66 = v64 | 7;
    v67 = v66 + 1;
    v68 = operator new(v66 + 1);
    v155[1] = v65;
    v156 = v67 | 0x8000000000000000;
    v155[0] = v68;
    v62 = (void **)v68;
    goto LABEL_88;
  }
  HIBYTE(v156) = v64;
  if (v64)
LABEL_88:
    memmove(v62, v63, (size_t)v65);
  *((_BYTE *)v65 + (_QWORD)v62) = 0;
  v69 = v157;
  v70 = (const void *)*MEMORY[0x1E0CFB6B0];
  v71 = strlen((const char *)*MEMORY[0x1E0CFB6B0]);
  if (v71 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v72 = (void *)v71;
  if (v71 >= 0x17)
  {
    v73 = (v71 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v71 | 7) != 0x17)
      v73 = v71 | 7;
    v74 = v73 + 1;
    v75 = operator new(v73 + 1);
    v157[1] = v72;
    v158 = v74 | 0x8000000000000000;
    v157[0] = v75;
    v69 = (void **)v75;
    goto LABEL_96;
  }
  HIBYTE(v158) = v71;
  if (v71)
LABEL_96:
    memmove(v69, v70, (size_t)v72);
  *((_BYTE *)v72 + (_QWORD)v69) = 0;
  v76 = v159;
  v77 = (const void *)*MEMORY[0x1E0CFBE10];
  v78 = strlen((const char *)*MEMORY[0x1E0CFBE10]);
  if (v78 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v79 = (void *)v78;
  if (v78 >= 0x17)
  {
    v80 = (v78 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v78 | 7) != 0x17)
      v80 = v78 | 7;
    v81 = v80 + 1;
    v82 = operator new(v80 + 1);
    v159[1] = v79;
    v160 = v81 | 0x8000000000000000;
    v159[0] = v82;
    v76 = (void **)v82;
    goto LABEL_104;
  }
  HIBYTE(v160) = v78;
  if (v78)
LABEL_104:
    memmove(v76, v77, (size_t)v79);
  *((_BYTE *)v79 + (_QWORD)v76) = 0;
  v83 = v161;
  v84 = (const void *)*MEMORY[0x1E0CFBE00];
  v85 = strlen((const char *)*MEMORY[0x1E0CFBE00]);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v86 = (void *)v85;
  if (v85 >= 0x17)
  {
    v87 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v87 = v85 | 7;
    v88 = v87 + 1;
    v89 = operator new(v87 + 1);
    v161[1] = v86;
    v162 = v88 | 0x8000000000000000;
    v161[0] = v89;
    v83 = (void **)v89;
    goto LABEL_112;
  }
  HIBYTE(v162) = v85;
  if (v85)
LABEL_112:
    memmove(v83, v84, (size_t)v86);
  *((_BYTE *)v86 + (_QWORD)v83) = 0;
  v90 = v163;
  v91 = (const void *)*MEMORY[0x1E0CFB6B8];
  v92 = strlen((const char *)*MEMORY[0x1E0CFB6B8]);
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v93 = (void *)v92;
  if (v92 >= 0x17)
  {
    v94 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v94 = v92 | 7;
    v95 = v94 + 1;
    v96 = operator new(v94 + 1);
    v163[1] = v93;
    v164 = v95 | 0x8000000000000000;
    v163[0] = v96;
    v90 = (void **)v96;
    goto LABEL_120;
  }
  HIBYTE(v164) = v92;
  if (v92)
LABEL_120:
    memmove(v90, v91, (size_t)v93);
  *((_BYTE *)v93 + (_QWORD)v90) = 0;
  v97 = v165;
  v98 = (const void *)*MEMORY[0x1E0CFBE88];
  v99 = strlen((const char *)*MEMORY[0x1E0CFBE88]);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v100 = (void *)v99;
  if (v99 >= 0x17)
  {
    v101 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v101 = v99 | 7;
    v102 = v101 + 1;
    v103 = operator new(v101 + 1);
    v165[1] = v100;
    v166 = v102 | 0x8000000000000000;
    v165[0] = v103;
    v97 = (void **)v103;
    goto LABEL_128;
  }
  HIBYTE(v166) = v99;
  if (v99)
LABEL_128:
    memmove(v97, v98, (size_t)v100);
  *((_BYTE *)v100 + (_QWORD)v97) = 0;
  v168 = 15;
  strcpy((char *)v167, "kSetWorkoutInfo");
  v104 = __p;
  v105 = (const void *)*MEMORY[0x1E0CFAF90];
  v106 = strlen((const char *)*MEMORY[0x1E0CFAF90]);
  if (v106 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v107 = (void *)v106;
  if (v106 >= 0x17)
  {
    v122 = (v106 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v106 | 7) != 0x17)
      v122 = v106 | 7;
    v123 = v122 + 1;
    v124 = operator new(v122 + 1);
    __p[1] = v107;
    v170 = v123 | 0x8000000000000000;
    __p[0] = v124;
    v104 = (void **)v124;
  }
  else
  {
    HIBYTE(v170) = v106;
    if (!v106)
    {
      LOBYTE(__p[0]) = 0;
      v109 = (void **)(a1 + 152);
      v108 = *(uint64_t **)(a1 + 152);
      if (v108)
        goto LABEL_133;
LABEL_160:
      v111 = 0;
      goto LABEL_164;
    }
  }
  memmove(v104, v105, (size_t)v107);
  *((_BYTE *)v107 + (_QWORD)v104) = 0;
  v109 = (void **)(a1 + 152);
  v108 = *(uint64_t **)(a1 + 152);
  if (!v108)
    goto LABEL_160;
LABEL_133:
  v110 = 0;
  v111 = 0;
  do
  {
    v112 = &buf[v110];
    v113 = (void **)(v108 + 1);
    if (&buf[v110] != (uint8_t *)(v108 + 1))
    {
      v114 = v112[23];
      if (*((char *)v108 + 31) < 0)
      {
        if (v114 >= 0)
          v116 = &buf[v110];
        else
          v116 = *(uint8_t **)&buf[v110];
        if (v114 >= 0)
          v117 = v112[23];
        else
          v117 = *(_QWORD *)&buf[v110 + 8];
        std::string::__assign_no_alias<false>(v113, v116, v117);
      }
      else if ((v112[23] & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v113, *(void **)&buf[v110], *(_QWORD *)&buf[v110 + 8]);
      }
      else
      {
        v115 = *(_OWORD *)v112;
        v108[3] = *((_QWORD *)v112 + 2);
        *(_OWORD *)v113 = v115;
      }
    }
    v109 = (void **)*v109;
    v108 = (uint64_t *)*v108;
    ++v111;
    v118 = v110 + 24;
    if (!v108)
      break;
    v119 = v110 == 288;
    v110 += 24;
  }
  while (!v119);
  if (v108)
  {
    if (v109)
    {
      v120 = (void **)*v109;
      if (*v109)
      {
        *v109 = 0;
        do
        {
          v121 = (void **)*v120;
          if (*((char *)v120 + 31) < 0)
            operator delete(v120[1]);
          operator delete(v120);
          v120 = v121;
        }
        while (v121);
      }
    }
    goto LABEL_169;
  }
  if (v118 == 312)
    goto LABEL_169;
LABEL_164:
  v125 = operator new(0x20uLL);
  v126 = &buf[24 * v111];
  *v125 = 0;
  v127 = (std::string *)(v125 + 1);
  if ((char)v126[23] < 0)
  {
    std::string::__init_copy_ctor_external(v127, *(const std::string::value_type **)v126, *((_QWORD *)v126 + 1));
  }
  else
  {
    *(_OWORD *)&v127->__r_.__value_.__l.__data_ = *(_OWORD *)v126;
    v125[3] = *((_QWORD *)v126 + 2);
  }
  v128 = v125;
  v129 = v111 - 12;
  if (v111 != 12)
  {
    v130 = &v146 + 3 * v111;
    v131 = v125;
    do
    {
      v128 = operator new(0x20uLL);
      *v128 = 0;
      v133 = (std::string *)(v128 + 1);
      if (*((char *)v130 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v133, (const std::string::value_type *)*v130, (std::string::size_type)v130[1]);
      }
      else
      {
        *(_OWORD *)&v133->__r_.__value_.__l.__data_ = *(_OWORD *)v130;
        v128[3] = v130[2];
      }
      *v131 = v128;
      v130 += 3;
      v131 = v128;
    }
    while (!__CFADD__(v129++, 1));
  }
  *v128 = *v109;
  *v109 = v125;
LABEL_169:
  if (SHIBYTE(v170) < 0)
  {
    operator delete(__p[0]);
    if ((v168 & 0x80000000) == 0)
    {
LABEL_171:
      if ((SHIBYTE(v166) & 0x80000000) == 0)
        goto LABEL_172;
      goto LABEL_191;
    }
  }
  else if ((v168 & 0x80000000) == 0)
  {
    goto LABEL_171;
  }
  operator delete(v167[0]);
  if ((SHIBYTE(v166) & 0x80000000) == 0)
  {
LABEL_172:
    if ((SHIBYTE(v164) & 0x80000000) == 0)
      goto LABEL_173;
    goto LABEL_192;
  }
LABEL_191:
  operator delete(v165[0]);
  if ((SHIBYTE(v164) & 0x80000000) == 0)
  {
LABEL_173:
    if ((SHIBYTE(v162) & 0x80000000) == 0)
      goto LABEL_174;
    goto LABEL_193;
  }
LABEL_192:
  operator delete(v163[0]);
  if ((SHIBYTE(v162) & 0x80000000) == 0)
  {
LABEL_174:
    if ((SHIBYTE(v160) & 0x80000000) == 0)
      goto LABEL_175;
    goto LABEL_194;
  }
LABEL_193:
  operator delete(v161[0]);
  if ((SHIBYTE(v160) & 0x80000000) == 0)
  {
LABEL_175:
    if ((SHIBYTE(v158) & 0x80000000) == 0)
      goto LABEL_176;
    goto LABEL_195;
  }
LABEL_194:
  operator delete(v159[0]);
  if ((SHIBYTE(v158) & 0x80000000) == 0)
  {
LABEL_176:
    if ((SHIBYTE(v156) & 0x80000000) == 0)
      goto LABEL_177;
    goto LABEL_196;
  }
LABEL_195:
  operator delete(v157[0]);
  if ((SHIBYTE(v156) & 0x80000000) == 0)
  {
LABEL_177:
    if ((SHIBYTE(v154) & 0x80000000) == 0)
      goto LABEL_178;
    goto LABEL_197;
  }
LABEL_196:
  operator delete(v155[0]);
  if ((SHIBYTE(v154) & 0x80000000) == 0)
  {
LABEL_178:
    if ((SHIBYTE(v152) & 0x80000000) == 0)
      goto LABEL_179;
    goto LABEL_198;
  }
LABEL_197:
  operator delete(v153[0]);
  if ((SHIBYTE(v152) & 0x80000000) == 0)
  {
LABEL_179:
    if ((SHIBYTE(v150) & 0x80000000) == 0)
      goto LABEL_180;
    goto LABEL_199;
  }
LABEL_198:
  operator delete(v151[0]);
  if ((SHIBYTE(v150) & 0x80000000) == 0)
  {
LABEL_180:
    if ((SHIBYTE(v148) & 0x80000000) == 0)
      goto LABEL_181;
LABEL_200:
    operator delete(v146);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_182;
    goto LABEL_201;
  }
LABEL_199:
  operator delete(v149[0]);
  if (SHIBYTE(v148) < 0)
    goto LABEL_200;
LABEL_181:
  if ((SHIBYTE(v145) & 0x80000000) == 0)
    goto LABEL_182;
LABEL_201:
  operator delete(*(void **)buf);
LABEL_182:
  AntennaModule::initializeProperty((AntennaModule *)a1);
  if (v142)
    dispatch_release(v142);
  if (v141)
    _Block_release(v141);
  if (v140)
    std::__shared_weak_count::__release_weak(v140);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF6DFBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *__p;
  char a80;
  std::__shared_weak_count *v80;
  void *v81;

  operator delete(v81);
  if (a80 < 0)
  {
    operator delete(__p);
    if ((a78 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a78 & 0x80000000) == 0)
  {
LABEL_3:
    if (a76 < 0)
      goto LABEL_4;
    goto LABEL_17;
  }
  operator delete(a77);
  if (a76 < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a74 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    if (a72 < 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a73);
  if (a72 < 0)
  {
LABEL_6:
    operator delete(a71);
    if ((a70 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  if ((a70 & 0x80000000) == 0)
  {
LABEL_7:
    if (a64 < 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a65);
  if (a64 < 0)
  {
LABEL_8:
    operator delete(a59);
    if ((a58 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  if ((a58 & 0x80000000) == 0)
  {
LABEL_9:
    if (a52 < 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a53);
  if (a52 < 0)
  {
LABEL_10:
    operator delete(a47);
    if ((a46 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if (a40 < 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if (a40 < 0)
  {
LABEL_12:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_28:
      dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a21);
      if (a20)
        std::__shared_weak_count::__release_weak(a20);
      std::__shared_weak_count::__release_weak(v80);
      _Unwind_Resume(a1);
    }
LABEL_27:
    operator delete(a23);
    goto LABEL_28;
  }
LABEL_26:
  operator delete(a29);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_28;
  goto LABEL_27;
}

void sub_1BF6DFC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *a71;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  std::__shared_weak_count *v80;

  if (a80 < 0)
  {
    operator delete(a79);
    if ((a78 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a78 & 0x80000000) == 0)
  {
LABEL_3:
    if (a76 < 0)
      goto LABEL_4;
    goto LABEL_17;
  }
  operator delete(a77);
  if (a76 < 0)
  {
LABEL_4:
    operator delete(a75);
    if ((a74 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  if ((a74 & 0x80000000) == 0)
  {
LABEL_5:
    if (a72 < 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(a73);
  if (a72 < 0)
  {
LABEL_6:
    operator delete(a71);
    if ((a70 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  if ((a70 & 0x80000000) == 0)
  {
LABEL_7:
    if (a64 < 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(a65);
  if (a64 < 0)
  {
LABEL_8:
    operator delete(a59);
    if ((a58 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  if ((a58 & 0x80000000) == 0)
  {
LABEL_9:
    if (a52 < 0)
      goto LABEL_10;
    goto LABEL_23;
  }
LABEL_22:
  operator delete(a53);
  if (a52 < 0)
  {
LABEL_10:
    operator delete(a47);
    if ((a46 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_24;
  }
LABEL_23:
  if ((a46 & 0x80000000) == 0)
  {
LABEL_11:
    if (a40 < 0)
      goto LABEL_12;
    goto LABEL_25;
  }
LABEL_24:
  operator delete(a41);
  if (a40 < 0)
  {
LABEL_12:
    operator delete(a35);
    if ((a34 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_25:
  if ((a34 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_28:
      dispatch::callback<void({block_pointer})(xpc::dict)>::~callback((uint64_t)&a21);
      if (a20)
        std::__shared_weak_count::__release_weak(a20);
      std::__shared_weak_count::__release_weak(v80);
      _Unwind_Resume(a1);
    }
LABEL_27:
    operator delete(a23);
    goto LABEL_28;
  }
LABEL_26:
  operator delete(a29);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_28;
  goto LABEL_27;
}

void sub_1BF6DFC94(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF6DFC9CLL);
  JUMPOUT(0x1BF6DFE40);
}

void sub_1BF6DFCD8()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF6DFCE0);
}

void sub_1BF6DFE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void **v23;

  while (1)
  {
    if (*((char *)v23 - 1) < 0)
      operator delete(*(v23 - 3));
    v23 -= 3;
    if (v23 == (void **)&a23)
      JUMPOUT(0x1BF6DFE14);
  }
}

void ___ZZN13AntennaModule4initEvENK3__0clEv_block_invoke(_QWORD *a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  AntennaModule *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (AntennaModule *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
        goto LABEL_7;
      }
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      if (v8)
LABEL_7:
        AntennaModule::processCallback(v5, a2);
    }
  }
}

void std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<antenna::Service *,std::shared_ptr<antenna::Service>::__shared_ptr_default_delete<antenna::Service,antenna::Service>,std::allocator<antenna::Service>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF7443AFLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF7443AFLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF7443AFLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF7443AFLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE20execute_wrapped_syncIZNS1_4initEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  AntennaModule::init(void)::$_0::operator()(**(_QWORD **)(a1 + 40));
}

void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791F5C8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIK13AntennaModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIK13AntennaModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  CMOnBodyDelegate ***v5;
  ctu *v6;
  uint64_t v7;
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ctu *v12;
  xpc_object_t object;

  v2 = *a1;
  v3 = **a1;
  v4 = 3760250880;
  if (MEMORY[0x1C3B8CD78]((*a1)[1]) == MEMORY[0x1E0C812F8])
  {
    v5 = *(CMOnBodyDelegate ****)(v3 + 176);
    if (v5)
    {
      v6 = (ctu *)v2[1];
      v12 = v6;
      if (v6)
      {
        xpc_retain(v6);
      }
      else
      {
        v6 = (ctu *)xpc_null_create();
        v12 = v6;
      }
      antenna::Service::setMotionThresholds(v5, &v12);
      xpc_release(v6);
      v4 = 0;
      v12 = 0;
    }
  }
  v7 = v2[2];
  object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v7 + 16))(v7, v4, &object);
  xpc_release(object);
  v8 = (const void *)v2[2];
  if (v8)
    _Block_release(v8);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF6E02F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  v13 = v12;
  xpc_release(v13);
  v15 = *(const void **)(v11 + 16);
  if (v15)
    _Block_release(v15);
  xpc_release(*(xpc_object_t *)(v11 + 8));
  operator delete((void *)v11);
  v16 = (std::__shared_weak_count *)v10[2];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  xpc_object_t v4;
  NSObject ***v5;
  xpc_object_t v6;
  const void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  xpc_object_t object;
  xpc_object_t v12;
  unsigned int v13;

  v2 = *a1;
  v3 = **a1;
  v13 = -534716416;
  v4 = xpc_null_create();
  v12 = v4;
  if (MEMORY[0x1C3B8CD78](v2[1]) == MEMORY[0x1E0C812F8])
  {
    v5 = *(NSObject ****)(v3 + 176);
    if (v5)
    {
      antenna::Service::antennaGetProperty(v5, (void **)v2 + 1, &object);
      v6 = object;
      object = xpc_null_create();
      v12 = v6;
      xpc_release(v4);
      xpc_release(object);
      v13 = 0;
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v13, &v12);
  xpc_release(v12);
  v7 = (const void *)v2[2];
  if (v7)
    _Block_release(v7);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v8 = (std::__shared_weak_count *)a1[2];
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  operator delete(a1);
}

void sub_1BF6E04CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  _QWORD *v12;
  xpc_object_t *v13;
  void *v14;
  const void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;

  xpc_release(v14);
  v16 = (const void *)v12[2];
  if (v16)
    _Block_release(v16);
  xpc_release(*v13);
  operator delete(v12);
  v17 = (std::__shared_weak_count *)v11[2];
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  operator delete(v11);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initialize(dispatch::group_session)::$_0>(AntennaModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count ****)a1;
  AntennaModule::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF6E05EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::sleep(dispatch::group_session)::$_0>(AntennaModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  antenna::Service::Internal **v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = *(antenna::Service::Internal ***)(*(_QWORD *)*a1 + 176);
  if (v3 && *v3)
    antenna::Service::Internal::enterLowPower(*v3);
  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_11:
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::wake(dispatch::group_session)::$_0>(AntennaModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AntennaModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  antenna::Service::Internal **v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (_QWORD *)*a1;
  v3 = *(antenna::Service::Internal ***)(*(_QWORD *)*a1 + 176);
  if (v3 && *v3)
    antenna::Service::Internal::exitLowPower(*v3);
  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_11:
    operator delete(a1);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<AntennaModule>::execute_wrapped<AntennaModule::initializeProperty(void)::$_0>(AntennaModule::initializeProperty(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AntennaModule::initializeProperty(void)::$_0,dispatch_queue_s *::default_delete<AntennaModule::initializeProperty(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t *v2;
  void **v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(uint64_t **)a1;
  v3 = (void **)(*(_QWORD *)a1 + 8);
  AntennaModule::initializeProperty_sync(**(_QWORD **)a1, (uint64_t)v3);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v3);
  operator delete(v2);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
  else
  {
LABEL_7:
    operator delete((void *)a1);
  }
}

void sub_1BF6E0828(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  void **v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (v2[31] < 0)
    operator delete(*v3);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *ABMProperties::create_default_global(ABMProperties *this)
{
  void *v2;
  _QWORD *result;

  v2 = operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v2, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  *(_QWORD *)this = v2;
  result = operator new(0x20uLL);
  *result = &unk_1E7919E70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  *((_QWORD *)this + 1) = result;
  return result;
}

void std::shared_ptr<ABMProperties>::operator=[abi:ne180100](__int128 *a1)
{
  __int128 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *a1;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  v2 = (std::__shared_weak_count *)off_1ED70F250;
  *(_OWORD *)&qword_1ED70F248 = v1;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t __cxx_global_var_init_26()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_27_1()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void LogTracker::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xE0uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  LogTracker::LogTracker((uint64_t)v4, v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(a2, v5);
  ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF6E0ABC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::LogTracker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E791CA70;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E791CA70;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E791F608;
  *(_QWORD *)(a1 + 48) = &unk_1E791F678;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "logtracker.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("logtracker.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E791F948;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E791F9D8;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E791F9D8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E791F608;
  *(_QWORD *)(a1 + 48) = &unk_1E791F678;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  return a1;
}

void sub_1BF6E0E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF6E0E5C(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void LogTracker::~LogTracker(LogTracker *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint8_t v15[16];

  *(_QWORD *)this = off_1E791F608;
  *((_QWORD *)this + 6) = &unk_1E791F678;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v15, 2u);
  }
  v3 = *((_QWORD *)this + 26);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
  {
LABEL_9:
    v7 = *((_QWORD *)this + 22);
    if (!v7)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  v7 = *((_QWORD *)this + 22);
  if (v7)
LABEL_10:
    dispatch_release(v7);
LABEL_11:
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*((_QWORD *)this + 20));
  *((_QWORD *)this + 6) = off_1E791F948;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v8 = *((_QWORD *)this + 18);
  if (v8)
    dispatch_release(v8);
  v9 = *((_QWORD *)this + 17);
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *(_QWORD *)this = off_1E79228B8;
  v11 = *((_QWORD *)this + 3);
  if (v11)
  {
    v12 = *((_QWORD *)this + 4);
    v13 = (void *)*((_QWORD *)this + 3);
    if (v12 != v11)
    {
      do
      {
        if (*(char *)(v12 - 1) < 0)
          operator delete(*(void **)(v12 - 24));
        v12 -= 24;
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v11;
    operator delete(v13);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
}

{
  void *v1;

  LogTracker::~LogTracker(this);
  operator delete(v1);
}

void `non-virtual thunk to'LogTracker::~LogTracker(LogTracker *this)
{
  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));
}

{
  void *v1;

  LogTracker::~LogTracker((LogTracker *)((char *)this - 48));
  operator delete(v1);
}

const char *LogTracker::getName(LogTracker *this)
{
  return "logtracker.mod";
}

void LogTracker::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = v5;
  v18[1] = v7;
  v18[2] = a1;
  v18[3] = v13;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v24 = (std::__shared_weak_count *)a1[16];
  if (!v24 || (v25 = a1[15], (v26 = std::__shared_weak_count::lock(v24)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = operator new(8uLL);
  *v28 = a1;
  v29 = a1[17];
  v30 = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  v32 = operator new(0x18uLL);
  *v32 = v28;
  v32[1] = v25;
  v32[2] = v27;
  dispatch_async_f(v29, v32, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void LogTracker::dumpLogInternal_sync(uint64_t a1, xpc_object_t *a2, const void **a3)
{
  const void *v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int IsInternalBuild;
  NSObject *v15;
  NSObject *global_queue;
  xpc_object_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  const void *v30;
  size_t v31;
  std::string::size_type v32;
  std::string *v33;
  xpc_object_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  xpc_object_t value;
  const char *v39;
  uint64_t v40;
  void *__p;
  char v42;
  const void *v43;
  xpc_object_t v44;
  _QWORD aBlock[6];
  std::__shared_weak_count *v46;
  void *v47;
  xpc_object_t v48;
  _QWORD block[5];
  dispatch_group_t group;
  xpc_object_t object;
  BOOL v52;
  void *__dst[2];
  unint64_t v54;
  BOOL v55;
  std::string v56;

  v55 = 0;
  v6 = (const void *)*MEMORY[0x1E0CFB170];
  v7 = strlen((const char *)*MEMORY[0x1E0CFB170]);
  if (v7 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (void **)operator new(v10 + 1);
    __dst[1] = v8;
    v54 = v11 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_8;
  }
  HIBYTE(v54) = v7;
  v9 = __dst;
  if (v7)
LABEL_8:
    memmove(v9, v6, (size_t)v8);
  *((_BYTE *)v8 + (_QWORD)v9) = 0;
  memset(&v56, 0, sizeof(v56));
  if (prop::tailspin::get((char *)__dst, (uint64_t)&v56))
    util::convert<BOOL>(&v56, &v55, 0);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v54) & 0x80000000) == 0)
    {
LABEL_13:
      v12 = MEMORY[0x1E0C809B0];
      v13 = &loc_1BF73A000;
      if (v55)
        goto LABEL_14;
LABEL_23:
      v55 = 0;
      goto LABEL_30;
    }
  }
  else if ((SHIBYTE(v54) & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(__dst[0]);
  v12 = MEMORY[0x1E0C809B0];
  v13 = (_QWORD *)&loc_1BF73A000;
  if (!v55)
    goto LABEL_23;
LABEL_14:
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  v55 = IsInternalBuild;
  if (IsInternalBuild)
  {
    v15 = *(NSObject **)(a1 + 208);
    if (v15)
    {
      dispatch_retain(*(dispatch_object_t *)(a1 + 208));
      dispatch_group_enter(v15);
    }
    global_queue = dispatch_get_global_queue(21, 0);
    block[0] = v12;
    block[1] = v13[250];
    block[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
    block[3] = &__block_descriptor_57_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE_e5_v8__0l;
    block[4] = a1;
    group = v15;
    if (v15)
    {
      dispatch_retain(v15);
      dispatch_group_enter(group);
    }
    v17 = *a2;
    object = v17;
    if (v17)
      xpc_retain(v17);
    else
      object = xpc_null_create();
    v52 = v55;
    dispatch_async(global_queue, block);
    xpc_release(object);
    object = 0;
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v15)
    {
      dispatch_group_leave(v15);
      dispatch_release(v15);
    }
  }
LABEL_30:
  v18 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v18 || (v19 = *(_QWORD *)(a1 + 120), (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldaxr(p_shared_owners);
  while (__stlxr(v25 - 1, p_shared_owners));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v21);
  }
  aBlock[0] = v12;
  aBlock[1] = v13[250];
  aBlock[2] = ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_3;
  aBlock[3] = &__block_descriptor_72_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE_e28_v20__0i8_dict__object__v__12l;
  aBlock[4] = a1;
  aBlock[5] = v19;
  v46 = v21;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  if (*a3)
  {
    v27 = _Block_copy(*a3);
    v28 = *a2;
    v47 = v27;
    v48 = v28;
    if (v28)
    {
LABEL_42:
      xpc_retain(v28);
      goto LABEL_45;
    }
  }
  else
  {
    v28 = *a2;
    v47 = 0;
    v48 = v28;
    if (v28)
      goto LABEL_42;
  }
  v48 = xpc_null_create();
LABEL_45:
  v29 = _Block_copy(aBlock);
  v30 = (const void *)*MEMORY[0x1E0CFBDB8];
  v31 = strlen((const char *)*MEMORY[0x1E0CFBDB8]);
  if (v31 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v32 = v31;
  if (v31 >= 0x17)
  {
    v36 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v36 = v31 | 7;
    v37 = v36 + 1;
    v33 = (std::string *)operator new(v36 + 1);
    v56.__r_.__value_.__l.__size_ = v32;
    v56.__r_.__value_.__r.__words[2] = v37 | 0x8000000000000000;
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  }
  else
  {
    *((_BYTE *)&v56.__r_.__value_.__s + 23) = v31;
    v33 = &v56;
    if (!v31)
    {
      v56.__r_.__value_.__s.__data_[0] = 0;
      v34 = *a2;
      v44 = v34;
      if (v34)
        goto LABEL_49;
LABEL_55:
      v34 = xpc_null_create();
      v44 = v34;
      if (v29)
        goto LABEL_50;
      goto LABEL_56;
    }
  }
  memmove(v33, v30, v32);
  v33->__r_.__value_.__s.__data_[v32] = 0;
  v34 = *a2;
  v44 = v34;
  if (!v34)
    goto LABEL_55;
LABEL_49:
  xpc_retain(v34);
  if (v29)
  {
LABEL_50:
    v35 = _Block_copy(v29);
    goto LABEL_57;
  }
LABEL_56:
  v35 = 0;
LABEL_57:
  v43 = v35;
  Service::runCommand(a1, (uint64_t)&v56, &v44, &v43);
  if (v35)
    _Block_release(v35);
  xpc_release(v34);
  v44 = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB930]);
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    v56.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v40 = xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v39);
  LogTracker::sendUserNotificationForDump(v40, (const void **)&__p);
  if (v42 < 0)
    operator delete(__p);
  xpc_release(v56.__r_.__value_.__l.__data_);
  if (v29)
    _Block_release(v29);
  xpc_release(v48);
  v48 = 0;
  if (v47)
    _Block_release(v47);
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  std::__shared_weak_count::__release_weak(v21);
}

void sub_1BF6E1818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *aBlock,xpc_object_t object)
{
  std::__shared_weak_count *v26;
  const void *v27;
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  xpc_release(*(xpc_object_t *)(v28 - 104));
  if (v27)
    _Block_release(v27);
  xpc_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void sub_1BF6E18E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 81) < 0)
    operator delete(*(void **)(v1 - 104));
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(exception_object);
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  NSObject *v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 208);
  v6 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  v4 = *(xpc_object_t *)(a1 + 48);
  v5 = v4;
  if (v4)
  {
    xpc_retain(v4);
  }
  else
  {
    v4 = xpc_null_create();
    v5 = v4;
  }
  LogTracker::diagnosticToolsLog_sync(v2, &v6, &v5, *(unsigned __int8 *)(a1 + 56));
  xpc_release(v4);
  if (v3)
  {
    dispatch_group_leave(v3);
    dispatch_release(v3);
  }
}

void sub_1BF6E19C4(_Unwind_Exception *a1)
{
  NSObject *v1;
  void *v2;

  xpc_release(v2);
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void LogTracker::diagnosticToolsLog_sync(uint64_t a1, NSObject **a2, xpc_object_t *a3, int a4)
{
  xpc_object_t value;
  uint64_t v9;
  xpc_object_t v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  unsigned __int8 v14;
  void **v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  NSObject *v38;
  xpc_object_t v39;
  int v40;
  xpc_object_t v41;
  const char *v42;
  uint8_t *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  const void *v48;
  size_t v49;
  std::string::size_type v50;
  std::string *p_dst;
  uint64_t v52;
  uint64_t v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  const void *v62;
  size_t v63;
  size_t v64;
  void *p_p;
  uint64_t v66;
  uint64_t v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  const char *p_object;
  xpc_object_t v73;
  xpc_object_t v74;
  void *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  NSObject *v80;
  xpc_object_t v81;
  void *__p;
  size_t v83;
  int64_t v84;
  std::string __dst;
  std::string v86;
  std::string v87;
  __int128 object;
  int64_t v89;
  _QWORD aBlock[6];
  std::__shared_weak_count *v91;
  dispatch_group_t group;
  void *v93;
  dispatch_object_t v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  void *v98[3];
  void *v99[3];
  uint8_t buf[24];
  void *v101;
  __int128 *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  memset(v99, 170, sizeof(v99));
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB370]);
  *(_QWORD *)&object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)v98);
  Timestamp::asString(v9, 0, 9, buf);
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v98, (_QWORD *)v98[1]);
  xpc_release((xpc_object_t)object);
  memset(v98, 170, sizeof(v98));
  v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB6A0]);
  *(_QWORD *)buf = v10;
  if (v10)
    xpc_retain(v10);
  else
    *(_QWORD *)buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)buf, (const object *)*MEMORY[0x1E0D01A30], v11);
  xpc_release(*(xpc_object_t *)buf);
  v12 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13 = "NO";
    if (a4)
      v13 = "YES";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v13;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Tailspin: %s", buf, 0xCu);
    v12 = *(NSObject **)(a1 + 88);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
LABEL_13:
      v96 = 0xAAAAAAAAAAAAAAAALL;
      v97 = 0xAAAAAAAAAAAAAAAALL;
      if ((v14 & 1) != 0)
        goto LABEL_19;
      goto LABEL_150;
    }
  }
  else if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    goto LABEL_13;
  }
  v15 = v98;
  if (SHIBYTE(v98[2]) < 0)
    v15 = (void **)v98[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v15;
  _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I DumpPath: %s", buf, 0xCu);
  v96 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAAAALL;
  if ((v16 & 1) == 0)
  {
LABEL_150:
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
    }
  }
LABEL_19:
  v17 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v101 = &__block_descriptor_tmp_13_8;
  v102 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v18 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v95 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_23;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v18 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v95 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_23;
  }
  v19 = (unint64_t *)(v18 + 8);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
LABEL_23:
  abm::HelperClient::create();
  if (*((_QWORD *)&v95 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v95 + 1));
    }
  }
  v23 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v23 || (v24 = *(_QWORD *)(a1 + 120), (v25 = std::__shared_weak_count::lock(v23)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v26 = v25;
  p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
  do
    v28 = __ldxr(p_shared_weak_owners);
  while (__stxr(v28 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v26);
  }
  v93 = (void *)0xAAAAAAAAAAAAAAAALL;
  v94 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = v17;
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v24;
  v91 = v26;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = *a2;
  group = v32;
  if (v32)
  {
    dispatch_retain(v32);
    dispatch_group_enter(group);
  }
  v33 = _Block_copy(aBlock);
  v34 = *(NSObject **)(a1 + 136);
  if (v34)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v93 = v33;
  v94 = v34;
  if (a4)
  {
    v35 = xpc_dictionary_create(0, 0, 0);
    v36 = MEMORY[0x1E0C812F8];
    if (v35 || (v35 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v35) == v36)
      {
        xpc_retain(v35);
        v37 = v35;
      }
      else
      {
        v37 = xpc_null_create();
      }
    }
    else
    {
      v37 = xpc_null_create();
      v35 = 0;
    }
    xpc_release(v35);
    if (MEMORY[0x1C3B8CD78](v37) != v36)
    {
      v38 = *(NSObject **)(a1 + 88);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF566000, v38, OS_LOG_TYPE_ERROR, "Failed to create an input dictionary", buf, 2u);
      }
LABEL_127:
      xpc_release(v37);
      v34 = v94;
      goto LABEL_128;
    }
    v39 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBA38]);
    *(_QWORD *)buf = v39;
    if (v39)
      xpc_retain(v39);
    else
      *(_QWORD *)buf = xpc_null_create();
    v40 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    memset(buf, 170, sizeof(buf));
    v41 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB930]);
    *(_QWORD *)&object = v41;
    if (v41)
      xpc_retain(v41);
    else
      *(_QWORD *)&object = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v42);
    xpc_release((xpc_object_t)object);
    if ((buf[23] & 0x80u) == 0)
      v43 = buf;
    else
      v43 = *(uint8_t **)buf;
    v44 = xpc_string_create((const char *)v43);
    if (!v44)
      v44 = xpc_null_create();
    xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CF10C8], v44);
    v45 = xpc_null_create();
    xpc_release(v44);
    xpc_release(v45);
    v46 = xpc_int64_create(v40);
    if (!v46)
      v46 = xpc_null_create();
    xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CF1010], v46);
    v47 = xpc_null_create();
    xpc_release(v46);
    xpc_release(v47);
    v48 = (const void *)*MEMORY[0x1E0D01A20];
    v49 = strlen((const char *)*MEMORY[0x1E0D01A20]);
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v50 = v49;
    if (v49 >= 0x17)
    {
      v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v52 = v49 | 7;
      v53 = v52 + 1;
      p_dst = (std::string *)operator new(v52 + 1);
      __dst.__r_.__value_.__l.__size_ = v50;
      __dst.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v49;
      p_dst = &__dst;
      if (!v49)
      {
LABEL_73:
        p_dst->__r_.__value_.__s.__data_[v50] = 0;
        if (SHIBYTE(v98[2]) >= 0)
          v54 = (const std::string::value_type *)v98;
        else
          v54 = (const std::string::value_type *)v98[0];
        if (SHIBYTE(v98[2]) >= 0)
          v55 = HIBYTE(v98[2]);
        else
          v55 = (std::string::size_type)v98[1];
        v56 = std::string::insert(&__dst, 0, v54, v55);
        v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
        v86.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v57;
        v56->__r_.__value_.__l.__size_ = 0;
        v56->__r_.__value_.__r.__words[2] = 0;
        v56->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v99[2]) >= 0)
          v58 = (const std::string::value_type *)v99;
        else
          v58 = (const std::string::value_type *)v99[0];
        if (SHIBYTE(v99[2]) >= 0)
          v59 = HIBYTE(v99[2]);
        else
          v59 = (std::string::size_type)v99[1];
        v60 = std::string::append(&v86, v58, v59);
        v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
        v87.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v61;
        v60->__r_.__value_.__l.__size_ = 0;
        v60->__r_.__value_.__r.__words[2] = 0;
        v60->__r_.__value_.__r.__words[0] = 0;
        v62 = (const void *)*MEMORY[0x1E0D01A10];
        v63 = strlen((const char *)*MEMORY[0x1E0D01A10]);
        if (v63 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v64 = v63;
        if (v63 >= 0x17)
        {
          v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v63 | 7) != 0x17)
            v66 = v63 | 7;
          v67 = v66 + 1;
          p_p = operator new(v66 + 1);
          v83 = v64;
          v84 = v67 | 0x8000000000000000;
          __p = p_p;
        }
        else
        {
          HIBYTE(v84) = v63;
          p_p = &__p;
          if (!v63)
          {
LABEL_93:
            *((_BYTE *)p_p + v64) = 0;
            if (v84 >= 0)
              v68 = (const std::string::value_type *)&__p;
            else
              v68 = (const std::string::value_type *)__p;
            if (v84 >= 0)
              v69 = HIBYTE(v84);
            else
              v69 = v83;
            v70 = std::string::append(&v87, v68, v69);
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v89 = v70->__r_.__value_.__r.__words[2];
            object = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            if (v89 >= 0)
              p_object = (const char *)&object;
            else
              p_object = (const char *)object;
            v73 = xpc_string_create(p_object);
            if (!v73)
              v73 = xpc_null_create();
            xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CF1000], v73);
            v74 = xpc_null_create();
            xpc_release(v73);
            xpc_release(v74);
            if (SHIBYTE(v89) < 0)
            {
              operator delete((void *)object);
              if ((SHIBYTE(v84) & 0x80000000) == 0)
              {
LABEL_106:
                if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_107;
                goto LABEL_114;
              }
            }
            else if ((SHIBYTE(v84) & 0x80000000) == 0)
            {
              goto LABEL_106;
            }
            operator delete(__p);
            if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_107:
              if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_108;
              goto LABEL_115;
            }
LABEL_114:
            operator delete(v87.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_108:
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_109;
              goto LABEL_116;
            }
LABEL_115:
            operator delete(v86.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_109:
              v81 = v37;
              if (v37)
                goto LABEL_110;
              goto LABEL_117;
            }
LABEL_116:
            operator delete(__dst.__r_.__value_.__l.__data_);
            v81 = v37;
            if (v37)
            {
LABEL_110:
              xpc_retain(v37);
              v75 = v93;
              if (!v93)
                goto LABEL_119;
              goto LABEL_118;
            }
LABEL_117:
            v81 = xpc_null_create();
            v75 = v93;
            if (!v93)
            {
LABEL_119:
              v79 = v75;
              v80 = v94;
              if (v94)
                dispatch_retain(v94);
              abm::HelperClient::perform();
              if (v80)
                dispatch_release(v80);
              if (v79)
                _Block_release(v79);
              xpc_release(v81);
              if ((char)buf[23] < 0)
                operator delete(*(void **)buf);
              goto LABEL_127;
            }
LABEL_118:
            v75 = _Block_copy(v75);
            goto LABEL_119;
          }
        }
        memmove(p_p, v62, v64);
        goto LABEL_93;
      }
    }
    memmove(p_dst, v48, v50);
    goto LABEL_73;
  }
LABEL_128:
  if (v34)
    dispatch_release(v34);
  if (v93)
    _Block_release(v93);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v91)
    std::__shared_weak_count::__release_weak(v91);
  std::__shared_weak_count::__release_weak(v26);
  v76 = (std::__shared_weak_count *)v97;
  if (!v97)
    goto LABEL_141;
  v77 = (unint64_t *)(v97 + 8);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
    if ((SHIBYTE(v98[2]) & 0x80000000) == 0)
    {
LABEL_142:
      if ((SHIBYTE(v99[2]) & 0x80000000) == 0)
        return;
LABEL_146:
      operator delete(v99[0]);
      return;
    }
  }
  else
  {
LABEL_141:
    if ((SHIBYTE(v98[2]) & 0x80000000) == 0)
      goto LABEL_142;
  }
  operator delete(v98[0]);
  if (SHIBYTE(v99[2]) < 0)
    goto LABEL_146;
}

void sub_1BF6E24A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,dispatch_group_t group)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  xpc_object_t result;

  v4 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = *(NSObject **)(a1 + 40);
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c15_ZTSN3xpc4dictE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke_3(_QWORD *a1, int a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _DWORD *v21;
  xpc_object_t v22;
  NSObject *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
    v14 = (const void *)a1[7];
    if (v14)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (const void *)a1[7];
    if (v14)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (xpc_object_t)a1[8];
      if (v16)
        goto LABEL_12;
LABEL_16:
      v16 = xpc_null_create();
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_33;
      goto LABEL_17;
    }
  }
  v15 = 0;
  v16 = (xpc_object_t)a1[8];
  if (!v16)
    goto LABEL_16;
LABEL_12:
  xpc_retain(v16);
  v17 = (std::__shared_weak_count *)v7[16];
  if (!v17)
LABEL_33:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_17:
  v18 = v7[15];
  v19 = std::__shared_weak_count::lock(v17);
  if (!v19)
    goto LABEL_33;
  v20 = v19;
  v21 = operator new(0x28uLL);
  *(_QWORD *)v21 = v7;
  v21[2] = a2;
  *((_QWORD *)v21 + 2) = v13;
  v22 = xpc_null_create();
  if (v15)
  {
    *((_QWORD *)v21 + 3) = _Block_copy(v15);
    *((_QWORD *)v21 + 4) = v16;
    if (v16)
    {
LABEL_20:
      xpc_retain(v16);
      goto LABEL_23;
    }
  }
  else
  {
    *((_QWORD *)v21 + 3) = 0;
    *((_QWORD *)v21 + 4) = v16;
    if (v16)
      goto LABEL_20;
  }
  *((_QWORD *)v21 + 4) = xpc_null_create();
LABEL_23:
  v23 = v7[17];
  v24 = (unint64_t *)&v20->__shared_owners_;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  v26 = operator new(0x18uLL);
  *v26 = v21;
  v26[1] = v18;
  v26[2] = v20;
  dispatch_async_f(v23, v26, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_);
  do
    v27 = __ldaxr(v24);
  while (__stlxr(v27 - 1, v24));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  xpc_release(v16);
  if (v15)
    _Block_release(v15);
  xpc_release(v22);
}

xpc_object_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  xpc_object_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (const void *)a2[7];
  if (v7)
  {
    v8 = _Block_copy(v7);
    v9 = (void *)a2[8];
    a1[7] = v8;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  else
  {
    v9 = (void *)a2[8];
    a1[7] = 0;
    a1[8] = v9;
    if (v9)
      return xpc_retain(v9);
  }
  result = xpc_null_create();
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE64c15_ZTSN3xpc4dictE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void LogTracker::sendUserNotificationForDump(uint64_t a1, const void **a2)
{
  const void *v3;
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int IsCarrierBuild;
  size_t v11;
  size_t v12;
  int v13;
  size_t v14;
  size_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  const void *v21;
  int v22;
  std::string v23;
  void *v24[2];
  uint64_t v25;
  std::string v26;
  _BYTE v27[24];
  std::string __p;
  _BYTE v29[48];
  void **__dst;
  unint64_t v31;
  unint64_t v32;

  v3 = (const void *)*MEMORY[0x1E0CFB028];
  v4 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v31 = v5;
    v32 = v8 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v32) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v3, v5);
  *((_BYTE *)p_dst + v5) = 0;
  memset(&__p, 0, sizeof(__p));
  v9 = -1431655766;
  if (prop::ttr::get((char *)&__dst, (uint64_t)&__p))
  {
    *(_DWORD *)v27 = -1431655766;
    if (util::convert<int>(&__p, v27, 0))
      v9 = *(_DWORD *)v27;
    else
      v9 = -1431655766;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(v32) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst);
LABEL_15:
  v31 = 0xAAAAAAAAAA005D73;
  v32 = 0xAAAAAAAAAAAAAAALL;
  __dst = *(void ***)"[Settings]";
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    IsCarrierBuild = 1;
  else
    IsCarrierBuild = TelephonyUtilIsCarrierBuild();
  if (IsCarrierBuild && v9)
  {
    v11 = *((unsigned __int8 *)a2 + 23);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
    {
      if (v11 >= 0xA)
        v12 = 10;
      else
        v12 = *((unsigned __int8 *)a2 + 23);
      v13 = memcmp(a2, &__dst, v12);
      if (v12 != 10)
        return;
LABEL_32:
      if (v13)
        return;
      memset(&v29[16], 0, 32);
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
      v29[23] = 22;
      qmemcpy(v29, "Telephony_Dump_Started", 22);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&__p, "LogDump");
      if ((v11 & 0x80) != 0)
      {
        if (a2[1])
        {
LABEL_35:
          if ((v11 & 0x80u) == 0)
            v15 = v11;
          else
            v15 = (size_t)a2[1];
          v16 = v15 + 8;
          memset(v27, 170, sizeof(v27));
          if (v15 + 8 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v16 >= 0x17)
          {
            v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v16 | 7) != 0x17)
              v18 = v16 | 7;
            v19 = v18 + 1;
            v20 = operator new(v18 + 1);
            *(_QWORD *)&v27[8] = v15 + 8;
            *(_QWORD *)&v27[16] = v19 | 0x8000000000000000;
            *(_QWORD *)v27 = v20;
            *v20 = 0x203A6E6F73616552;
            v17 = v20 + 1;
          }
          else
          {
            v17 = &v27[8];
            *(_QWORD *)&v27[16] = 0;
            v27[23] = v15 + 8;
            *(_OWORD *)v27 = 0x203A6E6F73616552uLL;
            if (!v15)
              goto LABEL_51;
          }
          if ((v11 & 0x80u) == 0)
            v21 = a2;
          else
            v21 = *a2;
          memmove(v17, v21, v15);
LABEL_51:
          v17[v15] = 0;
          *(_QWORD *)&v29[40] = *(_QWORD *)&v27[16];
          *(_OWORD *)&v29[24] = *(_OWORD *)v27;
          v23 = __p;
          *(_OWORD *)v24 = *(_OWORD *)v29;
          v25 = *(_QWORD *)&v29[16];
          if ((v27[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)&v29[24], *(std::string::size_type *)&v29[32]);
            v22 = 1;
LABEL_54:
            support::ui::showNotification(0, (uint64_t)&v23, 0);
            if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v26.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v25) & 0x80000000) == 0)
              {
LABEL_56:
                if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_57;
                goto LABEL_62;
              }
            }
            else if ((SHIBYTE(v25) & 0x80000000) == 0)
            {
              goto LABEL_56;
            }
            operator delete(v24[0]);
            if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_57:
              if (!v22)
                return;
              goto LABEL_58;
            }
LABEL_62:
            operator delete(v23.__r_.__value_.__l.__data_);
            if (!v22)
              return;
LABEL_58:
            operator delete(*(void **)&v29[24]);
            return;
          }
LABEL_52:
          v22 = 0;
          v26 = *(std::string *)&v29[24];
          goto LABEL_54;
        }
      }
      else if (v11)
      {
        goto LABEL_35;
      }
      v23 = __p;
      *(_OWORD *)v24 = *(_OWORD *)v29;
      v25 = *(_QWORD *)&v29[16];
      goto LABEL_52;
    }
    if ((unint64_t)a2[1] >= 0xA)
      v14 = 10;
    else
      v14 = (size_t)a2[1];
    v13 = memcmp(*a2, &__dst, v14);
    if (v14 == 10)
      goto LABEL_32;
  }
}

void sub_1BF6E2F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a14 & 0x80000000) == 0)
  {
LABEL_3:
    support::ui::NotificationInfo::~NotificationInfo(&a27);
    _Unwind_Resume(a1);
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a27);
  _Unwind_Resume(a1);
}

void sub_1BF6E2F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF6E2F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  support::ui::NotificationInfo::~NotificationInfo((void **)&a9);
  support::ui::NotificationInfo::~NotificationInfo(&a21);
  _Unwind_Resume(a1);
}

void sub_1BF6E2F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  _Unwind_Resume(exception_object);
}

void LogTracker::moveBasebandServicesLog_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t value;
  const char *p_p;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_weak_owners;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void *v29;
  unint64_t v30;
  NSObject *v31;
  void *v32;
  NSObject *v33;
  unsigned __int8 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  unint64_t v41;
  void *v42;
  NSObject *v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  xpc_object_t object;
  xpc_object_t objecta;
  _QWORD aBlock[5];
  std::__shared_weak_count *v49;
  dispatch_group_t group;
  void *__p;
  dispatch_object_t v52;
  char v53;
  void *block;
  uint64_t v55;
  void (*v56)(uint64_t);
  void *v57;
  __int128 *v58;

  v6 = xpc_dictionary_create(0, 0, 0);
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v6) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
  }
  else
  {
    v7 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  v8 = xpc_array_create(0, 0);
  if (v8 || (v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v8) == MEMORY[0x1E0C812C8])
    {
      xpc_retain(v8);
      v9 = v8;
    }
    else
    {
      v9 = xpc_null_create();
    }
  }
  else
  {
    v9 = xpc_null_create();
    v8 = 0;
  }
  xpc_release(v8);
  v10 = xpc_int64_create(7);
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CF1150], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB6A0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  block = 0;
  v55 = 0;
  v56 = 0;
  xpc::dyn_cast_or_default();
  if (v53 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v14 = xpc_string_create(p_p);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CF1060], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  if (v53 < 0)
    operator delete(__p);
  xpc_release(object);
  v16 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB370]);
  objecta = v16;
  if (v16)
    xpc_retain(v16);
  else
    objecta = xpc_null_create();
  block = 0;
  v55 = 0;
  v56 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v56) < 0)
    operator delete(block);
  if (v53 >= 0)
    v17 = (const char *)&__p;
  else
    v17 = (const char *)__p;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_array_append_value(v9, v18);
  xpc_release(v18);
  if (v53 < 0)
    operator delete(__p);
  xpc_release(objecta);
  if (v9)
  {
    xpc_retain(v9);
    v19 = v9;
  }
  else
  {
    v19 = xpc_null_create();
  }
  xpc_dictionary_set_value(v7, (const char *)*MEMORY[0x1E0CF10D0], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  v21 = (std::__shared_weak_count *)a1[16];
  if (!v21 || (v22 = a1[15], (v23 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v24 = v23;
  p_shared_weak_owners = (unint64_t *)&v23->__shared_weak_owners_;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  v52 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v29 = (void *)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = v22;
  v49 = v24;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = *a2;
  group = v31;
  if (v31)
  {
    dispatch_retain(v31);
    dispatch_group_enter(group);
  }
  v32 = _Block_copy(aBlock);
  v33 = a1[17];
  if (v33)
    dispatch_retain(v33);
  __p = v32;
  v52 = v33;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block = v29;
  v55 = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_8;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v35 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_59;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v35 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v45 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_59;
  }
  v36 = (unint64_t *)(v35 + 8);
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
LABEL_59:
  abm::HelperClient::create();
  if (!v45)
    goto LABEL_63;
  v38 = (unint64_t *)&v45->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_63:
    v44 = v7;
    if (v7)
      goto LABEL_64;
LABEL_67:
    v44 = xpc_null_create();
    v40 = __p;
    if (!__p)
      goto LABEL_69;
    goto LABEL_68;
  }
  ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
  std::__shared_weak_count::__release_weak(v45);
  v44 = v7;
  if (!v7)
    goto LABEL_67;
LABEL_64:
  xpc_retain(v7);
  v40 = __p;
  if (__p)
LABEL_68:
    v40 = _Block_copy(v40);
LABEL_69:
  v42 = v40;
  v43 = v52;
  if (v52)
    dispatch_retain(v52);
  abm::HelperClient::perform();
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  xpc_release(v44);
  do
    v41 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v41 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v41)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v52)
    dispatch_release(v52);
  if (__p)
    _Block_release(__p);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v49)
    std::__shared_weak_count::__release_weak(v49);
  std::__shared_weak_count::__release_weak(v24);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_1BF6E362C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,dispatch_group_t group,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  std::__shared_weak_count *v30;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  object = 0;
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&__p);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  std::__shared_weak_count::__release_weak(v30);
  xpc_release(v29);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker28moveBasebandServicesLog_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
  {
    v2 = std::__shared_weak_count::lock(v1);
    if (v2)
    {
      v3 = v2;
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void __copy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[6];
  a1[6] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[6];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_32c35_ZTSNSt3__18weak_ptrI10LogTrackerEE48c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void LogTracker::getConfiguration(LogTracker *this@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  NSObject *v7;
  const void *v8;
  size_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  size_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _BYTE *v27;
  const void *v28;
  size_t v29;
  std::string::size_type v30;
  std::string *p_p;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  _BOOL4 v35;
  const char *v36;
  xpc_object_t v37;
  xpc_object_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  const char *v46;
  xpc_object_t v47;
  xpc_object_t v48;
  _BYTE *v49;
  const void *v50;
  size_t v51;
  std::string::size_type v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 v56;
  _BOOL4 v57;
  const char *v58;
  xpc_object_t v59;
  xpc_object_t v60;
  size_t v61;
  size_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  const char *v67;
  xpc_object_t v68;
  xpc_object_t v69;
  size_t v70;
  size_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  const char *v76;
  xpc_object_t v77;
  xpc_object_t v78;
  size_t v79;
  size_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  const char *v85;
  xpc_object_t v86;
  xpc_object_t v87;
  uint64_t IsInternalBuild;
  int CompressionMode;
  const void *v90;
  size_t v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  std::string *v96;
  xpc_object_t v97;
  xpc_object_t v98;
  size_t v99;
  size_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  xpc_object_t v105;
  xpc_object_t v106;
  void *v107;
  size_t v108;
  unint64_t v109;
  _DWORD value[3];
  unint64_t v111;
  uint64_t v112;
  BOOL v113;
  int v114;
  std::string __p;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == v5)
    {
      xpc_retain(v4);
      v6 = v4;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  if (MEMORY[0x1C3B8CD78](v6) != v5)
  {
    v7 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed to create config dictionary", (uint8_t *)&__p, 2u);
    }
    *a2 = xpc_null_create();
    goto LABEL_239;
  }
  v111 = 0xAAAAAAAAAAAAAAAALL;
  v112 = 0xAAAAAAAAAAAAAALL;
  *(_QWORD *)&value[1] = 0xAAAAAAAAAAAAAA00;
  value[0] = 0;
  v113 = 0;
  v8 = (const void *)*MEMORY[0x1E0CFB170];
  v9 = strlen((const char *)*MEMORY[0x1E0CFB170]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    v108 = v10;
    v109 = v13 | 0x8000000000000000;
    v107 = v11;
    goto LABEL_18;
  }
  HIBYTE(v109) = v9;
  v11 = &v107;
  if (v9)
LABEL_18:
    memmove(v11, v8, v10);
  *((_BYTE *)v11 + v10) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::coredump::get((char *)&v107, (uint64_t)&__p))
  {
    v14 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  else
  {
    v14 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v14)
      goto LABEL_34;
  }
  else if (!v14)
  {
    goto LABEL_34;
  }
  if (v113)
    v15 = "enabled";
  else
    v15 = "disabled";
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBE78], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
LABEL_34:
  v113 = 0;
  v18 = strlen((const char *)v8);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v108 = v19;
    v109 = v22 | 0x8000000000000000;
    v107 = v20;
    goto LABEL_41;
  }
  HIBYTE(v109) = v18;
  v20 = &v107;
  if (v18)
LABEL_41:
    memmove(v20, v8, v19);
  *((_BYTE *)v20 + v19) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    v23 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  else
  {
    v23 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_47;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_47:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v23)
      goto LABEL_57;
  }
  else if (!v23)
  {
    goto LABEL_57;
  }
  if (v113)
    v24 = "enabled";
  else
    v24 = "disabled";
  v25 = xpc_string_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBFD8], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
LABEL_57:
  if (SHIBYTE(v112) < 0)
  {
    v111 = 0;
    v27 = *(_BYTE **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    v27 = &value[1];
  }
  *v27 = 0;
  v28 = (const void *)*MEMORY[0x1E0CFB028];
  v29 = strlen((const char *)*MEMORY[0x1E0CFB028]);
  if (v29 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v30 = v29;
  if (v29 >= 0x17)
  {
    v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v32 = v29 | 7;
    v33 = v32 + 1;
    p_p = (std::string *)operator new(v32 + 1);
    __p.__r_.__value_.__l.__size_ = v30;
    __p.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_67;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29;
  p_p = &__p;
  if (v29)
LABEL_67:
    memmove(p_p, v28, v30);
  p_p->__r_.__value_.__s.__data_[v30] = 0;
  v34 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  v35 = v34;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v35)
      goto LABEL_78;
  }
  else if (!v34)
  {
    goto LABEL_78;
  }
  if (v112 >= 0)
    v36 = (const char *)&value[1];
  else
    v36 = *(const char **)&value[1];
  v37 = xpc_string_create(v36);
  if (!v37)
    v37 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBE68], v37);
  v38 = xpc_null_create();
  xpc_release(v37);
  xpc_release(v38);
LABEL_78:
  v113 = 0;
  v39 = (const void *)*MEMORY[0x1E0CF1210];
  v40 = strlen((const char *)*MEMORY[0x1E0CF1210]);
  if (v40 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v41 = v40;
  if (v40 >= 0x17)
  {
    v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v43 = v40 | 7;
    v44 = v43 + 1;
    v42 = operator new(v43 + 1);
    v108 = v41;
    v109 = v44 | 0x8000000000000000;
    v107 = v42;
    goto LABEL_85;
  }
  HIBYTE(v109) = v40;
  v42 = &v107;
  if (v40)
LABEL_85:
    memmove(v42, v39, v41);
  *((_BYTE *)v42 + v41) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbtrace::get((char *)&v107, (uint64_t)&__p))
  {
    v45 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
  }
  else
  {
    v45 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_91;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_91:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v45)
      goto LABEL_101;
  }
  else if (!v45)
  {
    goto LABEL_101;
  }
  if (v113)
    v46 = "enabled";
  else
    v46 = "disabled";
  v47 = xpc_string_create(v46);
  if (!v47)
    v47 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFC108], v47);
  v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
LABEL_101:
  if (SHIBYTE(v112) < 0)
  {
    v111 = 0;
    v49 = *(_BYTE **)&value[1];
  }
  else
  {
    HIBYTE(v112) = 0;
    v49 = &value[1];
  }
  *v49 = 0;
  v50 = (const void *)*MEMORY[0x1E0CFBB60];
  v51 = strlen((const char *)*MEMORY[0x1E0CFBB60]);
  if (v51 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v52 = v51;
  if (v51 >= 0x17)
  {
    v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v51 | 7) != 0x17)
      v54 = v51 | 7;
    v55 = v54 + 1;
    v53 = (std::string *)operator new(v54 + 1);
    __p.__r_.__value_.__l.__size_ = v52;
    __p.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    goto LABEL_111;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v51;
  v53 = &__p;
  if (v51)
LABEL_111:
    memmove(v53, v50, v52);
  v53->__r_.__value_.__s.__data_[v52] = 0;
  v56 = prop::bbtrace::get((char *)&__p, (uint64_t)&value[1]);
  v57 = v56;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v57)
      goto LABEL_122;
  }
  else if (!v56)
  {
    goto LABEL_122;
  }
  if (v112 >= 0)
    v58 = (const char *)&value[1];
  else
    v58 = *(const char **)&value[1];
  v59 = xpc_string_create(v58);
  if (!v59)
    v59 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFC028], v59);
  v60 = xpc_null_create();
  xpc_release(v59);
  xpc_release(v60);
LABEL_122:
  v113 = 0;
  v61 = strlen((const char *)v8);
  if (v61 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v62 = v61;
  if (v61 >= 0x17)
  {
    v64 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v61 | 7) != 0x17)
      v64 = v61 | 7;
    v65 = v64 + 1;
    v63 = operator new(v64 + 1);
    v108 = v62;
    v109 = v65 | 0x8000000000000000;
    v107 = v63;
    goto LABEL_129;
  }
  HIBYTE(v109) = v61;
  v63 = &v107;
  if (v61)
LABEL_129:
    memmove(v63, v8, v62);
  *((_BYTE *)v63 + v62) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::ipc::get((char *)&v107, (uint64_t)&__p))
  {
    v66 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  else
  {
    v66 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_135;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_135:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v66)
      goto LABEL_145;
  }
  else if (!v66)
  {
    goto LABEL_145;
  }
  if (v113)
    v67 = "enabled";
  else
    v67 = "disabled";
  v68 = xpc_string_create(v67);
  if (!v68)
    v68 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCF0], v68);
  v69 = xpc_null_create();
  xpc_release(v68);
  xpc_release(v69);
LABEL_145:
  v113 = 0;
  v70 = strlen((const char *)v8);
  if (v70 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v71 = v70;
  if (v70 >= 0x17)
  {
    v73 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v70 | 7) != 0x17)
      v73 = v70 | 7;
    v74 = v73 + 1;
    v72 = operator new(v73 + 1);
    v108 = v71;
    v109 = v74 | 0x8000000000000000;
    v107 = v72;
    goto LABEL_152;
  }
  HIBYTE(v109) = v70;
  v72 = &v107;
  if (v70)
LABEL_152:
    memmove(v72, v8, v71);
  *((_BYTE *)v72 + v71) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::bbipc::get((char *)&v107, (uint64_t)&__p))
  {
    v75 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
  }
  else
  {
    v75 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_158:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v75)
      goto LABEL_168;
  }
  else if (!v75)
  {
    goto LABEL_168;
  }
  if (v113)
    v76 = "enabled";
  else
    v76 = "disabled";
  v77 = xpc_string_create(v76);
  if (!v77)
    v77 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBCF8], v77);
  v78 = xpc_null_create();
  xpc_release(v77);
  xpc_release(v78);
LABEL_168:
  v113 = 0;
  v79 = strlen((const char *)v8);
  if (v79 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v80 = v79;
  if (v79 >= 0x17)
  {
    v82 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17)
      v82 = v79 | 7;
    v83 = v82 + 1;
    v81 = operator new(v82 + 1);
    v108 = v80;
    v109 = v83 | 0x8000000000000000;
    v107 = v81;
    goto LABEL_175;
  }
  HIBYTE(v109) = v79;
  v81 = &v107;
  if (v79)
LABEL_175:
    memmove(v81, v8, v80);
  *((_BYTE *)v81 + v80) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::tailspin::get((char *)&v107, (uint64_t)&__p))
  {
    v84 = util::convert<BOOL>(&__p, &v113, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_181;
  }
  else
  {
    v84 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_181;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_181:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v84)
      goto LABEL_191;
  }
  else if (!v84)
  {
    goto LABEL_191;
  }
  if (v113)
    v85 = "enabled";
  else
    v85 = "disabled";
  v86 = xpc_string_create(v85);
  if (!v86)
    v86 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBE80], v86);
  v87 = xpc_null_create();
  xpc_release(v86);
  xpc_release(v87);
LABEL_191:
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v90 = (const void *)*MEMORY[0x1E0CF11E8];
  v91 = strlen((const char *)*MEMORY[0x1E0CF11E8]);
  if (v91 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v92 = v91;
  if (v91 >= 0x17)
  {
    v94 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v91 | 7) != 0x17)
      v94 = v91 | 7;
    v95 = v94 + 1;
    v93 = operator new(v94 + 1);
    v108 = v92;
    v109 = v95 | 0x8000000000000000;
    v107 = v93;
  }
  else
  {
    HIBYTE(v109) = v91;
    v93 = &v107;
    if (!v91)
      goto LABEL_203;
  }
  memmove(v93, v90, v92);
LABEL_203:
  *((_BYTE *)v93 + v92) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::compression::get((char *)&v107, (uint64_t)&__p))
  {
    v114 = -1431655766;
    if (util::convert<int>(&__p, &v114, 0))
      CompressionMode = v114;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v109) & 0x80000000) == 0)
      goto LABEL_208;
  }
  else if ((SHIBYTE(v109) & 0x80000000) == 0)
  {
    goto LABEL_208;
  }
  operator delete(v107);
LABEL_208:
  std::to_string(&__p, CompressionMode);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v96 = &__p;
  else
    v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v97 = xpc_string_create((const char *)v96);
  if (!v97)
    v97 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBE70], v97);
  v98 = xpc_null_create();
  xpc_release(v97);
  xpc_release(v98);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  value[0] = 0;
  v99 = strlen((const char *)v28);
  if (v99 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v100 = v99;
  if (v99 >= 0x17)
  {
    v102 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v99 | 7) != 0x17)
      v102 = v99 | 7;
    v103 = v102 + 1;
    v101 = operator new(v102 + 1);
    v108 = v100;
    v109 = v103 | 0x8000000000000000;
    v107 = v101;
    goto LABEL_222;
  }
  HIBYTE(v109) = v99;
  v101 = &v107;
  if (v99)
LABEL_222:
    memmove(v101, v28, v100);
  *((_BYTE *)v101 + v100) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::systemlogs::get((char *)&v107, (uint64_t)&__p))
  {
    v104 = util::convert<int>(&__p, value, 0);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_228;
  }
  else
  {
    v104 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_228;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_228:
  if (SHIBYTE(v109) < 0)
  {
    operator delete(v107);
    if (!v104)
      goto LABEL_237;
LABEL_234:
    v105 = xpc_int64_create(value[0]);
    if (!v105)
      v105 = xpc_null_create();
    xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBDE0], v105);
    v106 = xpc_null_create();
    xpc_release(v105);
    xpc_release(v106);
    goto LABEL_237;
  }
  if (v104)
    goto LABEL_234;
LABEL_237:
  *a2 = v6;
  v6 = xpc_null_create();
  if (SHIBYTE(v112) < 0)
    operator delete(*(void **)&value[1]);
LABEL_239:
  xpc_release(v6);
}

void sub_1BF6E47C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a21 < 0)
    operator delete(__p);
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void sub_1BF6E4884()
{
  JUMPOUT(0x1BF6E4870);
}

void LogTracker::copyPreference(uint64_t a1@<X0>, const void **a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  NSObject *v9;
  int v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  const void *v15;
  xpc_object_t v16;
  const void *v17;
  xpc_object_t v18;
  std::string __p;
  CFTypeRef cf;
  xpc_object_t object;
  _BYTE buf[34];
  _BYTE v23[6];

  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 || (v6 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v6) == v7)
    {
      xpc_retain(v6);
      v8 = v6;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v6 = 0;
  }
  xpc_release(v6);
  if (MEMORY[0x1C3B8CD78](v8) != v7)
  {
    v9 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "Failed to create preference dictionary", buf, 2u);
    }
    *a3 = xpc_null_create();
    goto LABEL_39;
  }
  v10 = *((char *)a2 + 23);
  if (v10 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  v12 = v11 + 34;
  memset(buf, 170, 24);
  if (v11 + 34 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v12 > 0x16)
  {
    v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v14 = v12 | 7;
    *(_QWORD *)&buf[8] = v11 + 34;
    *(_QWORD *)&buf[16] = (v14 + 1) | 0x8000000000000000;
    *(_QWORD *)buf = operator new(v14 + 1);
    qmemcpy(*(void **)buf, "/var/wireless/Library/Preferences/", 34);
    v13 = (_BYTE *)(*(_QWORD *)buf + 34);
    if (!v11)
      goto LABEL_24;
  }
  else
  {
    qmemcpy(buf, "/var/wireless/Library/Preferences/", sizeof(buf));
    v13 = v23;
  }
  if (v10 >= 0)
    v15 = a2;
  else
    v15 = *a2;
  memmove(v13, v15, v11);
LABEL_24:
  v13[v11] = 0;
  if (ctu::fs::file_exists())
  {
    if ((buf[23] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)buf, *(std::string::size_type *)&buf[8]);
    else
      __p = *(std::string *)buf;
    util::readPlistToCFDictionary((uint64_t)&__p, &cf);
    ctu::cf_to_xpc((ctu *)cf, v17);
    v16 = object;
    if (object && MEMORY[0x1C3B8CD78](object) == v7)
      xpc_retain(v16);
    else
      v16 = xpc_null_create();
    v18 = xpc_null_create();
    xpc_release(v8);
    xpc_release(v18);
    xpc_release(object);
    object = 0;
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = v8;
  }
  *a3 = v16;
  v8 = xpc_null_create();
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_39:
  xpc_release(v8);
}

void sub_1BF6E4B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker23diagnosticToolsLog_syncEN8dispatch13group_sessionEN3xpc4dictEb_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Failed to collect logs. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D The log has been created", (uint8_t *)__p, 2u);
      }
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void LogTracker::systemLog_sync(uint64_t a1, dispatch_object_t *a2, xpc_object_t *a3, _QWORD *a4)
{
  xpc_object_t value;
  int v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  const char *v26;
  xpc_object_t v27;
  const char *v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  void **v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  void **v43;
  xpc_object_t v44;
  xpc_object_t v45;
  const void *v46;
  size_t v47;
  size_t v48;
  __int128 *p_dst;
  uint64_t v50;
  uint64_t v51;
  const char *p_object;
  xpc_object_t v53;
  xpc_object_t v54;
  NSObject *v55;
  void *v56;
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  xpc_object_t v61;
  char v62;
  xpc_object_t v63;
  xpc_object_t v64;
  void *v65;
  void *v66;
  NSObject *v67;
  xpc_object_t v68;
  void *v69;
  NSObject *v70;
  xpc_object_t v71;
  std::__shared_weak_count *v72;
  xpc_object_t __p[3];
  void *v74[3];
  void *v75[3];
  void *v76;
  dispatch_object_t v77;
  xpc_object_t object;
  uint64_t v79;
  void (*v80)(uint64_t);
  void *v81;
  __int128 *v82;
  __int128 __dst;
  unint64_t v84;
  _QWORD aBlock[6];
  std::__shared_weak_count *v86;
  dispatch_object_t v87;
  _BYTE v88[24];
  _BYTE *v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB190]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v9 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v10 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 120), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v76 = (void *)0xAAAAAAAAAAAAAAAALL;
  v77 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v18 = (void *)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke;
  aBlock[3] = &__block_descriptor_100_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v11;
  v86 = v13;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v87 = *a2;
  if (v87)
  {
    dispatch_retain(v87);
    if (v87)
      dispatch_group_enter(v87);
  }
  v20 = v88;
  v21 = a4[3];
  if (!v21)
    goto LABEL_20;
  if ((_QWORD *)v21 != a4)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
LABEL_20:
    v89 = (_BYTE *)v21;
    goto LABEL_22;
  }
  v89 = v88;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v88);
LABEL_22:
  v90 = v9;
  v22 = _Block_copy(aBlock);
  v23 = *(NSObject **)(a1 + 136);
  if (v23)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v76 = v22;
  v77 = v23;
  memset(v75, 170, sizeof(v75));
  v24 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB370]);
  __p[0] = v24;
  if (v24)
    xpc_retain(v24);
  else
    __p[0] = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)v74);
  Timestamp::asString((uint64_t)v74, 0, 9, &object);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v80) < 0)
    operator delete(object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v74, (_QWORD *)v74[1]);
  xpc_release(__p[0]);
  memset(v74, 170, sizeof(v74));
  v25 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB6A0]);
  object = v25;
  if (v25)
    xpc_retain(v25);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)*MEMORY[0x1E0D01A30], v26);
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  v27 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB930]);
  object = v27;
  if (v27)
    xpc_retain(v27);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v28);
  xpc_release(object);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  object = v18;
  v79 = 0x40000000;
  v80 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v81 = &__block_descriptor_tmp_13_8;
  v82 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v72 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &object);
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v72 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_40:
  abm::HelperClient::create();
  if (v72)
  {
    v33 = (unint64_t *)&v72->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v35 = xpc_dictionary_create(0, 0, 0);
  if (v35 || (v35 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v35) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v35);
      v36 = v35;
    }
    else
    {
      v36 = xpc_null_create();
    }
  }
  else
  {
    v36 = xpc_null_create();
    v35 = 0;
  }
  xpc_release(v35);
  if (SHIBYTE(v75[2]) >= 0)
    v37 = v75;
  else
    v37 = (void **)v75[0];
  v38 = xpc_string_create((const char *)v37);
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF10E0], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(__p[2]) >= 0)
    v40 = __p;
  else
    v40 = (xpc_object_t *)__p[0];
  v41 = xpc_string_create((const char *)v40);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF10C8], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  if (SHIBYTE(v74[2]) >= 0)
    v43 = v74;
  else
    v43 = (void **)v74[0];
  v44 = xpc_string_create((const char *)v43);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF1000], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  object = 0;
  v79 = 0;
  v80 = 0;
  v46 = (const void *)*MEMORY[0x1E0CFB178];
  v47 = strlen((const char *)*MEMORY[0x1E0CFB178]);
  if (v47 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v48 = v47;
  if (v47 >= 0x17)
  {
    v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v50 = v47 | 7;
    v51 = v50 + 1;
    p_dst = (__int128 *)operator new(v50 + 1);
    *((_QWORD *)&__dst + 1) = v48;
    v84 = v51 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_73;
  }
  HIBYTE(v84) = v47;
  p_dst = &__dst;
  if (v47)
LABEL_73:
    memmove(p_dst, v46, v48);
  *((_BYTE *)p_dst + v48) = 0;
  prop::systemlogs::get((char *)&__dst, (uint64_t)&object);
  if (SHIBYTE(v84) < 0)
    operator delete((void *)__dst);
  if (SHIBYTE(v80) >= 0)
    p_object = (const char *)&object;
  else
    p_object = (const char *)object;
  v53 = xpc_string_create(p_object);
  if (!v53)
    v53 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF0FF8], v53);
  v54 = xpc_null_create();
  xpc_release(v53);
  xpc_release(v54);
  v55 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
  {
    if (v9 != 2)
      goto LABEL_83;
LABEL_125:
    v61 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBA40]);
    *(_QWORD *)&__dst = v61;
    if (v61)
      xpc_retain(v61);
    else
      *(_QWORD *)&__dst = xpc_null_create();
    v62 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    v63 = xpc_BOOL_create(v62);
    if (!v63)
      v63 = xpc_null_create();
    xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF1188], v63);
    v64 = xpc_null_create();
    xpc_release(v63);
    xpc_release(v64);
    xpc_release((xpc_object_t)__dst);
    v68 = v36;
    if (v36)
    {
      xpc_retain(v36);
      v65 = v76;
      if (!v76)
      {
LABEL_135:
        v66 = v65;
        v67 = v77;
        if (v77)
          dispatch_retain(v77);
        abm::HelperClient::perform();
        if (v67)
          dispatch_release(v67);
        if (v66)
          _Block_release(v66);
        xpc_release(v68);
        if (SHIBYTE(v80) < 0)
          goto LABEL_97;
        goto LABEL_98;
      }
    }
    else
    {
      v68 = xpc_null_create();
      v65 = v76;
      if (!v76)
        goto LABEL_135;
    }
    v65 = _Block_copy(v65);
    goto LABEL_135;
  }
  v60 = abm::helper::asString();
  LODWORD(__dst) = 136315138;
  *(_QWORD *)((char *)&__dst + 4) = v60;
  _os_log_debug_impl(&dword_1BF566000, v55, OS_LOG_TYPE_DEBUG, "#D System Logs: %s", (uint8_t *)&__dst, 0xCu);
  if (v9 == 2)
    goto LABEL_125;
LABEL_83:
  if (v9 != 1)
    goto LABEL_96;
  v71 = v36;
  if (v36)
  {
    xpc_retain(v36);
    v56 = v76;
    if (!v76)
      goto LABEL_89;
    goto LABEL_88;
  }
  v71 = xpc_null_create();
  v56 = v76;
  if (v76)
LABEL_88:
    v56 = _Block_copy(v56);
LABEL_89:
  v69 = v56;
  v70 = v77;
  if (v77)
    dispatch_retain(v77);
  abm::HelperClient::perform();
  if (v70)
    dispatch_release(v70);
  if (v69)
    _Block_release(v69);
  xpc_release(v71);
LABEL_96:
  if (SHIBYTE(v80) < 0)
LABEL_97:
    operator delete(object);
LABEL_98:
  xpc_release(v36);
  do
    v57 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v57 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (v57)
  {
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      goto LABEL_102;
  }
  else
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
    {
LABEL_102:
      if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
        goto LABEL_103;
      goto LABEL_121;
    }
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
  {
LABEL_103:
    if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
      goto LABEL_104;
    goto LABEL_122;
  }
LABEL_121:
  operator delete(v74[0]);
  if ((SHIBYTE(v75[2]) & 0x80000000) == 0)
  {
LABEL_104:
    v58 = v77;
    if (!v77)
      goto LABEL_106;
    goto LABEL_105;
  }
LABEL_122:
  operator delete(v75[0]);
  v58 = v77;
  if (v77)
LABEL_105:
    dispatch_release(v58);
LABEL_106:
  if (v76)
    _Block_release(v76);
  if (v89 == v88)
  {
    v59 = 4;
    goto LABEL_112;
  }
  if (v89)
  {
    v59 = 5;
    v20 = v89;
LABEL_112:
    (*(void (**)(_QWORD *))(*v20 + 8 * v59))(v20);
  }
  if (v87)
  {
    dispatch_group_leave(v87);
    if (v87)
      dispatch_release(v87);
  }
  if (v86)
    std::__shared_weak_count::__release_weak(v86);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF6E5844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, uint64_t a13, xpc_object_t a14, char a15, uint64_t a16, char a17, uint64_t a18, xpc_object_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,xpc_object_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker14systemLog_syncEN8dispatch13group_sessionEN3xpc4dictENSt3__18functionIFvbS3_EEE_block_invoke(_QWORD *a1, unsigned int *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  void *__p[2];
  char v20;
  xpc_object_t object;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  if (a1[11])
  {
    v13 = *a2;
    v14 = *a3;
    object = v14;
    if (v14)
    {
      xpc_retain(v14);
      LOBYTE(__p[0]) = v13 == 0;
      v15 = a1[11];
      if (v15)
      {
LABEL_12:
        (*(void (**)(uint64_t, void **, xpc_object_t *))(*(_QWORD *)v15 + 48))(v15, __p, &object);
        xpc_release(object);
        object = 0;
        goto LABEL_13;
      }
    }
    else
    {
      object = xpc_null_create();
      LOBYTE(__p[0]) = v13 == 0;
      v15 = a1[11];
      if (v15)
        goto LABEL_12;
    }
    std::__throw_bad_function_call[abi:ne180100]();
  }
LABEL_13:
  if (*a2)
  {
    v16 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = abm::helper::asString();
      TelephonyXPC::Result::toString(*a2, (uint64_t)__p);
      if (v20 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      v23 = v17;
      v24 = 2080;
      v25 = v18;
      _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Failed to collect system logs mode: %s result: %s", buf, 0x16u);
      if (v20 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1BF6E5CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  result = a2[11];
  if (!result)
    goto LABEL_10;
  if ((_QWORD *)result != a2 + 8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_10:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[11] + 24))(a2[11]);
}

void sub_1BF6E5DC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 56);
    if (v4)
      dispatch_release(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c30_ZTSN8dispatch13group_sessionE64c38_ZTSNSt3__18functionIFvbN3xpc4dictEEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = a1[7];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[7];
    if (v6)
      dispatch_release(v6);
  }
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::archiveLogs_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  xpc_object_t value;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  int v9;
  xpc_object_t v10;
  NSObject *v11;
  char v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  void *v27;
  NSObject *v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  void **v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const char *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  _QWORD aBlock[6];
  std::__shared_weak_count *v54;
  dispatch_group_t group;
  xpc_object_t object;
  dispatch_object_t v57;
  void *__p[3];
  void *v59[3];
  uint8_t buf[8];
  uint64_t v61;
  void (*v62)(uint64_t);
  void *v63;
  __int128 *v64;

  value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC068]);
  *(_QWORD *)buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)buf = xpc_null_create();
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v9 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)buf);
  if (!v9)
  {
    v11 = a1[11];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Compression is disabled!", buf, 2u);
    }
    return;
  }
  v10 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFBDF8]);
  *(_QWORD *)buf = v10;
  if (v10)
    xpc_retain(v10);
  else
    *(_QWORD *)buf = xpc_null_create();
  v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  memset(v59, 170, sizeof(v59));
  v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB370]);
  object = v13;
  if (v13)
    xpc_retain(v13);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__p);
  Timestamp::asString((uint64_t)__p, 0, 9, buf);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v62) < 0)
    operator delete(*(void **)buf);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
  xpc_release(object);
  memset(__p, 170, sizeof(__p));
  v14 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB6A0]);
  *(_QWORD *)buf = v14;
  if (v14)
    xpc_retain(v14);
  else
    *(_QWORD *)buf = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)buf, (const object *)*MEMORY[0x1E0D01A30], v15);
  xpc_release(*(xpc_object_t *)buf);
  v16 = (std::__shared_weak_count *)a1[16];
  if (!v16 || (v17 = a1[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v57 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v24 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke;
  aBlock[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v17;
  v54 = v19;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = *a2;
  group = v26;
  if (v26)
  {
    dispatch_retain(v26);
    dispatch_group_enter(group);
  }
  v27 = _Block_copy(aBlock);
  v28 = a1[17];
  if (v28)
    dispatch_retain(v28);
  object = v27;
  v57 = v28;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)buf = v24;
  v61 = 0x40000000;
  v62 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v63 = &__block_descriptor_tmp_13_8;
  v64 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v52 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_41;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v30 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v52 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_41;
  }
  v31 = (unint64_t *)(v30 + 8);
  do
    v32 = __ldxr(v31);
  while (__stxr(v32 + 1, v31));
LABEL_41:
  abm::HelperClient::create();
  if (v52)
  {
    v33 = (unint64_t *)&v52->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v35 = xpc_dictionary_create(0, 0, 0);
  if (v35 || (v35 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v35) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v35);
      v36 = v35;
    }
    else
    {
      v36 = xpc_null_create();
    }
  }
  else
  {
    v36 = xpc_null_create();
    v35 = 0;
  }
  xpc_release(v35);
  if (SHIBYTE(__p[2]) >= 0)
    v37 = __p;
  else
    v37 = (void **)__p[0];
  v38 = xpc_string_create((const char *)v37);
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF10F8], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(v59[2]) >= 0)
    v40 = (const char *)v59;
  else
    v40 = (const char *)v59[0];
  v41 = xpc_string_create(v40);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF10E0], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  v43 = xpc_int64_create(v9);
  if (!v43)
    v43 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF11E8], v43);
  v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  v45 = xpc_BOOL_create(v12);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CF1070], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v51 = v36;
  if (v36)
  {
    xpc_retain(v36);
    v47 = object;
    if (!object)
      goto LABEL_71;
    goto LABEL_70;
  }
  v51 = xpc_null_create();
  v47 = object;
  if (object)
LABEL_70:
    v47 = _Block_copy(v47);
LABEL_71:
  v49 = v47;
  v50 = v57;
  if (v57)
    dispatch_retain(v57);
  abm::HelperClient::perform();
  if (v50)
    dispatch_release(v50);
  if (v49)
    _Block_release(v49);
  xpc_release(v51);
  xpc_release(v36);
  do
    v48 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v48 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v48)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v57)
    dispatch_release(v57);
  if (object)
    _Block_release(object);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  std::__shared_weak_count::__release_weak(v19);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
      return;
LABEL_94:
    operator delete(v59[0]);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v59[2]) < 0)
    goto LABEL_94;
}

void sub_1BF6E65A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,dispatch_group_t group,xpc_object_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  void *v33;
  uint64_t v34;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  object = 0;
  xpc_release(v33);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a25);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v32);
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 129) < 0)
  {
    operator delete(*(void **)(v34 - 152));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN10LogTracker16archiveLogs_syncEN8dispatch13group_sessionEN3xpc4dictE_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Compression failed. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D Compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

void LogTracker::processLogarchive_sync(_QWORD *a1, NSObject **a2, const char *a3, _QWORD *a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  unsigned __int8 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  int v35;
  unint64_t v36;
  const char *v37;
  size_t v38;
  void **v39;
  xpc_object_t v40;
  xpc_object_t v41;
  const char *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  void *v55;
  NSObject *object;
  void *__dst[5];
  _QWORD aBlock[6];
  std::__shared_weak_count *v59;
  dispatch_group_t group;
  _BYTE v61[24];
  _BYTE *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v9 = a1[15], (v10 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  v16 = (void *)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_96_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v9;
  v59 = v11;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = *a2;
  group = v18;
  if (v18)
  {
    dispatch_retain(v18);
    dispatch_group_enter(v18);
  }
  v19 = v61;
  v20 = a4[3];
  if (!v20)
    goto LABEL_16;
  if ((_QWORD *)v20 != a4)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
LABEL_16:
    v62 = (_BYTE *)v20;
    goto LABEL_18;
  }
  v62 = v61;
  (*(void (**)(_QWORD *, _BYTE *))(*a4 + 24))(a4, v61);
LABEL_18:
  v21 = _Block_copy(aBlock);
  v22 = a1[17];
  if (v22)
    dispatch_retain(v22);
  v55 = v21;
  object = v22;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  __dst[0] = v16;
  __dst[1] = (void *)0x40000000;
  __dst[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  __dst[3] = &__block_descriptor_tmp_13_8;
  __dst[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v24 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_23;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, __dst);
    v24 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v54 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
    {
LABEL_23:
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  abm::HelperClient::create();
  if (v54)
  {
    v27 = (unint64_t *)&v54->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v29 = xpc_dictionary_create(0, 0, 0);
  if (v29 || (v29 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v29) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v29);
      v30 = v29;
    }
    else
    {
      v30 = xpc_null_create();
    }
  }
  else
  {
    v30 = xpc_null_create();
    v29 = 0;
  }
  xpc_release(v29);
  v31 = *((unsigned __int8 *)a3 + 23);
  if (a3[23] < 0)
  {
    v32 = *(const char **)a3;
    v33 = *((_QWORD *)a3 + 1);
  }
  else
  {
    v32 = a3;
    v33 = *((unsigned __int8 *)a3 + 23);
  }
  v34 = v32 - 1;
  do
  {
    if (!v33)
    {
      v36 = 0;
      memset(__dst, 170, 24);
      if ((v31 & 0x80) != 0)
        goto LABEL_96;
LABEL_44:
      v37 = a3;
      if (v36 <= v31)
      {
        v38 = v31 - v36;
        if (v31 - v36 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_98;
        goto LABEL_46;
      }
LABEL_104:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    v35 = v34[v33--];
  }
  while (v35 != 92 && v35 != 47);
  v36 = v33 + 1;
  memset(__dst, 170, 24);
  if ((v31 & 0x80) == 0)
    goto LABEL_44;
LABEL_96:
  v31 = *((_QWORD *)a3 + 1);
  if (v31 < v36)
    goto LABEL_104;
  v37 = *(const char **)a3;
  v38 = v31 - v36;
  if (v31 - v36 >= 0x7FFFFFFFFFFFFFF8)
LABEL_98:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_46:
  if (v38 >= 0x17)
  {
    v48 = (v38 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v38 | 7) != 0x17)
      v48 = v38 | 7;
    v49 = v48 + 1;
    v39 = (void **)operator new(v48 + 1);
    __dst[1] = (void *)v38;
    __dst[2] = (void *)(v49 | 0x8000000000000000);
    __dst[0] = v39;
LABEL_64:
    memmove(v39, &v37[v36], v38);
    *((_BYTE *)v39 + v38) = 0;
    if (a3[23] < 0)
      goto LABEL_65;
    goto LABEL_49;
  }
  HIBYTE(__dst[2]) = v38;
  v39 = __dst;
  if (v31 != v36)
    goto LABEL_64;
  *((_BYTE *)__dst + v38) = 0;
  if ((a3[23] & 0x80000000) == 0)
    goto LABEL_49;
LABEL_65:
  a3 = *(const char **)a3;
LABEL_49:
  v40 = xpc_string_create(a3);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E0CF10F8], v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  if (SHIBYTE(__dst[2]) >= 0)
    v42 = (const char *)__dst;
  else
    v42 = (const char *)__dst[0];
  v43 = xpc_string_create(v42);
  if (!v43)
    v43 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E0CF1128], v43);
  v44 = xpc_null_create();
  xpc_release(v43);
  xpc_release(v44);
  v45 = xpc_int64_create(2);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E0CF11E8], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v53 = v30;
  if (!v30)
  {
    v53 = xpc_null_create();
    v47 = v55;
    if (!v55)
      goto LABEL_68;
    goto LABEL_67;
  }
  xpc_retain(v30);
  v47 = v55;
  if (v55)
LABEL_67:
    v47 = _Block_copy(v47);
LABEL_68:
  v52 = v47;
  if (object)
    dispatch_retain(object);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v52)
    _Block_release(v52);
  xpc_release(v53);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  xpc_release(v30);
  do
    v50 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v50 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v50)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (object)
    dispatch_release(object);
  if (v55)
    _Block_release(v55);
  if (v62 == v61)
  {
    v51 = 4;
LABEL_88:
    (*(void (**)(_QWORD *))(*v19 + 8 * v51))(v19);
  }
  else if (v62)
  {
    v51 = 5;
    v19 = v62;
    goto LABEL_88;
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1BF6E6F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,dispatch_group_t group,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker22processLogarchive_syncEN8dispatch13group_sessionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvbEEE_block_invoke(_QWORD *a1, _DWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  void **v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = a1[11];
      if (v11)
      {
        LOBYTE(__p[0]) = *a2 == 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 48))(v11, __p);
      }
      v12 = *a2;
      v13 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v12)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v12, (uint64_t)__p);
          if (v16 >= 0)
            v14 = __p;
          else
            v14 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v18 = v14;
          _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Logarchive compression failed. Result: %s", buf, 0xCu);
          if (v16 < 0)
            operator delete(__p[0]);
        }
      }
      else if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p[0]) = 0;
        _os_log_debug_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEBUG, "#D Logarchive compression is done.", (uint8_t *)__p, 2u);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t result;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = a2[7];
  a1[7] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    v8 = a1[7];
    if (v8)
      dispatch_group_enter(v8);
  }
  result = a2[11];
  if (!result)
    goto LABEL_10;
  if ((_QWORD *)result != a2 + 8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_10:
    a1[11] = result;
    return result;
  }
  a1[11] = a1 + 8;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[11] + 24))(a2[11]);
}

void sub_1BF6E735C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(v1 + 56);
    if (v4)
      dispatch_release(v4);
  }
  v5 = *(std::__shared_weak_count **)(v1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = a1[7];
  if (v5)
  {
    dispatch_group_leave(v5);
    v6 = a1[7];
    if (v6)
      dispatch_release(v6);
  }
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void LogTracker::jsonSummary_sync(_QWORD *a1, NSObject **a2, xpc_object_t *a3)
{
  const void *v6;
  size_t v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  NSObject *v21;
  xpc_object_t v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD *v25;
  NSObject *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  NSObject *v29;
  xpc_object_t v30;
  _QWORD *v31;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v35;

  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild() & 1) != 0)
  {
    v6 = (const void *)*MEMORY[0x1E0CFB728];
    v7 = strlen((const char *)*MEMORY[0x1E0CFB728]);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v8 = (void *)v7;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v9 = (void **)operator new(v10 + 1);
      __dst[1] = v8;
      v35 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v35) = v7;
      v9 = __dst;
      if (!v7)
        goto LABEL_11;
    }
    memmove(v9, v6, (size_t)v8);
LABEL_11:
    *((_BYTE *)v8 + (_QWORD)v9) = 0;
    aBlock = 0;
    cf = 0;
    Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
    if (aBlock)
      _Block_release(aBlock);
    if (cf)
      CFRelease(cf);
    if (SHIBYTE(v35) < 0)
      operator delete(__dst[0]);
    v12 = (std::__shared_weak_count *)a1[16];
    if (!v12 || (v13 = a1[15], (v14 = std::__shared_weak_count::lock(v12)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v15 = v14;
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v15);
    }
    v27 = v13;
    v28 = v15;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    v21 = *a2;
    v29 = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(v21);
    }
    v22 = *a3;
    v30 = v22;
    if (v22)
    {
      xpc_retain(v22);
    }
    else
    {
      v22 = xpc_null_create();
      v30 = v22;
    }
    v31 = a1;
    v23 = a1[22];
    v24 = a1[17];
    v25 = operator new(0x28uLL);
    *v25 = v13;
    v25[1] = v15;
    v27 = 0;
    v28 = 0;
    v25[2] = v21;
    if (v21)
    {
      dispatch_retain(v21);
      dispatch_group_enter(v21);
    }
    v25[3] = v22;
    if (v22)
      xpc_retain(v22);
    else
      v25[3] = xpc_null_create();
    v25[4] = a1;
    dispatch_group_notify_f(v23, v24, v25, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    xpc_release(v22);
    if (v21)
    {
      dispatch_group_leave(v21);
      dispatch_release(v21);
    }
    std::__shared_weak_count::__release_weak(v15);
    return;
  }
  v26 = a1[11];
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v27) = 0;
    _os_log_error_impl(&dword_1BF566000, v26, OS_LOG_TYPE_ERROR, "JSON summary is not supported!", (uint8_t *)&v27, 2u);
  }
}

void sub_1BF6E76BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;

  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0((uint64_t)&a9);
  std::__shared_weak_count::__release_weak(v9);
  _Unwind_Resume(a1);
}

void sub_1BF6E76DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a15);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t LogTracker::postLogCollectionSupported(LogTracker *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

void LogTracker::postLogCollectionExternal_sync(_QWORD *a1, xpc_object_t *a2)
{
  NSObject *v4;
  xpc_object_t v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  xpc_object_t v17;
  unint64_t v18;
  xpc_object_t v19;
  unint64_t v20;
  xpc_object_t v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  _QWORD *v26;
  void *v27;
  void *v28;
  _QWORD *v29;
  xpc_object_t v30;
  __int128 v31;
  xpc_object_t v32;
  __int128 v33;
  xpc_object_t v34;
  xpc_object_t v35;
  void *object_8;
  xpc_object_t v37;
  xpc_object_t v38;
  dispatch_object_t v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = a1[26];
  v39 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v38 = *a2;
  v5 = v38;
  if (v38)
  {
    xpc_retain(v38);
  }
  else
  {
    v5 = xpc_null_create();
    v38 = v5;
  }
  v42 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v39, &v38, v41);
  v6 = v42;
  if (v42 == v41)
  {
    v7 = 4;
    v6 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_11:
  xpc_release(v5);
  v38 = 0;
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
  v8 = (std::__shared_weak_count *)a1[16];
  if (!v8 || (v9 = a1[15], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
  }
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = *a2;
  v37 = *a2;
  if (*a2)
  {
    xpc_retain(v17);
  }
  else
  {
    v17 = xpc_null_create();
    v37 = v17;
  }
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = *a2;
  v35 = *a2;
  if (*a2)
  {
    xpc_retain(v19);
  }
  else
  {
    v19 = xpc_null_create();
    v35 = v19;
  }
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  object_8 = v17;
  if (!v17)
  {
    v17 = xpc_null_create();
    object_8 = v17;
    v21 = *a2;
    v29 = a1;
    v30 = *a2;
    if (*a2)
      goto LABEL_32;
LABEL_34:
    v30 = xpc_null_create();
    goto LABEL_35;
  }
  xpc_retain(v17);
  v21 = *a2;
  v29 = a1;
  v30 = *a2;
  if (!*a2)
    goto LABEL_34;
LABEL_32:
  xpc_retain(v21);
LABEL_35:
  *(_QWORD *)&v31 = v9;
  *((_QWORD *)&v31 + 1) = v11;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v32 = v19;
  if (v19)
    xpc_retain(v19);
  else
    v32 = xpc_null_create();
  *(_QWORD *)&v33 = v9;
  *((_QWORD *)&v33 + 1) = v11;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v34 = v17;
  if (v17)
    xpc_retain(v17);
  else
    v34 = xpc_null_create();
  v24 = a1[26];
  v25 = a1[17];
  v40 = 0xAAAAAAAAAAAAAAAALL;
  v26 = operator new(0x50uLL);
  *v26 = v29;
  v26[1] = v30;
  if (v30)
  {
    xpc_retain(v30);
    *((_OWORD *)v26 + 1) = v31;
    v27 = v32;
    v26[4] = a1;
    v26[5] = v32;
    if (v32)
      goto LABEL_47;
LABEL_50:
    v26[5] = xpc_null_create();
    *((_OWORD *)v26 + 3) = v33;
    v28 = v34;
    v26[8] = a1;
    v26[9] = v34;
    if (v34)
      goto LABEL_48;
LABEL_51:
    v26[9] = xpc_null_create();
    goto LABEL_52;
  }
  v26[1] = xpc_null_create();
  *((_OWORD *)v26 + 1) = v31;
  v27 = v32;
  v26[4] = a1;
  v26[5] = v32;
  if (!v32)
    goto LABEL_50;
LABEL_47:
  xpc_retain(v27);
  *((_OWORD *)v26 + 3) = v33;
  v28 = v34;
  v26[8] = a1;
  v26[9] = v34;
  if (!v34)
    goto LABEL_51;
LABEL_48:
  xpc_retain(v28);
LABEL_52:
  v40 = 0;
  dispatch_group_notify_f(v24, v25, v26, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v40);
  xpc_release(v28);
  xpc_release(v27);
  xpc_release(v30);
  xpc_release(object_8);
  std::__shared_weak_count::__release_weak(v11);
  xpc_release(v35);
  std::__shared_weak_count::__release_weak(v11);
  xpc_release(v37);
  std::__shared_weak_count::__release_weak(v11);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1BF6E7BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void LogTracker::postLogCollectionInternal_sync(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t *v2;
  xpc_object_t value;
  const char *v5;
  char *v6;
  xpc_object_t v7;
  const char *v8;
  xpc_object_t v9;
  const char *v10;
  const char *v11;
  xpc_object_t v12;
  const char *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  const char *v18;
  xpc_object_t v19;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v22;
  size_t v23;
  size_t v24;
  _BYTE *v25;
  xpc_object_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  NSObject *v30;
  uint64_t v31;
  _DWORD *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 isDuplicated;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  std::string *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  size_t v47;
  std::string::value_type **v48;
  xpc_object_t v49;
  const char *v50;
  int v51;
  NSObject *v52;
  const char *v53;
  _BYTE *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::ios_base *v60;
  _QWORD *v61;
  std::string *p_s;
  std::string::size_type size;
  _QWORD *v64;
  __int128 v65;
  size_t v66;
  void *v67;
  uint64_t v68;
  const void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  _QWORD *v80;
  int v81;
  size_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  std::string *v87;
  int shared_weak_owners_high;
  const std::string::value_type *v89;
  std::string::size_type shared_owners;
  std::string *v91;
  __int128 v92;
  int v93;
  NSObject *v94;
  int v95;
  size_t v96;
  unint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  std::string *v101;
  const char *v102;
  size_t v103;
  std::string *v104;
  __int128 v105;
  const char *v106;
  xpc_object_t *v107;
  void *v108;
  int v109;
  std::__shared_weak_count *v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  void *v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  xpc_object_t v118;
  xpc_object_t v119;
  xpc_object_t v120;
  int v121;
  size_t v122;
  std::string::value_type **v123;
  NSObject *v124;
  xpc_object_t v125;
  _QWORD *v126;
  uint64_t v127;
  std::__shared_weak_count *v128;
  void **v129;
  void *v130;
  std::__shared_weak_count *v131;
  std::__shared_weak_count *v132;
  unint64_t *p_shared_weak_owners;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  __int128 v137;
  unint64_t v138;
  __int128 v139;
  unint64_t v140;
  void *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  __int128 v145;
  unint64_t v146;
  void *v147;
  __int128 v148;
  unint64_t v149;
  void *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  __int128 v154;
  void *v155;
  __int128 v156;
  unint64_t v157;
  NSObject *v158;
  NSObject *v159;
  char *v160;
  __int128 v161;
  __int128 v162;
  void *v163;
  uint64_t v164;
  void *v165;
  void *v166;
  void *v167;
  uint64_t v168;
  std::__shared_weak_count *v169;
  std::__shared_weak_count *v170;
  _QWORD *v171;
  xpc_object_t *v172;
  char *v173;
  int v174;
  char v175;
  _BYTE __dst[48];
  void *v177[2];
  xpc_object_t v178[2];
  _OWORD v179[9];
  xpc_object_t __p[2];
  __int128 v181;
  void *v182[2];
  xpc_object_t v183[2];
  __int128 v184;
  __int128 v185;
  _OWORD v186[7];
  _BYTE v187[32];
  _OWORD v188[7];
  _BYTE v189[32];
  __int128 v190;
  __int128 v191;
  __int128 v192;
  _BYTE v193[32];
  void *v194;
  std::__shared_weak_count *v195;
  _BYTE v196[32];
  std::string v197;
  xpc_object_t v198;
  dispatch_object_t v199;
  std::string v200;
  _QWORD *v201;
  std::locale v202;
  __int128 v203;
  __int128 v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  void *v207;
  std::string v208;
  std::string v209;
  BOOL v210[25];
  std::string __s;
  std::string v212;
  void *v213[3];
  void *v214[3];
  std::string::value_type *v215[3];
  _QWORD v216[3];
  _QWORD *v217;
  _BYTE object[248];
  __int128 v219;
  uint8_t buf[4];
  const char *v221;
  __int16 v222;
  xpc_object_t *v223;
  uint64_t v224;

  v2 = a2;
  v224 = *MEMORY[0x1E0C80C00];
  memset(v215, 170, sizeof(v215));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB548]);
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  v6 = (char *)*MEMORY[0x1E0CFB6C8];
  xpc::dyn_cast_or_default((xpc *)object, (const object *)*MEMORY[0x1E0CFB6C8], v5);
  xpc_release(*(xpc_object_t *)object);
  memset(v214, 170, sizeof(v214));
  v7 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB538]);
  *(_QWORD *)object = v7;
  if (v7)
    xpc_retain(v7);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v8);
  xpc_release(*(xpc_object_t *)object);
  memset(v213, 170, sizeof(v213));
  v9 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB8D0]);
  *(_QWORD *)object = v9;
  if (v9)
    xpc_retain(v9);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v10);
  xpc_release(*(xpc_object_t *)object);
  memset(&v212, 170, sizeof(v212));
  v11 = (const char *)*MEMORY[0x1E0CFB930];
  v12 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB930]);
  *(_QWORD *)object = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v13);
  xpc_release(*(xpc_object_t *)object);
  memset(&__s, 170, sizeof(__s));
  v14 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB370]);
  __p[0] = v14;
  if (v14)
    xpc_retain(v14);
  else
    __p[0] = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__dst);
  Timestamp::asString((uint64_t)__dst, 0, 9, object);
  xpc::dyn_cast_or_default();
  if ((object[23] & 0x80000000) != 0)
    operator delete(*(void **)object);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__dst, *(_QWORD **)&__dst[8]);
  xpc_release(__p[0]);
  v15 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB010]);
  *(_QWORD *)object = v15;
  if (v15)
    xpc_retain(v15);
  else
    *(_QWORD *)object = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, (const object *)7);
  xpc_release(*(xpc_object_t *)object);
  memset(&v210[1], 170, 24);
  v17 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB770]);
  *(_QWORD *)object = v17;
  if (v17)
    xpc_retain(v17);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v18);
  xpc_release(*(xpc_object_t *)object);
  v19 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFC068]);
  *(_QWORD *)object = v19;
  if (v19)
    xpc_retain(v19);
  else
    *(_QWORD *)object = xpc_null_create();
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
    CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    CompressionMode = 2;
  v174 = xpc::dyn_cast_or_default((xpc *)object, (const object *)CompressionMode);
  xpc_release(*(xpc_object_t *)object);
  v210[0] = 1;
  v22 = (const void *)*MEMORY[0x1E0CFC0C0];
  v23 = strlen((const char *)*MEMORY[0x1E0CFC0C0]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  v173 = v6;
  if (v23 >= 0x17)
  {
    v26 = v2;
    v27 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v27 = v23 | 7;
    v28 = v27 + 1;
    v25 = operator new(v27 + 1);
    *(_QWORD *)&__dst[8] = v24;
    *(_QWORD *)&__dst[16] = v28 | 0x8000000000000000;
    *(_QWORD *)__dst = v25;
    v2 = v26;
    goto LABEL_38;
  }
  __dst[23] = v23;
  v25 = __dst;
  if (v23)
LABEL_38:
    memmove(v25, v22, v24);
  v25[v24] = 0;
  memset(object, 0, 24);
  if (prop::logfilter::get(__dst, (uint64_t)object))
    util::convert<BOOL>((const std::string *)object, v210, 0);
  if ((object[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)object);
    if ((__dst[23] & 0x80000000) == 0)
    {
LABEL_43:
      if (v210[0])
        goto LABEL_44;
LABEL_48:
      v30 = a1[11];
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)object = 0;
        _os_log_impl(&dword_1BF566000, v30, OS_LOG_TYPE_DEFAULT, "#I Duplicated Signature Detection is disabled", object, 2u);
      }
      goto LABEL_88;
    }
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(*(void **)__dst);
  if (!v210[0])
    goto LABEL_48;
LABEL_44:
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&object[96] = v29;
  *(_OWORD *)&object[80] = v29;
  *(_OWORD *)&object[64] = v29;
  *(_OWORD *)&object[48] = v29;
  *(_OWORD *)&object[32] = v29;
  *(_OWORD *)&object[16] = v29;
  *(_OWORD *)object = v29;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v209, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v209 = __s;
  if (v210[24] < 0)
    std::string::__init_copy_ctor_external(&v208, *(const std::string::value_type **)&v210[1], *(std::string::size_type *)&v210[9]);
  else
    v208 = *(std::string *)&v210[1];
  ResetInfo::ResetInfo((std::string *)object, (__int128 *)v214, (__int128 *)v213, (__int128 *)&v212, (uint64_t)&v209, v16, (__int128 *)&v208);
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v208.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_56;
  }
  else if ((SHIBYTE(v209.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_56;
  }
  operator delete(v209.__r_.__value_.__l.__data_);
LABEL_56:
  pthread_mutex_lock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  v31 = qword_1ED70F5A8;
  if (!qword_1ED70F5A8)
  {
    v32 = operator new(0x30uLL);
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v32 + 2), "com.apple.telephony.abm", "Log Dump History");
    *(_QWORD *)v32 = &off_1E7915D78;
    v32[4] = 10;
    *((_QWORD *)v32 + 3) = 0;
    *((_QWORD *)v32 + 4) = 0;
    *((_QWORD *)v32 + 5) = 0;
    LogDumpDB::init((LogDumpDB *)v32);
    v33 = operator new(0x20uLL);
    *v33 = off_1E791FBC0;
    v33[1] = 0;
    v33[2] = 0;
    v33[3] = v32;
    v34 = (std::__shared_weak_count *)off_1ED70F5B0;
    qword_1ED70F5A8 = (uint64_t)v32;
    off_1ED70F5B0 = v33;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v31 = qword_1ED70F5A8;
  }
  v37 = (std::__shared_weak_count *)off_1ED70F5B0;
  *(_QWORD *)__dst = v31;
  *(_QWORD *)&__dst[8] = off_1ED70F5B0;
  if (off_1ED70F5B0)
  {
    v38 = (unint64_t *)((char *)off_1ED70F5B0 + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance);
  isDuplicated = LogDumpDB::isDuplicated(v31, (uint64_t)object, 1200);
  v41 = isDuplicated;
  if (!v37)
    goto LABEL_70;
  v42 = (unint64_t *)&v37->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
    std::__shared_weak_count::__release_weak(v37);
    if (v41)
    {
LABEL_71:
      std::string::append(&v212, " (duplicated signature detected)", 0x20uLL);
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &v212;
      else
        v44 = (std::string *)v212.__r_.__value_.__r.__words[0];
      v45 = xpc_string_create((const char *)v44);
      if (!v45)
        v45 = xpc_null_create();
      xpc_dictionary_set_value(*v2, v11, v45);
      v46 = xpc_null_create();
      xpc_release(v45);
      xpc_release(v46);
      if ((object[111] & 0x80000000) != 0)
      {
        operator delete(*(void **)&object[88]);
        if ((object[71] & 0x80000000) == 0)
        {
LABEL_78:
          if ((object[47] & 0x80000000) == 0)
            goto LABEL_79;
          goto LABEL_239;
        }
      }
      else if ((object[71] & 0x80000000) == 0)
      {
        goto LABEL_78;
      }
      operator delete(*(void **)&object[48]);
      if ((object[47] & 0x80000000) == 0)
      {
LABEL_79:
        if ((object[23] & 0x80000000) == 0)
        {
LABEL_80:
          v175 = 1;
          goto LABEL_97;
        }
LABEL_240:
        operator delete(*(void **)object);
        goto LABEL_80;
      }
LABEL_239:
      operator delete(*(void **)&object[24]);
      if ((object[23] & 0x80000000) == 0)
        goto LABEL_80;
      goto LABEL_240;
    }
  }
  else
  {
LABEL_70:
    if (isDuplicated)
      goto LABEL_71;
  }
  if ((object[111] & 0x80000000) != 0)
  {
    operator delete(*(void **)&object[88]);
    if ((object[71] & 0x80000000) == 0)
    {
LABEL_86:
      if ((object[47] & 0x80000000) == 0)
        goto LABEL_87;
LABEL_235:
      operator delete(*(void **)&object[24]);
      if ((object[23] & 0x80000000) == 0)
        goto LABEL_88;
LABEL_236:
      operator delete(*(void **)object);
      goto LABEL_88;
    }
  }
  else if ((object[71] & 0x80000000) == 0)
  {
    goto LABEL_86;
  }
  operator delete(*(void **)&object[48]);
  if ((object[47] & 0x80000000) != 0)
    goto LABEL_235;
LABEL_87:
  if ((object[23] & 0x80000000) != 0)
    goto LABEL_236;
LABEL_88:
  if (SHIBYTE(v215[2]) >= 0)
    v47 = HIBYTE(v215[2]);
  else
    v47 = (size_t)v215[1];
  if (v47 == strlen(v173))
  {
    v48 = SHIBYTE(v215[2]) >= 0 ? v215 : (std::string::value_type **)v215[0];
    if (!memcmp(v48, v173, v47))
    {
      v175 = 0;
      v70 = (const char *)*MEMORY[0x1E0CFB190];
      goto LABEL_217;
    }
  }
  v175 = 0;
LABEL_97:
  memset(v189, 170, 24);
  v49 = xpc_dictionary_get_value(*v2, (const char *)*MEMORY[0x1E0CFB6A0]);
  *(_QWORD *)object = v49;
  if (v49)
    xpc_retain(v49);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)*MEMORY[0x1E0D01A30], v50);
  xpc_release(*(xpc_object_t *)object);
  if (!v174)
  {
    *(_QWORD *)&v55 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v55 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&object[104] = v55;
    v219 = v55;
    *(_OWORD *)&object[232] = v55;
    *(_OWORD *)&object[216] = v55;
    *(_OWORD *)&object[200] = v55;
    *(_OWORD *)&object[184] = v55;
    *(_OWORD *)&object[168] = v55;
    *(_OWORD *)&object[152] = v55;
    *(_OWORD *)&object[136] = v55;
    *(_OWORD *)&object[120] = v55;
    *(_OWORD *)&object[88] = v55;
    *(_OWORD *)&object[72] = v55;
    *(_OWORD *)&object[56] = v55;
    *(_OWORD *)&object[40] = v55;
    *(_OWORD *)&object[24] = v55;
    *(_OWORD *)&object[8] = v55;
    v56 = MEMORY[0x1E0DE4FE0];
    v57 = MEMORY[0x1E0DE4FE0] + 64;
    v58 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v59 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *(_QWORD *)&object[112] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)object = v58;
    *(_QWORD *)&object[*(_QWORD *)(v58 - 24)] = v59;
    v60 = (std::ios_base *)&object[*(_QWORD *)(*(_QWORD *)object - 24)];
    std::ios_base::init(v60, &object[8]);
    v60[1].__vftable = 0;
    v60[1].__fmtflags_ = -1;
    *(_QWORD *)object = v56 + 24;
    *(_QWORD *)&object[112] = v57;
    std::streambuf::basic_streambuf();
    *(_QWORD *)&object[8] = MEMORY[0x1E0DE4FB8] + 16;
    memset(&object[72], 0, 32);
    *(_DWORD *)&object[104] = 16;
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(object, (uint64_t)".*(", 3);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_s = &__s;
    else
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      size = __s.__r_.__value_.__l.__size_;
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)p_s, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)").*", 3);
    *(_QWORD *)&v65 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&__dst[32] = v65;
    *(_OWORD *)v177 = v65;
    *(_OWORD *)__dst = v65;
    *(_OWORD *)&__dst[16] = v65;
    if ((object[104] & 0x10) != 0)
    {
      v68 = *(_QWORD *)&object[96];
      if (*(_QWORD *)&object[96] < *(_QWORD *)&object[56])
      {
        *(_QWORD *)&object[96] = *(_QWORD *)&object[56];
        v68 = *(_QWORD *)&object[56];
      }
      v69 = *(const void **)&object[48];
      v66 = v68 - *(_QWORD *)&object[48];
      if ((unint64_t)(v68 - *(_QWORD *)&object[48]) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_356;
    }
    else
    {
      if ((object[104] & 8) == 0)
      {
        v66 = 0;
        BYTE7(v181) = 0;
        v67 = __p;
        goto LABEL_127;
      }
      v69 = *(const void **)&object[24];
      v66 = *(_QWORD *)&object[40] - *(_QWORD *)&object[24];
      if (*(_QWORD *)&object[40] - *(_QWORD *)&object[24] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_356:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v66 >= 0x17)
    {
      v71 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v66 | 7) != 0x17)
        v71 = v66 | 7;
      v72 = v71 + 1;
      v67 = operator new(v71 + 1);
      __p[1] = (xpc_object_t)v66;
      *(_QWORD *)&v181 = v72 | 0x8000000000000000;
      __p[0] = v67;
    }
    else
    {
      BYTE7(v181) = v66;
      v67 = __p;
      if (!v66)
      {
LABEL_127:
        *((_BYTE *)v67 + v66) = 0;
        std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)__dst, (uint64_t)__p, 0);
        if (SBYTE7(v181) < 0)
          operator delete(__p[0]);
        v195 = 0;
        v194 = 0;
        *(_QWORD *)v196 = 0;
        std::locale::locale(&v202, (const std::locale *)__dst);
        v203 = *(_OWORD *)&__dst[8];
        v204 = *(_OWORD *)&__dst[24];
        v205 = *(_QWORD *)&__dst[40];
        v206 = (std::__shared_weak_count *)v177[0];
        if (v177[0])
        {
          v73 = (unint64_t *)((char *)v177[0] + 8);
          do
            v74 = __ldxr(v73);
          while (__stxr(v74 + 1, v73));
        }
        v207 = v177[1];
        ctu::fs::get_filtered_files();
        v75 = v206;
        if (v206)
        {
          v76 = (unint64_t *)&v206->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        std::locale::~locale(&v202);
        v78 = (std::__shared_weak_count *)v194;
        v79 = v195;
        v172 = v2;
        if ((v189[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v200, *(const std::string::value_type **)v189, *(std::string::size_type *)&v189[8]);
        else
          v200 = *(std::string *)v189;
        v171 = a1;
        v201 = a1;
        if (v78 == v79)
        {
LABEL_194:
          v108 = (void *)v200.__r_.__value_.__r.__words[0];
          v109 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          memset(&v200, 0, sizeof(v200));
          if (v109 < 0)
          {
            operator delete(v108);
            if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v200.__r_.__value_.__l.__data_);
          }
          v110 = (std::__shared_weak_count *)v194;
          a1 = v171;
          v2 = v172;
          v111 = (_QWORD *)MEMORY[0x1E0DE4F60];
          if (v194)
          {
            v112 = v195;
            v113 = v194;
            if (v195 != v194)
            {
              do
              {
                if (SHIBYTE(v112[-1].__shared_weak_owners_) < 0)
                  operator delete(v112[-1].__vftable);
                --v112;
              }
              while (v112 != v110);
              v113 = v194;
            }
            v195 = v110;
            operator delete(v113);
          }
          v114 = (std::__shared_weak_count *)v177[0];
          v115 = MEMORY[0x1E0DE4FB8];
          if (v177[0])
          {
            v116 = (unint64_t *)((char *)v177[0] + 8);
            do
              v117 = __ldaxr(v116);
            while (__stlxr(v117 - 1, v116));
            if (!v117)
            {
              ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
              std::__shared_weak_count::__release_weak(v114);
            }
          }
          std::locale::~locale((std::locale *)__dst);
          *(_QWORD *)object = *v111;
          *(_QWORD *)&object[*(_QWORD *)(*(_QWORD *)object - 24)] = v111[3];
          *(_QWORD *)&object[8] = v115 + 16;
          if ((object[95] & 0x80000000) != 0)
            operator delete(*(void **)&object[72]);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1C3B8C364](&object[112]);
          goto LABEL_213;
        }
        while (1)
        {
          v80 = v201;
          v81 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v82 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
          else
            v82 = v200.__r_.__value_.__l.__size_;
          v83 = v82 + 1;
          memset(v187, 170, 24);
          if (v82 + 1 > 0x7FFFFFFFFFFFFFF7)
LABEL_357:
            std::string::__throw_length_error[abi:ne180100]();
          if (v83 >= 0x17)
          {
            v85 = (v83 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v83 | 7) != 0x17)
              v85 = v83 | 7;
            v86 = v85 + 1;
            v84 = operator new(v85 + 1);
            *(_QWORD *)&v187[16] = v86 | 0x8000000000000000;
            *(_QWORD *)v187 = v84;
            *(_QWORD *)&v187[8] = v82 + 1;
          }
          else
          {
            memset(v187, 0, 24);
            v84 = v187;
            v187[23] = v82 + 1;
            if (!v82)
              goto LABEL_158;
          }
          if (v81 >= 0)
            v87 = &v200;
          else
            v87 = (std::string *)v200.__r_.__value_.__r.__words[0];
          memmove(v84, v87, v82);
LABEL_158:
          *(_WORD *)&v84[v82] = 47;
          shared_weak_owners_high = SHIBYTE(v78->__shared_weak_owners_);
          if (shared_weak_owners_high >= 0)
            v89 = (const std::string::value_type *)v78;
          else
            v89 = (const std::string::value_type *)v78->__vftable;
          if (shared_weak_owners_high >= 0)
            shared_owners = HIBYTE(v78->__shared_weak_owners_);
          else
            shared_owners = v78->__shared_owners_;
          v91 = std::string::append((std::string *)v187, v89, shared_owners);
          v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          *(_QWORD *)&v181 = *((_QWORD *)&v91->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          v93 = ctu::fs::remove_dir();
          if (SBYTE7(v181) < 0)
          {
            operator delete(__p[0]);
            if ((v187[23] & 0x80000000) != 0)
            {
LABEL_169:
              operator delete(*(void **)v187);
              v94 = v80[11];
              if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                goto LABEL_143;
              goto LABEL_170;
            }
          }
          else if ((v187[23] & 0x80000000) != 0)
          {
            goto LABEL_169;
          }
          v94 = v80[11];
          if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            goto LABEL_143;
LABEL_170:
          v95 = SHIBYTE(v200.__r_.__value_.__r.__words[2]);
          if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v96 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
          else
            v96 = v200.__r_.__value_.__l.__size_;
          v97 = v96 + 1;
          memset(v187, 170, 24);
          if (v96 + 1 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_357;
          if (v97 >= 0x17)
          {
            v99 = (v97 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v97 | 7) != 0x17)
              v99 = v97 | 7;
            v100 = v99 + 1;
            v98 = operator new(v99 + 1);
            *(_QWORD *)&v187[16] = v100 | 0x8000000000000000;
            *(_QWORD *)v187 = v98;
            *(_QWORD *)&v187[8] = v96 + 1;
          }
          else
          {
            memset(v187, 0, 24);
            v98 = v187;
            v187[23] = v96 + 1;
            if (!v96)
              goto LABEL_184;
          }
          if (v95 >= 0)
            v101 = &v200;
          else
            v101 = (std::string *)v200.__r_.__value_.__r.__words[0];
          memmove(v98, v101, v96);
LABEL_184:
          *(_WORD *)&v98[v96] = 47;
          if (v78->__shared_weak_owners_ >= 0)
            v102 = (const char *)v78;
          else
            v102 = (const char *)v78->__vftable;
          v103 = strlen(v102);
          v104 = std::string::append((std::string *)v187, v102, v103);
          v105 = *(_OWORD *)&v104->__r_.__value_.__l.__data_;
          *(_QWORD *)&v181 = *((_QWORD *)&v104->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v105;
          v104->__r_.__value_.__l.__size_ = 0;
          v104->__r_.__value_.__r.__words[2] = 0;
          v104->__r_.__value_.__r.__words[0] = 0;
          v106 = "Failed";
          if (v93)
            v106 = "Succeeded";
          v107 = __p;
          if (SBYTE7(v181) < 0)
            v107 = (xpc_object_t *)__p[0];
          *(_DWORD *)buf = 136315394;
          v221 = v106;
          v222 = 2080;
          v223 = v107;
          _os_log_impl(&dword_1BF566000, v94, OS_LOG_TYPE_DEFAULT, "#I %s to remove path: %s", buf, 0x16u);
          if (SBYTE7(v181) < 0)
          {
            operator delete(__p[0]);
            if ((v187[23] & 0x80000000) != 0)
              goto LABEL_193;
          }
          else if ((v187[23] & 0x80000000) != 0)
          {
LABEL_193:
            operator delete(*(void **)v187);
          }
LABEL_143:
          if (++v78 == v79)
            goto LABEL_194;
        }
      }
    }
    memmove(v67, v69, v66);
    goto LABEL_127;
  }
  v51 = ctu::fs::remove_dir();
  v52 = a1[11];
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    v53 = "Failed";
    if (v51)
      v53 = "Succeeded";
    v54 = v189;
    if (v189[23] < 0)
      v54 = *(_BYTE **)v189;
    *(_DWORD *)object = 136315394;
    *(_QWORD *)&object[4] = v53;
    *(_WORD *)&object[12] = 2080;
    *(_QWORD *)&object[14] = v54;
    _os_log_impl(&dword_1BF566000, v52, OS_LOG_TYPE_DEFAULT, "#I %s to remove dump path: %s", object, 0x16u);
  }
LABEL_213:
  v118 = xpc_int64_create(0);
  if (!v118)
    v118 = xpc_null_create();
  v70 = (const char *)*MEMORY[0x1E0CFB190];
  xpc_dictionary_set_value(*v2, (const char *)*MEMORY[0x1E0CFB190], v118);
  v119 = xpc_null_create();
  xpc_release(v118);
  xpc_release(v119);
  if ((v189[23] & 0x80000000) != 0)
    operator delete(*(void **)v189);
LABEL_217:
  v120 = xpc_dictionary_get_value(*v2, v70);
  *(_QWORD *)object = v120;
  if (v120)
    xpc_retain(v120);
  else
    *(_QWORD *)object = xpc_null_create();
  v121 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(*(xpc_object_t *)object);
  if (SHIBYTE(v215[2]) >= 0)
    v122 = HIBYTE(v215[2]);
  else
    v122 = (size_t)v215[1];
  if (v122 != strlen(v173))
    goto LABEL_249;
  v123 = SHIBYTE(v215[2]) >= 0 ? v215 : (std::string::value_type **)v215[0];
  if (memcmp(v123, v173, v122) || v121 == 2)
    goto LABEL_249;
  v124 = a1[26];
  v199 = v124;
  if (v124)
  {
    dispatch_retain(v124);
    dispatch_group_enter(v124);
  }
  v125 = *v2;
  v198 = v125;
  if (v125)
  {
    xpc_retain(v125);
  }
  else
  {
    v125 = xpc_null_create();
    v198 = v125;
  }
  v217 = 0;
  LogTracker::systemLog_sync((uint64_t)a1, &v199, &v198, v216);
  v126 = v217;
  if (v217 == v216)
  {
    v127 = 4;
    v126 = v216;
  }
  else
  {
    if (!v217)
      goto LABEL_247;
    v127 = 5;
  }
  (*(void (**)(void))(*v126 + 8 * v127))();
LABEL_247:
  xpc_release(v125);
  v198 = 0;
  if (v124)
  {
    dispatch_group_leave(v124);
    dispatch_release(v124);
  }
LABEL_249:
  v128 = (std::__shared_weak_count *)a1[16];
  if (!v128 || (v129 = v2, v130 = (void *)a1[15], (v131 = std::__shared_weak_count::lock(v128)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v132 = v131;
  p_shared_weak_owners = (unint64_t *)&v131->__shared_weak_owners_;
  do
    v134 = __ldxr(p_shared_weak_owners);
  while (__stxr(v134 + 1, p_shared_weak_owners));
  v135 = (unint64_t *)&v131->__shared_owners_;
  do
    v136 = __ldaxr(v135);
  while (__stlxr(v136 - 1, v135));
  if (!v136)
  {
    ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
    std::__shared_weak_count::__release_weak(v132);
  }
  v197.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v137 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v137 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v196[16] = v137;
  *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v137;
  *(_OWORD *)v196 = v137;
  v194 = v130;
  v195 = v132;
  do
    v138 = __ldxr(p_shared_weak_owners);
  while (__stxr(v138 + 1, p_shared_weak_owners));
  *(_QWORD *)v196 = a1;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)&v196[8], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    *(std::string *)&v196[8] = __s;
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v197, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
  else
    v197 = v212;
  *(_QWORD *)&v139 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v139 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v193 = v139;
  *(_OWORD *)&v193[16] = v139;
  v191 = v139;
  v192 = v139;
  *(_OWORD *)&v189[16] = v139;
  v190 = v139;
  *(_QWORD *)v189 = v130;
  *(_QWORD *)&v189[8] = v132;
  do
    v140 = __ldxr(p_shared_weak_owners);
  while (__stxr(v140 + 1, p_shared_weak_owners));
  *(_QWORD *)&v189[16] = a1;
  v189[24] = v175;
  *(_DWORD *)&v189[28] = v121;
  v141 = *v129;
  *(_QWORD *)&v190 = v141;
  if (!v141)
  {
    *(_QWORD *)&v190 = xpc_null_create();
    v142 = v195;
    *((_QWORD *)&v190 + 1) = v194;
    *(_QWORD *)&v191 = v195;
    if (!v195)
      goto LABEL_273;
LABEL_271:
    v143 = (unint64_t *)&v142->__shared_weak_owners_;
    do
      v144 = __ldxr(v143);
    while (__stxr(v144 + 1, v143));
    goto LABEL_273;
  }
  xpc_retain(v141);
  v142 = v195;
  *((_QWORD *)&v190 + 1) = v194;
  *(_QWORD *)&v191 = v195;
  if (v195)
    goto LABEL_271;
LABEL_273:
  *((_QWORD *)&v191 + 1) = *(_QWORD *)v196;
  if ((v196[31] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v192, *(const std::string::value_type **)&v196[8], *(std::string::size_type *)&v196[16]);
  }
  else
  {
    v192 = *(_OWORD *)&v196[8];
    *(_QWORD *)v193 = *(_QWORD *)&v196[24];
  }
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)&v193[8], v197.__r_.__value_.__l.__data_, v197.__r_.__value_.__l.__size_);
  else
    *(std::string *)&v193[8] = v197;
  *(_QWORD *)&v145 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v145 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v188[5] = v145;
  v188[6] = v145;
  v188[3] = v145;
  v188[4] = v145;
  v188[1] = v145;
  v188[2] = v145;
  *(_OWORD *)&v187[16] = v145;
  v188[0] = v145;
  *(_QWORD *)v187 = v130;
  *(_QWORD *)&v187[8] = v132;
  do
    v146 = __ldxr(p_shared_weak_owners);
  while (__stxr(v146 + 1, p_shared_weak_owners));
  v147 = *v129;
  *(_QWORD *)&v187[16] = a1;
  *(_QWORD *)&v187[24] = v147;
  if (v147)
    xpc_retain(v147);
  else
    *(_QWORD *)&v187[24] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v188, (uint64_t)v189);
  *(_QWORD *)&v148 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v148 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v186[5] = v148;
  v186[6] = v148;
  v186[3] = v148;
  v186[4] = v148;
  v186[1] = v148;
  v186[2] = v148;
  v185 = v148;
  v186[0] = v148;
  *(_OWORD *)v183 = v148;
  v184 = v148;
  v181 = v148;
  *(_OWORD *)v182 = v148;
  __p[0] = v130;
  __p[1] = v132;
  do
    v149 = __ldxr(p_shared_weak_owners);
  while (__stxr(v149 + 1, p_shared_weak_owners));
  *(_QWORD *)&v181 = a1;
  DWORD2(v181) = v174;
  BYTE12(v181) = v175;
  if (SHIBYTE(v215[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v182, v215[0], (std::string::size_type)v215[1]);
  }
  else
  {
    *(_OWORD *)v182 = *(_OWORD *)v215;
    v183[0] = v215[2];
  }
  v150 = *v129;
  v183[1] = v150;
  if (!v150)
  {
    v183[1] = xpc_null_create();
    v151 = *(_QWORD *)&v187[8];
    v184 = *(_OWORD *)v187;
    if (!*(_QWORD *)&v187[8])
      goto LABEL_295;
LABEL_293:
    v152 = (unint64_t *)(v151 + 16);
    do
      v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    goto LABEL_295;
  }
  xpc_retain(v150);
  v151 = *(_QWORD *)&v187[8];
  v184 = *(_OWORD *)v187;
  if (*(_QWORD *)&v187[8])
    goto LABEL_293;
LABEL_295:
  v185 = *(_OWORD *)&v187[16];
  if (*(_QWORD *)&v187[24])
    xpc_retain(*(xpc_object_t *)&v187[24]);
  else
    *((_QWORD *)&v185 + 1) = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v186, (uint64_t)v188);
  *(_QWORD *)&v154 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v154 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v179[7] = v154;
  v179[8] = v154;
  v179[5] = v154;
  v179[6] = v154;
  v179[3] = v154;
  v179[4] = v154;
  v179[1] = v154;
  v179[2] = v154;
  *(_OWORD *)v178 = v154;
  v179[0] = v154;
  *(_OWORD *)&__dst[32] = v154;
  *(_OWORD *)v177 = v154;
  *(_OWORD *)&__dst[16] = v154;
  v155 = *v129;
  *(_QWORD *)__dst = a1;
  *(_QWORD *)&__dst[8] = v155;
  if (v155)
    xpc_retain(v155);
  else
    *(_QWORD *)&__dst[8] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&__dst[16], (uint64_t)__p);
  *(_QWORD *)&object[240] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v156 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v156 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&object[224] = v156;
  *(_OWORD *)&object[208] = v156;
  *(_OWORD *)&object[192] = v156;
  *(_OWORD *)&object[176] = v156;
  *(_OWORD *)&object[160] = v156;
  *(_OWORD *)&object[144] = v156;
  *(_OWORD *)&object[128] = v156;
  *(_OWORD *)&object[112] = v156;
  *(_OWORD *)&object[96] = v156;
  *(_OWORD *)&object[80] = v156;
  *(_OWORD *)&object[64] = v156;
  *(_OWORD *)&object[48] = v156;
  *(_OWORD *)&object[32] = v156;
  *(_OWORD *)&object[16] = v156;
  *(_QWORD *)object = v130;
  *(_QWORD *)&object[8] = v132;
  do
    v157 = __ldxr(p_shared_weak_owners);
  while (__stxr(v157 + 1, p_shared_weak_owners));
  *(_QWORD *)&object[16] = a1;
  *(_OWORD *)&object[24] = *(_OWORD *)__dst;
  if (*(_QWORD *)&__dst[8])
    xpc_retain(*(xpc_object_t *)&__dst[8]);
  else
    *(_QWORD *)&object[32] = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&object[40], (uint64_t)&__dst[16]);
  v158 = a1[26];
  v159 = a1[17];
  v160 = (char *)operator new(0xF8uLL);
  v161 = *(_OWORD *)object;
  v162 = *(_OWORD *)&object[16];
  *(_QWORD *)&object[8] = 0;
  *(_QWORD *)object = 0;
  *(_OWORD *)v160 = v161;
  *((_OWORD *)v160 + 1) = v162;
  v163 = *(void **)&object[32];
  *((_QWORD *)v160 + 4) = *(_QWORD *)&object[32];
  if (v163)
    xpc_retain(v163);
  else
    *((_QWORD *)v160 + 4) = xpc_null_create();
  *(_OWORD *)(v160 + 40) = *(_OWORD *)&object[40];
  *(_QWORD *)&object[40] = 0;
  *(_QWORD *)&object[48] = 0;
  v164 = *(_QWORD *)&object[88];
  *((_QWORD *)v160 + 7) = *(_QWORD *)&object[56];
  *(_QWORD *)(v160 + 61) = *(_QWORD *)&object[61];
  *(_OWORD *)(v160 + 72) = *(_OWORD *)&object[72];
  memset(&object[72], 0, 24);
  v165 = *(void **)&object[96];
  *((_QWORD *)v160 + 11) = v164;
  *((_QWORD *)v160 + 12) = v165;
  if (v165)
    xpc_retain(v165);
  else
    *((_QWORD *)v160 + 12) = xpc_null_create();
  *(_OWORD *)(v160 + 104) = *(_OWORD *)&object[104];
  *(_QWORD *)&object[112] = 0;
  *(_QWORD *)&object[104] = 0;
  v166 = *(void **)&object[128];
  *((_QWORD *)v160 + 15) = *(_QWORD *)&object[120];
  *((_QWORD *)v160 + 16) = v166;
  if (v166)
    xpc_retain(v166);
  else
    *((_QWORD *)v160 + 16) = xpc_null_create();
  *(_OWORD *)(v160 + 136) = *(_OWORD *)&object[136];
  *(_QWORD *)&object[144] = 0;
  *(_QWORD *)&object[136] = 0;
  *(_OWORD *)(v160 + 152) = *(_OWORD *)&object[152];
  v167 = *(void **)&object[168];
  *((_QWORD *)v160 + 21) = *(_QWORD *)&object[168];
  if (v167)
    xpc_retain(v167);
  else
    *((_QWORD *)v160 + 21) = xpc_null_create();
  v168 = *(_QWORD *)&object[216];
  *((_QWORD *)v160 + 24) = *(_QWORD *)&object[192];
  *((_OWORD *)v160 + 11) = *(_OWORD *)&object[176];
  *(_OWORD *)&object[176] = 0uLL;
  *(_OWORD *)(v160 + 200) = *(_OWORD *)&object[200];
  *((_QWORD *)v160 + 27) = v168;
  *(_QWORD *)&object[208] = 0;
  *(_QWORD *)&object[200] = 0;
  *((_OWORD *)v160 + 14) = *(_OWORD *)&object[224];
  *((_QWORD *)v160 + 30) = *(_QWORD *)&object[240];
  memset(&object[216], 0, 32);
  dispatch_group_notify_f(v158, v159, v160, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)object);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v179);
  xpc_release(v178[1]);
  v178[1] = 0;
  if (SHIBYTE(v178[0]) < 0)
    operator delete(v177[0]);
  if (*(_QWORD *)&__dst[24])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__dst[24]);
  xpc_release(*(xpc_object_t *)&__dst[8]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v184);
  xpc_release(v183[1]);
  v183[1] = 0;
  if (SHIBYTE(v183[0]) < 0)
    operator delete(v182[0]);
  if (__p[1])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)v187);
  if ((v193[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v193[8]);
    if ((v193[7] & 0x80000000) == 0)
    {
LABEL_328:
      v169 = (std::__shared_weak_count *)v191;
      if (!(_QWORD)v191)
        goto LABEL_330;
      goto LABEL_329;
    }
  }
  else if ((v193[7] & 0x80000000) == 0)
  {
    goto LABEL_328;
  }
  operator delete((void *)v192);
  v169 = (std::__shared_weak_count *)v191;
  if ((_QWORD)v191)
LABEL_329:
    std::__shared_weak_count::__release_weak(v169);
LABEL_330:
  xpc_release((xpc_object_t)v190);
  *(_QWORD *)&v190 = 0;
  if (*(_QWORD *)&v189[8])
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v189[8]);
  if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v197.__r_.__value_.__l.__data_);
    if ((v196[31] & 0x80000000) == 0)
    {
LABEL_334:
      v170 = v195;
      if (!v195)
        goto LABEL_336;
      goto LABEL_335;
    }
  }
  else if ((v196[31] & 0x80000000) == 0)
  {
    goto LABEL_334;
  }
  operator delete(*(void **)&v196[8]);
  v170 = v195;
  if (v195)
LABEL_335:
    std::__shared_weak_count::__release_weak(v170);
LABEL_336:
  std::__shared_weak_count::__release_weak(v132);
  if (v210[24] < 0)
  {
    operator delete(*(void **)&v210[1]);
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_338:
      if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_339;
      goto LABEL_351;
    }
  }
  else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_338;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_339:
    if ((SHIBYTE(v213[2]) & 0x80000000) == 0)
      goto LABEL_340;
    goto LABEL_352;
  }
LABEL_351:
  operator delete(v212.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v213[2]) & 0x80000000) == 0)
  {
LABEL_340:
    if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
      goto LABEL_341;
    goto LABEL_353;
  }
LABEL_352:
  operator delete(v213[0]);
  if ((SHIBYTE(v214[2]) & 0x80000000) == 0)
  {
LABEL_341:
    if ((SHIBYTE(v215[2]) & 0x80000000) == 0)
      return;
LABEL_354:
    operator delete(v215[0]);
    return;
  }
LABEL_353:
  operator delete(v214[0]);
  if (SHIBYTE(v215[2]) < 0)
    goto LABEL_354;
}

void sub_1BF6E972C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF6E9D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a73;

  if (a50 < 0)
  {
    operator delete(__p);
    if (SLOBYTE(STACK[0x20F]) < 0)
    {
LABEL_5:
      operator delete(a73);
      if ((SLOBYTE(STACK[0x367]) & 0x80000000) == 0)
        JUMPOUT(0x1BF6E9CCCLL);
      JUMPOUT(0x1BF6E9CC4);
    }
  }
  else if (SLOBYTE(STACK[0x20F]) < 0)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x1BF6E9CBCLL);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v7 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  if (!v7)
  {
    *(_QWORD *)(a1 + 32) = xpc_null_create();
    v8 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = v8;
    if (!v8)
      goto LABEL_10;
LABEL_8:
    v9 = (unint64_t *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    goto LABEL_10;
  }
  xpc_retain(v7);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  if (v8)
    goto LABEL_8;
LABEL_10:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v11;
  }
  v12 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return a1;
}

void sub_1BF6E9EB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  xpc_release(*(xpc_object_t *)(v1 + 32));
  *(_QWORD *)(v1 + 32) = 0;
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 21) = *(_QWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 16) = v7;
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v8;
  }
  v9 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v9;
  if (!v9)
  {
    *(_QWORD *)(a1 + 56) = xpc_null_create();
    v10 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = v10;
    if (!v10)
      goto LABEL_13;
LABEL_11:
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    goto LABEL_13;
  }
  xpc_retain(v9);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v10;
  if (v10)
    goto LABEL_11;
LABEL_13:
  v13 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v13;
  if (v13)
    xpc_retain(v13);
  else
    *(_QWORD *)(a1 + 88) = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2(a1 + 96, a2 + 96);
  return a1;
}

void sub_1BF6EA004(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (!v3)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 104);
  xpc_release(*(xpc_object_t *)(a1 + 96));
  *(_QWORD *)(a1 + 96) = 0;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5::~$_5(uint64_t a1)
{
  std::__shared_weak_count *v2;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 80);
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(_QWORD *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::~$_4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 64);
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 80);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 96));
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::~$_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v2 = *(std::__shared_weak_count **)(a1 + 48);
      if (!v2)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
LABEL_5:
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1::~$_1(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_7:
    operator delete(*(void **)(a1 + 24));
    v2 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v2)
      return a1;
    goto LABEL_4;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_7;
LABEL_3:
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
LABEL_4:
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t LogTracker::markPurgeable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __darwin_ino64_t v18;
  stat *p_dst;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  void **v29;
  void **v30;
  std::string *v31;
  uint64_t v32;
  void *v33;
  int v34;
  void **v35;
  _WORD *v36;
  int v37;
  size_t size;
  unint64_t v39;
  stat *v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  timespec v49;
  std::string *p_sz;
  std::string *v51;
  DIR *v52;
  DIR *v53;
  dirent *v54;
  _BOOL4 v55;
  NSObject *v56;
  NSObject *v57;
  std::string *v58;
  void *v59;
  int v60;
  void **v61;
  void **v62;
  void *v63;
  std::__shared_weak_count *v64;
  uint64_t *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string v69;
  uint64_t v70;
  std::locale v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  void *v77;
  void **v78;
  uint64_t v79;
  _BYTE v80[48];
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[10];
  std::string v90;
  void *__p[2];
  char v92;
  std::string __sz;
  stat __dst;
  uint8_t buf[4];
  std::string *v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89[0] = v6;
  v89[9] = v6;
  v89[8] = v6;
  v89[7] = v6;
  v89[6] = v6;
  v89[5] = v6;
  v89[4] = v6;
  v89[3] = v6;
  v89[2] = v6;
  v89[1] = v6;
  v88 = v6;
  v87 = v6;
  v86 = v6;
  v85 = v6;
  v84 = v6;
  v83 = v6;
  v7 = MEMORY[0x1E0DE4FE0];
  v8 = MEMORY[0x1E0DE4FE0] + 64;
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *((_QWORD *)&v89[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
  v82 = v9;
  *(uint64_t *)((char *)&v82 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v82 + *(_QWORD *)(v82 - 24));
  std::ios_base::init(v11, &v83);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v82 = v7 + 24;
  *((_QWORD *)&v89[0] + 1) = v8;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v83 = MEMORY[0x1E0DE4FB8] + 16;
  v87 = 0u;
  v88 = 0u;
  LODWORD(v89[0]) = 16;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)".*(", 3);
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = a3;
  else
    v14 = *(_QWORD *)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)").*", 3);
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v80[32] = v17;
  v81 = v17;
  *(_OWORD *)v80 = v17;
  *(_OWORD *)&v80[16] = v17;
  if ((v89[0] & 0x10) != 0)
  {
    v20 = *((_QWORD *)&v88 + 1);
    if (*((_QWORD *)&v88 + 1) < (unint64_t)v86)
    {
      *((_QWORD *)&v88 + 1) = v86;
      v20 = v86;
    }
    v21 = (const void *)*((_QWORD *)&v85 + 1);
    v18 = v20 - *((_QWORD *)&v85 + 1);
    if ((unint64_t)(v20 - *((_QWORD *)&v85 + 1)) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_32;
  }
  else
  {
    if ((v89[0] & 8) == 0)
    {
      v18 = 0;
      HIBYTE(__dst.st_gid) = 0;
      p_dst = &__dst;
      goto LABEL_20;
    }
    v21 = (const void *)v84;
    v18 = v85 - v84;
    if ((_QWORD)v85 - (_QWORD)v84 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_32:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (stat *)operator new(v22 + 1);
    *(_QWORD *)&__dst.st_uid = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst.st_dev = p_dst;
    __dst.st_ino = v18;
    goto LABEL_19;
  }
  HIBYTE(__dst.st_gid) = v18;
  p_dst = &__dst;
  if (v18)
LABEL_19:
    memmove(p_dst, v21, v18);
LABEL_20:
  *((_BYTE *)&p_dst->st_dev + v18) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v80, (uint64_t)&__dst, 0);
  if (SHIBYTE(__dst.st_gid) < 0)
    operator delete(*(void **)&__dst.st_dev);
  v77 = 0;
  v78 = 0;
  v79 = 0;
  std::locale::locale(&v71, (const std::locale *)v80);
  v72 = *(_OWORD *)&v80[8];
  v73 = *(_OWORD *)&v80[24];
  v74 = *(_QWORD *)&v80[40];
  v75 = (std::__shared_weak_count *)v81;
  if ((_QWORD)v81)
  {
    v24 = (unint64_t *)(v81 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v76 = *((_QWORD *)&v81 + 1);
  ctu::fs::get_filtered_files();
  v26 = v75;
  if (!v75)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v75->__shared_owners_;
  do
    v28 = __ldaxr(p_shared_owners);
  while (__stlxr(v28 - 1, p_shared_owners));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    std::locale::~locale(&v71);
    v29 = (void **)v77;
    v30 = v78;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_30;
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v71);
    v29 = (void **)v77;
    v30 = v78;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_30:
      v69 = *(std::string *)a2;
      goto LABEL_35;
    }
  }
  std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
LABEL_35:
  v70 = a1;
  while (v29 != v30)
  {
    v32 = v70;
    v33 = (void *)*((unsigned __int8 *)v29 + 23);
    v34 = (char)v33;
    if ((char)v33 < 0)
      v33 = v29[1];
    if (v33 == (void *)2)
    {
      if (v34 >= 0)
        v36 = v29;
      else
        v36 = *v29;
      if (*v36 == 11822)
        goto LABEL_41;
    }
    else if (v33 == (void *)1)
    {
      v35 = v34 >= 0 ? v29 : (void **)*v29;
      if (*(_BYTE *)v35 == 46)
        goto LABEL_41;
    }
    memset(&__sz, 170, sizeof(__sz));
    v37 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    else
      size = v69.__r_.__value_.__l.__size_;
    v39 = size + 1;
    memset(&__dst, 170, 24);
    if (size + 1 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v39 >= 0x17)
    {
      v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v41 = v39 | 7;
      v42 = v41 + 1;
      v40 = (stat *)operator new(v41 + 1);
      *(_QWORD *)&__dst.st_uid = v42 | 0x8000000000000000;
      *(_QWORD *)&__dst.st_dev = v40;
      __dst.st_ino = size + 1;
    }
    else
    {
      memset(&__dst, 0, 24);
      v40 = &__dst;
      HIBYTE(__dst.st_gid) = size + 1;
      if (!size)
        goto LABEL_69;
    }
    if (v37 >= 0)
      v43 = &v69;
    else
      v43 = (std::string *)v69.__r_.__value_.__r.__words[0];
    memmove(v40, v43, size);
LABEL_69:
    *(_WORD *)((char *)&v40->st_dev + size) = 47;
    v44 = *((char *)v29 + 23);
    if (v44 >= 0)
      v45 = (const std::string::value_type *)v29;
    else
      v45 = (const std::string::value_type *)*v29;
    if (v44 >= 0)
      v46 = *((unsigned __int8 *)v29 + 23);
    else
      v46 = (std::string::size_type)v29[1];
    v47 = std::string::append((std::string *)&__dst, v45, v46);
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    __sz.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__sz.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.st_gid) < 0)
      operator delete(*(void **)&__dst.st_dev);
    v49.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v49.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&__dst.st_blksize = v49;
    *(timespec *)__dst.st_qspare = v49;
    __dst.st_birthtimespec = v49;
    *(timespec *)&__dst.st_size = v49;
    __dst.st_mtimespec = v49;
    __dst.st_ctimespec = v49;
    *(timespec *)&__dst.st_uid = v49;
    __dst.st_atimespec = v49;
    *(timespec *)&__dst.st_dev = v49;
    if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_sz = &__sz;
    else
      p_sz = (std::string *)__sz.__r_.__value_.__r.__words[0];
    if (!stat((const char *)p_sz, &__dst))
    {
      v51 = (__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__sz
          : (std::string *)__sz.__r_.__value_.__r.__words[0];
      v52 = opendir((const char *)v51);
      v53 = v52;
      if (v52)
      {
        v54 = readdir(v52);
        closedir(v53);
        if (v54)
        {
          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__dst, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__dst.st_dev = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
            *(_QWORD *)&__dst.st_uid = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
          }
          v92 = 2;
          strcpy((char *)__p, ".*");
          LogTracker::markPurgeable(v32, &__dst, __p);
          if (v92 < 0)
          {
            operator delete(__p[0]);
            if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
              goto LABEL_81;
          }
          else if ((SHIBYTE(__dst.st_gid) & 0x80000000) == 0)
          {
            goto LABEL_81;
          }
          operator delete(*(void **)&__dst.st_dev);
        }
      }
    }
LABEL_81:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v90, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    else
      v90 = __sz;
    v55 = util::markPurgeableFile((uint64_t *)&v90);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v90.__r_.__value_.__l.__data_);
      v56 = *(NSObject **)(v32 + 88);
      v57 = v56;
      if (v55)
      {
LABEL_93:
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &__sz;
          else
            v31 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          v96 = v31;
          _os_log_impl(&dword_1BF566000, v56, OS_LOG_TYPE_DEFAULT, "#I %s is marked to be purgeable", buf, 0xCu);
          if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_41;
          goto LABEL_98;
        }
        goto LABEL_97;
      }
    }
    else
    {
      v56 = *(NSObject **)(v32 + 88);
      v57 = v56;
      if (v55)
        goto LABEL_93;
    }
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &__sz;
      else
        v58 = (std::string *)__sz.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v96 = v58;
      _os_log_error_impl(&dword_1BF566000, v56, OS_LOG_TYPE_ERROR, "Failed to mark %s to be purgeable", buf, 0xCu);
      if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_41;
LABEL_98:
      operator delete(__sz.__r_.__value_.__l.__data_);
      goto LABEL_41;
    }
LABEL_97:
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_98;
LABEL_41:
    v29 += 3;
  }
  v59 = (void *)v69.__r_.__value_.__r.__words[0];
  v60 = SHIBYTE(v69.__r_.__value_.__r.__words[2]);
  memset(&v69, 0, sizeof(v69));
  if (v60 < 0)
  {
    operator delete(v59);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
  }
  v61 = (void **)v77;
  if (v77)
  {
    v62 = v78;
    v63 = v77;
    if (v78 != v77)
    {
      do
      {
        if (*((char *)v62 - 1) < 0)
          operator delete(*(v62 - 3));
        v62 -= 3;
      }
      while (v62 != v61);
      v63 = v77;
    }
    v78 = v61;
    operator delete(v63);
  }
  v64 = (std::__shared_weak_count *)v81;
  v65 = (uint64_t *)MEMORY[0x1E0DE4F60];
  if ((_QWORD)v81)
  {
    v66 = (unint64_t *)(v81 + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  std::locale::~locale((std::locale *)v80);
  v82 = *v65;
  *(uint64_t *)((char *)&v82 + *(_QWORD *)(v82 - 24)) = v65[3];
  *(_QWORD *)&v83 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v88) < 0)
    operator delete((void *)v87);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8C364]((char *)v89 + 8);
}

void sub_1BF6EAB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,std::locale a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::vector<std::string>::~vector[abi:ne180100](&a26);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a29);
  std::ostringstream::~ostringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void LogTracker::houseKeepingLogs_sync(uint64_t a1, const char *a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  xpc_object_t v37;
  std::__shared_weak_count *v38;
  std::string v39;
  void *v40[2];
  unint64_t v41;
  std::string v42;
  void *__p[2];
  unint64_t v44;
  std::string v45;
  void *__dst[2];
  unint64_t v47;
  _QWORD block[5];

  if ((TelephonyUtilIsInternalBuild() & 1) != 0 || (TelephonyUtilIsCarrierBuild() & 1) != 0)
    goto LABEL_15;
  v4 = (const void *)*MEMORY[0x1E0D01A30];
  v5 = strlen((const char *)*MEMORY[0x1E0D01A30]);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v47 = v9 | 0x8000000000000000;
    __dst[0] = v7;
LABEL_11:
    memmove(v7, v4, (size_t)v6);
    *((_BYTE *)v6 + (_QWORD)v7) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_7;
LABEL_12:
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    goto LABEL_13;
  }
  HIBYTE(v47) = v5;
  v7 = __dst;
  if (v5)
    goto LABEL_11;
  LOBYTE(__dst[0]) = 0;
  if (a2[23] < 0)
    goto LABEL_12;
LABEL_7:
  v45 = *(std::string *)a2;
LABEL_13:
  LogTracker::markPurgeable(a1, (uint64_t)__dst, (uint64_t)&v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_15;
  }
  else if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(__dst[0]);
LABEL_15:
  v10 = (const void *)*MEMORY[0x1E0D01A48];
  v11 = strlen((const char *)*MEMORY[0x1E0D01A48]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __p[1] = v12;
    v44 = v15 | 0x8000000000000000;
    __p[0] = v13;
LABEL_23:
    memmove(v13, v10, (size_t)v12);
    *((_BYTE *)v12 + (_QWORD)v13) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_24;
  }
  HIBYTE(v44) = v11;
  v13 = __p;
  if (v11)
    goto LABEL_23;
  LOBYTE(__p[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_19:
    v42 = *(std::string *)a2;
    goto LABEL_25;
  }
LABEL_24:
  std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_25:
  LogTracker::markPurgeable(a1, (uint64_t)__p, (uint64_t)&v42);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v42.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44) & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if ((SHIBYTE(v44) & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(__p[0]);
LABEL_27:
  v16 = (const void *)*MEMORY[0x1E0D01A68];
  v17 = strlen((const char *)*MEMORY[0x1E0D01A68]);
  if (v17 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v19 = operator new(v20 + 1);
    v40[1] = v18;
    v41 = v21 | 0x8000000000000000;
    v40[0] = v19;
LABEL_35:
    memmove(v19, v16, (size_t)v18);
    *((_BYTE *)v18 + (_QWORD)v19) = 0;
    if ((a2[23] & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_36;
  }
  HIBYTE(v41) = v17;
  v19 = v40;
  if (v17)
    goto LABEL_35;
  LOBYTE(v40[0]) = 0;
  if ((a2[23] & 0x80000000) == 0)
  {
LABEL_31:
    v39 = *(std::string *)a2;
    goto LABEL_37;
  }
LABEL_36:
  std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
LABEL_37:
  LogTracker::markPurgeable(a1, (uint64_t)v40, (uint64_t)&v39);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v39.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
LABEL_39:
      if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v22))
        goto LABEL_47;
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(v41) & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(v40[0]);
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v24))
    goto LABEL_47;
LABEL_45:
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v23)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v25))
  {
LABEL_47:
    v26 = xpc_dictionary_create(0, 0, 0);
    if (v26 || (v26 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v26) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v26);
        v27 = v26;
      }
      else
      {
        v27 = xpc_null_create();
      }
    }
    else
    {
      v27 = xpc_null_create();
      v26 = 0;
    }
    xpc_release(v26);
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    v28 = xpc_string_create(a2);
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E0CF10E0], v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_8;
    block[4] = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v31 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v38 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_62;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
      v31 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v38 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_62;
    }
    v32 = (unint64_t *)(v31 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
LABEL_62:
    abm::HelperClient::create();
    if (!v38)
      goto LABEL_66;
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v35 = __ldaxr(p_shared_owners);
    while (__stlxr(v35 - 1, p_shared_owners));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      v37 = v27;
      if (v27)
        goto LABEL_67;
    }
    else
    {
LABEL_66:
      v37 = v27;
      if (v27)
      {
LABEL_67:
        xpc_retain(v27);
        goto LABEL_70;
      }
    }
    v37 = xpc_null_create();
LABEL_70:
    abm::HelperClient::perform();
    xpc_release(v37);
    do
      v36 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
    while (__stlxr(v36 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
    if (!v36)
    {
      (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
    }
    xpc_release(v27);
  }
}

void sub_1BF6EB2DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 105) < 0)
    operator delete(*(void **)(v46 - 128));
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isDefaultCarrierProfileInstalled(LogTracker *this)
{
  const void *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *__dst[2];
  unint64_t v9;
  int v10;
  std::string __p;

  v10 = -1431655766;
  v1 = (const void *)*MEMORY[0x1E0CFC078];
  v2 = strlen((const char *)*MEMORY[0x1E0CFC078]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v9 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v9) = v2;
  v4 = __dst;
  if (v2)
LABEL_8:
    memmove(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::profile::get((char *)__dst, (uint64_t)&__p))
    util::convert<int>(&__p, &v10, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      return v10 != 0;
LABEL_15:
    operator delete(__dst[0]);
    return v10 != 0;
  }
  if (SHIBYTE(v9) < 0)
    goto LABEL_15;
  return v10 != 0;
}

void sub_1BF6EB500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void LogTracker::getLoggingConfig(xpc_object_t *a1@<X8>)
{
  char *v3;
  std::string *v4;
  __int128 v5;
  unsigned int v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::value_type *v10;
  std::string::size_type size;
  std::string::size_type v12;
  const void *v13;
  void *v14;
  CFTypeID v15;
  const void *v16;
  void *v17;
  std::string v18;
  std::string::value_type __s[23];
  char v20;
  std::string v21;
  std::string v22;
  std::string v23;

  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x38uLL);
  *(_OWORD *)&v21.__r_.__value_.__r.__words[1] = xmmword_1BF740C30;
  strcpy(v21.__r_.__value_.__l.__data_, "/System/Library/PrivateFrameworks/ABMHelper.framework/");
  v3 = (char *)operator new(0x20uLL);
  strcpy(v3, "com.apple.commcenter.logconfig");
  v4 = std::string::append(&v21, v3, 0x1EuLL);
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (config::hw::watch((config::hw *)v4))
  {
    strcpy(__s, ".watchos");
    v6 = 8;
  }
  else
  {
    strcpy(__s, ".ios");
    v6 = 4;
  }
  v20 = v6;
  v7 = std::string::append(&v22, __s, v6);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v23, ".plist", 6uLL);
  v10 = (std::string::value_type *)v9->__r_.__value_.__r.__words[0];
  size = v9->__r_.__value_.__l.__size_;
  v12 = v9->__r_.__value_.__r.__words[2];
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_6:
      if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)__s);
  if ((SHIBYTE(v22.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_7:
    operator delete(v3);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v12 & 0x8000000000000000) == 0)
      goto LABEL_9;
LABEL_14:
    std::string::__init_copy_ctor_external(&v18, v10, size);
    goto LABEL_15;
  }
LABEL_12:
  operator delete(v22.__r_.__value_.__l.__data_);
  operator delete(v3);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_13;
LABEL_8:
  if ((v12 & 0x8000000000000000) != 0)
    goto LABEL_14;
LABEL_9:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  v18.__r_.__value_.__l.__size_ = size;
  v18.__r_.__value_.__r.__words[2] = v12;
LABEL_15:
  util::readPlistToCFDictionary((uint64_t)&v18, &v22);
  v14 = (void *)v22.__r_.__value_.__r.__words[0];
  if (!v22.__r_.__value_.__r.__words[0]
    || (v15 = CFGetTypeID(v22.__r_.__value_.__l.__data_), v15 != CFDictionaryGetTypeID()))
  {
    v14 = 0;
    v23.__r_.__value_.__r.__words[0] = 0;
    v16 = (const void *)v22.__r_.__value_.__r.__words[0];
    if (!v22.__r_.__value_.__r.__words[0])
      goto LABEL_21;
    goto LABEL_20;
  }
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  CFRetain(v14);
  v16 = (const void *)v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__r.__words[0])
LABEL_20:
    CFRelease(v16);
LABEL_21:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  ctu::cf_to_xpc((ctu *)v14, v13);
  v17 = (void *)v22.__r_.__value_.__r.__words[0];
  *a1 = (xpc_object_t)v22.__r_.__value_.__r.__words[0];
  if (v17 && MEMORY[0x1C3B8CD78](v17) == MEMORY[0x1E0C812F8])
    xpc_retain(v17);
  else
    *a1 = xpc_null_create();
  xpc_release(v22.__r_.__value_.__l.__data_);
  if (v14)
    CFRelease(v14);
  if ((v12 & 0x8000000000000000) != 0)
    operator delete(v10);
}

void sub_1BF6EB804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  uint64_t v34;

  if (v34 < 0)
    operator delete(v33);
  _Unwind_Resume(exception_object);
}

void LogTracker::checkLoggingVersion_sync(NSObject **this)
{
  const void *v2;
  size_t v3;
  size_t v4;
  __int128 *p_dst;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  xpc_object_t value;
  NSObject *v16;
  const char *v17;
  int v18;
  size_t v19;
  size_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  capabilities::radio *v31;
  int v32;
  NSObject *v33;
  NSObject *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const char *v40;
  xpc_object_t v41;
  void **v42;
  xpc_object_t v43;
  const char *v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  xpc_object_t v52;
  void *aBlock;
  xpc_object_t v54;
  char v55[24];
  xpc_object_t object;
  int v57;
  void *__p[2];
  unint64_t v59;
  std::string v60;
  int v61;
  xpc_object_t xdict;
  __int128 __dst;
  _QWORD v64[4];

  v64[3] = *MEMORY[0x1E0C80C00];
  if (!capabilities::trace::allowed((capabilities::trace *)this))
    return;
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  LogTracker::getLoggingConfig(&xdict);
  v61 = 0;
  memset(&v60, 0, sizeof(v60));
  v2 = (const void *)*MEMORY[0x1E0CFB098];
  v3 = strlen((const char *)*MEMORY[0x1E0CFB098]);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    p_dst = (__int128 *)operator new(v6 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v64[0] = v7 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_9;
  }
  HIBYTE(v64[0]) = v3;
  p_dst = &__dst;
  if (v3)
LABEL_9:
    memmove(p_dst, v2, v4);
  *((_BYTE *)p_dst + v4) = 0;
  v8 = (const void *)*MEMORY[0x1E0CFB938];
  v9 = strlen((const char *)*MEMORY[0x1E0CFB938]);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    v11 = operator new(v12 + 1);
    __p[1] = v10;
    v59 = v13 | 0x8000000000000000;
    __p[0] = v11;
    goto LABEL_17;
  }
  HIBYTE(v59) = v9;
  v11 = __p;
  if (v9)
LABEL_17:
    memmove(v11, v8, (size_t)v10);
  *((_BYTE *)v10 + (_QWORD)v11) = 0;
  v14 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
  if (SHIBYTE(v59) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
    {
LABEL_20:
      if (v14)
        goto LABEL_21;
      goto LABEL_25;
    }
  }
  else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete((void *)__dst);
  if (v14)
  {
LABEL_21:
    util::convert<int>(&v60, &v61, 0);
    value = xpc_dictionary_get_value(xdict, "LoggingConfigVersion");
    *(_QWORD *)&__dst = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)&__dst = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&__dst, 0);
    xpc_release((xpc_object_t)__dst);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    {
      *v60.__r_.__value_.__l.__data_ = 0;
      v60.__r_.__value_.__l.__size_ = 0;
      v57 = 0;
      v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
      {
LABEL_30:
        v20 = v19;
        if (v19 >= 0x17)
        {
          v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v22 = v19 | 7;
          v23 = v22 + 1;
          v21 = (__int128 *)operator new(v22 + 1);
          *((_QWORD *)&__dst + 1) = v20;
          v64[0] = v23 | 0x8000000000000000;
          *(_QWORD *)&__dst = v21;
        }
        else
        {
          HIBYTE(v64[0]) = v19;
          v21 = &__dst;
          if (!v19)
          {
LABEL_37:
            *((_BYTE *)v21 + v20) = 0;
            v24 = (const char *)*MEMORY[0x1E0CFB7D0];
            v25 = strlen((const char *)*MEMORY[0x1E0CFB7D0]);
            if (v25 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v26 = (void *)v25;
            if (v25 >= 0x17)
            {
              v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v25 | 7) != 0x17)
                v28 = v25 | 7;
              v29 = v28 + 1;
              v27 = operator new(v28 + 1);
              __p[1] = v26;
              v59 = v29 | 0x8000000000000000;
              __p[0] = v27;
            }
            else
            {
              HIBYTE(v59) = v25;
              v27 = __p;
              if (!v25)
              {
LABEL_45:
                *((_BYTE *)v26 + (_QWORD)v27) = 0;
                v30 = prop::get((char *)&__dst, (char *)__p, (uint64_t)&v60);
                if (SHIBYTE(v59) < 0)
                {
                  operator delete(__p[0]);
                  if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                  {
LABEL_47:
                    if (v30)
                    {
LABEL_48:
                      v31 = (capabilities::radio *)util::convert<int>(&v60, &v57, 0);
                      v32 = capabilities::radio::product(v31);
                      v33 = this[11];
                      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_QWORD *)&__dst = __PAIR64__(v61, 67109888);
                        WORD4(__dst) = 1024;
                        *(_DWORD *)((char *)&__dst + 10) = v18;
                        HIWORD(__dst) = 1024;
                        LODWORD(v64[0]) = v57;
                        WORD2(v64[0]) = 1024;
                        *(_DWORD *)((char *)v64 + 6) = v32;
                        _os_log_impl(&dword_1BF566000, v33, OS_LOG_TYPE_DEFAULT, "#I Stored Logging Version: %d, Default Logging Version: %d, Stored Product ID: %d, Current Product ID: %d", (uint8_t *)&__dst, 0x1Au);
                      }
                      if (v61 < v18 || v57 != v32)
                      {
                        v34 = this[11];
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__dst) = 0;
                          _os_log_impl(&dword_1BF566000, v34, OS_LOG_TYPE_DEFAULT, "#I Updating Log Configuration", (uint8_t *)&__dst, 2u);
                        }
                        object = xdict;
                        if (xdict)
                          xpc_retain(xdict);
                        else
                          object = xpc_null_create();
                        v55[23] = 13;
                        strcpy(v55, "Not Specified");
                        LogTracker::updateLoggingSettings_sync(this, 2, &object, (uint64_t)v55);
                        xpc_release(object);
                        object = 0;
                        v35 = xpc_dictionary_create(0, 0, 0);
                        if (v35 || (v35 = xpc_null_create()) != 0)
                        {
                          if (MEMORY[0x1C3B8CD78](v35) == MEMORY[0x1E0C812F8])
                          {
                            xpc_retain(v35);
                            v36 = v35;
                          }
                          else
                          {
                            v36 = xpc_null_create();
                          }
                        }
                        else
                        {
                          v36 = xpc_null_create();
                          v35 = 0;
                        }
                        xpc_release(v35);
                        v37 = xpc_string_create((const char *)v2);
                        if (!v37)
                          v37 = xpc_null_create();
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CFB030], v37);
                        v38 = xpc_null_create();
                        xpc_release(v37);
                        xpc_release(v38);
                        v39 = xpc_string_create((const char *)v8);
                        if (!v39)
                          v39 = xpc_null_create();
                        v40 = (const char *)*MEMORY[0x1E0CFB550];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CFB550], v39);
                        v41 = xpc_null_create();
                        xpc_release(v39);
                        xpc_release(v41);
                        __p[0] = 0;
                        __p[1] = 0;
                        v59 = 0;
                        std::to_string((std::string *)&__dst, v18);
                        *(_OWORD *)__p = __dst;
                        v59 = v64[0];
                        if (v64[0] >= 0)
                          v42 = __p;
                        else
                          v42 = (void **)__p[0];
                        v43 = xpc_string_create((const char *)v42);
                        if (!v43)
                          v43 = xpc_null_create();
                        v44 = (const char *)*MEMORY[0x1E0CFB6A8];
                        xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CFB6A8], v43);
                        v45 = xpc_null_create();
                        xpc_release(v43);
                        xpc_release(v45);
                        if (SHIBYTE(v59) < 0)
                          operator delete(__p[0]);
                        v54 = v36;
                        if (v36)
                          xpc_retain(v36);
                        else
                          v54 = xpc_null_create();
                        aBlock = 0;
                        LogTracker::setProperty_sync(this, &v54, (uint64_t *)&aBlock);
                        if (aBlock)
                          _Block_release(aBlock);
                        xpc_release(v54);
                        v54 = 0;
                        v46 = xpc_string_create(v24);
                        if (!v46)
                          v46 = xpc_null_create();
                        xpc_dictionary_set_value(v36, v40, v46);
                        v47 = xpc_null_create();
                        xpc_release(v46);
                        xpc_release(v47);
                        __p[0] = 0;
                        __p[1] = 0;
                        v59 = 0;
                        std::to_string((std::string *)&__dst, v32);
                        *(_OWORD *)__p = __dst;
                        v59 = v64[0];
                        if (v64[0] >= 0)
                          v48 = __p;
                        else
                          v48 = (void **)__p[0];
                        v49 = xpc_string_create((const char *)v48);
                        if (!v49)
                          v49 = xpc_null_create();
                        xpc_dictionary_set_value(v36, v44, v49);
                        v50 = xpc_null_create();
                        xpc_release(v49);
                        xpc_release(v50);
                        if (SHIBYTE(v59) < 0)
                          operator delete(__p[0]);
                        v52 = v36;
                        if (v36)
                          xpc_retain(v36);
                        else
                          v52 = xpc_null_create();
                        v51 = 0;
                        LogTracker::setProperty_sync(this, &v52, (uint64_t *)&v51);
                        if (v51)
                          _Block_release(v51);
                        xpc_release(v52);
                        v52 = 0;
                        xpc_release(v36);
                      }
                      goto LABEL_101;
                    }
LABEL_60:
                    v16 = this[11];
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__dst) = 0;
                      v17 = "Failed to get stored Device ID";
                      goto LABEL_62;
                    }
                    goto LABEL_101;
                  }
                }
                else if ((SHIBYTE(v64[0]) & 0x80000000) == 0)
                {
                  goto LABEL_47;
                }
                operator delete((void *)__dst);
                if (v30)
                  goto LABEL_48;
                goto LABEL_60;
              }
            }
            memmove(v27, v24, (size_t)v26);
            goto LABEL_45;
          }
        }
        memmove(v21, v2, v20);
        goto LABEL_37;
      }
    }
    else
    {
      v60.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&v60.__r_.__value_.__s + 23) = 0;
      v57 = 0;
      v19 = strlen((const char *)v2);
      if (v19 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_30;
    }
    std::string::__throw_length_error[abi:ne180100]();
  }
LABEL_25:
  v16 = this[11];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__dst) = 0;
    v17 = "Failed to get stored version";
LABEL_62:
    _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&__dst, 2u);
  }
LABEL_101:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  xpc_release(xdict);
}

void sub_1BF6EC17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, xpc_object_t object, void *a12, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,xpc_object_t a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t LogTracker::updateLoggingSettings_sync(_QWORD *a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  void *v12;
  std::string *v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  LogTracker *v18;
  _BOOL8 isDefaultCarrierProfileInstalled;
  int v20;
  NSObject *v22;
  const char *v23;
  BOOL v24;
  char v25;
  xpc_object_t v26;
  xpc_object_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_weak_owners;
  unint64_t v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  NSObject *v38;
  unsigned __int8 v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  unint64_t v48;
  void *v50;
  NSObject *v51;
  xpc_object_t v52;
  std::__shared_weak_count *v53;
  _QWORD aBlock[6];
  std::__shared_weak_count *v55;
  std::string __p;
  void *v57;
  dispatch_object_t object;
  std::string v59;
  _QWORD applier[5];
  std::string v61;
  xpc_object_t v62;
  std::string v63;
  int v64;
  uint8_t buf[8];
  uint64_t v66;
  void (*v67)(uint64_t);
  void *v68;
  __int128 *v69;

  v8 = MEMORY[0x1C3B8CD78](*a3);
  v9 = MEMORY[0x1E0C812F8];
  if (v8 != MEMORY[0x1E0C812F8])
  {
    LogTracker::getLoggingConfig((xpc_object_t *)buf);
    v10 = *(_QWORD *)buf;
    v11 = xpc_null_create();
    v12 = (void *)*a3;
    *a3 = v10;
    xpc_release(v12);
    xpc_release(v11);
  }
  v64 = a2;
  memset(&v63, 170, sizeof(v63));
  LogTracker::validateSelectedConfig_sync((uint64_t)a1, &v64, &v63);
  v62 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v63;
  else
    v13 = (std::string *)v63.__r_.__value_.__r.__words[0];
  *(_QWORD *)buf = a3;
  v66 = (uint64_t)v13;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)buf, &v62);
  v14 = v62;
  v15 = MEMORY[0x1E0C809B0];
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke;
  applier[3] = &__block_descriptor_64_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = a1;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v61 = *(std::string *)a4;
  xpc_dictionary_apply(v14, applier);
  if (!TelephonyUtilIsCarrierBuild() || (TelephonyUtilIsInternalBuild() & 1) != 0)
  {
LABEL_82:
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_84;
    goto LABEL_83;
  }
  memset(&v59, 0, sizeof(v59));
  v16 = xpc_dictionary_create(0, 0, 0);
  if (v16 || (v16 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v16) == v9)
    {
      xpc_retain(v16);
      v17 = v16;
    }
    else
    {
      v17 = xpc_null_create();
    }
  }
  else
  {
    v17 = xpc_null_create();
    v16 = 0;
  }
  xpc_release(v16);
  isDefaultCarrierProfileInstalled = LogTracker::isDefaultCarrierProfileInstalled(v18);
  v20 = v64;
  if (v64 == 1 && isDefaultCarrierProfileInstalled)
  {
    std::string::__assign_external(&v59, (const std::string::value_type *)*MEMORY[0x1E0CF1138]);
    v22 = a1[11];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v23 = "#D Uninstall a profile";
      goto LABEL_90;
    }
LABEL_30:
    v28 = (std::__shared_weak_count *)a1[16];
    if (!v28)
      goto LABEL_91;
    goto LABEL_31;
  }
  v24 = LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)isDefaultCarrierProfileInstalled);
  v25 = v20 != 2 || v24;
  if ((v25 & 1) != 0)
    goto LABEL_81;
  v26 = xpc_BOOL_create(1);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1188], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  std::string::__assign_external(&v59, (const std::string::value_type *)*MEMORY[0x1E0CF1120]);
  v22 = a1[11];
  if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    goto LABEL_30;
  *(_WORD *)buf = 0;
  v23 = "#D Install a profile";
LABEL_90:
  _os_log_debug_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEBUG, v23, buf, 2u);
  v28 = (std::__shared_weak_count *)a1[16];
  if (!v28)
LABEL_91:
    std::__throw_bad_weak_ptr[abi:ne180100]();
LABEL_31:
  v29 = a1[15];
  v30 = std::__shared_weak_count::lock(v28);
  if (!v30)
    goto LABEL_91;
  v31 = v30;
  p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v31);
  }
  v57 = (void *)0xAAAAAAAAAAAAAAAALL;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = v15;
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_43;
  aBlock[3] = &__block_descriptor_80_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  aBlock[4] = a1;
  aBlock[5] = v29;
  v55 = v31;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    __p = v59;
  v37 = _Block_copy(aBlock);
  v38 = a1[17];
  if (v38)
    dispatch_retain(v38);
  v57 = v37;
  object = v38;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)buf = v15;
  v66 = 0x40000000;
  v67 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v68 = &__block_descriptor_tmp_13_8;
  v69 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v40 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_50;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v40 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_50;
  }
  v41 = (unint64_t *)(v40 + 8);
  do
    v42 = __ldxr(v41);
  while (__stxr(v42 + 1, v41));
LABEL_50:
  abm::HelperClient::create();
  if (v53)
  {
    v43 = (unint64_t *)&v53->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v45 = xpc_string_create((const char *)*MEMORY[0x1E0CF11B8]);
  if (!v45)
    v45 = xpc_null_create();
  xpc_dictionary_set_value(v17, (const char *)*MEMORY[0x1E0CF1040], v45);
  v46 = xpc_null_create();
  xpc_release(v45);
  xpc_release(v46);
  v52 = v17;
  if (v17)
  {
    xpc_retain(v17);
    v47 = v57;
    if (!v57)
      goto LABEL_62;
    goto LABEL_61;
  }
  v52 = xpc_null_create();
  v47 = v57;
  if (v57)
LABEL_61:
    v47 = _Block_copy(v47);
LABEL_62:
  v50 = v47;
  v51 = object;
  if (object)
    dispatch_retain(object);
  abm::HelperClient::perform();
  if (v51)
    dispatch_release(v51);
  if (v50)
    _Block_release(v50);
  xpc_release(v52);
  do
    v48 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v48 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v48)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (object)
    dispatch_release(object);
  if (v57)
    _Block_release(v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v55)
    std::__shared_weak_count::__release_weak(v55);
  std::__shared_weak_count::__release_weak(v31);
LABEL_81:
  xpc_release(v17);
  if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_82;
  operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
LABEL_83:
    operator delete(v61.__r_.__value_.__l.__data_);
LABEL_84:
  xpc_release(v62);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BF6ECA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;

  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v49);
  xpc_release(v48);
  if (a37 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  xpc_release(*(xpc_object_t *)(v50 - 168));
  if (*(char *)(v50 - 137) < 0)
    operator delete(*(void **)(v50 - 160));
  _Unwind_Resume(a1);
}

void LogTracker::setProperty_sync(_QWORD *a1, xpc_object_t *a2, uint64_t *a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t value;
  xpc_object_t v10;
  xpc_object_t v11;
  char isSupported;
  char v13;
  xpc_object_t v14;
  xpc_object_t v15;
  const object *v16;
  _BOOL4 isInternalProperty_sync;
  int v18;
  uint64_t v19;
  xpc_object_t v20;
  uint64_t v21;
  xpc_object_t v22;
  void *v23;
  CFTypeID v24;
  const void *v25;
  const void *v26;
  size_t v27;
  void *v28;
  void **v29;
  xpc_object_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  std::string *v37;
  const void *v38;
  size_t v39;
  size_t v40;
  __int128 *p_buf;
  uint64_t v42;
  uint64_t v43;
  xpc_object_t v44;
  void *v45;
  void *v46;
  _QWORD v47[4];
  void *v48;
  const void *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v55;
  xpc_object_t v56;
  std::string v57;
  xpc_object_t v58;
  xpc_object_t object[3];
  xpc_object_t v60[3];
  std::string v61;
  void *v62;
  __int128 buf;
  unint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = xpc_dictionary_create(0, 0, 0);
  v7 = v6;
  if (v6)
  {
    v62 = v6;
  }
  else
  {
    v7 = xpc_null_create();
    v62 = v7;
    if (!v7)
    {
      v8 = xpc_null_create();
      v7 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v7) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  v8 = xpc_null_create();
LABEL_8:
  v62 = v8;
LABEL_9:
  xpc_release(v7);
  memset(&v61, 170, sizeof(v61));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB030]);
  v60[0] = value;
  if (value)
    xpc_retain(value);
  else
    v60[0] = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v60[0]);
  memset(v60, 170, sizeof(v60));
  v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB550]);
  object[0] = v10;
  if (v10)
    xpc_retain(v10);
  else
    object[0] = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB6A8]);
  v58 = v11;
  if (v11)
    xpc_retain(v11);
  else
    v58 = xpc_null_create();
  buf = 0uLL;
  v64 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v58);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v57, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
  else
    v57 = v61;
  isSupported = abm::trace::isSupported();
  v13 = isSupported;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v13 & 1) != 0)
    {
LABEL_23:
      LODWORD(v58) = -534716416;
      v14 = *a2;
      v51 = v14;
      if (v14)
      {
        xpc_retain(v14);
      }
      else
      {
        v14 = xpc_null_create();
        v51 = v14;
      }
      isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)a1, &v51, &v62, &v58);
      xpc_release(v14);
      v51 = 0;
      if (isInternalProperty_sync)
      {
        if (*a3)
          dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a3, (unsigned int *)&v58, &v62);
        goto LABEL_89;
      }
      if ((*(unsigned int (**)(_QWORD *))(*a1 + 88))(a1))
      {
        v18 = prop::set((char *)&v61, (char *)v60, (char *)object);
        if (*a3)
        {
          if (v18)
            v19 = 0;
          else
            v19 = 3760250880;
          v20 = xpc_null_create();
          v21 = *a3;
          *(_QWORD *)&buf = v20;
          v22 = xpc_null_create();
          (*(void (**)(uint64_t, uint64_t, __int128 *))(v21 + 16))(v21, v19, &buf);
          xpc_release((xpc_object_t)buf);
          xpc_release(v22);
        }
        goto LABEL_89;
      }
      v38 = (const void *)*MEMORY[0x1E0CFBEE0];
      v39 = strlen((const char *)*MEMORY[0x1E0CFBEE0]);
      if (v39 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v40 = v39;
      if (v39 >= 0x17)
      {
        v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v39 | 7) != 0x17)
          v42 = v39 | 7;
        v43 = v42 + 1;
        p_buf = (__int128 *)operator new(v42 + 1);
        *((_QWORD *)&buf + 1) = v40;
        v64 = v43 | 0x8000000000000000;
        *(_QWORD *)&buf = p_buf;
      }
      else
      {
        HIBYTE(v64) = v39;
        p_buf = &buf;
        if (!v39)
          goto LABEL_78;
      }
      memmove(p_buf, v38, v40);
LABEL_78:
      *((_BYTE *)p_buf + v40) = 0;
      v44 = *a2;
      v50 = v44;
      if (v44)
      {
        xpc_retain(v44);
      }
      else
      {
        v44 = xpc_null_create();
        v50 = v44;
      }
      v47[0] = MEMORY[0x1E0C809B0];
      v47[1] = 3321888768;
      v47[2] = ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke;
      v47[3] = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      v45 = (void *)*a3;
      if (*a3)
        v45 = _Block_copy(v45);
      v48 = v45;
      v46 = _Block_copy(v47);
      v49 = v46;
      Service::runCommand((uint64_t)a1, (uint64_t)&buf, &v50, &v49);
      if (v46)
        _Block_release(v46);
      xpc_release(v44);
      v50 = 0;
      if (SHIBYTE(v64) < 0)
        operator delete((void *)buf);
      if (v48)
        _Block_release(v48);
      goto LABEL_89;
    }
  }
  else if ((isSupported & 1) != 0)
  {
    goto LABEL_23;
  }
  v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v15 = *a2;
  v56 = v15;
  if (v15)
    xpc_retain(v15);
  else
    v56 = xpc_null_create();
  xpc::bridge((xpc *)&v56, v16);
  v23 = (void *)buf;
  if (!(_QWORD)buf || (v24 = CFGetTypeID((CFTypeRef)buf), v24 != CFDictionaryGetTypeID()))
  {
    v58 = 0;
    v25 = (const void *)buf;
    if (!(_QWORD)buf)
      goto LABEL_45;
    goto LABEL_44;
  }
  v58 = v23;
  CFRetain(v23);
  v25 = (const void *)buf;
  if ((_QWORD)buf)
LABEL_44:
    CFRelease(v25);
LABEL_45:
  xpc_release(v56);
  v26 = (const void *)*MEMORY[0x1E0CFB9B8];
  v27 = strlen((const char *)*MEMORY[0x1E0CFB9B8]);
  if (v27 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v28 = (void *)v27;
  if (v27 >= 0x17)
  {
    v31 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17)
      v31 = v27 | 7;
    v32 = v31 + 1;
    v29 = (void **)operator new(v31 + 1);
    __dst[1] = v28;
    v55 = v32 | 0x8000000000000000;
    __dst[0] = v29;
LABEL_53:
    memmove(v29, v26, (size_t)v28);
    *((_BYTE *)v28 + (_QWORD)v29) = 0;
    v30 = v58;
    cf = v58;
    if (!v58)
      goto LABEL_55;
    goto LABEL_54;
  }
  HIBYTE(v55) = v27;
  v29 = __dst;
  if (v27)
    goto LABEL_53;
  LOBYTE(__dst[0]) = 0;
  v30 = v58;
  cf = v58;
  if (v58)
LABEL_54:
    CFRetain(v30);
LABEL_55:
  aBlock = 0;
  Service::broadcastEvent((uint64_t)a1, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst[0]);
    v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
LABEL_61:
      if (!*a3)
        goto LABEL_63;
      goto LABEL_62;
    }
  }
  else
  {
    v33 = a1[11];
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      goto LABEL_61;
  }
  v37 = &v61;
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = (std::string *)v61.__r_.__value_.__r.__words[0];
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v37;
  _os_log_debug_impl(&dword_1BF566000, v33, OS_LOG_TYPE_DEBUG, "#D The property (%s) not supported in setting", (uint8_t *)&buf, 0xCu);
  if (!*a3)
    goto LABEL_63;
LABEL_62:
  v34 = xpc_null_create();
  v35 = *a3;
  *(_QWORD *)&buf = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, __int128 *))(v35 + 16))(v35, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v36);
LABEL_63:
  if (v30)
    CFRelease(v30);
LABEL_89:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0)
      goto LABEL_91;
LABEL_94:
    operator delete(v60[0]);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
LABEL_95:
    operator delete(v61.__r_.__value_.__l.__data_);
    goto LABEL_92;
  }
  operator delete(object[0]);
  if (SHIBYTE(v60[2]) < 0)
    goto LABEL_94;
LABEL_91:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_95;
LABEL_92:
  xpc_release(v62);
}

void sub_1BF6ED27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *aBlock, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void LogTracker::validateSelectedConfig_sync(uint64_t a1@<X0>, _DWORD *a2@<X1>, std::string *a3@<X8>)
{
  const char *v6;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  const std::string::value_type *v12;
  NSObject *v13;
  uint8_t v14[16];

  memset(a3, 170, sizeof(std::string));
  v6 = (const char *)abm::helper::asString();
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = operator new(v10 + 1);
    a3->__r_.__value_.__l.__size_ = v8;
    a3->__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    a3->__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
LABEL_9:
    memmove(v9, v6, v8);
    *((_BYTE *)v9 + v8) = 0;
    if (*a2 != 5)
      return;
    goto LABEL_10;
  }
  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v7;
  v9 = a3;
  if (v7)
    goto LABEL_9;
  a3->__r_.__value_.__s.__data_[0] = 0;
  if (*a2 != 5)
    return;
LABEL_10:
  *a2 = 2;
  v12 = (const std::string::value_type *)abm::helper::asString();
  std::string::__assign_external(a3, v12);
  v13 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Update the logging config to Default as the requested logging config is not supported", v14, 2u);
  }
}

void sub_1BF6ED650(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  _QWORD applier[6];
  std::string __p;

  v5 = *(_QWORD *)(a1 + 32);
  if (object)
  {
    v6 = object;
    xpc_retain(object);
    goto LABEL_4;
  }
  v6 = xpc_null_create();
  if (v6)
  {
LABEL_4:
    if (MEMORY[0x1C3B8CD78](v6) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v6);
      v7 = v6;
    }
    else
    {
      v7 = xpc_null_create();
    }
    goto LABEL_8;
  }
  v7 = xpc_null_create();
  v6 = 0;
LABEL_8:
  xpc_release(v6);
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3321888768;
  applier[2] = ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2;
  applier[3] = &__block_descriptor_72_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE_e13_B24__0r_8_v16l;
  applier[4] = v5;
  applier[5] = a2;
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  xpc_dictionary_apply(v7, applier);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v7);
  return 1;
}

void sub_1BF6ED798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  xpc_release(v21);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t a3)
{
  _QWORD *v6;
  NSObject *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v19;
  const char *v20;
  void *p_p;
  void *aBlock;
  xpc_object_t object;
  xpc_object_t v24;
  void *__p;
  char v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD **)(a1 + 32);
  v7 = v6[11];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v19 = *(_QWORD *)(a1 + 40);
    v24 = a3;
    if (a3)
      xpc_retain(a3);
    else
      v24 = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v24, (const object *)"", v20);
    if (v26 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    *(_DWORD *)buf = 136315650;
    v28 = v19;
    v29 = 2080;
    v30 = a2;
    v31 = 2080;
    v32 = p_p;
    _os_log_debug_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEBUG, "#D tracename: %s, traceKey: %s, traceValue: %s", buf, 0x20u);
    if (v26 < 0)
      operator delete(__p);
    xpc_release(v24);
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  if (v8 || (v8 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v8) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v8);
      v9 = v8;
    }
    else
    {
      v9 = xpc_null_create();
    }
  }
  else
  {
    v9 = xpc_null_create();
    v8 = 0;
  }
  xpc_release(v8);
  v10 = xpc_string_create(*(const char **)(a1 + 40));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB030], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = xpc_string_create(a2);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB550], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  if (a3)
    xpc_retain(a3);
  else
    a3 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFB6A8], a3);
  v14 = xpc_null_create();
  xpc_release(a3);
  xpc_release(v14);
  v15 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    v15 = *(const char **)v15;
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v9, (const char *)*MEMORY[0x1E0CFBF88], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  aBlock = 0;
  LogTracker::setProperty_sync(v6, &object, (uint64_t *)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  object = 0;
  xpc_release(v9);
  return 1;
}

void sub_1BF6EDAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN10LogTracker26updateLoggingSettings_syncEN3abm6helper13LoggingConfigEN3xpc4dictENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE_block_invoke_43(uint64_t a1, int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *a2;
        v12 = *(NSObject **)(v5 + 88);
        if (v11)
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            v13 = (_QWORD *)(a1 + 56);
            if (*(char *)(a1 + 79) < 0)
              v13 = (_QWORD *)*v13;
            v15 = 136315138;
            v16 = v13;
            _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Failed to %s", (uint8_t *)&v15, 0xCu);
          }
        }
        else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v14 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v14 = (_QWORD *)*v14;
          v15 = 136315138;
          v16 = v14;
          _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D Succeeded to %s", (uint8_t *)&v15, 0xCu);
        }
      }
    }
  }
}

void __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF6EDDE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void ___ZN10LogTracker16setProperty_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS1_EEE_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;

  v5 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  v3 = (uint64_t *)(a1 + 32);
  if (v4)
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v3, &v5, a3);
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791F948;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791F948;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF6EE15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF6EE178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<LogTracker>::shared_ptr[abi:ne180100]<LogTracker,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791F988;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF6EE294(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF6EE2B4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<LogTracker *,std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker *)#1},std::allocator<LogTracker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI10LogTrackerE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<LogTracker> ctu::SharedSynchronizable<LogTracker>::make_shared_ptr<LogTracker>(LogTracker*)::{lambda(LogTracker*)#1}::operator() const(LogTracker*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791F948;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<LogTracker,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791F948;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_0>(LogTracker::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  dispatch_group_t v4;
  NSObject *v5;
  const char *v6;
  dispatch_group_t v7;
  NSObject *v8;
  BOOL v9;
  const char *v10;
  void *v11;
  const char *v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  const void *v30;
  size_t v31;
  size_t v32;
  std::locale::__imp *p_dst;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  const void *v39;
  size_t v40;
  size_t v41;
  std::locale::__imp *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  void *v47;
  unint64_t *v48;
  unint64_t v49;
  NSObject *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  const char **v63;
  const char **v64;
  const void *v65;
  size_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  size_t v72;
  void *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  NSObject *v80;
  const char *v81;
  const char *v82;
  const void *v83;
  size_t v84;
  size_t v85;
  void *p_p;
  uint64_t v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *p_shared_weak_owners;
  unint64_t v91;
  void *v92;
  const void *v93;
  size_t v94;
  size_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  void *v102;
  const void *v103;
  size_t v104;
  size_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  const void *v113;
  size_t v114;
  size_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  const void *v123;
  size_t v124;
  size_t v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  NSObject *v136;
  NSObject *v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  _QWORD *v143;
  NSObject *object;
  void *v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152;
  uint64_t v153;
  unint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  std::__shared_weak_count *v158;
  const void *v159;
  void *v160;
  uint64_t v161;
  unint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  const void *v167;
  void *v168;
  uint64_t v169;
  unint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  const void *v175;
  void *__p;
  uint64_t v177;
  unint64_t v178;
  void *v179;
  uint64_t v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  const void *v183;
  const void *v184;
  std::locale __dst;
  size_t v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  void *v189[2];
  unint64_t v190;
  void *v191[2];
  unint64_t v192;
  std::string buf;
  void *v194;
  __int128 *v195;
  std::__shared_weak_count *v196;
  xpc_object_t v197;
  void *v198;
  dispatch_object_t v199;
  xpc_object_t v200;
  dispatch_object_t v201;
  xpc_object_t v202;
  _QWORD aBlock[5];
  dispatch_object_t v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  __int128 v207;
  _BYTE v208[24];
  void *v209;
  uint64_t v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;

  v1 = a1;
  v213 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*a1;
  v3 = *(_QWORD *)(*a1 + 16);
  LogTracker::checkLoggingVersion_sync((NSObject **)v3);
  v4 = dispatch_group_create();
  v5 = *(NSObject **)(v3 + 176);
  *(_QWORD *)(v3 + 176) = v4;
  if (v5)
    dispatch_release(v5);
  v7 = dispatch_group_create();
  v8 = *(NSObject **)(v3 + 208);
  *(_QWORD *)(v3 + 208) = v7;
  if (v8)
    dispatch_release(v8);
  *(_BYTE *)(v3 + 216) = 0;
  v9 = prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v6);
  v11 = (void *)MEMORY[0x1E0C809B0];
  if (v9
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v10)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v12))
  {
    v143 = v1;
    memset(v208, 170, 16);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
    }
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    buf.__r_.__value_.__l.__size_ = 0x40000000;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    v194 = &__block_descriptor_tmp_13_8;
    v195 = &GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v207 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_13;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &buf);
      v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v207 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_13;
    }
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
LABEL_13:
    abm::HelperClient::create();
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
    if (!*((_QWORD *)&v207 + 1))
      goto LABEL_17;
    v18 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_19;
    }
    else
    {
LABEL_17:
      v20 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
LABEL_19:
        aBlock[0] = v11;
        aBlock[1] = 3321888768;
        aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
        aBlock[3] = &__block_descriptor_64_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
        aBlock[4] = v3;
        v21 = v2[3];
        v204 = v21;
        if (v21)
        {
          dispatch_retain(v21);
          if (v204)
            dispatch_group_enter(v204);
        }
        v205 = *(_QWORD *)v208;
        v206 = *(std::__shared_weak_count **)&v208[8];
        if (*(_QWORD *)&v208[8])
        {
          v22 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        v24 = _Block_copy(aBlock);
        v25 = *(NSObject **)(v3 + 136);
        if (v25)
          dispatch_retain(*(dispatch_object_t *)(v3 + 136));
        v26 = xpc_dictionary_create(0, 0, 0);
        if (v26 || (v26 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v26) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v26);
            v27 = v26;
          }
          else
          {
            v27 = xpc_null_create();
          }
        }
        else
        {
          v27 = xpc_null_create();
          v26 = 0;
        }
        xpc_release(v26);
        v28 = xpc_int64_create(5000);
        if (!v28)
          v28 = xpc_null_create();
        xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E0CF1008], v28);
        v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        v30 = (const void *)*MEMORY[0x1E0CFB028];
        v31 = strlen((const char *)*MEMORY[0x1E0CFB028]);
        object = v25;
        if (v31 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v32 = v31;
        if (v31 >= 0x17)
        {
          v34 = v11;
          v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v31 | 7) != 0x17)
            v35 = v31 | 7;
          v36 = v35 + 1;
          p_dst = (std::locale::__imp *)operator new(v35 + 1);
          v186 = v32;
          v187 = v36 | 0x8000000000000000;
          __dst.__locale_ = p_dst;
          v11 = v34;
        }
        else
        {
          HIBYTE(v187) = v31;
          p_dst = (std::locale::__imp *)&__dst;
          if (!v31)
          {
LABEL_45:
            *((_BYTE *)p_dst + v32) = 0;
            memset(&buf, 0, sizeof(buf));
            v37 = -1431655766;
            v38 = -1431655766;
            if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
            {
              LODWORD(__p) = -1431655766;
              if (util::convert<int>(&buf, &__p, 0))
                v38 = (int)__p;
              else
                v38 = -1431655766;
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v187) & 0x80000000) == 0)
                goto LABEL_51;
            }
            else if ((SHIBYTE(v187) & 0x80000000) == 0)
            {
              goto LABEL_51;
            }
            operator delete(__dst.__locale_);
LABEL_51:
            v39 = (const void *)*MEMORY[0x1E0CFB2D8];
            v40 = strlen((const char *)*MEMORY[0x1E0CFB2D8]);
            if (v40 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v41 = v40;
            if (v40 >= 0x17)
            {
              v142 = v24;
              v43 = v11;
              v44 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v40 | 7) != 0x17)
                v44 = v40 | 7;
              v45 = v44 + 1;
              v42 = (std::locale::__imp *)operator new(v44 + 1);
              v186 = v41;
              v187 = v45 | 0x8000000000000000;
              __dst.__locale_ = v42;
              v11 = v43;
              v24 = v142;
            }
            else
            {
              HIBYTE(v187) = v40;
              v42 = (std::locale::__imp *)&__dst;
              if (!v40)
              {
LABEL_59:
                *((_BYTE *)v42 + v41) = 0;
                memset(&buf, 0, sizeof(buf));
                if (prop::bbtrace::get((char *)&__dst, (uint64_t)&buf))
                {
                  LODWORD(__p) = -1431655766;
                  if (util::convert<int>(&buf, &__p, 0))
                    v37 = (int)__p;
                  else
                    v37 = -1431655766;
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(v187) & 0x80000000) == 0)
                  {
LABEL_65:
                    if (v38 != 4)
                    {
LABEL_76:
                      v200 = v27;
                      if (v27)
                      {
                        xpc_retain(v27);
                        v1 = v143;
                        if (v24)
                        {
LABEL_78:
                          v47 = _Block_copy(v24);
LABEL_81:
                          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v47;
                          buf.__r_.__value_.__l.__size_ = (std::string::size_type)object;
                          if (object)
                            dispatch_retain(object);
                          abm::HelperClient::perform();
                          if (buf.__r_.__value_.__l.__size_)
                            dispatch_release((dispatch_object_t)buf.__r_.__value_.__l.__size_);
                          if (buf.__r_.__value_.__r.__words[0])
                            _Block_release(buf.__r_.__value_.__l.__data_);
                          xpc_release(v200);
                          v200 = 0;
LABEL_111:
                          xpc_release(v27);
                          if (object)
                            dispatch_release(object);
                          if (v24)
                            _Block_release(v24);
                          v57 = v206;
                          if (v206)
                          {
                            p_shared_owners = (unint64_t *)&v206->__shared_owners_;
                            do
                              v59 = __ldaxr(p_shared_owners);
                            while (__stlxr(v59 - 1, p_shared_owners));
                            if (!v59)
                            {
                              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                              std::__shared_weak_count::__release_weak(v57);
                            }
                          }
                          if (v204)
                          {
                            dispatch_group_leave(v204);
                            if (v204)
                              dispatch_release(v204);
                          }
                          v60 = *(std::__shared_weak_count **)&v208[8];
                          if (*(_QWORD *)&v208[8])
                          {
                            v61 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
                            do
                              v62 = __ldaxr(v61);
                            while (__stlxr(v62 - 1, v61));
                            if (!v62)
                            {
                              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                              std::__shared_weak_count::__release_weak(v60);
                            }
                          }
                          goto LABEL_128;
                        }
                      }
                      else
                      {
                        v1 = v143;
                        v200 = xpc_null_create();
                        if (v24)
                          goto LABEL_78;
                      }
                      v47 = 0;
                      goto LABEL_81;
                    }
LABEL_71:
                    if (v37 != 1)
                      goto LABEL_76;
                    v46 = *(NSObject **)(v3 + 88);
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                      _os_log_impl(&dword_1BF566000, v46, OS_LOG_TYPE_DEFAULT, "#N Cellular Logging was detected before initiating LogTracker. The service needs to be paused in boot-up.", (uint8_t *)&buf, 2u);
                    }
                    v202 = v27;
                    if (v27)
                      xpc_retain(v27);
                    else
                      v202 = xpc_null_create();
                    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
                    buf.__r_.__value_.__l.__size_ = 3321888768;
                    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_64;
                    v194 = &__block_descriptor_72_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
                    v195 = *(__int128 **)v208;
                    v196 = *(std::__shared_weak_count **)&v208[8];
                    v1 = v143;
                    if (*(_QWORD *)&v208[8])
                    {
                      v48 = (unint64_t *)(*(_QWORD *)&v208[8] + 8);
                      do
                        v49 = __ldxr(v48);
                      while (__stxr(v49 + 1, v48));
                    }
                    v197 = v27;
                    if (v27)
                    {
                      xpc_retain(v27);
                      if (v24)
                        goto LABEL_94;
                    }
                    else
                    {
                      v197 = xpc_null_create();
                      if (v24)
                      {
LABEL_94:
                        v198 = _Block_copy(v24);
                        v50 = object;
                        v199 = object;
                        if (!object)
                        {
LABEL_96:
                          v51 = v11;
                          v52 = _Block_copy(&buf);
                          v53 = *(NSObject **)(v3 + 136);
                          if (v53)
                            dispatch_retain(*(dispatch_object_t *)(v3 + 136));
                          v200 = v52;
                          v201 = v53;
                          abm::HelperClient::perform();
                          v11 = v51;
                          if (v201)
                            dispatch_release(v201);
                          if (v200)
                            _Block_release(v200);
                          xpc_release(v202);
                          v202 = 0;
                          if (v199)
                            dispatch_release(v199);
                          if (v198)
                            _Block_release(v198);
                          xpc_release(v197);
                          v197 = 0;
                          v54 = v196;
                          if (v196)
                          {
                            v55 = (unint64_t *)&v196->__shared_owners_;
                            do
                              v56 = __ldaxr(v55);
                            while (__stlxr(v56 - 1, v55));
                            if (!v56)
                            {
                              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                              std::__shared_weak_count::__release_weak(v54);
                            }
                          }
                          goto LABEL_111;
                        }
LABEL_95:
                        dispatch_retain(v50);
                        goto LABEL_96;
                      }
                    }
                    v198 = 0;
                    v50 = object;
                    v199 = object;
                    if (!object)
                      goto LABEL_96;
                    goto LABEL_95;
                  }
                }
                else if ((SHIBYTE(v187) & 0x80000000) == 0)
                {
                  goto LABEL_65;
                }
                operator delete(__dst.__locale_);
                if (v38 != 4)
                  goto LABEL_76;
                goto LABEL_71;
              }
            }
            memmove(v42, v39, v41);
            goto LABEL_59;
          }
        }
        memmove(p_dst, v30, v32);
        goto LABEL_45;
      }
    }
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEFAULT, "#I ABM is initializing; reinit traces in helper",
      (uint8_t *)&buf,
      2u);
    goto LABEL_19;
  }
LABEL_128:
  v63 = (const char **)MEMORY[0x1E0D01A30];
  strlen((const char *)*MEMORY[0x1E0D01A30]);
  ctu::fs::create_directory();
  v64 = (const char **)MEMORY[0x1E0D01A48];
  v65 = (const void *)*MEMORY[0x1E0D01A48];
  v66 = strlen((const char *)*MEMORY[0x1E0D01A48]);
  if (v66 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_263;
  v67 = (void *)v66;
  if (v66 >= 0x17)
  {
    v69 = (v66 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v66 | 7) != 0x17)
      v69 = v66 | 7;
    v70 = v69 + 1;
    v68 = operator new(v69 + 1);
    v191[1] = v67;
    v192 = v70 | 0x8000000000000000;
    v191[0] = v68;
    goto LABEL_135;
  }
  HIBYTE(v192) = v66;
  v68 = v191;
  if (v66)
LABEL_135:
    memmove(v68, v65, (size_t)v67);
  *((_BYTE *)v67 + (_QWORD)v68) = 0;
  v71 = *v63;
  v72 = strlen(*v63);
  if (v72 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v73 = (void *)v72;
  if (v72 >= 0x17)
  {
    v75 = (v72 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v72 | 7) != 0x17)
      v75 = v72 | 7;
    v76 = v75 + 1;
    v74 = operator new(v75 + 1);
    v189[1] = v73;
    v190 = v76 | 0x8000000000000000;
    v189[0] = v74;
  }
  else
  {
    HIBYTE(v190) = v72;
    v74 = v189;
    if (!v72)
      goto LABEL_144;
  }
  memmove(v74, v71, (size_t)v73);
LABEL_144:
  *((_BYTE *)v73 + (_QWORD)v74) = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&__dst, "[^\\.].*", 0);
  util::moveDirContent((const void **)v191, (uint64_t)v189, 1u, 1, (uint64_t)&__dst);
  v77 = v188;
  if (!v188)
    goto LABEL_148;
  v78 = (unint64_t *)&v188->__shared_owners_;
  do
    v79 = __ldaxr(v78);
  while (__stlxr(v79 - 1, v78));
  if (v79)
  {
LABEL_148:
    std::locale::~locale(&__dst);
    if ((SHIBYTE(v190) & 0x80000000) == 0)
      goto LABEL_149;
LABEL_254:
    operator delete(v189[0]);
    if ((SHIBYTE(v192) & 0x80000000) == 0)
      goto LABEL_150;
    goto LABEL_255;
  }
  ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
  std::__shared_weak_count::__release_weak(v77);
  std::locale::~locale(&__dst);
  if (SHIBYTE(v190) < 0)
    goto LABEL_254;
LABEL_149:
  if ((SHIBYTE(v192) & 0x80000000) == 0)
    goto LABEL_150;
LABEL_255:
  operator delete(v191[0]);
LABEL_150:
  strlen(*v64);
  ctu::fs::create_directory();
  v80 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
  {
    v81 = *v64;
    v82 = *v63;
    *(_DWORD *)v208 = 136315394;
    *(_QWORD *)&v208[4] = v81;
    *(_WORD *)&v208[12] = 2080;
    *(_QWORD *)&v208[14] = v82;
    _os_log_impl(&dword_1BF566000, v80, OS_LOG_TYPE_DEFAULT, "#I Moved %s/*/* -> %s/", v208, 0x16u);
  }
  v83 = (const void *)*MEMORY[0x1E0CFBAB0];
  v84 = strlen((const char *)*MEMORY[0x1E0CFBAB0]);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
LABEL_263:
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    p_p = operator new(v87 + 1);
    v177 = v85;
    v178 = v88 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_159;
  }
  HIBYTE(v178) = v84;
  p_p = &__p;
  if (v84)
LABEL_159:
    memmove(p_p, v83, v85);
  *((_BYTE *)p_p + v85) = 0;
  *(_QWORD *)v208 = v11;
  *(_QWORD *)&v208[8] = 3321888768;
  *(_QWORD *)&v208[16] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_67;
  v209 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v210 = v3;
  v211 = *v2;
  v89 = (std::__shared_weak_count *)v2[1];
  v212 = v89;
  if (v89)
  {
    p_shared_weak_owners = (unint64_t *)&v89->__shared_weak_owners_;
    do
      v91 = __ldxr(p_shared_weak_owners);
    while (__stxr(v91 + 1, p_shared_weak_owners));
  }
  v92 = _Block_copy(v208);
  v184 = v92;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v184);
  if (v92)
    _Block_release(v92);
  if (SHIBYTE(v178) < 0)
    operator delete(__p);
  v93 = (const void *)*MEMORY[0x1E0CFB888];
  v94 = strlen((const char *)*MEMORY[0x1E0CFB888]);
  if (v94 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v95 = v94;
  if (v94 >= 0x17)
  {
    v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v94 | 7) != 0x17)
      v97 = v94 | 7;
    v98 = v97 + 1;
    v96 = operator new(v97 + 1);
    v169 = v95;
    v170 = v98 | 0x8000000000000000;
    v168 = v96;
    goto LABEL_174;
  }
  HIBYTE(v170) = v94;
  v96 = &v168;
  if (v94)
LABEL_174:
    memmove(v96, v93, v95);
  *((_BYTE *)v96 + v95) = 0;
  __p = v11;
  v177 = 3321888768;
  v178 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_70;
  v179 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v180 = v3;
  v181 = *v2;
  v99 = (std::__shared_weak_count *)v2[1];
  v182 = v99;
  if (v99)
  {
    v100 = (unint64_t *)&v99->__shared_weak_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
  }
  v102 = _Block_copy(&__p);
  v183 = v102;
  Service::registerCommandHandler(v3, (uint64_t)&v168, &v183);
  if (v102)
    _Block_release(v102);
  if (SHIBYTE(v170) < 0)
    operator delete(v168);
  v103 = (const void *)*MEMORY[0x1E0CFB5F0];
  v104 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
  if (v104 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v105 = v104;
  if (v104 >= 0x17)
  {
    v107 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v104 | 7) != 0x17)
      v107 = v104 | 7;
    v108 = v107 + 1;
    v106 = operator new(v107 + 1);
    v161 = v105;
    v162 = v108 | 0x8000000000000000;
    v160 = v106;
    goto LABEL_189;
  }
  HIBYTE(v162) = v104;
  v106 = &v160;
  if (v104)
LABEL_189:
    memmove(v106, v103, v105);
  *((_BYTE *)v106 + v105) = 0;
  v168 = v11;
  v169 = 3321888768;
  v170 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  v171 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v172 = v3;
  v173 = *v2;
  v109 = (std::__shared_weak_count *)v2[1];
  v174 = v109;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_weak_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v112 = _Block_copy(&v168);
  v175 = v112;
  Service::registerCommandHandler(v3, (uint64_t)&v160, &v175);
  if (v112)
    _Block_release(v112);
  if (SHIBYTE(v162) < 0)
    operator delete(v160);
  v113 = (const void *)*MEMORY[0x1E0CFB890];
  v114 = strlen((const char *)*MEMORY[0x1E0CFB890]);
  if (v114 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v115 = v114;
  if (v114 >= 0x17)
  {
    v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v114 | 7) != 0x17)
      v117 = v114 | 7;
    v118 = v117 + 1;
    v116 = operator new(v117 + 1);
    v153 = v115;
    v154 = v118 | 0x8000000000000000;
    v152 = v116;
    goto LABEL_204;
  }
  HIBYTE(v154) = v114;
  v116 = &v152;
  if (v114)
LABEL_204:
    memmove(v116, v113, v115);
  *((_BYTE *)v116 + v115) = 0;
  v160 = v11;
  v161 = 3321888768;
  v162 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  v163 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v164 = v3;
  v165 = *v2;
  v119 = (std::__shared_weak_count *)v2[1];
  v166 = v119;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_weak_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  v122 = _Block_copy(&v160);
  v167 = v122;
  Service::registerCommandHandler(v3, (uint64_t)&v152, &v167);
  if (v122)
    _Block_release(v122);
  if (SHIBYTE(v154) < 0)
    operator delete(v152);
  v123 = (const void *)*MEMORY[0x1E0CFB880];
  v124 = strlen((const char *)*MEMORY[0x1E0CFB880]);
  if (v124 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v125 = v124;
  if (v124 >= 0x17)
  {
    v127 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v124 | 7) != 0x17)
      v127 = v124 | 7;
    v128 = v127 + 1;
    v126 = operator new(v127 + 1);
    v146 = v125;
    v147 = v128 | 0x8000000000000000;
    v145 = v126;
    goto LABEL_219;
  }
  HIBYTE(v147) = v124;
  v126 = &v145;
  if (v124)
LABEL_219:
    memmove(v126, v123, v125);
  *((_BYTE *)v126 + v125) = 0;
  v152 = v11;
  v153 = 3321888768;
  v154 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4;
  v155 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v156 = v3;
  v157 = *v2;
  v129 = (std::__shared_weak_count *)v2[1];
  v158 = v129;
  if (v129)
  {
    v130 = (unint64_t *)&v129->__shared_weak_owners_;
    do
      v131 = __ldxr(v130);
    while (__stxr(v131 + 1, v130));
  }
  v132 = _Block_copy(&v152);
  v159 = v132;
  Service::registerCommandHandler(v3, (uint64_t)&v145, &v159);
  if (v132)
    _Block_release(v132);
  if (SHIBYTE(v147) < 0)
    operator delete(v145);
  dispatch_get_global_queue(0, 0);
  v145 = v11;
  v146 = 3321888768;
  v147 = (unint64_t)___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5;
  v148 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e103___os_state_data_s_I___b32I__os_state_data_decoder_s__64c__64c___64c__0C__16__0__os_state_hints_s_I_II_8l;
  v149 = v3;
  v150 = *v2;
  v133 = (std::__shared_weak_count *)v2[1];
  v151 = v133;
  if (v133)
  {
    v134 = (unint64_t *)&v133->__shared_weak_owners_;
    do
      v135 = __ldxr(v134);
    while (__stxr(v135 + 1, v134));
  }
  *(_QWORD *)(v3 + 200) = os_state_add_handler();
  if (v151)
    std::__shared_weak_count::__release_weak(v151);
  if (v158)
    std::__shared_weak_count::__release_weak(v158);
  if (v166)
    std::__shared_weak_count::__release_weak(v166);
  if (v174)
    std::__shared_weak_count::__release_weak(v174);
  if (v182)
    std::__shared_weak_count::__release_weak(v182);
  if (v212)
    std::__shared_weak_count::__release_weak(v212);
  v136 = v2[3];
  if (v136)
  {
    dispatch_group_leave(v136);
    v137 = v2[3];
    if (v137)
      dispatch_release(v137);
  }
  v138 = (std::__shared_weak_count *)v2[1];
  if (v138)
    std::__shared_weak_count::__release_weak(v138);
  operator delete(v2);
  v139 = (std::__shared_weak_count *)v1[2];
  if (v139)
  {
    v140 = (unint64_t *)&v139->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  operator delete(v1);
}

void sub_1BF6EF5BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Reinit traces complete", v2, 2u);
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(NSObject **)(a1 + 40);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = *(NSObject **)(a1 + 40);
    if (!v5)
      return;
  }
  dispatch_group_leave(v5);
  v6 = *(NSObject **)(a1 + 40);
  if (v6)
    dispatch_release(v6);
}

void __copy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;

  v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[6];
  a1[6] = v7;
  if (!v7)
  {
    a1[6] = xpc_null_create();
    v8 = (void *)a2[7];
    if (!v8)
      goto LABEL_9;
    goto LABEL_8;
  }
  xpc_retain(v7);
  v8 = (void *)a2[7];
  if (v8)
LABEL_8:
    v8 = _Block_copy(v8);
LABEL_9:
  v9 = a2[8];
  a1[7] = v8;
  a1[8] = v9;
  if (v9)
    dispatch_retain(v9);
}

void __destroy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrIN3abm12HelperClientEEE48c15_ZTSN3xpc4dictE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN12TelephonyXPC6ResultEN3xpc4dictEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 56);
  if (v3)
    _Block_release(v3);
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_67(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  unint64_t *v22;
  NSObject *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v13;
  v21 = xpc_null_create();
  v20[1] = v7;
  v20[2] = v15;
  v22 = (unint64_t *)&v19->__shared_owners_;
  v23 = v7[17];
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v23, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_70(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  unint64_t *v22;
  NSObject *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v13;
  v21 = xpc_null_create();
  v20[1] = v7;
  v20[2] = v15;
  v22 = (unint64_t *)&v19->__shared_owners_;
  v23 = v7[17];
  do
    v24 = __ldxr(v22);
  while (__stxr(v24 + 1, v22));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v23, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v22);
  while (__stlxr(v26 - 1, v22));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  xpc_object_t v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
LABEL_14:
    v15 = 0;
    v17 = a1[5];
    v16 = (std::__shared_weak_count *)a1[6];
    if (!v16)
      goto LABEL_17;
LABEL_15:
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    goto LABEL_17;
  }
  v13 = xpc_null_create();
  v14 = *a3;
  if (!*a3)
    goto LABEL_14;
LABEL_11:
  v15 = _Block_copy(v14);
  v17 = a1[5];
  v16 = (std::__shared_weak_count *)a1[6];
  if (v16)
    goto LABEL_15;
LABEL_17:
  v20 = (std::__shared_weak_count *)v7[16];
  if (!v20 || (v21 = v7[15], (v22 = std::__shared_weak_count::lock(v20)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  v24 = operator new(0x28uLL);
  *v24 = v13;
  v25 = xpc_null_create();
  v24[1] = v7;
  v24[2] = v15;
  v24[3] = v17;
  v24[4] = v16;
  if (v16)
  {
    v26 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = v7[17];
  v29 = (unint64_t *)&v23->__shared_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  v31 = operator new(0x18uLL);
  *v31 = v24;
  v31[1] = v21;
  v31[2] = v23;
  dispatch_async_f(v28, v31, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v32 = __ldaxr(v29);
  while (__stlxr(v32 - 1, v29));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  xpc_release(v25);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_4(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

uint64_t ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_5(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  _QWORD block[6];
  std::__shared_weak_count *v30;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      if (v8 && *(_DWORD *)(a2 + 16) == 3)
      {
        v9 = MEMORY[0x1E0C809B0];
        v27[0] = MEMORY[0x1E0C809B0];
        v27[1] = 3321888768;
        v27[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6;
        v27[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e5_v8__0l;
        v27[4] = v5;
        v27[5] = v8;
        v10 = (std::__shared_weak_count *)a1[6];
        v28 = v10;
        if (v10)
        {
          p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
          do
            v12 = __ldxr(p_shared_weak_owners);
          while (__stxr(v12 + 1, p_shared_weak_owners));
        }
        v13 = (std::__shared_weak_count *)v5[16];
        if (!v13 || (v14 = v5[15], (v15 = std::__shared_weak_count::lock(v13)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v16 = v15;
        v17 = v5[17];
        block[0] = v9;
        block[1] = 3321888768;
        block[2] = ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
        block[3] = &unk_1E791FB80;
        p_shared_owners = (unint64_t *)&v16->__shared_owners_;
        block[5] = v14;
        v30 = v16;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        block[4] = v27;
        dispatch_async(v17, block);
        v20 = v30;
        if (v30)
        {
          v21 = (unint64_t *)&v30->__shared_owners_;
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v28)
          std::__shared_weak_count::__release_weak(v28);
      }
      v24 = (unint64_t *)&v7->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  return 0;
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_6(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_weak_owners;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  void *v17;
  unint64_t v18;
  __int128 v19;
  void *v20;
  NSObject *object;
  xpc_object_t v22;
  std::__shared_weak_count *v23;
  _QWORD aBlock[4];
  __int128 v25;
  std::__shared_weak_count *v26;
  void *v27;
  dispatch_object_t v28;
  _QWORD block[5];

  v27 = (void *)0xAAAAAAAAAAAAAAAALL;
  v28 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v1 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v19 = *(_OWORD *)(a1 + 32);
  v25 = v19;
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  v26 = v2;
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }
  v5 = _Block_copy(aBlock);
  v6 = *(NSObject **)(v19 + 136);
  if (v6)
    dispatch_retain(*(dispatch_object_t *)(v19 + 136));
  v27 = v5;
  v28 = v6;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = v1;
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v8 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v8 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_11;
  }
  v9 = (unint64_t *)(v8 + 8);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
LABEL_11:
  abm::HelperClient::create();
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v13 = xpc_dictionary_create(0, 0, 0);
  if (v13 || (v13 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v13) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v13);
      v14 = v13;
    }
    else
    {
      v14 = xpc_null_create();
    }
  }
  else
  {
    v14 = xpc_null_create();
    v13 = 0;
  }
  xpc_release(v13);
  v15 = xpc_int64_create(1500);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v14, (const char *)*MEMORY[0x1E0CF1008], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v22 = v14;
  if (!v14)
  {
    v22 = xpc_null_create();
    v17 = v27;
    if (!v27)
      goto LABEL_29;
    goto LABEL_28;
  }
  xpc_retain(v14);
  v17 = v27;
  if (v27)
LABEL_28:
    v17 = _Block_copy(v17);
LABEL_29:
  v20 = v17;
  object = v28;
  if (v28)
    dispatch_retain(v28);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v20)
    _Block_release(v20);
  xpc_release(v22);
  xpc_release(v14);
  do
    v18 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v18 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v18)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
}

void sub_1BF6F0AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  void *v25;
  uint64_t v26;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a12);
  xpc_release(object);
  object = 0;
  xpc_release(v25);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback(v26 - 88);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_7(_QWORD *a1, _DWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t value;
  int v14;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v24;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (v12)
      {
        if (!v10)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
        if (!v10)
          return;
      }
      if (*a2 || MEMORY[0x1C3B8CD78](*a3) != MEMORY[0x1E0C812F8])
        goto LABEL_15;
      value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CF11E8]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      if ((v14 - 3) < 0xFFFFFFFE)
      {
LABEL_15:
        v15 = (const void *)*MEMORY[0x1E0CFB9B0];
        v16 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = (void *)v16;
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v18 = (void **)operator new(v19 + 1);
          __dst[1] = v17;
          v24 = v20 | 0x8000000000000000;
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(v24) = v16;
          v18 = __dst;
          if (!v16)
            goto LABEL_23;
        }
        memmove(v18, v15, (size_t)v17);
LABEL_23:
        *((_BYTE *)v17 + (_QWORD)v18) = 0;
        aBlock = 0;
        cf = 0;
        Service::broadcastEvent(v7, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v24) < 0)
          operator delete(__dst[0]);
      }
    }
  }
}

void sub_1BF6F0D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t v4;
  xpc_object_t value;
  uint64_t *v6;
  uint64_t **v7;
  char v8;
  __int128 v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void **v13;
  void **v14;
  int v15;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  uint64_t **v21;
  BOOL v22;
  uint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  NSObject *v27;
  NSObject *shared_owners;
  uint64_t *v29;
  uint64_t **v30;
  void **v31;
  void *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  uint64_t *v37;
  size_t v38;
  size_t v39;
  int v40;
  int v41;
  char *v42;
  std::string *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  xpc_object_t v51;
  uint64_t v52;
  xpc_object_t v53;
  const void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD *v58;
  xpc_object_t v59;
  void *__p[2];
  __int128 v61;
  unint64_t v62;
  void *v63[3];
  xpc_object_t object[4];

  object[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v59 = v4;
    }
    else
    {
      v59 = xpc_null_create();
    }
  }
  else
  {
    v59 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  memset(v63, 170, sizeof(v63));
  v58 = a1;
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0CFB450]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v61 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v6 = *(uint64_t **)(v3 + 152);
  v7 = (uint64_t **)(v3 + 160);
  if (v6 == (uint64_t *)(v3 + 160))
    goto LABEL_47;
  v8 = 0;
  do
  {
    v62 = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__p = v9;
    v61 = v9;
    if (*((char *)v6 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
    }
    else
    {
      *(_OWORD *)__p = *((_OWORD *)v6 + 2);
      *(_QWORD *)&v61 = v6[6];
    }
    v10 = v6[8];
    *((_QWORD *)&v61 + 1) = v6[7];
    v62 = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if ((SBYTE7(v61) & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (SHIBYTE(v63[2]) >= 0)
      v14 = v63;
    else
      v14 = (void **)v63[0];
    v15 = strcasecmp((const char *)v13, (const char *)v14);
    if (v15)
    {
      v16 = (std::__shared_weak_count *)v62;
      if (!v62)
        goto LABEL_34;
    }
    else
    {
      v17 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        LODWORD(object[0]) = 136315138;
        *(xpc_object_t *)((char *)object + 4) = v14;
        _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Failed to register: %s is already registered.", (uint8_t *)object, 0xCu);
        v8 = 1;
        v16 = (std::__shared_weak_count *)v62;
        if (!v62)
          goto LABEL_34;
      }
      else
      {
        v8 = 1;
        v16 = (std::__shared_weak_count *)v62;
        if (!v62)
          goto LABEL_34;
      }
    }
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_34:
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
    if (!v15)
      break;
    v20 = (uint64_t *)v6[1];
    if (v20)
    {
      do
      {
        v21 = (uint64_t **)v20;
        v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (uint64_t **)v6[2];
        v22 = *v21 == v6;
        v6 = (uint64_t *)v21;
      }
      while (!v22);
    }
    v6 = (uint64_t *)v21;
  }
  while (v21 != v7);
  if ((v8 & 1) != 0)
  {
    v23 = 3760250880;
    v24 = v58;
    goto LABEL_98;
  }
LABEL_47:
  v25 = (std::__shared_weak_count *)operator new(0x28uLL);
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)off_1E791FB38;
  v27 = *(NSObject **)(v3 + 176);
  if (v27)
  {
    dispatch_retain(*(dispatch_object_t *)(v3 + 176));
    dispatch_group_enter(v27);
  }
  v25[1].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v25[1].__shared_owners_ = (uint64_t)v27;
  if (v27)
  {
    dispatch_retain(v27);
    shared_owners = v25[1].__shared_owners_;
    if (shared_owners)
      dispatch_group_enter(shared_owners);
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  v29 = *v7;
  v30 = (uint64_t **)(v3 + 160);
  if (*v7)
  {
    if (SHIBYTE(v63[2]) >= 0)
      v31 = v63;
    else
      v31 = (void **)v63[0];
    if (SHIBYTE(v63[2]) >= 0)
      v32 = (void *)HIBYTE(v63[2]);
    else
      v32 = v63[1];
    while (1)
    {
      v30 = (uint64_t **)v29;
      v35 = (uint64_t *)v29[4];
      v33 = v29 + 4;
      v34 = v35;
      v36 = *((char *)v33 + 23);
      if (v36 >= 0)
        v37 = v33;
      else
        v37 = v34;
      if (v36 >= 0)
        v38 = *((unsigned __int8 *)v33 + 23);
      else
        v38 = v33[1];
      if (v38 >= (unint64_t)v32)
        v39 = (size_t)v32;
      else
        v39 = v38;
      v40 = memcmp(v31, v37, v39);
      if (v40)
      {
        if (v40 < 0)
          goto LABEL_60;
LABEL_74:
        v41 = memcmp(v37, v31, v39);
        if (v41)
        {
          if ((v41 & 0x80000000) == 0)
            goto LABEL_86;
        }
        else if (v38 >= (unint64_t)v32)
        {
LABEL_86:
          v42 = (char *)v30;
          goto LABEL_87;
        }
        v29 = v30[1];
        if (!v29)
        {
          v7 = v30 + 1;
          break;
        }
      }
      else
      {
        if ((unint64_t)v32 >= v38)
          goto LABEL_74;
LABEL_60:
        v29 = *v30;
        v7 = v30;
        if (!*v30)
          break;
      }
    }
  }
  v42 = (char *)operator new(0x48uLL);
  v43 = (std::string *)(v42 + 32);
  if (SHIBYTE(v63[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v43, (const std::string::value_type *)v63[0], (std::string::size_type)v63[1]);
  }
  else
  {
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = *(_OWORD *)v63;
    *((void **)v42 + 6) = v63[2];
  }
  *((_QWORD *)v42 + 7) = 0;
  *((_QWORD *)v42 + 8) = 0;
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = 0;
  *((_QWORD *)v42 + 2) = v30;
  *v7 = (uint64_t *)v42;
  v44 = **(_QWORD **)(v3 + 152);
  v45 = (uint64_t *)v42;
  if (v44)
  {
    *(_QWORD *)(v3 + 152) = v44;
    v45 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 160), v45);
  ++*(_QWORD *)(v3 + 168);
LABEL_87:
  v24 = v58;
  do
    v46 = __ldxr(v26);
  while (__stxr(v46 + 1, v26));
  v47 = (std::__shared_weak_count *)*((_QWORD *)v42 + 8);
  *((_QWORD *)v42 + 7) = v25 + 1;
  *((_QWORD *)v42 + 8) = v25;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  do
    v50 = __ldaxr(v26);
  while (__stlxr(v50 - 1, v26));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  v23 = 0;
LABEL_98:
  v51 = xpc_null_create();
  v52 = *(_QWORD *)(v2 + 16);
  __p[0] = v51;
  v53 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v52 + 16))(v52, v23, __p);
  xpc_release(__p[0]);
  xpc_release(v53);
  if (SHIBYTE(v63[2]) < 0)
    operator delete(v63[0]);
  xpc_release(v59);
  v54 = *(const void **)(v2 + 16);
  if (v54)
    _Block_release(v54);
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v55 = (std::__shared_weak_count *)v24[2];
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  operator delete(v24);
}

void sub_1BF6F137C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, xpc_object_t object, xpc_object_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,xpc_object_t a27)
{
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  void *v31;
  unint64_t v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;

  v31 = v28;
  operator delete(v31);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
  if (a26 < 0)
    operator delete(__p);
  xpc_release(object);
  v34 = *(const void **)(v27 + 16);
  if (v34)
    _Block_release(v34);
  xpc_release(*(xpc_object_t *)v27);
  operator delete((void *)v27);
  v35 = (std::__shared_weak_count *)a11[2];
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void sub_1BF6F14D8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791FB38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791FB38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<LogTrackerDomainInfo>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(_QWORD *)(a1 + 24) = 0;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  xpc_object_t value;
  _QWORD *v5;
  void **v6;
  const char *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  std::__shared_weak_count *v14;
  _QWORD *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  uint64_t v26;
  xpc_object_t v27;
  const void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void **v32;
  char *v33;
  size_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void *v40[3];
  _BYTE object[12];
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  memset(v40, 170, sizeof(v40));
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0CFB450]);
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(*(xpc_object_t *)object);
  v5 = *(_QWORD **)(v3 + 152);
  if (v5 != (_QWORD *)(v3 + 160))
  {
    if (SHIBYTE(v40[2]) >= 0)
      v6 = v40;
    else
      v6 = (void **)v40[0];
    while (1)
    {
      v7 = *((char *)v5 + 55) >= 0 ? (const char *)(v5 + 4) : (const char *)v5[4];
      if (!strcasecmp(v7, (const char *)v6))
        break;
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
      if (v9 == (_QWORD *)(v3 + 160))
        goto LABEL_19;
    }
    v15 = (_QWORD *)v5[7];
    v14 = (std::__shared_weak_count *)v5[8];
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = (void *)*MEMORY[0x1E0CFB060];
    __p[0] = (void *)v2;
    __p[1] = v18;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, object);
    v19 = *(_QWORD *)object;
    *(_QWORD *)object = xpc_null_create();
    v20 = (void *)*v15;
    *v15 = v19;
    xpc_release(v20);
    xpc_release(*(xpc_object_t *)object);
    v21 = v15[1];
    v15[1] = 0;
    if (v21)
    {
      dispatch_group_leave(v21);
      dispatch_release(v21);
    }
    v22 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v32 = v40;
      if (SHIBYTE(v40[2]) < 0)
        v32 = (void **)v40[0];
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v32;
      _os_log_debug_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEBUG, "#D Received log domain: %s", (uint8_t *)__p, 0xCu);
      v22 = *(NSObject **)(v3 + 88);
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        goto LABEL_30;
    }
    else if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      if (!v14)
        goto LABEL_34;
LABEL_30:
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v11 = 0;
      }
      else
      {
LABEL_34:
        v11 = 0;
      }
      goto LABEL_36;
    }
    v33 = (char *)MEMORY[0x1C3B8CCDC](*v15);
    memset(__p, 170, 24);
    v34 = strlen(v33);
    if (v34 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v35 = (void *)v34;
    if (v34 >= 0x17)
    {
      v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v34 | 7) != 0x17)
        v37 = v34 | 7;
      v38 = v37 + 1;
      v36 = operator new(v37 + 1);
      __p[1] = v35;
      __p[2] = (void *)(v38 | 0x8000000000000000);
      __p[0] = v36;
    }
    else
    {
      HIBYTE(__p[2]) = v34;
      v36 = __p;
      if (!v34)
        goto LABEL_58;
    }
    memcpy(v36, v33, (size_t)v35);
LABEL_58:
    *((_BYTE *)v35 + (_QWORD)v36) = 0;
    free(v33);
    v39 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v39 = (void **)__p[0];
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v39;
    _os_log_debug_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEBUG, "#D Received log summary: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    goto LABEL_30;
  }
LABEL_19:
  v11 = 3760250880;
  v12 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v13 = v40;
    if (SHIBYTE(v40[2]) < 0)
      v13 = (void **)v40[0];
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v13;
    _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Failed to find log summary domain with %s", (uint8_t *)__p, 0xCu);
  }
LABEL_36:
  v25 = xpc_null_create();
  v26 = *(_QWORD *)(v2 + 16);
  __p[0] = v25;
  v27 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v26 + 16))(v26, v11, __p);
  xpc_release(__p[0]);
  xpc_release(v27);
  if ((SHIBYTE(v40[2]) & 0x80000000) == 0)
  {
    v28 = *(const void **)(v2 + 16);
    if (!v28)
      goto LABEL_41;
    goto LABEL_40;
  }
  operator delete(v40[0]);
  v28 = *(const void **)(v2 + 16);
  if (v28)
LABEL_40:
    _Block_release(v28);
LABEL_41:
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v29 = (std::__shared_weak_count *)a1[2];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(a1);
}

void sub_1BF6F1A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  xpc_object_t value;
  const char *v6;
  const char *v7;
  xpc_object_t v8;
  const char *v9;
  NSObject *v10;
  void **v11;
  size_t v12;
  void **v13;
  NSObject *v14;
  const void *v15;
  void *v16;
  uint64_t IsInternalBuild;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  const void *aBlock;
  NSObject *object;
  xpc_object_t v51;
  const void *v52;
  NSObject *v53;
  void *__p[3];
  void *v55[3];
  __int128 block;
  void (*v57)(uint64_t);
  void *v58;
  __int128 *v59;
  os_activity_scope_state_s state;
  void (*v61)(_QWORD *, unsigned int *);
  void *v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 8);
  v4 = _os_activity_create(&dword_1BF566000, "Dump trace", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, &state);
  os_activity_scope_leave(&state);
  memset(v55, 170, sizeof(v55));
  value = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0CFB0F8]);
  state.opaque[0] = (uint64_t)value;
  if (value)
    xpc_retain(value);
  else
    state.opaque[0] = (uint64_t)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&state, (const object *)*MEMORY[0x1E0CFB4D8], v6);
  xpc_release((xpc_object_t)state.opaque[0]);
  memset(__p, 170, sizeof(__p));
  v7 = (const char *)*MEMORY[0x1E0CFB930];
  v8 = xpc_dictionary_get_value(*(xpc_object_t *)v2, (const char *)*MEMORY[0x1E0CFB930]);
  state.opaque[0] = (uint64_t)v8;
  if (v8)
    xpc_retain(v8);
  else
    state.opaque[0] = (uint64_t)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&state, (const object *)"", v9);
  xpc_release((xpc_object_t)state.opaque[0]);
  v10 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v11 = (void **)__p[0];
    LODWORD(state.opaque[0]) = 136315138;
    *(uint64_t *)((char *)state.opaque + 4) = (uint64_t)v11;
    _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Dumping log with Reason: \"%s\"", (uint8_t *)&state, 0xCu);
  }
  if (SHIBYTE(v55[2]) >= 0)
    v12 = HIBYTE(v55[2]);
  else
    v12 = (size_t)v55[1];
  if (v12 != strlen((const char *)*MEMORY[0x1E0CFBB98])
    || (SHIBYTE(v55[2]) >= 0 ? (v13 = v55) : (v13 = (void **)v55[0]),
        memcmp(v13, (const void *)*MEMORY[0x1E0CFBB98], v12)))
  {
    v14 = *(NSObject **)v2;
    v53 = v14;
    if (v14)
    {
      xpc_retain(v14);
      v15 = *(const void **)(v2 + 16);
      if (v15)
      {
LABEL_21:
        v16 = _Block_copy(v15);
LABEL_24:
        v52 = v16;
        LogTracker::dumpLogInternal_sync(v3, (xpc_object_t *)&v53, &v52);
        if (v16)
          _Block_release(v16);
        xpc_release(v14);
        v53 = 0;
        goto LABEL_27;
      }
    }
    else
    {
      v14 = xpc_null_create();
      v53 = v14;
      v15 = *(const void **)(v2 + 16);
      if (v15)
        goto LABEL_21;
    }
    v16 = 0;
    goto LABEL_24;
  }
  v33 = xpc_string_create((const char *)*MEMORY[0x1E0D01A50]);
  if (!v33)
    v33 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)v2, v7, v33);
  v34 = xpc_null_create();
  xpc_release(v33);
  xpc_release(v34);
  v35 = xpc_null_create();
  v36 = *(_QWORD *)(v2 + 16);
  state.opaque[0] = (uint64_t)v35;
  v37 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, os_activity_scope_state_s *))(v36 + 16))(v36, 0, &state);
  xpc_release((xpc_object_t)state.opaque[0]);
  xpc_release(v37);
  v38 = *(xpc_object_t *)v2;
  v52 = v38;
  v53 = 0;
  if (v38)
  {
    xpc_retain(v38);
  }
  else
  {
    v38 = xpc_null_create();
    v52 = v38;
  }
  LogTracker::jsonSummary_sync((_QWORD *)v3, &v53, (xpc_object_t *)&v52);
  xpc_release(v38);
  v52 = 0;
LABEL_27:
  if (!TelephonyUtilIsCarrierBuild())
    goto LABEL_79;
  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0 || LogTracker::isDefaultCarrierProfileInstalled((LogTracker *)IsInternalBuild))
    goto LABEL_79;
  v18 = MEMORY[0x1E0C809B0];
  state.opaque[0] = MEMORY[0x1E0C809B0];
  state.opaque[1] = 3321888768;
  v61 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke;
  v62 = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v63 = v3;
  v64 = *(_QWORD *)(v2 + 24);
  v19 = *(std::__shared_weak_count **)(v2 + 32);
  v65 = v19;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
  }
  v22 = _Block_copy(&state);
  v23 = *(NSObject **)(v3 + 136);
  if (v23)
    dispatch_retain(*(dispatch_object_t *)(v3 + 136));
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = v18;
  *((_QWORD *)&block + 1) = 0x40000000;
  v57 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v58 = &__block_descriptor_tmp_13_8;
  v59 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v25 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v25 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_40;
  }
  v26 = (unint64_t *)(v25 + 8);
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_40:
  abm::HelperClient::create();
  v28 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = xpc_dictionary_create(0, 0, 0);
  if (v31 || (v31 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v31) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v31);
      v32 = v31;
    }
    else
    {
      v32 = xpc_null_create();
    }
  }
  else
  {
    v32 = xpc_null_create();
    v31 = 0;
  }
  xpc_release(v31);
  v39 = xpc_string_create((const char *)*MEMORY[0x1E0CF11B8]);
  if (!v39)
    v39 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CF1040], v39);
  v40 = xpc_null_create();
  xpc_release(v39);
  xpc_release(v40);
  v41 = xpc_BOOL_create(1);
  if (!v41)
    v41 = xpc_null_create();
  xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CF1188], v41);
  v42 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v42);
  v51 = v32;
  if (v32)
  {
    xpc_retain(v32);
    if (v22)
      goto LABEL_63;
LABEL_97:
    aBlock = 0;
    object = v23;
    if (!v23)
      goto LABEL_65;
    goto LABEL_64;
  }
  v51 = xpc_null_create();
  if (!v22)
    goto LABEL_97;
LABEL_63:
  aBlock = _Block_copy(v22);
  object = v23;
  if (v23)
LABEL_64:
    dispatch_retain(v23);
LABEL_65:
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v51);
  xpc_release(v32);
  do
    v43 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v43 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v43)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v23)
    dispatch_release(v23);
  if (v22)
    _Block_release(v22);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
LABEL_79:
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55[2]) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_84:
    operator delete(v55[0]);
    if (!v4)
      goto LABEL_86;
    goto LABEL_85;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v55[2]) < 0)
    goto LABEL_84;
LABEL_81:
  if (v4)
LABEL_85:
    os_release(v4);
LABEL_86:
  v44 = *(std::__shared_weak_count **)(v2 + 32);
  if (v44)
    std::__shared_weak_count::__release_weak(v44);
  v45 = *(const void **)(v2 + 16);
  if (v45)
    _Block_release(v45);
  xpc_release(*(xpc_object_t *)v2);
  operator delete((void *)v2);
  v46 = (std::__shared_weak_count *)a1[2];
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  operator delete(a1);
}

void sub_1BF6F22E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb3_ENKUlvE_clEv_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  void **v13;
  void *__p[2];
  char v15;
  uint8_t buf[4];
  void **v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      if ((_DWORD)v11)
      {
        v12 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v17 = v13;
          _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Failed to install profile. Result: %s", buf, 0xCu);
          if (v15 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb4_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  xpc_object_t v4;
  void *v5;
  xpc_object_t value;
  xpc_object_t v7;
  xpc_object_t v8;
  const void *v9;
  size_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  char v16;
  std::string *v17;
  const char *v18;
  _BOOL4 v19;
  const void *v20;
  size_t v21;
  std::string::size_type v22;
  std::string *p_p;
  uint64_t v24;
  uint64_t v25;
  xpc_object_t *v26;
  int v27;
  void *v28;
  std::string *v29;
  xpc_object_t *v30;
  int v31;
  NSObject *v32;
  xpc_object_t v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  xpc_object_t *v38;
  xpc_object_t v39;
  std::string __p;
  xpc_object_t v41[3];
  xpc_object_t object[3];
  void *v43[3];
  void *aBlock;
  xpc_object_t v45;
  std::string __dst;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(xpc_object_t *)(*a1 + 8);
  v45 = v4;
  if (!v4)
  {
    v4 = xpc_null_create();
    v45 = v4;
    v5 = (void *)v2[2];
    if (!v5)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v4);
  v5 = (void *)v2[2];
  if (v5)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  LogTracker::setProperty_sync(v3, &v45, (uint64_t *)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v4);
  v45 = 0;
  memset(v43, 170, sizeof(v43));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB030]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v7 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB550]);
  v41[0] = v7;
  if (v7)
    xpc_retain(v7);
  else
    v41[0] = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v41[0]);
  memset(v41, 170, sizeof(v41));
  v8 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB6A8]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8)
    xpc_retain(v8);
  else
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(__p.__r_.__value_.__l.__data_);
  v9 = (const void *)*MEMORY[0x1E0CFB098];
  v10 = strlen((const char *)*MEMORY[0x1E0CFB098]);
  if (v10 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_30;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_30:
    memmove(p_dst, v9, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (SHIBYTE(v43[2]) >= 0)
    v15 = v43;
  else
    v15 = (void **)v43[0];
  v16 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &__dst;
  else
    v17 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if (strcasecmp((const char *)v15, (const char *)v17))
  {
    v19 = 0;
    if ((v16 & 0x80) == 0)
      goto LABEL_39;
LABEL_59:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!v19)
      goto LABEL_75;
    goto LABEL_60;
  }
  v20 = (const void *)*MEMORY[0x1E0CFBA30];
  v21 = strlen((const char *)*MEMORY[0x1E0CFBA30]);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    p_p = (std::string *)operator new(v24 + 1);
    __p.__r_.__value_.__l.__size_ = v22;
    __p.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_48;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v21;
  p_p = &__p;
  if (v21)
LABEL_48:
    memmove(p_p, v20, v22);
  p_p->__r_.__value_.__s.__data_[v22] = 0;
  if (SHIBYTE(object[2]) >= 0)
    v26 = object;
  else
    v26 = (xpc_object_t *)object[0];
  v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v28 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v19 = strcasecmp((const char *)v26, (const char *)v29) == 0;
  if (v27 < 0)
  {
    operator delete(v28);
    if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_59;
  }
  else if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    goto LABEL_59;
  }
LABEL_39:
  if (!v19)
    goto LABEL_75;
LABEL_60:
  if (SHIBYTE(v41[2]) >= 0)
    v30 = v41;
  else
    v30 = (xpc_object_t *)v41[0];
  v31 = abm::helper::asEnum((abm::helper *)v30, v18);
  v32 = v3[11];
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
  {
    v38 = v41;
    if (SHIBYTE(v41[2]) < 0)
      v38 = (xpc_object_t *)v41[0];
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
    _os_log_debug_impl(&dword_1BF566000, v32, OS_LOG_TYPE_DEBUG, "#D Selected Config: %s", (uint8_t *)&__dst, 0xCu);
  }
  memset(&__p, 170, sizeof(__p));
  v33 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFBF88]);
  v39 = v33;
  if (v33)
    xpc_retain(v33);
  else
    v39 = xpc_null_create();
  memset(&__dst, 0, sizeof(__dst));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v39);
  v39 = xpc_null_create();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    __dst = __p;
  LogTracker::updateLoggingSettings_sync(v3, v31, &v39, (uint64_t)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  xpc_release(v39);
  v39 = 0;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_75:
    if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
      goto LABEL_76;
    goto LABEL_81;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v41[2]) & 0x80000000) == 0)
  {
LABEL_76:
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_82;
  }
LABEL_81:
  operator delete(v41[0]);
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
LABEL_77:
    if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
      goto LABEL_78;
    goto LABEL_83;
  }
LABEL_82:
  operator delete(object[0]);
  if ((SHIBYTE(v43[2]) & 0x80000000) == 0)
  {
LABEL_78:
    v34 = (const void *)v2[2];
    if (!v34)
      goto LABEL_85;
    goto LABEL_84;
  }
LABEL_83:
  operator delete(v43[0]);
  v34 = (const void *)v2[2];
  if (v34)
LABEL_84:
    _Block_release(v34);
LABEL_85:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v35 = (std::__shared_weak_count *)a1[2];
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a1);
}

void sub_1BF6F2CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *aBlock)
{
  _QWORD *v35;
  uint64_t v36;
  const void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;

  xpc_release(object);
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  v38 = *(const void **)(v36 + 16);
  if (v38)
    _Block_release(v38);
  xpc_release(*(xpc_object_t *)(v36 + 8));
  operator delete((void *)v36);
  v39 = (std::__shared_weak_count *)v35[2];
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  operator delete(v35);
  _Unwind_Resume(a1);
}

void sub_1BF6F2EB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__110shared_ptrIK10LogTrackerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::initialize(dispatch::group_session)::$_1>(LogTracker::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<LogTracker::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(void **__p)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *__p;
  if (v2)
    operator delete(v2);
  v3 = (std::__shared_weak_count *)__p[2];
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_7:
    operator delete(__p);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<LogTracker>::execute_wrapped<LogTracker::shutdown(dispatch::group_session)::$_0>(LogTracker::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<LogTracker::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<LogTracker::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *a1;
  v3 = **a1;
  if (*(_QWORD *)(v3 + 200))
  {
    os_state_remove_handler();
    *(_QWORD *)(v3 + 200) = 0;
  }
  v4 = v2[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    v5 = v2[1];
    if (v5)
      dispatch_release(v5);
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (!v6)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
  }
  else
  {
LABEL_10:
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZNS3_20dumpLogInternal_syncEN3xpc4dictENS_5blockIU13block_pointerFviS7_EEEEUb_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrISD_NSI_14default_deleteISD_EEEEENUlPvE_8__invokeESN_(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  NSObject *v5;
  int v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  const object **v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  void **v17;
  xpc_object_t v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  int v22;
  xpc_object_t v23;
  const char *v24;
  xpc_object_t v25;
  const char *v26;
  int v27;
  NSObject *v28;
  const char *v29;
  std::string *v30;
  xpc_object_t v31;
  const void *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  size_t v36;
  xpc_object_t v37;
  NSObject *v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  const void *v43;
  size_t v44;
  std::string::size_type v45;
  std::string *v46;
  uint64_t v47;
  uint64_t v48;
  const object *v49;
  char *v50;
  xpc_object_t v51;
  char IsCarrierBuild;
  char v53;
  NSObject *v54;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  const void *v57;
  size_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  uint64_t v62;
  const char **v63;
  int v64;
  char v65;
  xpc_object_t v66;
  const void *v67;
  size_t v68;
  std::string::size_type v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  size_t v74;
  std::string::size_type v75;
  std::string *v76;
  uint64_t v77;
  uint64_t v78;
  xpc_object_t v79;
  void *v80;
  const void *v81;
  size_t v82;
  std::string::size_type v83;
  int v84;
  void *p_state;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  size_t v89;
  int v90;
  size_t v91;
  std::string::size_type v92;
  size_t v93;
  std::string *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void **v98;
  std::string *v99;
  std::string::size_type v100;
  char v101;
  xpc_object_t v102;
  xpc_object_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  xpc_object_t v106;
  xpc_object_t v107;
  std::string *v108;
  xpc_object_t v109;
  xpc_object_t v110;
  void **v111;
  xpc_object_t v112;
  xpc_object_t v113;
  xpc_object_t v114;
  xpc_object_t v115;
  void *v116;
  std::__shared_weak_count *v117;
  unint64_t *p_shared_owners;
  unint64_t v119;
  xpc_object_t v120;
  xpc_object_t v121;
  _QWORD *v122;
  const char *v123;
  char *key;
  xpc_object_t v125;
  _QWORD *v126;
  NSObject *v127;
  _DWORD value[4];
  char v129;
  BOOL v130;
  std::string v131;
  xpc_object_t xdict;
  void *__p[3];
  unsigned int v134[4];
  xpc_object_t __s1[4];
  std::string state;
  uint64_t v137;

  v1 = a1;
  v137 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  *(_QWORD *)&value[1] = v2;
  v3 = *(_QWORD **)v2;
  v4 = _os_activity_create(&dword_1BF566000, "Dump finished", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  state.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v4, (os_activity_scope_state_t)&state);
  os_activity_scope_leave((os_activity_scope_state_t)&state);
  v5 = v3[11];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_DWORD *)(v2 + 8);
    LODWORD(state.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(state.__r_.__value_.__r.__words[0]) = v6;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Log dump has finished. The result: 0x%x", (uint8_t *)&state, 8u);
  }
  memset(__p, 170, sizeof(__p));
  v7 = (const char *)*MEMORY[0x1E0CFB370];
  v8 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), (const char *)*MEMORY[0x1E0CFB370]);
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  if (v8)
    xpc_retain(v8);
  else
    v131.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)__s1);
  Timestamp::asString((uint64_t)__s1, 0, 9, &state);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
    operator delete(state.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)__s1, (_QWORD *)__s1[1]);
  xpc_release(v131.__r_.__value_.__l.__data_);
  xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v9;
  v11 = MEMORY[0x1E0C812F8];
  if (v9)
  {
    xdict = v9;
  }
  else
  {
    v10 = xpc_null_create();
    xdict = v10;
    if (!v10)
    {
      v12 = xpc_null_create();
      v10 = 0;
      goto LABEL_15;
    }
  }
  if (MEMORY[0x1C3B8CD78](v10) == v11)
  {
    xpc_retain(v10);
    goto LABEL_16;
  }
  v12 = xpc_null_create();
LABEL_15:
  xdict = v12;
LABEL_16:
  xpc_release(v10);
  v13 = (const object **)MEMORY[0x1E0D01A30];
  v14 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
  if (!v14)
    v14 = xpc_null_create();
  v15 = (const char *)*MEMORY[0x1E0CFB6A0];
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB6A0], v14);
  v16 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v16);
  if (SHIBYTE(__p[2]) >= 0)
    v17 = __p;
  else
    v17 = (void **)__p[0];
  v18 = xpc_string_create((const char *)v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v7, v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = *(_DWORD *)(v2 + 8);
  if (v20 == -534716414)
    v20 = -534716415;
  LODWORD(state.__r_.__value_.__l.__data_) = v20;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(v2 + 24), (unsigned int *)&state, &xdict);
  v21 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E0CFB078]);
  state.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  if (v21)
    xpc_retain(v21);
  else
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)&state, 0);
  xpc_release(state.__r_.__value_.__l.__data_);
  if (!v22)
  {
    memset(__s1, 170, 24);
    v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E0CFB0F8]);
    state.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25)
      xpc_retain(v25);
    else
      state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&state, (const object *)*MEMORY[0x1E0CFB4D8], v26);
    xpc_release(state.__r_.__value_.__l.__data_);
    v32 = (const void *)*MEMORY[0x1E0CFB3A0];
    v33 = (xpc_object_t)strlen((const char *)*MEMORY[0x1E0CFB3A0]);
    v34 = v33;
    if (SHIBYTE(__s1[2]) < 0)
    {
      if (v33 != (xpc_object_t)-1)
      {
        v35 = __s1[1];
        if (__s1[1] >= v33)
          v37 = v33;
        else
          v37 = __s1[1];
        if (memcmp(__s1[0], v32, (size_t)v37))
          goto LABEL_58;
        goto LABEL_55;
      }
    }
    else if (v33 != (xpc_object_t)-1)
    {
      v35 = (xpc_object_t)HIBYTE(__s1[2]);
      if (HIBYTE(__s1[2]) >= (unint64_t)v33)
        v36 = (size_t)v33;
      else
        v36 = HIBYTE(__s1[2]);
      if (memcmp(__s1, v32, v36))
        goto LABEL_58;
LABEL_55:
      if (v35 == v34)
      {
        v38 = v3[11];
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(state.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1BF566000, v38, OS_LOG_TYPE_DEFAULT, "#I Baseband Log collection will not trigger the post log collection", (uint8_t *)&state, 2u);
        }
        goto LABEL_221;
      }
LABEL_58:
      v39 = xpc_null_create();
      if (MEMORY[0x1C3B8CD78](*(_QWORD *)(v2 + 16)) != v11 || *(_DWORD *)(v2 + 8))
      {
        v127 = v4;
        v40 = *(xpc_object_t *)(v2 + 32);
        if (v40)
        {
          xpc_retain(*(xpc_object_t *)(v2 + 32));
        }
        else
        {
          v40 = xpc_null_create();
          if (!v40)
          {
            v125 = xpc_null_create();
            v40 = 0;
            goto LABEL_69;
          }
        }
        if (MEMORY[0x1C3B8CD78](v40) == v11)
        {
          xpc_retain(v40);
          v125 = v40;
        }
        else
        {
          v125 = xpc_null_create();
        }
LABEL_69:
        v42 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v42);
        xpc_release(v40);
        v43 = (const void *)*MEMORY[0x1E0CFB028];
        v44 = strlen((const char *)*MEMORY[0x1E0CFB028]);
        v126 = v1;
        if (v44 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v45 = v44;
        if (v44 >= 0x17)
        {
          v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v44 | 7) != 0x17)
            v47 = v44 | 7;
          v48 = v47 + 1;
          v46 = (std::string *)operator new(v47 + 1);
          v131.__r_.__value_.__l.__size_ = v45;
          v131.__r_.__value_.__r.__words[2] = v48 | 0x8000000000000000;
          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
        }
        else
        {
          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v44;
          v46 = &v131;
          if (!v44)
          {
LABEL_77:
            v46->__r_.__value_.__s.__data_[v45] = 0;
            memset(&state, 0, sizeof(state));
            if (prop::systemlogs::get((char *)&v131, (uint64_t)&state))
            {
              v134[0] = -1431655766;
              if (util::convert<int>(&state, v134, 0))
                v49 = (const object *)v134[0];
              else
                v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_85:
                if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v131.__r_.__value_.__l.__data_);
                v50 = (char *)*MEMORY[0x1E0CFB190];
                v51 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), (const char *)*MEMORY[0x1E0CFB190]);
                state.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
                if (v51)
                  xpc_retain(v51);
                else
                  state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                value[0] = xpc::dyn_cast_or_default((xpc *)&state, v49);
                xpc_release(state.__r_.__value_.__l.__data_);
                if ((TelephonyUtilIsInternalBuild() & 1) == 0)
                {
                  IsCarrierBuild = TelephonyUtilIsCarrierBuild();
                  v53 = value[0] == 2 ? IsCarrierBuild : 1;
                  if ((v53 & 1) == 0)
                  {
                    v54 = v3[11];
                    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(state.__r_.__value_.__l.__data_) = 0;
                      _os_log_error_impl(&dword_1BF566000, v54, OS_LOG_TYPE_ERROR, "Detected an internal log dump with SYSDIAGNOSE mode in customer build, overriding to OFF", (uint8_t *)&state, 2u);
                    }
                    value[0] = 0;
                  }
                }
                IsInternalBuild = TelephonyUtilIsInternalBuild();
                if ((IsInternalBuild & 1) != 0
                  || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
                {
                  CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
                }
                else
                {
                  CompressionMode = 2;
                }
                v57 = (const void *)*MEMORY[0x1E0CF11E8];
                v58 = strlen((const char *)*MEMORY[0x1E0CF11E8]);
                if (v58 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v59 = v58;
                if (v58 >= 0x17)
                {
                  v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v58 | 7) != 0x17)
                    v61 = v58 | 7;
                  v62 = v61 + 1;
                  v60 = (std::string *)operator new(v61 + 1);
                  v131.__r_.__value_.__l.__size_ = v59;
                  v131.__r_.__value_.__r.__words[2] = v62 | 0x8000000000000000;
                  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
                }
                else
                {
                  *((_BYTE *)&v131.__r_.__value_.__s + 23) = v58;
                  v60 = &v131;
                  if (!v58)
                  {
LABEL_110:
                    v60->__r_.__value_.__s.__data_[v59] = 0;
                    memset(&state, 0, sizeof(state));
                    if (prop::compression::get((char *)&v131, (uint64_t)&state))
                    {
                      v134[0] = -1431655766;
                      if (util::convert<int>(&state, v134, 0))
                        CompressionMode = v134[0];
                      else
                        CompressionMode = CompressionMode;
                    }
                    if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                    {
                      operator delete(state.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_116:
                        v63 = (const char **)MEMORY[0x1E0CFC068];
                        key = v50;
                        if (value[0] == 2)
                        {
LABEL_117:
                          v64 = 0;
                          v130 = 0;
                          v65 = 1;
                          goto LABEL_140;
                        }
LABEL_120:
                        v66 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), *v63);
                        state.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
                        if (v66)
                          xpc_retain(v66);
                        else
                          state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                        v64 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)CompressionMode);
                        xpc_release(state.__r_.__value_.__l.__data_);
                        v130 = 0;
                        if (!v64)
                        {
                          v65 = 1;
                          goto LABEL_140;
                        }
                        v67 = (const void *)*MEMORY[0x1E0CF1070];
                        v68 = strlen((const char *)*MEMORY[0x1E0CF1070]);
                        if (v68 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v69 = v68;
                        if (v68 >= 0x17)
                        {
                          v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v68 | 7) != 0x17)
                            v71 = v68 | 7;
                          v72 = v71 + 1;
                          v70 = (std::string *)operator new(v71 + 1);
                          v131.__r_.__value_.__l.__size_ = v69;
                          v131.__r_.__value_.__r.__words[2] = v72 | 0x8000000000000000;
                          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
                        }
                        else
                        {
                          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v68;
                          v70 = &v131;
                          if (!v68)
                            goto LABEL_133;
                        }
                        memmove(v70, v67, v69);
LABEL_133:
                        v70->__r_.__value_.__s.__data_[v69] = 0;
                        memset(&state, 0, sizeof(state));
                        if (prop::compression::get((char *)&v131, (uint64_t)&state))
                          util::convert<BOOL>(&state, &v130, 0);
                        if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(state.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v131.__r_.__value_.__l.__data_);
                        v65 = 0;
LABEL_140:
                        v129 = 1;
                        v73 = (const char *)*MEMORY[0x1E0CFBA40];
                        v74 = strlen((const char *)*MEMORY[0x1E0CFBA40]);
                        if (v74 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        v75 = v74;
                        if (v74 >= 0x17)
                        {
                          v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v74 | 7) != 0x17)
                            v77 = v74 | 7;
                          v78 = v77 + 1;
                          v76 = (std::string *)operator new(v77 + 1);
                          v131.__r_.__value_.__l.__size_ = v75;
                          v131.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
                          v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
                        }
                        else
                        {
                          *((_BYTE *)&v131.__r_.__value_.__s + 23) = v74;
                          v76 = &v131;
                          if (!v74)
                          {
LABEL_148:
                            v76->__r_.__value_.__s.__data_[v75] = 0;
                            memset(&state, 0, sizeof(state));
                            if (prop::systemlogs::get((char *)&v131, (uint64_t)&state))
                              util::convert<BOOL>(&state, (BOOL *)&v129, 0);
                            if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                            {
                              operator delete(state.__r_.__value_.__l.__data_);
                              if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                goto LABEL_152;
                            }
                            else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            {
                              goto LABEL_152;
                            }
                            operator delete(v131.__r_.__value_.__l.__data_);
LABEL_152:
                            v79 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 32), v73);
                            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v79;
                            v80 = v125;
                            if (v79)
                              xpc_retain(v79);
                            else
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                            v129 = xpc::dyn_cast_or_default((xpc *)&state, (const object *)v129);
                            xpc_release(state.__r_.__value_.__l.__data_);
                            v123 = v73;
                            memset(&state, 170, sizeof(state));
                            v81 = (const void *)*MEMORY[0x1E0D01A30];
                            v82 = strlen((const char *)*MEMORY[0x1E0D01A30]);
                            if (v82 > 0x7FFFFFFFFFFFFFF7)
                              std::string::__throw_length_error[abi:ne180100]();
                            v83 = v82;
                            v84 = v64;
                            if (v82 >= 0x17)
                            {
                              v86 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                              if ((v82 | 7) != 0x17)
                                v86 = v82 | 7;
                              v87 = v86 + 1;
                              p_state = operator new(v86 + 1);
                              state.__r_.__value_.__l.__size_ = v83;
                              state.__r_.__value_.__r.__words[2] = v87 | 0x8000000000000000;
                              state.__r_.__value_.__r.__words[0] = (std::string::size_type)p_state;
                              v4 = v127;
                            }
                            else
                            {
                              *((_BYTE *)&state.__r_.__value_.__s + 23) = v82;
                              p_state = &state;
                              v4 = v127;
                              if (!v82)
                              {
                                state.__r_.__value_.__s.__data_[0] = 0;
                                v1 = v126;
                                if ((v65 & 1) != 0)
                                  goto LABEL_189;
                                goto LABEL_166;
                              }
                            }
                            memmove(p_state, v81, v83);
                            *((_BYTE *)p_state + v83) = 0;
                            v1 = v126;
                            if ((v65 & 1) != 0)
                            {
LABEL_189:
                              v102 = xpc_int64_create(value[0]);
                              if (!v102)
                                v102 = xpc_null_create();
                              xpc_dictionary_set_value(v80, key, v102);
                              v103 = xpc_null_create();
                              xpc_release(v102);
                              xpc_release(v103);
                              v104 = xpc_int64_create(v84);
                              if (!v104)
                                v104 = xpc_null_create();
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x1E0CFC068], v104);
                              v105 = xpc_null_create();
                              xpc_release(v104);
                              xpc_release(v105);
                              v106 = xpc_BOOL_create(v130);
                              if (!v106)
                                v106 = xpc_null_create();
                              xpc_dictionary_set_value(v80, (const char *)*MEMORY[0x1E0CFBDF8], v106);
                              v107 = xpc_null_create();
                              xpc_release(v106);
                              xpc_release(v107);
                              if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v108 = &state;
                              else
                                v108 = (std::string *)state.__r_.__value_.__r.__words[0];
                              v109 = xpc_string_create((const char *)v108);
                              if (!v109)
                                v109 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v15, v109);
                              v110 = xpc_null_create();
                              xpc_release(v109);
                              xpc_release(v110);
                              if (SHIBYTE(__p[2]) >= 0)
                                v111 = __p;
                              else
                                v111 = (void **)__p[0];
                              v112 = xpc_string_create((const char *)v111);
                              if (!v112)
                                v112 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v7, v112);
                              v113 = xpc_null_create();
                              xpc_release(v112);
                              xpc_release(v113);
                              v114 = xpc_BOOL_create(v129);
                              if (!v114)
                                v114 = xpc_null_create();
                              xpc_dictionary_set_value(v80, v123, v114);
                              v115 = xpc_null_create();
                              xpc_release(v114);
                              xpc_release(v115);
                              ctu::fs::create_directory();
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(state.__r_.__value_.__l.__data_);
                              v116 = v80;
                              goto LABEL_210;
                            }
LABEL_166:
                            if ((TelephonyUtilIsInternalBuild() & 1) != 0
                              || TelephonyUtilIsCarrierBuild())
                            {
                              v122 = v3;
                              v88 = (const void *)*MEMORY[0x1E0D01A48];
                              v89 = strlen((const char *)*MEMORY[0x1E0D01A48]);
                              v90 = SHIBYTE(__p[2]);
                              if (SHIBYTE(__p[2]) >= 0)
                                v91 = HIBYTE(__p[2]);
                              else
                                v91 = (size_t)__p[1];
                              v92 = v91 + v89;
                              memset(&v131, 170, sizeof(v131));
                              if (v91 + v89 > 0x7FFFFFFFFFFFFFF7)
                                std::string::__throw_length_error[abi:ne180100]();
                              v93 = v89;
                              if (v92 > 0x16)
                              {
                                v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
                                if ((v92 | 7) != 0x17)
                                  v95 = v92 | 7;
                                v96 = v95 + 1;
                                v94 = (std::string *)operator new(v95 + 1);
                                v131.__r_.__value_.__l.__size_ = v92;
                                v131.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
                                v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
                              }
                              else
                              {
                                memset(&v131, 0, sizeof(v131));
                                v94 = &v131;
                                *((_BYTE *)&v131.__r_.__value_.__s + 23) = v91 + v89;
                              }
                              if (v93)
                                memcpy(v94, v88, v93);
                              v97 = (char *)v94 + v93;
                              if (v91)
                              {
                                if (v90 >= 0)
                                  v98 = __p;
                                else
                                  v98 = (void **)__p[0];
                                memmove(v97, v98, v91);
                              }
                              v97[v91] = 0;
                              v1 = v126;
                              v4 = v127;
                              v99 = std::string::append(&v131, "/", 1uLL);
                              v100 = v99->__r_.__value_.__r.__words[0];
                              *(_QWORD *)v134 = v99->__r_.__value_.__l.__size_;
                              *(_QWORD *)((char *)&v134[1] + 3) = *(std::string::size_type *)((char *)&v99->__r_.__value_.__r.__words[1]
                                                                                            + 7);
                              v101 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
                              v99->__r_.__value_.__l.__size_ = 0;
                              v99->__r_.__value_.__r.__words[2] = 0;
                              v99->__r_.__value_.__r.__words[0] = 0;
                              if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(state.__r_.__value_.__l.__data_);
                              state.__r_.__value_.__r.__words[0] = v100;
                              state.__r_.__value_.__l.__size_ = *(_QWORD *)v134;
                              *(std::string::size_type *)((char *)&state.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v134[1] + 3);
                              *((_BYTE *)&state.__r_.__value_.__s + 23) = v101;
                              if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v131.__r_.__value_.__l.__data_);
                              v3 = v122;
                              v80 = v125;
                            }
                            goto LABEL_189;
                          }
                        }
                        memmove(v76, v73, v75);
                        goto LABEL_148;
                      }
                    }
                    else if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
                      goto LABEL_116;
                    }
                    operator delete(v131.__r_.__value_.__l.__data_);
                    v63 = (const char **)MEMORY[0x1E0CFC068];
                    key = v50;
                    if (value[0] == 2)
                      goto LABEL_117;
                    goto LABEL_120;
                  }
                }
                memmove(v60, v57, v59);
                goto LABEL_110;
              }
            }
            else
            {
              v49 = 0;
              if ((SHIBYTE(state.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_85;
            }
            operator delete(state.__r_.__value_.__l.__data_);
            goto LABEL_85;
          }
        }
        memmove(v46, v43, v45);
        goto LABEL_77;
      }
      v41 = *(xpc_object_t *)(v2 + 16);
      if (v41)
      {
        xpc_retain(*(xpc_object_t *)(v2 + 16));
      }
      else
      {
        v41 = xpc_null_create();
        if (!v41)
        {
          v120 = xpc_null_create();
          v41 = 0;
LABEL_240:
          v121 = xpc_null_create();
          xpc_release(v39);
          xpc_release(v121);
          xpc_release(v41);
          v116 = v120;
LABEL_210:
          if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116)
              xpc_retain(v116);
            else
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            LogTracker::postLogCollectionInternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          else
          {
            state.__r_.__value_.__r.__words[0] = (std::string::size_type)v116;
            if (v116)
              xpc_retain(v116);
            else
              state.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            LogTracker::postLogCollectionExternal_sync(v3, (xpc_object_t *)&state.__r_.__value_.__l.__data_);
            xpc_release(state.__r_.__value_.__l.__data_);
          }
          state.__r_.__value_.__r.__words[0] = 0;
          xpc_release(v116);
LABEL_221:
          if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
            goto LABEL_224;
          v31 = __s1[0];
          goto LABEL_223;
        }
      }
      if (MEMORY[0x1C3B8CD78](v41) == v11)
      {
        xpc_retain(v41);
        v120 = v41;
      }
      else
      {
        v120 = xpc_null_create();
      }
      goto LABEL_240;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  memset(&state, 170, sizeof(state));
  v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 16), v15);
  __s1[0] = v23;
  if (v23)
    xpc_retain(v23);
  else
    __s1[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)__s1, *v13, v24);
  xpc_release(__s1[0]);
  v27 = ctu::fs::remove_dir();
  v28 = v3[11];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = "Failed";
    if (v27)
      v29 = "Succeeded";
    v30 = &state;
    if ((state.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v30 = (std::string *)state.__r_.__value_.__r.__words[0];
    LODWORD(__s1[0]) = 136315394;
    *(xpc_object_t *)((char *)__s1 + 4) = (xpc_object_t)v29;
    WORD2(__s1[1]) = 2080;
    *(xpc_object_t *)((char *)&__s1[1] + 6) = v30;
    _os_log_impl(&dword_1BF566000, v28, OS_LOG_TYPE_DEFAULT, "#I User requested to clear logs, %s to remove dump path: %s", (uint8_t *)__s1, 0x16u);
  }
  if (SHIBYTE(state.__r_.__value_.__r.__words[2]) < 0)
  {
    v31 = (xpc_object_t)state.__r_.__value_.__r.__words[0];
LABEL_223:
    operator delete(v31);
  }
LABEL_224:
  xpc_release(xdict);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if (!v4)
      goto LABEL_229;
    goto LABEL_228;
  }
  operator delete(__p[0]);
  if (v4)
LABEL_228:
    os_release(v4);
LABEL_229:
  _ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&value[1]);
  v117 = (std::__shared_weak_count *)v1[2];
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldaxr(p_shared_owners);
    while (__stlxr(v119 - 1, p_shared_owners));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  operator delete(v1);
}

void sub_1BF6F4138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, void *a13, void *a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZN10LogTracker20dumpLogInternal_syncEN3xpc4dictEN8dispatch5blockIU13block_pointerFviS3_EEEEUb_E3__3NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    v3 = *(const void **)(v2 + 24);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0>(dispatch_group_s *,dispatch_queue_s *,LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()((uint64_t *)a1);
  if (a1)
  {
    xpc_release(*(xpc_object_t *)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    v2 = *(NSObject **)(a1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = *(NSObject **)(a1 + 16);
      if (v3)
        dispatch_release(v3);
    }
    v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
}

void sub_1BF6F4618(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 24));
    *(_QWORD *)(v1 + 24) = 0;
    v3 = *(NSObject **)(v1 + 16);
    if (v3)
    {
      dispatch_group_leave(v3);
      v4 = *(NSObject **)(v1 + 16);
      if (v4)
        dispatch_release(v4);
    }
    v5 = *(std::__shared_weak_count **)(v1 + 8);
    if (v5)
      std::__shared_weak_count::__release_weak(v5);
    operator delete((void *)v1);
  }
  _Unwind_Resume(exception_object);
}

void LogTracker::jsonSummary_sync(dispatch::group_session,xpc::dict)::$_0::operator()(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  const char *v12;
  const void *v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  const char **v21;
  const void *v22;
  size_t v23;
  std::string::size_type v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type size;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  const void *v36;
  size_t v37;
  size_t v38;
  void *p_p;
  uint64_t v40;
  uint64_t v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  xpc_object_t v46;
  uint64_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  const char *v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  const char *v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t v57;
  xpc_object_t v58;
  const char *v59;
  xpc_object_t v60;
  xpc_object_t v61;
  xpc_object_t v62;
  const char *v63;
  std::string *v64;
  xpc_object_t v65;
  xpc_object_t v66;
  const char *v67;
  xpc_object_t v68;
  const char *v69;
  std::string *v70;
  size_t v71;
  xpc_object_t v72;
  const char *v73;
  std::string *v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  const char *v78;
  std::string *v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  const char *v83;
  std::string *v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  char v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  char v92;
  xpc_object_t v93;
  const char *v94;
  xpc_object_t v95;
  xpc_object_t v96;
  char v97;
  xpc_object_t v98;
  const char *v99;
  xpc_object_t v100;
  NSObject *v101;
  xpc_object_t v102;
  xpc_object_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  void *v106;
  _QWORD *v107;
  xpc_object_t v108;
  xpc_object_t *v109;
  xpc_object_t v110;
  const char *v111;
  xpc_object_t v112;
  xpc_object_t v113;
  void **v114;
  xpc_object_t v115;
  void *v116;
  NSObject *v117;
  uint64_t v118;
  NSObject *v119;
  _QWORD *v120;
  _QWORD *v121;
  BOOL v122;
  xpc_object_t v123;
  void *v124;
  xpc_object_t v125;
  xpc_object_t v126;
  void *v127;
  xpc_object_t v128;
  xpc_object_t v129;
  ctu::Gestalt *v130;
  std::string::size_type v131;
  __int128 v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  std::string *v142;
  xpc_object_t v143;
  xpc_object_t v144;
  unint64_t *v145;
  unint64_t v146;
  void *v147;
  int v148;
  unsigned __int8 v149;
  NSObject *v150;
  const char *v151;
  std::string *p_object;
  std::string v153;
  xpc_object_t v154;
  const void *v155;
  __int128 v156;
  xpc_object_t v157;
  xpc_object_t value;
  const void *v159;
  __int128 v160;
  void *__p;
  size_t v162;
  int64_t v163;
  std::string v164;
  std::string v165;
  std::string object;
  std::string __dst;
  void *v168[3];
  void *v169[3];
  std::string v170;
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[1];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return;
  v5 = v4;
  v6 = *a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v6)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (!v6)
      return;
  }
  memset(v169, 170, sizeof(v169));
  v9 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB370]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
  if (v9)
    xpc_retain(v9);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&__dst);
  Timestamp::asString(v10, 0, 9, v168);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v168[2]) < 0)
    operator delete(v168[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&__dst, (_QWORD *)__dst.__r_.__value_.__l.__size_);
  xpc_release(object.__r_.__value_.__l.__data_);
  memset(v168, 170, sizeof(v168));
  v11 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB0F8]);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
  if (v11)
    xpc_retain(v11);
  else
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&__dst, (const object *)"", v12);
  xpc_release(__dst.__r_.__value_.__l.__data_);
  memset(&__dst, 170, sizeof(__dst));
  v13 = (const void *)*MEMORY[0x1E0D01A20];
  v14 = strlen((const char *)*MEMORY[0x1E0D01A20]);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_24;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_24:
    memmove(p_dst, v13, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  if (SHIBYTE(v168[2]) >= 0)
    v19 = (const char *)v168;
  else
    v19 = (const char *)v168[0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBB98]);
  if (!strncasecmp((const char *)*MEMORY[0x1E0CFBB98], v19, v20))
    std::string::__assign_external(&__dst, (const std::string::value_type *)*MEMORY[0x1E0D01A40]);
  v21 = (const char **)MEMORY[0x1E0D01A30];
  v22 = (const void *)*MEMORY[0x1E0D01A30];
  v23 = strlen((const char *)*MEMORY[0x1E0D01A30]);
  if (v23 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v24 = v23;
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    v164.__r_.__value_.__l.__size_ = v24;
    v164.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    goto LABEL_37;
  }
  *((_BYTE *)&v164.__r_.__value_.__s + 23) = v23;
  v25 = &v164;
  if (v23)
LABEL_37:
    memmove(v25, v22, v24);
  *((_BYTE *)v25 + v24) = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__dst;
  else
    v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  else
    size = __dst.__r_.__value_.__l.__size_;
  v30 = std::string::append(&v164, (const std::string::value_type *)v28, size);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v165.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v169[2]) >= 0)
    v32 = (const std::string::value_type *)v169;
  else
    v32 = (const std::string::value_type *)v169[0];
  if (SHIBYTE(v169[2]) >= 0)
    v33 = HIBYTE(v169[2]);
  else
    v33 = (std::string::size_type)v169[1];
  v34 = std::string::append(&v165, v32, v33);
  v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v170.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v170.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  v36 = (const void *)*MEMORY[0x1E0D01A60];
  v37 = strlen((const char *)*MEMORY[0x1E0D01A60]);
  if (v37 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v38 = v37;
  if (v37 >= 0x17)
  {
    v40 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v37 | 7) != 0x17)
      v40 = v37 | 7;
    v41 = v40 + 1;
    p_p = operator new(v40 + 1);
    v162 = v38;
    v163 = v41 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_57;
  }
  HIBYTE(v163) = v37;
  p_p = &__p;
  if (v37)
LABEL_57:
    memmove(p_p, v36, v38);
  *((_BYTE *)p_p + v38) = 0;
  if (v163 >= 0)
    v42 = (const std::string::value_type *)&__p;
  else
    v42 = (const std::string::value_type *)__p;
  if (v163 >= 0)
    v43 = HIBYTE(v163);
  else
    v43 = v162;
  v44 = std::string::append(&v170, v42, v43);
  v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  object.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&object.__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v163) < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v165.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_67;
LABEL_74:
      operator delete(v165.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v164.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_68;
LABEL_75:
      operator delete(v164.__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
  }
  else if ((SHIBYTE(v170.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v170.__r_.__value_.__l.__data_);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_74;
LABEL_67:
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_75;
LABEL_68:
  v46 = xpc_dictionary_create(0, 0, 0);
  v47 = MEMORY[0x1E0C812F8];
  if (v46 || (v46 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v46) == v47)
    {
      xpc_retain(v46);
      v48 = v46;
    }
    else
    {
      v48 = xpc_null_create();
    }
  }
  else
  {
    v48 = xpc_null_create();
    v46 = 0;
  }
  xpc_release(v46);
  if (MEMORY[0x1C3B8CD78](v48) == v47)
  {
    v49 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB930]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    if (v49)
      xpc_retain(v49);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v50);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v51 = &v170;
    else
      v51 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v52 = xpc_string_create((const char *)v51);
    if (!v52)
      v52 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB928], v52);
    v53 = xpc_null_create();
    xpc_release(v52);
    xpc_release(v53);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169[2]) >= 0)
      v54 = (const char *)v169;
    else
      v54 = (const char *)v169[0];
    v55 = xpc_string_create(v54);
    if (!v55)
      v55 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB698], v55);
    v56 = xpc_null_create();
    xpc_release(v55);
    xpc_release(v56);
    v57 = xpc_string_create(*v21);
    if (!v57)
      v57 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB690], v57);
    v58 = xpc_null_create();
    xpc_release(v57);
    xpc_release(v58);
    if (SHIBYTE(v168[2]) >= 0)
      v59 = (const char *)v168;
    else
      v59 = (const char *)v168[0];
    v60 = xpc_string_create(v59);
    if (!v60)
      v60 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBA20], v60);
    v61 = xpc_null_create();
    xpc_release(v60);
    xpc_release(v61);
    v62 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB548]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    if (v62)
      xpc_retain(v62);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v63);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v170;
    else
      v64 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v65 = xpc_string_create((const char *)v64);
    if (!v65)
      v65 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBB58], v65);
    v66 = xpc_null_create();
    xpc_release(v65);
    xpc_release(v66);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    xpc_release(v165.__r_.__value_.__l.__data_);
    memset(&v170, 170, sizeof(v170));
    v67 = (const char *)*MEMORY[0x1E0CFB538];
    v68 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB538]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v68;
    if (v68)
      xpc_retain(v68);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&v165, (const object *)"", v69);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v170;
    else
      v70 = (std::string *)v170.__r_.__value_.__r.__words[0];
    v71 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (!strncasecmp((const char *)v70, (const char *)*MEMORY[0x1E0CFB590], v71))
    {
      v72 = xpc_dictionary_get_value((xpc_object_t)a1[3], v67);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
      if (v72)
        xpc_retain(v72);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v73);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v165;
      else
        v74 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v75 = xpc_string_create((const char *)v74);
      if (!v75)
        v75 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBA18], v75);
      v76 = xpc_null_create();
      xpc_release(v75);
      xpc_release(v76);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
      v77 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB8D0]);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
      if (v77)
        xpc_retain(v77);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v78);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v79 = &v165;
      else
        v79 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v80 = xpc_string_create((const char *)v79);
      if (!v80)
        v80 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBD00], v80);
      v81 = xpc_null_create();
      xpc_release(v80);
      xpc_release(v81);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
      v82 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB770]);
      v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
      if (v82)
        xpc_retain(v82);
      else
        v164.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&v164, (const object *)"", v83);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = &v165;
      else
        v84 = (std::string *)v165.__r_.__value_.__r.__words[0];
      v85 = xpc_string_create((const char *)v84);
      if (!v85)
        v85 = xpc_null_create();
      xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBBE8], v85);
      v86 = xpc_null_create();
      xpc_release(v85);
      xpc_release(v86);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      xpc_release(v164.__r_.__value_.__l.__data_);
    }
    v87 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB780]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    if (v87)
      xpc_retain(v87);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v88 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v89 = xpc_BOOL_create(v88);
    if (!v89)
      v89 = xpc_null_create();
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFBA10], v89);
    v90 = xpc_null_create();
    xpc_release(v89);
    xpc_release(v90);
    xpc_release(v165.__r_.__value_.__l.__data_);
    v91 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB798]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
    if (v91)
      xpc_retain(v91);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v92 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v93 = xpc_BOOL_create(v92);
    if (!v93)
      v93 = xpc_null_create();
    v94 = (const char *)*MEMORY[0x1E0CFB920];
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB920], v93);
    v95 = xpc_null_create();
    xpc_release(v93);
    xpc_release(v95);
    xpc_release(v165.__r_.__value_.__l.__data_);
    v96 = xpc_dictionary_get_value((xpc_object_t)a1[3], (const char *)*MEMORY[0x1E0CFB790]);
    v165.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
    if (v96)
      xpc_retain(v96);
    else
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v97 = xpc::dyn_cast_or_default((xpc *)&v165, 0);
    v98 = xpc_BOOL_create(v97);
    if (!v98)
      v98 = xpc_null_create();
    v99 = (const char *)*MEMORY[0x1E0CFB918];
    xpc_dictionary_set_value(v48, (const char *)*MEMORY[0x1E0CFB918], v98);
    v100 = xpc_null_create();
    xpc_release(v98);
    xpc_release(v100);
    xpc_release(v165.__r_.__value_.__l.__data_);
    if (*(_BYTE *)(v3 + 216))
    {
      v101 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v165.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF566000, v101, OS_LOG_TYPE_DEFAULT, "#I Setting SCD and COF flags due to problem reaching helper daemon during shutdown", (uint8_t *)&v165, 2u);
      }
      v102 = xpc_BOOL_create(1);
      if (!v102)
        v102 = xpc_null_create();
      xpc_dictionary_set_value(v48, v94, v102);
      v103 = xpc_null_create();
      xpc_release(v102);
      xpc_release(v103);
      v104 = xpc_BOOL_create(1);
      if (!v104)
        v104 = xpc_null_create();
      xpc_dictionary_set_value(v48, v99, v104);
      v105 = xpc_null_create();
      xpc_release(v104);
      xpc_release(v105);
    }
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  v106 = operator new(0x30uLL);
  v159 = v106;
  v160 = xmmword_1BF744400;
  strcpy((char *)v106, "com.apple.AppleBasebandManager.data.plist");
  LogTracker::copyPreference(v3, &v159, &__p);
  operator delete(v106);
  v107 = *(_QWORD **)(v3 + 152);
  if (v107 != (_QWORD *)(v3 + 160))
  {
    do
    {
      v109 = (xpc_object_t *)v107[7];
      v110 = *v109;
      if (*v109)
      {
        xpc_retain(*v109);
        v111 = (const char *)(v107 + 4);
        if (*((char *)v107 + 55) < 0)
          goto LABEL_191;
      }
      else
      {
        v110 = xpc_null_create();
        v111 = (const char *)(v107 + 4);
        if (*((char *)v107 + 55) < 0)
LABEL_191:
          v111 = *(const char **)v111;
      }
      xpc_dictionary_set_value(__p, v111, v110);
      v112 = xpc_null_create();
      xpc_release(v110);
      xpc_release(v112);
      v113 = xpc_null_create();
      v114 = (void **)v107[7];
      v115 = xpc_null_create();
      v116 = *v114;
      *v114 = v113;
      xpc_release(v116);
      xpc_release(v115);
      v117 = *(NSObject **)(v3 + 176);
      if (v117)
      {
        dispatch_retain(*(dispatch_object_t *)(v3 + 176));
        dispatch_group_enter(v117);
      }
      v118 = v107[7];
      v119 = *(NSObject **)(v118 + 8);
      *(_QWORD *)(v118 + 8) = v117;
      if (v119)
      {
        dispatch_group_leave(v119);
        dispatch_release(v119);
      }
      v120 = (_QWORD *)v107[1];
      if (v120)
      {
        do
        {
          v121 = v120;
          v120 = (_QWORD *)*v120;
        }
        while (v120);
      }
      else
      {
        do
        {
          v121 = (_QWORD *)v107[2];
          v122 = *v121 == (_QWORD)v107;
          v107 = v121;
        }
        while (!v122);
      }
      v107 = v121;
    }
    while (v121 != (_QWORD *)(v3 + 160));
  }
  if (v48)
  {
    xpc_retain(v48);
    v108 = v48;
  }
  else
  {
    v108 = xpc_null_create();
  }
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E0CFB558], v108);
  v123 = xpc_null_create();
  xpc_release(v108);
  xpc_release(v123);
  LogTracker::getConfiguration((LogTracker *)v3, &value);
  v124 = __p;
  v125 = value;
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E0CFB7E0], value);
  v126 = xpc_null_create();
  value = v126;
  xpc_release(v125);
  xpc_release(v126);
  value = 0;
  v127 = operator new(0x28uLL);
  v155 = v127;
  v156 = xmmword_1BF744410;
  strcpy((char *)v127, "com.apple.AppleBasebandManager.plist");
  LogTracker::copyPreference(v3, &v155, &v157);
  v128 = v157;
  xpc_dictionary_set_value(v124, (const char *)*MEMORY[0x1E0CFBC08], v157);
  v129 = xpc_null_create();
  v157 = v129;
  xpc_release(v128);
  xpc_release(v129);
  v157 = 0;
  operator delete(v127);
  v130 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v131 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v130);
    v132 = *(_OWORD *)&v165.__r_.__value_.__l.__data_;
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = 0uLL;
    v133 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v132;
    if (v133)
    {
      v134 = (unint64_t *)&v133->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = (std::__shared_weak_count *)v165.__r_.__value_.__l.__size_;
    if (v165.__r_.__value_.__l.__size_)
    {
      v137 = (unint64_t *)(v165.__r_.__value_.__l.__size_ + 8);
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
    v131 = off_1ED70F478;
  }
  v139 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  v164.__r_.__value_.__r.__words[0] = v131;
  v164.__r_.__value_.__l.__size_ = *(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v140 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v141 = __ldxr(v140);
    while (__stxr(v141 + 1, v140));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v131 + 80))(&v170, v131);
  if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v142 = &v170;
  else
    v142 = (std::string *)v170.__r_.__value_.__r.__words[0];
  v143 = xpc_string_create((const char *)v142);
  if (!v143)
    v143 = xpc_null_create();
  xpc_dictionary_set_value(__p, (const char *)*MEMORY[0x1E0CFBA48], v143);
  v144 = xpc_null_create();
  xpc_release(v143);
  xpc_release(v144);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v170.__r_.__value_.__l.__data_);
    if (!v139)
      goto LABEL_220;
  }
  else if (!v139)
  {
    goto LABEL_220;
  }
  v145 = (unint64_t *)&v139->__shared_owners_;
  do
    v146 = __ldaxr(v145);
  while (__stlxr(v146 - 1, v145));
  if (v146)
  {
LABEL_220:
    v147 = __p;
    v154 = __p;
    if (__p)
      goto LABEL_221;
LABEL_224:
    v154 = xpc_null_create();
    v148 = SHIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_222;
    goto LABEL_225;
  }
  ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
  std::__shared_weak_count::__release_weak(v139);
  v147 = __p;
  v154 = __p;
  if (!__p)
    goto LABEL_224;
LABEL_221:
  xpc_retain(v147);
  v148 = SHIBYTE(object.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_222:
    v153 = object;
    goto LABEL_226;
  }
LABEL_225:
  std::string::__init_copy_ctor_external(&v153, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
LABEL_226:
  v149 = util::writeJSON();
  if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v153.__r_.__value_.__l.__data_);
  xpc_release(v154);
  v154 = 0;
  v150 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
  {
    if (((MEMORY[0x1C3B8CD78](v147) == v47) & v149) != 0)
      v151 = "Succeeded";
    else
      v151 = "Failed";
    p_object = (std::string *)object.__r_.__value_.__r.__words[0];
    if (v148 >= 0)
      p_object = &object;
    LODWORD(v170.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v170.__r_.__value_.__r.__words + 4) = (std::string::size_type)v151;
    WORD2(v170.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v170.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_object;
    _os_log_impl(&dword_1BF566000, v150, OS_LOG_TYPE_DEFAULT, "#I %s to generate log summary: %s", (uint8_t *)&v170, 0x16u);
  }
  xpc_release(v147);
  xpc_release(v48);
  if ((SHIBYTE(object.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_237;
LABEL_241:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v168[2]) & 0x80000000) == 0)
    {
LABEL_238:
      if ((SHIBYTE(v169[2]) & 0x80000000) == 0)
        return;
LABEL_243:
      operator delete(v169[0]);
      return;
    }
    goto LABEL_242;
  }
  operator delete(object.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_241;
LABEL_237:
  if ((SHIBYTE(v168[2]) & 0x80000000) == 0)
    goto LABEL_238;
LABEL_242:
  operator delete(v168[0]);
  if (SHIBYTE(v169[2]) < 0)
    goto LABEL_243;
}

void sub_1BF6F588C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,xpc_object_t object,uint64_t a31,int a32,__int16 a33,char a34,char a35,xpc_object_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(_QWORD *)(v2 + 72) = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 56);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(_QWORD *)(v2 + 40) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 24);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  xpc_object_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *v18;
  uint64_t v20;
  xpc_object_t v21;
  NSObject *v22;

  v20 = a1;
  v3 = *(_QWORD **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v5))
  {
    v6 = v3[26];
    v22 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    v7 = *(xpc_object_t *)(a1 + 8);
    v21 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      v7 = xpc_null_create();
      v21 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v22, &v21);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  v8 = v3[26];
  v9 = v3[17];
  v10 = operator new(0x40uLL);
  v11 = *(_QWORD *)(a1 + 24);
  *v10 = *(_QWORD *)(a1 + 16);
  v10[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 16);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(void **)(a1 + 40);
  v10[2] = *(_QWORD *)(a1 + 32);
  v10[3] = v14;
  if (!v14)
  {
    v10[3] = xpc_null_create();
    v15 = *(_QWORD *)(a1 + 56);
    v10[4] = *(_QWORD *)(a1 + 48);
    v10[5] = v15;
    if (!v15)
      goto LABEL_20;
LABEL_18:
    v16 = (unint64_t *)(v15 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    goto LABEL_20;
  }
  xpc_retain(v14);
  v15 = *(_QWORD *)(a1 + 56);
  v10[4] = *(_QWORD *)(a1 + 48);
  v10[5] = v15;
  if (v15)
    goto LABEL_18;
LABEL_20:
  v18 = *(void **)(a1 + 72);
  v10[6] = *(_QWORD *)(a1 + 64);
  v10[7] = v18;
  if (v18)
    xpc_retain(v18);
  else
    v10[7] = xpc_null_create();
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&v20);
}

void sub_1BF6F5FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  NSObject *v10;
  void *v11;

  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_2>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *value;
  const void *v10;
  size_t v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t IsInternalBuild;
  uint64_t CompressionMode;
  int v20;
  NSObject *v21;
  xpc_object_t v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v31;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v35;

  v31 = a1;
  v4 = a1 + 8;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v3 = *(_QWORD **)(v4 + 8);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 24), (const char *)*MEMORY[0x1E0CFC068]);
      __dst[0] = value;
      if (value)
        xpc_retain(value);
      else
        __dst[0] = xpc_null_create();
      IsInternalBuild = TelephonyUtilIsInternalBuild();
      if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
        CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
      else
        CompressionMode = 2;
      v20 = xpc::dyn_cast_or_default((xpc *)__dst, (const object *)CompressionMode);
      xpc_release(__dst[0]);
      if (v20)
      {
        v21 = v3[26];
        __dst[0] = v21;
        if (v21)
        {
          dispatch_retain(v21);
          dispatch_group_enter(v21);
        }
        v22 = *(xpc_object_t *)(a1 + 24);
        cf = v22;
        if (v22)
        {
          xpc_retain(v22);
        }
        else
        {
          v22 = xpc_null_create();
          cf = v22;
        }
        LogTracker::archiveLogs_sync(v3, __dst, (xpc_object_t *)&cf);
        xpc_release(v22);
        cf = 0;
        if (v21)
        {
          dispatch_group_leave(v21);
          dispatch_release(v21);
        }
      }
      v23 = v3[26];
      v24 = v3[17];
      v25 = operator new(0x20uLL);
      v26 = *(_QWORD *)(a1 + 40);
      *v25 = *(_QWORD *)(a1 + 32);
      v25[1] = v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 + 16);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = *(void **)(a1 + 56);
      v25[2] = *(_QWORD *)(a1 + 48);
      v25[3] = v29;
      if (v29)
        xpc_retain(v29);
      else
        v25[3] = xpc_null_create();
      dispatch_group_notify_f(v23, v24, v25, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v31);
    }
  }
  else
  {
    v6 = 0;
  }
  v10 = (const void *)*MEMORY[0x1E0CFBC70];
  v11 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = operator new(v14 + 1);
    __dst[1] = v12;
    v35 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v35) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_19;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_19:
  *((_BYTE *)&v12->isa + (_QWORD)v13) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v35) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v16 = (unint64_t *)&v6->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&v31);
}

void sub_1BF6F62DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  NSObject *v17;
  void *v18;

  xpc_release(v18);
  if (v17)
  {
    dispatch_group_leave(v17);
    dispatch_release(v17);
    std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const,std::default_delete<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_1 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 56));
    *(_QWORD *)(v2 + 56) = 0;
    v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionExternal_sync(xpc::dict)::$_0 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  xpc_object_t value;
  const char *v11;
  const void *v12;
  size_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  CFTypeRef *v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const char *v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  const void *v32;
  size_t v33;
  void *v34;
  void *v35;
  const object *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  CFTypeID v40;
  NSObject *v41;
  CFTypeRef *v42;
  std::__shared_weak_count *v43;
  void *v44;
  xpc_object_t v45;
  void *aBlock[2];
  unint64_t v47;
  xpc_object_t object;
  CFTypeRef cf[3];
  void *__dst[3];
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)v4 + 1);
  if (!v2)
  {
    v6 = 0;
    goto LABEL_11;
  }
  v5 = std::__shared_weak_count::lock(v2);
  v6 = v5;
  if (!v5 || !*(_QWORD *)a1)
  {
LABEL_11:
    v12 = (const void *)*MEMORY[0x1E0CFBC70];
    v13 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = (void *)v13;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      v15 = (void **)operator new(v16 + 1);
      __dst[1] = v14;
      __dst[2] = (void *)(v17 | 0x8000000000000000);
      __dst[0] = v15;
    }
    else
    {
      HIBYTE(__dst[2]) = v13;
      v15 = __dst;
      if (!v13)
        goto LABEL_19;
    }
    memmove(v15, v12, (size_t)v14);
LABEL_19:
    *((_BYTE *)v14 + (_QWORD)v15) = 0;
    cf[0] = 0;
    aBlock[0] = 0;
    Service::broadcastEvent(v3, (uint64_t)__dst, cf, (const void **)aBlock);
    if (aBlock[0])
      _Block_release(aBlock[0]);
    if (cf[0])
      CFRelease(cf[0]);
    if (SHIBYTE(__dst[2]) < 0)
      operator delete(__dst[0]);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    goto LABEL_82;
  }
  v7 = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  memset(__dst, 170, sizeof(__dst));
  v9 = (const char *)*MEMORY[0x1E0CFB930];
  value = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x1E0CFB930]);
  cf[0] = value;
  if (value)
    xpc_retain(value);
  else
    cf[0] = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)cf, (const object *)"", v11);
  xpc_release((xpc_object_t)cf[0]);
  memset(cf, 170, sizeof(cf));
  v20 = (const char *)*MEMORY[0x1E0CFB370];
  v21 = xpc_dictionary_get_value(*((xpc_object_t *)a1 + 3), (const char *)*MEMORY[0x1E0CFB370]);
  object = v21;
  if (v21)
    xpc_retain(v21);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&v51);
  Timestamp::asString((uint64_t)&v51, 0, 9, aBlock);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v47) < 0)
    operator delete(aBlock[0]);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v51, *((_QWORD **)&v51 + 1));
  xpc_release(object);
  v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v22) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v22);
      v23 = v22;
    }
    else
    {
      v23 = xpc_null_create();
    }
  }
  else
  {
    v23 = xpc_null_create();
    v22 = 0;
  }
  xpc_release(v22);
  if (SHIBYTE(cf[2]) >= 0)
    v24 = cf;
  else
    v24 = (CFTypeRef *)cf[0];
  v25 = xpc_string_create((const char *)v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(v23, v20, v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  if (SHIBYTE(__dst[2]) >= 0)
    v27 = (const char *)__dst;
  else
    v27 = (const char *)__dst[0];
  v28 = xpc_string_create(v27);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(v23, v9, v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
  v30 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
  if (!v30)
    v30 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB6A0], v30);
  v31 = xpc_null_create();
  xpc_release(v30);
  xpc_release(v31);
  v32 = (const void *)*MEMORY[0x1E0CFBC70];
  v33 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v33 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v34 = (void *)v33;
  if (v33 >= 0x17)
  {
    v37 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v33 | 7) != 0x17)
      v37 = v33 | 7;
    v38 = v37 + 1;
    v35 = operator new(v37 + 1);
    aBlock[1] = v34;
    v47 = v38 | 0x8000000000000000;
    aBlock[0] = v35;
LABEL_62:
    memmove(v35, v32, (size_t)v34);
    *((_BYTE *)v34 + (_QWORD)v35) = 0;
    v45 = v23;
    if (v23)
      goto LABEL_58;
    goto LABEL_63;
  }
  HIBYTE(v47) = v33;
  v35 = aBlock;
  if (v33)
    goto LABEL_62;
  LOBYTE(aBlock[0]) = 0;
  v45 = v23;
  if (v23)
  {
LABEL_58:
    xpc_retain(v23);
    goto LABEL_64;
  }
LABEL_63:
  v45 = xpc_null_create();
LABEL_64:
  xpc::bridge((xpc *)&v45, v36);
  v39 = (void *)v51;
  if ((_QWORD)v51 && (v40 = CFGetTypeID((CFTypeRef)v51), v40 == CFDictionaryGetTypeID()))
  {
    object = v39;
    CFRetain(v39);
  }
  else
  {
    object = 0;
  }
  v44 = 0;
  Service::broadcastEvent(v3, (uint64_t)aBlock, (const void **)&object, (const void **)&v44);
  if (v44)
    _Block_release(v44);
  if (object)
    CFRelease(object);
  if ((_QWORD)v51)
    CFRelease((CFTypeRef)v51);
  xpc_release(v45);
  if (SHIBYTE(v47) < 0)
    operator delete(aBlock[0]);
  v41 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    v42 = cf;
    if (SHIBYTE(cf[2]) < 0)
      v42 = (CFTypeRef *)cf[0];
    LODWORD(v51) = 136315138;
    *(_QWORD *)((char *)&v51 + 4) = v42;
    _os_log_impl(&dword_1BF566000, v41, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&v51, 0xCu);
  }
  xpc_release(v23);
  if (SHIBYTE(cf[2]) < 0)
  {
    operator delete((void *)cf[0]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      goto LABEL_82;
  }
  else if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(__dst[0]);
LABEL_82:
  xpc_release(*((xpc_object_t *)a1 + 3));
  *((_QWORD *)a1 + 3) = 0;
  v43 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  operator delete(a1);
}

void sub_1BF6F6A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, CFTypeRef cf, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,CFTypeRef a30,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    *v1 = &off_1E7915D78;
    v2 = v1[3];
    if (!v2)
    {
LABEL_18:
      MEMORY[0x1C3B8B74C](v1 + 1);
      operator delete(v1);
      return;
    }
    v3 = v1[4];
    v4 = (void *)v1[3];
    if (v3 == v2)
    {
LABEL_17:
      v1[4] = v2;
      operator delete(v4);
      goto LABEL_18;
    }
    while (1)
    {
      if (*(char *)(v3 - 1) < 0)
      {
        operator delete(*(void **)(v3 - 24));
        if ((*(char *)(v3 - 41) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*(char *)(v3 - 65) & 0x80000000) == 0)
            goto LABEL_9;
          goto LABEL_13;
        }
      }
      else if ((*(char *)(v3 - 41) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(*(void **)(v3 - 64));
      if ((*(char *)(v3 - 65) & 0x80000000) == 0)
      {
LABEL_9:
        if (*(char *)(v3 - 89) < 0)
          goto LABEL_14;
        goto LABEL_5;
      }
LABEL_13:
      operator delete(*(void **)(v3 - 88));
      if (*(char *)(v3 - 89) < 0)
LABEL_14:
        operator delete(*(void **)(v3 - 112));
LABEL_5:
      v3 -= 112;
      if (v3 == v2)
      {
        v4 = (void *)v1[3];
        goto LABEL_17;
      }
    }
  }
}

uint64_t std::__shared_ptr_pointer<LogDumpDB *,std::shared_ptr<LogDumpDB>::__shared_ptr_default_delete<LogDumpDB,LogDumpDB>,std::allocator<LogDumpDB>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF7446FALL)
    return a1 + 24;
  if (((v3 & 0x80000001BF7446FALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF7446FALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF7446FALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  unsigned __int8 v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  const void *v22;
  NSObject *object;
  xpc_object_t v24;
  _QWORD aBlock[6];
  std::__shared_weak_count *v26;
  uint64_t v27;
  xpc_object_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p;
  char v32;
  xpc_object_t v33;
  uint64_t v34;
  __int128 block;
  void (*v36)(uint64_t);
  void *v37;
  __int128 *v38;

  v2 = a1[2];
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke;
  aBlock[3] = &__block_descriptor_280_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5_e241_v48__0_Result_i_basic_string_char__std::char_traits_char___std::allocator_char______compressed_pair_std::basic_string_char_::__rep__std::allocator_char______rep_______short__23c__0C_b7b1____long__Qb63b1____raw__3Q_______8_dict__object__v__40l;
  v7 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  aBlock[4] = v2;
  aBlock[5] = v7;
  v26 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = (void *)a1[4];
  v27 = a1[3];
  v28 = v10;
  if (v10)
    xpc_retain(v10);
  else
    v28 = xpc_null_create();
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)&v29, (uint64_t)(a1 + 5));
  v11 = _Block_copy(aBlock);
  v12 = *(NSObject **)(v2 + 136);
  if (v12)
    dispatch_retain(v12);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = v5;
  *((_QWORD *)&block + 1) = 0x40000000;
  v36 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v37 = &__block_descriptor_tmp_13_8;
  v38 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_20;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v14 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    block = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_20;
  }
  v15 = (unint64_t *)(v14 + 8);
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
LABEL_20:
  abm::HelperClient::create();
  v17 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (!*((_QWORD *)&block + 1))
    goto LABEL_24;
  v18 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    v24 = v4;
    if (v4)
    {
LABEL_25:
      xpc_retain(v4);
      if (v11)
        goto LABEL_26;
      goto LABEL_49;
    }
  }
  else
  {
LABEL_24:
    v24 = v4;
    if (v4)
      goto LABEL_25;
  }
  v24 = xpc_null_create();
  if (v11)
  {
LABEL_26:
    v22 = _Block_copy(v11);
    object = v12;
    if (!v12)
      goto LABEL_28;
    goto LABEL_27;
  }
LABEL_49:
  v22 = 0;
  object = v12;
  if (v12)
LABEL_27:
    dispatch_retain(v12);
LABEL_28:
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (v22)
    _Block_release(v22);
  xpc_release(v24);
  do
    v20 = __ldaxr((unint64_t *)0xAAAAAAAAAAAAAAB2);
  while (__stlxr(v20 - 1, (unint64_t *)0xAAAAAAAAAAAAAAB2));
  if (!v20)
  {
    (*(void (**)(unint64_t))(MEMORY[0xAAAAAAAAAAAAAAAA] + 16))(0xAAAAAAAAAAAAAAAALL);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL);
  }
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&v34);
  xpc_release(v33);
  v33 = 0;
  if (v32 < 0)
    operator delete(__p);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  xpc_release(v28);
  v28 = 0;
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  xpc_release(v4);
  v21 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6((uint64_t)a1);
  operator delete(v21);
}

void sub_1BF6F71D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, dispatch_object_t object, xpc_object_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,xpc_object_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,xpc_object_t a34,uint64_t a35)
{
  uint64_t v35;
  void *v36;
  const void *v37;
  NSObject *v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  void *v42;

  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(a12);
  if (a14)
  {
    p_shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (v38)
    dispatch_release(v38);
  if (v37)
    _Block_release(v37);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)&a35);
  xpc_release(a34);
  if (a33 < 0)
    operator delete(__p);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  xpc_release(a23);
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  xpc_release(v36);
  v42 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_6::~$_6(v35);
  operator delete(v42);
  _Unwind_Resume(a1);
}

void ___ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3__6clEv_block_invoke(_QWORD *a1, unsigned int *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  _BOOL4 v14;
  NSObject *v15;
  NSObject *v16;
  _QWORD *v17;
  void *v18;
  void **v19;
  void *__p[2];
  char v21;
  uint8_t buf[4];
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *a2;
      v12 = *(NSObject **)(v5 + 88);
      if ((_DWORD)v11)
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          TelephonyXPC::Result::toString(v11, (uint64_t)__p);
          v19 = v21 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 136315138;
          v23 = v19;
          _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Unable to reach baseband tracing task (error: %s)", buf, 0xCu);
          if (v21 < 0)
            operator delete(__p[0]);
        }
        v13 = 1;
      }
      else
      {
        v14 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        v13 = 0;
        if (v14)
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Successfully reached baseband tracing task", (uint8_t *)__p, 2u);
          v13 = 0;
        }
      }
      *(_BYTE *)(v5 + 216) = v13;
      v15 = *(NSObject **)(v5 + 208);
      v16 = *(NSObject **)(v5 + 136);
      v17 = operator new(0xE0uLL);
      v18 = (void *)a1[8];
      *v17 = a1[7];
      v17[1] = v18;
      if (v18)
        xpc_retain(v18);
      else
        v17[1] = xpc_null_create();
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(v17 + 2), (uint64_t)(a1 + 9));
      dispatch_group_notify_f(v15, v16, v17, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
    }
  }
}

void sub_1BF6F7500(_Unwind_Exception *a1)
{
  xpc_object_t *v1;

  xpc_release(v1[1]);
  v1[1] = 0;
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6F7520(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  if (v7)
    xpc_retain(v7);
  else
    a1[8] = xpc_null_create();
  return LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)(a1 + 9), (uint64_t)(a2 + 9));
}

void sub_1BF6F75A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  xpc_release(*(xpc_object_t *)(v1 + 64));
  *(_QWORD *)(v1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10LogTrackerEE56c67_ZTSZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEE3__5(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(a1 + 136);
  xpc_release(*(xpc_object_t *)(a1 + 128));
  *(_QWORD *)(a1 + 128) = 0;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1, const char *a2)
{
  _QWORD *v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  xpc_object_t v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  uint64_t v12;
  xpc_object_t v13;
  NSObject *v14;

  v12 = a1;
  v3 = *(_QWORD **)a1;
  if (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v4)
    || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v5))
  {
    v6 = v3[26];
    v14 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    v7 = *(xpc_object_t *)(a1 + 8);
    v13 = v7;
    if (v7)
    {
      xpc_retain(v7);
    }
    else
    {
      v7 = xpc_null_create();
      v13 = v7;
    }
    LogTracker::moveBasebandServicesLog_sync(v3, &v14, &v13);
    xpc_release(v7);
    if (v6)
    {
      dispatch_group_leave(v6);
      dispatch_release(v6);
    }
  }
  v8 = v3[26];
  v9 = v3[17];
  v10 = operator new(0xD0uLL);
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4::$_4((uint64_t)v10, a1 + 16);
  dispatch_group_notify_f(v8, v9, v10, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&v12);
}

void sub_1BF6F7764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  NSObject *v10;
  void *v11;

  xpc_release(v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
    std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
    _Unwind_Resume(a1);
  }
  std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_5 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v2 + 80);
    xpc_release(*(xpc_object_t *)(v2 + 72));
    *(_QWORD *)(v2 + 72) = 0;
    if (*(char *)(v2 + 71) < 0)
      operator delete(*(void **)(v2 + 48));
    v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    xpc_release(*(xpc_object_t *)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_4 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  size_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  size_t v18;
  char *v19;
  NSObject *v20;
  xpc_object_t v21;
  NSObject *v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v33;

  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!*((_DWORD *)a1 + 6))
          goto LABEL_46;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
        if (!*((_DWORD *)a1 + 6))
        {
LABEL_46:
          v22 = v3[26];
          v23 = v3[17];
          v24 = operator new(0x90uLL);
          v25 = *((_QWORD *)a1 + 9);
          *v24 = *((_QWORD *)a1 + 8);
          v24[1] = v25;
          if (v25)
          {
            v26 = (unint64_t *)(v25 + 16);
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
          }
          v28 = (void *)*((_QWORD *)a1 + 11);
          v24[2] = *((_QWORD *)a1 + 10);
          v24[3] = v28;
          if (v28)
            xpc_retain(v28);
          else
            v24[3] = xpc_null_create();
          LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)(v24 + 4), (uint64_t)(a1 + 96));
          dispatch_group_notify_f(v22, v23, v24, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
          goto LABEL_53;
        }
      }
      if (!a1[28])
      {
        v17 = a1[55];
        v18 = v17 >= 0 ? a1[55] : *((_QWORD *)a1 + 5);
        if (v18 == strlen((const char *)*MEMORY[0x1E0CFB6C8]))
        {
          v19 = v17 >= 0 ? a1 + 32 : (char *)*((_QWORD *)a1 + 4);
          if (!memcmp(v19, (const void *)*MEMORY[0x1E0CFB6C8], v18))
          {
            v20 = v3[26];
            __dst[0] = v20;
            if (v20)
            {
              dispatch_retain(v20);
              dispatch_group_enter(v20);
            }
            v21 = (xpc_object_t)*((_QWORD *)a1 + 7);
            cf = v21;
            if (v21)
            {
              xpc_retain(v21);
            }
            else
            {
              v21 = xpc_null_create();
              cf = v21;
            }
            LogTracker::archiveLogs_sync(v3, __dst, (xpc_object_t *)&cf);
            xpc_release(v21);
            cf = 0;
            if (v20)
            {
              dispatch_group_leave(v20);
              dispatch_release(v20);
            }
          }
        }
      }
      goto LABEL_46;
    }
  }
  else
  {
    v6 = 0;
  }
  v9 = (const void *)*MEMORY[0x1E0CFBC70];
  v10 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = operator new(v13 + 1);
    __dst[1] = v11;
    v33 = v14 | 0x8000000000000000;
    __dst[0] = v12;
  }
  else
  {
    HIBYTE(v33) = v10;
    v12 = __dst;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v12, v9, (size_t)v11);
LABEL_18:
  *((_BYTE *)&v11->isa + (_QWORD)v12) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_53:
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)(a1 + 64));
  xpc_release(*((xpc_object_t *)a1 + 7));
  *((_QWORD *)a1 + 7) = 0;
  if (a1[55] < 0)
    operator delete(*((void **)a1 + 4));
  v29 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  operator delete(a1);
}

void sub_1BF6F7B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  NSObject *v18;
  void *v19;
  std::__shared_weak_count *v21;

  xpc_release(v19);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
  }
  LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17 + 64);
  xpc_release(*(xpc_object_t *)(v17 + 56));
  *(_QWORD *)(v17 + 56) = 0;
  if (*(char *)(v17 + 55) < 0)
  {
    operator delete(*(void **)(v17 + 32));
    v21 = *(std::__shared_weak_count **)(v17 + 8);
    if (!v21)
    {
LABEL_5:
      operator delete((void *)v17);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v21 = *(std::__shared_weak_count **)(v17 + 8);
    if (!v21)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v21);
  operator delete((void *)v17);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  xpc_object_t v10;
  const void *v11;
  size_t v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *aBlock;
  CFTypeRef cf;
  NSObject *__dst[2];
  unint64_t v26;

  v4 = a1 + 1;
  v2 = (std::__shared_weak_count *)a1[1];
  v3 = (_QWORD *)v4[1];
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      v9 = v3[26];
      __dst[0] = v9;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      v10 = (xpc_object_t)a1[3];
      cf = v10;
      if (v10)
      {
        xpc_retain(v10);
      }
      else
      {
        v10 = xpc_null_create();
        cf = v10;
      }
      LogTracker::jsonSummary_sync(v3, __dst, (xpc_object_t *)&cf);
      xpc_release(v10);
      if (v9)
      {
        dispatch_group_leave(v9);
        dispatch_release(v9);
      }
      v19 = v3[26];
      v20 = v3[17];
      v21 = operator new(0x70uLL);
      LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::$_2((uint64_t)v21, (uint64_t)(a1 + 4));
      dispatch_group_notify_f(v19, v20, v21, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      goto LABEL_36;
    }
  }
  else
  {
    v6 = 0;
  }
  v11 = (const void *)*MEMORY[0x1E0CFBC70];
  v12 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v12 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __dst[1] = v13;
    v26 = v16 | 0x8000000000000000;
    __dst[0] = v14;
  }
  else
  {
    HIBYTE(v26) = v12;
    v14 = __dst;
    if (!v12)
      goto LABEL_21;
  }
  memmove(v14, v11, (size_t)v13);
LABEL_21:
  *((_BYTE *)&v13->isa + (_QWORD)v14) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent((uint64_t)v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_36:
  v22 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3((uint64_t)a1);
  operator delete(v22);
}

void sub_1BF6F7ED4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  void *v4;

  operator delete(v2);
  v4 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1BF6F7EF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1BF6F7F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, CFTypeRef cf, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  NSObject *v18;
  void *v19;
  void *v21;
  void *v22;

  xpc_release(v19);
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
    v21 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17);
    operator delete(v21);
    _Unwind_Resume(a1);
  }
  v22 = (void *)LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_3::~$_3(v17);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  void *v18;
  xpc_object_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  std::string *v30;
  std::string *v31;
  std::string::size_type v32;
  unint64_t *v33;
  unint64_t v34;
  std::string *v35;
  uint64_t v37;
  void *aBlock;
  CFTypeRef cf;
  uint64_t (**__dst)();
  size_t v41;
  unint64_t v42;
  void **p_dst;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v37 = a1;
  v4 = a1 + 8;
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  v3 = *(_QWORD *)(v4 + 8);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!*(_BYTE *)(a1 + 24))
        {
LABEL_30:
          if (*(_DWORD *)(a1 + 28) != 2)
          {
            v20 = *(void **)(a1 + 32);
            cf = v20;
            if (v20)
              xpc_retain(v20);
            else
              cf = xpc_null_create();
            __dst = 0;
            v41 = 0;
            v42 = 0;
            TapToRadar::createRadarIfPossible((xpc_object_t *)&cf, (uint64_t)&__dst);
            if (SHIBYTE(v42) < 0)
              operator delete(__dst);
            xpc_release((xpc_object_t)cf);
            cf = 0;
            goto LABEL_52;
          }
          v17 = *(NSObject **)(v3 + 208);
          cf = v17;
          if (v17)
          {
            dispatch_retain(v17);
            dispatch_group_enter(v17);
          }
          v18 = *(void **)(a1 + 32);
          aBlock = v18;
          if (v18)
          {
            xpc_retain(v18);
            v19 = *(xpc_object_t *)(a1 + 32);
            if (v19)
            {
LABEL_35:
              xpc_retain(v19);
              __dst = off_1E791FC40;
              v41 = v3;
              v42 = (unint64_t)v19;
              p_dst = 0;
              goto LABEL_40;
            }
          }
          else
          {
            aBlock = xpc_null_create();
            v19 = *(xpc_object_t *)(a1 + 32);
            if (v19)
              goto LABEL_35;
          }
          v19 = xpc_null_create();
          __dst = off_1E791FC40;
          v41 = v3;
          v42 = (unint64_t)v19;
          p_dst = 0;
          if (!v19)
          {
            v19 = 0;
            v42 = (unint64_t)xpc_null_create();
LABEL_41:
            p_dst = (void **)&__dst;
            LogTracker::systemLog_sync(v3, (dispatch_object_t *)&cf, &aBlock, &__dst);
            v26 = (uint64_t (***)())p_dst;
            if (p_dst == (void **)&__dst)
            {
              v27 = 4;
              v26 = &__dst;
            }
            else
            {
              if (!p_dst)
                goto LABEL_50;
              v27 = 5;
            }
            ((void (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*v26)[v27])(v26, v21, v22, v23, v24, v25);
LABEL_50:
            xpc_release(v19);
            xpc_release(aBlock);
            if (v17)
            {
              dispatch_group_leave(v17);
              dispatch_release(v17);
            }
            goto LABEL_52;
          }
LABEL_40:
          xpc_retain(v19);
          goto LABEL_41;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
        if (!*(_BYTE *)(a1 + 24))
          goto LABEL_30;
      }
LABEL_52:
      v28 = *(NSObject **)(v3 + 208);
      v29 = *(NSObject **)(v3 + 136);
      v30 = (std::string *)operator new(0x48uLL);
      v31 = v30;
      v32 = *(_QWORD *)(a1 + 48);
      v30->__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 40);
      v30->__r_.__value_.__l.__size_ = v32;
      if (v32)
      {
        v33 = (unint64_t *)(v32 + 16);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v30->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(v30 + 1, *(const std::string::value_type **)(a1 + 64), *(_QWORD *)(a1 + 72));
      }
      else
      {
        *(_OWORD *)&v30[1].__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 64);
        v30[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 80);
      }
      v35 = v31 + 2;
      if (*(char *)(a1 + 111) < 0)
      {
        std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
      }
      else
      {
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 88);
        v31[2].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 104);
      }
      dispatch_group_notify_f(v28, v29, v31, (dispatch_function_t)dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
      return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v37);
    }
  }
  else
  {
    v6 = 0;
  }
  v9 = (const void *)*MEMORY[0x1E0CFBC70];
  v10 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v12 = (uint64_t (***)())operator new(v13 + 1);
    v41 = v11;
    v42 = v14 | 0x8000000000000000;
    __dst = (uint64_t (**)())v12;
  }
  else
  {
    HIBYTE(v42) = v10;
    v12 = &__dst;
    if (!v10)
      goto LABEL_18;
  }
  memmove(v12, v9, v11);
LABEL_18:
  *((_BYTE *)v12 + v11) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent(v3, (uint64_t)&__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v42) < 0)
    operator delete(__dst);
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](&v37);
}

void sub_1BF6F83B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const,std::default_delete<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2 const>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v2 = *a1;
  *a1 = 0;
  if (!v2)
    return a1;
  if ((*(char *)(v2 + 111) & 0x80000000) == 0)
  {
    if ((*(char *)(v2 + 87) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_11:
    operator delete(*(void **)(v2 + 64));
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  operator delete(*(void **)(v2 + 88));
  if (*(char *)(v2 + 87) < 0)
    goto LABEL_11;
LABEL_4:
  v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
LABEL_5:
    std::__shared_weak_count::__release_weak(v3);
LABEL_6:
  xpc_release(*(xpc_object_t *)(v2 + 32));
  *(_QWORD *)(v2 + 32) = 0;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete((void *)v2);
  return a1;
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E791FC40;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::~__func(xpc_object_t *a1)
{
  *a1 = off_1E791FC40;
  xpc_release(a1[2]);
  operator delete(a1);
}

_QWORD *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;

  v2 = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  *v2 = off_1E791FC40;
  v2[1] = v4;
  v2[2] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v2[2] = xpc_null_create();
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  xpc_object_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(void **)(a1 + 16);
  *a2 = off_1E791FC40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  a2[2] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(_QWORD *)(a1 + 16) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[2]);
  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::operator()(uint64_t a1, unsigned __int8 *a2, void **a3)
{
  int v4;
  void *v5;
  _QWORD *v6;
  xpc_object_t value;
  const char *v8;
  NSObject *v9;
  char *v10;
  char v11;
  std::string *v12;
  int64_t v13;
  int64_t v14;
  int64_t size;
  void *v16;
  char *v17;
  int v18;
  std::string *v19;
  int64_t v20;
  char *v21;
  char *v22;
  NSObject *v23;
  xpc_object_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  std::string __p;
  NSObject *v30;
  std::string v31;
  uint8_t buf[8];
  xpc_object_t v33;
  uint8_t *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *a3;
  *a3 = xpc_null_create();
  v6 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    memset(&v31, 170, sizeof(v31));
    value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CF1038]);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v8);
    xpc_release(*(xpc_object_t *)buf);
    v10 = (char *)*MEMORY[0x1E0D01A38];
    v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v31;
    else
      v12 = (std::string *)v31.__r_.__value_.__r.__words[0];
    v13 = strlen((const char *)*MEMORY[0x1E0D01A38]);
    if (v13)
    {
      v14 = v13;
      size = v31.__r_.__value_.__l.__size_;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      if (size >= v13)
      {
        v17 = (char *)v12 + size;
        v18 = *v10;
        v19 = v12;
        do
        {
          v20 = size - v14;
          if (v20 == -1)
            break;
          v21 = (char *)memchr(v19, v18, v20 + 1);
          if (!v21)
            break;
          v22 = v21;
          if (!memcmp(v21, v10, v14))
          {
            if (v22 == v17 || v22 - (char *)v12 == -1)
              break;
            goto LABEL_26;
          }
          v19 = (std::string *)(v22 + 1);
          size = v17 - (v22 + 1);
        }
        while (size >= v14);
      }
      v16 = *(void **)(a1 + 16);
      *(_QWORD *)buf = v16;
      if (v16)
        xpc_retain(v16);
      else
        *(_QWORD *)buf = xpc_null_create();
      TapToRadar::createRadarIfPossible((xpc_object_t *)buf, (uint64_t)&v31);
      xpc_release(*(xpc_object_t *)buf);
      *(_QWORD *)buf = 0;
      goto LABEL_44;
    }
LABEL_26:
    v23 = v6[26];
    v30 = v23;
    if (v23)
    {
      dispatch_retain(v23);
      dispatch_group_enter(v23);
      v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    if (v11 < 0)
      std::string::__init_copy_ctor_external(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
    else
      __p = v31;
    v24 = *(xpc_object_t *)(a1 + 16);
    if (v24)
    {
      xpc_retain(v24);
      v34 = 0;
      *(_QWORD *)buf = off_1E791FCC0;
      v33 = v24;
    }
    else
    {
      v24 = xpc_null_create();
      v34 = 0;
      *(_QWORD *)buf = off_1E791FCC0;
      v33 = v24;
      if (!v24)
      {
        v24 = 0;
        v33 = xpc_null_create();
LABEL_35:
        v34 = buf;
        LogTracker::processLogarchive_sync(v6, &v30, (const char *)&__p, buf);
        v27 = v34;
        if (v34 == buf)
        {
          v28 = 4;
          v27 = buf;
        }
        else
        {
          if (!v34)
          {
LABEL_40:
            xpc_release(v24);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (v23)
            {
              dispatch_group_leave(v23);
              dispatch_release(v23);
            }
LABEL_44:
            if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v31.__r_.__value_.__l.__data_);
            goto LABEL_46;
          }
          v28 = 5;
        }
        (*(void (**)(uint8_t *, uint64_t, uint64_t))(*(_QWORD *)v27 + 8 * v28))(v27, v25, v26);
        goto LABEL_40;
      }
    }
    xpc_retain(v24);
    goto LABEL_35;
  }
  v9 = v6[11];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "Failed to collect sysdiagnose!", buf, 2u);
  }
LABEL_46:
  xpc_release(v5);
}

void sub_1BF6F8A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t object,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  NSObject *v27;

  if (v27)
  {
    dispatch_group_leave(v27);
    dispatch_release(v27);
  }
  if (a22 < 0)
    operator delete(__p);
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvEUlbS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}>,void ()(BOOL,xpc::dict)>::target_type()
{
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E791FCC0;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func(xpc_object_t *a1)
{
  *a1 = off_1E791FCC0;
  xpc_release(a1[1]);
  operator delete(a1);
}

_QWORD *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = operator new(0x10uLL);
  v3 = *(void **)(a1 + 8);
  *v2 = off_1E791FCC0;
  v2[1] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v2[1] = xpc_null_create();
  return v2;
}

xpc_object_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  void *v2;
  xpc_object_t result;

  v2 = *(void **)(a1 + 8);
  *a2 = off_1E791FCC0;
  a2[1] = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  a2[1] = result;
  return result;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(_QWORD *)(a1 + 8) = 0;
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::destroy_deallocate(xpc_object_t *a1)
{
  xpc_release(a1[1]);
  operator delete(a1);
}

void std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1)
{
  void *v1;
  void *__p[2];
  uint64_t v3;
  xpc_object_t object;

  v1 = *(void **)(a1 + 8);
  object = v1;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  __p[0] = 0;
  __p[1] = 0;
  v3 = 0;
  TapToRadar::createRadarIfPossible(&object, (uint64_t)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
  xpc_release(object);
}

void sub_1BF6F8DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object)
{
  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZZN10LogTracker30postLogCollectionInternal_syncEN3xpc4dictEENK3$_2clEvENKUlbS1_E_clEbS1_EUlbE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1},std::allocator<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_2::operator() const(void)::{lambda(BOOL,xpc::dict)#1}::operator() const(BOOL,xpc::dict)::{lambda(BOOL)#1}>,void ()(BOOL)>::target_type()
{
}

void dispatch::detail::group_notify<LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const>(dispatch_group_s *,dispatch_queue_s *,LogTracker::postLogCollectionInternal_sync(xpc::dict)::$_1 const &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(char *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  const char **v19;
  const char *v20;
  xpc_object_t v21;
  xpc_object_t v22;
  const char *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  const void *v28;
  size_t v29;
  size_t v30;
  void **p_dst;
  const object *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  CFTypeID v36;
  NSObject *v37;
  std::string::size_type v38;
  std::__shared_weak_count *v39;
  void *v40;
  xpc_object_t object;
  void *aBlock;
  void **__dst;
  size_t v44;
  unint64_t v45;
  std::string cf;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)v4 + 1);
  if (v2)
  {
    v5 = std::__shared_weak_count::lock(v2);
    v6 = v5;
    if (v5 && *(_QWORD *)a1)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
      v9 = xpc_dictionary_create(0, 0, 0);
      if (v9 || (v9 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v9);
          v10 = v9;
        }
        else
        {
          v10 = xpc_null_create();
        }
      }
      else
      {
        v10 = xpc_null_create();
        v9 = 0;
      }
      xpc_release(v9);
      v19 = (const char **)(a1 + 24);
      v20 = a1 + 24;
      if (a1[47] < 0)
        v20 = *v19;
      v21 = xpc_string_create(v20);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB370], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      v23 = a1 + 48;
      if (a1[71] < 0)
        v23 = *(const char **)v23;
      v24 = xpc_string_create(v23);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB930], v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
      v26 = xpc_string_create((const char *)*MEMORY[0x1E0D01A30]);
      if (!v26)
        v26 = xpc_null_create();
      xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB6A0], v26);
      v27 = xpc_null_create();
      xpc_release(v26);
      xpc_release(v27);
      v28 = (const void *)*MEMORY[0x1E0CFBC70];
      v29 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
      if (v29 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v30 = v29;
      if (v29 >= 0x17)
      {
        v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v29 | 7) != 0x17)
          v33 = v29 | 7;
        v34 = v33 + 1;
        p_dst = (void **)operator new(v33 + 1);
        v44 = v30;
        v45 = v34 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v45) = v29;
        p_dst = (void **)&__dst;
        if (!v29)
        {
          LOBYTE(__dst) = 0;
          object = v10;
          if (v10)
          {
LABEL_48:
            xpc_retain(v10);
LABEL_54:
            xpc::bridge((xpc *)&object, v32);
            v35 = (void *)cf.__r_.__value_.__r.__words[0];
            if (cf.__r_.__value_.__r.__words[0]
              && (v36 = CFGetTypeID(cf.__r_.__value_.__l.__data_), v36 == CFDictionaryGetTypeID()))
            {
              aBlock = v35;
              CFRetain(v35);
            }
            else
            {
              aBlock = 0;
            }
            v40 = 0;
            Service::broadcastEvent(v3, (uint64_t)&__dst, (const void **)&aBlock, (const void **)&v40);
            if (v40)
              _Block_release(v40);
            if (aBlock)
              CFRelease(aBlock);
            if (cf.__r_.__value_.__r.__words[0])
              CFRelease(cf.__r_.__value_.__l.__data_);
            xpc_release(object);
            if (SHIBYTE(v45) < 0)
            {
              operator delete(__dst);
              v37 = *(NSObject **)(v3 + 88);
              if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
LABEL_66:
                if ((a1[47] & 0x80000000) == 0)
                {
LABEL_67:
                  *(_OWORD *)&cf.__r_.__value_.__l.__data_ = *(_OWORD *)v19;
                  cf.__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 5);
LABEL_73:
                  LogTracker::houseKeepingLogs_sync(v3, (const char *)&cf);
                  if (SHIBYTE(cf.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(cf.__r_.__value_.__l.__data_);
                  xpc_release(v10);
                  goto LABEL_76;
                }
LABEL_72:
                std::string::__init_copy_ctor_external(&cf, *((const std::string::value_type **)a1 + 3), *((_QWORD *)a1 + 4));
                goto LABEL_73;
              }
            }
            else
            {
              v37 = *(NSObject **)(v3 + 88);
              if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                goto LABEL_66;
            }
            v38 = (std::string::size_type)(a1 + 24);
            if (a1[47] < 0)
              v38 = (std::string::size_type)*v19;
            LODWORD(cf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)cf.__r_.__value_.__r.__words + 4) = v38;
            _os_log_impl(&dword_1BF566000, v37, OS_LOG_TYPE_DEFAULT, "#I TracePostProcessingEnd with timestamp[%s]", (uint8_t *)&cf, 0xCu);
            if ((a1[47] & 0x80000000) == 0)
              goto LABEL_67;
            goto LABEL_72;
          }
LABEL_53:
          object = xpc_null_create();
          goto LABEL_54;
        }
      }
      memmove(p_dst, v28, v30);
      *((_BYTE *)p_dst + v30) = 0;
      object = v10;
      if (v10)
        goto LABEL_48;
      goto LABEL_53;
    }
  }
  else
  {
    v6 = 0;
  }
  v11 = (const void *)*MEMORY[0x1E0CFBC70];
  v12 = strlen((const char *)*MEMORY[0x1E0CFBC70]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = (void **)operator new(v15 + 1);
    v44 = v13;
    v45 = v16 | 0x8000000000000000;
    __dst = v14;
  }
  else
  {
    HIBYTE(v45) = v12;
    v14 = (void **)&__dst;
    if (!v12)
      goto LABEL_21;
  }
  memmove(v14, v11, v13);
LABEL_21:
  *((_BYTE *)v14 + v13) = 0;
  cf.__r_.__value_.__r.__words[0] = 0;
  aBlock = 0;
  Service::broadcastEvent(v3, (uint64_t)&__dst, (const void **)&cf.__r_.__value_.__l.__data_, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf.__r_.__value_.__r.__words[0])
    CFRelease(cf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45) < 0)
    operator delete(__dst);
  if (v6)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_76:
  if ((a1[71] & 0x80000000) == 0)
  {
    if ((a1[47] & 0x80000000) == 0)
      goto LABEL_78;
LABEL_82:
    operator delete(*((void **)a1 + 3));
    v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    if (!v39)
      goto LABEL_80;
    goto LABEL_79;
  }
  operator delete(*((void **)a1 + 6));
  if (a1[47] < 0)
    goto LABEL_82;
LABEL_78:
  v39 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  if (v39)
LABEL_79:
    std::__shared_weak_count::__release_weak(v39);
LABEL_80:
  operator delete(a1);
}

void sub_1BF6F93D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object, CFTypeRef cf, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __cxx_global_var_init_46()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<LogDumpDB>::~PthreadMutexGuardPolicy, &ctu::Singleton<LogDumpDB,LogDumpDB,ctu::PthreadMutexGuardPolicy<LogDumpDB>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t AccessoriesDelegateBase::AccessoriesDelegateBase(uint64_t a1, uint64_t a2, NSObject **a3, char *a4)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = a1 + 8;
  v8 = *a3;
  *(_QWORD *)(v7 + 16) = *a3;
  if (v8)
    dispatch_retain(v8);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", a4);
  *(_QWORD *)a1 = off_1E791FD60;
  v9 = a1 + 48;
  v10 = *(_QWORD *)(a2 + 24);
  if (!v10)
    goto LABEL_6;
  if (v10 != a2)
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v9);
LABEL_6:
    *(_QWORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = 0;
    return a1;
  }
  *(_QWORD *)(a1 + 72) = v9;
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
  *(_BYTE *)(a1 + 80) = 0;
  return a1;
}

void sub_1BF6F96D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6F96EC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  MEMORY[0x1C3B8B74C](a1 + 4);
  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void AccessoriesDelegateBase::~AccessoriesDelegateBase(AccessoriesDelegateBase *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E791FD60;
  v2 = (char *)this + 48;
  v3 = (char *)*((_QWORD *)this + 9);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v5 = *((_QWORD *)this + 4);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 3);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

uint64_t AccessoriesDelegateBase::createError@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, CFIndex a3@<X2>, CFErrorRef *a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::ios_base *v13;
  uint64_t v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const void *v25;
  std::string::size_type v26;
  std::string *p_dst;
  uint64_t v28;
  uint64_t v29;
  const __CFAllocator *v30;
  const void *v31;
  std::string __dst;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *__p[2];
  __int128 v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  const void *v54;
  std::string v55;
  std::string v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v52 = v8;
  v51 = v8;
  v50 = v8;
  v49 = v8;
  v48 = v8;
  v47 = v8;
  v46 = v8;
  v45 = v8;
  v44 = v8;
  *(_OWORD *)__p = v8;
  v41 = v8;
  v38 = v8;
  v39 = v8;
  v36 = v8;
  v37 = v8;
  v9 = MEMORY[0x1E0DE4FE0];
  v10 = MEMORY[0x1E0DE4FE0] + 64;
  v43 = MEMORY[0x1E0DE4FE0] + 64;
  v11 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v35 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v12;
  v13 = (std::ios_base *)((char *)&v35 + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v13, &v36);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  v35 = v9 + 24;
  v43 = v10;
  std::streambuf::basic_streambuf();
  v14 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v36 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v41 = 0u;
  LODWORD(v42) = 16;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"\n", 1);
  v16 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v17 = strlen(v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":\n", 2);
  v20 = *(char *)(a2 + 23);
  if (v20 >= 0)
    v21 = a2;
  else
    v21 = *(_QWORD *)a2;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a2 + 23);
  else
    v22 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
  v34 = 0xAAAAAAAAAAAAAAAALL;
  if ((v42 & 0x10) != 0)
  {
    v24 = *((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1) < (unint64_t)v39)
    {
      *((_QWORD *)&v41 + 1) = v39;
      v24 = v39;
    }
    v25 = (const void *)*((_QWORD *)&v38 + 1);
    v26 = v24 - *((_QWORD *)&v38 + 1);
    if ((unint64_t)(v24 - *((_QWORD *)&v38 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_40;
  }
  else
  {
    if ((v42 & 8) == 0)
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 0;
      v23 = 0;
LABEL_16:
      v55 = __dst;
      goto LABEL_22;
    }
    v25 = (const void *)v37;
    v26 = v38 - v37;
    if ((_QWORD)v38 - (_QWORD)v37 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_40:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    p_dst = (std::string *)operator new(v28 + 1);
    __dst.__r_.__value_.__l.__size_ = v26;
    __dst.__r_.__value_.__r.__words[2] = v29 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_20:
    memmove(p_dst, v25, v26);
    p_dst->__r_.__value_.__s.__data_[v26] = 0;
    v23 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_21;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v26;
  p_dst = &__dst;
  if (v26)
    goto LABEL_20;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  v23 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_16;
LABEL_21:
  std::string::__init_copy_ctor_external(&v55, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
LABEL_22:
  v53 = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v56, v55.__r_.__value_.__l.__data_, v55.__r_.__value_.__l.__size_);
  else
    v56 = v55;
  v54 = 0;
  v30 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (ctu::cf::convert_copy())
    v31 = v54;
  else
    v31 = 0;
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v34 = (unint64_t)v31;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
LABEL_37:
    operator delete(v55.__r_.__value_.__l.__data_);
    if ((v23 & 0x80000000) == 0)
      goto LABEL_31;
    goto LABEL_38;
  }
  operator delete(v56.__r_.__value_.__l.__data_);
  v34 = (unint64_t)v31;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_37;
LABEL_30:
  if ((v23 & 0x80000000) == 0)
    goto LABEL_31;
LABEL_38:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_31:
  v56.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C9AFB0];
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  *a4 = (CFErrorRef)0xAAAAAAAAAAAAAAAALL;
  *a4 = CFErrorCreateWithUserInfoKeysAndValues(v30, (CFErrorDomain)*MEMORY[0x1E0C9AFD0], a3, (const void *const *)&v56.__r_.__value_.__l.__data_, (const void *const *)&v55.__r_.__value_.__l.__data_, 1);
  if (v31)
    CFRelease(v31);
  v35 = *v11;
  *(uint64_t *)((char *)&v35 + *(_QWORD *)(v35 - 24)) = v11[3];
  *(_QWORD *)&v36 = v14 + 16;
  if (SBYTE7(v41) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8C364](&v43);
}

void sub_1BF6F9BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  int v17;
  uint64_t v18;

  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)(v18 - 176));
  if (*(char *)(v18 - 137) < 0)
  {
    operator delete(*(void **)(v18 - 160));
    if ((v17 & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((v17 & 0x80000000) == 0)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a15);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  goto LABEL_6;
}

uint64_t AccessoriesDelegateBase::handleServerCommand()
{
  return 0;
}

void sub_1BF6F9EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1BF6F9EE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BF6FA0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  const void *v8;
  va_list va;
  const void *v10;
  va_list va1;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v8 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v10 = va_arg(va2, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef((const void **)va2);

  _Unwind_Resume(a1);
}

void sub_1BF6FA1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  void *v10;
  void *v11;

  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a9);
  ctu::cf::CFSharedRef<__CFString const>::~CFSharedRef(&a10);

  _Unwind_Resume(a1);
}

void *__copy_helper_atomic_property_(void **a1, const void **a2)
{
  void *result;

  *a1 = _Block_copy(*a2);
  result = _Block_copy(a2[1]);
  a1[1] = result;
  return result;
}

void __assign_helper_atomic_property_(uint64_t a1, const void **a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v4 = _Block_copy(*a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;

  v6 = _Block_copy(a2[1]);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;

}

void sub_1BF6FA324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{

  _Unwind_Resume(a1);
}

const char *CoreAccessoriesDelegate::getName(CoreAccessoriesDelegate *this)
{
  return "CoreAccessories.delegate";
}

uint64_t CoreAccessoriesDelegate::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  v7 = a1[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v28 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v27);
LABEL_6:
  v8 = *a2;
  v24 = v8;
  if (v8)
    dispatch_retain(v8);
  CoreAccessoriesDelegate::CoreAccessoriesDelegate((uint64_t)v6, v27, &v24);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E791FFE0;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v25 = v6;
  v26 = v11;
  if (v8)
    dispatch_release(v8);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_27;
  }
  if (v28)
  {
    v22 = 5;
LABEL_27:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v9, v10);
  }
  result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1BF6FA5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t CoreAccessoriesDelegate::CoreAccessoriesDelegate(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[3];
  _QWORD *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E791FE48;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v13);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v14 = 0;
  }
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", v7);
  *(_QWORD *)a1 = off_1E791FD60;
  v8 = (uint64_t)v14;
  if (!v14)
    goto LABEL_13;
  if (v14 != v13)
  {
    v8 = (*(uint64_t (**)(void))(*v14 + 16))();
LABEL_13:
    *(_QWORD *)(a1 + 72) = v8;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD *))(v13[0] + 24))(v13);
LABEL_15:
  *(_BYTE *)(a1 + 80) = 0;
  if (v6)
    dispatch_release(v6);
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
    goto LABEL_21;
  }
  if (v14)
  {
    v10 = 5;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)a1 = off_1E791FE48;
  v11 = operator new(0x20uLL);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = off_1E7920030;
  v11[3] = 0;
  *(_QWORD *)(a1 + 88) = v11 + 3;
  *(_QWORD *)(a1 + 96) = v11;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  return a1;
}

void sub_1BF6FA864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  NSObject *v13;
  _QWORD *v14;
  _QWORD *v15;

  v15 = v14;
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v15);
  if (v13)
    dispatch_release(v13);
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(a1);
  }
  if (!a13)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(a1);
}

void CoreAccessoriesDelegate::~CoreAccessoriesDelegate(CoreAccessoriesDelegate *this)
{
  void **v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  CoreAccessoriesDelegate *v7;
  uint64_t v8;
  void **v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;

  *(_QWORD *)this = off_1E791FE48;
  v2 = (void **)*((_QWORD *)this + 15);
  if (v2)
  {
    do
    {
      v9 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
    operator delete(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)this = off_1E791FD60;
  v7 = (CoreAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v7 == (CoreAccessoriesDelegate *)((char *)this + 48))
  {
    v8 = 4;
    v7 = (CoreAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v7)
      goto LABEL_17;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_17:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v10 = *((_QWORD *)this + 4);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

{
  void *v1;

  CoreAccessoriesDelegate::~CoreAccessoriesDelegate(this);
  operator delete(v1);
}

void CoreAccessoriesDelegate::init(CoreAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void **v17;
  void *v18;
  void *v19;
  AccessoryDetection *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, const void **);
  void *v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD aBlock[6];
  std::__shared_weak_count *v33;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[2];
  if (!v2 || (v3 = v1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_56_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0_e160_v40__0_CFSharedRef_const___CFString______CFString__8_CFSharedRef_const___CFString______CFString__16i24i28_CFSharedRef_const___CFDictionary______CFDictionary__32l;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  aBlock[4] = v1;
  aBlock[5] = v3;
  v33 = v5;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = _Block_copy(aBlock);
  std::__shared_weak_count::__release_weak(v5);
  v25 = v10;
  v26 = 3321888768;
  v27 = ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_110;
  v28 = &__block_descriptor_56_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1_e52_v16__0_CFSharedRef_const___CFString______CFString__8l;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v29 = v1;
  v30 = v3;
  v31 = v5;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  v16 = _Block_copy(&v25);
  std::__shared_weak_count::__release_weak(v5);
  v17 = (void **)v1[11];
  v18 = _Block_copy(v13);
  v19 = _Block_copy(v16);
  v20 = [AccessoryDetection alloc];
  v21 = _Block_copy(v18);
  v22 = _Block_copy(v19);
  if (v20)
  {
    v23 = -[AccessoryDetection initWithCallback:](v20, "initWithCallback:", v21, v22, v25, v26, v27, v28, v29, v30);
  }
  else
  {

    v23 = 0;
  }
  v24 = *v17;
  *v17 = (void *)v23;

  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  if (v33)
    std::__shared_weak_count::__release_weak(v33);

  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF6FAC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v28;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    v28 = a22;
    if (!a22)
    {
LABEL_3:

      std::__shared_weak_count::__release_weak(v22);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    v28 = a22;
    if (!a22)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v28);

  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(a1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_2(_QWORD *a1, const void **a2, const void **a3, int a4, int a5, const void **a6)
{
  std::__shared_weak_count *v7;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD v21[5];
  CFTypeRef v22;
  CFTypeRef v23;
  CFTypeRef cf;
  int v25;
  int v26;

  v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
  {
    v13 = a1[4];
    v14 = std::__shared_weak_count::lock(v7);
    if (v14)
    {
      v15 = v14;
      if (a1[5])
      {
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3321888768;
        v21[2] = ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefIK10__CFStringEES6_27ACCEndpoint_TransportType_t20ACCConnection_Type_tNS3_IK14__CFDictionaryEE_block_invoke;
        v21[3] = &__block_descriptor_72_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_e5_v8__0l;
        v16 = *a2;
        v21[4] = v13;
        v22 = v16;
        if (v16)
          CFRetain(v16);
        v17 = *a3;
        v23 = v17;
        if (v17)
          CFRetain(v17);
        v18 = *a6;
        cf = v18;
        if (v18)
          CFRetain(v18);
        v25 = a4;
        v26 = a5;
        ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)v21);
        if (cf)
          CFRelease(cf);
        if (v23)
          CFRelease(v23);
        if (v22)
          CFRelease(v22);
      }
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__0(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN23CoreAccessoriesDelegate4initEv_block_invoke_110(_QWORD *a1, const void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  const void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[5];
  CFTypeRef cf;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v11[0] = MEMORY[0x1E0C809B0];
        v11[1] = 3321888768;
        v11[2] = ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__1clEN3ctu2cf11CFSharedRefIK10__CFStringEE_block_invoke;
        v11[3] = &__block_descriptor_48_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE_e5_v8__0l;
        v8 = *a2;
        v11[4] = v5;
        cf = v8;
        if (v8)
          CFRetain(v8);
        ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)(v5 + 8), (uint64_t)v11);
        if (cf)
          CFRelease(cf);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t __copy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_32c49_ZTSKZZN23CoreAccessoriesDelegate4initEvEUb_E3__1(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void CoreAccessoriesDelegate::start(CoreAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint8_t v5[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Already started", v5, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 1;
    objc_msgSend(**(id **)(v1 + 88), "start");
  }
}

void CoreAccessoriesDelegate::stop(CoreAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 3221225472;
  v1[2] = ___ZN23CoreAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_40_e5_v8__0l;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN23CoreAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  void **v5;
  uint64_t v6;
  uint64_t i;
  void **v8;
  __int16 v9[8];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 0;
    objc_msgSend(**(id **)(v1 + 88), "stop");
    if (*(_QWORD *)(v1 + 128))
    {
      v5 = *(void ***)(v1 + 120);
      if (v5)
      {
        do
        {
          v8 = (void **)*v5;
          if (*((char *)v5 + 39) < 0)
            operator delete(v5[2]);
          operator delete(v5);
          v5 = v8;
        }
        while (v8);
      }
      *(_QWORD *)(v1 + 120) = 0;
      v6 = *(_QWORD *)(v1 + 112);
      if (v6)
      {
        for (i = 0; i != v6; ++i)
          *(_QWORD *)(*(_QWORD *)(v1 + 104) + 8 * i) = 0;
      }
      *(_QWORD *)(v1 + 128) = 0;
    }
  }
  else if (v4)
  {
    v9[0] = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", (uint8_t *)v9, 2u);
  }
}

void ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefIK10__CFStringEES6_27ACCEndpoint_TransportType_t20ACCConnection_Type_tNS3_IK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  const void *v2;
  _QWORD *v3;
  uint64_t (*v4)(uint64_t);
  std::string::size_type v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  std::string::size_type v10;
  uint64_t v11;
  const char *v12;
  uint64_t (*v13)(uint64_t);
  std::string::size_type v14;
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t);
  char *v17;
  __int16 v18;
  __int16 v19;
  const __CFNumber *v20;
  __int16 v21;
  __int16 v22;
  CFTypeRef v23;
  _WORD *v24;
  uint64_t v25;
  int v26;
  const void *v27;
  const void *v28;
  const __CFString *v29;
  const __CFString *v30;
  CFTypeID v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const __CFNumber *v35;
  CFTypeID v36;
  char v37;
  std::string::size_type v38;
  const void *v39;
  const __CFNumber *Value;
  CFTypeID v41;
  const void *v42;
  __int16 v43;
  __int16 v44;
  char v45;
  std::string *v46;
  std::string::size_type size;
  std::string *v48;
  std::string::value_type *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t *v52;
  void *v53;
  void *v54;
  _WORD *v55;
  CFTypeRef cf;
  std::string v57;
  std::string v58;
  char *v59;
  __int128 v60;
  void *v61;
  __int128 v62;
  void *v63;
  __int128 v64;
  const void *v65;
  void *v66;
  __int128 v67;
  const void *v68;
  void *__p;
  __int128 v70;
  char *v71;
  __int128 v72;
  void *v73[3];
  CFTypeRef v74;
  std::string buf;
  const char *v76;
  __int16 v77;
  uint64_t v78;
  uint64_t v79;

  v2 = 0;
  v79 = *MEMORY[0x1E0C80C00];
  v74 = 0;
  v3 = *(_QWORD **)(a1 + 32);
  if (*(_QWORD *)(a1 + 40))
    v4 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  else
    v4 = 0;
  if (v4
    || (HIBYTE(v73[2]) = 21,
        strcpy((char *)v73, "Invalid endpoint UUID"),
        (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, v73, 5),
        v2 = (const void *)buf.__r_.__value_.__r.__words[0],
        v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0],
        buf.__r_.__value_.__r.__words[0] = 0,
        (SHIBYTE(v73[2]) & 0x80000000) == 0))
  {
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
      v6 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
    else
      v6 = 0;
    if (v6)
      goto LABEL_10;
LABEL_21:
    v71 = (char *)operator new(0x19uLL);
    v72 = xmmword_1BF73D650;
    strcpy(v71, "Invalid connection UUID");
    (*(void (**)(std::string *__return_ptr, _QWORD *, char **, uint64_t))(*v3 + 48))(&buf, v3, &v71, 5);
    v14 = buf.__r_.__value_.__r.__words[0];
    v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v72) < 0)
    {
      operator delete(v71);
      if (*(_QWORD *)(a1 + 56))
        v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      else
        v16 = 0;
      if (v16)
        goto LABEL_41;
    }
    else
    {
      if (*(_QWORD *)(a1 + 56))
        v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      else
        v15 = 0;
      if (v15)
        goto LABEL_41;
    }
    v2 = (const void *)v14;
    goto LABEL_35;
  }
  operator delete(v73[0]);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
    v13 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_21;
LABEL_10:
  v7 = *(_QWORD *)(a1 + 56);
  v8 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v7)
    v8 = 0;
  if (!v8)
  {
LABEL_35:
    __p = operator new(0x20uLL);
    v70 = xmmword_1BF743000;
    strcpy((char *)__p, "Invalid connection properties");
    (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, &__p, 5);
    v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v70) & 0x80000000) == 0)
      goto LABEL_41;
    v17 = (char *)__p;
    goto LABEL_40;
  }
  if (!v4)
    goto LABEL_41;
  v9 = v3[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD *)(a1 + 40);
    v11 = *(unsigned int *)(a1 + 64);
    if (v11 > 0xD)
      v12 = "Unknown";
    else
      v12 = transportTypeToString(ACCEndpoint_TransportType_t)::transportTypes[v11];
    LODWORD(buf.__r_.__value_.__l.__data_) = 138413058;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v5;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v76 = v12;
    v77 = 2112;
    v78 = v7;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Accessory attached:\n    endpoint UUID:      %@\n    connection UUID:    %@\n    transport:         %s\n    properties:        \n%@", (uint8_t *)&buf, 0x2Au);
  }
  v26 = *(_DWORD *)(a1 + 64);
  if (v26 == 13)
  {
    v33 = *(const void **)(a1 + 56);
    v65 = v33;
    if (v33)
    {
      CFRetain(v33);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v39 = (const void *)*MEMORY[0x1E0D153F8];
        if (CFDictionaryContainsKey((CFDictionaryRef)v33, (const void *)*MEMORY[0x1E0D153F8]))
        {
          Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v33, v39);
          v20 = Value;
          if (!Value)
          {
            v42 = v33;
            v18 = 0;
            v19 = 0;
            goto LABEL_102;
          }
          v41 = CFGetTypeID(Value);
          if (v41 == CFNumberGetTypeID() && CFNumberGetValue(v20, kCFNumberIntType, &buf))
          {
            v42 = v33;
            v18 = 0;
            v22 = -1;
            v43 = 2056;
            v44 = 3;
            v19 = 0;
            LOWORD(v20) = 0;
            v21 = 0;
            v45 = 0;
            switch(buf.__r_.__value_.__s.__data_[0])
            {
              case 0x39:
              case 0x93:
                v44 = 0;
                v18 = 3;
                v43 = 2055;
                goto LABEL_166;
              case 0x3A:
              case 0x3B:
              case 0x3C:
              case 0x3D:
              case 0x3E:
              case 0x3F:
              case 0x40:
              case 0x41:
              case 0x46:
              case 0x47:
              case 0x48:
              case 0x49:
              case 0x4A:
              case 0x4B:
              case 0x4F:
              case 0x50:
              case 0x51:
              case 0x52:
              case 0x59:
              case 0x5A:
              case 0x5B:
              case 0x5C:
              case 0x5D:
              case 0x5E:
              case 0x5F:
              case 0x60:
              case 0x61:
              case 0x62:
              case 0x63:
              case 0x64:
              case 0x65:
              case 0x66:
              case 0x67:
              case 0x68:
              case 0x69:
              case 0x6A:
              case 0x6B:
              case 0x6C:
              case 0x6D:
              case 0x6E:
              case 0x6F:
              case 0x70:
              case 0x71:
              case 0x73:
              case 0x74:
              case 0x75:
              case 0x76:
              case 0x77:
              case 0x78:
              case 0x79:
              case 0x7A:
              case 0x7B:
              case 0x7C:
              case 0x7D:
              case 0x7E:
              case 0x7F:
              case 0x82:
              case 0x83:
              case 0x84:
              case 0x86:
              case 0x87:
              case 0x89:
              case 0x8A:
              case 0x8B:
              case 0x8C:
              case 0x8D:
              case 0x8E:
              case 0x8F:
              case 0x90:
              case 0x91:
              case 0x92:
                break;
              case 0x42:
                v44 = 0;
                v18 = 3;
                v43 = 2053;
                goto LABEL_166;
              case 0x43:
              case 0x44:
              case 0x45:
              case 0x85:
                v18 = 0;
                v43 = 2050;
                goto LABEL_166;
              case 0x4C:
              case 0x4D:
              case 0x4E:
                v18 = 0;
                v43 = 2049;
                goto LABEL_165;
              case 0x53:
              case 0x54:
              case 0x55:
              case 0x81:
                v18 = 0;
                v43 = 2048;
                v44 = 2;
                goto LABEL_166;
              case 0x56:
                v18 = 0;
                v43 = 2051;
                goto LABEL_165;
              case 0x57:
                v18 = 0;
                v43 = 2052;
LABEL_165:
                v44 = 1;
                goto LABEL_166;
              case 0x58:
                v18 = 0;
                v43 = 2052;
                v44 = 4;
                goto LABEL_166;
              case 0x72:
                goto LABEL_166;
              case 0x80:
                v18 = 0;
                v43 = 2057;
                v44 = 4;
                goto LABEL_166;
              case 0x88:
                v44 = 0;
                v18 = 3;
                v43 = 2054;
LABEL_166:
                LOWORD(v20) = v18;
                v45 = 1;
                v21 = 2;
                v19 = 3;
                v18 = v44;
                v22 = v43;
                break;
              default:
                v19 = 0;
                LOWORD(v20) = 0;
                v21 = 0;
                v45 = 0;
                break;
            }
LABEL_103:
            if (v42)
              CFRelease(v42);
            if ((v45 & 1) == 0)
            {
              v63 = operator new(0x28uLL);
              v64 = xmmword_1BF742FE0;
              strcpy((char *)v63, "Error parsing NFC Accessory properties");
              (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v63, 5);
              v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
              buf.__r_.__value_.__r.__words[0] = 0;
              if (v2)
              {
                CFRelease(v2);
                if (buf.__r_.__value_.__r.__words[0])
                  CFRelease(buf.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v64) < 0)
                operator delete(v63);
              goto LABEL_42;
            }
            goto LABEL_118;
          }
        }
      }
    }
    else
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
    }
    v42 = v33;
    v18 = 0;
    v19 = 0;
    LOWORD(v20) = 0;
LABEL_102:
    v21 = 0;
    v45 = 0;
    v22 = -1;
    goto LABEL_103;
  }
  if (v26 != 7)
  {
    if (v26 == 5)
    {
      v27 = *(const void **)(a1 + 56);
      v68 = v27;
      if (!v27
        || (CFRetain(v27),
            !ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get))
      {
        v19 = 0;
        LOWORD(v20) = 0;
        v21 = 0;
        v37 = 0;
        v22 = -1;
        if (!v27)
          goto LABEL_116;
        goto LABEL_115;
      }
      v28 = (const void *)*MEMORY[0x1E0D153D8];
      if (CFDictionaryContainsKey((CFDictionaryRef)v27, (const void *)*MEMORY[0x1E0D153D8])
        && (v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v27, v28), (v30 = v29) != 0)
        && (v31 = CFGetTypeID(v29), v31 == CFStringGetTypeID()))
      {
        if (CFStringCompare(v30, CFSTR("A1749"), 0) == kCFCompareEqualTo)
        {
          LOWORD(v20) = 0;
          v19 = 1;
          v22 = 1;
          goto LABEL_156;
        }
        if (CFStringCompare(v30, CFSTR("A1605"), 0) == kCFCompareEqualTo
          || CFStringCompare(v30, CFSTR("A1717"), 0) == kCFCompareEqualTo)
        {
          LOWORD(v20) = 0;
          v22 = 5;
          goto LABEL_155;
        }
        if (CFStringCompare(v30, CFSTR("A1748"), 0) == kCFCompareEqualTo)
        {
          LOWORD(v20) = 0;
          v22 = 2;
          goto LABEL_155;
        }
        v19 = -1;
      }
      else
      {
        v19 = 0;
      }
      v34 = (const void *)*MEMORY[0x1E0D153E8];
      if (CFDictionaryContainsKey((CFDictionaryRef)v27, (const void *)*MEMORY[0x1E0D153E8]))
      {
        v35 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v27, v34);
        v20 = v35;
        if (!v35)
        {
LABEL_114:
          v21 = 0;
          v37 = 0;
          v22 = -1;
          goto LABEL_115;
        }
        v36 = CFGetTypeID(v35);
        if (v36 == CFStringGetTypeID())
        {
          if (CFStringCompare((CFStringRef)v20, CFSTR("B292"), 0))
          {
            if (CFStringCompare((CFStringRef)v20, CFSTR("A2308"), 0)
              && CFStringCompare((CFStringRef)v20, CFSTR("A2309"), 0))
            {
              LOWORD(v20) = 0;
              v21 = 0;
              v37 = 0;
              v19 = -1;
              v22 = -1;
LABEL_115:
              CFRelease(v27);
LABEL_116:
              if ((v37 & 1) == 0)
              {
                v66 = operator new(0x30uLL);
                v67 = xmmword_1BF743010;
                strcpy((char *)v66, "Error parsing Generic Accessory properties");
                (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v66, 5);
                v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
                buf.__r_.__value_.__r.__words[0] = 0;
                if (v2)
                {
                  CFRelease(v2);
                  if (buf.__r_.__value_.__r.__words[0])
                    CFRelease(buf.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v67) < 0)
                  operator delete(v66);
                v18 = 0;
                goto LABEL_42;
              }
              v18 = 0;
              goto LABEL_118;
            }
            LOWORD(v20) = 0;
            v22 = 12;
            v19 = 4;
LABEL_156:
            v37 = 1;
            v21 = 2;
            goto LABEL_115;
          }
          LOWORD(v20) = 2;
          v22 = 4;
LABEL_155:
          v19 = 1;
          goto LABEL_156;
        }
      }
      LOWORD(v20) = 0;
      goto LABEL_114;
    }
    v59 = (char *)operator new(0x28uLL);
    v60 = xmmword_1BF744410;
    strcpy(v59, "Unsupported accessory transport type");
    (*(void (**)(std::string *__return_ptr, _QWORD *, char **, uint64_t))(*v3 + 48))(&buf, v3, &v59, 5);
    v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60) < 0)
    {
      v17 = v59;
LABEL_40:
      operator delete(v17);
    }
LABEL_41:
    v18 = 0;
    v19 = 0;
    LOWORD(v20) = 0;
    v21 = 0;
    v22 = -1;
    goto LABEL_42;
  }
  if (*(_DWORD *)(a1 + 68) == 3)
  {
    v32 = *(const void **)(a1 + 56);
    if (v32)
    {
      CFRetain(*(CFTypeRef *)(a1 + 56));
      CFRelease(v32);
    }
    v18 = 0;
    LOWORD(v20) = 0;
    v21 = 2;
    v22 = 12;
    v19 = 4;
  }
  else
  {
    v61 = operator new(0x28uLL);
    v62 = xmmword_1BF742FF0;
    strcpy((char *)v61, "Unsupported AID Bus connection type");
    (*(void (**)(std::string *__return_ptr, _QWORD *, void **, uint64_t))(*v3 + 48))(&buf, v3, &v61, 5);
    v38 = buf.__r_.__value_.__r.__words[0];
    v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    if (v2)
    {
      CFRelease(v2);
      if (buf.__r_.__value_.__r.__words[0])
        CFRelease(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62) < 0)
      operator delete(v61);
    v18 = 0;
    v19 = 0;
    LOWORD(v20) = 0;
    v21 = 0;
    v22 = -1;
    v2 = (const void *)v38;
  }
LABEL_118:
  memset(&buf, 0, sizeof(buf));
  ctu::cf::assign();
  v58 = buf;
  if (!std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v3 + 13, (uint64_t)&v58))
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v58;
    v52 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v3 + 13), (uint64_t)&v58, (__int128 **)&buf);
    *((_WORD *)v52 + 20) = v22;
    *((_WORD *)v52 + 21) = v21;
    *((_WORD *)v52 + 22) = 0;
    *((_WORD *)v52 + 23) = (_WORD)v20;
    *((_WORD *)v52 + 24) = v18;
    *((_WORD *)v52 + 25) = v19;
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_144;
  }
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 21;
  strcpy((char *)&buf, "Duplicate accessory: ");
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = &v58;
  else
    v46 = (std::string *)v58.__r_.__value_.__r.__words[0];
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  else
    size = v58.__r_.__value_.__l.__size_;
  v48 = std::string::append(&buf, (const std::string::value_type *)v46, size);
  v49 = (std::string::value_type *)v48->__r_.__value_.__r.__words[0];
  v50 = v48->__r_.__value_.__l.__size_;
  v51 = v48->__r_.__value_.__r.__words[2];
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if ((v51 & 0x8000000000000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v57, v49, v50);
  }
  else
  {
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    v57.__r_.__value_.__l.__size_ = v50;
    v57.__r_.__value_.__r.__words[2] = v51;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *, std::string *, uint64_t))(*v3 + 48))(&buf, v3, &v57, 5);
  v74 = (CFTypeRef)buf.__r_.__value_.__r.__words[0];
  buf.__r_.__value_.__r.__words[0] = 0;
  if (v2)
  {
    CFRelease(v2);
    if (buf.__r_.__value_.__r.__words[0])
      CFRelease(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v51 & 0x8000000000000000) == 0)
    {
LABEL_143:
      if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_42;
      goto LABEL_144;
    }
  }
  else if ((v51 & 0x8000000000000000) == 0)
  {
    goto LABEL_143;
  }
  operator delete(v49);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
LABEL_144:
    operator delete(v58.__r_.__value_.__l.__data_);
LABEL_42:
  v23 = v74;
  if (v3[9])
  {
    cf = v74;
    if (v74)
      CFRetain(v74);
    v24 = operator new(0xCuLL);
    v54 = v24 + 6;
    v55 = v24 + 6;
    *v24 = v22;
    v24[1] = v21;
    v24[2] = 0;
    v24[3] = (_WORD)v20;
    v24[4] = v18;
    v24[5] = v19;
    v53 = v24;
    v25 = v3[9];
    if (!v25)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v25 + 48))(v25, &cf, &v53);
    if (v53)
    {
      v54 = v53;
      operator delete(v53);
    }
    if (cf)
      CFRelease(cf);
  }
  if (v23)
    CFRelease(v23);
}

void sub_1BF6FBDF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

CFTypeRef __copy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  const void *v5;
  CFTypeRef result;

  v4 = (const void *)a2[5];
  a1[5] = v4;
  if (v4)
    CFRetain(v4);
  v5 = (const void *)a2[6];
  a1[6] = v5;
  if (v5)
    CFRetain(v5);
  result = (CFTypeRef)a2[7];
  a1[7] = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE48c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE56c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[7];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[6];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, __int128 **a3)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  std::string *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  void *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  size_t v42;
  size_t v43;
  size_t v44;
  _QWORD *i;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  _QWORD v58[2];
  unint64_t v59;

  v4 = (_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v58, (uint64_t *)a2, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= v10)
        v12 = v8 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v4[23];
        if (v15 >= 0)
          v16 = v4[23];
        else
          v16 = *((_QWORD *)v4 + 1);
        if (v15 < 0)
          v4 = *(_BYTE **)v4;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v9)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v4, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v4[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v9)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v4, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v4[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v59 = 0xAAAAAAAAAAAAAA00;
  v26 = (char *)operator new(0x38uLL);
  v58[0] = v26;
  v58[1] = a1 + 16;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v9;
  v27 = (std::string *)(v26 + 16);
  v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
  }
  *((_WORD *)v26 + 20) = -1;
  *(_QWORD *)(v26 + 42) = 0;
  *((_WORD *)v26 + 25) = 0;
  LOBYTE(v59) = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v10 || (float)(v31 * (float)v10) < v30)
  {
    v34 = 1;
    if (v10 >= 3)
      v34 = (v10 & (v10 - 1)) != 0;
    v35 = v34 | (2 * v10);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (prime > v10)
    {
LABEL_68:
      if (prime >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v38 = operator new(8 * prime);
      v39 = *(void **)a1;
      *(_QWORD *)a1 = v38;
      if (v39)
        operator delete(v39);
      v40 = 0;
      *(_QWORD *)(a1 + 8) = prime;
      do
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v40++) = 0;
      while (prime != v40);
      v41 = (_QWORD *)*v25;
      if (!*v25)
        goto LABEL_100;
      v42 = v41[1];
      v43 = prime - 1;
      if ((prime & (prime - 1)) == 0)
      {
        v44 = v42 & v43;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v25;
        for (i = (_QWORD *)*v41; *v41; i = (_QWORD *)*v41)
        {
          v46 = i[1] & v43;
          if (v46 == v44)
          {
            v41 = i;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v46))
          {
            *v41 = *i;
            v47 = 8 * v46;
            *i = **(_QWORD **)(*(_QWORD *)a1 + v47);
            **(_QWORD **)(*(_QWORD *)a1 + v47) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v46) = v41;
            v41 = i;
            v44 = v46;
          }
        }
        goto LABEL_100;
      }
      if (v42 >= prime)
        v42 %= prime;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v25;
      v51 = (_QWORD *)*v41;
      if (!*v41)
      {
LABEL_100:
        v10 = prime;
        v54 = prime - 1;
        if ((prime & (prime - 1)) != 0)
          goto LABEL_101;
        goto LABEL_116;
      }
      while (1)
      {
        v53 = v51[1];
        if (v53 >= prime)
          v53 %= prime;
        if (v53 == v42)
          goto LABEL_94;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v53))
        {
          *v41 = *v51;
          v52 = 8 * v53;
          *v51 = **(_QWORD **)(*(_QWORD *)a1 + v52);
          **(_QWORD **)(*(_QWORD *)a1 + v52) = v51;
          v51 = v41;
LABEL_94:
          v41 = v51;
          v51 = (_QWORD *)*v51;
          if (!v51)
            goto LABEL_100;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v53) = v41;
          v41 = v51;
          v51 = (_QWORD *)*v51;
          v42 = v53;
          if (!v51)
            goto LABEL_100;
        }
      }
    }
    if (prime < v10)
    {
      v48 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (prime <= v48)
        prime = v48;
      if (prime < v10)
      {
        if (!prime)
        {
          v55 = *(void **)a1;
          *(_QWORD *)a1 = 0;
          if (v55)
            operator delete(v55);
          v10 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v54 = -1;
          goto LABEL_116;
        }
        goto LABEL_68;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v54 = v10 - 1;
    if ((v10 & (v10 - 1)) != 0)
    {
LABEL_101:
      if (v9 >= v10)
      {
        v12 = v9 % v10;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v12 = v9;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v9);
        v33 = (_QWORD *)v58[0];
        if (v32)
          goto LABEL_57;
      }
LABEL_117:
      *v33 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v58[0];
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v25;
      if (*(_QWORD *)v58[0])
      {
        v56 = *(_QWORD *)(*(_QWORD *)v58[0] + 8);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v56 >= v10)
            v56 %= v10;
        }
        else
        {
          v56 &= v10 - 1;
        }
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v56) = v58[0];
      }
      goto LABEL_123;
    }
LABEL_116:
    v12 = v54 & v9;
    v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v54 & v9));
    v33 = (_QWORD *)v58[0];
    if (v32)
      goto LABEL_57;
    goto LABEL_117;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  v33 = (_QWORD *)v58[0];
  if (!v32)
    goto LABEL_117;
LABEL_57:
  *v33 = *v32;
  *v32 = v58[0];
LABEL_123:
  v14 = (uint64_t *)v58[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1BF6FC8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BF6FC8DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZZZN23CoreAccessoriesDelegate4initEvEUb_ENK3__1clEN3ctu2cf11CFSharedRefIK10__CFStringEE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  _QWORD *v5;
  uint64_t *v6;
  __int16 v7;
  uint64_t *v8;
  uint64_t *v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  const void *v13;
  __int16 v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char *v26;
  CFTypeRef cf;
  void *__p;
  __int128 v29;
  void *v30[2];
  uint64_t v31;
  void *v32[2];
  char v33;
  CFTypeRef v34;
  uint8_t buf[16];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v1 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::get;
  if (!v2)
    v3 = 0;
  if (v3)
  {
    v4 = v1[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Accessory detached:\n    UUID:          %@\n", buf, 0xCu);
    }
    memset(buf, 0, sizeof(buf));
    v36 = 0;
    ctu::cf::assign();
    *(_OWORD *)v30 = *(_OWORD *)buf;
    v31 = v36;
    v5 = v1 + 13;
    if (std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v1 + 13, (uint64_t)v30))
    {
      *(_QWORD *)buf = v30;
      v6 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v1 + 13), (uint64_t)v30, (__int128 **)buf);
      v7 = *((_WORD *)v6 + 20);
      v23 = *(uint64_t *)((char *)v6 + 44);
      v8 = std::__hash_table<std::__hash_value_type<std::string,abm::AccessoryInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,abm::AccessoryInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,abm::AccessoryInfo>>>::find<std::string>(v1 + 13, (uint64_t)v30);
      if (v8)
      {
        v9 = v8;
        v10 = (int8x8_t)v1[14];
        v11 = v8[1];
        v12 = (uint8x8_t)vcnt_s8(v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          if (v11 >= *(_QWORD *)&v10)
            v11 %= *(_QWORD *)&v10;
        }
        else
        {
          v11 &= *(_QWORD *)&v10 - 1;
        }
        v15 = *(uint64_t **)(*v5 + 8 * v11);
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15 != v8);
        if (v16 == v1 + 15)
          goto LABEL_33;
        v17 = v16[1];
        if (v12.u32[0] > 1uLL)
        {
          if (v17 >= *(_QWORD *)&v10)
            v17 %= *(_QWORD *)&v10;
        }
        else
        {
          v17 &= *(_QWORD *)&v10 - 1;
        }
        if (v17 != v11)
        {
LABEL_33:
          if (!*v8)
            goto LABEL_34;
          v18 = *(_QWORD *)(*v8 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v18 >= *(_QWORD *)&v10)
              v18 %= *(_QWORD *)&v10;
          }
          else
          {
            v18 &= *(_QWORD *)&v10 - 1;
          }
          if (v18 != v11)
LABEL_34:
            *(_QWORD *)(*v5 + 8 * v11) = 0;
        }
        v19 = *v8;
        if (*v8)
        {
          v20 = *(_QWORD *)(v19 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v20 >= *(_QWORD *)&v10)
              v20 %= *(_QWORD *)&v10;
          }
          else
          {
            v20 &= *(_QWORD *)&v10 - 1;
          }
          if (v20 != v11)
          {
            *(_QWORD *)(*v5 + 8 * v20) = v16;
            v19 = *v8;
          }
        }
        *v16 = v19;
        *v8 = 0;
        --v1[16];
        if (*((char *)v8 + 39) < 0)
          operator delete((void *)v8[2]);
        operator delete(v9);
      }
      v13 = 0;
      v14 = 1;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
        goto LABEL_46;
    }
    else
    {
      __p = operator new(0x40uLL);
      v29 = xmmword_1BF744A70;
      strcpy((char *)__p, "Invalid UUID, could not find in cached accessory dictionary");
      (*(void (**)(uint8_t *__return_ptr, _QWORD *, void **, uint64_t))(*v1 + 48))(buf, v1, &__p, 5);
      v13 = *(const void **)buf;
      v34 = *(CFTypeRef *)buf;
      *(_QWORD *)buf = 0;
      if (SHIBYTE(v29) < 0)
        operator delete(__p);
      v14 = 0;
      v23 = 0;
      v7 = -1;
      if ((SHIBYTE(v31) & 0x80000000) == 0)
      {
LABEL_46:
        if (!v1[9])
          goto LABEL_54;
        goto LABEL_47;
      }
    }
    operator delete(v30[0]);
    if (!v1[9])
      goto LABEL_54;
    goto LABEL_47;
  }
  v33 = 12;
  strcpy((char *)v32, "Invalid UUID");
  (*(void (**)(uint8_t *__return_ptr, _QWORD *, void **, uint64_t))(*v1 + 48))(buf, v1, v32, 5);
  v13 = *(const void **)buf;
  v34 = *(CFTypeRef *)buf;
  *(_QWORD *)buf = 0;
  if (v33 < 0)
    operator delete(v32[0]);
  v14 = 0;
  v23 = 0;
  v7 = -1;
  if (v1[9])
  {
LABEL_47:
    cf = v13;
    if (v13)
      CFRetain(v13);
    v21 = (char *)operator new(0xCuLL);
    v25 = v21 + 12;
    v26 = v21 + 12;
    *(_WORD *)v21 = v7;
    *((_WORD *)v21 + 1) = v14;
    *(_QWORD *)(v21 + 4) = v23;
    v24 = v21;
    v22 = v1[9];
    if (!v22)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v22 + 48))(v22, &cf, &v24);
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
    if (cf)
      CFRelease(cf);
  }
LABEL_54:
  if (v34)
    CFRelease(v34);
}

void sub_1BF6FCD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef((const void **)(v27 - 72));
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSN3ctu2cf11CFSharedRefIK10__CFStringEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate*)#1}::operator() const(CoreAccessoriesDelegate*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CoreAccessoriesDelegate *,std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate *)#1},std::allocator<CoreAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateE"
                     "ENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessori"
                                "esDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI23CoreAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<CoreAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<CoreAccessoriesDelegate>(CoreAccessoriesDelegate*)::{lambda(CoreAccessoriesDelegate*)#1}::operator() const(CoreAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7920030;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7920030;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<AccessoryDetectionManager>::__on_zero_shared(uint64_t a1)
{

}

void ServerClientState::ServerClientState(ServerClientState *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

void ***ServerClientState::setCheckedIn(void ***result, void **a2)
{
  void **v2;
  __int128 v3;
  size_t v4;
  size_t v5;

  v2 = *result;
  if (*result == a2)
    goto LABEL_5;
  if (*((char *)v2 + 23) < 0)
  {
    v4 = (size_t)a2[1];
    if (*((char *)a2 + 23) >= 0)
    {
      v5 = *((unsigned __int8 *)a2 + 23);
    }
    else
    {
      a2 = (void **)*a2;
      v5 = v4;
    }
    result = (void ***)std::string::__assign_no_alias<false>(*result, a2, v5);
    *((_BYTE *)v2 + 24) = 1;
  }
  else
  {
    if ((*((_BYTE *)a2 + 23) & 0x80) == 0)
    {
      v3 = *(_OWORD *)a2;
      v2[2] = a2[2];
      *(_OWORD *)v2 = v3;
LABEL_5:
      *((_BYTE *)v2 + 24) = 1;
      return result;
    }
    result = (void ***)std::string::__assign_no_alias<true>(*result, *a2, (size_t)a2[1]);
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

BOOL ServerClientState::isNotificationRegistered_sync(uint64_t *a1, const void **a2)
{
  uint64_t v2;

  v2 = *a1;
  return v2 + 40 != (_QWORD)std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(*a1 + 32, a2);
}

void ServerClientState::getName(ServerClientState *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;

  v2 = *(__int128 **)this;
  if (*(char *)(*(_QWORD *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void ServerClientState::State::registerNotificationApplier(ServerClientState::State *this, uint64_t **a2, void *a3)
{
  void *__p[2];
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v6 = 0uLL;
  v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = 0uLL;
  v5 = 0;
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a2 + 4, (const void **)__p, (uint64_t)__p);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_1BF6FD090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServerClientState::State::unregisterNotificationApplier(ServerClientState::State *this, _QWORD *a2, void *a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t *v11;
  void *__p[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v14 = 0uLL;
  v15 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = 0uLL;
  v13 = 0;
  v4 = (uint64_t **)(a2 + 4);
  v5 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)(a2 + 4), (const void **)__p);
  v6 = v5;
  if (a2 + 5 != v5)
  {
    v7 = (uint64_t *)v5[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      v9 = v5;
      do
      {
        v8 = (uint64_t *)v9[2];
        v10 = *v8 == (_QWORD)v9;
        v9 = v8;
      }
      while (!v10);
    }
    if (*v4 == v5)
      *v4 = v8;
    v11 = (uint64_t *)a2[5];
    --a2[6];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v11, v6);
    if (*((char *)v6 + 55) < 0)
      operator delete((void *)v6[4]);
    operator delete(v6);
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_1BF6FD1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF744D14)
    return a1 + 24;
  if (((v3 & 0x80000001BF744D14 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF744D14))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF744D14 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

const char *ABMGetProjectVersion(void)
{
  return "AppleBasebandManager-AppleBasebandServices_Manager-1180";
}

void sub_1BF6FD528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1BF6FD70C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if ((a21 & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1BF6FD740(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF6FD6A0);
}

void sub_1BF6FD74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    JUMPOUT(0x1BF6FD720);
  JUMPOUT(0x1BF6FD718);
}

void sub_1BF6FDEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  void **v57;

  if (a44 < 0)
    operator delete(__p);
  std::vector<std::string>::~vector[abi:ne180100](&a57);
  std::vector<std::string>::~vector[abi:ne180100](v57);
  _Unwind_Resume(a1);
}

void sub_1BF6FE14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a19);
  _Unwind_Resume(exception_object);
}

void sub_1BF6FE398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void sub_1BF6FE9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::list<std::string>::~list(va);
  _Unwind_Resume(a1);
}

void sub_1BF6FE9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16)
{
  void *v16;
  void *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  operator delete(v17);
  if (a16)
  {
    v19 = a14;
    v20 = (uint64_t)a15;
    v21 = *a15;
    *(_QWORD *)(v21 + 8) = *(_QWORD *)(a14 + 8);
    **(_QWORD **)(v19 + 8) = v21;
    a16 = 0;
    if ((uint64_t *)v20 != &a14)
    {
      do
      {
        v22 = *(uint64_t **)(v20 + 8);
        if (*(char *)(v20 + 39) < 0)
          operator delete(*(void **)(v20 + 16));
        operator delete((void *)v20);
        v20 = (uint64_t)v22;
      }
      while (v22 != &a14);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1BF6FEF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      support::ui::NotificationInfo::~NotificationInfo(&a26);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  support::ui::NotificationInfo::~NotificationInfo(&a26);
  _Unwind_Resume(a1);
}

void sub_1BF6FEFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF6FEFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  support::ui::NotificationInfo::~NotificationInfo((void **)&a9);
  support::ui::NotificationInfo::~NotificationInfo(&a20);
  _Unwind_Resume(a1);
}

void sub_1BF6FEFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  support::ui::NotificationInfo::~NotificationInfo((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF6FEFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  support::ui::NotificationInfo::~NotificationInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF6FF1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a19 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((a19 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1BF6FFBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,xpc_object_t object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26,xpc_object_t a27,char a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF6FFDF8(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c16_ZTSN3xpc5arrayE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
    v5 = (std::string *)(a1 + 64);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_OWORD *)(a2 + 64);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_6:
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  v8 = (std::string *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
}

void sub_1BF6FFF88(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[111] < 0)
  {
    operator delete(*v4);
    if ((v2[87] & 0x80000000) == 0)
    {
LABEL_3:
      if ((v2[63] & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((v2[87] & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((v2[63] & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE112c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 87) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*(void **)(a1 + 40));
    return;
  }
LABEL_8:
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_9;
}

uint64_t TapToRadar::getMode(TapToRadar *this)
{
  return -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode");
}

uint64_t TapToRadar::setMode(uint64_t a1)
{
  return -[ABMTapToRadar setMode:](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "setMode:", a1);
}

void TapToRadar::createRadarIfPossible(xpc_object_t *a1, uint64_t a2)
{
  xpc_object_t value;
  unsigned int v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  const char *v9;
  xpc_object_t v10;
  const char *v11;
  char v12;
  void *v13;
  std::string *v14;
  void *size;
  const void *v16;
  size_t v17;
  int v18;
  size_t v19;
  std::string::size_type v20;
  size_t v21;
  std::string *p_dst;
  void **v23;
  xpc_object_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  std::string *v36;
  void *v37;
  config::hw *v38;
  ABMTapToRadar *v39;
  uint64_t v40;
  ABMTapToRadar *v41;
  uint64_t v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  __int128 v48;
  std::string __dst;
  std::string v50;
  void *__p[3];
  std::string v52;
  void *v53[3];
  unsigned int v54;
  uint8_t buf[8];
  uint64_t v56;
  void (*v57)(uint64_t);
  void *v58;
  __int128 *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
    && -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode"))
  {
    v54 = -1431655766;
    value = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB010]);
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v5 = xpc::dyn_cast_or_default((xpc *)buf, (const object *)7);
    xpc_release(*(xpc_object_t *)buf);
    v54 = v5;
    memset(v53, 170, sizeof(v53));
    v6 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB370]);
    *(_QWORD *)buf = v6;
    if (v6)
      xpc_retain(v6);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v7);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v52, 170, sizeof(v52));
    v8 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB930]);
    *(_QWORD *)buf = v8;
    if (v8)
      xpc_retain(v8);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v9);
    xpc_release(*(xpc_object_t *)buf);
    memset(__p, 170, sizeof(__p));
    v10 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB770]);
    *(_QWORD *)buf = v10;
    if (v10)
      xpc_retain(v10);
    else
      *(_QWORD *)buf = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v11);
    xpc_release(*(xpc_object_t *)buf);
    memset(&v50, 170, sizeof(v50));
    v12 = HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) >= 0)
      v13 = (void *)HIBYTE(__p[2]);
    else
      v13 = __p[1];
    v14 = (std::string *)__p;
    if (!v13)
    {
      v14 = &v52;
      v12 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    if (v12 < 0)
    {
      if (v13)
        size = __p[1];
      else
        size = (void *)v52.__r_.__value_.__l.__size_;
      std::string::__init_copy_ctor_external(&v50, v14->__r_.__value_.__l.__data_, (std::string::size_type)size);
    }
    else
    {
      v50 = *v14;
    }
    v16 = (const void *)*MEMORY[0x1E0D01A20];
    v17 = strlen((const char *)*MEMORY[0x1E0D01A20]);
    v18 = SHIBYTE(v53[2]);
    if (SHIBYTE(v53[2]) >= 0)
      v19 = HIBYTE(v53[2]);
    else
      v19 = (size_t)v53[1];
    v20 = v19 + v17;
    memset(&__dst, 170, sizeof(__dst));
    if (v19 + v17 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = v17;
    if (v20 > 0x16)
    {
      v25 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v25 = v20 | 7;
      v26 = v25 + 1;
      p_dst = (std::string *)operator new(v25 + 1);
      __dst.__r_.__value_.__l.__size_ = v20;
      __dst.__r_.__value_.__r.__words[2] = v26 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      if (!v21)
      {
LABEL_34:
        if (v19)
        {
          if (v18 >= 0)
            v23 = v53;
          else
            v23 = (void **)v53[0];
          memmove((char *)p_dst + v21, v23, v19);
        }
        p_dst->__r_.__value_.__s.__data_[v21 + v19] = 0;
        v24 = xpc_dictionary_get_value(*a1, (const char *)*MEMORY[0x1E0CFB780]);
        *(_QWORD *)buf = v24;
        if (v24)
          xpc_retain(v24);
        else
          *(_QWORD *)buf = xpc_null_create();
        v27 = xpc::dyn_cast_or_default((xpc *)buf, 0);
        xpc_release(*(xpc_object_t *)buf);
        {
          __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
        }
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v56 = 0x40000000;
        v57 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
        v58 = &__block_descriptor_tmp_13_8;
        v59 = &GetABMLogServer(void)::sLogServer;
        if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
        {
          v29 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
          v48 = GetABMLogServer(void)::sLogServer;
          if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
            goto LABEL_51;
        }
        else
        {
          dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
          v29 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
          v48 = GetABMLogServer(void)::sLogServer;
          if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
            goto LABEL_51;
        }
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldxr(p_shared_owners);
        while (__stxr(v31 + 1, p_shared_owners));
LABEL_51:
        v32 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v48) + 4);
        if (!v29)
          goto LABEL_55;
        v33 = (unint64_t *)&v29->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            goto LABEL_59;
        }
        else
        {
LABEL_55:
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            goto LABEL_59;
        }
        v35 = -[ABMTapToRadar getMode](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "getMode");
        v36 = &v50;
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v50.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v35;
        LOWORD(v56) = 1024;
        *(_DWORD *)((char *)&v56 + 2) = v54;
        HIWORD(v56) = 2080;
        v57 = (void (*)(uint64_t))v36;
        LOWORD(v58) = 1024;
        *(_DWORD *)((char *)&v58 + 2) = v27;
        _os_log_impl(&dword_1BF566000, v32, OS_LOG_TYPE_DEFAULT, "#I check TTR: mode[%d], radar type[%d], title[%s], MTBF=%d", buf, 0x1Eu);
LABEL_59:
        v37 = (void *)HIBYTE(v53[2]);
        if (SHIBYTE(v53[2]) < 0)
          v37 = v53[1];
        if (!v37)
          goto LABEL_90;
        v38 = (config::hw *)-[ABMTapToRadar checkNotificationCriteria:::](+[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance"), "checkNotificationCriteria:::", &v54, &v50, v27);
        if (!(_DWORD)v38)
          goto LABEL_90;
        if ((config::hw::watch(v38) & 1) == 0)
        {
          v41 = +[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance");
          v42 = v54;
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v47, v52.__r_.__value_.__l.__data_, v52.__r_.__value_.__l.__size_);
          else
            v47 = v52;
          -[ABMTapToRadar showUserNotification:dumpReason:](v41, "showUserNotification:dumpReason:", v42, &v47);
          if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v47.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_91;
            goto LABEL_77;
          }
          goto LABEL_90;
        }
        v39 = +[ABMTapToRadar sharedInstance](ABMTapToRadar, "sharedInstance");
        v40 = v54;
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v46, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v45, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
LABEL_72:
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v44, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
            else
              v44 = __dst;
            if (*(char *)(a2 + 23) < 0)
              std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
            else
              v43 = *(std::string *)a2;
            -[ABMTapToRadar showNotification:::::](v39, "showNotification:::::", v40, &v46, &v45, &v44, &v43);
            if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v43.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_88:
                if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_89;
LABEL_98:
                operator delete(v45.__r_.__value_.__l.__data_);
                if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_99;
LABEL_90:
                if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_91;
                goto LABEL_77;
              }
            }
            else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_88;
            }
            operator delete(v44.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_89:
              if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_90;
LABEL_99:
              operator delete(v46.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_91:
                if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_92:
                  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  {
LABEL_93:
                    if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_94:
                      if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
                        return;
LABEL_81:
                      operator delete(v53[0]);
                      return;
                    }
LABEL_80:
                    operator delete(v52.__r_.__value_.__l.__data_);
                    if ((SHIBYTE(v53[2]) & 0x80000000) == 0)
                      return;
                    goto LABEL_81;
                  }
LABEL_79:
                  operator delete(__p[0]);
                  if ((SHIBYTE(v52.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_94;
                  goto LABEL_80;
                }
LABEL_78:
                operator delete(v50.__r_.__value_.__l.__data_);
                if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
                  goto LABEL_93;
                goto LABEL_79;
              }
LABEL_77:
              operator delete(__dst.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_92;
              goto LABEL_78;
            }
            goto LABEL_98;
          }
        }
        else
        {
          v46 = v50;
        }
        v45 = v50;
        goto LABEL_72;
      }
    }
    else
    {
      memset(&__dst, 0, sizeof(__dst));
      p_dst = &__dst;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19 + v17;
      if (!v17)
        goto LABEL_34;
    }
    memcpy(p_dst, v16, v21);
    goto LABEL_34;
  }
}

void sub_1BF700844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a35 < 0)
    operator delete(__p);
  if (a50 < 0)
  {
    operator delete(a45);
    if ((a56 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a56 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a63 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(a51);
  if ((a63 & 0x80000000) == 0)
  {
LABEL_7:
    if (*(char *)(v63 - 177) < 0)
      operator delete(*(void **)(v63 - 200));
    if (*(char *)(v63 - 153) < 0)
      operator delete(*(void **)(v63 - 176));
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a58);
  goto LABEL_7;
}

std::string *std::vector<std::string>::__emplace_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1BF700C1C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void Simulator::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  v4 = operator new(0xB0uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  Simulator::Simulator((uint64_t)v4, v10);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(a2, v5);
  ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF700CE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

uint64_t Simulator::Simulator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E79201C8;
  *(_QWORD *)(a1 + 48) = &unk_1E7920238;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "simulator");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("simulator", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E7920418;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E79204A8;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E79204A8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E79201C8;
  *(_QWORD *)(a1 + 48) = &unk_1E7920238;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  return a1;
}

void sub_1BF701038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF701074(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

const char *Simulator::getName(Simulator *this)
{
  return "simulator";
}

void Simulator::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_5_10;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  _QWORD aBlock[6];
  std::__shared_weak_count *v19;
  const void *v20;
  void *__dst[2];
  unint64_t v22;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFBF58];
  v11 = strlen((const char *)*MEMORY[0x1E0CFBF58]);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    v22 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v22) = v11;
    v13 = __dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(v13, v10, (size_t)v12);
LABEL_17:
  *((_BYTE *)v12 + (_QWORD)v13) = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_4_3;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v19 = v5;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(aBlock);
  v20 = v17;
  Service::registerCommandHandler(v1, (uint64_t)__dst, &v20);
  if (v17)
    _Block_release(v17);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF701398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  const void *v24;

  if (v24)
    _Block_release(v24);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_5:
      std::__shared_weak_count::__release_weak(v23);
      _Unwind_Resume(a1);
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_1BF7013F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_35;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<Simulator>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN9Simulator10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t value;
  int v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 32);
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFBD08]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if ((v4 | 0xE0000000) != 0xE0000270)
    *(_BYTE *)(v2 + 168) = (v4 | 0xE0000000) == -536870272;
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 48);
  object = v5;
  v7 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, 3760250880, &object);
  xpc_release(object);
  xpc_release(v7);
}

void sub_1BF701624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t Simulator::handleSimulatedPowerNotification_sync(Simulator *this, int a2)
{
  if (a2 != -536870288)
    *((_BYTE *)this + 168) = a2 == -536870272;
  return 0;
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9SimulatorEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void Simulator::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  __int128 v42;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v41 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v41) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v8 = v42;
  v42 = 0uLL;
  v9 = this[20];
  *(_OWORD *)(this + 19) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = cf;
    if (!cf)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = cf;
  if (cf)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v16 = this[16];
  if (!v16 || (v17 = this[15], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFBBB0];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBBB0]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v38 = v29 | 0x8000000000000000;
    __p[0] = v27;
  }
  else
  {
    HIBYTE(v38) = v25;
    v27 = __p;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 1174405120;
  v33[2] = ___ZN9Simulator25finishInitialization_syncEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_7_6;
  v33[4] = this;
  v33[5] = v17;
  v34 = v19;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(v33);
  v32 = this[17];
  if (v32)
    dispatch_retain((dispatch_object_t)this[17]);
  aBlock = v31;
  object = v32;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[19]);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF701A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN9Simulator25finishInitialization_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5] && *(_BYTE *)(v3 + 168))
      {
        v6 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband reset during simulated low power, simulating exit low power", v9, 2u);
        }
        *(_BYTE *)(v3 + 168) = 0;
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

_BYTE *Simulator::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void Simulator::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[4];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN9Simulator8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_8_8;
  v5 = *a3;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<Simulator>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void Simulator::~Simulator(Simulator *this)
{
  void *v1;

  Simulator::~Simulator(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;

  *(_QWORD *)this = off_1E79201C8;
  *((_QWORD *)this + 6) = &unk_1E7920238;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *((_QWORD *)this + 6) = off_1E7920418;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 18);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 17);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  *(_QWORD *)this = off_1E79228B8;
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 1) < 0)
          operator delete(*(void **)(v9 - 24));
        v9 -= 24;
      }
      while (v9 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void `non-virtual thunk to'Simulator::~Simulator(Simulator *this)
{
  Simulator::~Simulator((Simulator *)((char *)this - 48));
}

{
  void *v1;

  Simulator::~Simulator((Simulator *)((char *)this - 48));
  operator delete(v1);
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7920418;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7920418;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF701FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF701FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<Simulator>::shared_ptr[abi:ne180100]<Simulator,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7920458;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF7020F0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF702110(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<Simulator *,std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator *)#1},std::allocator<Simulator>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI9SimulatorE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<Simulator> ctu::SharedSynchronizable<Simulator>::make_shared_ptr<Simulator>(Simulator*)::{lambda(Simulator*)#1}::operator() const(Simulator*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7920418;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<Simulator,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7920418;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<Simulator>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79204E0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI9SimulatorE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c37_ZTSNSt3__110shared_ptrIK9SimulatorEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void dispatch::async<void ctu::SharedSynchronizable<Simulator>::execute_wrapped<Simulator::initialize(dispatch::group_session)::$_0>(Simulator::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<Simulator::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<Simulator::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  std::__shared_weak_count ***v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(std::__shared_weak_count ****)a1;
  Simulator::finishInitialization_sync(**(std::__shared_weak_count ****)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF7024AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *abm::data::getDataPropertyNameFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v3;
  xpc_object_t object;

  if (MEMORY[0x1C3B8CD78](*a1) != MEMORY[0x1E0C812F8])
    return "Unknown";
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v3 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)5);
  xpc_release(object);
  if (v3 < 5)
    return off_1E7920688[v3];
  else
    return "Unknown";
}

void sub_1BF7025E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::getDataPropertyTypeFromDict(xpc_object_t *a1)
{
  xpc_object_t value;
  unsigned int v4;
  xpc_object_t object;

  if (MEMORY[0x1C3B8CD78](*a1) != MEMORY[0x1E0C812F8])
    return 5;
  value = xpc_dictionary_get_value(*a1, "kDataProperty");
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v4 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)5);
  xpc_release(object);
  if (v4 >= 5)
    return 5;
  else
    return v4;
}

void sub_1BF7026A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void abm::data::DataAggregationProtocol::toDict(abm::data::DataAggregationProtocol *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(0);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationProtocol", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationProtocol::addToDict(abm::data::DataAggregationProtocol *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationProtocol", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

const char *abm::data::DataAggregationProtocol::asString(abm::data::DataAggregationProtocol *this)
{
  uint64_t v1;

  v1 = *((int *)this + 3);
  if (v1 > 2)
    return "unknown";
  else
    return off_1E79206B0[v1];
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(0);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationProtocol>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  int v5;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E7920530;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8CD78](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationProtocol"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationProtocol");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    v5 = xpc::dyn_cast_or_default((xpc *)&object, (const object *)3);
    xpc_release(object);
    if (v5)
    {
      if (v5 == 1)
      {
        *(_DWORD *)(a2 + 12) = 1;
      }
      else if (v5 == 2)
      {
        *(_DWORD *)(a2 + 12) = 2;
      }
      else
      {
        *(_BYTE *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 12) = 3;
      }
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 0;
    }
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF702AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationProtocol>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E7920530;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (result >= 3)
  {
    *(_BYTE *)(a2 + 8) = 0;
    result = 3;
  }
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxDatagrams::toDict(abm::data::DataAggregationMaxDatagrams *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(1);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxDatagrams", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxDatagrams::addToDict(abm::data::DataAggregationMaxDatagrams *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxDatagrams", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(1);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E7920578;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8CD78](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxDatagrams");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF702EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxDatagrams>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E7920578;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataAggregationMaxSize::toDict(abm::data::DataAggregationMaxSize *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(2);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataAggregationMaxSize", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataAggregationMaxSize::addToDict(abm::data::DataAggregationMaxSize *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataAggregationMaxSize", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(2);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E79205C0;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8CD78](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataAggregationMaxSize");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_DWORD *)(a2 + 12) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF7032B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataAggregationMaxSize>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E79205C0;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_DWORD *)(a2 + 12) = result;
  return result;
}

void abm::data::DataFlowControl::toDict(abm::data::DataFlowControl *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(3);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataFlowControl", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataFlowControl::addToDict(abm::data::DataFlowControl *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataFlowControl", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(3);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataFlowControl>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E7920608;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8CD78](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataFlowControl"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataFlowControl");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF703694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataFlowControl>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E7920608;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

void abm::data::DataPowerSave::toDict(abm::data::DataPowerSave *this@<X0>, void **a2@<X8>)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  void *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;

  *a2 = (void *)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(4);
  if (!v7)
    v7 = xpc_null_create();
  v8 = *a2;
  xpc_dictionary_set_value(v8, "kDataProperty", v7);
  v9 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v9);
  v10 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v10)
    v10 = xpc_null_create();
  xpc_dictionary_set_value(v8, "kDataPowerSave", v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
}

void abm::data::DataPowerSave::addToDict(abm::data::DataPowerSave *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_BOOL_create(*((_BYTE *)this + 9));
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*a2, "kDataPowerSave", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::createDictForGet(xpc_object_t *a1@<X8>)
{
  xpc_object_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;

  *a1 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v2 = xpc_dictionary_create(0, 0, 0);
  v3 = v2;
  if (v2)
  {
    *a1 = v2;
  }
  else
  {
    v3 = xpc_null_create();
    *a1 = v3;
    if (!v3)
    {
      v4 = xpc_null_create();
      v3 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
    goto LABEL_9;
  }
  v4 = xpc_null_create();
LABEL_8:
  *a1 = v4;
LABEL_9:
  xpc_release(v3);
  v5 = xpc_int64_create(4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a1, "kDataProperty", v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
}

void abm::data::DataProperty<abm::data::DataPowerSave>::create(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t object;

  *(_QWORD *)a2 = &off_1E7920650;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  if (MEMORY[0x1C3B8CD78](*a1) == MEMORY[0x1E0C812F8] && xpc_dictionary_get_value(*a1, "kDataPowerSave"))
  {
    value = xpc_dictionary_get_value(*a1, "kDataPowerSave");
    object = value;
    if (value)
      xpc_retain(value);
    else
      object = xpc_null_create();
    *(_BYTE *)(a2 + 9) = xpc::dyn_cast_or_default((xpc *)&object, 0);
    xpc_release(object);
  }
  else
  {
    *(_BYTE *)(a2 + 8) = 0;
  }
}

void sub_1BF703A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::data::DataProperty<abm::data::DataPowerSave>::create@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &off_1E7920650;
  *(_QWORD *)(a2 + 8) = 0xAAAAAAAAAAAAAA01;
  *(_BYTE *)(a2 + 9) = (_DWORD)result != 0;
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t result, char a2, uint64_t a3)
{
  *(_QWORD *)result = &unk_1E7917288;
  *(_BYTE *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

{
  *(_QWORD *)result = &unk_1E7917288;
  *(_BYTE *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t HealthEvent::HealthEvent(uint64_t a1, char a2, uint64_t a3)
{
  std::string __p;

  *(_QWORD *)a1 = &unk_1E7917288;
  *(_BYTE *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

{
  std::string __p;

  *(_QWORD *)a1 = &unk_1E7917288;
  *(_BYTE *)(a1 + 8) = a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF703B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF703C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::getType(HealthEvent *this)
{
  return *((char *)this + 8);
}

void HealthEvent::getTime(HealthEvent *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6[2];

  v3 = *((_QWORD *)this + 2);
  v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  v5 = v4;
  v6[0] = v4;
  *((_BYTE *)v4 + 24) = 1;
  v6[1] = (_QWORD *)1;
  *((_QWORD *)v4 + 5) = v3;
  *((_QWORD *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1BF703CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t HealthEvent::getChronoTime(HealthEvent *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t HealthEvent::setType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

void HealthEvent::setTime(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)(a1 + 16) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF703D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HealthEvent::setTime(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t HealthEvent::asString@<X0>(HealthEvent *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  size_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v26;
  _BYTE v27[24];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33[2];
  __int128 v34;
  __int128 v35;
  _OWORD v36[9];
  unint64_t v37;
  _QWORD **v38;
  _QWORD *v39;
  uint64_t v40;

  v37 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v36[7] = v4;
  v36[8] = v4;
  v36[5] = v4;
  v36[6] = v4;
  v36[3] = v4;
  v36[4] = v4;
  v36[1] = v4;
  v36[2] = v4;
  v35 = v4;
  v36[0] = v4;
  *(_OWORD *)v33 = v4;
  v34 = v4;
  v31 = v4;
  v32 = v4;
  v29 = v4;
  v30 = v4;
  v28 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v28);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)"HealthEvent { Type='", 20);
  switch(*((_BYTE *)this + 8))
  {
    case 1:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      v7 = "boot failure";
      goto LABEL_7;
    case 2:
      v8 = (char *)operator new(0x19uLL);
      *(_QWORD *)v27 = v8;
      *(_OWORD *)&v27[8] = xmmword_1BF73D650;
      strcpy(v8, "boot attempts exhausted");
      v6 = 23;
      goto LABEL_10;
    case 3:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1936942435;
      v7 = "ping success";
      goto LABEL_7;
    case 4:
      v6 = 12;
      v27[23] = 12;
      *(_DWORD *)&v27[8] = 1701999980;
      v7 = "ping failure";
LABEL_7:
      *(_QWORD *)v27 = *(_QWORD *)v7;
      v27[12] = 0;
      break;
    case 5:
      v6 = 11;
      v27[23] = 11;
      strcpy(v27, "erasing efs");
      break;
    default:
      v6 = 7;
      v27[23] = 7;
      strcpy(v27, "unknown");
      break;
  }
  v8 = v27;
LABEL_10:
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v8, v6);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' Time='", 8);
  v11 = *((_QWORD *)this + 2);
  v39 = 0;
  v40 = 0;
  v38 = &v39;
  v12 = operator new(0x38uLL);
  v12[8] = 0;
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = &v39;
  v38 = (_QWORD **)v12;
  v39 = v12;
  *((_BYTE *)v12 + 24) = 1;
  v40 = 1;
  *((_QWORD *)v12 + 5) = v11;
  *((_QWORD *)v12 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v38, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v38, v39);
  if ((v26 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v14 = v26;
  else
    v14 = (uint64_t)__p[1];
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v13, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"' }", 3);
  if ((char)v26 < 0)
  {
    operator delete(__p[0]);
    if ((v27[23] & 0x80000000) == 0)
    {
LABEL_18:
      v16 = BYTE8(v35);
      if ((BYTE8(v35) & 0x10) == 0)
        goto LABEL_19;
LABEL_23:
      v18 = v35;
      if ((unint64_t)v35 < *((_QWORD *)&v32 + 1))
      {
        *(_QWORD *)&v35 = *((_QWORD *)&v32 + 1);
        v18 = *((_QWORD *)&v32 + 1);
      }
      v19 = (const void *)v32;
      v17 = v18 - v32;
      if ((unint64_t)(v18 - v32) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_37;
      goto LABEL_26;
    }
  }
  else if ((v27[23] & 0x80000000) == 0)
  {
    goto LABEL_18;
  }
  operator delete(*(void **)v27);
  v16 = BYTE8(v35);
  if ((BYTE8(v35) & 0x10) != 0)
    goto LABEL_23;
LABEL_19:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    a2[23] = 0;
    goto LABEL_33;
  }
  v19 = (const void *)*((_QWORD *)&v30 + 1);
  v17 = *((_QWORD *)&v31 + 1) - *((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v31 + 1) - *((_QWORD *)&v30 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_37:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_26:
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_32;
  }
  a2[23] = v17;
  if (v17)
LABEL_32:
    memmove(a2, v19, v17);
LABEL_33:
  a2[v17] = 0;
  *(_QWORD *)&v28 = *MEMORY[0x1E0DE4F50];
  v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v29 = v23;
  *((_QWORD *)&v29 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v34) < 0)
    operator delete(v33[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8C364](v36);
}

void sub_1BF70416C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF704180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v21 - 72, *(_QWORD **)(v21 - 64));
  if (a20 < 0)
  {
    operator delete(__p);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1BF704208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char *HealthEvent::toString@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  switch((int)result)
  {
    case 1:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "boot failure");
      break;
    case 2:
      result = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = result;
      *(_OWORD *)(a2 + 8) = xmmword_1BF73D650;
      strcpy(result, "boot attempts exhausted");
      break;
    case 3:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping success");
      break;
    case 4:
      *(_BYTE *)(a2 + 23) = 12;
      strcpy((char *)a2, "ping failure");
      break;
    case 5:
      *(_BYTE *)(a2 + 23) = 11;
      strcpy((char *)a2, "erasing efs");
      break;
    default:
      *(_BYTE *)(a2 + 23) = 7;
      strcpy((char *)a2, "unknown");
      break;
  }
  return result;
}

void ServerLogging::~ServerLogging(ServerLogging *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 9));
    *((_QWORD *)this + 9) = 0;
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_8:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_14;
    }
  }
  else
  {
LABEL_7:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_8;
  }
  operator delete(*((void **)this + 6));
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_9:
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (!v6)
      return;
    goto LABEL_10;
  }
LABEL_14:
  operator delete(*((void **)this + 3));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v6)
    return;
LABEL_10:
  std::__shared_weak_count::__release_weak(v6);
}

uint64_t ServerLogging::ServerLogging(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  os_unfair_lock_s *v7;
  _QWORD *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  void *__dst[2];
  int64_t v31;
  os_unfair_lock_s *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  std::string v35;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v7 = (os_unfair_lock_s *)off_1ED70F558;
  if (!off_1ED70F558)
  {
    v8 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v8, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v8[3] = 0;
    v8[4] = 0;
    *((_DWORD *)v8 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v35, (uint64_t)v8);
    v9 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = 0uLL;
    v10 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v9;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    size = (std::__shared_weak_count *)v35.__r_.__value_.__l.__size_;
    if (v35.__r_.__value_.__l.__size_)
    {
      v14 = (unint64_t *)(v35.__r_.__value_.__l.__size_ + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v7 = (os_unfair_lock_s *)off_1ED70F558;
  }
  v32 = v7;
  v33 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v18 = (const void *)*MEMORY[0x1E0D01A58];
  v19 = strlen((const char *)*MEMORY[0x1E0D01A58]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = (void *)v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (void **)operator new(v22 + 1);
    __dst[1] = v20;
    v31 = v23 | 0x8000000000000000;
    __dst[0] = v21;
LABEL_30:
    memmove(v21, v18, (size_t)v20);
    *((_BYTE *)v20 + (_QWORD)v21) = 0;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_31;
  }
  HIBYTE(v31) = v19;
  v21 = __dst;
  if (v19)
    goto LABEL_30;
  LOBYTE(__dst[0]) = 0;
  if ((*((char *)a3 + 23) & 0x80000000) == 0)
  {
LABEL_26:
    __p = *(std::string *)a3;
    goto LABEL_32;
  }
LABEL_31:
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_32:
  os_unfair_lock_lock(v7 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v34 = __p;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v35, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    v35 = v34;
  if (v31 >= 0)
    v24 = (char *)__dst;
  else
    v24 = (char *)__dst[0];
  ctu::cf::plist_adapter::set<std::string>((int)v7, (uint64_t)&v35, v24);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v35.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_43:
      os_unfair_lock_unlock(v7 + 10);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_49;
    }
  }
  else if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_43;
  }
  operator delete(v34.__r_.__value_.__l.__data_);
  os_unfair_lock_unlock(v7 + 10);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_44:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_45;
LABEL_50:
    operator delete(__dst[0]);
    v25 = v33;
    if (!v33)
      return a1;
    goto LABEL_51;
  }
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    goto LABEL_50;
LABEL_45:
  v25 = v33;
  if (!v33)
    return a1;
LABEL_51:
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  return a1;
}

void sub_1BF7047E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void sub_1BF704884()
{
  JUMPOUT(0x1BF704898);
}

void ServerLogging::init(os_unfair_lock_s *this)
{
  os_unfair_lock_s *v2;
  NSObject *v3;
  ctu::LogServer *v4;

  v2 = this + 4;
  os_unfair_lock_lock(this + 4);
  v3 = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)this);
  *(_QWORD *)&this[18]._os_unfair_lock_opaque = v3;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v3);
  v4 = *(ctu::LogServer **)&this[20]._os_unfair_lock_opaque;
  if (v4)
    ctu::LogServer::setEnabled(v4);
  os_unfair_lock_unlock(v2);
}

NSObject *ServerLogging::monitorSnapshotPath_sync(ServerLogging *this)
{
  const char *v2;
  const char *v3;
  timespec v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  const char *v8;
  unsigned int v9;
  NSObject *global_queue;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD v15[4];
  unsigned int v16;
  _QWORD handler[5];
  unsigned int v18;
  stat v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (char *)this + 48;
  v2 = (const char *)*((_QWORD *)this + 6);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v19.st_blksize = v4;
  *(timespec *)v19.st_qspare = v4;
  v19.st_birthtimespec = v4;
  *(timespec *)&v19.st_size = v4;
  v19.st_mtimespec = v4;
  v19.st_ctimespec = v4;
  *(timespec *)&v19.st_uid = v4;
  v19.st_atimespec = v4;
  *(timespec *)&v19.st_dev = v4;
  if (*((char *)this + 71) >= 0)
    v5 = (char *)this + 48;
  else
    v5 = v2;
  if (stat(v5, &v19))
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_1ED70F6F8;
      if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_8:
        v8 = v3;
        if (*((char *)this + 71) < 0)
          v8 = *(const char **)v3;
        v19.st_dev = 136315138;
        *(_QWORD *)&v19.st_mode = v8;
        _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was not found, so recreating it\n", (uint8_t *)&v19, 0xCu);
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v7 = qword_1ED70F6F8;
      if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_8;
    }
    support::fs::createDir(v3, 0x1EDu, 1);
  }
  if (*((char *)this + 71) < 0)
    v3 = *(const char **)v3;
  v9 = open(v3, 0x8000);
  if ((v9 & 0x80000000) != 0)
    return 0;
  global_queue = dispatch_get_global_queue(17, 0);
  v11 = dispatch_source_create(MEMORY[0x1E0C80DE8], v9, 0x21uLL, global_queue);
  if (!v11)
  {
    close(v9);
    return 0;
  }
  v12 = v11;
  v13 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 0x40000000;
  handler[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_7;
  handler[4] = this;
  v18 = v9;
  dispatch_source_set_event_handler(v11, handler);
  v15[0] = v13;
  v15[1] = 0x40000000;
  v15[2] = ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8;
  v15[3] = &__block_descriptor_tmp_9_9;
  v16 = v9;
  dispatch_source_set_cancel_handler(v12, v15);
  dispatch_activate(v12);
  return v12;
}

void ServerLogging::clearScratchFolders_sync(ServerLogging *this)
{
  const void *v1;
  size_t v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *global_queue;
  capabilities::abs *v8;
  void *__dst[2];
  unint64_t v10;

  v1 = (const void *)*MEMORY[0x1E0D01A18];
  v2 = strlen((const char *)*MEMORY[0x1E0D01A18]);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = (void *)v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    v4 = (void **)operator new(v5 + 1);
    __dst[1] = v3;
    v10 = v6 | 0x8000000000000000;
    __dst[0] = v4;
    goto LABEL_8;
  }
  HIBYTE(v10) = v2;
  v4 = __dst;
  if (v2)
LABEL_8:
    memmove(v4, v1, (size_t)v3);
  *((_BYTE *)v3 + (_QWORD)v4) = 0;
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_async(global_queue, &__block_literal_global_5);
  capabilities::abs::logScratchPath(v8);
  support::fs::createDir((const char *)__dst, 0x1EDu, 1);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
}

void sub_1BF704CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ctu::LogServer *ServerLogging::init_sync(ServerLogging *this)
{
  ctu::LogServer *result;

  result = (ctu::LogServer *)*((_QWORD *)this + 10);
  if (result)
    return (ctu::LogServer *)ctu::LogServer::setEnabled(result);
  return result;
}

void ServerLogging::registerLogServer(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  ctu::LogServer *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  os_unfair_lock_s *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = *(ctu::LogServer **)a2;
  v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a1 + 88) = v3;
    if (!v9)
    {
LABEL_7:
      if (!v4)
        goto LABEL_17;
      goto LABEL_16;
    }
  }
  else
  {
    v7 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v9 = *(std::__shared_weak_count **)(a1 + 88);
    *(_QWORD *)(a1 + 80) = v4;
    *(_QWORD *)(a1 + 88) = 0;
    if (!v9)
      goto LABEL_7;
  }
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v4 = *(ctu::LogServer **)(a1 + 80);
    if (!v4)
      goto LABEL_17;
    goto LABEL_16;
  }
  v4 = *(ctu::LogServer **)(a1 + 80);
  if (v4)
LABEL_16:
    ctu::LogServer::setEnabled(v4);
LABEL_17:
  os_unfair_lock_unlock(v7);
  if (v3)
  {
    v12 = (unint64_t *)&v3->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void ServerLogging::snapshot(os_unfair_lock_s *a1, CFTypeRef *a2)
{
  CFTypeRef v3;
  os_unfair_lock_s *v4;

  v3 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
    v4 = a1 + 4;
    os_unfair_lock_lock(v4);
    CFRetain(v3);
    CFRelease(v3);
    os_unfair_lock_unlock(v4);
    CFRelease(v3);
  }
  else
  {
    os_unfair_lock_lock(a1 + 4);
    os_unfair_lock_unlock(a1 + 4);
  }
}

void ___ZN13ServerLogging24clearScratchFolders_syncEv_block_invoke()
{
  const void *v0;
  size_t v1;
  void *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *__dst[2];
  unint64_t v7;

  v0 = (const void *)*MEMORY[0x1E0D01A18];
  v1 = strlen((const char *)*MEMORY[0x1E0D01A18]);
  if (v1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v2 = (void *)v1;
  if (v1 >= 0x17)
  {
    v4 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1 | 7) != 0x17)
      v4 = v1 | 7;
    v5 = v4 + 1;
    v3 = (void **)operator new(v4 + 1);
    __dst[1] = v2;
    v7 = v5 | 0x8000000000000000;
    __dst[0] = v3;
    goto LABEL_8;
  }
  HIBYTE(v7) = v1;
  v3 = __dst;
  if (v1)
LABEL_8:
    memmove(v3, v0, (size_t)v2);
  *((_BYTE *)v2 + (_QWORD)v3) = 0;
  support::fs::removeDirContents((const char *)__dst, 0);
  if (SHIBYTE(v7) < 0)
    operator delete(__dst[0]);
}

void sub_1BF704FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServerLogging::backupFolders_sync(capabilities::abs *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type *v7;
  timespec v8;
  std::string *p_p;
  DIR *v10;
  std::string *v11;
  DIR *v12;
  dirent *v13;
  int v14;
  size_t v15;
  unint64_t v16;
  std::string *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string::size_type v29;
  char v30;
  int st_gid_high;
  capabilities::abs *v32;
  void *v33;
  char v34;
  _BYTE v35[8];
  _QWORD *v36;
  void *v37[2];
  unsigned __int8 v38;
  std::string __p;
  stat v40;

  *(_QWORD *)(a4 + 8) = 0;
  v7 = (std::string::size_type *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 16) = 0;
  capabilities::abs::logScratchPath(a1);
  v8.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v8.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v40.st_blksize = v8;
  *(timespec *)v40.st_qspare = v8;
  v40.st_birthtimespec = v8;
  *(timespec *)&v40.st_size = v8;
  v40.st_mtimespec = v8;
  v40.st_ctimespec = v8;
  *(timespec *)&v40.st_uid = v8;
  v40.st_atimespec = v8;
  *(timespec *)&v40.st_dev = v8;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (stat((const char *)p_p, &v40))
  {
    LODWORD(v10) = 0;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &__p;
    else
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v12 = opendir((const char *)v11);
    v10 = v12;
    if (v12)
    {
      v13 = readdir(v12);
      closedir(v10);
      LODWORD(v10) = v13 != 0;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!(_DWORD)v10)
      return;
  }
  else if (!(_DWORD)v10)
  {
    return;
  }
  v14 = *((char *)a2 + 23);
  if (v14 >= 0)
    v15 = *((unsigned __int8 *)a2 + 23);
  else
    v15 = (size_t)a2[1];
  v16 = v15 + 7;
  memset(&__p, 170, sizeof(__p));
  if (v15 + 7 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v18 = v16 | 7;
    v19 = v18 + 1;
    v17 = (std::string *)operator new(v18 + 1);
    __p.__r_.__value_.__l.__size_ = v15 + 7;
    __p.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    v17 = &__p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = v15 + 7;
    if (!v15)
      goto LABEL_29;
  }
  if (v14 >= 0)
    v20 = a2;
  else
    v20 = *a2;
  memmove(v17, v20, v15);
LABEL_29:
  strcpy((char *)v17 + v15, "log-bb-");
  Timestamp::Timestamp((Timestamp *)v35);
  Timestamp::asString((uint64_t)v35, 0, 9, v37);
  if ((v38 & 0x80u) == 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if ((v38 & 0x80u) == 0)
    v22 = v38;
  else
    v22 = (std::string::size_type)v37[1];
  v23 = std::string::append(&__p, (const std::string::value_type *)v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  *(_QWORD *)&v40.st_uid = *((_QWORD *)&v23->__r_.__value_.__l + 2);
  *(_OWORD *)&v40.st_dev = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = *(char *)(a3 + 23);
  if (v25 >= 0)
    v26 = (const std::string::value_type *)a3;
  else
    v26 = *(const std::string::value_type **)a3;
  if (v25 >= 0)
    v27 = *(unsigned __int8 *)(a3 + 23);
  else
    v27 = *(_QWORD *)(a3 + 8);
  v28 = std::string::append((std::string *)&v40, v26, v27);
  v29 = v28->__r_.__value_.__r.__words[0];
  *v7 = v28->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v7 + 7) = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1]
                                                                          + 7);
  v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  st_gid_high = SHIBYTE(v40.st_gid);
  *(_QWORD *)a4 = v29;
  *(_BYTE *)(a4 + 23) = v30;
  if ((st_gid_high & 0x80000000) == 0)
  {
    if (((char)v38 & 0x80000000) == 0)
      goto LABEL_43;
LABEL_48:
    operator delete(v37[0]);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_44;
    goto LABEL_49;
  }
  operator delete(*(void **)&v40.st_dev);
  if ((char)v38 < 0)
    goto LABEL_48;
LABEL_43:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v35, v36);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_44;
LABEL_49:
  operator delete(__p.__r_.__value_.__l.__data_);
LABEL_44:
  capabilities::abs::logScratchPath(v32);
  support::fs::moveDirUnique((const char *)&v40, a4, (uint64_t)&v33);
  if ((v34 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v40.st_gid) & 0x80000000) == 0)
      return;
LABEL_51:
    operator delete(*(void **)&v40.st_dev);
    return;
  }
  operator delete(v33);
  if (SHIBYTE(v40.st_gid) < 0)
    goto LABEL_51;
}

void sub_1BF7052CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;
  int v33;

  if (a32 < 0)
    operator delete(__p);
  if (v33 < 0)
    operator delete(v32);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t result;
  int v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v4 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v4 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
  }
  v5 = (_QWORD *)(v2 + 48);
  if (*(char *)(v2 + 71) < 0)
    v5 = (_QWORD *)*v5;
  v7 = 136315138;
  v8 = v5;
  _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "Snapshot path [%s] was removed\n", (uint8_t *)&v7, 0xCu);
LABEL_7:
  dispatch_release(*(dispatch_object_t *)(v2 + 72));
  *(_QWORD *)(v2 + 72) = 0;
  close(*(_DWORD *)(a1 + 40));
  result = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v2);
  *(_QWORD *)(v2 + 72) = result;
  return result;
}

uint64_t ___ZN13ServerLogging24monitorSnapshotPath_syncEv_block_invoke_8(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t ctu::PthreadMutexGuardPolicy<ServerLogging>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  capabilities::abs *v10;
  uint64_t v11;
  size_t v12;
  std::string *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  ctu::LogServer *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD v51[2];
  std::string v52;
  ServerLogging *v53;
  std::string __p;
  void *v55;
  uint64_t *v56;

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1BF743000;
  strcpy(__p.__r_.__value_.__l.__data_, "AppleBasebandManagerServerLog");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (!v4)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (!v52.__r_.__value_.__l.__size_)
      goto LABEL_9;
  }
  v8 = (unint64_t *)&size->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_9:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_10:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_11:
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  v10 = (capabilities::abs *)pthread_mutex_lock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  v11 = qword_1ED70F2E8;
  if (qword_1ED70F2E8)
    goto LABEL_46;
  capabilities::abs::logScratchPath(v10);
  v12 = strlen((const char *)kDaemonLogScratchDir);
  v13 = std::string::append(&v52, (const std::string::value_type *)kDaemonLogScratchDir, v12);
  __p = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  memset(&v52, 170, sizeof(v52));
  capabilities::abs::logSnapshotPath((capabilities::abs *)v13);
  v14 = operator new(0x60uLL);
  ServerLogging::ServerLogging((uint64_t)v14, (__int128 *)&__p, (__int128 *)&v52);
  v53 = (ServerLogging *)v14;
  v15 = (std::__shared_weak_count *)operator new(0x20uLL);
  v15->__shared_owners_ = 0;
  v16 = (unint64_t *)&v15->__shared_owners_;
  v15->__vftable = (std::__shared_weak_count_vtbl *)off_1E7920778;
  v15->__shared_weak_owners_ = 0;
  v15[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v53 = 0;
  v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 1);
  if (v17)
  {
    if (v17->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
    *(_QWORD *)v14 = v14;
    *((_QWORD *)v14 + 1) = v15;
    std::__shared_weak_count::__release_weak(v17);
  }
  else
  {
    do
      v21 = __ldxr(v16);
    while (__stxr(v21 + 1, v16));
    v22 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    *(_QWORD *)v14 = v14;
    *((_QWORD *)v14 + 1) = v15;
  }
  do
    v24 = __ldaxr(v16);
  while (__stlxr(v24 - 1, v16));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
LABEL_27:
  if (v53)
  {
    ServerLogging::~ServerLogging(v53);
    operator delete(v25);
  }
  os_unfair_lock_lock((os_unfair_lock_t)v14 + 4);
  v26 = ServerLogging::monitorSnapshotPath_sync((ServerLogging *)v14);
  *((_QWORD *)v14 + 9) = v26;
  ServerLogging::clearScratchFolders_sync((ServerLogging *)v26);
  v27 = (ctu::LogServer *)*((_QWORD *)v14 + 10);
  if (v27)
    ctu::LogServer::setEnabled(v27);
  os_unfair_lock_unlock((os_unfair_lock_t)v14 + 4);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v52.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_33:
      v28 = (std::__shared_weak_count *)off_1ED70F2F0;
      qword_1ED70F2E8 = (uint64_t)v14;
      off_1ED70F2F0 = v15;
      if (!v28)
        goto LABEL_45;
LABEL_41:
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v28 = (std::__shared_weak_count *)off_1ED70F2F0;
  qword_1ED70F2E8 = (uint64_t)v14;
  off_1ED70F2F0 = v15;
  if (v28)
    goto LABEL_41;
LABEL_45:
  v11 = qword_1ED70F2E8;
LABEL_46:
  v31 = (std::__shared_weak_count *)off_1ED70F2F0;
  if (off_1ED70F2F0)
  {
    v32 = (unint64_t *)((char *)off_1ED70F2F0 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  v34 = *(_QWORD **)(a1 + 32);
  v35 = (std::__shared_weak_count *)v34[1];
  v51[0] = *v34;
  v51[1] = v35;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    ServerLogging::registerLogServer(v11, (uint64_t)v51);
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  else
  {
    ServerLogging::registerLogServer(v11, (uint64_t)v51);
  }
  if (v31)
  {
    v39 = (unint64_t *)&v31->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v41 = *(uint64_t **)(a1 + 32);
  v43 = *v41;
  v42 = (std::__shared_weak_count *)v41[1];
  v49 = v43;
  v50 = v42;
  if (v42)
  {
    v44 = (unint64_t *)&v42->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN3abm5debugL14sLogServerInitERNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_7;
  v56 = &v49;
  if (abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v46 = v50;
    if (!v50)
      return;
  }
  else
  {
    dispatch_once(&abm::debug::sLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v46 = v50;
    if (!v50)
      return;
  }
  v47 = (unint64_t *)&v46->__shared_owners_;
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
  }
}

void sub_1BF705A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, ServerLogging *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](&a19);
  if (a18 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  pthread_mutex_unlock(&ctu::Singleton<ServerLogging,ServerLogging,ctu::PthreadMutexGuardPolicy<ServerLogging>>::sInstance);
  _Unwind_Resume(a1);
}

ServerLogging **std::unique_ptr<ServerLogging>::~unique_ptr[abi:ne180100](ServerLogging **a1)
{
  ServerLogging *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    ServerLogging::~ServerLogging(v2);
    operator delete(v3);
  }
  return a1;
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__on_zero_shared(uint64_t a1)
{
  ServerLogging *v1;
  void *v2;

  v1 = *(ServerLogging **)(a1 + 24);
  if (v1)
  {
    ServerLogging::~ServerLogging(v1);
    operator delete(v2);
  }
}

uint64_t std::__shared_ptr_pointer<ServerLogging *,std::shared_ptr<ServerLogging>::__shared_ptr_default_delete<ServerLogging,ServerLogging>,std::allocator<ServerLogging>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF7451BBLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF7451BBLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF7451BBLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF7451BBLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_13()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void PowerBudget::PowerBudget(PowerBudget *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

void PowerBudget::PowerBudget(PowerBudget *this, NSDictionary *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  PowerBudget::fill((id *)this, a2);
}

{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  PowerBudget::fill((id *)this, a2);
}

void sub_1BF705CD0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v3;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(id *this, NSDictionary *a2)
{
  NSUInteger v4;
  uint64_t **v5;
  uint64_t i;
  void *v7;
  id v8;
  int v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t **v13;
  void *v14;
  void **v15;
  char v16;
  char v17;
  void *v18;
  void **v19;
  char v20;
  char v21;
  void *v22;
  void **v23;
  char v24;
  char v25;
  void *v26;
  void **v27;
  char v28;
  char v29;
  unsigned int v30;
  _BYTE *v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  char v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];

  this[3] = 0;
  if (a2)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v4 = -[NSDictionary countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
    if (v4)
    {
      v36 = *MEMORY[0x1E0D09958];
      v37 = *(_QWORD *)v41;
      v34 = *MEMORY[0x1E0D09970];
      v35 = *MEMORY[0x1E0D09960];
      v5 = (uint64_t **)(this + 1);
      do
      {
        for (i = 0; i != v4; ++i)
        {
          if (*(_QWORD *)v41 != v37)
            objc_enumerationMutation(a2);
          v7 = *(void **)(*((_QWORD *)&v40 + 1) + 8 * i);
          v8 = -[NSDictionary objectForKeyedSubscript:](a2, "objectForKeyedSubscript:", v7);
          if (v8)
          {
            v9 = objc_msgSend(v8, "integerValue");
            if ((objc_msgSend(v7, "isEqualToString:", v36) & 1) != 0)
            {
              v10 = 1;
              v11 = *v5;
              v12 = (uint64_t **)(this + 1);
              v13 = (uint64_t **)(this + 1);
              if (*v5)
                goto LABEL_54;
LABEL_58:
              v31 = operator new(0x28uLL);
              v31[28] = v10;
              v31[32] = 0;
              v31[36] = 0;
              *(_QWORD *)v31 = 0;
              *((_QWORD *)v31 + 1) = 0;
              *((_QWORD *)v31 + 2) = v13;
              *v12 = (uint64_t *)v31;
              v32 = *(void **)*this;
              v33 = (uint64_t *)v31;
              if (v32)
              {
                *this = v32;
                v33 = *v12;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)this[1], v33);
              this[2] = (char *)this[2] + 1;
              goto LABEL_6;
            }
            if ((objc_msgSend(v7, "isEqualToString:", v35) & 1) != 0)
            {
              v10 = 0;
              v11 = *v5;
              v12 = (uint64_t **)(this + 1);
              v13 = (uint64_t **)(this + 1);
              if (*v5)
                goto LABEL_54;
              goto LABEL_58;
            }
            if ((objc_msgSend(v7, "isEqualToString:", v34) & 1) != 0)
            {
              v10 = 2;
              v11 = *v5;
              v12 = (uint64_t **)(this + 1);
              v13 = (uint64_t **)(this + 1);
              if (*v5)
                goto LABEL_54;
              goto LABEL_58;
            }
            v14 = (void *)MEMORY[0x1E0CB3940];
            PowerBudget::asString(10, (char *)__p);
            if (v39 >= 0)
              v15 = __p;
            else
              v15 = (void **)__p[0];
            v16 = objc_msgSend(v7, "isEqualToString:", objc_msgSend(v14, "stringWithUTF8String:", v15));
            v17 = v16;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if ((v17 & 1) != 0)
              {
LABEL_25:
                v10 = 10;
                v11 = *v5;
                v12 = (uint64_t **)(this + 1);
                v13 = (uint64_t **)(this + 1);
                if (*v5)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else if ((v16 & 1) != 0)
            {
              goto LABEL_25;
            }
            v18 = (void *)MEMORY[0x1E0CB3940];
            PowerBudget::asString(11, (char *)__p);
            if (v39 >= 0)
              v19 = __p;
            else
              v19 = (void **)__p[0];
            v20 = objc_msgSend(v7, "isEqualToString:", objc_msgSend(v18, "stringWithUTF8String:", v19));
            v21 = v20;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if ((v21 & 1) != 0)
              {
LABEL_33:
                v10 = 11;
                v11 = *v5;
                v12 = (uint64_t **)(this + 1);
                v13 = (uint64_t **)(this + 1);
                if (*v5)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else if ((v20 & 1) != 0)
            {
              goto LABEL_33;
            }
            v22 = (void *)MEMORY[0x1E0CB3940];
            PowerBudget::asString(12, (char *)__p);
            if (v39 >= 0)
              v23 = __p;
            else
              v23 = (void **)__p[0];
            v24 = objc_msgSend(v7, "isEqualToString:", objc_msgSend(v22, "stringWithUTF8String:", v23));
            v25 = v24;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if ((v25 & 1) != 0)
              {
LABEL_41:
                v10 = 12;
                v11 = *v5;
                v12 = (uint64_t **)(this + 1);
                v13 = (uint64_t **)(this + 1);
                if (*v5)
                  goto LABEL_54;
                goto LABEL_58;
              }
            }
            else if ((v24 & 1) != 0)
            {
              goto LABEL_41;
            }
            v26 = (void *)MEMORY[0x1E0CB3940];
            PowerBudget::asString(13, (char *)__p);
            if (v39 >= 0)
              v27 = __p;
            else
              v27 = (void **)__p[0];
            v28 = objc_msgSend(v7, "isEqualToString:", objc_msgSend(v26, "stringWithUTF8String:", v27));
            v29 = v28;
            if (v39 < 0)
            {
              operator delete(__p[0]);
              if ((v29 & 1) != 0)
              {
LABEL_51:
                v10 = 13;
                v11 = *v5;
                v12 = (uint64_t **)(this + 1);
                v13 = (uint64_t **)(this + 1);
                if (!*v5)
                  goto LABEL_58;
                while (1)
                {
LABEL_54:
                  while (1)
                  {
                    v13 = (uint64_t **)v11;
                    v30 = *((unsigned __int8 *)v11 + 28);
                    if (v30 <= v10)
                      break;
                    v11 = *v13;
                    v12 = v13;
                    if (!*v13)
                      goto LABEL_58;
                  }
                  if (v30 >= v10)
                    break;
                  v11 = v13[1];
                  if (!v11)
                  {
                    v12 = v13 + 1;
                    goto LABEL_58;
                  }
                }
                v31 = v13;
LABEL_6:
                *((_DWORD *)v31 + 8) = v9;
                v31[36] = 1;
                continue;
              }
            }
            else if ((v28 & 1) != 0)
            {
              goto LABEL_51;
            }
          }
        }
        v4 = -[NSDictionary countByEnumeratingWithState:objects:count:](a2, "countByEnumeratingWithState:objects:count:", &v40, v44, 16);
      }
      while (v4);
    }
  }
}

void sub_1BF706114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF706184(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v3;
  _Unwind_Resume(a1);
}

void PowerBudget::~PowerBudget(PowerBudget *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;

  *((_QWORD *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v2;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;

  *((_QWORD *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = v2;
}

void PowerBudget::PowerBudget(PowerBudget *this, const PowerBudget *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
  *((_QWORD *)this + 3) = objc_msgSend(*((id *)a2 + 3), "copy");
}

{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
  *((_QWORD *)this + 3) = objc_msgSend(*((id *)a2 + 3), "copy");
}

void sub_1BF7062C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

void sub_1BF706340(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::PowerBudget(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;

  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = 0u;
  v6 = &v7;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  if (&v6 != (__int128 **)a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a2, v6, &v7);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v6, (_QWORD *)v7);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v4;
  return a1;
}

void sub_1BF70640C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t v11;
  uint64_t v12;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v11, *(_QWORD **)(v11 + 8));
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)v11 = v12;
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));

    *(_QWORD *)(a1 + 24) = objc_msgSend(*(id *)(a2 + 24), "copy");
  }
  return a1;
}

void PowerBudget::PowerBudget(PowerBudget *this, BudgetData *a2)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 3) = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_1BF7064E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(id *this, id *a2)
{

  this[3] = 0;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *a2, a2 + 1);
}

void sub_1BF7065A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

_QWORD *PowerBudget::PowerBudget(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[3] = 0;
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a1, (_QWORD *)*a2, a2 + 1);
  return a1;
}

{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[2] = 0;
  a1[3] = 0;
  a1[3] = 0;
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a1, (_QWORD *)*a2, a2 + 1);
  return a1;
}

void sub_1BF706620(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

void PowerBudget::fill(uint64_t a1, uint64_t a2)
{

  *(_QWORD *)(a1 + 24) = 0;
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
}

void sub_1BF7066E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)v1 = v2;
  _Unwind_Resume(a1);
}

id PowerBudget::getNSDict(id *this)
{
  _QWORD *v2;
  id *v3;
  _QWORD *v4;
  id *v5;
  id *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];

  this[3] = 0;
  v10[0] = off_1E79207C8;
  v10[1] = this;
  v2 = v10;
  v11 = v10;
  v3 = (id *)*this;
  if (*this == this + 1)
  {
    v8 = 4;
    goto LABEL_17;
  }
  v4 = v10;
  while ((*(unsigned int (**)(_QWORD *, uint64_t, id *))(*v4 + 48))(v4, (uint64_t)v3 + 28, v3 + 4))
  {
    v5 = (id *)v3[1];
    v6 = v3;
    if (v5)
    {
      do
      {
        v3 = v5;
        v5 = (id *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v3 = (id *)v6[2];
        v7 = *v3 == v6;
        v6 = v3;
      }
      while (!v7);
    }
    if (v3 == this + 1)
      break;
    v4 = v11;
    if (!v11)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  v2 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v2 = v10;
    goto LABEL_17;
  }
  if (v11)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*v2 + 8 * v8))();
  }
  return this[3];
}

void sub_1BF70682C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void PowerBudget::getData(PowerBudget *this@<X0>, PowerBudget *a2@<X8>)
{
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)a2 = (char *)a2 + 8;
  if (a2 != this)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)a2, *(_QWORD **)this, (_QWORD *)this + 1);
}

void sub_1BF7068AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t PowerBudget::get(uint64_t **a1, unsigned int a2)
{
  char v2;
  unsigned __int8 *v4;
  uint64_t **v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;

  v2 = a2;
  v5 = a1 + 1;
  v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[28];
        if (v7 <= a2)
          break;
        v4 = (unsigned __int8 *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = v6;
    v6 = operator new(0x28uLL);
    *((_BYTE *)v6 + 28) = v2;
    *((_BYTE *)v6 + 32) = 0;
    *((_BYTE *)v6 + 36) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = v6;
    v9 = (uint64_t *)**a1;
    v10 = v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *PowerBudget::set(uint64_t *result, unsigned int a2, int a3)
{
  char v3;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t **v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  if (a2 <= 0xD)
  {
    v3 = a2;
    if (((1 << a2) & 0x3C07) != 0)
    {
      v5 = result;
      v7 = (uint64_t **)(result + 1);
      v6 = (unsigned __int8 *)result[1];
      if (v6)
      {
        while (1)
        {
          while (1)
          {
            v8 = v6;
            v9 = v6[28];
            if (v9 <= a2)
              break;
            v6 = (unsigned __int8 *)*v8;
            v7 = (uint64_t **)v8;
            if (!*v8)
              goto LABEL_10;
          }
          if (v9 >= a2)
            break;
          v6 = (unsigned __int8 *)v8[1];
          if (!v6)
          {
            v7 = (uint64_t **)(v8 + 1);
            goto LABEL_10;
          }
        }
      }
      else
      {
        v8 = result + 1;
LABEL_10:
        v10 = v8;
        v8 = operator new(0x28uLL);
        *((_BYTE *)v8 + 28) = v3;
        *((_BYTE *)v8 + 32) = 0;
        *((_BYTE *)v8 + 36) = 0;
        *v8 = 0;
        v8[1] = 0;
        v8[2] = v10;
        *v7 = v8;
        v11 = *(_QWORD *)*v5;
        v12 = v8;
        if (v11)
        {
          *v5 = v11;
          v12 = *v7;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
        ++v5[2];
      }
      *((_DWORD *)v8 + 8) = a3;
      *((_BYTE *)v8 + 36) = 1;
    }
  }
  return result;
}

void PowerBudget::asString(int a1@<W0>, char *a2@<X8>)
{
  char *v2;
  id *v3;
  const char *v4;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  size_t v11;
  std::string::size_type v12;
  std::string *p_dst;
  const char *v14;
  size_t v15;
  std::string::size_type v16;
  std::string *v17;
  const char *v18;
  size_t v19;
  std::string::size_type v20;
  std::string *v21;
  const char *v22;
  size_t v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  size_t v30;
  std::string *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  size_t v46;
  __int128 v47;
  std::string __dst;
  std::string v49;

  v2 = a2;
  switch(a1)
  {
    case 0:
      v3 = (id *)MEMORY[0x1E0D09960];
      goto LABEL_5;
    case 1:
      v3 = (id *)MEMORY[0x1E0D09958];
      goto LABEL_5;
    case 2:
      v3 = (id *)MEMORY[0x1E0D09970];
LABEL_5:
      v4 = (const char *)objc_msgSend(*v3, "UTF8String");
      v5 = strlen(v4);
      if (v5 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v6 = v5;
      if (v5 >= 0x17)
      {
        v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v5 | 7) != 0x17)
          v7 = v5 | 7;
        v8 = v7 + 1;
        v9 = (char *)operator new(v7 + 1);
        *((_QWORD *)v2 + 1) = v6;
        *((_QWORD *)v2 + 2) = v8 | 0x8000000000000000;
        *(_QWORD *)v2 = v9;
        v2 = v9;
      }
      else
      {
        v2[23] = v5;
        if (!v5)
          goto LABEL_13;
      }
      memmove(v2, v4, v6);
LABEL_13:
      v2[v6] = 0;
      return;
    case 10:
      v10 = (const char *)objc_msgSend((id)*MEMORY[0x1E0D09988], "UTF8String");
      v11 = strlen(v10);
      if (v11 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_56;
      v12 = v11;
      if (v11 >= 0x17)
      {
        v26 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v26 = v11 | 7;
        v27 = v26 + 1;
        p_dst = (std::string *)operator new(v26 + 1);
        __dst.__r_.__value_.__l.__size_ = v12;
        __dst.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v11;
        p_dst = &__dst;
        if (!v11)
          goto LABEL_35;
      }
      memmove(p_dst, v10, v12);
LABEL_35:
      p_dst->__r_.__value_.__s.__data_[v12] = 0;
      v28 = std::string::append(&__dst, ".", 1uLL);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = strlen((const char *)*MEMORY[0x1E0CFB300]);
      v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E0CFB300], v30);
      goto LABEL_51;
    case 11:
      v14 = (const char *)objc_msgSend((id)*MEMORY[0x1E0D09988], "UTF8String");
      v15 = strlen(v14);
      if (v15 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_56;
      v16 = v15;
      if (v15 >= 0x17)
      {
        v32 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v15 | 7) != 0x17)
          v32 = v15 | 7;
        v33 = v32 + 1;
        v17 = (std::string *)operator new(v32 + 1);
        __dst.__r_.__value_.__l.__size_ = v16;
        __dst.__r_.__value_.__r.__words[2] = v33 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v15;
        v17 = &__dst;
        if (!v15)
          goto LABEL_40;
      }
      memmove(v17, v14, v16);
LABEL_40:
      v17->__r_.__value_.__s.__data_[v16] = 0;
      v34 = std::string::append(&__dst, ".", 1uLL);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = strlen((const char *)*MEMORY[0x1E0CFB2E8]);
      v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E0CFB2E8], v36);
      goto LABEL_51;
    case 12:
      v18 = (const char *)objc_msgSend((id)*MEMORY[0x1E0D09988], "UTF8String");
      v19 = strlen(v18);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_56;
      v20 = v19;
      if (v19 >= 0x17)
      {
        v37 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v37 = v19 | 7;
        v38 = v37 + 1;
        v21 = (std::string *)operator new(v37 + 1);
        __dst.__r_.__value_.__l.__size_ = v20;
        __dst.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v19;
        v21 = &__dst;
        if (!v19)
          goto LABEL_45;
      }
      memmove(v21, v18, v20);
LABEL_45:
      v21->__r_.__value_.__s.__data_[v20] = 0;
      v39 = std::string::append(&__dst, ".", 1uLL);
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = strlen((const char *)*MEMORY[0x1E0CFB2F0]);
      v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E0CFB2F0], v41);
      goto LABEL_51;
    case 13:
      v22 = (const char *)objc_msgSend((id)*MEMORY[0x1E0D09988], "UTF8String");
      v23 = strlen(v22);
      if (v23 > 0x7FFFFFFFFFFFFFF7)
LABEL_56:
        std::string::__throw_length_error[abi:ne180100]();
      v24 = v23;
      if (v23 >= 0x17)
      {
        v42 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v23 | 7) != 0x17)
          v42 = v23 | 7;
        v43 = v42 + 1;
        v25 = (std::string *)operator new(v42 + 1);
        __dst.__r_.__value_.__l.__size_ = v24;
        __dst.__r_.__value_.__r.__words[2] = v43 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v23;
        v25 = &__dst;
        if (!v23)
          goto LABEL_50;
      }
      memmove(v25, v22, v24);
LABEL_50:
      v25->__r_.__value_.__s.__data_[v24] = 0;
      v44 = std::string::append(&__dst, ".", 1uLL);
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = strlen((const char *)*MEMORY[0x1E0CFB2F8]);
      v31 = std::string::append(&v49, (const std::string::value_type *)*MEMORY[0x1E0CFB2F8], v46);
LABEL_51:
      v47 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      *((_QWORD *)v2 + 2) = *((_QWORD *)&v31->__r_.__value_.__l + 2);
      *(_OWORD *)v2 = v47;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v49.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
      }
      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        return;
      }
      operator delete(__dst.__r_.__value_.__l.__data_);
      return;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      return;
  }
}

