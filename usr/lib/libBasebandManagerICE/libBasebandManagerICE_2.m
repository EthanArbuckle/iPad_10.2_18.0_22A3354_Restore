void sub_1BF637D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,xpc_object_t object,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,xpc_object_t a48)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void std::map<std::string,xpc::dict>::insert_or_assign[abi:ne180100]<xpc::dict>(_QWORD **a1, const std::string::value_type **a2, xpc_object_t *a3)
{
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  const std::string::value_type *v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  size_t v14;
  size_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  size_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  std::string *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v31;

  v6 = (uint64_t *)(a1 + 1);
  v7 = a1[1];
  if (!v7)
    goto LABEL_41;
  v8 = *((char *)a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *a2;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = (uint64_t *)(a1 + 1);
  do
  {
    while (1)
    {
      v12 = *((char *)v7 + 55);
      v13 = v12 >= 0 ? v7 + 4 : (uint64_t *)v7[4];
      v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : v7[5];
      v15 = v10 >= v14 ? v14 : v10;
      v16 = memcmp(v13, v9, v15);
      if (v16)
        break;
      if (v14 < v10)
        goto LABEL_11;
LABEL_9:
      v11 = v7;
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_26;
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    v7 = (uint64_t *)v7[1];
  }
  while (v7);
LABEL_26:
  if (v11 == v6)
    goto LABEL_40;
  v17 = *((char *)v11 + 55);
  if (v17 >= 0)
    v18 = v11 + 4;
  else
    v18 = (_QWORD *)v11[4];
  if (v17 >= 0)
    v19 = *((unsigned __int8 *)v11 + 55);
  else
    v19 = v11[5];
  if (v19 >= v10)
    v20 = v10;
  else
    v20 = v19;
  v21 = memcmp(v9, v18, v20);
  if (v21)
  {
    if ((v21 & 0x80000000) == 0)
      goto LABEL_38;
LABEL_40:
    v6 = v11;
LABEL_41:
    v30 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    v31 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
    v24 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(a1, v6, &v31, &v30, (const void **)a2);
    if (!*v24)
    {
      v25 = (uint64_t **)v24;
      v26 = (uint64_t *)operator new(0x40uLL);
      v27 = (std::string *)(v26 + 4);
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v27, *a2, (std::string::size_type)a2[1]);
      }
      else
      {
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        v26[6] = (uint64_t)a2[2];
      }
      v26[7] = (uint64_t)*a3;
      *a3 = xpc_null_create();
      v28 = v31;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v28;
      *v25 = v26;
      v29 = (_QWORD *)**a1;
      if (v29)
      {
        *a1 = v29;
        v26 = *v25;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
      a1[2] = (_QWORD *)((char *)a1[2] + 1);
    }
  }
  else
  {
    if (v10 < v19)
      goto LABEL_40;
LABEL_38:
    v22 = (uint64_t)*a3;
    *a3 = xpc_null_create();
    v23 = (_QWORD *)v11[7];
    v11[7] = v22;
    xpc_release(v23);
  }
}

void sub_1BF6380B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::submitEvent(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  BOOL v6;
  BOOL v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  const void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  NSObject *v20;
  const void **v21;
  const void ***v22;
  const void **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  const void ***v27;
  const std::string::value_type *v28;
  char *v29;
  size_t v30;
  const void *v31;
  const void **v32;
  uint64_t v33;
  uint64_t v34;
  const void **v35;
  xpc_object_t v36;
  std::string v37;
  xpc_object_t object;
  const void *__dst[3];
  uint64_t *v40;
  uint64_t *v41;
  _BYTE buf[24];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      v7 = a3[2] == 0;
    else
      v7 = 1;
    if (!v7)
    {
LABEL_12:
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v8 = xpc_dictionary_create(0, 0, 0);
      v9 = v8;
      if (v8)
      {
        object = v8;
      }
      else
      {
        v9 = xpc_null_create();
        object = v9;
        if (!v9)
        {
          v10 = xpc_null_create();
          v9 = 0;
          goto LABEL_19;
        }
      }
      if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v9);
        goto LABEL_20;
      }
      v10 = xpc_null_create();
LABEL_19:
      object = v10;
LABEL_20:
      xpc_release(v9);
      AnalyticsHelper::append(v11, (uint64_t)&object, a3);
      v12 = (const void *)*MEMORY[0x1E0CFBC90];
      v13 = strlen((const char *)*MEMORY[0x1E0CFBC90]);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = (const void *)v13;
      if (v13 >= 0x17)
      {
        v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v13 | 7) != 0x17)
          v16 = v13 | 7;
        v17 = v16 + 1;
        v15 = (const void **)operator new(v16 + 1);
        __dst[1] = v14;
        __dst[2] = (const void *)(v17 | 0x8000000000000000);
        __dst[0] = v15;
      }
      else
      {
        HIBYTE(__dst[2]) = v13;
        v15 = __dst;
        if (!v13)
          goto LABEL_28;
      }
      memmove(v15, v12, (size_t)v14);
LABEL_28:
      *((_BYTE *)v14 + (_QWORD)v15) = 0;
      v18 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1 + 104, __dst);
      v19 = v18;
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete((void *)__dst[0]);
        if ((uint64_t *)(a1 + 112) == v19)
        {
LABEL_30:
          v20 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
LABEL_58:
            v28 = (const std::string::value_type *)a2;
            if (*(char *)(a2 + 23) < 0)
              v28 = *(const std::string::value_type **)a2;
            v29 = (char *)MEMORY[0x1C3B8CCDC](object);
            memset(__dst, 170, sizeof(__dst));
            v30 = strlen(v29);
            if (v30 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            v31 = (const void *)v30;
            if (v30 >= 0x17)
            {
              v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v30 | 7) != 0x17)
                v33 = v30 | 7;
              v34 = v33 + 1;
              v32 = (const void **)operator new(v33 + 1);
              __dst[1] = v31;
              __dst[2] = (const void *)(v34 | 0x8000000000000000);
              __dst[0] = v32;
            }
            else
            {
              HIBYTE(__dst[2]) = v30;
              v32 = __dst;
              if (!v30)
                goto LABEL_68;
            }
            memcpy(v32, v29, (size_t)v31);
LABEL_68:
            *((_BYTE *)v31 + (_QWORD)v32) = 0;
            free(v29);
            v35 = __dst;
            if (SHIBYTE(__dst[2]) < 0)
              v35 = (const void **)__dst[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v28;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v35;
            _os_log_debug_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEBUG, "#D Submitting CoreAnalytics event[%s] - %s", buf, 0x16u);
            if (SHIBYTE(__dst[2]) < 0)
              operator delete((void *)__dst[0]);
          }
LABEL_48:
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v37 = *(std::string *)a2;
          v36 = object;
          if (object)
            xpc_retain(object);
          else
            v36 = xpc_null_create();
          metric::sendCoreAnalyticsEvent((const void **)&v37.__r_.__value_.__l.__data_, &v36);
          xpc_release(v36);
          v36 = 0;
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v37.__r_.__value_.__l.__data_);
          xpc_release(object);
          return;
        }
      }
      else if ((uint64_t *)(a1 + 112) == v18)
      {
        goto LABEL_30;
      }
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = &buf[8];
      v21 = (const void **)v19[7];
      v22 = (const void ***)(v19 + 8);
      if (v21 == (const void **)(v19 + 8))
      {
LABEL_47:
        AnalyticsHelper::append((uint64_t)v18, (uint64_t)&object, buf);
        std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(char **)&buf[8]);
        v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          goto LABEL_58;
        goto LABEL_48;
      }
      while (1)
      {
        v40 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        v41 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
        v18 = std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>((uint64_t **)buf, (uint64_t *)&buf[8], &v41, &v40, v21 + 4);
        if (*v18)
        {
          v23 = (const void **)v21[1];
          if (v23)
            goto LABEL_42;
        }
        else
        {
          v24 = (uint64_t **)v18;
          memset(__dst, 170, sizeof(__dst));
          std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(__dst, (uint64_t)buf, (uint64_t)(v21 + 4));
          v25 = v41;
          v26 = (uint64_t *)__dst[0];
          *(_QWORD *)__dst[0] = 0;
          v26[1] = 0;
          v26[2] = (uint64_t)v25;
          *v24 = v26;
          if (**(_QWORD **)buf)
          {
            *(_QWORD *)buf = **(_QWORD **)buf;
            v26 = *v24;
          }
          v18 = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)&buf[8], v26);
          ++*(_QWORD *)&buf[16];
          v23 = (const void **)v21[1];
          if (v23)
          {
            do
            {
LABEL_42:
              v27 = (const void ***)v23;
              v23 = (const void **)*v23;
            }
            while (v23);
            goto LABEL_35;
          }
        }
        do
        {
          v27 = (const void ***)v21[2];
          v6 = *v27 == v21;
          v21 = (const void **)v27;
        }
        while (!v6);
LABEL_35:
        v21 = (const void **)v27;
        if (v27 == v22)
          goto LABEL_47;
      }
    }
  }
  else
  {
    if (*(_BYTE *)(a2 + 23))
      v6 = a3[2] == 0;
    else
      v6 = 1;
    if (!v6)
      goto LABEL_12;
  }
}

void sub_1BF63857C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void AnalyticsHelper::append(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  xpc_object_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD applier[5];
  std::string v12;

  v3 = a3 + 1;
  v4 = (_QWORD *)*a3;
  if ((_QWORD *)*a3 != a3 + 1)
  {
    v6 = MEMORY[0x1E0C809B0];
    do
    {
      memset(&v12, 170, sizeof(v12));
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)v4[4], v4[5]);
        v7 = (xpc_object_t)v4[7];
        if (v7)
        {
LABEL_6:
          xpc_retain(v7);
          goto LABEL_9;
        }
      }
      else
      {
        v12 = *(std::string *)(v4 + 4);
        v7 = (xpc_object_t)v4[7];
        if (v7)
          goto LABEL_6;
      }
      v7 = xpc_null_create();
LABEL_9:
      applier[0] = v6;
      applier[1] = 0x40000000;
      applier[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke;
      applier[3] = &__block_descriptor_tmp_13_1;
      applier[4] = a2;
      xpc_dictionary_apply(v7, applier);
      xpc_release(v7);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v12.__r_.__value_.__l.__data_);
        v8 = (_QWORD *)v4[1];
        if (v8)
        {
          do
          {
LABEL_13:
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
          goto LABEL_3;
        }
      }
      else
      {
        v8 = (_QWORD *)v4[1];
        if (v8)
          goto LABEL_13;
      }
      do
      {
        v9 = (_QWORD *)v4[2];
        v10 = *v9 == (_QWORD)v4;
        v4 = v9;
      }
      while (!v10);
LABEL_3:
      v4 = v9;
    }
    while (v9 != v3);
  }
}

void sub_1BF638760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  xpc_release(v20);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke(uint64_t a1, char *__s, void *a3)
{
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  char v13;
  void *v14;
  void **v15;
  size_t v16;
  _QWORD v19[5];
  void *__dst[3];

  memset(__dst, 170, sizeof(__dst));
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = (void *)(v10 | 0x8000000000000000);
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(__dst[2]) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memcpy(v8, __s, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  v11 = strlen((const char *)*MEMORY[0x1E0CFB9D8]);
  v12 = (void *)v11;
  v13 = HIBYTE(__dst[2]);
  if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
  {
    if (v11 != -1)
    {
      v14 = (void *)HIBYTE(__dst[2]);
      v15 = __dst;
      goto LABEL_14;
    }
LABEL_27:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1)
    goto LABEL_27;
  v15 = (void **)__dst[0];
  v14 = __dst[1];
LABEL_14:
  if (v14 >= v12)
    v16 = (size_t)v12;
  else
    v16 = (size_t)v14;
  if (!memcmp(v15, (const void *)*MEMORY[0x1E0CFB9D8], v16) && v14 == v12)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2;
    v19[3] = &__block_descriptor_tmp_18;
    v19[4] = *(_QWORD *)(a1 + 32);
    xpc_dictionary_apply(a3, v19);
    v13 = HIBYTE(__dst[2]);
  }
  if (v13 < 0)
    operator delete(__dst[0]);
  return 1;
}

void sub_1BF638910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN15AnalyticsHelper6appendERN3xpc4dictERNSt3__13mapINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEES1_NS3_4lessISA_EENS8_INS3_4pairIKSA_S1_EEEEEE_block_invoke_2(uint64_t a1, const char *a2, xpc_object_t object)
{
  xpc_object_t v5;
  xpc_object_t v6;

  if (object)
  {
    v5 = object;
    xpc_retain(object);
  }
  else
  {
    v5 = xpc_null_create();
  }
  xpc_dictionary_set_value(**(xpc_object_t **)(a1 + 32), a2, v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  return 1;
}

void analytics::registerCallbackForTimedEventImpl(const char *a1)
{
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  unsigned __int8 v9;
  NSObject *v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[2];
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string __dst;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  abm::AWDHelperGetConnection(&v17);
  if (!v17)
    goto LABEL_20;
  v2 = strlen(a1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
  p_dst = &__dst;
  if (v2)
LABEL_9:
    memcpy(p_dst, a1, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  v7 = std::string::insert(&__dst, 0, "com.apple.Telephony.", 0x14uLL);
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v16 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v10 = qword_1ED70F6F8;
    if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_INFO))
    {
LABEL_15:
      v11 = __p;
      if (v16 < 0)
        v11 = (void **)__p[0];
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_INFO, "Register for 24h timer: event[%s]", (uint8_t *)&__dst, 0xCu);
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v10 = qword_1ED70F6F8;
    if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_INFO))
      goto LABEL_15;
  }
  wis::WISServerConnection::RegisterCallbackForTimer();
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
LABEL_20:
  v12 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v13 = (unint64_t *)(v18 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF638C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void ___ZN9analytics33registerCallbackForTimedEventImplEPKcN8dispatch5queueEU13block_pointerFvNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *))(v2 + 16))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF638D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 15;
  strcpy(a1, "stats.analytics");
}

uint64_t ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7918AB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7918AB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF638EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF638F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<AnalyticsHelper>::shared_ptr[abi:ne180100]<AnalyticsHelper,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7918AF0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF639034(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF639054(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AnalyticsHelper *,std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper *)#1},std::allocator<AnalyticsHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AnalyticsHelperE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AnalyticsHelper> ctu::SharedSynchronizable<AnalyticsHelper>::make_shared_ptr<AnalyticsHelper>(AnalyticsHelper*)::{lambda(AnalyticsHelper*)#1}::operator() const(AnalyticsHelper*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::Loggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7918AB0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF6391C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7918AB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<AnalyticsHelper,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7918AB0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::destroy(*((_QWORD *)a1 + 1));
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((char **)a1 + 8));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::destroy(*((_QWORD *)a1 + 1));
    xpc_release(*((xpc_object_t *)a1 + 7));
    *((_QWORD *)a1 + 7) = 0;
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

xpc_object_t std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__construct_node<std::pair<std::string const,xpc::dict> const&>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  void *v8;
  xpc_object_t result;

  v5 = a2 + 8;
  memset(a1, 170, 24);
  v6 = (char *)operator new(0x40uLL);
  *a1 = v6;
  a1[1] = v5;
  *((_BYTE *)a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  v8 = *(void **)(a3 + 24);
  *((_QWORD *)v6 + 7) = v8;
  if (v8)
  {
    result = xpc_retain(v8);
  }
  else
  {
    result = xpc_null_create();
    *((_QWORD *)v6 + 7) = result;
  }
  *((_BYTE *)a1 + 16) = 1;
  return result;
}

void sub_1BF639404(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,xpc::dict>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      xpc_release(*(xpc_object_t *)(v2 + 56));
      *(_QWORD *)(v2 + 56) = 0;
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,xpc::dict>,std::__map_value_compare<std::string,std::__value_type<std::string,xpc::dict>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,xpc::dict>>>::__find_equal<std::string>(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  int v24;
  const void *v25;
  size_t v26;
  int v27;
  const void *v28;
  size_t v29;
  size_t v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  _QWORD *v34;
  const void *v35;
  const void *v36;
  int v37;
  const void *v38;
  size_t v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  int v46;
  uint64_t *v47;
  size_t v48;
  size_t v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t **v53;
  _QWORD *v54;
  const void *v55;
  const void *v56;
  int v57;
  const void *v58;
  size_t v59;
  size_t v60;
  int v61;
  int v62;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *((char *)a2 + 55);
  if (v13 >= 0)
    v14 = a2 + 4;
  else
    v14 = (const void *)a2[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)a2 + 55);
  else
    v15 = a2[5];
  if (v15 >= v12)
    v16 = v12;
  else
    v16 = v15;
  v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15)
      goto LABEL_19;
LABEL_23:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
    }
    else
    {
      if (v19)
      {
        v20 = (uint64_t *)*a2;
        do
        {
          v21 = v20;
          v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        v22 = a2;
        do
        {
          v21 = (uint64_t *)v22[2];
          v23 = *v21 == (_QWORD)v22;
          v22 = v21;
        }
        while (v23);
      }
      v24 = *((char *)v21 + 55);
      if (v24 >= 0)
        v25 = v21 + 4;
      else
        v25 = (const void *)v21[4];
      if (v24 >= 0)
        v26 = *((unsigned __int8 *)v21 + 55);
      else
        v26 = v21[5];
      v27 = *((char *)a5 + 23);
      if (v27 >= 0)
        v28 = a5;
      else
        v28 = *a5;
      if (v27 >= 0)
        v29 = *((unsigned __int8 *)a5 + 23);
      else
        v29 = (size_t)a5[1];
      if (v29 >= v26)
        v30 = v26;
      else
        v30 = v29;
      v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0)
          goto LABEL_48;
      }
      else if (v26 >= v29)
      {
LABEL_48:
        v32 = *v8;
        if (!*v8)
        {
          v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          v33 = (uint64_t **)v32;
          v36 = (const void *)v32[4];
          v34 = v32 + 4;
          v35 = v36;
          v37 = *((char *)v34 + 23);
          if (v37 >= 0)
            v38 = v34;
          else
            v38 = v35;
          if (v37 >= 0)
            v39 = *((unsigned __int8 *)v34 + 23);
          else
            v39 = v34[1];
          if (v39 >= v29)
            v40 = v29;
          else
            v40 = v39;
          v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0)
              goto LABEL_50;
LABEL_64:
            v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0)
                goto LABEL_69;
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            v8 = v33 + 1;
            v32 = v33[1];
            if (!v32)
              goto LABEL_69;
          }
          else
          {
            if (v29 >= v39)
              goto LABEL_64;
LABEL_50:
            v32 = *v33;
            v8 = v33;
            if (!*v33)
              goto LABEL_69;
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0)
    goto LABEL_23;
LABEL_19:
  v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  v43 = a2[1];
  if (v43)
  {
    v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      v23 = *a4 == v45;
      v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    v46 = *((char *)a4 + 55);
    if (v46 >= 0)
      v47 = (uint64_t *)(a4 + 4);
    else
      v47 = a4[4];
    if (v46 >= 0)
      v48 = *((unsigned __int8 *)a4 + 55);
    else
      v48 = (size_t)a4[5];
    if (v48 >= v12)
      v49 = v12;
    else
      v49 = v48;
    v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        v51 = *v8;
        if (*v8)
        {
          v52 = a3;
          while (1)
          {
            v53 = (uint64_t **)v51;
            v56 = (const void *)v51[4];
            v54 = v51 + 4;
            v55 = v56;
            v57 = *((char *)v54 + 23);
            if (v57 >= 0)
              v58 = v54;
            else
              v58 = v55;
            if (v57 >= 0)
              v59 = *((unsigned __int8 *)v54 + 23);
            else
              v59 = v54[1];
            if (v59 >= v12)
              v60 = v12;
            else
              v60 = v59;
            v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0)
                goto LABEL_97;
LABEL_111:
              v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0)
                  goto LABEL_123;
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              v8 = v53 + 1;
              v51 = v53[1];
              if (!v51)
                goto LABEL_123;
            }
            else
            {
              if (v12 >= v59)
                goto LABEL_111;
LABEL_97:
              v51 = *v53;
              v8 = v53;
              if (!*v53)
                goto LABEL_123;
            }
          }
        }
        v53 = v8;
        v52 = a3;
LABEL_123:
        *v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

void RadioModule::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  dispatch_object_t object;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 v48;
  void (*v49)(uint64_t);
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x168uLL);
  v5 = (std::__shared_weak_count *)a1[1];
  v46 = *a1;
  v47 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = v48;
    v48 = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (*((_QWORD *)&v48 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v48 + 1) + 16))(*((_QWORD *)&v48 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v48 + 1));
      }
    }
    v9 = off_1ED70F4D0;
  }
  v16 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v17 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t))(*(_QWORD *)v9 + 24))(&object, v9);
  RadioModule::RadioModule((uint64_t)v4, &v46, &object);
  *a2 = v4;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E7919780;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v19;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v4 + 16);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    v23 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v4 + 15) = v4;
    *((_QWORD *)v4 + 16) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v29 = (_QWORD *)*a2;
    if (!*(_QWORD *)(*a2 + 104))
      goto LABEL_47;
    goto LABEL_32;
  }
LABEL_31:
  v29 = (_QWORD *)*a2;
  if (!*(_QWORD *)(*a2 + 104))
    goto LABEL_47;
LABEL_32:
  v30 = (std::__shared_weak_count *)v29[16];
  if (!v30 || (v31 = v29[15], (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  *(_QWORD *)&v48 = v31;
  *((_QWORD *)&v48 + 1) = v32;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v29 + 7));
  v34 = v31 + 48;
  if (!v31)
    v34 = 0;
  v52 = v34;
  v53 = v33;
  v48 = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  v35 = v53;
  if (v53)
  {
    v36 = (unint64_t *)&v53->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
  if (*((_QWORD *)&v48 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
LABEL_47:
  if (object)
    dispatch_release(object);
  if (v16)
  {
    v41 = (unint64_t *)&v16->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  v43 = *a2;
  v44 = (uint64_t *)(*a2 + 120);
  *(_QWORD *)&v48 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v48 + 1) = 0x40000000;
  v49 = ___ZN11RadioModule4initEv_block_invoke;
  v50 = &__block_descriptor_tmp_19;
  v51 = v43;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v44, (uint64_t)&v48);
}

void sub_1BF639BB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, uint64_t a13, uint64_t a14, char a15)
{
  __break(1u);
}

void sub_1BF639C18()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF639C5CLL);
}

void sub_1BF639C28()
{
  JUMPOUT(0x1BF639C60);
}

void sub_1BF639C34()
{
  JUMPOUT(0x1BF639C6CLL);
}

void sub_1BF639C44()
{
  JUMPOUT(0x1BF639C78);
}

void RadioModule::init(RadioModule *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN11RadioModule4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_19;
  v1[4] = this;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)this + 15, (uint64_t)v1);
}

uint64_t RadioModule::RadioModule(uint64_t a1, uint64_t *a2, NSObject **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  NSObject *v11;
  void (**v12)(RadioModule *__hidden);
  const char *v13;
  unsigned __int8 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *initially_inactive;
  NSObject *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  uint64_t Controller;
  const void *v49;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  _BYTE v53[16];
  _QWORD v54[2];
  __int128 block;
  void (*v56)(uint64_t);
  void *v57;
  uint64_t *v58;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E7918B80;
  *(_QWORD *)(a1 + 48) = &unk_1E7918BF0;
  v51 = (_QWORD *)(a1 + 48);
  v11 = *a3;
  if (v11)
  {
    dispatch_retain(v11);
    v12 = *(void (***)(RadioModule *__hidden))a1;
  }
  else
  {
    v12 = off_1E7918B80;
  }
  v13 = (const char *)((uint64_t (*)(uint64_t))v12[2])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v53, "com.apple.telephony.abm", v13);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_8;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v15 = GetABMLogServer(void)::sLogServer;
    v16 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_17;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v15 = GetABMLogServer(void)::sLogServer;
    v16 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_17;
  }
  p_shared_owners = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldxr(p_shared_owners);
  while (__stxr(v18 + 1, p_shared_owners));
LABEL_17:
  if (v11)
    dispatch_retain(v11);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v20 = dispatch_queue_create_with_target_V2("radio.mod", initially_inactive, v11);
  dispatch_set_qos_class_floor(v20, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v20);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v20;
  if (v20)
    dispatch_retain(v20);
  *(_QWORD *)(a1 + 144) = v11;
  if (v11)
    dispatch_retain(v11);
  if (v20)
    dispatch_release(v20);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)(a1 + 48) = off_1E7919740;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  if (v16)
  {
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v54);
    *v51 = off_1E79197D0;
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v54);
    *v51 = off_1E79197D0;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v53);
  if (v11)
    dispatch_release(v11);
  *(_QWORD *)a1 = off_1E7918B80;
  *(_QWORD *)(a1 + 175) = 0;
  *(_QWORD *)(a1 + 48) = &unk_1E7918BF0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 183) = 0;
  *(_WORD *)(a1 + 191) = 768;
  radio::RFCalibration_t::RFCalibration_t((radio::RFCalibration_t *)(a1 + 200));
  *(_QWORD *)(a1 + 248) = xpc_null_create();
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_BYTE *)(a1 + 288) = 1;
  *(_BYTE *)(a1 + 296) = 0;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v56 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v57 = &__block_descriptor_tmp_13_8;
  v58 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v25 = unk_1ED70F6A0;
    v52 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_42;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v25 = unk_1ED70F6A0;
    v52 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_42;
  }
  v26 = (unint64_t *)(v25 + 8);
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + 1, v26));
LABEL_42:
  v28 = (void **)(a1 + 248);
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v29 = off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&block);
    v30 = block;
    block = 0uLL;
    v31 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v29 = off_1ED70F338;
  }
  v37 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  v54[0] = v29;
  v54[1] = *(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v38 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v37)
  {
    v40 = (unint64_t *)&v37->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *(_WORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 322) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 328;
  *(_QWORD *)(a1 + 336) = a1 + 328;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  v44 = xpc_dictionary_create(0, 0, 0);
  if (v44 || (v44 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v44) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v44);
      v45 = v44;
    }
    else
    {
      v45 = xpc_null_create();
    }
  }
  else
  {
    v45 = xpc_null_create();
    v44 = 0;
  }
  xpc_release(v44);
  v46 = xpc_null_create();
  v47 = *v28;
  *v28 = v45;
  xpc_release(v47);
  xpc_release(v46);
  Controller = TelephonyBasebandCreateController();
  v49 = *(const void **)(a1 + 352);
  *(_QWORD *)(a1 + 352) = Controller;
  if (v49)
    CFRelease(v49);
  return a1;
}

void sub_1BF63A380(_Unwind_Exception *a1, uint64_t a2, _QWORD *a3, ...)
{
  void **v3;
  xpc_object_t *v4;
  char *v5;
  va_list va;

  va_start(va, a3);
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 34));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 32));
  xpc::dict::~dict(v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 22));
  if (*v5 < 0)
    operator delete(v3[19]);
  ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(a3);
  Service::~Service((Service *)v3);
  _Unwind_Resume(a1);
}

void sub_1BF63A448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  Service *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v6)
    dispatch_release(v6);
  Service::~Service(v5);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

_QWORD *ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7919740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7919740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void RadioModule::~RadioModule(RadioModule *this)
{
  NSObject *v2;
  const void *v3;
  uint64_t v4;
  RadioModule *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  RadioModule *v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  uint8_t v31[16];

  *(_QWORD *)this = off_1E7918B80;
  *((_QWORD *)this + 6) = &unk_1E7918BF0;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v31, 2u);
  }
  v3 = (const void *)*((_QWORD *)this + 44);
  if (v3)
    CFRelease(v3);
  if (*((_QWORD *)this + 43))
  {
    v4 = *((_QWORD *)this + 41);
    v5 = (RadioModule *)*((_QWORD *)this + 42);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 43) = 0;
    if (v5 != (RadioModule *)((char *)this + 328))
    {
      do
      {
        v25 = (RadioModule *)*((_QWORD *)v5 + 1);
        v26 = (unsigned int *)*((_QWORD *)v5 + 3);
        if (v26)
        {
          v27 = v26 + 3;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
            (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 24))(v26);
        }
        operator delete(v5);
        v5 = v25;
      }
      while (v25 != (RadioModule *)((char *)this + 328));
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 39);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  xpc_release(*((xpc_object_t *)this + 31));
  *((_QWORD *)this + 31) = 0;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v16)
    goto LABEL_26;
  v17 = (unint64_t *)&v16->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_26:
    if ((*((char *)this + 175) & 0x80000000) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  if (*((char *)this + 175) < 0)
LABEL_27:
    operator delete(*((void **)this + 19));
LABEL_28:
  *((_QWORD *)this + 6) = off_1E7919740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v19 = *((_QWORD *)this + 18);
  if (v19)
    dispatch_release(v19);
  v20 = *((_QWORD *)this + 17);
  if (v20)
    dispatch_release(v20);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  *(_QWORD *)this = off_1E79228B8;
  v22 = *((_QWORD *)this + 3);
  if (v22)
  {
    v23 = *((_QWORD *)this + 4);
    v24 = (void *)*((_QWORD *)this + 3);
    if (v23 != v22)
    {
      do
      {
        if (*(char *)(v23 - 1) < 0)
          operator delete(*(void **)(v23 - 24));
        v23 -= 24;
      }
      while (v23 != v22);
      v24 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v22;
    operator delete(v24);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
}

{
  void *v1;

  RadioModule::~RadioModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'RadioModule::~RadioModule(RadioModule *this)
{
  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));
}

{
  void *v1;

  RadioModule::~RadioModule((RadioModule *)((char *)this - 48));
  operator delete(v1);
}

const char *RadioModule::getName(RadioModule *this)
{
  return "radio.mod";
}

void ___ZN11RadioModule4initEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 88);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing", v2, 2u);
  }
}

_BYTE *RadioModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void RadioModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_5_3;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11RadioModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1 + 41;
  for (i = (uint64_t *)v1[42]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = (unsigned int *)i[3];
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)i[2];
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (v1[43])
  {
    v14 = v1[41];
    v15 = (uint64_t *)v1[42];
    v16 = *v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    v1[43] = 0;
    if (v15 != v2)
    {
      do
      {
        v26 = (uint64_t *)v15[1];
        v27 = (unsigned int *)v15[3];
        if (v27)
        {
          v28 = v27 + 3;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
        }
        operator delete(v15);
        v15 = v26;
      }
      while (v26 != v2);
    }
  }
  v17 = (std::__shared_weak_count *)v1[35];
  v1[34] = 0;
  v1[35] = 0;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v1[33];
  v1[32] = 0;
  v1[33] = 0;
  if (!v20)
    goto LABEL_30;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v23)
      return;
  }
  else
  {
LABEL_30:
    v23 = (std::__shared_weak_count *)v1[23];
    v1[22] = 0;
    v1[23] = 0;
    if (!v23)
      return;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1BF63AB8C(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
    v6 = v1 + 3;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void RadioModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_93_0;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  const void *v43;
  size_t v44;
  size_t v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  const void *v51;
  size_t v52;
  size_t v53;
  void **v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  const void *v59;
  size_t v60;
  size_t v61;
  void **v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  void *v66;
  const void *v67;
  size_t v68;
  size_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  const void *v75;
  size_t v76;
  size_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void *v82;
  const void *v83;
  size_t v84;
  size_t v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  const void *v91;
  size_t v92;
  size_t v93;
  void **v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  const void *v99;
  size_t v100;
  size_t v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void *v106;
  const void *v107;
  size_t v108;
  size_t v109;
  void **v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  void *v114;
  const void *v115;
  size_t v116;
  size_t v117;
  void **v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  capabilities::abs *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  void **v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  void *v132;
  const void *v133;
  size_t v134;
  size_t v135;
  void **v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  void *v140;
  const void *v141;
  size_t v142;
  size_t v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  const void *v149;
  size_t v150;
  size_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  const void *v157;
  size_t v158;
  size_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void *v164;
  const void *v165;
  size_t v166;
  size_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  void *v172;
  const void *v173;
  size_t v174;
  size_t v175;
  void **v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  capabilities::abs *v181;
  const void *v182;
  size_t v183;
  size_t v184;
  void **v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  void *v189;
  const void *v190;
  size_t v191;
  size_t v192;
  void **v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  void *v197;
  const void *v198;
  size_t v199;
  size_t v200;
  void **v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  void *v205;
  const void *v206;
  size_t v207;
  size_t v208;
  void **v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  void *v213;
  _QWORD v214[5];
  std::__shared_weak_count *v215;
  const void *v216;
  _QWORD v217[5];
  std::__shared_weak_count *v218;
  const void *v219;
  _QWORD v220[5];
  std::__shared_weak_count *v221;
  const void *v222;
  _QWORD v223[6];
  std::__shared_weak_count *v224;
  const void *v225;
  _QWORD v226[6];
  std::__shared_weak_count *v227;
  const void *v228;
  _QWORD v229[6];
  std::__shared_weak_count *v230;
  const void *v231;
  _QWORD v232[6];
  std::__shared_weak_count *v233;
  const void *v234;
  _QWORD v235[6];
  std::__shared_weak_count *v236;
  const void *v237;
  _QWORD v238[6];
  std::__shared_weak_count *v239;
  const void *v240;
  _QWORD v241[6];
  std::__shared_weak_count *v242;
  const void *v243;
  _QWORD v244[6];
  std::__shared_weak_count *v245;
  const void *v246;
  _QWORD v247[6];
  std::__shared_weak_count *v248;
  const void *v249;
  _QWORD v250[6];
  std::__shared_weak_count *v251;
  const void *v252;
  _QWORD v253[6];
  std::__shared_weak_count *v254;
  const void *v255;
  _QWORD v256[6];
  std::__shared_weak_count *v257;
  const void *v258;
  _QWORD v259[6];
  std::__shared_weak_count *v260;
  const void *v261;
  _QWORD v262[6];
  std::__shared_weak_count *v263;
  const void *v264;
  _QWORD v265[6];
  std::__shared_weak_count *v266;
  const void *v267;
  _QWORD v268[6];
  std::__shared_weak_count *v269;
  const void *v270;
  _QWORD v271[6];
  std::__shared_weak_count *v272;
  const void *v273;
  _QWORD v274[6];
  std::__shared_weak_count *v275;
  const void *v276;
  _QWORD v277[6];
  std::__shared_weak_count *v278;
  const void *v279;
  _QWORD v280[6];
  std::__shared_weak_count *v281;
  const void *v282;
  _QWORD v283[6];
  std::__shared_weak_count *v284;
  const void *v285;
  _QWORD aBlock[6];
  std::__shared_weak_count *v287;
  const void *v288;
  void **__dst;
  size_t v290;
  unint64_t v291;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[16];
  if (!v2 || (v3 = v1[15], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFB720];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB720]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v290 = v12;
    v291 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v291) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_13_2;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v287 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v288 = v18;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v288);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBDB0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBDB0]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v290 = v21;
    v291 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v291) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v283[0] = v16;
  v283[1] = 1174405120;
  v283[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14;
  v283[3] = &__block_descriptor_tmp_20_5;
  v283[4] = v1;
  v283[5] = v3;
  v284 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v283);
  v285 = v26;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v285);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFBEC8];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBEC8]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v290 = v29;
    v291 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v291) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v280[0] = v16;
  v280[1] = 1174405120;
  v280[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_21;
  v280[3] = &__block_descriptor_tmp_27_2;
  v280[4] = v1;
  v280[5] = v3;
  v281 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v280);
  v282 = v34;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v282);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v35 = (const void *)*MEMORY[0x1E0CFBED8];
  v36 = strlen((const char *)*MEMORY[0x1E0CFBED8]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = (void **)operator new(v39 + 1);
    v290 = v37;
    v291 = v40 | 0x8000000000000000;
    __dst = v38;
  }
  else
  {
    HIBYTE(v291) = v36;
    v38 = (void **)&__dst;
    if (!v36)
      goto LABEL_59;
  }
  memmove(v38, v35, v37);
LABEL_59:
  *((_BYTE *)v38 + v37) = 0;
  v277[0] = v16;
  v277[1] = 1174405120;
  v277[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_28;
  v277[3] = &__block_descriptor_tmp_34_2;
  v277[4] = v1;
  v277[5] = v3;
  v278 = v5;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v277);
  v279 = v42;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v279);
  if (v42)
    _Block_release(v42);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v43 = (const void *)*MEMORY[0x1E0CFBEC0];
  v44 = strlen((const char *)*MEMORY[0x1E0CFBEC0]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = v44;
  if (v44 >= 0x17)
  {
    v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v47 = v44 | 7;
    v48 = v47 + 1;
    v46 = (void **)operator new(v47 + 1);
    v290 = v45;
    v291 = v48 | 0x8000000000000000;
    __dst = v46;
  }
  else
  {
    HIBYTE(v291) = v44;
    v46 = (void **)&__dst;
    if (!v44)
      goto LABEL_73;
  }
  memmove(v46, v43, v45);
LABEL_73:
  *((_BYTE *)v46 + v45) = 0;
  v274[0] = v16;
  v274[1] = 1174405120;
  v274[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_35;
  v274[3] = &__block_descriptor_tmp_40_1;
  v274[4] = v1;
  v274[5] = v3;
  v275 = v5;
  do
    v49 = __ldxr(p_shared_weak_owners);
  while (__stxr(v49 + 1, p_shared_weak_owners));
  v50 = _Block_copy(v274);
  v276 = v50;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v276);
  if (v50)
    _Block_release(v50);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v51 = (const void *)*MEMORY[0x1E0CFBC40];
  v52 = strlen((const char *)*MEMORY[0x1E0CFBC40]);
  if (v52 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v53 = v52;
  if (v52 >= 0x17)
  {
    v55 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v52 | 7) != 0x17)
      v55 = v52 | 7;
    v56 = v55 + 1;
    v54 = (void **)operator new(v55 + 1);
    v290 = v53;
    v291 = v56 | 0x8000000000000000;
    __dst = v54;
  }
  else
  {
    HIBYTE(v291) = v52;
    v54 = (void **)&__dst;
    if (!v52)
      goto LABEL_87;
  }
  memmove(v54, v51, v53);
LABEL_87:
  *((_BYTE *)v54 + v53) = 0;
  v271[0] = v16;
  v271[1] = 1174405120;
  v271[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_41;
  v271[3] = &__block_descriptor_tmp_44_1;
  v271[4] = v1;
  v271[5] = v3;
  v272 = v5;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = _Block_copy(v271);
  v273 = v58;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v273);
  if (v58)
    _Block_release(v58);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v59 = (const void *)*MEMORY[0x1E0CFBC50];
  v60 = strlen((const char *)*MEMORY[0x1E0CFBC50]);
  if (v60 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v61 = v60;
  if (v60 >= 0x17)
  {
    v63 = (v60 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v60 | 7) != 0x17)
      v63 = v60 | 7;
    v64 = v63 + 1;
    v62 = (void **)operator new(v63 + 1);
    v290 = v61;
    v291 = v64 | 0x8000000000000000;
    __dst = v62;
  }
  else
  {
    HIBYTE(v291) = v60;
    v62 = (void **)&__dst;
    if (!v60)
      goto LABEL_101;
  }
  memmove(v62, v59, v61);
LABEL_101:
  *((_BYTE *)v62 + v61) = 0;
  v268[0] = v16;
  v268[1] = 1174405120;
  v268[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_45;
  v268[3] = &__block_descriptor_tmp_52_1;
  v268[4] = v1;
  v268[5] = v3;
  v269 = v5;
  do
    v65 = __ldxr(p_shared_weak_owners);
  while (__stxr(v65 + 1, p_shared_weak_owners));
  v66 = _Block_copy(v268);
  v270 = v66;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v270);
  if (v66)
    _Block_release(v66);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v67 = (const void *)*MEMORY[0x1E0CFB0A8];
  v68 = strlen((const char *)*MEMORY[0x1E0CFB0A8]);
  if (v68 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v69 = v68;
  if (v68 >= 0x17)
  {
    v71 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v68 | 7) != 0x17)
      v71 = v68 | 7;
    v72 = v71 + 1;
    v70 = (void **)operator new(v71 + 1);
    v290 = v69;
    v291 = v72 | 0x8000000000000000;
    __dst = v70;
  }
  else
  {
    HIBYTE(v291) = v68;
    v70 = (void **)&__dst;
    if (!v68)
      goto LABEL_115;
  }
  memmove(v70, v67, v69);
LABEL_115:
  *((_BYTE *)v70 + v69) = 0;
  v265[0] = v16;
  v265[1] = 1174405120;
  v265[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_53;
  v265[3] = &__block_descriptor_tmp_58_2;
  v265[4] = v1;
  v265[5] = v3;
  v266 = v5;
  do
    v73 = __ldxr(p_shared_weak_owners);
  while (__stxr(v73 + 1, p_shared_weak_owners));
  v74 = _Block_copy(v265);
  v267 = v74;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v267);
  if (v74)
    _Block_release(v74);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v75 = (const void *)*MEMORY[0x1E0CFC020];
  v76 = strlen((const char *)*MEMORY[0x1E0CFC020]);
  if (v76 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v77 = v76;
  if (v76 >= 0x17)
  {
    v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v79 = v76 | 7;
    v80 = v79 + 1;
    v78 = (void **)operator new(v79 + 1);
    v290 = v77;
    v291 = v80 | 0x8000000000000000;
    __dst = v78;
  }
  else
  {
    HIBYTE(v291) = v76;
    v78 = (void **)&__dst;
    if (!v76)
      goto LABEL_129;
  }
  memmove(v78, v75, v77);
LABEL_129:
  *((_BYTE *)v78 + v77) = 0;
  v262[0] = v16;
  v262[1] = 1174405120;
  v262[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_59;
  v262[3] = &__block_descriptor_tmp_60_1;
  v262[4] = v1;
  v262[5] = v3;
  v263 = v5;
  do
    v81 = __ldxr(p_shared_weak_owners);
  while (__stxr(v81 + 1, p_shared_weak_owners));
  v82 = _Block_copy(v262);
  v264 = v82;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v264);
  if (v82)
    _Block_release(v82);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v83 = (const void *)*MEMORY[0x1E0CFB430];
  v84 = strlen((const char *)*MEMORY[0x1E0CFB430]);
  if (v84 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v85 = v84;
  if (v84 >= 0x17)
  {
    v87 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v84 | 7) != 0x17)
      v87 = v84 | 7;
    v88 = v87 + 1;
    v86 = (void **)operator new(v87 + 1);
    v290 = v85;
    v291 = v88 | 0x8000000000000000;
    __dst = v86;
  }
  else
  {
    HIBYTE(v291) = v84;
    v86 = (void **)&__dst;
    if (!v84)
      goto LABEL_143;
  }
  memmove(v86, v83, v85);
LABEL_143:
  *((_BYTE *)v86 + v85) = 0;
  v259[0] = v16;
  v259[1] = 1174405120;
  v259[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61;
  v259[3] = &__block_descriptor_tmp_62;
  v259[4] = v1;
  v259[5] = v3;
  v260 = v5;
  do
    v89 = __ldxr(p_shared_weak_owners);
  while (__stxr(v89 + 1, p_shared_weak_owners));
  v90 = _Block_copy(v259);
  v261 = v90;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v261);
  if (v90)
    _Block_release(v90);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v91 = (const void *)*MEMORY[0x1E0CFBB50];
  v92 = strlen((const char *)*MEMORY[0x1E0CFBB50]);
  if (v92 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v93 = v92;
  if (v92 >= 0x17)
  {
    v95 = (v92 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v92 | 7) != 0x17)
      v95 = v92 | 7;
    v96 = v95 + 1;
    v94 = (void **)operator new(v95 + 1);
    v290 = v93;
    v291 = v96 | 0x8000000000000000;
    __dst = v94;
  }
  else
  {
    HIBYTE(v291) = v92;
    v94 = (void **)&__dst;
    if (!v92)
      goto LABEL_157;
  }
  memmove(v94, v91, v93);
LABEL_157:
  *((_BYTE *)v94 + v93) = 0;
  v256[0] = v16;
  v256[1] = 1174405120;
  v256[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_63;
  v256[3] = &__block_descriptor_tmp_64_1;
  v256[4] = v1;
  v256[5] = v3;
  v257 = v5;
  do
    v97 = __ldxr(p_shared_weak_owners);
  while (__stxr(v97 + 1, p_shared_weak_owners));
  v98 = _Block_copy(v256);
  v258 = v98;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v258);
  if (v98)
    _Block_release(v98);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v99 = (const void *)*MEMORY[0x1E0CFBCE8];
  v100 = strlen((const char *)*MEMORY[0x1E0CFBCE8]);
  if (v100 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v101 = v100;
  if (v100 >= 0x17)
  {
    v103 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v100 | 7) != 0x17)
      v103 = v100 | 7;
    v104 = v103 + 1;
    v102 = (void **)operator new(v103 + 1);
    v290 = v101;
    v291 = v104 | 0x8000000000000000;
    __dst = v102;
  }
  else
  {
    HIBYTE(v291) = v100;
    v102 = (void **)&__dst;
    if (!v100)
      goto LABEL_171;
  }
  memmove(v102, v99, v101);
LABEL_171:
  *((_BYTE *)v102 + v101) = 0;
  v253[0] = v16;
  v253[1] = 1174405120;
  v253[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_65;
  v253[3] = &__block_descriptor_tmp_66_0;
  v253[4] = v1;
  v253[5] = v3;
  v254 = v5;
  do
    v105 = __ldxr(p_shared_weak_owners);
  while (__stxr(v105 + 1, p_shared_weak_owners));
  v106 = _Block_copy(v253);
  v255 = v106;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v255);
  if (v106)
    _Block_release(v106);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v107 = (const void *)*MEMORY[0x1E0CFB688];
  v108 = strlen((const char *)*MEMORY[0x1E0CFB688]);
  if (v108 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v109 = v108;
  if (v108 >= 0x17)
  {
    v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v111 = v108 | 7;
    v112 = v111 + 1;
    v110 = (void **)operator new(v111 + 1);
    v290 = v109;
    v291 = v112 | 0x8000000000000000;
    __dst = v110;
  }
  else
  {
    HIBYTE(v291) = v108;
    v110 = (void **)&__dst;
    if (!v108)
      goto LABEL_185;
  }
  memmove(v110, v107, v109);
LABEL_185:
  *((_BYTE *)v110 + v109) = 0;
  v250[0] = v16;
  v250[1] = 1174405120;
  v250[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_67;
  v250[3] = &__block_descriptor_tmp_68_2;
  v250[4] = v1;
  v250[5] = v3;
  v251 = v5;
  do
    v113 = __ldxr(p_shared_weak_owners);
  while (__stxr(v113 + 1, p_shared_weak_owners));
  v114 = _Block_copy(v250);
  v252 = v114;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v252);
  if (v114)
    _Block_release(v114);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v115 = (const void *)*MEMORY[0x1E0CFBFC0];
  v116 = strlen((const char *)*MEMORY[0x1E0CFBFC0]);
  if (v116 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v117 = v116;
  if (v116 >= 0x17)
  {
    v119 = (v116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v116 | 7) != 0x17)
      v119 = v116 | 7;
    v120 = v119 + 1;
    v118 = (void **)operator new(v119 + 1);
    v290 = v117;
    v291 = v120 | 0x8000000000000000;
    __dst = v118;
  }
  else
  {
    HIBYTE(v291) = v116;
    v118 = (void **)&__dst;
    if (!v116)
      goto LABEL_199;
  }
  memmove(v118, v115, v117);
LABEL_199:
  *((_BYTE *)v118 + v117) = 0;
  v247[0] = v16;
  v247[1] = 1174405120;
  v247[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69;
  v247[3] = &__block_descriptor_tmp_70_1;
  v247[4] = v1;
  v247[5] = v3;
  v248 = v5;
  do
    v121 = __ldxr(p_shared_weak_owners);
  while (__stxr(v121 + 1, p_shared_weak_owners));
  v122 = _Block_copy(v247);
  v249 = v122;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v249);
  if (v122)
    _Block_release(v122);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (capabilities::abs::supportsRFSelfTest(v123))
  {
    v124 = (const void *)*MEMORY[0x1E0CFBF48];
    v125 = strlen((const char *)*MEMORY[0x1E0CFBF48]);
    if (v125 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v126 = v125;
    if (v125 >= 0x17)
    {
      v129 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v125 | 7) != 0x17)
        v129 = v125 | 7;
      v130 = v129 + 1;
      v127 = (void **)operator new(v129 + 1);
      v290 = v126;
      v291 = v130 | 0x8000000000000000;
      __dst = v127;
    }
    else
    {
      HIBYTE(v291) = v125;
      v127 = (void **)&__dst;
      if (!v125)
        goto LABEL_216;
    }
    memmove(v127, v124, v126);
LABEL_216:
    *((_BYTE *)v127 + v126) = 0;
    v244[0] = v16;
    v244[1] = 1174405120;
    v244[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71;
    v244[3] = &__block_descriptor_tmp_72_0;
    v244[4] = v1;
    v244[5] = v3;
    v245 = v5;
    do
      v131 = __ldxr(p_shared_weak_owners);
    while (__stxr(v131 + 1, p_shared_weak_owners));
    v132 = _Block_copy(v244);
    v246 = v132;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v246);
    if (v132)
      _Block_release(v132);
    if (SHIBYTE(v291) < 0)
      operator delete(__dst);
    v133 = (const void *)*MEMORY[0x1E0CFBF50];
    v134 = strlen((const char *)*MEMORY[0x1E0CFBF50]);
    if (v134 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v135 = v134;
    if (v134 >= 0x17)
    {
      v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v134 | 7) != 0x17)
        v137 = v134 | 7;
      v138 = v137 + 1;
      v136 = (void **)operator new(v137 + 1);
      v290 = v135;
      v291 = v138 | 0x8000000000000000;
      __dst = v136;
    }
    else
    {
      HIBYTE(v291) = v134;
      v136 = (void **)&__dst;
      if (!v134)
        goto LABEL_230;
    }
    memmove(v136, v133, v135);
LABEL_230:
    *((_BYTE *)v136 + v135) = 0;
    v241[0] = v16;
    v241[1] = 1174405120;
    v241[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_73;
    v241[3] = &__block_descriptor_tmp_74;
    v241[4] = v1;
    v241[5] = v3;
    v242 = v5;
    do
      v139 = __ldxr(p_shared_weak_owners);
    while (__stxr(v139 + 1, p_shared_weak_owners));
    v140 = _Block_copy(v241);
    v243 = v140;
    Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v243);
    if (v140)
      _Block_release(v140);
    if (SHIBYTE(v291) < 0)
      operator delete(__dst);
    v141 = (const void *)*MEMORY[0x1E0CFC010];
    v142 = strlen((const char *)*MEMORY[0x1E0CFC010]);
    if (v142 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v143 = v142;
    if (v142 >= 0x17)
    {
      v145 = (v142 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v142 | 7) != 0x17)
        v145 = v142 | 7;
      v146 = v145 + 1;
      v144 = (void **)operator new(v145 + 1);
      v290 = v143;
      v291 = v146 | 0x8000000000000000;
      __dst = v144;
    }
    else
    {
      HIBYTE(v291) = v142;
      v144 = (void **)&__dst;
      if (!v142)
      {
LABEL_244:
        *((_BYTE *)v144 + v143) = 0;
        v238[0] = v16;
        v238[1] = 1174405120;
        v238[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_75;
        v238[3] = &__block_descriptor_tmp_76_0;
        v238[4] = v1;
        v238[5] = v3;
        v239 = v5;
        do
          v147 = __ldxr(p_shared_weak_owners);
        while (__stxr(v147 + 1, p_shared_weak_owners));
        v148 = _Block_copy(v238);
        v240 = v148;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v240);
        if (v148)
          _Block_release(v148);
        if (SHIBYTE(v291) < 0)
          operator delete(__dst);
        if (v239)
          std::__shared_weak_count::__release_weak(v239);
        if (v242)
          std::__shared_weak_count::__release_weak(v242);
        if (v245)
          std::__shared_weak_count::__release_weak(v245);
        goto LABEL_256;
      }
    }
    memmove(v144, v141, v143);
    goto LABEL_244;
  }
  v128 = v1[11];
  if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_1BF566000, v128, OS_LOG_TYPE_DEFAULT, "#I RF Self Test not supported", (uint8_t *)&__dst, 2u);
  }
LABEL_256:
  v149 = (const void *)*MEMORY[0x1E0CFB898];
  v150 = strlen((const char *)*MEMORY[0x1E0CFB898]);
  if (v150 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v151 = v150;
  if (v150 >= 0x17)
  {
    v153 = (v150 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v150 | 7) != 0x17)
      v153 = v150 | 7;
    v154 = v153 + 1;
    v152 = (void **)operator new(v153 + 1);
    v290 = v151;
    v291 = v154 | 0x8000000000000000;
    __dst = v152;
  }
  else
  {
    HIBYTE(v291) = v150;
    v152 = (void **)&__dst;
    if (!v150)
      goto LABEL_264;
  }
  memmove(v152, v149, v151);
LABEL_264:
  *((_BYTE *)v152 + v151) = 0;
  v235[0] = v16;
  v235[1] = 1174405120;
  v235[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_77;
  v235[3] = &__block_descriptor_tmp_78;
  v235[4] = v1;
  v235[5] = v3;
  v236 = v5;
  do
    v155 = __ldxr(p_shared_weak_owners);
  while (__stxr(v155 + 1, p_shared_weak_owners));
  v156 = _Block_copy(v235);
  v237 = v156;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v237);
  if (v156)
    _Block_release(v156);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v157 = (const void *)*MEMORY[0x1E0CFB5D8];
  v158 = strlen((const char *)*MEMORY[0x1E0CFB5D8]);
  if (v158 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v159 = v158;
  if (v158 >= 0x17)
  {
    v161 = (v158 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v158 | 7) != 0x17)
      v161 = v158 | 7;
    v162 = v161 + 1;
    v160 = (void **)operator new(v161 + 1);
    v290 = v159;
    v291 = v162 | 0x8000000000000000;
    __dst = v160;
  }
  else
  {
    HIBYTE(v291) = v158;
    v160 = (void **)&__dst;
    if (!v158)
      goto LABEL_278;
  }
  memmove(v160, v157, v159);
LABEL_278:
  *((_BYTE *)v160 + v159) = 0;
  v232[0] = v16;
  v232[1] = 1174405120;
  v232[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_79;
  v232[3] = &__block_descriptor_tmp_80_0;
  v232[4] = v1;
  v232[5] = v3;
  v233 = v5;
  do
    v163 = __ldxr(p_shared_weak_owners);
  while (__stxr(v163 + 1, p_shared_weak_owners));
  v164 = _Block_copy(v232);
  v234 = v164;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v234);
  if (v164)
    _Block_release(v164);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v165 = (const void *)*MEMORY[0x1E0CFB5E8];
  v166 = strlen((const char *)*MEMORY[0x1E0CFB5E8]);
  if (v166 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v167 = v166;
  if (v166 >= 0x17)
  {
    v169 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v166 | 7) != 0x17)
      v169 = v166 | 7;
    v170 = v169 + 1;
    v168 = (void **)operator new(v169 + 1);
    v290 = v167;
    v291 = v170 | 0x8000000000000000;
    __dst = v168;
  }
  else
  {
    HIBYTE(v291) = v166;
    v168 = (void **)&__dst;
    if (!v166)
      goto LABEL_292;
  }
  memmove(v168, v165, v167);
LABEL_292:
  *((_BYTE *)v168 + v167) = 0;
  v229[0] = v16;
  v229[1] = 1174405120;
  v229[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81;
  v229[3] = &__block_descriptor_tmp_82;
  v229[4] = v1;
  v229[5] = v3;
  v230 = v5;
  do
    v171 = __ldxr(p_shared_weak_owners);
  while (__stxr(v171 + 1, p_shared_weak_owners));
  v172 = _Block_copy(v229);
  v231 = v172;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v231);
  if (v172)
    _Block_release(v172);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v173 = (const void *)*MEMORY[0x1E0CFB050];
  v174 = strlen((const char *)*MEMORY[0x1E0CFB050]);
  if (v174 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v175 = v174;
  if (v174 >= 0x17)
  {
    v177 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v174 | 7) != 0x17)
      v177 = v174 | 7;
    v178 = v177 + 1;
    v176 = (void **)operator new(v177 + 1);
    v290 = v175;
    v291 = v178 | 0x8000000000000000;
    __dst = v176;
  }
  else
  {
    HIBYTE(v291) = v174;
    v176 = (void **)&__dst;
    if (!v174)
      goto LABEL_306;
  }
  memmove(v176, v173, v175);
LABEL_306:
  *((_BYTE *)v176 + v175) = 0;
  v226[0] = v16;
  v226[1] = 1174405120;
  v226[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83;
  v226[3] = &__block_descriptor_tmp_84;
  v226[4] = v1;
  v226[5] = v3;
  v227 = v5;
  do
    v179 = __ldxr(p_shared_weak_owners);
  while (__stxr(v179 + 1, p_shared_weak_owners));
  v180 = _Block_copy(v226);
  v228 = v180;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v228);
  if (v180)
    _Block_release(v180);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (capabilities::abs::supportsRFFEScanData(v181))
  {
    v182 = (const void *)*MEMORY[0x1E0CFBE38];
    v183 = strlen((const char *)*MEMORY[0x1E0CFBE38]);
    if (v183 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v184 = v183;
    if (v183 >= 0x17)
    {
      v186 = (v183 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v183 | 7) != 0x17)
        v186 = v183 | 7;
      v187 = v186 + 1;
      v185 = (void **)operator new(v186 + 1);
      v290 = v184;
      v291 = v187 | 0x8000000000000000;
      __dst = v185;
    }
    else
    {
      HIBYTE(v291) = v183;
      v185 = (void **)&__dst;
      if (!v183)
      {
LABEL_321:
        *((_BYTE *)v185 + v184) = 0;
        v223[0] = v16;
        v223[1] = 1174405120;
        v223[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_85;
        v223[3] = &__block_descriptor_tmp_86;
        v223[4] = v1;
        v223[5] = v3;
        v224 = v5;
        do
          v188 = __ldxr(p_shared_weak_owners);
        while (__stxr(v188 + 1, p_shared_weak_owners));
        v189 = _Block_copy(v223);
        v225 = v189;
        Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v225);
        if (v189)
          _Block_release(v189);
        if (SHIBYTE(v291) < 0)
          operator delete(__dst);
        if (v224)
          std::__shared_weak_count::__release_weak(v224);
        goto LABEL_329;
      }
    }
    memmove(v185, v182, v184);
    goto LABEL_321;
  }
LABEL_329:
  v190 = (const void *)*MEMORY[0x1E0CFBD58];
  v191 = strlen((const char *)*MEMORY[0x1E0CFBD58]);
  if (v191 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v192 = v191;
  if (v191 >= 0x17)
  {
    v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v191 | 7) != 0x17)
      v194 = v191 | 7;
    v195 = v194 + 1;
    v193 = (void **)operator new(v194 + 1);
    v290 = v192;
    v291 = v195 | 0x8000000000000000;
    __dst = v193;
  }
  else
  {
    HIBYTE(v291) = v191;
    v193 = (void **)&__dst;
    if (!v191)
      goto LABEL_337;
  }
  memmove(v193, v190, v192);
LABEL_337:
  *((_BYTE *)v193 + v192) = 0;
  v220[0] = v16;
  v220[1] = 1174405120;
  v220[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_87;
  v220[3] = &__block_descriptor_tmp_88;
  v220[4] = v3;
  v221 = v5;
  do
    v196 = __ldxr(p_shared_weak_owners);
  while (__stxr(v196 + 1, p_shared_weak_owners));
  v197 = _Block_copy(v220);
  v222 = v197;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v222);
  if (v197)
    _Block_release(v197);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v198 = (const void *)*MEMORY[0x1E0CFBC58];
  v199 = strlen((const char *)*MEMORY[0x1E0CFBC58]);
  if (v199 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v200 = v199;
  if (v199 >= 0x17)
  {
    v202 = (v199 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v199 | 7) != 0x17)
      v202 = v199 | 7;
    v203 = v202 + 1;
    v201 = (void **)operator new(v202 + 1);
    v290 = v200;
    v291 = v203 | 0x8000000000000000;
    __dst = v201;
  }
  else
  {
    HIBYTE(v291) = v199;
    v201 = (void **)&__dst;
    if (!v199)
      goto LABEL_351;
  }
  memmove(v201, v198, v200);
LABEL_351:
  *((_BYTE *)v201 + v200) = 0;
  v217[0] = v16;
  v217[1] = 1174405120;
  v217[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_89;
  v217[3] = &__block_descriptor_tmp_90;
  v217[4] = v3;
  v218 = v5;
  do
    v204 = __ldxr(p_shared_weak_owners);
  while (__stxr(v204 + 1, p_shared_weak_owners));
  v205 = _Block_copy(v217);
  v219 = v205;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v219);
  if (v205)
    _Block_release(v205);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  v206 = (const void *)*MEMORY[0x1E0CFBC48];
  v207 = strlen((const char *)*MEMORY[0x1E0CFBC48]);
  if (v207 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v208 = v207;
  if (v207 >= 0x17)
  {
    v210 = (v207 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v207 | 7) != 0x17)
      v210 = v207 | 7;
    v211 = v210 + 1;
    v209 = (void **)operator new(v210 + 1);
    v290 = v208;
    v291 = v211 | 0x8000000000000000;
    __dst = v209;
  }
  else
  {
    HIBYTE(v291) = v207;
    v209 = (void **)&__dst;
    if (!v207)
      goto LABEL_365;
  }
  memmove(v209, v206, v208);
LABEL_365:
  *((_BYTE *)v209 + v208) = 0;
  v214[0] = v16;
  v214[1] = 1174405120;
  v214[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_91;
  v214[3] = &__block_descriptor_tmp_92_0;
  v214[4] = v3;
  v215 = v5;
  do
    v212 = __ldxr(p_shared_weak_owners);
  while (__stxr(v212 + 1, p_shared_weak_owners));
  v213 = _Block_copy(v214);
  v216 = v213;
  Service::registerCommandHandler((uint64_t)v1, (uint64_t)&__dst, &v216);
  if (v213)
    _Block_release(v213);
  if (SHIBYTE(v291) < 0)
    operator delete(__dst);
  if (v215)
    std::__shared_weak_count::__release_weak(v215);
  if (v218)
    std::__shared_weak_count::__release_weak(v218);
  if (v221)
    std::__shared_weak_count::__release_weak(v221);
  if (v227)
    std::__shared_weak_count::__release_weak(v227);
  if (v230)
    std::__shared_weak_count::__release_weak(v230);
  if (v233)
    std::__shared_weak_count::__release_weak(v233);
  if (v236)
    std::__shared_weak_count::__release_weak(v236);
  if (v248)
    std::__shared_weak_count::__release_weak(v248);
  if (v251)
    std::__shared_weak_count::__release_weak(v251);
  if (v254)
    std::__shared_weak_count::__release_weak(v254);
  if (v257)
    std::__shared_weak_count::__release_weak(v257);
  if (v260)
    std::__shared_weak_count::__release_weak(v260);
  if (v263)
    std::__shared_weak_count::__release_weak(v263);
  if (v266)
    std::__shared_weak_count::__release_weak(v266);
  if (v269)
    std::__shared_weak_count::__release_weak(v269);
  if (v272)
    std::__shared_weak_count::__release_weak(v272);
  if (v275)
    std::__shared_weak_count::__release_weak(v275);
  if (v278)
    std::__shared_weak_count::__release_weak(v278);
  if (v281)
    std::__shared_weak_count::__release_weak(v281);
  if (v284)
    std::__shared_weak_count::__release_weak(v284);
  if (v287)
    std::__shared_weak_count::__release_weak(v287);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF63C830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a69;
  std::__shared_weak_count *v69;
  const void *v70;
  uint64_t v71;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;

  if (v70)
    _Block_release(v70);
  if (a37)
    std::__shared_weak_count::__release_weak(a37);
  if (*(char *)(v71 - 105) < 0)
    operator delete(*(void **)(v71 - 128));
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  if (a53)
    std::__shared_weak_count::__release_weak(a53);
  if (a61)
    std::__shared_weak_count::__release_weak(a61);
  if (a69)
    std::__shared_weak_count::__release_weak(a69);
  if (STACK[0x2E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x2E0]);
  if (STACK[0x320])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x320]);
  if (STACK[0x360])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x360]);
  if (STACK[0x3A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3A0]);
  if (STACK[0x3E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x3E0]);
  if (STACK[0x420])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x420]);
  if (STACK[0x460])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x460]);
  if (STACK[0x4A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4A0]);
  if (STACK[0x4E0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x4E0]);
  if (STACK[0x520])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x520]);
  if (STACK[0x560])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x560]);
  if (STACK[0x5A0])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)STACK[0x5A0]);
  v73 = *(std::__shared_weak_count **)(v71 - 208);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
  v74 = *(std::__shared_weak_count **)(v71 - 144);
  if (v74)
    std::__shared_weak_count::__release_weak(v74);
  std::__shared_weak_count::__release_weak(v69);
  _Unwind_Resume(a1);
}

void sub_1BF63CFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a69;

  if (!a69)
    JUMPOUT(0x1BF63CF00);
  JUMPOUT(0x1BF63CEFCLL);
}

void sub_1BF63CFC8()
{
  JUMPOUT(0x1BF63CF00);
}

void sub_1BF63CFD0()
{
  if (!STACK[0x320])
    JUMPOUT(0x1BF63CF18);
  JUMPOUT(0x1BF63CF14);
}

void sub_1BF63CFE0()
{
  JUMPOUT(0x1BF63CF18);
}

void sub_1BF63CFE8()
{
  if (!STACK[0x3A0])
    JUMPOUT(0x1BF63CF30);
  JUMPOUT(0x1BF63CF2CLL);
}

void sub_1BF63CFF8()
{
  JUMPOUT(0x1BF63CF30);
}

void sub_1BF63D000()
{
  if (!STACK[0x420])
    JUMPOUT(0x1BF63CF48);
  JUMPOUT(0x1BF63CF44);
}

void sub_1BF63D010()
{
  JUMPOUT(0x1BF63CF48);
}

void sub_1BF63D018()
{
  if (!STACK[0x4A0])
    JUMPOUT(0x1BF63CF60);
  JUMPOUT(0x1BF63CF5CLL);
}

void sub_1BF63D028()
{
  JUMPOUT(0x1BF63CF60);
}

void sub_1BF63D030()
{
  if (!STACK[0x520])
    JUMPOUT(0x1BF63CF78);
  JUMPOUT(0x1BF63CF74);
}

void sub_1BF63D040()
{
  JUMPOUT(0x1BF63CF78);
}

void sub_1BF63D048()
{
  if (!STACK[0x5A0])
    JUMPOUT(0x1BF63CF90);
  JUMPOUT(0x1BF63CF8CLL);
}

void sub_1BF63D058()
{
  JUMPOUT(0x1BF63CF90);
}

void sub_1BF63D060()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 144))
    JUMPOUT(0x1BF63CFA8);
  JUMPOUT(0x1BF63CFA4);
}

void sub_1BF63D070(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  xpc_object_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  NSObject *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const __CFDictionary *v18;
  uint64_t (*v19)(uint64_t);
  const __CFNumber *v20;
  const __CFNumber *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  void **v27;
  xpc_object_t v28;
  xpc_object_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  _QWORD v32[2];
  int64_t valuePtr;
  int64_t value;
  void *v35[2];
  uint64_t v36;
  xpc_object_t xdict;
  unsigned int v38;
  std::__shared_weak_count *v40;
  uint8_t buf[16];
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v40 = v8;
  if (!v8)
    return;
  if (!a1[5])
  {
    v11 = v8;
LABEL_39:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  v38 = 0;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v9;
  if (v9)
  {
    xdict = v9;
  }
  else
  {
    v10 = xpc_null_create();
    xdict = v10;
    if (!v10)
    {
      v12 = xpc_null_create();
      v10 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8CD78](v10) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v10);
    goto LABEL_13;
  }
  v12 = xpc_null_create();
LABEL_12:
  xdict = v12;
LABEL_13:
  xpc_release(v10);
  v35[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  v36 = 0xAAAAAAAAAAAAAALL;
  value = 0;
  v35[0] = (void *)0xAAAAAAAAAAAAAA00;
  valuePtr = 0;
  v13 = *a2;
  v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!v13)
    v14 = 0;
  if (v14)
  {
    v38 = -534716416;
    v15 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v13;
      _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }
    v16 = xpc_string_create("Unknown error");
    if (!v16)
      v16 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v16);
    v17 = xpc_null_create();
    xpc_release(v16);
    xpc_release(v17);
  }
  else
  {
    v18 = *a3;
    v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!*a3)
      v19 = 0;
    if (v19)
    {
      v32[0] = 0xAAAAAAAAAAAAAAAALL;
      v32[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v32, v18);
      v20 = (const __CFNumber *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)v32, (const __CFString *)*MEMORY[0x1E0DDF810]);
      v21 = v20;
      if (v20)
      {
        CFNumberGetValue(v20, kCFNumberLongType, &valuePtr);
        CFRelease(v21);
        LODWORD(value) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v32, (const __CFString *)*MEMORY[0x1E0DDF838]);
      }
      ctu::cf::map_adapter::getString();
      *(_OWORD *)v35 = *(_OWORD *)buf;
      v36 = v42;
      HIBYTE(v42) = 0;
      buf[0] = 0;
      v22 = xpc_int64_create(valuePtr);
      if (!v22)
        v22 = xpc_null_create();
      v23 = xdict;
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB7A0], v22);
      v24 = xpc_null_create();
      xpc_release(v22);
      xpc_release(v24);
      v25 = xpc_int64_create((int)value);
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFBCA0], v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      if (v36 >= 0)
        v27 = v35;
      else
        v27 = (void **)v35[0];
      v28 = xpc_string_create((const char *)v27);
      if (!v28)
        v28 = xpc_null_create();
      xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB8D8], v28);
      v29 = xpc_null_create();
      xpc_release(v28);
      xpc_release(v29);
      MEMORY[0x1C3B8B8B4](v32);
    }
  }
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v38, &xdict);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
  xpc_release(xdict);
  v11 = v40;
  if (v40)
    goto LABEL_39;
}

void sub_1BF63D480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_14(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15;
        v12[3] = &__block_descriptor_tmp_19_4;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_15(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  void (**v8)(void *, std::string *);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void *v23;
  void **v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _QWORD v27[5];
  void *aBlock;
  void (**v29)(void *, std::string *);
  unsigned int v30;
  void *__p[4];
  std::string __dst;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBDB0];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBDB0]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v9 = v4 | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        v12 = std::string::append(&__dst, v11, 0x20uLL);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v16 = *(_QWORD *)(a1 + 40);
            v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v19 = __p[1];
            if (v19)
            {
              v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v20) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v20);
                  v21 = v20;
                }
                else
                {
                  v21 = xpc_null_create();
                }
              }
              else
              {
                v21 = xpc_null_create();
                v20 = 0;
              }
              xpc_release(v20);
              v22 = xpc_null_create();
              v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0)
                v24 = __p;
              else
                v24 = (void **)__p[0];
              v25 = xpc_string_create((const char *)v24);
              if (!v25)
                v25 = xpc_null_create();
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E0CFB0D0], v25);
              v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v17 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v17 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v18 = *(_QWORD *)(a1 + 40);
        v15 = (uint64_t *)(a1 + 40);
        if (!v18)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 1174405120;
  v27[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16;
  v27[3] = &__block_descriptor_tmp_18_0;
  v27[4] = v2;
  v7 = *(void **)(a1 + 40);
  if (v7)
    v7 = _Block_copy(v7);
  aBlock = v7;
  v8 = (void (**)(void *, std::string *))_Block_copy(v27);
  v29 = v8;
  RadioModule::getVersion_sync((uint64_t)v2, &v29);
  if (v8)
    _Block_release(v8);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1BF63DA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::getVersion_sync(uint64_t a1, void (***a2)(void *, std::string *))
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string *v12;
  int v13;
  void (**v14)(void *, std::string *);
  std::string::size_type v15;
  unint64_t v16;
  void (**v17)(void *, std::string *);
  void *v18;
  NSObject *v19;
  CommandDriverFactory *v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  dispatch_object_t object;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD aBlock[6];
  std::__shared_weak_count *v48;
  void *v49;
  void *v50;
  dispatch_object_t v51;
  std::string v52;

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = (std::string *)(a1 + 152);
    v13 = *(char *)(a1 + 175);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    v12 = (std::string *)(a1 + 152);
    v13 = *(char *)(a1 + 175);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_9:
      if (v13)
      {
        v14 = *a2;
        v52 = *v12;
        goto LABEL_14;
      }
      goto LABEL_16;
    }
  }
  v15 = *(_QWORD *)(a1 + 160);
  if (v15)
  {
    v14 = *a2;
    std::string::__init_copy_ctor_external(&v52, v12->__r_.__value_.__l.__data_, v15);
LABEL_14:
    v14[2](v14, &v52);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    goto LABEL_68;
  }
LABEL_16:
  v50 = (void *)0xAAAAAAAAAAAAAAAALL;
  v51 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_103;
  aBlock[4] = a1;
  aBlock[5] = v5;
  v48 = v7;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = *a2;
  if (*a2)
    v17 = (void (**)(void *, std::string *))_Block_copy(v17);
  v49 = v17;
  v18 = _Block_copy(aBlock);
  v19 = *(NSObject **)(a1 + 136);
  if (v19)
    dispatch_retain(v19);
  v50 = v18;
  v51 = v19;
  v45 = 0xAAAAAAAAAAAAAAAALL;
  v46 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v20 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v21 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v20);
    v22 = *(_OWORD *)&v52.__r_.__value_.__l.__data_;
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
    v23 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v22;
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    size = (std::__shared_weak_count *)v52.__r_.__value_.__l.__size_;
    if (v52.__r_.__value_.__l.__size_)
    {
      v27 = (unint64_t *)(v52.__r_.__value_.__l.__size_ + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v21 = off_1ED70F4D0;
  }
  v29 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v41 = v21;
  v42 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v30 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v21 + 16))(&v43, v21);
  v45 = 0;
  v46 = 0;
  if (v44)
  {
    v46 = std::__shared_weak_count::lock(v44);
    if (v46)
      v45 = v43;
    if (v44)
      std::__shared_weak_count::__release_weak(v44);
  }
  if (!v29)
    goto LABEL_46;
  v32 = (unint64_t *)&v29->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
    v34 = v45;
    if (v45)
      goto LABEL_47;
  }
  else
  {
LABEL_46:
    v34 = v45;
    if (v45)
    {
LABEL_47:
      v35 = v50;
      if (v50)
        v35 = _Block_copy(v50);
      v39 = v35;
      object = v51;
      if (v51)
        dispatch_retain(v51);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v34 + 112))(v34, &v39);
      if (object)
        dispatch_release(object);
      if (v39)
        _Block_release(v39);
    }
  }
  v36 = v46;
  if (v46)
  {
    v37 = (unint64_t *)&v46->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v51)
    dispatch_release(v51);
  if (v50)
    _Block_release(v50);
  if (v49)
    _Block_release(v49);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
LABEL_68:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF63DEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 96);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
  {
    std::__shared_weak_count::__release_weak(a23);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_16(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  char *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  os_unfair_lock_s *v13;
  _QWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  size_t v26;
  __int128 *p_dst;
  xpc_object_t v28;
  xpc_object_t v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  CFTypeID v36;
  const __CFDictionary *v37;
  const void *v38;
  size_t v39;
  size_t v40;
  void *p_p;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  const char *v46;
  xpc_object_t v47;
  xpc_object_t v48;
  size_t v49;
  size_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  size_t v58;
  size_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  xpc_object_t v65;
  xpc_object_t v66;
  size_t v67;
  size_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  size_t v76;
  size_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  const char *v82;
  xpc_object_t v83;
  xpc_object_t v84;
  CFTypeRef v85;
  void *__p;
  std::__shared_weak_count *v87;
  unint64_t v88;
  _QWORD v89[2];
  CFTypeRef v90;
  __int128 __dst;
  int64_t v92;
  CFTypeRef cf;
  xpc_object_t xdict;
  unsigned int v95;
  uint64_t v96;

  v4 = *(_QWORD *)(a1 + 32);
  v95 = 0;
  v5 = xpc_dictionary_create(0, 0, 0);
  v6 = v5;
  if (v5)
  {
    xdict = v5;
  }
  else
  {
    v6 = xpc_null_create();
    xdict = v6;
    if (!v6)
    {
      v7 = xpc_null_create();
      v6 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v6) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  v7 = xpc_null_create();
LABEL_8:
  xdict = v7;
LABEL_9:
  xpc_release(v6);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)a2 + 23))
      goto LABEL_11;
LABEL_37:
    v95 = -534716416;
    v28 = xpc_string_create("Unknown error");
    if (!v28)
      v28 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB0D0], v28);
    v29 = xpc_null_create();
    xpc_release(v28);
    xpc_release(v29);
    goto LABEL_150;
  }
  if (!a2[1])
    goto LABEL_37;
LABEL_11:
  v8 = (char *)operator new(0x28uLL);
  strcpy(v8, "AppleBasebandServices_Manager-1180");
  v9 = xpc_string_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBAF0], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  operator delete(v8);
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  v11 = xpc_string_create((const char *)a2);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB330], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v13 = (os_unfair_lock_s *)off_1ED70F558;
  if (!off_1ED70F558)
  {
    v14 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v14, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v14[3] = 0;
    v14[4] = 0;
    *((_DWORD *)v14 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&__dst, (uint64_t)v14);
    v15 = __dst;
    __dst = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v15;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v13 = (os_unfair_lock_s *)off_1ED70F558;
  }
  __p = v13;
  v87 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v22 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v24 = (const void *)*MEMORY[0x1E0CFB478];
  v25 = strlen((const char *)*MEMORY[0x1E0CFB478]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = v25;
  if (v25 >= 0x17)
  {
    v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v30 = v25 | 7;
    v31 = v30 + 1;
    p_dst = (__int128 *)operator new(v30 + 1);
    *((_QWORD *)&__dst + 1) = v26;
    v92 = v31 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_43;
  }
  HIBYTE(v92) = v25;
  p_dst = &__dst;
  if (v25)
LABEL_43:
    memmove(p_dst, v24, v26);
  *((_BYTE *)p_dst + v26) = 0;
  os_unfair_lock_lock(v13 + 10);
  Preferences::getPreference<__CFDictionary const*>(v13, (const char *)&__dst, &cf);
  os_unfair_lock_unlock(v13 + 10);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    v32 = v87;
    if (!v87)
      goto LABEL_51;
  }
  else
  {
    v32 = v87;
    if (!v87)
      goto LABEL_51;
  }
  v33 = (unint64_t *)&v32->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_51:
    v35 = cf;
    if (!cf)
      goto LABEL_60;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = cf;
  if (!cf)
  {
LABEL_60:
    v42 = *(NSObject **)(v4 + 88);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst) = 0;
      _os_log_error_impl(&dword_1BF566000, v42, OS_LOG_TYPE_ERROR, "Failed to get ABM Shared Data", (uint8_t *)&__dst, 2u);
    }
    goto LABEL_150;
  }
LABEL_52:
  v36 = CFGetTypeID(v35);
  if (v36 != CFDictionaryGetTypeID())
    goto LABEL_60;
  v37 = (const __CFDictionary *)cf;
  v90 = cf;
  if (cf)
    CFRetain(cf);
  v89[0] = 0xAAAAAAAAAAAAAAAALL;
  v89[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v89, v37);
  v38 = (const void *)*MEMORY[0x1E0CFC208];
  v39 = strlen((const char *)*MEMORY[0x1E0CFC208]);
  if (v39 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v40 = v39;
  if (v39 >= 0x17)
  {
    v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v39 | 7) != 0x17)
      v43 = v39 | 7;
    v44 = v43 + 1;
    p_p = operator new(v43 + 1);
    v87 = (std::__shared_weak_count *)v40;
    v88 = v44 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_65;
  }
  HIBYTE(v88) = v39;
  p_p = &__p;
  if (v39)
LABEL_65:
    memmove(p_p, v38, v40);
  v45 = (const char *)*MEMORY[0x1E0CFB4F0];
  *((_BYTE *)p_p + v40) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v45);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8B878](&v96);
  if (v92 >= 0)
    v46 = (const char *)&__dst;
  else
    v46 = (const char *)__dst;
  v47 = xpc_string_create(v46);
  if (!v47)
    v47 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v45, v47);
  v48 = xpc_null_create();
  xpc_release(v47);
  xpc_release(v48);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_73:
      v49 = strlen((const char *)v38);
      if (v49 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_74;
LABEL_137:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_73;
  }
  operator delete(__p);
  v49 = strlen((const char *)v38);
  if (v49 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_137;
LABEL_74:
  v50 = v49;
  if (v49 >= 0x17)
  {
    v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v49 | 7) != 0x17)
      v52 = v49 | 7;
    v53 = v52 + 1;
    v51 = operator new(v52 + 1);
    v87 = (std::__shared_weak_count *)v50;
    v88 = v53 | 0x8000000000000000;
    __p = v51;
    goto LABEL_80;
  }
  HIBYTE(v88) = v49;
  v51 = &__p;
  if (v49)
LABEL_80:
    memmove(v51, v38, v50);
  v54 = (const char *)*MEMORY[0x1E0CFB3C0];
  *((_BYTE *)v51 + v50) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v54);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8B878](&v96);
  if (v92 >= 0)
    v55 = (const char *)&__dst;
  else
    v55 = (const char *)__dst;
  v56 = xpc_string_create(v55);
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v54, v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_88:
      v58 = strlen((const char *)v38);
      if (v58 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_89;
LABEL_140:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_88;
  }
  operator delete(__p);
  v58 = strlen((const char *)v38);
  if (v58 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_140;
LABEL_89:
  v59 = v58;
  if (v58 >= 0x17)
  {
    v61 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v61 = v58 | 7;
    v62 = v61 + 1;
    v60 = operator new(v61 + 1);
    v87 = (std::__shared_weak_count *)v59;
    v88 = v62 | 0x8000000000000000;
    __p = v60;
    goto LABEL_95;
  }
  HIBYTE(v88) = v58;
  v60 = &__p;
  if (v58)
LABEL_95:
    memmove(v60, v38, v59);
  v63 = (const char *)*MEMORY[0x1E0CFB620];
  *((_BYTE *)v60 + v59) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v63);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8B878](&v96);
  if (v92 >= 0)
    v64 = (const char *)&__dst;
  else
    v64 = (const char *)__dst;
  v65 = xpc_string_create(v64);
  if (!v65)
    v65 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v63, v65);
  v66 = xpc_null_create();
  xpc_release(v65);
  xpc_release(v66);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_103:
      v67 = strlen((const char *)v38);
      if (v67 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_104;
LABEL_143:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_103;
  }
  operator delete(__p);
  v67 = strlen((const char *)v38);
  if (v67 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_143;
LABEL_104:
  v68 = v67;
  if (v67 >= 0x17)
  {
    v70 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17)
      v70 = v67 | 7;
    v71 = v70 + 1;
    v69 = operator new(v70 + 1);
    v87 = (std::__shared_weak_count *)v68;
    v88 = v71 | 0x8000000000000000;
    __p = v69;
    goto LABEL_110;
  }
  HIBYTE(v88) = v67;
  v69 = &__p;
  if (v67)
LABEL_110:
    memmove(v69, v38, v68);
  v72 = (const char *)*MEMORY[0x1E0CFB138];
  *((_BYTE *)v69 + v68) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v72);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8B878](&v96);
  if (v92 >= 0)
    v73 = (const char *)&__dst;
  else
    v73 = (const char *)__dst;
  v74 = xpc_string_create(v73);
  if (!v74)
    v74 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v72, v74);
  v75 = xpc_null_create();
  xpc_release(v74);
  xpc_release(v75);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_118:
      v76 = strlen((const char *)v38);
      if (v76 <= 0x7FFFFFFFFFFFFFF7)
        goto LABEL_119;
LABEL_146:
      std::string::__throw_length_error[abi:ne180100]();
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_118;
  }
  operator delete(__p);
  v76 = strlen((const char *)v38);
  if (v76 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_146;
LABEL_119:
  v77 = v76;
  if (v76 >= 0x17)
  {
    v79 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v76 | 7) != 0x17)
      v79 = v76 | 7;
    v80 = v79 + 1;
    v78 = operator new(v79 + 1);
    v87 = (std::__shared_weak_count *)v77;
    v88 = v80 | 0x8000000000000000;
    __p = v78;
  }
  else
  {
    HIBYTE(v88) = v76;
    v78 = &__p;
    if (!v76)
      goto LABEL_126;
  }
  memmove(v78, v38, v77);
LABEL_126:
  v81 = (const char *)*MEMORY[0x1E0CFB628];
  *((_BYTE *)v78 + v77) = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v96, v81);
  ctu::cf::map_adapter::getString();
  MEMORY[0x1C3B8B878](&v96);
  if (v92 >= 0)
    v82 = (const char *)&__dst;
  else
    v82 = (const char *)__dst;
  v83 = xpc_string_create(v82);
  if (!v83)
    v83 = xpc_null_create();
  xpc_dictionary_set_value(xdict, v81, v83);
  v84 = xpc_null_create();
  xpc_release(v83);
  xpc_release(v84);
  if (SHIBYTE(v92) < 0)
  {
    operator delete((void *)__dst);
    if ((SHIBYTE(v88) & 0x80000000) == 0)
    {
LABEL_133:
      MEMORY[0x1C3B8B8B4](v89);
      v85 = v90;
      if (!v90)
        goto LABEL_150;
      goto LABEL_149;
    }
  }
  else if ((SHIBYTE(v88) & 0x80000000) == 0)
  {
    goto LABEL_133;
  }
  operator delete(__p);
  MEMORY[0x1C3B8B8B4](v89);
  v85 = v90;
  if (v90)
LABEL_149:
    CFRelease(v85);
LABEL_150:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 40), &v95, &xdict);
  xpc_release(xdict);
}

void sub_1BF63EAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  uint64_t v23;

  MEMORY[0x1C3B8B878](v23 - 72);
  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8B8B4](&a15);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_21(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_22;
        v12[3] = &__block_descriptor_tmp_26_3;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_22(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  uint64_t *v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void *v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  void *v23;
  void **v24;
  xpc_object_t v25;
  xpc_object_t v26;
  _QWORD aBlock[4];
  void *v28;
  void *v29;
  unsigned int v30;
  void *__p[4];
  std::string __dst;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBEC8];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBEC8]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v9 = v4 | 7;
      v10 = v9 + 1;
      p_dst = (std::string *)operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v11 = (char *)operator new(0x28uLL);
        strcpy(v11, " rejected; ABM is shutting down ");
        v12 = std::string::append(&__dst, v11, 0x20uLL);
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p[2] = (void *)v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        operator delete(v11);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v16 = *(_QWORD *)(a1 + 40);
            v15 = (uint64_t *)(a1 + 40);
            if (!v16)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v19 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v19 = __p[1];
            if (v19)
            {
              v20 = xpc_dictionary_create(0, 0, 0);
              if (v20 || (v20 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v20) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v20);
                  v21 = v20;
                }
                else
                {
                  v21 = xpc_null_create();
                }
              }
              else
              {
                v21 = xpc_null_create();
                v20 = 0;
              }
              xpc_release(v20);
              v22 = xpc_null_create();
              v23 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              xpc_release(v23);
              xpc_release(v22);
              if (SHIBYTE(__p[2]) >= 0)
                v24 = __p;
              else
                v24 = (void **)__p[0];
              v25 = xpc_string_create((const char *)v24);
              if (!v25)
                v25 = xpc_null_create();
              xpc_dictionary_set_value(v21, (const char *)*MEMORY[0x1E0CFB0D0], v25);
              v26 = xpc_null_create();
              xpc_release(v25);
              xpc_release(v26);
            }
            v30 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v15, &v30, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v14 = v2[11];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v17 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v17 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
        _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v18 = *(_QWORD *)(a1 + 40);
        v15 = (uint64_t *)(a1 + 40);
        if (!v18)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_23;
  aBlock[3] = &__block_descriptor_tmp_25_1;
  v7 = *(void **)(a1 + 40);
  if (v7)
    v7 = _Block_copy(v7);
  v28 = v7;
  v8 = _Block_copy(aBlock);
  v29 = v8;
  RadioModule::getOperatingMode_sync((uint64_t)v2, &v29);
  if (v8)
    _Block_release(v8);
  if (v28)
    _Block_release(v28);
}

void sub_1BF63F0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::getOperatingMode_sync(uint64_t a1, void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  CommandDriverFactory *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  dispatch_object_t object;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  void *v46;
  void *v47;
  dispatch_object_t v48;
  uint8_t buf[16];

  v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3 || (v5 = *(_QWORD *)(a1 + 120), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v47 = (void *)0xAAAAAAAAAAAAAAAALL;
  v48 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_104;
  aBlock[4] = a1;
  aBlock[5] = v5;
  v45 = v7;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
    v13 = _Block_copy(v13);
  v46 = v13;
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(a1 + 136);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(a1 + 136));
  v47 = v14;
  v48 = v15;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v16 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v17 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v16);
    v18 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v19 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v18;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v23 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v17 = off_1ED70F4D0;
  }
  v25 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v38 = v17;
  v39 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v26 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v17 + 16))(&v40, v17);
  v42 = 0;
  v43 = 0;
  if (v41)
  {
    v43 = std::__shared_weak_count::lock(v41);
    if (v43)
      v42 = v40;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  if (!v25)
    goto LABEL_39;
  v28 = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    v30 = v42;
    if (!v42)
      goto LABEL_50;
  }
  else
  {
LABEL_39:
    v30 = v42;
    if (!v42)
      goto LABEL_50;
  }
  v31 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v31, OS_LOG_TYPE_DEFAULT, "#I Request to get operating mode", buf, 2u);
  }
  v32 = v47;
  if (v47)
    v32 = _Block_copy(v47);
  v36 = v32;
  object = v48;
  if (v48)
    dispatch_retain(v48);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v30 + 160))(v30, &v36);
  if (object)
    dispatch_release(object);
  if (v36)
    _Block_release(v36);
LABEL_50:
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v48)
    dispatch_release(v48);
  if (v47)
    _Block_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF63F53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 80);
  if (aBlock)
    _Block_release(aBlock);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_23(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  unsigned int v9;
  xpc_object_t xdict;

  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    xdict = v4;
  }
  else
  {
    v5 = xpc_null_create();
    xdict = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  xdict = v6;
LABEL_9:
  xpc_release(v5);
  v7 = xpc_int64_create(a2);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB9E8], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = (a2 >> 31) & 0xE020E002;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 32), &v9, &xdict);
  xpc_release(xdict);
}

void sub_1BF63F6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_28(_QWORD *a1, xpc_object_t *a2, void (***a3)(void *, uint64_t, xpc_object_t *))
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  int v13;
  xpc_object_t v14;
  char v15;
  void (**v16)(void *, uint64_t, xpc_object_t *);
  xpc_object_t v17;
  void (**v18)(void *, uint64_t, xpc_object_t *);
  xpc_object_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  _QWORD v22[5];
  void *aBlock;
  int v24;
  int v25;
  char v26;
  std::__shared_weak_count *v28;
  xpc_object_t v29;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v28 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFAF80]);
        v29 = value;
        if (value)
          xpc_retain(value);
        else
          v29 = xpc_null_create();
        v11 = xpc::dyn_cast_or_default((xpc *)&v29, (const object *)0x2710);
        xpc_release(v29);
        v12 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB9E8]);
        v29 = v12;
        if (v12)
          xpc_retain(v12);
        else
          v29 = xpc_null_create();
        v13 = xpc::dyn_cast_or_default((xpc *)&v29, (const object *)0xFFFFFFFFLL);
        xpc_release(v29);
        v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFBDD0]);
        v29 = v14;
        if (v14)
          xpc_retain(v14);
        else
          v29 = xpc_null_create();
        v15 = xpc::dyn_cast_or_default((xpc *)&v29, 0);
        xpc_release(v29);
        if (v13 < 0)
        {
          v17 = xpc_null_create();
          v18 = *a3;
          v29 = v17;
          v19 = xpc_null_create();
          v18[2](v18, 3760250882, &v29);
          xpc_release(v29);
          xpc_release(v19);
        }
        else
        {
          v22[0] = MEMORY[0x1E0C809B0];
          v22[1] = 1174405120;
          v22[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_29;
          v22[3] = &__block_descriptor_tmp_33_6;
          v22[4] = v7;
          v16 = *a3;
          if (*a3)
            v16 = (void (**)(void *, uint64_t, xpc_object_t *))_Block_copy(v16);
          aBlock = v16;
          v24 = v11;
          v25 = v13;
          v26 = v15;
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v22);
          if (aBlock)
            _Block_release(aBlock);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF63F94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  xpc_release(*(xpc_object_t *)(v11 - 56));
  xpc_release(v10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_29(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  unsigned int v7;
  int v8;
  int v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  NSObject *v17;
  uint64_t *v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void *v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  void *v26;
  void **v27;
  xpc_object_t v28;
  xpc_object_t v29;
  _QWORD aBlock[4];
  void *v31;
  void *v32;
  unsigned int v33;
  void *__p[4];
  std::string __dst;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBED8];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBED8]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v12 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v12 = v4 | 7;
      v13 = v12 + 1;
      p_dst = (std::string *)operator new(v12 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_16:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v14 = (char *)operator new(0x28uLL);
        strcpy(v14, " rejected; ABM is shutting down ");
        v15 = std::string::append(&__dst, v14, 0x20uLL);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        operator delete(v14);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
LABEL_18:
            v19 = *(_QWORD *)(a1 + 40);
            v18 = (uint64_t *)(a1 + 40);
            if (!v19)
            {
LABEL_40:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_24:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v22 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v22 = __p[1];
            if (v22)
            {
              v23 = xpc_dictionary_create(0, 0, 0);
              if (v23 || (v23 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v23) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v23);
                  v24 = v23;
                }
                else
                {
                  v24 = xpc_null_create();
                }
              }
              else
              {
                v24 = xpc_null_create();
                v23 = 0;
              }
              xpc_release(v23);
              v25 = xpc_null_create();
              v26 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
              xpc_release(v26);
              xpc_release(v25);
              if (SHIBYTE(__p[2]) >= 0)
                v27 = __p;
              else
                v27 = (void **)__p[0];
              v28 = xpc_string_create((const char *)v27);
              if (!v28)
                v28 = xpc_null_create();
              xpc_dictionary_set_value(v24, (const char *)*MEMORY[0x1E0CFB0D0], v28);
              v29 = xpc_null_create();
              xpc_release(v28);
              xpc_release(v29);
            }
            v33 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v18, &v33, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_40;
          }
        }
        else
        {
          v17 = v2[11];
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            goto LABEL_18;
        }
        v20 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v20 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
        _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v21 = *(_QWORD *)(a1 + 40);
        v18 = (uint64_t *)(a1 + 40);
        if (!v21)
          goto LABEL_40;
        goto LABEL_24;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_16;
  }
  v7 = *(_DWORD *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = *(unsigned __int8 *)(a1 + 56);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_30;
  aBlock[3] = &__block_descriptor_tmp_32_1;
  v10 = *(void **)(a1 + 40);
  if (v10)
    v10 = _Block_copy(v10);
  v31 = v10;
  v11 = _Block_copy(aBlock);
  v32 = v11;
  RadioModule::setOperatingMode_sync(v2, v7, v8, v9 != 0, &v32);
  if (v11)
    _Block_release(v11);
  if (v31)
    _Block_release(v31);
}

void sub_1BF63FDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::setOperatingMode_sync(_QWORD *a1, unsigned int a2, uint64_t a3, int a4, void **a5)
{
  std::__shared_weak_count *v6;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  NSObject *v21;
  CommandDriverFactory *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  void *v42;
  dispatch_object_t v43;
  void *v44;
  dispatch_object_t object;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  _QWORD aBlock[6];
  std::__shared_weak_count *v53;
  void *v54;
  void *v55;
  dispatch_object_t v56;
  __int128 v57;

  v6 = (std::__shared_weak_count *)a1[16];
  if (!v6 || (v11 = a1[15], (v12 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v55 = (void *)0xAAAAAAAAAAAAAAAALL;
  v56 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_119;
  aBlock[4] = a1;
  aBlock[5] = v11;
  v53 = v13;
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  v19 = *a5;
  if (*a5)
    v19 = _Block_copy(v19);
  v54 = v19;
  v20 = _Block_copy(aBlock);
  v21 = a1[17];
  if (v21)
    dispatch_retain(v21);
  v55 = v20;
  v56 = v21;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  v51 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v23 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v22);
    v24 = v57;
    v57 = 0uLL;
    v25 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v24;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1))
    {
      v29 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v23 = off_1ED70F4D0;
  }
  v31 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v46 = v23;
  v47 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v32 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v48, v23);
  v50 = 0;
  v51 = 0;
  if (v49)
  {
    v51 = std::__shared_weak_count::lock(v49);
    if (v51)
      v50 = v48;
    if (v49)
      std::__shared_weak_count::__release_weak(v49);
  }
  if (!v31)
    goto LABEL_39;
  v34 = (unint64_t *)&v31->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
    v36 = v50;
    if (!v50)
      goto LABEL_58;
  }
  else
  {
LABEL_39:
    v36 = v50;
    if (!v50)
      goto LABEL_58;
  }
  v37 = 1000000 * a2;
  v38 = v55;
  if (a4)
  {
    if (v55)
      v38 = _Block_copy(v55);
    v44 = v38;
    object = v56;
    if (v56)
      dispatch_retain(v56);
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v36 + 152))(v36, v37, a3, &v44);
    if (object)
      dispatch_release(object);
    if (v44)
      _Block_release(v44);
  }
  else
  {
    if (v55)
      v38 = _Block_copy(v55);
    v42 = v38;
    v43 = v56;
    if (v56)
      dispatch_retain(v56);
    (*(void (**)(unint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v36 + 144))(v36, v37, a3, &v42);
    if (v43)
      dispatch_release(v43);
    if (v42)
      _Block_release(v42);
  }
LABEL_58:
  v39 = v51;
  if (v51)
  {
    v40 = (unint64_t *)&v51->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v56)
    dispatch_release(v56);
  if (v55)
    _Block_release(v55);
  if (v54)
    _Block_release(v54);
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  std::__shared_weak_count::__release_weak(v13);
}

void sub_1BF64026C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *aBlock)
{
  std::__shared_weak_count *v26;
  uint64_t v27;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v27 - 112);
  if (aBlock)
    _Block_release(aBlock);
  if (a25)
    std::__shared_weak_count::__release_weak(a25);
  std::__shared_weak_count::__release_weak(v26);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_30(uint64_t a1, int a2)
{
  uint64_t v3;
  xpc_object_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = 3760250880;
  v4 = xpc_null_create();
  v5 = *(_QWORD *)(a1 + 32);
  object = v4;
  v6 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v5 + 16))(v5, v3, &object);
  xpc_release(object);
  xpc_release(v6);
}

void sub_1BF640380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_35(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_14:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_36;
      v18[3] = &__block_descriptor_tmp_39_0;
      v18[4] = v6;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = a1[5];
        v12 = (uint64_t *)(v6 + 120);
        aBlock = v10;
        v20 = v11;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
          goto LABEL_10;
      }
      else
      {
        v12 = (uint64_t *)(v6 + 120);
        aBlock = 0;
        v20 = v9;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
        {
LABEL_10:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
          if (v21)
            std::__shared_weak_count::__release_weak(v21);
          if (aBlock)
            _Block_release(aBlock);
          goto LABEL_14;
        }
      }
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_36(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  void *__p[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBEC0];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBEC0]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v33 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v33 = v4 | 7;
      v34 = v33 + 1;
      p_dst = (std::string *)operator new(v33 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_63:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v35 = (char *)operator new(0x28uLL);
        strcpy(v35, " rejected; ABM is shutting down ");
        v36 = std::string::append(&__dst, v35, 0x20uLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        __p[2] = (void *)v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        operator delete(v35);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
LABEL_65:
            v40 = a1[5];
            v39 = a1 + 5;
            if (!v40)
            {
LABEL_89:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_71:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v43 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v43 = __p[1];
            if (v43)
            {
              v44 = xpc_dictionary_create(0, 0, 0);
              if (v44 || (v44 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v44) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v44);
                  v45 = v44;
                }
                else
                {
                  v45 = xpc_null_create();
                }
              }
              else
              {
                v45 = xpc_null_create();
                v44 = 0;
              }
              xpc_release(v44);
              v46 = xpc_null_create();
              v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
              xpc_release(v47);
              xpc_release(v46);
              if (SHIBYTE(__p[2]) >= 0)
                v48 = __p;
              else
                v48 = (void **)__p[0];
              v49 = xpc_string_create((const char *)v48);
              if (!v49)
                v49 = xpc_null_create();
              xpc_dictionary_set_value(v45, (const char *)*MEMORY[0x1E0CFB0D0], v49);
              v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v57) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v39, (unsigned int *)&v57, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_89;
          }
        }
        else
        {
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            goto LABEL_65;
        }
        v41 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v41 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
        _os_log_impl(&dword_1BF566000, v38, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v42 = a1[5];
        v39 = a1 + 5;
        if (!v42)
          goto LABEL_89;
        goto LABEL_71;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_63;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_37;
  aBlock[3] = &__block_descriptor_tmp_38_1;
  v8 = a1[6];
  v7 = (std::__shared_weak_count *)a1[7];
  aBlock[4] = v2;
  aBlock[5] = v8;
  aBlock[1] = 1174405120;
  v60 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = (void *)a1[5];
  if (v11)
    v11 = _Block_copy(v11);
  v61 = v11;
  v12 = _Block_copy(aBlock);
  v13 = v2[17];
  if (v13)
    dispatch_retain(v13);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v17 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v21 = (unint64_t *)((char *)__p[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_1ED70F4D0;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v53 = v15;
  v54 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v55, v15);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v23)
    goto LABEL_37;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v28 = v57;
    if (v57)
      goto LABEL_38;
  }
  else
  {
LABEL_37:
    v28 = v57;
    if (v57)
    {
LABEL_38:
      v29 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
        v29 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      v51 = v29;
      object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v28 + 104))(v28, &v51);
      if (object)
        dispatch_release(object);
      if (v51)
        _Block_release(v51);
    }
  }
  v30 = v58;
  if (v58)
  {
    v31 = (unint64_t *)&v58->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v61)
    _Block_release(v61);
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
}

void sub_1BF640AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_37(_QWORD *a1, void **a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void *v10;
  xpc_object_t v11;
  void *v12;
  uint64_t (*v13)(uint64_t);
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  uint64_t (*v18)(uint64_t);
  xpc_object_t v19;
  NSObject *v20;
  xpc_object_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unsigned int v24;
  xpc_object_t object;
  std::__shared_weak_count *v27;
  xpc_object_t buf[4];

  buf[3] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v27 = v8;
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
        goto LABEL_21;
      v11 = xpc_null_create();
      object = v11;
      v24 = -534716416;
      v12 = *a2;
      v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!v12)
        v13 = 0;
      if (v13)
      {
        v14 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 138412290;
          *(xpc_object_t *)((char *)buf + 4) = v12;
          v15 = "%@";
          v16 = v14;
          v17 = 12;
LABEL_9:
          _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)buf, v17);
        }
      }
      else
      {
        v18 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        if (!*a3)
          v18 = 0;
        if (v18)
        {
          ctu::cf_to_xpc(*a3, v10);
          v19 = buf[0];
          if (buf[0] && MEMORY[0x1C3B8CD78](buf[0]) == MEMORY[0x1E0C812F8])
            xpc_retain(buf[0]);
          else
            v19 = xpc_null_create();
          v21 = xpc_null_create();
          object = v19;
          xpc_release(v11);
          xpc_release(v21);
          xpc_release(buf[0]);
          v24 = 0;
          goto LABEL_20;
        }
        v20 = *(NSObject **)(v7 + 88);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf[0]) = 0;
          v15 = "Empty response received with no error";
          v16 = v20;
          v17 = 2;
          goto LABEL_9;
        }
      }
LABEL_20:
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(a1 + 7, &v24, &object);
      xpc_release(object);
LABEL_21:
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF640E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_41(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_42;
        v12[3] = &__block_descriptor_tmp_43_0;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped((uint64_t *)(v6 + 120), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_42(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>((uint64_t *)(a1 + 40), &v2, (void **)(v1 + 248));
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_45(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  xpc_object_t object;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_16:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46;
      v18[3] = &__block_descriptor_tmp_51_2;
      v18[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          v12 = (uint64_t *)(v7 + 120);
          v13 = (std::__shared_weak_count *)a1[6];
          v21 = a1[5];
          v22 = v13;
          if (!v13)
            goto LABEL_12;
          goto LABEL_10;
        }
      }
      object = xpc_null_create();
      v12 = (uint64_t *)(v7 + 120);
      v13 = (std::__shared_weak_count *)a1[6];
      v21 = a1[5];
      v22 = v13;
      if (!v13)
      {
LABEL_12:
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        goto LABEL_16;
      }
LABEL_10:
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_12;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_46(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  CommandDriverFactory *v18;
  const void *v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::string::size_type v29;
  void *v30;
  const object *v31;
  xpc_object_t *v32;
  uint64_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  std::__shared_weak_count *size;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  xpc_object_t *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  _QWORD aBlock[6];
  std::__shared_weak_count *v55;
  void *v56;
  void *v57;
  dispatch_object_t v58;
  CFTypeRef cf[3];
  xpc_object_t v60;
  std::__shared_weak_count *v61;
  xpc_object_t object[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(object, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBC50];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBC50]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        v13 = std::string::append(&__dst, v12, 0x20uLL);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            v17 = a1[5];
            v16 = a1 + 5;
            if (!v17)
            {
LABEL_88:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              return;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v34 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v34 = object[1];
            if (v34)
            {
              v35 = xpc_dictionary_create(0, 0, 0);
              if (v35 || (v35 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v35) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v35);
                  v36 = v35;
                }
                else
                {
                  v36 = xpc_null_create();
                }
              }
              else
              {
                v36 = xpc_null_create();
                v35 = 0;
              }
              xpc_release(v35);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
              xpc_release(v50);
              xpc_release(v49);
              if (SHIBYTE(object[2]) >= 0)
                v51 = object;
              else
                v51 = (xpc_object_t *)object[0];
              v52 = xpc_string_create((const char *)v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v36, (const char *)*MEMORY[0x1E0CFB0D0], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(v60) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&v60, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_88;
          }
        }
        else
        {
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
        }
        v32 = object;
        if (SHIBYTE(object[2]) < 0)
          v32 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v33 = a1[5];
        v16 = a1 + 5;
        if (!v33)
          goto LABEL_88;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x1C3B8CD78](a1[6]) == MEMORY[0x1E0C812F8])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v19 = (const void *)off_1ED70F4D0;
    if (!off_1ED70F4D0)
    {
      CommandDriverFactory::create_default_global(v18);
      v20 = *(_OWORD *)object;
      object[0] = 0;
      object[1] = 0;
      v21 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
      off_1ED70F4D0 = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v19 = (const void *)off_1ED70F4D0;
    }
    v24 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    cf[1] = v19;
    cf[2] = *((CFTypeRef *)&off_1ED70F4D0 + 1);
    if (*(&off_1ED70F4D0 + 1))
    {
      v25 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, const void *))(*(_QWORD *)v19 + 16))(&v60, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v61)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v61);
      if (__dst.__r_.__value_.__l.__size_)
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      if (v61)
        std::__shared_weak_count::__release_weak(v61);
    }
    if (v24)
    {
      v27 = (unint64_t *)&v24->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v29 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      v30 = (void *)a1[6];
      v60 = v30;
      if (v30)
        xpc_retain(v30);
      else
        v60 = xpc_null_create();
      xpc::bridge((xpc *)&v60, v31);
      v37 = object[0];
      if (object[0] && (v38 = CFGetTypeID(object[0]), v38 == CFDictionaryGetTypeID()))
      {
        cf[0] = v37;
        CFRetain(v37);
      }
      else
      {
        cf[0] = 0;
      }
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1174405120;
      aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_47;
      aBlock[3] = &__block_descriptor_tmp_50_0;
      v40 = a1[7];
      v39 = (std::__shared_weak_count *)a1[8];
      aBlock[4] = v2;
      aBlock[5] = v40;
      v55 = v39;
      if (v39)
      {
        p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v42 = __ldxr(p_shared_weak_owners);
        while (__stxr(v42 + 1, p_shared_weak_owners));
      }
      v43 = (void *)a1[5];
      if (v43)
        v43 = _Block_copy(v43);
      v56 = v43;
      v44 = _Block_copy(aBlock);
      v45 = v2[17];
      if (v45)
        dispatch_retain(v45);
      v57 = v44;
      v58 = v45;
      (*(void (**)(std::string::size_type, CFTypeRef *, void **))(*(_QWORD *)v29 + 192))(v29, cf, &v57);
      if (v58)
        dispatch_release(v58);
      if (v57)
        _Block_release(v57);
      if (cf[0])
        CFRelease(cf[0]);
      if (object[0])
        CFRelease(object[0]);
      xpc_release(v60);
      if (v56)
        _Block_release(v56);
      if (v55)
        std::__shared_weak_count::__release_weak(v55);
    }
    size = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v47 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  else
  {
    v7 = xpc_null_create();
    v8 = a1[5];
    object[0] = v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v9);
  }
}

void sub_1BF641764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,xpc_object_t object,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF6418C4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF6418B4);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_47(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  NSObject *v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  const void *v20;
  size_t v21;
  size_t v22;
  __int128 *p_buf;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  xpc_object_t v28;
  uint64_t v29;
  xpc_object_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  const void *v33;
  xpc_object_t object;
  std::__shared_weak_count *v36;
  __int128 buf;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v36 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v10 = v6;
LABEL_45:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v7 = *a2;
  if (*a2)
    v8 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v8 = 0;
  if (v8)
  {
    v9 = *(NSObject **)(v5 + 88);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v7;
      _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!*(_QWORD *)(v5 + 176))
    goto LABEL_38;
  v11 = xpc_dictionary_create(0, 0, 0);
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v11) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v11);
      v12 = v11;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFB598]);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB538], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_string_create((const char *)*MEMORY[0x1E0CFBFA0]);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB8D0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (char *)operator new(0x38uLL);
  strcpy(v17, "User requested to change Baseband field test config");
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB788], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  operator delete(v17);
  v20 = (const void *)*MEMORY[0x1E0CFB4E0];
  v21 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v22 = v21;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    p_buf = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&buf + 1) = v22;
    v38 = v25 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
  }
  else
  {
    HIBYTE(v38) = v21;
    p_buf = &buf;
    if (!v21)
      goto LABEL_32;
  }
  memmove(p_buf, v20, v22);
LABEL_32:
  *((_BYTE *)p_buf + v22) = 0;
  object = v12;
  if (v12)
    xpc_retain(v12);
  else
    object = xpc_null_create();
  v33 = 0;
  Service::runCommand(v5, (uint64_t)&buf, &object, &v33);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v38) < 0)
    operator delete((void *)buf);
  xpc_release(v12);
LABEL_38:
  if (*a2)
    v26 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v26 = 0;
  if (v26)
    v27 = 3760250880;
  else
    v27 = 0;
  v28 = xpc_null_create();
  v29 = a1[7];
  *(_QWORD *)&buf = v28;
  v30 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, __int128 *))(v29 + 16))(v29, v27, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v30);
  v10 = v36;
  if (v36)
    goto LABEL_45;
}

void sub_1BF641CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

xpc_object_t __copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(_QWORD *a1, _QWORD *a2)
{
  const void *v4;
  void *v5;
  void *v6;
  xpc_object_t result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v4 = (const void *)a2[5];
  if (v4)
  {
    v5 = _Block_copy(v4);
    v6 = (void *)a2[6];
    a1[5] = v5;
    a1[6] = v6;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = (void *)a2[6];
    a1[5] = 0;
    a1[6] = v6;
    if (v6)
    {
LABEL_3:
      result = xpc_retain(v6);
      v8 = a2[8];
      a1[7] = a2[7];
      a1[8] = v8;
      if (!v8)
        return result;
      goto LABEL_7;
    }
  }
  result = xpc_null_create();
  a1[6] = result;
  v8 = a2[8];
  a1[7] = a2[7];
  a1[8] = v8;
  if (!v8)
    return result;
LABEL_7:
  v9 = (unint64_t *)(v8 + 16);
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c15_ZTSN3xpc4dictE56c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_53(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  xpc_object_t object;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_16:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_54;
      v18[3] = &__block_descriptor_tmp_57_0;
      v18[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          v12 = (uint64_t *)(v7 + 120);
          v13 = (std::__shared_weak_count *)a1[6];
          v21 = a1[5];
          v22 = v13;
          if (!v13)
            goto LABEL_12;
          goto LABEL_10;
        }
      }
      object = xpc_null_create();
      v12 = (uint64_t *)(v7 + 120);
      v13 = (std::__shared_weak_count *)a1[6];
      v21 = a1[5];
      v22 = v13;
      if (!v13)
      {
LABEL_12:
        ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
        if (v22)
          std::__shared_weak_count::__release_weak(v22);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        goto LABEL_16;
      }
LABEL_10:
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_12;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2_54(uint64_t a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  std::string *v13;
  __int128 v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  CommandDriverFactory *v18;
  uint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type v31;
  xpc_object_t value;
  const char *v33;
  std::string *v34;
  uint64_t v35;
  std::string::size_type size;
  xpc_object_t v37;
  xpc_object_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  std::string *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  _QWORD v54[6];
  std::__shared_weak_count *v55;
  void *v56;
  void *aBlock;
  dispatch_object_t v58;
  std::string v59;
  uint64_t v60;
  uint64_t v61;
  xpc_object_t object;
  std::__shared_weak_count *v63;
  std::string v64;
  std::string __dst;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(&v64, 170, sizeof(v64));
    v3 = (const void *)*MEMORY[0x1E0CFB0A8];
    v4 = strlen((const char *)*MEMORY[0x1E0CFB0A8]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v10 = v4 | 7;
      v11 = v10 + 1;
      p_dst = (std::string *)operator new(v10 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_12:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v12 = (char *)operator new(0x28uLL);
        strcpy(v12, " rejected; ABM is shutting down ");
        v13 = std::string::append(&__dst, v12, 0x20uLL);
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        operator delete(v12);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
LABEL_14:
            v17 = *(_QWORD *)(a1 + 40);
            v16 = (uint64_t *)(a1 + 40);
            if (!v17)
            {
LABEL_92:
              if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v64.__r_.__value_.__l.__data_);
              return;
            }
LABEL_48:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
            if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v64.__r_.__value_.__l.__size_;
            if (size)
            {
              v37 = xpc_dictionary_create(0, 0, 0);
              if (v37 || (v37 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v37) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v37);
                  v38 = v37;
                }
                else
                {
                  v38 = xpc_null_create();
                }
              }
              else
              {
                v38 = xpc_null_create();
                v37 = 0;
              }
              xpc_release(v37);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              xpc_release(v50);
              xpc_release(v49);
              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v51 = &v64;
              else
                v51 = (std::string *)v64.__r_.__value_.__r.__words[0];
              v52 = xpc_string_create((const char *)v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v38, (const char *)*MEMORY[0x1E0CFB0D0], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v16, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_92;
          }
        }
        else
        {
          v15 = v2[11];
          if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            goto LABEL_14;
        }
        v34 = &v64;
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v34 = (std::string *)v64.__r_.__value_.__r.__words[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v35 = *(_QWORD *)(a1 + 40);
        v16 = (uint64_t *)(a1 + 40);
        if (!v35)
          goto LABEL_92;
        goto LABEL_48;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_12;
  }
  if (MEMORY[0x1C3B8CD78](*(_QWORD *)(a1 + 48)) == MEMORY[0x1E0C812F8])
  {
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
    v18 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v19 = off_1ED70F4D0;
    if (!off_1ED70F4D0)
    {
      CommandDriverFactory::create_default_global(v18);
      v20 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
      *(_OWORD *)&v64.__r_.__value_.__l.__data_ = 0uLL;
      v21 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
      off_1ED70F4D0 = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      if (v64.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v64.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)v64.__r_.__value_.__l.__size_ + 16))(v64.__r_.__value_.__l.__size_);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v64.__r_.__value_.__l.__size_);
        }
      }
      v19 = off_1ED70F4D0;
    }
    v26 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    v60 = v19;
    v61 = *(&off_1ED70F4D0 + 1);
    if (*(&off_1ED70F4D0 + 1))
    {
      v27 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(xpc_object_t *__return_ptr, uint64_t))(*(_QWORD *)v19 + 16))(&object, v19);
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    if (v63)
    {
      __dst.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v63);
      if (__dst.__r_.__value_.__l.__size_)
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      if (v63)
        std::__shared_weak_count::__release_weak(v63);
    }
    if (v26)
    {
      v29 = (unint64_t *)&v26->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v31 = __dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      memset(&v64, 170, sizeof(v64));
      value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 48), (const char *)*MEMORY[0x1E0CFB2D0]);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v33);
      xpc_release(object);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v59, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
      else
        v59 = v64;
      v54[0] = MEMORY[0x1E0C809B0];
      v54[1] = 1174405120;
      v54[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_55;
      v54[3] = &__block_descriptor_tmp_56_0;
      v40 = *(_QWORD *)(a1 + 56);
      v39 = *(std::__shared_weak_count **)(a1 + 64);
      v54[4] = v2;
      v54[5] = v40;
      v55 = v39;
      if (v39)
      {
        p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v42 = __ldxr(p_shared_weak_owners);
        while (__stxr(v42 + 1, p_shared_weak_owners));
      }
      v43 = *(void **)(a1 + 40);
      if (v43)
        v43 = _Block_copy(v43);
      v56 = v43;
      v44 = _Block_copy(v54);
      v45 = v2[17];
      if (v45)
        dispatch_retain(v45);
      aBlock = v44;
      v58 = v45;
      (*(void (**)(std::string::size_type, std::string *, void **))(*(_QWORD *)v31 + 216))(v31, &v59, &aBlock);
      if (v58)
        dispatch_release(v58);
      if (aBlock)
        _Block_release(aBlock);
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v59.__r_.__value_.__l.__data_);
      if (v56)
        _Block_release(v56);
      if (v55)
        std::__shared_weak_count::__release_weak(v55);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
    }
    v46 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
    if (__dst.__r_.__value_.__l.__size_)
    {
      v47 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
  }
  else
  {
    v7 = xpc_null_create();
    v8 = *(_QWORD *)(a1 + 40);
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v8 + 16))(v8, 3760250882, &v64);
    xpc_release(v64.__r_.__value_.__l.__data_);
    xpc_release(v9);
  }
}

void sub_1BF6426C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,xpc_object_t object)
{
  uint64_t v28;

  if (*(char *)(v28 - 105) < 0)
  {
    operator delete(*(void **)(v28 - 128));
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v28 - 96);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v28 - 96);
  _Unwind_Resume(a1);
}

void sub_1BF6427A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF6427E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 96));
  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF64284CLL);
}

void sub_1BF64281C()
{
  void *v0;
  uint64_t v1;

  xpc_release(*(xpc_object_t *)(v1 - 128));
  xpc_release(v0);
  JUMPOUT(0x1BF64284CLL);
}

void sub_1BF642844(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF64285C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  operator delete(v1);
  if (*(char *)(v2 - 73) < 0)
  {
    operator delete(*(void **)(v2 - 96));
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF64284CLL);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_55(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  NSObject *v22;
  _BYTE object[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        if (*a2)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v10;
            _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v20 = *a3;
          v21 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v21 = 0;
          if (v21)
          {
            v22 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)object = 138412290;
              *(_QWORD *)&object[4] = v20;
              _os_log_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEFAULT, "#I %@", object, 0xCu);
            }
          }
        }
        if (*a2)
          v13 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v13 = 0;
        if (v13)
          v14 = 3760250880;
        else
          v14 = 0;
        v15 = xpc_null_create();
        v16 = a1[7];
        *(_QWORD *)object = v15;
        v17 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v16 + 16))(v16, v14, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v17);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF642A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_59(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_61(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_63(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_65(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_67(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_69(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_71(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_73(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_75(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  xpc_object_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v10 = *a2;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (*a3)
          goto LABEL_6;
      }
      else
      {
        v10 = xpc_null_create();
        v11 = *a3;
        if (*a3)
        {
LABEL_6:
          v12 = _Block_copy(v11);
          v14 = a1[5];
          v13 = (std::__shared_weak_count *)a1[6];
          if (!v13)
          {
LABEL_12:
            v17 = (std::__shared_weak_count *)v7[16];
            if (!v17 || (v18 = v7[15], (v19 = std::__shared_weak_count::lock(v17)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v20 = v19;
            v21 = operator new(0x28uLL);
            *v21 = v7;
            v21[1] = v10;
            v22 = xpc_null_create();
            v21[2] = v12;
            v21[3] = v14;
            v21[4] = v13;
            if (v13)
            {
              p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
              do
                v24 = __ldxr(p_shared_weak_owners);
              while (__stxr(v24 + 1, p_shared_weak_owners));
            }
            v25 = v7[17];
            v26 = (unint64_t *)&v20->__shared_owners_;
            do
              v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            v28 = operator new(0x18uLL);
            *v28 = v21;
            v28[1] = v18;
            v28[2] = v20;
            dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
            do
              v29 = __ldaxr(v26);
            while (__stlxr(v29 - 1, v26));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
            if (v13)
              std::__shared_weak_count::__release_weak(v13);
            xpc_release(v22);
            goto LABEL_26;
          }
LABEL_10:
          v15 = (unint64_t *)&v13->__shared_weak_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          goto LABEL_12;
        }
      }
      v12 = 0;
      v14 = a1[5];
      v13 = (std::__shared_weak_count *)a1[6];
      if (!v13)
        goto LABEL_12;
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_77(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_79(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_81(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_83(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  xpc_object_t v24;
  NSObject *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_26:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      if (*a3)
      {
        v11 = _Block_copy(*a3);
        v10 = a1[5];
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
          goto LABEL_10;
      }
      else
      {
        v11 = 0;
        v12 = (std::__shared_weak_count *)a1[6];
        if (!v12)
        {
LABEL_10:
          v15 = *a2;
          if (*a2)
          {
            xpc_retain(*a2);
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
LABEL_31:
              std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          else
          {
            v15 = xpc_null_create();
            v16 = (std::__shared_weak_count *)v7[16];
            if (!v16)
              goto LABEL_31;
          }
          v17 = v7[15];
          v18 = std::__shared_weak_count::lock(v16);
          if (!v18)
            goto LABEL_31;
          v19 = v18;
          v20 = operator new(0x28uLL);
          v21 = v20;
          *v20 = v7;
          v20[1] = v11;
          v20[2] = v10;
          v20[3] = v12;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v23 = __ldxr(p_shared_weak_owners);
            while (__stxr(v23 + 1, p_shared_weak_owners));
          }
          v20[4] = v15;
          v24 = xpc_null_create();
          v25 = v7[17];
          v26 = (unint64_t *)&v19->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = operator new(0x18uLL);
          *v28 = v21;
          v28[1] = v17;
          v28[2] = v19;
          dispatch_async_f(v25, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          xpc_release(v24);
          if (v12)
            std::__shared_weak_count::__release_weak(v12);
          goto LABEL_26;
        }
      }
      v13 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_85(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = (_QWORD *)a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_23:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v9 = a1[5];
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
        {
LABEL_10:
          v14 = (std::__shared_weak_count *)v6[16];
          if (!v14 || (v15 = v6[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
            std::__throw_bad_weak_ptr[abi:ne180100]();
          v17 = v16;
          v18 = operator new(0x20uLL);
          *v18 = v6;
          v18[1] = v10;
          v18[2] = v9;
          v18[3] = v11;
          if (v11)
          {
            p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = v6[17];
          v22 = (unint64_t *)&v17->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
          v24 = operator new(0x18uLL);
          *v24 = v18;
          v24[1] = v15;
          v24[2] = v17;
          dispatch_async_f(v21, v24, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
          do
            v25 = __ldaxr(v22);
          while (__stlxr(v25 - 1, v22));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
          if (v11)
            std::__shared_weak_count::__release_weak(v11);
          goto LABEL_23;
        }
      }
      else
      {
        v10 = 0;
        v11 = (std::__shared_weak_count *)a1[6];
        if (!v11)
          goto LABEL_10;
      }
      v12 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      goto LABEL_10;
    }
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_87(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  int v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  unsigned int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unsigned int v15;
  xpc_object_t object;
  CFTypeRef cf;
  std::__shared_weak_count *v19;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v6 = std::__shared_weak_count::lock(v4);
  v19 = v6;
  if (!v6)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v10 = v6;
LABEL_19:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  cf = (CFTypeRef)TelephonyBasebandCreateController();
  v7 = TelephonyBasebandPowerDebugUnblock();
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    object = v8;
  }
  else
  {
    v9 = xpc_null_create();
    object = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  object = v11;
LABEL_13:
  xpc_release(v9);
  if (v7)
    v12 = 0;
  else
    v12 = -534716414;
  v15 = v12;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v15, &object);
  xpc_release(object);
  if (cf)
    CFRelease(cf);
  v10 = v19;
  if (v19)
    goto LABEL_19;
}

void sub_1BF644518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, const void *a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(&a12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1BF644550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_89(uint64_t a1, xpc_object_t *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t value;
  std::__shared_weak_count *v9;
  int v10;
  xpc_object_t v11;
  int v12;
  xpc_object_t v13;
  int v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  int v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  int v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  unsigned int v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unsigned int v42;
  xpc_object_t object;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v47;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v47 = v7;
  if (!v7)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v9 = v7;
LABEL_65:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  v44 = 0;
  v45 = 0;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC050]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  v10 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v11 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0E0]);
  object = v11;
  if (v11)
    xpc_retain(v11);
  else
    object = xpc_null_create();
  v12 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0B0]);
  object = v13;
  if (v13)
    xpc_retain(v13);
  else
    object = xpc_null_create();
  v14 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v15 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0F8]);
  object = v15;
  if (v15)
    xpc_retain(v15);
  else
    object = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v17 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC100]);
  object = v17;
  if (v17)
    xpc_retain(v17);
  else
    object = xpc_null_create();
  v18 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v19 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC118]);
  object = v19;
  if (v19)
    xpc_retain(v19);
  else
    object = xpc_null_create();
  v20 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v21 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0D8]);
  object = v21;
  if (v21)
    xpc_retain(v21);
  else
    object = xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  if (v12)
    v23 = 2;
  else
    v23 = 0;
  v24 = v23 | v10;
  if (v14)
    v25 = 4;
  else
    v25 = 0;
  if (v16)
    v26 = 8;
  else
    v26 = 0;
  v27 = v24 | v25 | v26;
  if (v18)
    v28 = 16;
  else
    v28 = 0;
  if (v20)
    v29 = 32;
  else
    v29 = 0;
  v30 = v28 | v29;
  if (v22)
    v31 = 64;
  else
    v31 = 0;
  LODWORD(v44) = v27 | v30 | v31;
  v32 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB148]);
  object = v32;
  if (v32)
    xpc_retain(v32);
  else
    object = xpc_null_create();
  HIDWORD(v44) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v33 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB7C0]);
  object = v33;
  if (v33)
    xpc_retain(v33);
  else
    object = xpc_null_create();
  LODWORD(v45) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  v34 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFC0B8]);
  object = v34;
  if (v34)
    xpc_retain(v34);
  else
    object = xpc_null_create();
  BYTE4(v45) = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object);
  BYTE5(v45) = 0;
  v35 = TelephonyBasebandSetPowerDebugOptions();
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v36 = xpc_dictionary_create(0, 0, 0);
  v37 = v36;
  if (v36)
  {
    object = v36;
  }
  else
  {
    v37 = xpc_null_create();
    object = v37;
    if (!v37)
    {
      v38 = xpc_null_create();
      v37 = 0;
      goto LABEL_60;
    }
  }
  if (MEMORY[0x1C3B8CD78](v37) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v37);
    goto LABEL_61;
  }
  v38 = xpc_null_create();
LABEL_60:
  object = v38;
LABEL_61:
  xpc_release(v37);
  if (v35)
    v39 = 0;
  else
    v39 = -534716414;
  v42 = v39;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v42, &object);
  xpc_release(object);
  v9 = v47;
  if (v47)
    goto LABEL_65;
}

void sub_1BF644A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, char a13)
{
  xpc_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_91(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  int v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  unsigned int v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  unsigned int v38;
  xpc_object_t object;
  int64_t value;
  int64_t v41;
  std::__shared_weak_count *v43;

  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v4)
    return;
  v6 = std::__shared_weak_count::lock(v4);
  v43 = v6;
  if (!v6)
    return;
  if (!*(_QWORD *)(a1 + 32))
  {
    v11 = v6;
LABEL_41:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  value = 0;
  v41 = 0;
  v7 = MEMORY[0x1C3B8ACCC](&value);
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  v10 = MEMORY[0x1E0C812F8];
  if (v8)
  {
    object = v8;
  }
  else
  {
    v9 = xpc_null_create();
    object = v9;
    if (!v9)
    {
      v12 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8CD78](v9) == v10)
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v12 = xpc_null_create();
LABEL_12:
  object = v12;
LABEL_13:
  xpc_release(v9);
  if (v7)
  {
    if (MEMORY[0x1C3B8CD78](object) == v10)
    {
      v13 = xpc_BOOL_create(value & 1);
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC050], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = xpc_BOOL_create((value & 2) != 0);
      if (!v15)
        v15 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0E0], v15);
      v16 = xpc_null_create();
      xpc_release(v15);
      xpc_release(v16);
      v17 = xpc_BOOL_create((value & 4) != 0);
      if (!v17)
        v17 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0B0], v17);
      v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      v19 = xpc_BOOL_create((value & 8) != 0);
      if (!v19)
        v19 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0F8], v19);
      v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      v21 = xpc_BOOL_create((value & 0x10) != 0);
      if (!v21)
        v21 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC100], v21);
      v22 = xpc_null_create();
      xpc_release(v21);
      xpc_release(v22);
      v23 = xpc_BOOL_create((value & 0x20) != 0);
      if (!v23)
        v23 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC118], v23);
      v24 = xpc_null_create();
      xpc_release(v23);
      xpc_release(v24);
      v25 = xpc_BOOL_create((value & 0x40) != 0);
      if (!v25)
        v25 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0D8], v25);
      v26 = xpc_null_create();
      xpc_release(v25);
      xpc_release(v26);
      v27 = xpc_int64_create(HIDWORD(value));
      if (!v27)
        v27 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFB148], v27);
      v28 = xpc_null_create();
      xpc_release(v27);
      xpc_release(v28);
      v29 = xpc_int64_create(v41);
      if (!v29)
        v29 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFB7C0], v29);
      v30 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v30);
      v31 = xpc_BOOL_create(SBYTE4(v41));
      if (!v31)
        v31 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFC0B8], v31);
      v32 = xpc_null_create();
      xpc_release(v31);
      xpc_release(v32);
      v33 = xpc_BOOL_create(SBYTE5(v41));
      if (!v33)
        v33 = xpc_null_create();
      xpc_dictionary_set_value(object, (const char *)*MEMORY[0x1E0CFBF10], v33);
      v34 = xpc_null_create();
      xpc_release(v33);
      xpc_release(v34);
    }
    v35 = 0;
  }
  else
  {
    v35 = -534716414;
  }
  v38 = v35;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a3, &v38, &object);
  xpc_release(object);
  v11 = v43;
  if (v43)
    goto LABEL_41;
}

void sub_1BF6451D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  xpc_release(v13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void RadioModule::finishInitialization_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  CommandDriverFactory *v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  const char *v29;
  size_t v30;
  void *v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  CFTypeRef v42;
  const void *v43;
  size_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  NSObject *v53;
  const void *v54;
  size_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  NSObject *v63;
  CommandDriverFactory *v64;
  uint64_t v65;
  __int128 v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  NSObject *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  char v88;
  char v89;
  char v90;
  char v91;
  void (*v92)(char *, char *, uint64_t);
  void (*v93)(uint64_t, _WORD *, unsigned int);
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  _QWORD *v102;
  unint64_t v103;
  uint64_t **v104;
  __int128 v105;
  pthread_mutex_t *v106;
  unsigned int *v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t *v110;
  int v111;
  uint64_t **v112;
  uint64_t *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int *v122;
  unsigned int v123;
  _QWORD **v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  int v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  int v145;
  int v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  int v150;
  int v151;
  int v152;
  _QWORD *v153;
  __int128 v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int v162;
  uint64_t **v163;
  unsigned int *v164;
  unsigned int *v165;
  unsigned int v166;
  unsigned int v167;
  unsigned int *v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  BOOL v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t i;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t **v182;
  int v183;
  int v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  BOOL v189;
  BOOL v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t **v193;
  uint64_t **v194;
  int v195;
  uint64_t ***v196;
  BOOL v197;
  BOOL v198;
  uint64_t ***v199;
  int v200;
  BOOL v201;
  int v202;
  uint64_t *v203;
  uint64_t *v204;
  int v205;
  uint64_t **v206;
  int v207;
  int v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int *v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  int *v227;
  int v228;
  uint64_t v229;
  unsigned int *v230;
  unsigned int v231;
  unsigned int v232;
  _QWORD *v233;
  uint64_t *v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int *v237;
  unsigned int *v238;
  uint64_t *v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t *v242;
  unsigned int v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t *v246;
  uint64_t v247;
  int v248;
  BOOL v249;
  BOOL v250;
  uint64_t *v251;
  RadioModule *v252;
  int v253;
  uint64_t *v254;
  _QWORD *v255;
  uint64_t v256;
  unsigned int *v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  unsigned int *v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int v268;
  char *v269;
  char *v270;
  unsigned int *v271;
  unsigned int *v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int *v275;
  unsigned int v276;
  unsigned int v277;
  void (*v278)(__int128 *, __int128 *, uint64_t);
  std::__shared_weak_count *v279;
  std::__shared_weak_count *v280;
  std::__shared_weak_count *v281;
  std::__shared_weak_count *v282;
  int v283;
  int v284;
  unsigned int *shared_weak_owners;
  unsigned int *v286;
  unsigned int v287;
  unsigned int v288;
  uint64_t shared_owners;
  unsigned int *v290;
  unsigned int v291;
  unsigned int v292;
  unint64_t *v293;
  unint64_t v294;
  const void *v295;
  _OWORD *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  unint64_t v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  unsigned int *v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t *v309;
  void *v310;
  void *v311;
  uint64_t v312;
  uint64_t **v313;
  std::__shared_weak_count *v314;
  std::__shared_weak_count *v315;
  uint64_t v317;
  uint64_t ***v318;
  std::__shared_weak_count *v319;
  uint64_t v320;
  std::__shared_weak_count *v321;
  uint64_t v322;
  std::__shared_weak_count *v323;
  __int128 v324;
  _QWORD v325[6];
  std::__shared_weak_count *v326;
  void *v327;
  dispatch_object_t v328;
  void *v329[2];
  unint64_t v330;
  _QWORD v331[6];
  std::__shared_weak_count *v332;
  void *v333;
  dispatch_object_t v334;
  void *__p[2];
  unint64_t v336;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v339;
  _QWORD aBlock[6];
  std::__shared_weak_count *v341;
  void *v342;
  dispatch_object_t object;
  std::__shared_weak_count *v344;
  std::__shared_weak_count *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t (*v348)(_QWORD *);
  void *v349;
  char *v350;
  void (*v351)(RadioModule *, int);
  uint64_t v352;
  dispatch_object_t v353;
  void *v354;
  std::__shared_weak_count *v355[2];
  __int128 v356;
  __int128 v357;
  uint64_t v358;
  dispatch_object_t v359;
  void *v360;
  dispatch_object_t v361;
  void *v362;
  unint64_t v363;
  unint64_t v364;
  void *v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  unint64_t v376;
  void *v377;
  uint64_t v378;
  pthread_mutex_t *v379;
  uint64_t v380;

  v380 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 15);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  v3 = (char *)this + 120;
  if (!v2 || (v5 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v344 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v345 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v315 = v6;
  v11 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v12 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v11);
    v13 = v366;
    v366 = 0uLL;
    v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v13;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (*((_QWORD *)&v366 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v366 + 1) + 16))(*((_QWORD *)&v366 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v366 + 1));
      }
    }
    v12 = off_1ED70F4D0;
  }
  v19 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v346 = v12;
  v347 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v20 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(_QWORD *)v12 + 16))(v355, v12);
  v344 = 0;
  v345 = 0;
  if (v355[1])
  {
    v345 = std::__shared_weak_count::lock(v355[1]);
    if (v345)
      v344 = v355[0];
    if (v355[1])
      std::__shared_weak_count::__release_weak(v355[1]);
  }
  if (!v19)
    goto LABEL_33;
  v22 = (unint64_t *)&v19->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v24 = MEMORY[0x1E0C809B0];
    v25 = (_QWORD *)&loc_1BF73A000;
    if (!v344)
      goto LABEL_44;
  }
  else
  {
LABEL_33:
    v24 = MEMORY[0x1E0C809B0];
    v25 = &loc_1BF73A000;
    if (!v344)
      goto LABEL_44;
  }
  aBlock[0] = v24;
  aBlock[1] = v25[283];
  aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_96;
  aBlock[4] = this;
  aBlock[5] = v4;
  v341 = v6;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  v27 = _Block_copy(aBlock);
  v28 = *((_QWORD *)this + 17);
  if (v28)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v342 = v27;
  object = v28;
  radio::CommandDriver::watchOperatingMode();
  if (object)
    dispatch_release(object);
  if (v342)
    _Block_release(v342);
  if (v341)
    std::__shared_weak_count::__release_weak(v341);
LABEL_44:
  v29 = (const char *)(*(uint64_t (**)(RadioModule *))(*(_QWORD *)this + 16))(this);
  v30 = strlen(v29);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = (void *)v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = (void **)operator new(v33 + 1);
    __dst[1] = v31;
    v339 = v34 | 0x8000000000000000;
    __dst[0] = v32;
  }
  else
  {
    HIBYTE(v339) = v30;
    v32 = __dst;
    if (!v30)
      goto LABEL_52;
  }
  memmove(v32, v29, (size_t)v31);
LABEL_52:
  *((_BYTE *)v31 + (_QWORD)v32) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v35 = v366;
  v366 = 0uLL;
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  *((_OWORD *)this + 11) = v35;
  if (!v36)
    goto LABEL_56;
  v37 = (unint64_t *)&v36->__shared_owners_;
  do
    v38 = __ldaxr(v37);
  while (__stlxr(v38 - 1, v37));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_60;
  }
  else
  {
LABEL_56:
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_60;
  }
  v40 = (unint64_t *)&v39->__shared_owners_;
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_60:
    v42 = cf;
    if (!cf)
      goto LABEL_62;
    goto LABEL_61;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  v42 = cf;
  if (cf)
LABEL_61:
    CFRelease(v42);
LABEL_62:
  if (SHIBYTE(v339) < 0)
    operator delete(__dst[0]);
  v43 = (const void *)*MEMORY[0x1E0CFBD68];
  v44 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v44 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v45 = (void *)v44;
  if (v44 >= 0x17)
  {
    v47 = v24;
    v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v44 | 7) != 0x17)
      v48 = v44 | 7;
    v49 = v48 + 1;
    v46 = operator new(v48 + 1);
    __p[1] = v45;
    v336 = v49 | 0x8000000000000000;
    __p[0] = v46;
    v24 = v47;
    v25 = &loc_1BF73A000;
  }
  else
  {
    HIBYTE(v336) = v44;
    v46 = __p;
    if (!v44)
      goto LABEL_72;
  }
  memmove(v46, v43, (size_t)v45);
LABEL_72:
  *((_BYTE *)v45 + (_QWORD)v46) = 0;
  v331[0] = v24;
  v50 = v25[283];
  v331[1] = v50;
  v331[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_97;
  v331[3] = &__block_descriptor_tmp_100;
  v331[4] = this;
  v331[5] = v4;
  v332 = v6;
  do
    v51 = __ldxr(p_shared_weak_owners);
  while (__stxr(v51 + 1, p_shared_weak_owners));
  v52 = _Block_copy(v331);
  v53 = *((_QWORD *)this + 17);
  if (v53)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v333 = v52;
  v334 = v53;
  AppleBasebandManager::setEventHandler();
  if (v334)
    dispatch_release(v334);
  if (v333)
    _Block_release(v333);
  if (SHIBYTE(v336) < 0)
    operator delete(__p[0]);
  v54 = (const void *)*MEMORY[0x1E0CFB9A8];
  v55 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
  if (v55 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v56 = (void *)v55;
  if (v55 >= 0x17)
  {
    v58 = v24;
    v59 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v59 = v55 | 7;
    v60 = v59 + 1;
    v57 = operator new(v59 + 1);
    v329[1] = v56;
    v330 = v60 | 0x8000000000000000;
    v329[0] = v57;
    v24 = v58;
  }
  else
  {
    HIBYTE(v330) = v55;
    v57 = v329;
    if (!v55)
      goto LABEL_90;
  }
  memmove(v57, v54, (size_t)v56);
LABEL_90:
  *((_BYTE *)v56 + (_QWORD)v57) = 0;
  v325[0] = v24;
  v325[1] = v50;
  v325[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_101;
  v325[3] = &__block_descriptor_tmp_102;
  v325[4] = this;
  v325[5] = v4;
  v326 = v6;
  do
    v61 = __ldxr(p_shared_weak_owners);
  while (__stxr(v61 + 1, p_shared_weak_owners));
  v62 = _Block_copy(v325);
  v63 = *((_QWORD *)this + 17);
  if (v63)
    dispatch_retain(*((dispatch_object_t *)this + 17));
  v327 = v62;
  v328 = v63;
  AppleBasebandManager::setEventHandler();
  if (v328)
    dispatch_release(v328);
  if (v327)
    _Block_release(v327);
  if (SHIBYTE(v330) < 0)
    operator delete(v329[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 22));
  v64 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v65 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v64);
    v66 = v366;
    v366 = 0uLL;
    v67 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v66;
    if (v67)
    {
      v68 = (unint64_t *)&v67->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v70 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    if (*((_QWORD *)&v366 + 1))
    {
      v71 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v65 = off_1ED70F4D0;
  }
  v319 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v73 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v65 + 16))(&v320, v65);
  v322 = 0;
  v323 = 0;
  if (v321 && (v323 = std::__shared_weak_count::lock(v321)) != 0)
  {
    v75 = v320;
    v322 = v320;
  }
  else
  {
    v75 = 0;
  }
  v346 = v24;
  v347 = 0x40000000;
  v348 = ___ZN3ctu20SharedSynchronizableI11RadioModuleE13connect_eventIN5boost8signals26signalIFvjENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEjEEENS5_5mutexEEES1_vJjEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke;
  v349 = &__block_descriptor_tmp_148;
  v350 = v3;
  v351 = RadioModule::handleResetSPMI_sync;
  v352 = 0;
  v76 = _Block_copy(&v346);
  v312 = v75;
  v77 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v77 || (v317 = *((_QWORD *)this + 15), (v78 = std::__shared_weak_count::lock(v77)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v79 = v78;
  v80 = *((_QWORD *)this + 17);
  v353 = v80;
  if (v76)
    v81 = _Block_copy(v76);
  else
    v81 = 0;
  v354 = v81;
  dispatch_retain(v80);
  *(_OWORD *)v355 = 0u;
  v356 = 0u;
  v359 = v80;
  if (v81)
    v81 = _Block_copy(v81);
  v360 = v81;
  dispatch_retain(v80);
  v361 = v80;
  v314 = v79;
  v311 = v76;
  if (!v81)
  {
    v362 = 0;
    dispatch_retain(v80);
    goto LABEL_135;
  }
  v82 = _Block_copy(v81);
  v362 = v82;
  dispatch_retain(v80);
  if (!v82)
  {
LABEL_135:
    dispatch_retain(v80);
    v363 = 0;
    goto LABEL_136;
  }
  v83 = _Block_copy(v82);
  dispatch_retain(v80);
  v363 = 0;
  if (!v83)
  {
LABEL_136:
    dispatch_retain(v80);
    v310 = 0;
    v88 = 1;
LABEL_137:
    dispatch_retain(v80);
    v84 = 0;
    v89 = 1;
LABEL_138:
    dispatch_retain(v80);
    v85 = 0;
    v90 = 1;
LABEL_139:
    dispatch_retain(v80);
    v86 = 0;
    v364 = (unint64_t)v80;
    v91 = 1;
    goto LABEL_140;
  }
  v84 = _Block_copy(v83);
  dispatch_retain(v80);
  v310 = v83;
  if (!v84)
  {
    v88 = 0;
    goto LABEL_137;
  }
  v85 = _Block_copy(v84);
  dispatch_retain(v80);
  if (!v85)
  {
    v88 = 0;
    v89 = 0;
    goto LABEL_138;
  }
  v86 = _Block_copy(v85);
  dispatch_retain(v80);
  if (!v86)
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
    goto LABEL_139;
  }
  v87 = _Block_copy(v86);
  dispatch_retain(v80);
  v364 = (unint64_t)v80;
  if (v87)
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v365 = _Block_copy(v87);
    dispatch_retain(v80);
    dispatch_release(v80);
    _Block_release(v87);
    goto LABEL_141;
  }
  v88 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
LABEL_140:
  v365 = 0;
  dispatch_retain(v80);
  dispatch_release(v80);
LABEL_141:
  dispatch_release(v80);
  if ((v91 & 1) == 0)
    _Block_release(v86);
  dispatch_release(v80);
  if ((v90 & 1) == 0)
    _Block_release(v85);
  v363 = (unint64_t)boost::function1<void,unsigned int>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})>>)::stored_vtable;
  dispatch_release(v80);
  if ((v89 & 1) == 0)
    _Block_release(v84);
  dispatch_release(v80);
  if ((v88 & 1) == 0)
    _Block_release(v310);
  *((_QWORD *)&v367 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v367 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v366 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v366 = 0;
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v366, (uint64_t *)&v363);
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v363, (uint64_t *)&v356 + 1);
  boost::function1<void,unsigned int>::move_assign((uint64_t)&v356 + 8, (uint64_t *)&v366);
  if ((_QWORD)v366)
  {
    if ((v366 & 1) == 0)
    {
      v92 = *(void (**)(char *, char *, uint64_t))(v366 & 0xFFFFFFFFFFFFFFFELL);
      if (v92)
        v92((char *)&v366 + 8, (char *)&v366 + 8, 2);
    }
  }
  if (v363)
  {
    if ((v363 & 1) == 0)
    {
      v93 = *(void (**)(uint64_t, _WORD *, unsigned int))(v363 & 0xFFFFFFFFFFFFFFFELL);
      if (v93)
        v93((uint64_t)&v364, &v364, 2u);
    }
    v363 = 0;
  }
  dispatch_release(v361);
  if (v362)
    _Block_release(v362);
  dispatch_release(v359);
  if (v360)
    _Block_release(v360);
  v94 = (unint64_t *)&v314->__shared_weak_owners_;
  do
    v95 = __ldxr(v94);
  while (__stxr(v95 + 1, v94));
  v96 = operator new(0x18uLL);
  *v96 = &off_1E7919D10;
  v96[1] = v317;
  v96[2] = v314;
  do
    v97 = __ldxr(v94);
  while (__stxr(v97 + 1, v94));
  v98 = operator new(0x18uLL);
  v99 = v98;
  *v98 = &off_1E7919D10;
  v98[1] = v317;
  v98[2] = v314;
  do
    v100 = __ldxr(v94);
  while (__stxr(v100 + 1, v94));
  *((_QWORD *)&v366 + 1) = v98;
  LODWORD(v366) = 2;
  v101 = v355[1];
  if (v355[1] < (std::__shared_weak_count *)v356)
  {
    v102 = operator new(0x18uLL);
    *v102 = &off_1E7919D10;
    v102[1] = v317;
    v102[2] = v314;
    do
      v103 = __ldxr(v94);
    while (__stxr(v103 + 1, v94));
    v101->__shared_owners_ = (uint64_t)v102;
    LODWORD(v101->__vftable) = 2;
    v355[1] = v101 + 1;
LABEL_172:
    (*(void (**)(_QWORD *))(*v99 + 8))(v99);
    goto LABEL_173;
  }
  v227 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v355, (uint64_t)&v366);
  v228 = v366 ^ ((int)v366 >> 31);
  v355[1] = (std::__shared_weak_count *)v227;
  if (v228 == 2)
  {
    v99 = (_QWORD *)*((_QWORD *)&v366 + 1);
    if (!*((_QWORD *)&v366 + 1))
      goto LABEL_173;
    goto LABEL_172;
  }
  if (v228 == 1)
  {
    v229 = v367;
    if ((_QWORD)v367)
    {
      v230 = (unsigned int *)(v367 + 12);
      do
      {
        v231 = __ldaxr(v230);
        v232 = v231 - 1;
      }
      while (__stlxr(v232, v230));
      if (!v232)
LABEL_382:
        (*(void (**)(uint64_t))(*(_QWORD *)v229 + 24))(v229);
    }
  }
  else
  {
    v229 = v367;
    if ((_QWORD)v367)
    {
      v306 = (unsigned int *)(v367 + 12);
      do
      {
        v307 = __ldaxr(v306);
        v308 = v307 - 1;
      }
      while (__stlxr(v308, v306));
      if (!v308)
        goto LABEL_382;
    }
  }
LABEL_173:
  (*(void (**)(_QWORD *))(*v96 + 8))(v96);
  std::__shared_weak_count::__release_weak(v314);
  v104 = *(uint64_t ***)(v312 + 136);
  *(_QWORD *)&v105 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v105 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v374 = v105;
  v375 = v105;
  v372 = v105;
  v373 = v105;
  v370 = v105;
  v371 = v105;
  v368 = v105;
  v369 = v105;
  v366 = v105;
  v367 = v105;
  v106 = (pthread_mutex_t *)v104[3];
  v376 = 10;
  v377 = &v366;
  v378 = 0;
  v379 = v106;
  pthread_mutex_lock(v106);
  v364 = 0xAAAAAAAAAAAAAAAALL;
  v363 = 0xAAAAAAAAAAAAAAAALL;
  v107 = (unsigned int *)v104[1];
  v318 = (uint64_t ***)v104;
  if (!v107 || (v108 = atomic_load(v107 + 2), v108 != 1))
  {
    v112 = (uint64_t **)operator new(0x20uLL);
    v113 = *v104;
    v114 = **v104;
    v313 = v112;
    v115 = operator new(0x40uLL);
    v116 = v115;
    *v115 = v115;
    v115[1] = v115;
    v115[2] = 0;
    v117 = *(_QWORD **)(v114 + 8);
    if (v117 != (_QWORD *)v114)
    {
      v118 = 0;
      v119 = v115;
      do
      {
        v120 = operator new(0x20uLL);
        v120[2] = v117[2];
        v121 = v117[3];
        v120[3] = v121;
        if (v121)
        {
          v122 = (unsigned int *)(v121 + 8);
          do
            v123 = __ldxr(v122);
          while (__stxr(v123 + 1, v122));
          v119 = (_QWORD *)*v116;
          v118 = v116[2];
        }
        *v120 = v119;
        v120[1] = v116;
        v119[1] = v120;
        *v116 = v120;
        v116[2] = ++v118;
        v117 = (_QWORD *)v117[1];
        v119 = v120;
      }
      while (v117 != (_QWORD *)v114);
    }
    v309 = v113;
    v116[3] = 0;
    v124 = (_QWORD **)(v116 + 3);
    v116[4] = 0;
    v125 = v116 + 4;
    v116[5] = 0;
    *((_BYTE *)v116 + 48) = *(_BYTE *)(v114 + 48);
    v116[3] = v116 + 4;
    v126 = *(_QWORD **)(v114 + 24);
    v127 = (_QWORD *)(v114 + 32);
    if (v126 == (_QWORD *)(v114 + 32))
    {
LABEL_185:
      *((_BYTE *)v116 + 56) = *(_BYTE *)(v114 + 56);
      v128 = *(_QWORD **)(v114 + 24);
      if (v128 != v127)
      {
        v129 = (_QWORD *)v116[3];
        v130 = v116[1];
        do
        {
          v129[6] = v130;
          v131 = v114;
          if (v128 != v127)
            v131 = v128[6];
          v132 = (_QWORD *)v128[1];
          v133 = v132;
          v134 = v128;
          if (v132)
          {
            do
            {
              v135 = v133;
              v133 = (_QWORD *)*v133;
            }
            while (v133);
          }
          else
          {
            do
            {
              v135 = (_QWORD *)v134[2];
              v189 = *v135 == (_QWORD)v134;
              v134 = v135;
            }
            while (!v189);
          }
          v136 = v114;
          if (v135 != v127)
            v136 = v135[6];
          while (v131 != v136)
          {
            v131 = *(_QWORD *)(v131 + 8);
            v130 = *(_QWORD *)(v130 + 8);
          }
          if (v132)
          {
            do
            {
              v137 = v132;
              v132 = (_QWORD *)*v132;
            }
            while (v132);
          }
          else
          {
            do
            {
              v137 = (_QWORD *)v128[2];
              v189 = *v137 == (_QWORD)v128;
              v128 = v137;
            }
            while (!v189);
          }
          v138 = (_QWORD *)v129[1];
          if (v138)
          {
            do
            {
              v139 = v138;
              v138 = (_QWORD *)*v138;
            }
            while (v138);
          }
          else
          {
            do
            {
              v139 = (_QWORD *)v129[2];
              v189 = *v139 == (_QWORD)v129;
              v129 = v139;
            }
            while (!v189);
          }
          v128 = v137;
          v129 = v139;
        }
        while (v137 != v127);
      }
      *v313 = v116;
      v313[1] = 0;
      v159 = (uint64_t *)operator new(0x18uLL);
      v104 = (uint64_t **)v318;
      v159[1] = 0x100000001;
      *v159 = (uint64_t)off_1E7919B38;
      v159[2] = (uint64_t)v116;
      v313[1] = v159;
      v313[2] = (uint64_t *)v309[2];
      v160 = v309[3];
      v313[3] = (uint64_t *)v160;
      if (v160)
      {
        v161 = (unsigned int *)(v160 + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
      v163 = (uint64_t **)operator new(0x18uLL);
      v163[1] = (uint64_t *)0x100000001;
      *v163 = (uint64_t *)off_1E7919AD8;
      v163[2] = (uint64_t *)v313;
      v164 = (unsigned int *)v318[1];
      *v318 = v313;
      v318[1] = v163;
      if (v164)
      {
        v165 = v164 + 2;
        do
        {
          v166 = __ldaxr(v165);
          v167 = v166 - 1;
        }
        while (__stlxr(v167, v165));
        if (!v167)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v164 + 16))(v164);
          v168 = v164 + 3;
          do
          {
            v169 = __ldaxr(v168);
            v170 = v169 - 1;
          }
          while (__stlxr(v170, v168));
          if (!v170)
            (*(void (**)(unsigned int *))(*(_QWORD *)v164 + 24))(v164);
        }
      }
      v111 = 0;
      v109 = **v318;
LABEL_269:
      v110 = (uint64_t *)v109[1];
      if (v109 == v110)
        goto LABEL_373;
      goto LABEL_270;
    }
    while (1)
    {
      v140 = *((_DWORD *)v126 + 8);
      v141 = (_QWORD *)*v125;
      v142 = v116 + 4;
      if (*v124 != v125)
      {
        v143 = (_QWORD *)*v125;
        v144 = v116 + 4;
        if (v141)
        {
          do
          {
            v142 = v143;
            v143 = (_QWORD *)v143[1];
          }
          while (v143);
        }
        else
        {
          do
          {
            v142 = (_QWORD *)v144[2];
            v189 = *v142 == (_QWORD)v144;
            v144 = v142;
          }
          while (v189);
        }
        v145 = *((_DWORD *)v126 + 10);
        v146 = *((_DWORD *)v142 + 8);
        if (v146 == v140)
        {
          if (v140 != 1)
            goto LABEL_230;
          if (*((_DWORD *)v142 + 10) >= v145)
          {
            v147 = (_QWORD *)*v125;
            v148 = v116 + 4;
            v149 = v116 + 4;
            if (v141)
              goto LABEL_234;
LABEL_241:
            v153 = operator new(0x38uLL);
            v154 = *((_OWORD *)v126 + 2);
            v153[6] = v126[6];
            *((_OWORD *)v153 + 2) = v154;
            *v153 = 0;
            v153[1] = 0;
            v153[2] = v149;
            *v148 = v153;
            v155 = (_QWORD *)**v124;
            if (v155)
            {
              *v124 = v155;
              v153 = (_QWORD *)*v148;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v116[4], v153);
            ++v116[5];
            goto LABEL_244;
          }
        }
        else if (v146 >= v140)
        {
LABEL_230:
          v148 = v116 + 4;
          v149 = v116 + 4;
          if (!v141)
            goto LABEL_241;
          v147 = (_QWORD *)*v125;
          if (v140 != 1)
          {
            v150 = *((_DWORD *)v141 + 8);
            v149 = (_QWORD *)*v125;
            while (v140 != v150)
            {
              if (v140 < v150)
              {
                v158 = *v149;
                v148 = v149;
                if (!*v149)
                  goto LABEL_241;
              }
              else
              {
                if (v150 >= v140)
                  goto LABEL_244;
                v158 = v149[1];
                if (!v158)
                  goto LABEL_240;
              }
              v150 = *(_DWORD *)(v158 + 32);
              v149 = (_QWORD *)v158;
            }
            goto LABEL_244;
          }
          while (1)
          {
LABEL_234:
            v149 = v147;
            v151 = *((_DWORD *)v147 + 8);
            if (v151 == 1)
            {
              v152 = *((_DWORD *)v147 + 10);
              if (v152 > v145)
                goto LABEL_233;
              if (v152 >= v145)
                goto LABEL_244;
            }
            else if (v151 > 1)
            {
LABEL_233:
              v147 = (_QWORD *)*v147;
              v148 = v149;
              if (!*v149)
                goto LABEL_241;
              continue;
            }
            v147 = (_QWORD *)v147[1];
            if (!v147)
            {
LABEL_240:
              v148 = v149 + 1;
              goto LABEL_241;
            }
          }
        }
      }
      if (v141)
        v149 = v142;
      else
        v149 = v116 + 4;
      if (v141)
        v148 = v142 + 1;
      else
        v148 = v116 + 4;
      if (!*v148)
        goto LABEL_241;
LABEL_244:
      v156 = (_QWORD *)v126[1];
      if (v156)
      {
        do
        {
          v157 = v156;
          v156 = (_QWORD *)*v156;
        }
        while (v156);
      }
      else
      {
        do
        {
          v157 = (_QWORD *)v126[2];
          v189 = *v157 == (_QWORD)v126;
          v126 = v157;
        }
        while (!v189);
      }
      v126 = v157;
      if (v157 == v127)
        goto LABEL_185;
    }
  }
  v109 = (uint64_t *)**v104;
  v110 = v104[2];
  v111 = 2;
  if (v110 == v109)
    goto LABEL_269;
LABEL_270:
  v171 = 0;
  v172 = v111 - 1;
  do
  {
    v175 = v110[2];
    v176 = *(uint64_t **)(v175 + 32);
    if (v176)
    {
      for (i = *v176; i != v176[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
            goto LABEL_287;
        }
        else
        {
          v178 = *(_QWORD *)(i + 16);
          if (!v178 || (v179 = atomic_load((unsigned int *)(v178 + 8))) == 0)
          {
LABEL_287:
            if (*(_BYTE *)(v175 + 24))
            {
              *(_BYTE *)(v175 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v175, &v366);
            }
            break;
          }
        }
      }
    }
    v173 = v110[2];
    if (*(_BYTE *)(v173 + 24))
    {
      v109 = (uint64_t *)v110[1];
      goto LABEL_273;
    }
    v180 = **v104;
    v182 = (uint64_t **)(v180 + 32);
    v181 = *(_QWORD *)(v180 + 32);
    if (!v181)
    {
      if (*(uint64_t **)(v180 + 80) != v110)
        goto LABEL_364;
      v204 = (uint64_t *)v110[1];
      v206 = (uint64_t **)(v180 + 32);
      v185 = (uint64_t *)(v180 + 32);
      if (v204 != (uint64_t *)v180)
        goto LABEL_360;
LABEL_342:
      v209 = (uint64_t *)v185[1];
      v210 = v185;
      if (v209)
      {
        do
        {
          v211 = v209;
          v209 = (uint64_t *)*v209;
        }
        while (v209);
      }
      else
      {
        do
        {
          v211 = (uint64_t *)v210[2];
          v189 = *v211 == (_QWORD)v210;
          v210 = v211;
        }
        while (!v189);
      }
      if (*(uint64_t **)(v180 + 24) == v185)
        *(_QWORD *)(v180 + 24) = v211;
      --*(_QWORD *)(v180 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v181, v185);
      operator delete(v185);
      goto LABEL_364;
    }
    v183 = *(_DWORD *)(v173 + 64);
    v184 = *(_DWORD *)(v173 + 72);
    v185 = (uint64_t *)(v180 + 32);
    v186 = *(_QWORD *)(v180 + 32);
    if (v183 == 1)
    {
      v185 = (uint64_t *)(v180 + 32);
      v187 = *(_QWORD *)(v180 + 32);
      do
      {
        while (1)
        {
          v200 = *(_DWORD *)(v187 + 32);
          v201 = v200 < 1;
          if (v200 == 1)
            v201 = *(_DWORD *)(v187 + 40) < v184;
          if (v201)
            break;
          v185 = (uint64_t *)v187;
          v187 = *(_QWORD *)v187;
          if (!v187)
            goto LABEL_302;
        }
        v187 = *(_QWORD *)(v187 + 8);
      }
      while (v187);
    }
    else
    {
      do
      {
        v188 = *(_DWORD *)(v186 + 32);
        v189 = v188 == v183;
        v190 = v188 < v183;
        if (v188 >= v183)
          v191 = (uint64_t *)v186;
        else
          v191 = (uint64_t *)(v186 + 8);
        if (v190)
          v192 = v185;
        else
          v192 = (uint64_t *)v186;
        if (v189)
        {
          v191 = (uint64_t *)v186;
          v185 = (uint64_t *)v186;
        }
        else
        {
          v185 = v192;
        }
        v186 = *v191;
      }
      while (*v191);
    }
LABEL_302:
    if ((uint64_t *)v185[6] != v110)
      goto LABEL_364;
    v193 = (uint64_t **)(v180 + 32);
    v194 = *(uint64_t ***)(v180 + 32);
    if (v183 == 1)
    {
      while (1)
      {
        v202 = *((_DWORD *)v194 + 8);
        if (v202 == 1)
        {
          if (v184 < *((_DWORD *)v194 + 10))
            goto LABEL_325;
LABEL_320:
          v194 = (uint64_t **)v194[1];
          if (!v194)
            goto LABEL_326;
        }
        else
        {
          if (v202 <= 1)
            goto LABEL_320;
LABEL_325:
          v193 = v194;
          v194 = (uint64_t **)*v194;
          if (!v194)
            goto LABEL_326;
        }
      }
    }
    do
    {
      v195 = *((_DWORD *)v194 + 8);
      v196 = (uint64_t ***)(v194 + 1);
      v197 = v183 == v195;
      v198 = v183 < v195;
      if (v183 >= v195)
        v199 = (uint64_t ***)(v194 + 1);
      else
        v199 = (uint64_t ***)v194;
      if (!v198)
        v194 = v193;
      if (v197)
        v199 = v196;
      else
        v193 = v194;
      v194 = *v199;
    }
    while (*v199);
LABEL_326:
    v203 = (uint64_t *)v180;
    if (v193 != v182)
      v203 = v193[6];
    v204 = (uint64_t *)v110[1];
    if (v204 == v203)
      goto LABEL_342;
    if (v183 == 1)
    {
      while (1)
      {
        while (1)
        {
          v206 = (uint64_t **)v181;
          v207 = *(_DWORD *)(v181 + 32);
          if (v207 == 1)
            break;
          if (v207 <= 1)
            goto LABEL_338;
LABEL_332:
          v181 = *(_QWORD *)v181;
          if (!*v206)
          {
            v182 = v206;
            goto LABEL_360;
          }
        }
        v208 = *(_DWORD *)(v181 + 40);
        if (v208 > v184)
          goto LABEL_332;
        if (v208 >= v184)
        {
          *(_QWORD *)(v181 + 48) = v204;
          goto LABEL_364;
        }
LABEL_338:
        v181 = *(_QWORD *)(v181 + 8);
        if (!v181)
        {
          v182 = v206 + 1;
          goto LABEL_360;
        }
      }
    }
    v205 = *(_DWORD *)(v181 + 32);
    if (v183 == v205)
      goto LABEL_363;
    while (v183 >= v205)
    {
      if (v205 >= v183)
        goto LABEL_363;
      v212 = *(_QWORD *)(v181 + 8);
      if (!v212)
      {
        v182 = (uint64_t **)(v181 + 8);
        goto LABEL_359;
      }
LABEL_351:
      v205 = *(_DWORD *)(v212 + 32);
      v181 = v212;
      if (v183 == v205)
      {
        *(_QWORD *)(v212 + 48) = v204;
        goto LABEL_364;
      }
    }
    v212 = *(_QWORD *)v181;
    if (*(_QWORD *)v181)
      goto LABEL_351;
    v182 = (uint64_t **)v181;
LABEL_359:
    v206 = (uint64_t **)v181;
LABEL_360:
    v181 = (uint64_t)operator new(0x38uLL);
    v213 = *(_QWORD *)(v173 + 64);
    *(_DWORD *)(v181 + 40) = *(_DWORD *)(v173 + 72);
    *(_QWORD *)(v181 + 32) = v213;
    *(_QWORD *)(v181 + 48) = 0;
    *(_QWORD *)v181 = 0;
    *(_QWORD *)(v181 + 8) = 0;
    *(_QWORD *)(v181 + 16) = v206;
    *v182 = (uint64_t *)v181;
    v214 = **(_QWORD **)(v180 + 24);
    v215 = (uint64_t *)v181;
    if (v214)
    {
      *(_QWORD *)(v180 + 24) = v214;
      v215 = *v182;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v180 + 32), v215);
    ++*(_QWORD *)(v180 + 40);
LABEL_363:
    *(_QWORD *)(v181 + 48) = v204;
LABEL_364:
    v216 = *v110;
    v109 = (uint64_t *)v110[1];
    *(_QWORD *)(v216 + 8) = v109;
    *(_QWORD *)v110[1] = v216;
    --*(_QWORD *)(v180 + 16);
    v217 = (unsigned int *)v110[3];
    v104 = (uint64_t **)v318;
    if (v217)
    {
      v218 = v217 + 2;
      do
      {
        v219 = __ldaxr(v218);
        v220 = v219 - 1;
      }
      while (__stlxr(v220, v218));
      if (!v220)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v217 + 16))(v217);
        v221 = v217 + 3;
        do
        {
          v222 = __ldaxr(v221);
          v223 = v222 - 1;
        }
        while (__stlxr(v223, v221));
        if (!v223)
          (*(void (**)(unsigned int *))(*(_QWORD *)v217 + 24))(v217);
      }
    }
    operator delete(v110);
LABEL_273:
    v174 = v109 != (uint64_t *)**v104 && v172 >= ++v171;
    v110 = v109;
  }
  while (v174);
LABEL_373:
  v104[2] = v109;
  v224 = operator new(0x50uLL);
  v224[1] = 0;
  v224[2] = 0;
  *((_BYTE *)v224 + 24) = 1;
  *((_DWORD *)v224 + 7) = 1;
  *v224 = off_1E7919B98;
  v225 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v225, (uint64_t *)v355);
  v225[3] = 0;
  v226 = *((_QWORD *)&v356 + 1);
  if (*((_QWORD *)&v356 + 1))
  {
    v225[3] = *((_QWORD *)&v356 + 1);
    if ((v226 & 1) != 0)
    {
      *((_OWORD *)v225 + 2) = v357;
      v225[6] = v358;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v226 & 0xFFFFFFFFFFFFFFFELL))(&v357, v225 + 4, 0);
    }
  }
  v224[4] = v225;
  v224[5] = 0;
  v233 = operator new(0x18uLL);
  v233[1] = 0x100000001;
  *v233 = off_1E7919BF0;
  v233[2] = v225;
  v224[5] = v233;
  v224[6] = v104[3];
  v234 = v104[4];
  v224[7] = v234;
  if (v234)
  {
    v235 = (unsigned int *)(v234 + 1);
    do
      v236 = __ldxr(v235);
    while (__stxr(v236 + 1, v235));
  }
  *((_DWORD *)v224 + 16) = 0;
  *((_BYTE *)v224 + 68) = 0;
  v363 = (unint64_t)v224;
  v237 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v237 + 1) = 0x100000001;
  v238 = v237 + 2;
  *(_QWORD *)v237 = off_1E7919C50;
  *((_QWORD *)v237 + 2) = v224;
  v364 = (unint64_t)v237;
  v239 = (uint64_t *)**v104;
  v240 = operator new(0x20uLL);
  v241 = v240;
  v242 = v239 + 4;
  v240[2] = v224;
  v240[3] = v237;
  do
    v243 = __ldxr(v238);
  while (__stxr(v243 + 1, v238));
  v244 = *v239;
  *(_QWORD *)(v244 + 8) = v240;
  *v240 = v244;
  *v239 = (uint64_t)v240;
  v240[1] = v239;
  ++v239[2];
  v245 = (uint64_t *)v239[4];
  if (v245)
  {
    v246 = v239 + 4;
    v247 = v239[4];
    do
    {
      v248 = *(_DWORD *)(v247 + 32);
      v249 = v248 == 2;
      v250 = v248 < 2;
      if (v248 >= 2)
        v251 = (uint64_t *)v247;
      else
        v251 = (uint64_t *)(v247 + 8);
      if (!v250)
        v246 = (uint64_t *)v247;
      if (v249)
      {
        v251 = (uint64_t *)v247;
        v246 = (uint64_t *)v247;
      }
      v247 = *v251;
    }
    while (*v251);
    if (v246 == v242 || *((_DWORD *)v246 + 8) != 2)
    {
      v253 = *((_DWORD *)v245 + 8);
      while (v253 != 2)
      {
        if (v253 < 3)
        {
          v254 = (uint64_t *)v245[1];
          if (!v254)
          {
            v242 = v245 + 1;
            goto LABEL_410;
          }
        }
        else
        {
          v254 = (uint64_t *)*v245;
          v242 = v245;
          if (!*v245)
            goto LABEL_410;
        }
        v253 = *((_DWORD *)v254 + 8);
        v245 = v254;
      }
    }
    *((_DWORD *)v224 + 16) = 2;
    *(_QWORD *)((char *)v224 + 68) = 0xAAAAAAAAAAAAAA00;
    v252 = this;
LABEL_413:
    v257 = v237 + 3;
    do
      v258 = __ldxr(v257);
    while (__stxr(v258 + 1, v257));
    *(_QWORD *)&v324 = v224;
    *((_QWORD *)&v324 + 1) = v237;
    do
      v259 = __ldxr(v257);
    while (__stxr(v259 + 1, v257));
    do
    {
      v260 = __ldaxr(v257);
      v261 = v260 - 1;
    }
    while (__stlxr(v261, v257));
    if (!v261)
      (*(void (**)(unsigned int *))(*(_QWORD *)v237 + 24))(v237);
    v262 = (unsigned int *)v364;
    if (v364)
      goto LABEL_421;
  }
  else
  {
    v245 = v239 + 4;
LABEL_410:
    v255 = operator new(0x38uLL);
    v255[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v255 + 10) = -1431655766;
    v255[6] = v241;
    *v255 = 0;
    v255[1] = 0;
    v255[2] = v245;
    *v242 = (uint64_t)v255;
    v256 = *(_QWORD *)v239[3];
    if (v256)
    {
      v239[3] = v256;
      v255 = (_QWORD *)*v242;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v239[4], v255);
    ++v239[5];
    v224 = (_QWORD *)v363;
    v237 = (unsigned int *)v364;
    *(_DWORD *)(v363 + 64) = 2;
    *(_QWORD *)((char *)v224 + 68) = 0xAAAAAAAAAAAAAA00;
    v252 = this;
    if (v237)
      goto LABEL_413;
    v324 = (unint64_t)v224;
    v262 = (unsigned int *)v364;
    if (v364)
    {
LABEL_421:
      v263 = v262 + 2;
      do
      {
        v264 = __ldaxr(v263);
        v265 = v264 - 1;
      }
      while (__stlxr(v265, v263));
      if (!v265)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v262 + 16))(v262);
        v266 = v262 + 3;
        do
        {
          v267 = __ldaxr(v266);
          v268 = v267 - 1;
        }
        while (__stlxr(v268, v266));
        if (!v268)
          (*(void (**)(unsigned int *))(*(_QWORD *)v262 + 24))(v262);
      }
    }
  }
  pthread_mutex_unlock(v379);
  v269 = (char *)v377;
  if (v377)
  {
    if (v378 - 1 >= 0)
    {
      v270 = (char *)v377 + 16 * v378;
      do
      {
        v271 = (unsigned int *)*((_QWORD *)v270 - 1);
        if (v271)
        {
          v272 = v271 + 2;
          do
          {
            v273 = __ldaxr(v272);
            v274 = v273 - 1;
          }
          while (__stlxr(v274, v272));
          if (!v274)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v271 + 16))(v271);
            v275 = v271 + 3;
            do
            {
              v276 = __ldaxr(v275);
              v277 = v276 - 1;
            }
            while (__stlxr(v277, v275));
            if (!v277)
              (*(void (**)(unsigned int *))(*(_QWORD *)v271 + 24))(v271);
          }
        }
        v270 -= 16;
      }
      while (v270 > v269);
    }
    v252 = this;
    if (v376 >= 0xB)
      operator delete(v377);
  }
  if (*((_QWORD *)&v356 + 1))
  {
    if ((BYTE8(v356) & 1) == 0)
    {
      v278 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v356 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v278)
        v278(&v357, &v357, 2);
    }
    *((_QWORD *)&v356 + 1) = 0;
  }
  v279 = v355[0];
  if (!v355[0])
    goto LABEL_474;
  v280 = v355[1];
  v281 = v355[0];
  if (v355[1] == v355[0])
    goto LABEL_473;
  v282 = v355[1];
  while (2)
  {
    v283 = (int)v282[-1].__vftable;
    --v282;
    v284 = v283 ^ (v283 >> 31);
    if (v284 == 2)
    {
      shared_owners = v280[-1].__shared_owners_;
      if (shared_owners)
        (*(void (**)(uint64_t))(*(_QWORD *)shared_owners + 8))(shared_owners);
    }
    else if (v284 == 1)
    {
      shared_weak_owners = (unsigned int *)v280[-1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        v286 = shared_weak_owners + 3;
        do
        {
          v287 = __ldaxr(v286);
          v288 = v287 - 1;
        }
        while (__stlxr(v288, v286));
        if (!v288)
          goto LABEL_464;
      }
    }
    else
    {
      shared_weak_owners = (unsigned int *)v280[-1].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        v290 = shared_weak_owners + 3;
        do
        {
          v291 = __ldaxr(v290);
          v292 = v291 - 1;
        }
        while (__stlxr(v292, v290));
        if (!v292)
LABEL_464:
          (*(void (**)(unsigned int *))(*(_QWORD *)shared_weak_owners + 24))(shared_weak_owners);
      }
    }
    v280 = v282;
    if (v282 != v279)
      continue;
    break;
  }
  v281 = v355[0];
  v252 = this;
LABEL_473:
  v355[1] = v279;
  operator delete(v281);
LABEL_474:
  dispatch_release(v353);
  if (v354)
    _Block_release(v354);
  v293 = (unint64_t *)&v314->__shared_owners_;
  do
    v294 = __ldaxr(v293);
  while (__stlxr(v294 - 1, v293));
  if (v294)
  {
    v295 = v311;
    if (!v311)
      goto LABEL_483;
LABEL_482:
    _Block_release(v295);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
    std::__shared_weak_count::__release_weak(v314);
    v295 = v311;
    if (v311)
      goto LABEL_482;
  }
LABEL_483:
  v296 = operator new(0x20uLL);
  v296[1] = v324;
  v324 = 0uLL;
  v297 = *((_QWORD *)v252 + 41);
  *(_QWORD *)v296 = v297;
  *((_QWORD *)v296 + 1) = (char *)this + 328;
  *(_QWORD *)(v297 + 8) = v296;
  *((_QWORD *)v252 + 41) = v296;
  ++*((_QWORD *)v252 + 43);
  v298 = v323;
  if (v323)
  {
    v299 = (unint64_t *)&v323->__shared_owners_;
    do
      v300 = __ldaxr(v299);
    while (__stlxr(v300 - 1, v299));
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
      std::__shared_weak_count::__release_weak(v298);
    }
  }
  if (v321)
    std::__shared_weak_count::__release_weak(v321);
  if (v319)
  {
    v301 = (unint64_t *)&v319->__shared_owners_;
    do
      v302 = __ldaxr(v301);
    while (__stlxr(v302 - 1, v301));
    if (!v302)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  if (v326)
    std::__shared_weak_count::__release_weak(v326);
  if (v332)
    std::__shared_weak_count::__release_weak(v332);
  v303 = v345;
  if (v345)
  {
    v304 = (unint64_t *)&v345->__shared_owners_;
    do
      v305 = __ldaxr(v304);
    while (__stlxr(v305 - 1, v304));
    if (!v305)
    {
      ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
      std::__shared_weak_count::__release_weak(v303);
    }
  }
  std::__shared_weak_count::__release_weak(v315);
}

void sub_1BF646E40(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF646E4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646E58(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646E64(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646E70(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646E7C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646E88(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646E94(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646EA0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646EAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646EB8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  boost::signals2::detail::connection_body_base *v71;
  unsigned int *v72;
  void *v73;

  if (a2)
  {
    if (*(_QWORD *)v72)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v72, *(_QWORD *)v72);
      operator delete(*(void **)v72);
    }
    operator delete(v72);
    boost::signals2::detail::connection_body_base::~connection_body_base(v71);
    operator delete(v73);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((uint64_t)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1BF64784CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF646EDC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  if (a43)
    std::__shared_weak_count::__release_weak(a43);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void sub_1BF646EFC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F08()
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  JUMPOUT(0x1BF647698);
}

void sub_1BF646F1C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F28(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F34(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F40(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F58(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  uint64_t v13;

  if (a2)
  {
    boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::~variant((uint64_t)&STACK[0x280]);
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    std::__shared_weak_count::__release_weak(a13);
    JUMPOUT(0x1BF64783CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF646F74(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F80(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F8C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646F98(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646FA4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646FB0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646FBC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646FC8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646FD4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646FE0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646FEC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF646FF8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647004(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647010(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF64701C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62)
{
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback((uint64_t)&a60);
  if (!a59)
  {
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
    std::__shared_weak_count::__release_weak(a14);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF647670);
}

void sub_1BF647040(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF64704C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *__p)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v12 = (unsigned int *)__p[3];
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
        v16 = v12 + 3;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 24))(v12);
      }
    }
    v19 = (unsigned int *)__p[1];
    if (v19)
    {
      v20 = v19 + 2;
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 16))(v19);
        v23 = v19 + 3;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 24))(v19);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF647124(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647130(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF64713C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((uint64_t)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1BF64784CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF64714C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647158(_Unwind_Exception *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v2[4]);
    if (v2[2])
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t *)v2[1];
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v2 + 8);
      *(_QWORD *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (unsigned int *)v4[3];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF647220(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF64722C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  if (a2)
  {
    __cxa_end_catch();
    v12 = *(unsigned int **)(a12 + 8);
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
        v16 = v12 + 3;
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 24))(v12);
      }
    }
    JUMPOUT(0x1BF64779CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF647298(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF6472A4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF6472B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF64779CLL);
  _Unwind_Resume(a1);
}

void sub_1BF6472BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  boost::signals2::connection::~connection((boost::signals2::connection *)&a23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  JUMPOUT(0x1BF647668);
}

void sub_1BF6472E0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF6472EC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF647314(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((uint64_t)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1BF64784CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF647324(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647330(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF647394(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF6473A0(_Unwind_Exception *a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF64779CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF647408(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647414(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647420(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF647428);
  _Unwind_Resume(a1);
}

void sub_1BF647434(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF64743CLL);
  _Unwind_Resume(a1);
}

void sub_1BF647448(_Unwind_Exception *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x328];
    if (STACK[0x328])
    {
      if ((uint64_t)(STACK[0x330] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x330];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x320] >= 0xB)
        operator delete((void *)STACK[0x328]);
    }
    JUMPOUT(0x1BF64783CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF6474EC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF6474F8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF647508);
  _Unwind_Resume(a1);
}

void sub_1BF647518(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF647520);
  _Unwind_Resume(a1);
}

void sub_1BF64752C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647548(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647554()
{
  JUMPOUT(0x1BF64755CLL);
}

void sub_1BF64756C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a32);
  if (a31)
    std::__shared_weak_count::__release_weak(a31);
  if (a39 < 0)
    operator delete(__p);
  if (a46)
    std::__shared_weak_count::__release_weak(a46);
  JUMPOUT(0x1BF647690);
}

void sub_1BF647598(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF6475A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,...)
{
  va_list va;

  va_start(va, a57);
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a37);
  if (a36)
    std::__shared_weak_count::__release_weak(a36);
  if (a44 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::__release_weak(a7);
  _Unwind_Resume(a1);
}

void sub_1BF6475D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF6475DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a65;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a49);
  if (a55 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void sub_1BF6475FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void sub_1BF647618(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count::__release_weak(a14);
  _Unwind_Resume(a1);
}

void sub_1BF647638(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647644(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647650(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x260]);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x280]);
    boost::signals2::slot<void (),boost::function<void ()>>::~slot((uint64_t)&STACK[0x200]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&a71);
    JUMPOUT(0x1BF64784CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BF647678()
{
  JUMPOUT(0x1BF647690);
}

void sub_1BF6476A8(_Unwind_Exception *a1, int a2)
{
  unint64_t v2;
  void (*v3)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,unsigned int>::~function1((uint64_t *)&STACK[0x280]);
    boost::function<void ()>::~function((uint64_t *)&STACK[0x260]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&STACK[0x250]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot((uint64_t)&STACK[0x240]);
    v2 = STACK[0x218];
    if (STACK[0x218])
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(&STACK[0x220], &STACK[0x220], 2);
      }
      STACK[0x218] = 0;
    }
    if (STACK[0x200])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x200], STACK[0x200]);
      operator delete((void *)STACK[0x200]);
    }
    JUMPOUT(0x1BF647844);
  }
  _Unwind_Resume(a1);
}

void sub_1BF64771C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647728(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647738(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647744(_Unwind_Exception *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>>>::~list(v2);
    operator delete(v2);
    JUMPOUT(0x1BF647798);
  }
  _Unwind_Resume(a1);
}

void sub_1BF647818(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF647824(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;

  if (!a2)
    JUMPOUT(0x1BF64782CLL);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&STACK[0x280]);
  boost::signals2::slot<void (),boost::function<void ()>>::~slot(&STACK[0x200]);
  ctu::DispatchSlot<dispatch::block<void({block_pointer})>>::~DispatchSlot(&a71);
  JUMPOUT(0x1BF64784CLL);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void *v15;
  size_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  const __CFDictionary *v21;
  capabilities::abs *v22;
  capabilities::txpower *v23;
  int Int;
  NSObject *v25;
  const char *v26;
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _BYTE buf[12];
  uint8_t v34[24];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a1[4];
  v31 = 0;
  v32 = 0;
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v32 = std::__shared_weak_count::lock(v5);
    if (!v32)
      return;
    v31 = a1[5];
    if (v31)
    {
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!v8)
        v9 = 0;
      if (v9)
      {
        v10 = *(NSObject **)(v4 + 88);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v34 = 138412290;
          *(_QWORD *)&v34[4] = v8;
          _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "%@", v34, 0xCu);
        }
        goto LABEL_9;
      }
      if (*a3
         ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
         : 0)
      {
        v15 = (const void *)*MEMORY[0x1E0CFBF60];
        v16 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
        if (v16 >= 0x7FFFFFFFFFFFFFF8)
          std::string::__throw_length_error[abi:ne180100]();
        v17 = (void *)v16;
        if (v16 >= 0x17)
        {
          v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v19 = v16 | 7;
          v20 = v19 + 1;
          v18 = (void **)operator new(v19 + 1);
          __dst[1] = v17;
          v30 = v20 | 0x8000000000000000;
          __dst[0] = v18;
        }
        else
        {
          HIBYTE(v30) = v16;
          v18 = __dst;
          if (!v16)
            goto LABEL_27;
        }
        memmove(v18, v15, (size_t)v17);
LABEL_27:
        *((_BYTE *)v17 + (_QWORD)v18) = 0;
        v21 = *a3;
        cf = v21;
        if (v21)
          CFRetain(v21);
        aBlock = 0;
        Service::broadcastEvent(v4, (uint64_t)__dst, &cf, (const void **)&aBlock);
        if (aBlock)
          _Block_release(aBlock);
        v22 = (capabilities::abs *)cf;
        if (cf)
          CFRelease(cf);
        if (SHIBYTE(v30) < 0)
          operator delete(__dst[0]);
        v23 = (capabilities::txpower *)capabilities::abs::supportsChargerDesense(v22);
        if ((_DWORD)v23 && capabilities::txpower::supportsPowerChargerDesense(v23))
        {
          memset(v34, 170, 16);
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v34, *a3);
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x1E0CFB9E8]);
          Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v34, *(const __CFString **)buf);
          MEMORY[0x1C3B8B878](buf);
          TelephonyBasebandSetChargerDesense();
          v25 = *(NSObject **)(v4 + 88);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v26 = "Off";
            if (!Int)
              v26 = "On";
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v26;
            _os_log_impl(&dword_1BF566000, v25, OS_LOG_TYPE_DEFAULT, "#I Charger Desense: %s", buf, 0xCu);
          }
          MEMORY[0x1C3B8B8B4](v34);
        }
      }
    }
  }
LABEL_9:
  v11 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_97(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  const void *v7;
  int v8;
  size_t v9;
  __int128 *v10;
  capabilities::radio *v11;
  __int128 *v12;
  __int128 *v13;
  ctu::iokit::Controller *v14;
  std::__shared_weak_count *v15;
  capabilities::abs *v16;
  RadioModule *v17;
  void (**v18)(void *, std::string *);
  capabilities::abs *v19;
  capabilities::abs *v20;
  capabilities::abs *v21;
  CommandDriverFactory *v22;
  uint64_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD aBlock[5];
  void (**v47)(void *, std::string *);
  uint8_t buf[16];
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[2];
  unint64_t v53;
  std::__shared_weak_count *v55;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v55 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v15 = v6;
LABEL_82:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  v53 = 0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*a2);
  v7 = (const void *)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v52[0] = 0xAAAAAAAAAAAAAAAALL;
    v52[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v52, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    v50 = 0uLL;
    v51 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v44, (const char *)*MEMORY[0x1E0CFB530]);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8B878](&v44);
    if (SHIBYTE(v51) < 0)
      operator delete((void *)v50);
    v51 = v49;
    v50 = *(_OWORD *)buf;
    v8 = SHIBYTE(v49);
    if (v49 >= 0)
      v9 = HIBYTE(v51);
    else
      v9 = *((_QWORD *)&v50 + 1);
    if (v9 == strlen((const char *)*MEMORY[0x1E0CFB980])
      && (v49 >= 0 ? (v10 = &v50) : (v10 = (__int128 *)v50),
          v11 = (capabilities::radio *)memcmp(v10, (const void *)*MEMORY[0x1E0CFB980], v9),
          !(_DWORD)v11))
    {
      v16 = (capabilities::abs *)capabilities::radio::supportsBasebandStateController(v11);
      if ((_DWORD)v16)
        RadioModule::getResetProperties_sync((RadioModule *)v5);
      v17 = (RadioModule *)capabilities::abs::supportsBatteryInfoMonitoring(v16);
      if ((_DWORD)v17)
      {
        *(_WORD *)(v5 + 320) = 0;
        *(_BYTE *)(v5 + 322) = 0;
        RadioModule::monitorBatteryInfo_sync((RadioModule *)v5);
      }
      RadioModule::setRegion_sync(v17);
      RadioModule::startHealthService_sync((RadioModule *)v5);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2;
      aBlock[3] = &__block_descriptor_tmp_98;
      aBlock[4] = v5;
      v18 = (void (**)(void *, std::string *))_Block_copy(aBlock);
      v47 = v18;
      RadioModule::getVersion_sync(v5, &v47);
      if (v18)
        _Block_release(v18);
      v20 = (capabilities::abs *)capabilities::abs::supportsCalibrationQuery(v19);
      if ((_DWORD)v20)
      {
        if (*(_BYTE *)(v5 + 192) == 3)
          RadioModule::queryFactoryCalibrationStatus_sync((RadioModule *)v5);
        if (*(_BYTE *)(v5 + 200) == 2)
          RadioModule::queryRFCalibrationStatus_sync((RadioModule *)v5);
      }
      v21 = (capabilities::abs *)capabilities::abs::supportsFieldTestConfig(v20);
      if ((_DWORD)v21)
        RadioModule::queryFieldTestConfig_sync((RadioModule *)v5);
      if (capabilities::abs::supportsResetSPMIEvent(v21))
      {
        v44 = 0xAAAAAAAAAAAAAAAALL;
        v45 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
        v22 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        v23 = off_1ED70F4D0;
        if (!off_1ED70F4D0)
        {
          CommandDriverFactory::create_default_global(v22);
          v24 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          v25 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
          off_1ED70F4D0 = v24;
          if (v25)
          {
            v26 = (unint64_t *)&v25->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v28 = *(std::__shared_weak_count **)&buf[8];
          if (*(_QWORD *)&buf[8])
          {
            v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
              std::__shared_weak_count::__release_weak(v28);
            }
          }
          v23 = off_1ED70F4D0;
        }
        v31 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
        if (*(&off_1ED70F4D0 + 1))
        {
          v32 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
        (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v23 + 16))(&v42, v23);
        v44 = 0;
        v45 = 0;
        if (v43)
        {
          v45 = std::__shared_weak_count::lock(v43);
          if (v45)
            v44 = v42;
          if (v43)
            std::__shared_weak_count::__release_weak(v43);
        }
        if (v31)
        {
          v34 = (unint64_t *)&v31->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v44)
          (*(void (**)(unint64_t))(*(_QWORD *)v44 + 392))(v44);
        v36 = v45;
        if (v45)
        {
          v37 = (unint64_t *)&v45->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
            if (SHIBYTE(v51) < 0)
              goto LABEL_77;
            goto LABEL_78;
          }
        }
      }
    }
    else if (v9 == strlen((const char *)*MEMORY[0x1E0CFBB68])
           && (v8 >= 0 ? (v12 = &v50) : (v12 = (__int128 *)v50), !memcmp(v12, (const void *)*MEMORY[0x1E0CFBB68], v9))
           || v9 == strlen((const char *)*MEMORY[0x1E0CFBD98])
           && (v8 >= 0 ? (v13 = &v50) : (v13 = (__int128 *)v50), !memcmp(v13, (const void *)*MEMORY[0x1E0CFBD98], v9)))
    {
      v14 = *(ctu::iokit::Controller **)(v5 + 304);
      if (v14)
      {
        ctu::iokit::Controller::stopBatteryInfoNotifications(v14);
      }
      else
      {
        v39 = *(NSObject **)(v5 + 88);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF566000, v39, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", buf, 2u);
          if ((SHIBYTE(v51) & 0x80000000) == 0)
            goto LABEL_78;
          goto LABEL_77;
        }
      }
    }
    if (SHIBYTE(v51) < 0)
LABEL_77:
      operator delete((void *)v50);
LABEL_78:
    MEMORY[0x1C3B8B8B4](v52);
    v7 = (const void *)v53;
  }
  if (v7)
    CFRelease(v7);
  v15 = v55;
  if (v55)
    goto LABEL_82;
}

void sub_1BF6480C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  if (*(char *)(v1 - 73) < 0)
    operator delete(*(void **)(v1 - 96));
  MEMORY[0x1C3B8B8B4](v1 - 72);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 56));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void RadioModule::getResetProperties_sync(RadioModule *this)
{
  NSObject *v2;
  const char *v3;
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  CommandDriverFactory *v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  dispatch_object_t object;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  void *v46;
  dispatch_object_t v47;
  _BYTE buf[18];
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 296))
  {
    v2 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_BYTE *)this + 289))
        v3 = "true";
      else
        v3 = "false";
      v4 = *((unsigned __int16 *)this + 145);
      v5 = *((_DWORD *)this + 73);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v3;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v4;
      v49 = 1024;
      v50 = v5;
      _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Baseband properties (cached):\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
    }
    return;
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v6 || (v7 = *((_QWORD *)this + 15), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v46 = (void *)0xAAAAAAAAAAAAAAAALL;
  v47 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule23getResetProperties_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_112;
  aBlock[4] = this;
  aBlock[5] = v7;
  v45 = v9;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v15 = _Block_copy(aBlock);
  v16 = *((_QWORD *)this + 17);
  if (v16)
    dispatch_retain(v16);
  v46 = v15;
  v47 = v16;
  v42 = 0xAAAAAAAAAAAAAAAALL;
  v43 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v17 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v18 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v17);
    v19 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v20 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v24 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v18 = off_1ED70F4D0;
  }
  v26 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v38 = v18;
  v39 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v27 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v18 + 16))(&v40, v18);
  v42 = 0;
  v43 = 0;
  if (v41)
  {
    v43 = std::__shared_weak_count::lock(v41);
    if (v43)
      v42 = v40;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
  }
  if (!v26)
    goto LABEL_43;
  v29 = (unint64_t *)&v26->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    v31 = v42;
    if (v42)
      goto LABEL_44;
  }
  else
  {
LABEL_43:
    v31 = v42;
    if (v42)
    {
LABEL_44:
      v32 = v46;
      if (v46)
        v32 = _Block_copy(v46);
      v36 = v32;
      object = v47;
      if (v47)
        dispatch_retain(v47);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v31 + 168))(v31, &v36);
      if (object)
        dispatch_release(object);
      if (v36)
        _Block_release(v36);
    }
  }
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v47)
    dispatch_release(v47);
  if (v46)
    _Block_release(v46);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF648568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void RadioModule::monitorBatteryInfo_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  NSObject *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  char v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  _QWORD v22[6];
  std::__shared_weak_count *v23;
  void *v24;
  dispatch_object_t v25;
  void *v26;
  dispatch_object_t object;
  uint8_t buf[8];
  _QWORD aBlock[6];
  std::__shared_weak_count *v30;
  uint8_t v31[16];

  if (*((_QWORD *)this + 38))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v5 = v4;
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v5);
    }
    memset(v31, 170, sizeof(v31));
    v10 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_113;
    aBlock[4] = this;
    aBlock[5] = v3;
    v30 = v5;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v12 = _Block_copy(aBlock);
    v13 = *((_QWORD *)this + 17);
    if (v13)
      dispatch_retain(*((dispatch_object_t *)this + 17));
    *(_QWORD *)v31 = v12;
    *(_QWORD *)&v31[8] = v13;
    v14 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Registering for battery info updates", buf, 2u);
    }
    v22[0] = v10;
    v22[1] = 1174405120;
    v22[2] = ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_114;
    v22[3] = &__block_descriptor_tmp_118_0;
    v22[4] = this;
    v22[5] = v3;
    v23 = v5;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    if (v12)
    {
      v24 = _Block_copy(v12);
      v25 = v13;
      if (!v13)
        goto LABEL_21;
    }
    else
    {
      v24 = 0;
      v25 = v13;
      if (!v13)
      {
LABEL_21:
        v16 = _Block_copy(v22);
        v17 = *((_QWORD *)this + 17);
        if (v17)
          dispatch_retain(*((dispatch_object_t *)this + 17));
        v26 = v16;
        object = v17;
        v18 = ctu::iokit::Controller::registerForBatteryInfoChange();
        if (object)
          dispatch_release(object);
        if (v26)
          _Block_release(v26);
        if ((v18 & 1) == 0 && (v19 = *((_QWORD *)this + 11), os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF566000, v19, OS_LOG_TYPE_ERROR, "Failed to register for battery info updates", buf, 2u);
          v20 = v25;
          if (!v25)
            goto LABEL_31;
        }
        else
        {
          v20 = v25;
          if (!v25)
          {
LABEL_31:
            if (v24)
              _Block_release(v24);
            if (v23)
              std::__shared_weak_count::__release_weak(v23);
            if (v13)
              dispatch_release(v13);
            if (v12)
              _Block_release(v12);
            if (v30)
              std::__shared_weak_count::__release_weak(v30);
            std::__shared_weak_count::__release_weak(v5);
            return;
          }
        }
        dispatch_release(v20);
        goto LABEL_31;
      }
    }
    dispatch_retain(v13);
    goto LABEL_21;
  }
  v21 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v31 = 0;
    _os_log_error_impl(&dword_1BF566000, v21, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v31, 2u);
  }
}

void sub_1BF6488F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v32;

  dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback((uint64_t)&a19);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v29);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    v32 = a28;
    if (!a28)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      _Unwind_Resume(a1);
    }
  }
  else
  {
    dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v30 - 112);
    v32 = a28;
    if (!a28)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v32);
  std::__shared_weak_count::__release_weak(v28);
  _Unwind_Resume(a1);
}

void RadioModule::setRegion_sync(RadioModule *this)
{
  CommandDriverFactory *v1;
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  config::hw *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;

  if (!capabilities::abs::shouldSetRegion(this))
    return;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  v26 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v1 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v2 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v1);
    v3 = v27;
    v27 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (*((_QWORD *)&v27 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v27 + 1) + 16))(*((_QWORD *)&v27 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v27 + 1));
      }
    }
    v2 = off_1ED70F4D0;
  }
  v9 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v21 = v2;
  v22 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v10 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v2 + 16))(&v23, v2);
  v25 = 0;
  v26 = 0;
  v12 = (config::hw *)v24;
  if (v24)
  {
    v26 = std::__shared_weak_count::lock(v24);
    if (v26)
      v25 = v23;
    v12 = (config::hw *)v24;
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
  }
  if (!v9)
    goto LABEL_26;
  v13 = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    v15 = v25;
    if (v25)
    {
LABEL_27:
      config::hw::regionCode(v12);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v15 + 304))(v15, &__p);
      if (v20 < 0)
        operator delete(__p);
    }
  }
  else
  {
LABEL_26:
    v15 = v25;
    if (v25)
      goto LABEL_27;
  }
  v16 = v26;
  if (v26)
  {
    v17 = (unint64_t *)&v26->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1BF648B5C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF648B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 - 48);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void sub_1BF648BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void RadioModule::startHealthService_sync(RadioModule *this)
{
  CFMutableDictionaryRef Mutable;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  DataStallDetection *v18;
  uint64_t v19;
  uint64_t v20;
  capabilities::radio *v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  CFTypeRef v29;
  CFTypeID v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  CFTypeRef v42;
  CFTypeRef v43[2];
  std::__shared_weak_count *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  CFTypeRef cf;
  uint64_t block;
  uint64_t v50;
  void (*v51)(uint64_t);
  void *v52;
  __int128 *v53;

  cf = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    cf = Mutable;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v4 = MEMORY[0x1E0C809B0];
  block = MEMORY[0x1E0C809B0];
  v50 = 0x40000000;
  v51 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v52 = &__block_descriptor_tmp_13_8;
  v53 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v46 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v5 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v46 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_8;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_8:
  DataStallDetection::create((capabilities::abs *)&v46, (uint64_t *)&v47);
  v8 = v47;
  v47 = 0uLL;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  *((_OWORD *)this + 16) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
  if (*((_QWORD *)&v46 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      v18 = (DataStallDetection *)*((_QWORD *)this + 32);
      if (!v18)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  v18 = (DataStallDetection *)*((_QWORD *)this + 32);
  if (v18)
LABEL_23:
    DataStallDetection::start(v18);
LABEL_24:
  v21 = (capabilities::radio *)operator new(0x10uLL);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block = v4;
  v50 = 0x40000000;
  v51 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v52 = &__block_descriptor_tmp_13_8;
  v53 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v23 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v45 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_29;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v23 = *((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v45 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_29;
  }
  v24 = (unint64_t *)(v23 + 8);
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
LABEL_29:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  v43[1] = *((CFTypeRef *)this + 32);
  v44 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = cf;
  if (cf && (v30 = CFGetTypeID(cf), v30 == CFDictionaryGetTypeID()))
  {
    v43[0] = v29;
    CFRetain(v29);
  }
  else
  {
    v43[0] = 0;
  }
  radio::HealthService::HealthService(v21, v19, v20, v43);
  v31 = operator new(0x20uLL);
  *v31 = off_1E7919E20;
  v31[1] = 0;
  v31[2] = 0;
  v31[3] = v21;
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  *((_QWORD *)this + 34) = v21;
  *((_QWORD *)this + 35) = v31;
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
      v35 = v43[0];
      if (!v43[0])
        goto LABEL_42;
      goto LABEL_41;
    }
  }
  v35 = v43[0];
  if (v43[0])
LABEL_41:
    CFRelease(v35);
LABEL_42:
  v36 = v44;
  if (v44)
  {
    v37 = (unint64_t *)&v44->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
  if (!*((_QWORD *)&v45 + 1))
    goto LABEL_51;
  v40 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (v41)
  {
LABEL_51:
    v42 = cf;
    if (!cf)
      return;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
  std::__shared_weak_count::__release_weak(v39);
  v42 = cf;
  if (cf)
LABEL_52:
    CFRelease(v42);
}

void sub_1BF648FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,const void *a21)
{
  _QWORD *v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;

  v23 = (std::__shared_weak_count *)v21[1];
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  operator delete(v21);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a21);
  _Unwind_Resume(a1);
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_2(uint64_t a1, size_t *a2)
{
  size_t *v2;
  uint64_t v3;
  void **v4;
  __int128 v5;
  size_t v6;
  uint64_t v7;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v9;
  __CFDictionary *v10;
  NSObject *v11;
  config::build *v12;
  const __CFAllocator *v13;
  char *v14;
  const __CFAllocator *v15;
  config::hw *v16;
  const __CFAllocator *v17;
  pid_t v18;
  const __CFAllocator *v19;
  capabilities::radio *v20;
  const __CFAllocator *v21;
  const __CFAllocator *v22;
  os_unfair_lock_s *v23;
  _QWORD *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  size_t v35;
  std::string::size_type v36;
  std::string *p_p;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  std::string __p;
  CFTypeRef cf;
  std::string v45;
  CFTypeRef v46;

  v2 = a2;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void **)(v3 + 152);
  if ((size_t *)(v3 + 152) != a2)
  {
    if (*(char *)(v3 + 175) < 0)
    {
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (size_t *)*a2;
        v6 = v2[1];
      }
      std::string::__assign_no_alias<false>(v4, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v4, (void *)*a2, a2[1]);
    }
    else
    {
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(v3 + 168) = a2[2];
      *(_OWORD *)v4 = v5;
    }
  }
  cf = 0;
  v7 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = Mutable;
  if (Mutable)
  {
    cf = Mutable;
    if (*((char *)v2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v45, (const std::string::value_type *)*v2, v2[1]);
    else
      v45 = *(std::string *)v2;
    v12 = (config::build *)ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB618], (uint64_t)&v45, v7, v9);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    config::build::version(v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB620], (uint64_t)&v45, v7, v13);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_23;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
    v14 = (char *)operator new(0x28uLL);
    strcpy(v14, "AppleBasebandServices_Manager-1180");
    std::string::__init_copy_ctor_external(&v45, v14, 0x22uLL);
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB3C8], (uint64_t)&v45, v7, v15);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    operator delete(v14);
    config::hw::product(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB3C0], (uint64_t)&v45, v7, v17);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_32;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_32;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_32:
    v18 = getpid();
    std::to_string(&__p, v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    v20 = (capabilities::radio *)ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB138], (uint64_t)&v45, v7, v19);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_39;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_39:
    capabilities::radio::radioType(v20);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB628], (uint64_t)&v45, v7, v21);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_46;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_46;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_46:
    config::hw::getBootArgs(&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45 = __p;
    ctu::cf::insert<char const*,std::string>(v10, (const __CFString **)*MEMORY[0x1E0CFB4F0], (uint64_t)&v45, v7, v22);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v45.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_53;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_53;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_53:
    pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    v23 = (os_unfair_lock_s *)off_1ED70F558;
    if (!off_1ED70F558)
    {
      v24 = operator new(0x30uLL);
      MEMORY[0x1C3B8B8C0](v24, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
      v24[3] = 0;
      v24[4] = 0;
      *((_DWORD *)v24 + 10) = 0;
      std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&v45, (uint64_t)v24);
      v25 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = 0uLL;
      v26 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
      off_1ED70F558 = v25;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      size = (std::__shared_weak_count *)v45.__r_.__value_.__l.__size_;
      if (v45.__r_.__value_.__l.__size_)
      {
        v30 = (unint64_t *)(v45.__r_.__value_.__l.__size_ + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v23 = (os_unfair_lock_s *)off_1ED70F558;
    }
    v42 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    if (*(&off_1ED70F558 + 1))
    {
      v32 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
    v34 = (const void *)*MEMORY[0x1E0CFB478];
    v35 = strlen((const char *)*MEMORY[0x1E0CFB478]);
    if (v35 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v36 = v35;
    if (v35 >= 0x17)
    {
      v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v35 | 7) != 0x17)
        v38 = v35 | 7;
      v39 = v38 + 1;
      p_p = (std::string *)operator new(v38 + 1);
      __p.__r_.__value_.__l.__size_ = v36;
      __p.__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v35;
      p_p = &__p;
      if (!v35)
        goto LABEL_76;
    }
    memmove(p_p, v34, v36);
LABEL_76:
    p_p->__r_.__value_.__s.__data_[v36] = 0;
    v46 = cf;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v45.__r_.__value_.__l.__size_ = (std::string::size_type)&v46;
    v45.__r_.__value_.__r.__words[2] = (std::string::size_type)v23;
    ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v23 + 6, (uint64_t *)&v45);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v42)
    {
      v40 = (unint64_t *)&v42->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (cf)
      CFRelease(cf);
    return;
  }
  v11 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v45.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Failed to create dictionary to update abm domain preferences", (uint8_t *)&v45, 2u);
  }
}

void sub_1BF649704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void RadioModule::queryFactoryCalibrationStatus_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_120;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70F4D0;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v34 = v14;
  v35 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 120))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF649B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryRFCalibrationStatus_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_121;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70F4D0;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v34 = v14;
  v35 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 128))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF649EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::queryFieldTestConfig_sync(RadioModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  dispatch_object_t object;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  _QWORD aBlock[6];
  std::__shared_weak_count *v41;
  void *v42;
  dispatch_object_t v43;
  __int128 v44;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v42 = (void *)0xAAAAAAAAAAAAAAAALL;
  v43 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_122_0;
  aBlock[4] = this;
  aBlock[5] = v3;
  v41 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 17);
  if (v12)
    dispatch_retain(v12);
  v42 = v11;
  v43 = v12;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v39 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = v44;
    v44 = 0uLL;
    v16 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
    if (*((_QWORD *)&v44 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70F4D0;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v34 = v14;
  v35 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v36, v14);
  v38 = 0;
  v39 = 0;
  if (v37)
  {
    v39 = std::__shared_weak_count::lock(v37);
    if (v39)
      v38 = v36;
    if (v37)
      std::__shared_weak_count::__release_weak(v37);
  }
  if (!v22)
    goto LABEL_37;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  else
  {
LABEL_37:
    v27 = v38;
    if (!v38)
      goto LABEL_46;
  }
  v28 = v42;
  if (v42)
    v28 = _Block_copy(v42);
  v32 = v28;
  object = v43;
  if (v43)
    dispatch_retain(v43);
  (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 184))(v27, &v32);
  if (object)
    dispatch_release(object);
  if (v32)
    _Block_release(v32);
LABEL_46:
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v43)
    dispatch_release(v43);
  if (v42)
    _Block_release(v42);
  if (v41)
    std::__shared_weak_count::__release_weak(v41);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF64A240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  uint64_t v25;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>,ctu::cf::CFSharedRef<__CFDictionary const>)>::~callback(v25 - 64);
  if (a24)
    std::__shared_weak_count::__release_weak(a24);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void RadioModule::stopMonitoringBatteryInfo_sync(ctu::iokit::Controller **this)
{
  NSObject *v1;
  uint8_t v2[16];

  if (this[38])
  {
    ctu::iokit::Controller::stopBatteryInfoNotifications(this[38]);
  }
  else
  {
    v1 = this[11];
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v2 = 0;
      _os_log_error_impl(&dword_1BF566000, v1, OS_LOG_TYPE_ERROR, "Invalid fIOKitController", v2, 2u);
    }
  }
}

void ___ZN11RadioModule25finishInitialization_syncEv_block_invoke_101(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  _BOOL8 v7;
  _QWORD *v8;
  NSObject *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  NSObject *v14;
  _BYTE *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE buf[12];
  char v19;
  uint8_t v20[4];
  _BYTE *v21;
  __int16 v22;
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
        if (v7)
        {
          v8 = (_QWORD *)(v3 + 152);
          if (*(char *)(v3 + 175) < 0)
            v8 = (_QWORD *)*v8;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v8;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Baseband FW Version: %s", buf, 0xCu);
        }
        if (capabilities::abs::supportsCalibrationQuery((capabilities::abs *)v7))
        {
          v9 = *(NSObject **)(v3 + 88);
          v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v10)
          {
            v11 = capabilities::radio::supportsFactoryCalibrationV2((capabilities::radio *)v10)
                ? radio::asStringV2()
                : radio::asString();
            v12 = v11;
            radio::RFCalibration_t::toString((radio::RFCalibration_t *)(v3 + 200));
            v13 = v19 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v20 = 136315394;
            v21 = (_BYTE *)v12;
            v22 = 2080;
            v23 = v13;
            _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I \n--- Factory and RF calibration ---\n%s\n%s\n----------------------------------", v20, 0x16u);
            if (v19 < 0)
              operator delete(*(void **)buf);
          }
        }
        if (MEMORY[0x1C3B8CD78](*(_QWORD *)(v3 + 248)) == MEMORY[0x1E0C812F8])
        {
          v14 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            xpc::object::to_string((xpc::object *)(v3 + 248));
            if (v19 >= 0)
              v15 = buf;
            else
              v15 = *(_BYTE **)buf;
            *(_DWORD *)v20 = 136315138;
            v21 = v15;
            _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", v20, 0xCu);
            if (v19 < 0)
              operator delete(*(void **)buf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF64A58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF64A5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF64A5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF64A5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void RadioModule::handleResetSPMI_sync(RadioModule *this, int a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  int v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 67109120;
    LODWORD(v9) = a2;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Received request to reset SPMI with data (0x%x)", (uint8_t *)&v8, 8u);
  }
  v5 = TelephonyBasebandResetSPMI();
  v6 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = " not ";
    if (v5)
      v7 = " ";
    v8 = 136315138;
    v9 = v7;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Request to reset SPMI was%ssuccessful", (uint8_t *)&v8, 0xCu);
  }
}

void RadioModule::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void RadioModule::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[17];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN11RadioModule15getVersion_syncEN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1, std::string::size_type *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::string::size_type v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  void **v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _QWORD v19[2];
  std::__shared_weak_count *v21;
  std::string buf;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v21 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v10;
            _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            v19[0] = 0xAAAAAAAAAAAAAAAALL;
            v19[1] = 0xAAAAAAAAAAAAAAAALL;
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, v13);
            ctu::cf::map_adapter::getString();
            v15 = (void **)(v7 + 152);
            if (*(char *)(v7 + 175) < 0)
              operator delete(*v15);
            *(_OWORD *)v15 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *(_QWORD *)(v7 + 168) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
            buf.__r_.__value_.__s.__data_[0] = 0;
            MEMORY[0x1C3B8B8B4](v19);
          }
        }
        v16 = a1[7];
        if (*(char *)(v7 + 175) < 0)
          std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v7 + 152), *(_QWORD *)(v7 + 160));
        else
          buf = *(std::string *)(v7 + 152);
        (*(void (**)(uint64_t, std::string *))(v16 + 16))(v16, &buf);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF64AAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8B8B4](&a16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1BF64AB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF64AB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c106_ZTSN8dispatch5blockIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule21getOperatingMode_syncEN8dispatch5blockIU13block_pointerFviEEE_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint8_t buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v10;
            _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF9B0]);
            MEMORY[0x1C3B8B8B4](buf);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule23getResetProperties_syncEv_block_invoke(_QWORD *a1, CFErrorRef *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  std::__shared_weak_count *v11;
  const void *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  int v16;
  int v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count_vtbl *v19;
  NSObject *v20;
  std::string *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *v25;
  CFErrorRef v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _BOOL4 v36;
  uint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count_vtbl *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  size_t v46;
  size_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  std::__shared_weak_count *v55;
  CFStringRef *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  const void *v62;
  size_t v63;
  size_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  const __CFString *v68;
  const char *v69;
  const __CFString *v70;
  const __CFAllocator *v71;
  CFNumberRef v72;
  const __CFString *v73;
  _BOOL4 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t (***v79)(void *, const __CFString *);
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  size_t v85;
  size_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  unsigned __int16 *v91;
  unsigned __int16 *v92;
  CFTypeID v93;
  const __CFNumber *v94;
  int v95;
  std::__shared_weak_count *v96;
  uint64_t *v97;
  unint64_t v98;
  NSObject *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count_vtbl *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  const void *v107;
  size_t v108;
  size_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  const char *v114;
  _BOOL4 v115;
  std::__shared_weak_count *v116;
  uint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  std::__shared_weak_count_vtbl *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  size_t v126;
  size_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  std::__shared_weak_count *v132;
  uint64_t *v133;
  unint64_t v134;
  NSObject *v135;
  int v136;
  xpc_object_t v137;
  xpc_object_t v138;
  xpc_object_t v139;
  xpc_object_t v140;
  xpc_object_t v141;
  xpc_object_t v142;
  std::string *v143;
  xpc_object_t v144;
  xpc_object_t v145;
  uint64_t v146;
  const void *v147;
  size_t v148;
  size_t v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t *p_shared_owners;
  unint64_t v154;
  std::string *v155;
  const void *v156;
  xpc_object_t object;
  __int16 v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  CFTypeRef cf;
  std::string v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  const __CFString *v165;
  CFNumberRef v166;
  const __CFString *valuePtr;
  _BYTE buf[24];
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v164 = v8;
  if (!v8)
    return;
  v163 = a1[5];
  if (!v163)
  {
    v11 = v8;
LABEL_261:
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v154 = __ldaxr(p_shared_owners);
    while (__stlxr(v154 - 1, p_shared_owners));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  memset(&v162, 0, sizeof(v162));
  if (*a2)
    v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  else
    v9 = 0;
  if (v9)
  {
    std::string::__assign_external(&v162, "Failed to get reset properties", 0x1EuLL);
    v10 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v25 = &v162;
      if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)v162.__r_.__value_.__r.__words[0];
      v26 = *a2;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v26;
      _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "%s\n:%@", buf, 0x16u);
    }
    CFErrorGetCode(*a2);
    goto LABEL_258;
  }
  v12 = *a3;
  cf = v12;
  if (v12)
    CFRetain(v12);
  v13 = radio::BasebandProperties::create();
  *(_QWORD *)(v7 + 288) = v13;
  if (cf)
  {
    CFRelease(cf);
    if (*(_BYTE *)(v7 + 288))
      goto LABEL_15;
LABEL_27:
    std::string::__assign_external(&v162, "Invalid reset properties", 0x18uLL);
    v20 = *(NSObject **)(v7 + 88);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      goto LABEL_226;
    v21 = &v162;
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)v162.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v21;
LABEL_269:
    _os_log_error_impl(&dword_1BF566000, v20, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
    goto LABEL_226;
  }
  if (!(_BYTE)v13)
    goto LABEL_27;
LABEL_15:
  v14 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(v7 + 289))
      v15 = "true";
    else
      v15 = "false";
    v16 = *(unsigned __int16 *)(v7 + 290);
    v17 = *(_DWORD *)(v7 + 292);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v16;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v17;
    _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Baseband properties:\n    Coredump supported: %s\n    PowerSequence index: %u\n    Baseband version: 0x%08x", buf, 0x18u);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_223;
  }
  LOBYTE(valuePtr) = *(_BYTE *)(v7 + 289) ^ 1;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70F248)
  {
LABEL_24:
    v19 = (std::__shared_weak_count_vtbl *)qword_1ED70F248;
    v18 = (std::__shared_weak_count *)off_1ED70F250;
    v159 = qword_1ED70F248;
    v160 = (std::__shared_weak_count *)off_1ED70F250;
    if (!off_1ED70F250)
      goto LABEL_42;
    goto LABEL_40;
  }
  v19 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v19, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v18 = (std::__shared_weak_count *)operator new(0x20uLL);
  v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7919E70;
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = v19;
  v22 = (std::__shared_weak_count *)off_1ED70F250;
  qword_1ED70F248 = (uint64_t)v19;
  off_1ED70F250 = v18;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_24;
  }
  v159 = (uint64_t)v19;
  v160 = v18;
LABEL_40:
  v27 = (unint64_t *)&v18->__shared_owners_;
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
LABEL_42:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v29 = (const void *)*MEMORY[0x1E0DDFA08];
  v30 = strlen((const char *)*MEMORY[0x1E0DDFA08]);
  if (v30 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v31 = v30;
  if (v30 >= 0x17)
  {
    v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v33 = v30 | 7;
    v34 = v33 + 1;
    v32 = operator new(v33 + 1);
    *(_QWORD *)&buf[8] = v31;
    *(_QWORD *)&buf[16] = v34 | 0x8000000000000000;
    *(_QWORD *)buf = v32;
    goto LABEL_49;
  }
  buf[23] = v30;
  v32 = buf;
  if (v30)
LABEL_49:
    memmove(v32, v29, v31);
  v32[v31] = 0;
  if (buf[23] >= 0)
    v35 = buf;
  else
    v35 = *(char **)buf;
  v36 = ctu::cf::plist_adapter::set<BOOL>((uint64_t)v19, *(unsigned __int8 *)(v7 + 289), v35, 1);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v160)
  {
    v37 = &v160->__shared_owners_;
    do
      v38 = __ldaxr((unint64_t *)v37);
    while (__stlxr(v38 - 1, (unint64_t *)v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  if (!v36)
    goto LABEL_89;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70F248)
  {
LABEL_62:
    v40 = (std::__shared_weak_count_vtbl *)qword_1ED70F248;
    v39 = (std::__shared_weak_count *)off_1ED70F250;
    v159 = qword_1ED70F248;
    v160 = (std::__shared_weak_count *)off_1ED70F250;
    if (!off_1ED70F250)
      goto LABEL_72;
    goto LABEL_70;
  }
  v40 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v40, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v39 = (std::__shared_weak_count *)operator new(0x20uLL);
  v39->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7919E70;
  v39->__shared_owners_ = 0;
  v39->__shared_weak_owners_ = 0;
  v39[1].__vftable = v40;
  v41 = (std::__shared_weak_count *)off_1ED70F250;
  qword_1ED70F248 = (uint64_t)v40;
  off_1ED70F250 = v39;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    goto LABEL_62;
  }
  v159 = (uint64_t)v40;
  v160 = v39;
LABEL_70:
  v44 = (unint64_t *)&v39->__shared_owners_;
  do
    v45 = __ldxr(v44);
  while (__stxr(v45 + 1, v44));
LABEL_72:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v46 = strlen((const char *)v29);
  if (v46 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v47 = v46;
  if (v46 >= 0x17)
  {
    v49 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17)
      v49 = v46 | 7;
    v50 = v49 + 1;
    v48 = operator new(v49 + 1);
    *(_QWORD *)&buf[8] = v47;
    *(_QWORD *)&buf[16] = v50 | 0x8000000000000000;
    *(_QWORD *)buf = v48;
    goto LABEL_79;
  }
  buf[23] = v46;
  v48 = buf;
  if (v46)
LABEL_79:
    memmove(v48, v29, v47);
  v48[v47] = 0;
  v51 = Preferences::getPreference<BOOL>(v40, buf, (ctu::cf *)&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (v160)
  {
    v52 = &v160->__shared_owners_;
    do
      v53 = __ldaxr((unint64_t *)v52);
    while (__stlxr(v53 - 1, (unint64_t *)v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
      std::__shared_weak_count::__release_weak(v160);
    }
  }
  if (!v51 || valuePtr != *(unsigned __int8 *)(v7 + 289))
  {
LABEL_89:
    v54 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v54, OS_LOG_TYPE_ERROR, "Failed to save CoredumpSupported property in ABMPreferences file", buf, 2u);
    }
  }
  v158 = *(_WORD *)(v7 + 290) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70F248)
    goto LABEL_92;
  v56 = (CFStringRef *)operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v56, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v55 = (std::__shared_weak_count *)operator new(0x20uLL);
  v55->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7919E70;
  v55->__shared_owners_ = 0;
  v55->__shared_weak_owners_ = 0;
  v55[1].__vftable = (std::__shared_weak_count_vtbl *)v56;
  v57 = (std::__shared_weak_count *)off_1ED70F250;
  qword_1ED70F248 = (uint64_t)v56;
  off_1ED70F250 = v55;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
LABEL_92:
    v56 = (CFStringRef *)qword_1ED70F248;
    v55 = (std::__shared_weak_count *)off_1ED70F250;
    v159 = qword_1ED70F248;
    v160 = (std::__shared_weak_count *)off_1ED70F250;
    if (!off_1ED70F250)
      goto LABEL_102;
    goto LABEL_100;
  }
  v159 = (uint64_t)v56;
  v160 = v55;
LABEL_100:
  v60 = (unint64_t *)&v55->__shared_owners_;
  do
    v61 = __ldxr(v60);
  while (__stxr(v61 + 1, v60));
LABEL_102:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v62 = (const void *)*MEMORY[0x1E0DDFA20];
  v63 = strlen((const char *)*MEMORY[0x1E0DDFA20]);
  if (v63 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v64 = v63;
  if (v63 >= 0x17)
  {
    v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v66 = v63 | 7;
    v67 = v66 + 1;
    v65 = operator new(v66 + 1);
    *(_QWORD *)&buf[8] = v64;
    *(_QWORD *)&buf[16] = v67 | 0x8000000000000000;
    *(_QWORD *)buf = v65;
    goto LABEL_109;
  }
  buf[23] = v63;
  v65 = buf;
  if (v63)
LABEL_109:
    memmove(v65, v62, v64);
  v65[v64] = 0;
  v68 = (const __CFString *)*(unsigned __int16 *)(v7 + 290);
  if (buf[23] >= 0)
    v69 = buf;
  else
    v69 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v165, v69);
  v70 = v165;
  v71 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = v68;
  v72 = CFNumberCreate(v71, kCFNumberLongLongType, &valuePtr);
  v166 = v72;
  if (v72)
  {
    v73 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(v70, v72, v56[1], v56[2], (CFStringRef)*MEMORY[0x1E0C9B250]);
    v74 = CFPreferencesSynchronize(v56[1], v56[2], v73) != 0;
    CFRelease(v72);
    MEMORY[0x1C3B8B878](&v165);
    if ((buf[23] & 0x80000000) == 0)
      goto LABEL_115;
  }
  else
  {
    v74 = 0;
    MEMORY[0x1C3B8B878](&v165);
    if ((buf[23] & 0x80000000) == 0)
    {
LABEL_115:
      v75 = v160;
      if (!v160)
        goto LABEL_123;
      goto LABEL_119;
    }
  }
  operator delete(*(void **)buf);
  v75 = v160;
  if (!v160)
    goto LABEL_123;
LABEL_119:
  v76 = (unint64_t *)&v75->__shared_owners_;
  do
    v77 = __ldaxr(v76);
  while (__stlxr(v77 - 1, v76));
  if (!v77)
  {
    ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
    std::__shared_weak_count::__release_weak(v75);
  }
LABEL_123:
  if (!v74)
  {
LABEL_161:
    v99 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v99, OS_LOG_TYPE_ERROR, "Failed to save PowerSequence property in ABMPreferences file", buf, 2u);
    }
    goto LABEL_163;
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70F248)
  {
LABEL_125:
    v79 = (uint64_t (***)(void *, const __CFString *))qword_1ED70F248;
    v78 = (std::__shared_weak_count *)off_1ED70F250;
    v159 = qword_1ED70F248;
    v160 = (std::__shared_weak_count *)off_1ED70F250;
    if (!off_1ED70F250)
      goto LABEL_135;
    goto LABEL_133;
  }
  v79 = (uint64_t (***)(void *, const __CFString *))operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v79, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v78 = (std::__shared_weak_count *)operator new(0x20uLL);
  v78->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7919E70;
  v78->__shared_owners_ = 0;
  v78->__shared_weak_owners_ = 0;
  v78[1].__vftable = (std::__shared_weak_count_vtbl *)v79;
  v80 = (std::__shared_weak_count *)off_1ED70F250;
  qword_1ED70F248 = (uint64_t)v79;
  off_1ED70F250 = v78;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
    goto LABEL_125;
  }
  v159 = (uint64_t)v79;
  v160 = v78;
LABEL_133:
  v83 = (unint64_t *)&v78->__shared_owners_;
  do
    v84 = __ldxr(v83);
  while (__stxr(v84 + 1, v83));
LABEL_135:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v85 = strlen((const char *)v62);
  if (v85 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v86 = v85;
  if (v85 >= 0x17)
  {
    v88 = (v85 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v85 | 7) != 0x17)
      v88 = v85 | 7;
    v89 = v88 + 1;
    v87 = operator new(v88 + 1);
    *(_QWORD *)&buf[8] = v86;
    *(_QWORD *)&buf[16] = v89 | 0x8000000000000000;
    *(_QWORD *)buf = v87;
    goto LABEL_142;
  }
  buf[23] = v85;
  v87 = buf;
  if (v85)
LABEL_142:
    memmove(v87, v62, v86);
  v87[v86] = 0;
  if (buf[23] >= 0)
    v90 = buf;
  else
    v90 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v90);
  v91 = (unsigned __int16 *)(**v79)(v79, valuePtr);
  v92 = v91;
  if (v91)
  {
    v93 = CFGetTypeID(v91);
    if (v93 == CFNumberGetTypeID())
      v95 = ctu::cf::assign((ctu::cf *)&v158, v92, v94);
    else
      v95 = 0;
    CFRelease(v92);
  }
  else
  {
    v95 = 0;
  }
  MEMORY[0x1C3B8B878](&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v96 = v160;
  if (v160)
  {
    v97 = &v160->__shared_owners_;
    do
      v98 = __ldaxr((unint64_t *)v97);
    while (__stlxr(v98 - 1, (unint64_t *)v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  if (!v95 || v158 != *(_WORD *)(v7 + 290))
    goto LABEL_161;
LABEL_163:
  LODWORD(v166) = *(_DWORD *)(v7 + 292) == 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70F248)
    goto LABEL_164;
  v101 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v101, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v100 = (std::__shared_weak_count *)operator new(0x20uLL);
  v100->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7919E70;
  v100->__shared_owners_ = 0;
  v100->__shared_weak_owners_ = 0;
  v100[1].__vftable = v101;
  v102 = (std::__shared_weak_count *)off_1ED70F250;
  qword_1ED70F248 = (uint64_t)v101;
  off_1ED70F250 = v100;
  if (v102)
  {
    v103 = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
LABEL_164:
    v101 = (std::__shared_weak_count_vtbl *)qword_1ED70F248;
    v100 = (std::__shared_weak_count *)off_1ED70F250;
    v159 = qword_1ED70F248;
    v160 = (std::__shared_weak_count *)off_1ED70F250;
    if (!off_1ED70F250)
      goto LABEL_174;
    goto LABEL_172;
  }
  v159 = (uint64_t)v101;
  v160 = v100;
LABEL_172:
  v105 = (unint64_t *)&v100->__shared_owners_;
  do
    v106 = __ldxr(v105);
  while (__stxr(v106 + 1, v105));
LABEL_174:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v107 = (const void *)*MEMORY[0x1E0DDF9D8];
  v108 = strlen((const char *)*MEMORY[0x1E0DDF9D8]);
  if (v108 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v109 = v108;
  if (v108 >= 0x17)
  {
    v111 = (v108 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v108 | 7) != 0x17)
      v111 = v108 | 7;
    v112 = v111 + 1;
    v110 = operator new(v111 + 1);
    *(_QWORD *)&buf[8] = v109;
    *(_QWORD *)&buf[16] = v112 | 0x8000000000000000;
    *(_QWORD *)buf = v110;
    goto LABEL_181;
  }
  buf[23] = v108;
  v110 = buf;
  if (v108)
LABEL_181:
    memmove(v110, v107, v109);
  v110[v109] = 0;
  v113 = *(_DWORD *)(v7 + 292);
  if (buf[23] >= 0)
    v114 = buf;
  else
    v114 = *(const char **)buf;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&valuePtr, v114);
  v115 = ctu::cf::plist_adapter::set<unsigned int>((uint64_t)v101, v113, valuePtr, 1);
  MEMORY[0x1C3B8B878](&valuePtr);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v116 = v160;
  if (v160)
  {
    v117 = &v160->__shared_owners_;
    do
      v118 = __ldaxr((unint64_t *)v117);
    while (__stlxr(v118 - 1, (unint64_t *)v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (!v115)
    goto LABEL_221;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70F248)
  {
LABEL_194:
    v120 = (std::__shared_weak_count_vtbl *)qword_1ED70F248;
    v119 = (std::__shared_weak_count *)off_1ED70F250;
    v159 = qword_1ED70F248;
    v160 = (std::__shared_weak_count *)off_1ED70F250;
    if (!off_1ED70F250)
      goto LABEL_204;
    goto LABEL_202;
  }
  v120 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v120, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v119 = (std::__shared_weak_count *)operator new(0x20uLL);
  v119->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7919E70;
  v119->__shared_owners_ = 0;
  v119->__shared_weak_owners_ = 0;
  v119[1].__vftable = v120;
  v121 = (std::__shared_weak_count *)off_1ED70F250;
  qword_1ED70F248 = (uint64_t)v120;
  off_1ED70F250 = v119;
  if (v121)
  {
    v122 = (unint64_t *)&v121->__shared_owners_;
    do
      v123 = __ldaxr(v122);
    while (__stlxr(v123 - 1, v122));
    if (!v123)
    {
      ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
      std::__shared_weak_count::__release_weak(v121);
    }
    goto LABEL_194;
  }
  v159 = (uint64_t)v120;
  v160 = v119;
LABEL_202:
  v124 = (unint64_t *)&v119->__shared_owners_;
  do
    v125 = __ldxr(v124);
  while (__stxr(v125 + 1, v124));
LABEL_204:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v126 = strlen((const char *)v107);
  if (v126 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v127 = v126;
  if (v126 >= 0x17)
  {
    v129 = (v126 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v126 | 7) != 0x17)
      v129 = v126 | 7;
    v130 = v129 + 1;
    v128 = operator new(v129 + 1);
    *(_QWORD *)&buf[8] = v127;
    *(_QWORD *)&buf[16] = v130 | 0x8000000000000000;
    *(_QWORD *)buf = v128;
    goto LABEL_211;
  }
  buf[23] = v126;
  v128 = buf;
  if (v126)
LABEL_211:
    memmove(v128, v107, v127);
  v128[v127] = 0;
  v131 = Preferences::getPreference<unsigned int>(v120, buf, (ctu::cf *)&v166);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v132 = v160;
  if (v160)
  {
    v133 = &v160->__shared_owners_;
    do
      v134 = __ldaxr((unint64_t *)v133);
    while (__stlxr(v134 - 1, (unint64_t *)v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (!v131 || (_DWORD)v166 != *(_DWORD *)(v7 + 292))
  {
LABEL_221:
    v135 = *(NSObject **)(v7 + 88);
    if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v135, OS_LOG_TYPE_ERROR, "Failed to save BasebandVersion property in ABMPreferences file", buf, 2u);
    }
  }
LABEL_223:
  v136 = TelephonyBasebandSetBasebandProperty();
  if ((TelephonyBasebandSetBasebandProperty() & v136 & 1) != 0)
  {
    *(_BYTE *)(v7 + 296) = 1;
    goto LABEL_258;
  }
  *(_BYTE *)(v7 + 296) = 0;
  std::string::__assign_external(&v162, "Failed to send reset properties to AppleBaseband driver", 0x37uLL);
  v20 = *(NSObject **)(v7 + 88);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    v155 = &v162;
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v155 = (std::string *)v162.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v155;
    goto LABEL_269;
  }
LABEL_226:
  if ((TelephonyUtilIsInternalBuild() & 1) == 0
    && (TelephonyUtilIsCarrierBuild() & 1) == 0
    && !TelephonyUtilIsVendorBuild())
  {
    goto LABEL_258;
  }
  v137 = xpc_dictionary_create(0, 0, 0);
  if (v137 || (v137 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v137) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v137);
      v138 = v137;
    }
    else
    {
      v138 = xpc_null_create();
    }
  }
  else
  {
    v138 = xpc_null_create();
    v137 = 0;
  }
  xpc_release(v137);
  v139 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
  if (!v139)
    v139 = xpc_null_create();
  xpc_dictionary_set_value(v138, (const char *)*MEMORY[0x1E0CFB538], v139);
  v140 = xpc_null_create();
  xpc_release(v139);
  xpc_release(v140);
  v141 = xpc_string_create((const char *)*MEMORY[0x1E0CFBEA8]);
  if (!v141)
    v141 = xpc_null_create();
  xpc_dictionary_set_value(v138, (const char *)*MEMORY[0x1E0CFB8D0], v141);
  v142 = xpc_null_create();
  xpc_release(v141);
  xpc_release(v142);
  if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v143 = &v162;
  else
    v143 = (std::string *)v162.__r_.__value_.__r.__words[0];
  v144 = xpc_string_create((const char *)v143);
  if (!v144)
    v144 = xpc_null_create();
  xpc_dictionary_set_value(v138, (const char *)*MEMORY[0x1E0CFB788], v144);
  v145 = xpc_null_create();
  xpc_release(v144);
  xpc_release(v145);
  v146 = v163;
  v147 = (const void *)*MEMORY[0x1E0CFB4E0];
  v148 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v148 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v149 = v148;
  if (v148 >= 0x17)
  {
    v151 = (v148 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v148 | 7) != 0x17)
      v151 = v148 | 7;
    v152 = v151 + 1;
    v150 = operator new(v151 + 1);
    *(_QWORD *)&buf[8] = v149;
    *(_QWORD *)&buf[16] = v152 | 0x8000000000000000;
    *(_QWORD *)buf = v150;
  }
  else
  {
    buf[23] = v148;
    v150 = buf;
    if (!v148)
      goto LABEL_252;
  }
  memmove(v150, v147, v149);
LABEL_252:
  v150[v149] = 0;
  object = v138;
  if (v138)
    xpc_retain(v138);
  else
    object = xpc_null_create();
  v156 = 0;
  Service::runCommand(v146, (uint64_t)buf, &object, &v156);
  xpc_release(object);
  object = 0;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  xpc_release(v138);
LABEL_258:
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  v11 = v164;
  if (v164)
    goto LABEL_261;
}

uint64_t Preferences::getPreference<unsigned int>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, ctu::cf *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  CFTypeID v7;
  const __CFNumber *v8;
  uint64_t v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (unsigned int *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 == CFNumberGetTypeID())
      v9 = ctu::cf::assign(a3, v6, v8);
    else
      v9 = 0;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1C3B8B878](&v11);
  return v9;
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 88);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Failed to send battery info update\n:%@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending battery info update", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN11RadioModule23monitorBatteryInfo_syncEv_block_invoke_114(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unsigned int v8;
  _BOOL4 v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v47;
  _BYTE buf[18];
  __int16 v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v47 = v6;
  if (!v6)
    return;
  v7 = v6;
  if (!a1[5])
  {
LABEL_60:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    return;
  }
  v8 = *(unsigned __int8 *)(v5 + 320);
  if (*(_BYTE *)(v5 + 320)
    && (v8 > 0x27 || a2 <= 0x29u)
    && (v8 < 0x28 || a2 >= 0x26u))
  {
    v9 = ((a2 >> 8) & 1) != *(unsigned __int8 *)(v5 + 321);
    v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  else
  {
    v9 = 1;
    v10 = *(NSObject **)(v5 + 88);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
  }
  v11 = "TRUE";
  if ((a2 & 0x100) != 0)
    v12 = "TRUE";
  else
    v12 = "FALSE";
  *(_DWORD *)buf = 67109890;
  *(_DWORD *)&buf[4] = a2;
  if ((*(_QWORD *)&a2 & 0x10000) != 0)
    v13 = "TRUE";
  else
    v13 = "FALSE";
  *(_WORD *)&buf[8] = 2080;
  *(_QWORD *)&buf[10] = v12;
  v49 = 2080;
  if (!v9)
    v11 = "FALSE";
  v50 = v13;
  v51 = 2080;
  v52 = v11;
  _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Battery Info Update:\n   chargeLevel:        %u\n   charging:           %s\n   fully charged:      %s\n   reportToBaseband:   %s", buf, 0x26u);
LABEL_19:
  if (!v9)
    goto LABEL_60;
  *(_WORD *)(v5 + 320) = a2;
  *(_BYTE *)(v5 + 322) = BYTE2(a2);
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v17 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v16;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_1ED70F4D0;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v40 = v15;
  v41 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v42, v15);
  v44 = 0;
  v45 = 0;
  if (v43)
  {
    v45 = std::__shared_weak_count::lock(v43);
    if (v45)
      v44 = v42;
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
  }
  if (v23)
  {
    v26 = (unint64_t *)&v23->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v28 = v44;
  if (v44)
  {
    v29 = *(unsigned __int8 *)(v5 + 320);
    v30 = *(unsigned __int8 *)(v5 + 321);
    v31 = (void *)a1[7];
    if (v31)
      v31 = _Block_copy(v31);
    v32 = a1[8];
    aBlock = v31;
    object = v32;
    if (v32)
      dispatch_retain(v32);
    (*(void (**)(unint64_t, uint64_t, BOOL, void **))(*(_QWORD *)v28 + 176))(v28, v29, v30 != 0, &aBlock);
    if (object)
      dispatch_release(object);
    if (aBlock)
      _Block_release(aBlock);
  }
  v33 = v45;
  if (v45)
  {
    v34 = (unint64_t *)&v45->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v7 = v47;
  if (v47)
    goto LABEL_60;
}

void sub_1BF64C950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c79_ZTSN8dispatch8callbackIU13block_pointerFvN3ctu2cf11CFSharedRefI9__CFErrorEEEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitBatteryInfo)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN11RadioModule21setOperatingMode_syncEjN5radio13OperatingModeEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF64CBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN11RadioModule34queryFactoryCalibrationStatus_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const __CFDictionary **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  const __CFDictionary *v13;
  uint64_t (*v14)(uint64_t);
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint8_t buf[24];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = v10;
            _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v13 = *a3;
          v14 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v14 = 0;
          if (v14)
          {
            memset(buf, 170, 16);
            ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v13);
            *(_BYTE *)(v7 + 192) = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDFA30]);
            MEMORY[0x1C3B8B8B4](buf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN11RadioModule29queryRFCalibrationStatus_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void *v15;
  uint64_t (*v16)(uint64_t);
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        v10 = *a2;
        v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v10)
          v11 = 0;
        if (v11)
        {
          v12 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v19 = v10;
            _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
          }
        }
        else
        {
          v15 = *a3;
          v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v16 = 0;
          if (v16)
          {
            cf = *a3;
            if (v15)
              CFRetain(v15);
            radio::RFCalibration_t::fill();
            if (cf)
              CFRelease(cf);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF64CF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN11RadioModule25queryFieldTestConfig_syncEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t (*v16)(uint64_t);
  xpc_object_t v17;
  xpc_object_t v18;
  void *v19;
  NSObject *v20;
  _BYTE *v21;
  _BYTE object[12];
  char v23;
  uint8_t buf[4];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!v11)
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v16 = 0;
          if (v16)
          {
            ctu::cf_to_xpc(*a3, v9);
            v17 = *(xpc_object_t *)object;
            if (*(_QWORD *)object && MEMORY[0x1C3B8CD78](*(_QWORD *)object) == MEMORY[0x1E0C812F8])
              xpc_retain(*(xpc_object_t *)object);
            else
              v17 = xpc_null_create();
            v18 = xpc_null_create();
            v19 = *(void **)(v7 + 248);
            *(_QWORD *)(v7 + 248) = v17;
            xpc_release(v19);
            xpc_release(v18);
            xpc_release(*(xpc_object_t *)object);
            v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              xpc::object::to_string((xpc::object *)(v7 + 248));
              v21 = v23 >= 0 ? object : *(_BYTE **)object;
              *(_DWORD *)buf = 136315138;
              v25 = v21;
              _os_log_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEFAULT, "#I Baseband field test config:\n%s", buf, 0xCu);
              if (v23 < 0)
                operator delete(*(void **)object);
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BF64D1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7919740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7919740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<RadioModule *,std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule *)#1},std::allocator<RadioModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11RadioModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<RadioModule> ctu::SharedSynchronizable<RadioModule>::make_shared_ptr<RadioModule>(RadioModule*)::{lambda(RadioModule*)#1}::operator() const(RadioModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<RadioModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7919740;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__110shared_ptrIK11RadioModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

BOOL Preferences::getPreference<__CFDictionary const*>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, _QWORD *a3)
{
  const void *v5;
  const void *v6;
  CFTypeID v7;
  BOOL v8;
  _BOOL8 v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (const void *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    v8 = v7 == CFDictionaryGetTypeID();
    v9 = v8;
    if (v8)
      *a3 = v6;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1C3B8B878](&v11);
  return v9;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFC020];
    v5 = strlen((const char *)*MEMORY[0x1E0CFC020]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_134;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 224))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF64DBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__0clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  char v23;
  xpc_object_t xdict;
  std::__shared_weak_count *v26;
  void *__p[3];

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v26 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_29:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x1C3B8CD78](*a2);
  v13 = MEMORY[0x1E0C81350];
  if (v12 == MEMORY[0x1E0C81350])
  {
    v17 = *a3;
    if (v17)
      xpc_retain(v17);
    else
      v17 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFC228], v17);
    v18 = xpc_null_create();
    xpc_release(v17);
    xpc_release(v18);
  }
  else
  {
    memset(__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (v23 >= 0)
      v14 = (const char *)&v22;
    else
      v14 = (const char *)v22;
    v15 = xpc_string_create(v14);
    if (!v15)
      v15 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB2C8], v15);
    v16 = xpc_null_create();
    xpc_release(v15);
    xpc_release(v16);
    if (v23 < 0)
      operator delete(v22);
  }
  if (MEMORY[0x1C3B8CD78](*a2) == v13)
    v19 = 0;
  else
    v19 = -534716416;
  LODWORD(__p[0]) = v19;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, (unsigned int *)__p, &xdict);
  xpc_release(xdict);
  v10 = v26;
  if (v26)
    goto LABEL_29;
}

void sub_1BF64E044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  xpc_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSNSt3__18weak_ptrI11RadioModuleEE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB430];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB430]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_135;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 264))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF64E714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__1clEv_block_invoke(_QWORD *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  unsigned int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int v23;
  xpc_object_t object;
  std::__shared_weak_count *v26;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v26 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        v13 = v7;
LABEL_25:
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      v8 = xpc_null_create();
      object = v8;
      v9 = MEMORY[0x1C3B8CD78](*a2);
      v10 = MEMORY[0x1E0C81350];
      if (v9 == MEMORY[0x1E0C81350])
      {
        v14 = *a3;
        if (v14 && MEMORY[0x1C3B8CD78](v14) == MEMORY[0x1E0C812F8])
          xpc_retain(v14);
        else
          v14 = xpc_null_create();
        v15 = xpc_null_create();
        object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v11) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v11);
            v12 = v11;
          }
          else
          {
            v12 = xpc_null_create();
          }
        }
        else
        {
          v12 = xpc_null_create();
          v11 = 0;
        }
        xpc_release(v11);
        v16 = xpc_null_create();
        v17 = object;
        object = v12;
        xpc_release(v17);
        xpc_release(v16);
        v18 = *a2;
        if (*a2)
          xpc_retain(*a2);
        else
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB2C8], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x1C3B8CD78](*a2) == v10)
        v20 = 0;
      else
        v20 = -534716416;
      v23 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v23, &object);
      xpc_release(object);
      v13 = v26;
      if (v26)
        goto LABEL_25;
    }
  }
}

void sub_1BF64EB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBB50];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBB50]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_136;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 280))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF64F1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__2clEv_block_invoke(_QWORD *a1, xpc_object_t *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  std::__shared_weak_count *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  unsigned int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unsigned int v23;
  xpc_object_t object;
  std::__shared_weak_count *v26;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v26 = v7;
    if (v7)
    {
      if (!a1[4])
      {
        v13 = v7;
LABEL_25:
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        return;
      }
      v8 = xpc_null_create();
      object = v8;
      v9 = MEMORY[0x1C3B8CD78](*a2);
      v10 = MEMORY[0x1E0C81350];
      if (v9 == MEMORY[0x1E0C81350])
      {
        v14 = *a3;
        if (v14 && MEMORY[0x1C3B8CD78](v14) == MEMORY[0x1E0C812F8])
          xpc_retain(v14);
        else
          v14 = xpc_null_create();
        v15 = xpc_null_create();
        object = v14;
        xpc_release(v8);
        xpc_release(v15);
      }
      else
      {
        v11 = xpc_dictionary_create(0, 0, 0);
        if (v11 || (v11 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v11) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v11);
            v12 = v11;
          }
          else
          {
            v12 = xpc_null_create();
          }
        }
        else
        {
          v12 = xpc_null_create();
          v11 = 0;
        }
        xpc_release(v11);
        v16 = xpc_null_create();
        v17 = object;
        object = v12;
        xpc_release(v17);
        xpc_release(v16);
        v18 = *a2;
        if (*a2)
          xpc_retain(*a2);
        else
          v18 = xpc_null_create();
        xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB2C8], v18);
        v19 = xpc_null_create();
        xpc_release(v18);
        xpc_release(v19);
      }
      if (MEMORY[0x1C3B8CD78](*a2) == v10)
        v20 = 0;
      else
        v20 = -534716416;
      v23 = v20;
      dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v23, &object);
      xpc_release(object);
      v13 = v26;
      if (v26)
        goto LABEL_25;
    }
  }
}

void sub_1BF64F604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb3_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBCE8];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBCE8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_137;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 288))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF64FC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb3_ENK3__3clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unsigned int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int v17;
  xpc_object_t object;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v20 = v7;
    if (v7)
    {
      v8 = v7;
      if (a1[4])
      {
        v9 = xpc_null_create();
        object = v9;
        v10 = MEMORY[0x1C3B8CD78](*a2);
        v11 = MEMORY[0x1E0C81350];
        if (v10 == MEMORY[0x1E0C81350])
        {
          v12 = *a3;
          if (v12 && MEMORY[0x1C3B8CD78](v12) == MEMORY[0x1E0C812F8])
            xpc_retain(v12);
          else
            v12 = xpc_null_create();
          v13 = xpc_null_create();
          object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x1C3B8CD78](*a2) == v11)
          v14 = 0;
        else
          v14 = -534716416;
        v17 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &object);
        xpc_release(object);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF64FF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb4_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB688];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB688]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_138;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 296))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF650594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb4_ENK3__4clEv_block_invoke(_QWORD *a1, _QWORD *a2, xpc_object_t *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  uint64_t v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unsigned int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unsigned int v17;
  xpc_object_t object;
  std::__shared_weak_count *v20;

  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v20 = v7;
    if (v7)
    {
      v8 = v7;
      if (a1[4])
      {
        v9 = xpc_null_create();
        object = v9;
        v10 = MEMORY[0x1C3B8CD78](*a2);
        v11 = MEMORY[0x1E0C81350];
        if (v10 == MEMORY[0x1E0C81350])
        {
          v12 = *a3;
          if (v12 && MEMORY[0x1C3B8CD78](v12) == MEMORY[0x1E0C812F8])
            xpc_retain(v12);
          else
            v12 = xpc_null_create();
          v13 = xpc_null_create();
          object = v12;
          xpc_release(v9);
          xpc_release(v13);
        }
        if (MEMORY[0x1C3B8CD78](*a2) == v11)
          v14 = 0;
        else
          v14 = -534716416;
        v17 = v14;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v17, &object);
        xpc_release(object);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BF6508D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb5_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBFC0];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBFC0]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_139_0;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 232))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF650EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb5_ENK3__5clEv_block_invoke(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v19;
  xpc_object_t xdict;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v22 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_22:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x1C3B8CD78](*a3);
  v13 = MEMORY[0x1E0C81350];
  if (v12 != MEMORY[0x1E0C81350])
  {
    v14 = (xpc_object_t)*a3;
    if (v14)
      xpc_retain(v14);
    else
      v14 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFC228], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x1C3B8CD78](*a2) == v13)
    v16 = 0;
  else
    v16 = -534716416;
  v19 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v19, &xdict);
  xpc_release(xdict);
  v10 = v22;
  if (v22)
    goto LABEL_22;
}

void sub_1BF6512C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb6_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  NSObject *v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  CFTypeRef v38;
  CFTypeID v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  void *v43;
  void *v44;
  NSObject *v45;
  unint64_t *v46;
  unint64_t v47;
  xpc_object_t v48;
  void *v49;
  xpc_object_t *v50;
  xpc_object_t v51;
  xpc_object_t v52;
  std::__shared_weak_count *v53;
  const void *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  xpc_object_t object[6];
  std::__shared_weak_count *v59;
  void *aBlock;
  xpc_object_t v61;
  CFTypeRef cf;
  CFTypeRef v63;
  std::string __dst;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBF50];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBF50]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_92:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_94;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v32) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v48 = xpc_null_create();
              v49 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v49);
              xpc_release(v48);
              if (SHIBYTE(object[2]) >= 0)
                v50 = object;
              else
                v50 = (xpc_object_t *)object[0];
              v51 = xpc_string_create((const char *)v50);
              if (!v51)
                v51 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E0CFB0D0], v51);
              v52 = xpc_null_create();
              xpc_release(v51);
              xpc_release(v52);
            }
            LODWORD(v63) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v63, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_92;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_92;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
LABEL_51:
    v34 = v3[11];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v34, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
    }
    v35 = xpc_null_create();
    v36 = v2[2];
    object[0] = v35;
    v37 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v36 + 16))(v36, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v37);
    goto LABEL_78;
  }
LABEL_36:
  if (!v18)
    goto LABEL_51;
LABEL_37:
  v28 = (void *)v2[1];
  v61 = v28;
  if (v28)
    xpc_retain(v28);
  else
    v61 = xpc_null_create();
  xpc::bridge((xpc *)&v61, v29);
  v38 = cf;
  if (cf && (v39 = CFGetTypeID(cf), v39 == CFDictionaryGetTypeID()))
  {
    v63 = v38;
    CFRetain(v38);
  }
  else
  {
    v63 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke;
  object[3] = &__block_descriptor_tmp_140;
  object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  v40 = (std::__shared_weak_count *)v2[4];
  v59 = v40;
  if (v40)
  {
    p_shared_weak_owners = (unint64_t *)&v40->__shared_weak_owners_;
    do
      v42 = __ldxr(p_shared_weak_owners);
    while (__stxr(v42 + 1, p_shared_weak_owners));
  }
  v43 = (void *)v2[2];
  if (v43)
    v43 = _Block_copy(v43);
  aBlock = v43;
  v44 = _Block_copy(object);
  v45 = v3[17];
  if (v45)
    dispatch_retain(v45);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 248))(v18, &v63, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v63)
    CFRelease(v63);
  if (cf)
    CFRelease(cf);
  xpc_release(v61);
  if (aBlock)
    _Block_release(aBlock);
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
LABEL_78:
  if (v17)
  {
    v46 = (unint64_t *)&v17->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_94:
  v53 = (std::__shared_weak_count *)v2[4];
  if (v53)
    std::__shared_weak_count::__release_weak(v53);
  v54 = (const void *)v2[2];
  if (v54)
    _Block_release(v54);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v55 = (std::__shared_weak_count *)a1[2];
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  operator delete(a1);
}

void sub_1BF6519F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb6_ENK3__6clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF651DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb7_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t value;
  std::string *v29;
  std::string::size_type size;
  xpc_object_t v31;
  xpc_object_t v32;
  NSObject *v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  int v37;
  NSObject *v38;
  _BOOL4 v39;
  std::string *v40;
  xpc_object_t v41;
  xpc_object_t v42;
  void *v43;
  const object *v44;
  CFTypeRef v45;
  CFTypeID v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_weak_owners;
  unint64_t v49;
  void *v50;
  void *v51;
  NSObject *v52;
  NSObject *v53;
  xpc_object_t v54;
  uint64_t v55;
  xpc_object_t v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t v59;
  void *v60;
  std::string *p_object;
  xpc_object_t v62;
  xpc_object_t v63;
  std::__shared_weak_count *v64;
  const void *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string object;
  void *v70;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  void *aBlock;
  xpc_object_t v75;
  CFTypeRef cf;
  CFTypeRef v77;
  std::string __dst;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(&object, 170, sizeof(object));
    v4 = (const void *)*MEMORY[0x1E0CFBF50];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBF50]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&object.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_109:
              if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
                operator delete(object.__r_.__value_.__l.__data_);
              goto LABEL_111;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            size = HIBYTE(object.__r_.__value_.__r.__words[2]);
            if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = object.__r_.__value_.__l.__size_;
            if (size)
            {
              v31 = xpc_dictionary_create(0, 0, 0);
              if (v31 || (v31 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v31) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v31);
                  v32 = v31;
                }
                else
                {
                  v32 = xpc_null_create();
                }
              }
              else
              {
                v32 = xpc_null_create();
                v31 = 0;
              }
              xpc_release(v31);
              v59 = xpc_null_create();
              v60 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              xpc_release(v60);
              xpc_release(v59);
              if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_object = &object;
              else
                p_object = (std::string *)object.__r_.__value_.__r.__words[0];
              v62 = xpc_string_create((const char *)p_object);
              if (!v62)
                v62 = xpc_null_create();
              xpc_dictionary_set_value(v32, (const char *)*MEMORY[0x1E0CFB0D0], v62);
              v63 = xpc_null_create();
              xpc_release(v62);
              xpc_release(v63);
            }
            LODWORD(v77) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v77, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_109;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v29 = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)object.__r_.__value_.__r.__words[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_109;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)&object.__r_.__value_.__l.__data_;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
    {
LABEL_36:
      if (v18)
        goto LABEL_37;
LABEL_51:
      v33 = v3[11];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl(&dword_1BF566000, v33, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)&object, 2u);
      }
      v34 = xpc_null_create();
      v35 = v2[2];
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      v36 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v35 + 16))(v35, 3760250880, &object);
      xpc_release(object.__r_.__value_.__l.__data_);
      xpc_release(v36);
      goto LABEL_96;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
    goto LABEL_36;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v18)
    goto LABEL_51;
LABEL_37:
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFBAF8]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  v37 = xpc::dyn_cast_or_default((xpc *)&object, 0);
  xpc_release(object.__r_.__value_.__l.__data_);
  v38 = v3[11];
  v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
  if (v37 == 1)
  {
    if (v39)
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF566000, v38, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in FTM requested", (uint8_t *)&object, 2u);
    }
    goto LABEL_65;
  }
  if (v39)
  {
    LOWORD(object.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v38, OS_LOG_TYPE_DEFAULT, "#I RF Self Test in AST2 mode requested", (uint8_t *)&object, 2u);
  }
  memset(&object, 0, sizeof(object));
  ctu::cf::assign();
  __dst = object;
  if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = &__dst;
  else
    v40 = (std::string *)object.__r_.__value_.__r.__words[0];
  v41 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)v40);
  v42 = v41;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v42)
      goto LABEL_65;
LABEL_93:
    v53 = v3[11];
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF566000, v53, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)&object, 2u);
    }
    v54 = xpc_null_create();
    v55 = v2[2];
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
    v56 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v55 + 16))(v55, 3760250882, &object);
    xpc_release(object.__r_.__value_.__l.__data_);
    xpc_release(v56);
    goto LABEL_96;
  }
  if (!v41)
    goto LABEL_93;
LABEL_65:
  v43 = (void *)v2[1];
  v75 = v43;
  if (v43)
    xpc_retain(v43);
  else
    v75 = xpc_null_create();
  xpc::bridge((xpc *)&v75, v44);
  v45 = cf;
  if (cf && (v46 = CFGetTypeID(cf), v46 == CFDictionaryGetTypeID()))
  {
    v77 = v45;
    CFRetain(v45);
  }
  else
  {
    v77 = 0;
  }
  object.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  object.__r_.__value_.__l.__size_ = 1174405120;
  object.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke;
  v70 = &__block_descriptor_tmp_141;
  v71 = v3;
  v72 = v2[3];
  v47 = (std::__shared_weak_count *)v2[4];
  v73 = v47;
  if (v47)
  {
    p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
    do
      v49 = __ldxr(p_shared_weak_owners);
    while (__stxr(v49 + 1, p_shared_weak_owners));
  }
  v50 = (void *)v2[2];
  if (v50)
    v50 = _Block_copy(v50);
  aBlock = v50;
  v51 = _Block_copy(&object);
  v52 = v3[17];
  if (v52)
    dispatch_retain(v52);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 256))(v18, &v77, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v77)
    CFRelease(v77);
  if (cf)
    CFRelease(cf);
  xpc_release(v75);
  if (aBlock)
    _Block_release(aBlock);
  if (v73)
    std::__shared_weak_count::__release_weak(v73);
LABEL_96:
  if (v17)
  {
    v57 = (unint64_t *)&v17->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_111:
  v64 = (std::__shared_weak_count *)v2[4];
  if (v64)
    std::__shared_weak_count::__release_weak(v64);
  v65 = (const void *)v2[2];
  if (v65)
    _Block_release(v65);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v66 = (std::__shared_weak_count *)a1[2];
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  operator delete(a1);
}

void sub_1BF6526C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb7_ENK3__7clEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unsigned int v18;
  std::__shared_weak_count *v20;
  _BYTE object[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v20 = v8;
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        if (*a2)
          v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v11 = *a2;
          }
        }
        if (v11)
          v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v14 = 0;
        if (v14)
          v15 = -534716416;
        else
          v15 = 0;
        v18 = v15;
        ctu::cf_to_xpc(*a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v18, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BF652B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb8_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  xpc_object_t value;
  xpc_object_t v29;
  void *v30;
  const object *v31;
  xpc_object_t *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  NSObject *v36;
  xpc_object_t v37;
  uint64_t v38;
  xpc_object_t v39;
  NSObject *v40;
  xpc_object_t v41;
  uint64_t v42;
  xpc_object_t v43;
  CFTypeRef v44;
  CFTypeID v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_weak_owners;
  unint64_t v48;
  void *v49;
  void *v50;
  NSObject *v51;
  unint64_t *v52;
  unint64_t v53;
  xpc_object_t v54;
  void *v55;
  xpc_object_t *v56;
  xpc_object_t v57;
  xpc_object_t v58;
  std::__shared_weak_count *v59;
  const void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  xpc_object_t object[6];
  std::__shared_weak_count *v65;
  void *aBlock;
  xpc_object_t v67;
  CFTypeRef cf;
  CFTypeRef v69;
  std::string __dst;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFC010];
    v5 = strlen((const char *)*MEMORY[0x1E0CFC010]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 2;
            if (!v2[2])
            {
LABEL_98:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_100;
            }
LABEL_45:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v33 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v33 = object[1];
            if (v33)
            {
              v34 = xpc_dictionary_create(0, 0, 0);
              if (v34 || (v34 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v34) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v34);
                  v35 = v34;
                }
                else
                {
                  v35 = xpc_null_create();
                }
              }
              else
              {
                v35 = xpc_null_create();
                v34 = 0;
              }
              xpc_release(v34);
              v54 = xpc_null_create();
              v55 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
              xpc_release(v55);
              xpc_release(v54);
              if (SHIBYTE(object[2]) >= 0)
                v56 = object;
              else
                v56 = (xpc_object_t *)object[0];
              v57 = xpc_string_create((const char *)v56);
              if (!v57)
                v57 = xpc_null_create();
              xpc_dictionary_set_value(v35, (const char *)*MEMORY[0x1E0CFB0D0], v57);
              v58 = xpc_null_create();
              xpc_release(v57);
              xpc_release(v58);
            }
            LODWORD(v69) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v69, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_98;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v32 = object;
        if (SHIBYTE(object[2]) < 0)
          v32 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 2;
        if (!v2[2])
          goto LABEL_98;
        goto LABEL_45;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
    {
LABEL_36:
      if (v18)
        goto LABEL_37;
LABEL_53:
      v36 = v3[11];
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LOWORD(object[0]) = 0;
        _os_log_error_impl(&dword_1BF566000, v36, OS_LOG_TYPE_ERROR, "No radio driver", (uint8_t *)object, 2u);
      }
      v37 = xpc_null_create();
      v38 = v2[2];
      object[0] = v37;
      v39 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v38 + 16))(v38, 3760250880, object);
      xpc_release(object[0]);
      xpc_release(v39);
      goto LABEL_84;
    }
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
    goto LABEL_36;
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v18)
    goto LABEL_53;
LABEL_37:
  memset(object, 0, 24);
  ctu::cf::assign();
  memset(&__dst, 0, sizeof(__dst));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)&__dst);
  v29 = value;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_39;
LABEL_57:
    v40 = v3[11];
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v40, OS_LOG_TYPE_ERROR, "Ticket was not provided", (uint8_t *)object, 2u);
    }
    v41 = xpc_null_create();
    v42 = v2[2];
    object[0] = v41;
    v43 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v42 + 16))(v42, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v43);
    goto LABEL_84;
  }
  if (!value)
    goto LABEL_57;
LABEL_39:
  v30 = (void *)v2[1];
  v67 = v30;
  if (v30)
    xpc_retain(v30);
  else
    v67 = xpc_null_create();
  xpc::bridge((xpc *)&v67, v31);
  v44 = cf;
  if (cf && (v45 = CFGetTypeID(cf), v45 == CFDictionaryGetTypeID()))
  {
    v69 = v44;
    CFRetain(v44);
  }
  else
  {
    v69 = 0;
  }
  object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
  object[1] = (xpc_object_t)1174405120;
  object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke;
  object[3] = &__block_descriptor_tmp_142;
  object[4] = v3;
  object[5] = *((xpc_object_t *)v2 + 3);
  v46 = (std::__shared_weak_count *)v2[4];
  v65 = v46;
  if (v46)
  {
    p_shared_weak_owners = (unint64_t *)&v46->__shared_weak_owners_;
    do
      v48 = __ldxr(p_shared_weak_owners);
    while (__stxr(v48 + 1, p_shared_weak_owners));
  }
  v49 = (void *)v2[2];
  if (v49)
    v49 = _Block_copy(v49);
  aBlock = v49;
  v50 = _Block_copy(object);
  v51 = v3[17];
  if (v51)
    dispatch_retain(v51);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
  (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 240))(v18, &v69, &__dst);
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v69)
    CFRelease(v69);
  if (cf)
    CFRelease(cf);
  xpc_release(v67);
  if (aBlock)
    _Block_release(aBlock);
  if (v65)
    std::__shared_weak_count::__release_weak(v65);
LABEL_84:
  if (v17)
  {
    v52 = (unint64_t *)&v17->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_100:
  v59 = (std::__shared_weak_count *)v2[4];
  if (v59)
    std::__shared_weak_count::__release_weak(v59);
  v60 = (const void *)v2[2];
  if (v60)
    _Block_release(v60);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v61 = (std::__shared_weak_count *)a1[2];
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  operator delete(a1);
}

void sub_1BF653350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,void *aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb8_ENK3__8clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF6537A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb9_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  xpc_object_t *v25;
  uint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  xpc_object_t v29;
  uint64_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  uint64_t v36;
  xpc_object_t v37;
  unint64_t *v38;
  unint64_t v39;
  xpc_object_t v40;
  void *v41;
  xpc_object_t *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  xpc_object_t object[4];
  std::string __dst;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB898];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB898]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = object;
            if (SHIBYTE(object[2]) < 0)
              v25 = (xpc_object_t *)object[0];
            LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
            _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
            v26 = v2 + 1;
            if (!v2[1])
              goto LABEL_65;
            goto LABEL_42;
          }
        }
        else
        {
          v24 = v3[11];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v26 = v2 + 1;
        if (!v2[1])
        {
LABEL_65:
          if (SHIBYTE(object[2]) < 0)
            operator delete(object[0]);
          goto LABEL_67;
        }
LABEL_42:
        __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
        v32 = (xpc_object_t)HIBYTE(object[2]);
        if (SHIBYTE(object[2]) < 0)
          v32 = object[1];
        if (v32)
        {
          v33 = xpc_dictionary_create(0, 0, 0);
          if (v33 || (v33 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8CD78](v33) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v33);
              v34 = v33;
            }
            else
            {
              v34 = xpc_null_create();
            }
          }
          else
          {
            v34 = xpc_null_create();
            v33 = 0;
          }
          xpc_release(v33);
          v40 = xpc_null_create();
          v41 = (void *)__dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
          xpc_release(v41);
          xpc_release(v40);
          if (SHIBYTE(object[2]) >= 0)
            v42 = object;
          else
            v42 = (xpc_object_t *)object[0];
          v43 = xpc_string_create((const char *)v42);
          if (!v43)
            v43 = xpc_null_create();
          xpc_dictionary_set_value(v34, (const char *)*MEMORY[0x1E0CFB0D0], v43);
          v44 = xpc_null_create();
          xpc_release(v43);
          xpc_release(v44);
        }
        v50 = -534716415;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v26, &v50, (void **)&__dst.__r_.__value_.__l.__data_);
        xpc_release(__dst.__r_.__value_.__l.__data_);
        goto LABEL_65;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_38;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_38;
  }
  v27 = (unint64_t *)&v14->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_39;
LABEL_50:
    v35 = xpc_null_create();
    v36 = v2[1];
    object[0] = v35;
    v37 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v36 + 16))(v36, 3760250880, object);
    xpc_release(object[0]);
    xpc_release(v37);
    goto LABEL_51;
  }
LABEL_38:
  if (!v18)
    goto LABEL_50;
LABEL_39:
  (*(void (**)(std::string::size_type, _QWORD))(*(_QWORD *)v18 + 312))(v18, 0);
  (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v18 + 312))(v18, 1);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v18 + 320))(v18);
  v29 = xpc_null_create();
  v30 = v2[1];
  object[0] = v29;
  v31 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v30 + 16))(v30, 0, object);
  xpc_release(object[0]);
  xpc_release(v31);
LABEL_51:
  if (v17)
  {
    v38 = (unint64_t *)&v17->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_67:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF653DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t __p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb10_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  std::string *v24;
  __int128 v25;
  NSObject *v26;
  uint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  void *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  const object *v37;
  _BYTE *v38;
  uint64_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  uint64_t v43;
  xpc_object_t v44;
  CFTypeRef v45;
  CFTypeID v46;
  unint64_t *v47;
  unint64_t v48;
  xpc_object_t v49;
  void *v50;
  const char *v51;
  xpc_object_t v52;
  xpc_object_t v53;
  std::__shared_weak_count *v54;
  const void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t object;
  CFTypeRef cf;
  CFTypeRef v61;
  _BYTE aBlock[24];
  void *v63;
  _QWORD *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67;
  std::string __dst;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(aBlock, 170, sizeof(aBlock));
    v4 = (const void *)*MEMORY[0x1E0CFB5D8];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB5D8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v21 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v21 = v5 | 7;
      v22 = v21 + 1;
      p_dst = (std::string *)operator new(v21 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_33:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v23 = (char *)operator new(0x28uLL);
        strcpy(v23, " rejected; ABM is shutting down ");
        v24 = std::string::append(&__dst, v23, 0x20uLL);
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        *(_QWORD *)&aBlock[16] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
        *(_OWORD *)aBlock = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        operator delete(v23);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v26 = v3[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
LABEL_35:
            v27 = v2 + 1;
            if (!v2[1])
            {
LABEL_95:
              if ((aBlock[23] & 0x80000000) != 0)
                operator delete(*(void **)aBlock);
              goto LABEL_97;
            }
LABEL_55:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v39 = aBlock[23];
            if (aBlock[23] < 0)
              v39 = *(_QWORD *)&aBlock[8];
            if (v39)
            {
              v40 = xpc_dictionary_create(0, 0, 0);
              if (v40 || (v40 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v40) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v40);
                  v41 = v40;
                }
                else
                {
                  v41 = xpc_null_create();
                }
              }
              else
              {
                v41 = xpc_null_create();
                v40 = 0;
              }
              xpc_release(v40);
              v49 = xpc_null_create();
              v50 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
              xpc_release(v50);
              xpc_release(v49);
              if (aBlock[23] >= 0)
                v51 = aBlock;
              else
                v51 = *(const char **)aBlock;
              v52 = xpc_string_create(v51);
              if (!v52)
                v52 = xpc_null_create();
              xpc_dictionary_set_value(v41, (const char *)*MEMORY[0x1E0CFB0D0], v52);
              v53 = xpc_null_create();
              xpc_release(v52);
              xpc_release(v53);
            }
            LODWORD(v61) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v27, (unsigned int *)&v61, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_95;
          }
        }
        else
        {
          v26 = v3[11];
          if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            goto LABEL_35;
        }
        v38 = aBlock;
        if (aBlock[23] < 0)
          v38 = *(_BYTE **)aBlock;
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
        _os_log_impl(&dword_1BF566000, v26, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v27 = v2 + 1;
        if (!v2[1])
          goto LABEL_95;
        goto LABEL_55;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_33;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)aBlock;
    *(_OWORD *)aBlock = 0uLL;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (*(_QWORD *)&aBlock[8])
    {
      v14 = (unint64_t *)(*(_QWORD *)&aBlock[8] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)&aBlock[8] + 16))(*(_QWORD *)&aBlock[8]);
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&aBlock[8]);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v16 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v17 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v19 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v19)
      v20 = __dst.__r_.__value_.__r.__words[0];
    else
      v20 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v16)
      goto LABEL_41;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    if (!v16)
      goto LABEL_41;
  }
  v28 = (unint64_t *)&v16->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
    if (v20)
      goto LABEL_42;
    goto LABEL_63;
  }
LABEL_41:
  if (v20)
  {
LABEL_42:
    *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[8] = 1174405120;
    *(_QWORD *)&aBlock[16] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke;
    v63 = &__block_descriptor_tmp_143_0;
    v64 = v3;
    v65 = v2[2];
    v30 = (std::__shared_weak_count *)v2[3];
    v66 = v30;
    if (v30)
    {
      p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
      do
        v32 = __ldxr(p_shared_weak_owners);
      while (__stxr(v32 + 1, p_shared_weak_owners));
    }
    v33 = (void *)v2[1];
    if (v33)
      v33 = _Block_copy(v33);
    v67 = v33;
    v34 = _Block_copy(aBlock);
    v35 = v3[17];
    if (v35)
      dispatch_retain(v35);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
    v36 = (void *)v2[4];
    object = v36;
    if (v36)
      xpc_retain(v36);
    else
      object = xpc_null_create();
    xpc::bridge((xpc *)&object, v37);
    v45 = cf;
    if (cf && (v46 = CFGetTypeID(cf), v46 == CFDictionaryGetTypeID()))
    {
      v61 = v45;
      CFRetain(v45);
    }
    else
    {
      v61 = 0;
    }
    (*(void (**)(std::string::size_type, std::string *, CFTypeRef *))(*(_QWORD *)v20 + 344))(v20, &__dst, &v61);
    if (v61)
      CFRelease(v61);
    if (cf)
      CFRelease(cf);
    xpc_release(object);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v67)
      _Block_release(v67);
    if (v66)
      std::__shared_weak_count::__release_weak(v66);
    goto LABEL_81;
  }
LABEL_63:
  v42 = xpc_null_create();
  v43 = v2[1];
  *(_QWORD *)aBlock = v42;
  v44 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(v43 + 16))(v43, 3760250880, aBlock);
  xpc_release(*(xpc_object_t *)aBlock);
  xpc_release(v44);
LABEL_81:
  if (v19)
  {
    v47 = (unint64_t *)&v19->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_97:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v54 = (std::__shared_weak_count *)v2[3];
  if (v54)
    std::__shared_weak_count::__release_weak(v54);
  v55 = (const void *)v2[1];
  if (v55)
    _Block_release(v55);
  operator delete(v2);
  v56 = (std::__shared_weak_count *)a1[2];
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  operator delete(a1);
}

void sub_1BF654678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, CFTypeRef a11, CFTypeRef cf, xpc_object_t object, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb10_ENK4__10clEv_block_invoke(_QWORD *a1, uint64_t *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  NSObject *v13;
  uint64_t (*v14)(uint64_t);
  unsigned int v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  ctu *v18;
  uint64_t (*v19)(uint64_t);
  NSObject *v20;
  unsigned int v21;
  std::__shared_weak_count *v23;
  _BYTE object[24];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v23 = v8;
    if (v8)
    {
      v10 = v8;
      if (a1[5])
      {
        v11 = *a2;
        if (*a2)
          v12 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v12 = 0;
        if (v12)
        {
          v13 = *(NSObject **)(v7 + 88);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v11;
            _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
          }
        }
        else
        {
          v18 = *a3;
          v19 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          if (!*a3)
            v19 = 0;
          if (v19)
          {
            v20 = *(NSObject **)(v7 + 88);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)object = 138412290;
              *(_QWORD *)&object[4] = v18;
              _os_log_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEFAULT, "#I Get Antenna Port Info: %@", object, 0xCu);
            }
          }
        }
        if (*a2)
          v14 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v14 = 0;
        if (v14)
          v15 = -534716416;
        else
          v15 = 0;
        v21 = v15;
        ctu::cf_to_xpc(*a3, v9);
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::object>(a1 + 7, &v21, (void **)object);
        xpc_release(*(xpc_object_t *)object);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1BF654ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb11_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  CFTypeRef v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  void *v42;
  void *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  xpc_object_t v47;
  void *v48;
  xpc_object_t *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  const void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  xpc_object_t object[6];
  std::__shared_weak_count *v58;
  void *aBlock;
  xpc_object_t v60;
  CFTypeRef cf;
  CFTypeRef v62;
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB5E8];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB5E8]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_90:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_92;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v32) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v47 = xpc_null_create();
              v48 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v48);
              xpc_release(v47);
              if (SHIBYTE(object[2]) >= 0)
                v49 = object;
              else
                v49 = (xpc_object_t *)object[0];
              v50 = xpc_string_create((const char *)v49);
              if (!v50)
                v50 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E0CFB0D0], v50);
              v51 = xpc_null_create();
              xpc_release(v50);
              xpc_release(v51);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_90;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_90;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_51;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    v28 = (void *)v2[4];
    v60 = v28;
    if (v28)
      xpc_retain(v28);
    else
      v60 = xpc_null_create();
    xpc::bridge((xpc *)&v60, v29);
    v37 = cf;
    if (cf && (v38 = CFGetTypeID(cf), v38 == CFDictionaryGetTypeID()))
    {
      v62 = v37;
      CFRetain(v37);
    }
    else
    {
      v62 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke;
    object[3] = &__block_descriptor_tmp_144;
    object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    v39 = (std::__shared_weak_count *)v2[3];
    v58 = v39;
    if (v39)
    {
      p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v41 = __ldxr(p_shared_weak_owners);
      while (__stxr(v41 + 1, p_shared_weak_owners));
    }
    v42 = (void *)v2[1];
    if (v42)
      v42 = _Block_copy(v42);
    aBlock = v42;
    v43 = _Block_copy(object);
    v44 = v3[17];
    if (v44)
      dispatch_retain(v44);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 352))(v18, &v62, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v62)
      CFRelease(v62);
    if (cf)
      CFRelease(cf);
    xpc_release(v60);
    if (aBlock)
      _Block_release(aBlock);
    if (v58)
      std::__shared_weak_count::__release_weak(v58);
    goto LABEL_76;
  }
LABEL_51:
  v34 = xpc_null_create();
  v35 = v2[1];
  object[0] = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v35 + 16))(v35, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v36);
LABEL_76:
  if (v17)
  {
    v45 = (unint64_t *)&v17->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_92:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v52 = (std::__shared_weak_count *)v2[3];
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  v53 = (const void *)v2[1];
  if (v53)
    _Block_release(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF6551C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb11_ENK4__11clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF6555B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb12_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  const object *v29;
  xpc_object_t *v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  uint64_t v35;
  xpc_object_t v36;
  CFTypeRef v37;
  CFTypeID v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_weak_owners;
  unint64_t v41;
  void *v42;
  void *v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  xpc_object_t v47;
  void *v48;
  xpc_object_t *v49;
  xpc_object_t v50;
  xpc_object_t v51;
  std::__shared_weak_count *v52;
  const void *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  xpc_object_t object[6];
  std::__shared_weak_count *v58;
  void *aBlock;
  xpc_object_t v60;
  CFTypeRef cf;
  CFTypeRef v62;
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(object, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFB050];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB050]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        object[2] = (xpc_object_t)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)object = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_90:
              if (SHIBYTE(object[2]) < 0)
                operator delete(object[0]);
              goto LABEL_92;
            }
LABEL_43:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v31 = (xpc_object_t)HIBYTE(object[2]);
            if (SHIBYTE(object[2]) < 0)
              v31 = object[1];
            if (v31)
            {
              v32 = xpc_dictionary_create(0, 0, 0);
              if (v32 || (v32 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v32) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v32);
                  v33 = v32;
                }
                else
                {
                  v33 = xpc_null_create();
                }
              }
              else
              {
                v33 = xpc_null_create();
                v32 = 0;
              }
              xpc_release(v32);
              v47 = xpc_null_create();
              v48 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
              xpc_release(v48);
              xpc_release(v47);
              if (SHIBYTE(object[2]) >= 0)
                v49 = object;
              else
                v49 = (xpc_object_t *)object[0];
              v50 = xpc_string_create((const char *)v49);
              if (!v50)
                v50 = xpc_null_create();
              xpc_dictionary_set_value(v33, (const char *)*MEMORY[0x1E0CFB0D0], v50);
              v51 = xpc_null_create();
              xpc_release(v50);
              xpc_release(v51);
            }
            LODWORD(v62) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, (unsigned int *)&v62, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_90;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v30 = object;
        if (SHIBYTE(object[2]) < 0)
          v30 = (xpc_object_t *)object[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v30;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_90;
        goto LABEL_43;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)object;
    object[0] = 0;
    object[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_51;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    v28 = (void *)v2[4];
    v60 = v28;
    if (v28)
      xpc_retain(v28);
    else
      v60 = xpc_null_create();
    xpc::bridge((xpc *)&v60, v29);
    v37 = cf;
    if (cf && (v38 = CFGetTypeID(cf), v38 == CFDictionaryGetTypeID()))
    {
      v62 = v37;
      CFRetain(v37);
    }
    else
    {
      v62 = 0;
    }
    object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
    object[1] = (xpc_object_t)1174405120;
    object[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke;
    object[3] = &__block_descriptor_tmp_145;
    object[4] = v3;
    object[5] = *((xpc_object_t *)v2 + 2);
    v39 = (std::__shared_weak_count *)v2[3];
    v58 = v39;
    if (v39)
    {
      p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
      do
        v41 = __ldxr(p_shared_weak_owners);
      while (__stxr(v41 + 1, p_shared_weak_owners));
    }
    v42 = (void *)v2[1];
    if (v42)
      v42 = _Block_copy(v42);
    aBlock = v42;
    v43 = _Block_copy(object);
    v44 = v3[17];
    if (v44)
      dispatch_retain(v44);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
    (*(void (**)(std::string::size_type, CFTypeRef *, std::string *))(*(_QWORD *)v18 + 360))(v18, &v62, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (v62)
      CFRelease(v62);
    if (cf)
      CFRelease(cf);
    xpc_release(v60);
    if (aBlock)
      _Block_release(aBlock);
    if (v58)
      std::__shared_weak_count::__release_weak(v58);
    goto LABEL_76;
  }
LABEL_51:
  v34 = xpc_null_create();
  v35 = v2[1];
  object[0] = v34;
  v36 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v35 + 16))(v35, 3760250880, object);
  xpc_release(object[0]);
  xpc_release(v36);
LABEL_76:
  if (v17)
  {
    v45 = (unint64_t *)&v17->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_92:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  v52 = (std::__shared_weak_count *)v2[3];
  if (v52)
    std::__shared_weak_count::__release_weak(v52);
  v53 = (const void *)v2[1];
  if (v53)
    _Block_release(v53);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF655CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,xpc_object_t a21,CFTypeRef a22,CFTypeRef cf,xpc_object_t aBlock,dispatch_object_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb12_ENK4__12clEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE object[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        if (*a2)
          v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v9 = 0;
        if (v9)
        {
          v10 = *(NSObject **)(v5 + 88);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)object = 138412290;
            *(_QWORD *)&object[4] = v8;
            _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "%@", object, 0xCu);
            v8 = *a2;
          }
        }
        if (v8)
          v11 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        else
          v11 = 0;
        if (v11)
          v12 = 3760250880;
        else
          v12 = 0;
        v13 = xpc_null_create();
        v14 = a1[7];
        *(_QWORD *)object = v13;
        v15 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(v14 + 16))(v14, v12, object);
        xpc_release(*(xpc_object_t *)object);
        xpc_release(v15);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF6560BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb13_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const void *v4;
  size_t v5;
  std::string::size_type v6;
  std::string *p_dst;
  CommandDriverFactory *v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  std::string *v22;
  __int128 v23;
  NSObject *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  void *v31;
  void *v32;
  NSObject *v33;
  unint64_t *v34;
  unint64_t v35;
  void **v36;
  void *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  void *v41;
  void **v42;
  xpc_object_t v43;
  xpc_object_t v44;
  std::__shared_weak_count *v45;
  const void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *__p[5];
  std::__shared_weak_count *v51;
  void *aBlock;
  unsigned int v53;
  std::string __dst;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
  {
    memset(__p, 170, 24);
    v4 = (const void *)*MEMORY[0x1E0CFBE38];
    v5 = strlen((const char *)*MEMORY[0x1E0CFBE38]);
    if (v5 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = v5;
    if (v5 >= 0x17)
    {
      v19 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v5 | 7) != 0x17)
        v19 = v5 | 7;
      v20 = v19 + 1;
      p_dst = (std::string *)operator new(v19 + 1);
      __dst.__r_.__value_.__l.__size_ = v6;
      __dst.__r_.__value_.__r.__words[2] = v20 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5;
      p_dst = &__dst;
      if (!v5)
      {
LABEL_28:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        v21 = (char *)operator new(0x28uLL);
        strcpy(v21, " rejected; ABM is shutting down ");
        v22 = std::string::append(&__dst, v21, 0x20uLL);
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        __p[2] = (void *)v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        operator delete(v21);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_30:
            v25 = v2 + 1;
            if (!v2[1])
            {
LABEL_79:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              goto LABEL_81;
            }
LABEL_61:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v37 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v37 = __p[1];
            if (v37)
            {
              v38 = xpc_dictionary_create(0, 0, 0);
              if (v38 || (v38 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v38) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v38);
                  v39 = v38;
                }
                else
                {
                  v39 = xpc_null_create();
                }
              }
              else
              {
                v39 = xpc_null_create();
                v38 = 0;
              }
              xpc_release(v38);
              v40 = xpc_null_create();
              v41 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
              xpc_release(v41);
              xpc_release(v40);
              if (SHIBYTE(__p[2]) >= 0)
                v42 = __p;
              else
                v42 = (void **)__p[0];
              v43 = xpc_string_create((const char *)v42);
              if (!v43)
                v43 = xpc_null_create();
              xpc_dictionary_set_value(v39, (const char *)*MEMORY[0x1E0CFB0D0], v43);
              v44 = xpc_null_create();
              xpc_release(v43);
              xpc_release(v44);
            }
            v53 = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v25, &v53, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_79;
          }
        }
        else
        {
          v24 = v3[11];
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
        }
        v36 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v36 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
        _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v25 = v2 + 1;
        if (!v2[1])
          goto LABEL_79;
        goto LABEL_61;
      }
    }
    memmove(p_dst, v4, v6);
    goto LABEL_28;
  }
  v8 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v9 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v8);
    v10 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v11 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v9 = off_1ED70F4D0;
  }
  v14 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v15 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v9 + 16))(&__dst, v9);
  if (__dst.__r_.__value_.__l.__size_)
  {
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (v17)
      v18 = __dst.__r_.__value_.__r.__words[0];
    else
      v18 = 0;
    if (__dst.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    if (!v14)
      goto LABEL_36;
  }
  else
  {
    v17 = 0;
    v18 = 0;
    if (!v14)
      goto LABEL_36;
  }
  v26 = (unint64_t *)&v14->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (v18)
      goto LABEL_37;
    goto LABEL_52;
  }
LABEL_36:
  if (v18)
  {
LABEL_37:
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)1174405120;
    __p[2] = ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke;
    __p[3] = &__block_descriptor_tmp_146;
    __p[4] = *((void **)v2 + 2);
    v28 = (std::__shared_weak_count *)v2[3];
    v51 = v28;
    if (v28)
    {
      p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v30 = __ldxr(p_shared_weak_owners);
      while (__stxr(v30 + 1, p_shared_weak_owners));
    }
    v31 = (void *)v2[1];
    if (v31)
      v31 = _Block_copy(v31);
    aBlock = v31;
    v32 = _Block_copy(__p);
    v33 = v3[17];
    if (v33)
      dispatch_retain(v33);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v18 + 384))(v18, &__dst);
    if (__dst.__r_.__value_.__l.__size_)
      dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
    if (__dst.__r_.__value_.__r.__words[0])
      _Block_release(__dst.__r_.__value_.__l.__data_);
    if (aBlock)
      _Block_release(aBlock);
    if (v51)
      std::__shared_weak_count::__release_weak(v51);
  }
LABEL_52:
  if (v17)
  {
    v34 = (unint64_t *)&v17->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_81:
  v45 = (std::__shared_weak_count *)v2[3];
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v46 = (const void *)v2[1];
  if (v46)
    _Block_release(v46);
  operator delete(v2);
  v47 = (std::__shared_weak_count *)a1[2];
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  operator delete(a1);
}

void sub_1BF656700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, xpc_object_t object,dispatch_object_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN11RadioModule10initializeEN8dispatch13group_sessionEEUb_EUb13_ENK4__13clEv_block_invoke(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  std::__shared_weak_count *v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  unsigned int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v19;
  xpc_object_t xdict;
  std::__shared_weak_count *v22;

  v4 = (std::__shared_weak_count *)a1[5];
  if (!v4)
    return;
  v7 = std::__shared_weak_count::lock(v4);
  v22 = v7;
  if (!v7)
    return;
  if (!a1[4])
  {
    v10 = v7;
LABEL_22:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    return;
  }
  v8 = xpc_dictionary_create(0, 0, 0);
  v9 = v8;
  if (v8)
  {
    xdict = v8;
  }
  else
  {
    v9 = xpc_null_create();
    xdict = v9;
    if (!v9)
    {
      v11 = xpc_null_create();
      v9 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v9);
    goto LABEL_13;
  }
  v11 = xpc_null_create();
LABEL_12:
  xdict = v11;
LABEL_13:
  xpc_release(v9);
  v12 = MEMORY[0x1C3B8CD78](*a3);
  v13 = MEMORY[0x1E0C81350];
  if (v12 != MEMORY[0x1E0C81350])
  {
    v14 = (xpc_object_t)*a3;
    if (v14)
      xpc_retain(v14);
    else
      v14 = xpc_null_create();
    xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB400], v14);
    v15 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v15);
  }
  if (MEMORY[0x1C3B8CD78](*a2) == v13)
    v16 = 0;
  else
    v16 = -534716416;
  v19 = v16;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(a1 + 6, &v19, &xdict);
  xpc_release(xdict);
  v10 = v22;
  if (v22)
    goto LABEL_22;
}

void sub_1BF656AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11)
{
  xpc_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::initialize(dispatch::group_session)::$_0>(RadioModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  RadioModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(RadioModule ***)a1;
  RadioModule::finishInitialization_sync(**(RadioModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF656B80(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(os_unfair_lock_s *a1, uint64_t *a2)
{
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  const void *v6;
  const char *v7;
  _BOOL8 v8;
  const __CFString *v10;

  v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  v4 = a2[2];
  v5 = *a2;
  v6 = *(const void **)a2[1];
  if (*(char *)(v5 + 23) >= 0)
    v7 = (const char *)v5;
  else
    v7 = *(const char **)v5;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v10, v7);
  v8 = ctu::cf::plist_adapter::set<__CFArray *>(v4, v6, v10, 1);
  MEMORY[0x1C3B8B878](&v10);
  os_unfair_lock_unlock(v3);
  return v8;
}

uint64_t ___ZN3ctu20SharedSynchronizableI11RadioModuleE13connect_eventIN5boost8signals26signalIFvjENS5_19optional_last_valueIvEEiNSt3__14lessIiEENS4_8functionIS7_EENSD_IFvRKNS5_10connectionEjEEENS5_5mutexEEES1_vJjEEEDTcl7connectfp_cvNSA_10shared_ptrIS1_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSQ_SS_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 120);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(unsigned int),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(unsigned int)>,boost::function<void ()(boost::signals2::connection const&,unsigned int)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void (),boost::function<void ()>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF657410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E7919B98;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E7911F10;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(unsigned int),boost::function<void ()(unsigned int)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(unsigned int)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF740723 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF740723 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(unsigned int)>>,void,unsigned int>::invoke(uint64_t a1, int a2)
{
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  _DWORD *v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v23[3];
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
LABEL_10:
    v18 = 1;
LABEL_11:
    v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  v18 = 0;
LABEL_21:
  v19 = operator new(4uLL);
  *v19 = a2;
  v20 = operator new(0x20uLL);
  *v20 = boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable;
  if (v17)
    v21 = _Block_copy(v17);
  else
    v21 = 0;
  v20[1] = v21;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvjEEEj_block_invoke;
  block[3] = &__block_descriptor_tmp_149;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable)
  {
    if ((boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable & 1) == 0)
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function1<void,unsigned int>::assign_to<dispatch::block<void({block_pointer})>>(dispatch::block<void({block_pointer})>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
        v22(v23, v23, 2);
    }
  }
  if ((v18 & 1) == 0)
    _Block_release(v6);
}

void sub_1BF657B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  char v11;

  if (v10)
    _Block_release(v10);
  if ((v11 & 1) == 0)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvjEEEj_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_1BF657C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(unsigned int)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF740761 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF740761 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(unsigned int)>,void,unsigned int>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function1<void,unsigned int>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF657E24(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF657E34(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,unsigned int>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E7919D10;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E7919D10;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E7919D60;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF657FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<RadioModule>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7919D10;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E7919D60;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E7919D60;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<RadioModule>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7919D60;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::sleep(dispatch::group_session)::$_0>(RadioModule::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  NSObject *v14;

  v2 = *a1;
  v3 = **a1;
  v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    v5 = _Block_copy(&__block_literal_global_0);
    v6 = v5;
    v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      v13 = v6;
      v14 = v7;
      radio::HealthService::enterLowPower(v4, (uint64_t)&v13);
      dispatch_release(v7);
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
    v13 = v5;
    v14 = 0;
    radio::HealthService::enterLowPower(v4, (uint64_t)&v13);
    if (v6)
LABEL_6:
      _Block_release(v6);
  }
LABEL_7:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<RadioModule>::execute_wrapped<RadioModule::wake(dispatch::group_session)::$_0>(RadioModule::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<RadioModule::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<RadioModule::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;
  void *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  NSObject *v14;

  v2 = *a1;
  v3 = **a1;
  v4 = *(uint64_t **)(v3 + 272);
  if (v4)
  {
    v5 = _Block_copy(&__block_literal_global_153);
    v6 = v5;
    v7 = *(NSObject **)(v3 + 136);
    if (v7)
    {
      dispatch_retain(v7);
      v13 = v6;
      v14 = v7;
      radio::HealthService::exitLowPower(v4, (uint64_t)&v13);
      dispatch_release(v7);
      if (!v6)
        goto LABEL_7;
      goto LABEL_6;
    }
    v13 = v5;
    v14 = 0;
    radio::HealthService::exitLowPower(v4, (uint64_t)&v13);
    if (v6)
LABEL_6:
      _Block_release(v6);
  }
LABEL_7:
  v8 = v2[1];
  if (v8)
  {
    dispatch_group_leave(v8);
    v9 = v2[1];
    if (v9)
      dispatch_release(v9);
  }
  operator delete(v2);
  v10 = (std::__shared_weak_count *)a1[2];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  operator delete(a1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<radio::HealthService *,std::shared_ptr<radio::HealthService>::__shared_ptr_default_delete<radio::HealthService,radio::HealthService>,std::allocator<radio::HealthService>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF7408B8)
    return a1 + 24;
  if (((v3 & 0x80000001BF7408B8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF7408B8))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF7408B8 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x1C3B8B8CC]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMProperties *,std::shared_ptr<ABMProperties>::__shared_ptr_default_delete<ABMProperties,ABMProperties>,std::allocator<ABMProperties>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF740989)
    return a1 + 24;
  if (((v3 & 0x80000001BF740989 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF740989))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF740989 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

BOOL ctu::cf::plist_adapter::set<BOOL>(uint64_t a1, int a2, char *a3, int a4)
{
  const __CFString **v7;
  const __CFString *v8;
  const __CFString *v9;
  _BOOL8 v10;
  CFStringRef key[2];

  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)key, a3);
  v7 = (const __CFString **)MEMORY[0x1E0C9AE50];
  if (!a2)
    v7 = (const __CFString **)MEMORY[0x1E0C9AE40];
  v8 = *v7;
  key[1] = v8;
  if (v8)
  {
    v9 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(key[0], v8, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E0C9B250]);
    if (a4)
      v10 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v9) != 0;
    else
      v10 = 1;
    CFRelease(v8);
  }
  else
  {
    v10 = 0;
  }
  MEMORY[0x1C3B8B878](key);
  return v10;
}

void sub_1BF658704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  MEMORY[0x1C3B8B878](&a9);
  _Unwind_Resume(a1);
}

BOOL ctu::cf::plist_adapter::set<unsigned int>(uint64_t a1, unsigned int a2, const __CFString *a3, int a4)
{
  const __CFAllocator *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  const __CFString *v10;
  _BOOL8 v11;
  uint64_t valuePtr;

  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  valuePtr = a2;
  v8 = CFNumberCreate(v7, kCFNumberLongLongType, &valuePtr);
  if (!v8)
    return 0;
  v9 = v8;
  v10 = (const __CFString *)*MEMORY[0x1E0C9B250];
  CFPreferencesSetValue(a3, v8, *(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), (CFStringRef)*MEMORY[0x1E0C9B250]);
  if (a4)
    v11 = CFPreferencesSynchronize(*(CFStringRef *)(a1 + 8), *(CFStringRef *)(a1 + 16), v10) != 0;
  else
    v11 = 1;
  CFRelease(v9);
  return v11;
}

void sub_1BF6587E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_125()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_126()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_127()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_128()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t abm::stats::typeAsString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if ((_DWORD)result)
  {
    strcpy(a2, "UNKNOWN");
    a2[23] = 7;
  }
  else
  {
    strcpy(a2, "Boot Statistics");
    a2[23] = 15;
  }
  return result;
}

void util::strip_non_printable(std::string *this)
{
  std::string *v1;
  std::string::size_type size;
  std::string *v3;
  std::string *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type v17;

  v1 = this;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = this;
  else
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = (std::string *)((char *)v3 + size);
    v5 = size - 1;
    v6 = MEMORY[0x1E0C80978];
    while (1)
    {
      v7 = v3->__r_.__value_.__s.__data_[0];
      if ((v7 & 0x80000000) != 0)
        break;
      v8 = *(_DWORD *)(v6 + 4 * v7 + 60);
      if ((v8 & 0x40000) == 0 || (v8 & 0x4000) != 0)
        goto LABEL_15;
LABEL_8:
      v3 = (std::string *)((char *)v3 + 1);
      --v5;
      if (v3 == v4)
        goto LABEL_28;
    }
    if (__maskrune(v3->__r_.__value_.__s.__data_[0], 0x40000uLL) && !__maskrune(v7, 0x4000uLL))
      goto LABEL_8;
LABEL_15:
    if (v3 != v4 && (std::string *)((char *)&v3->__r_.__value_.__l.__data_ + 1) != v4)
    {
      v9 = 1;
      v4 = v3;
      while (1)
      {
        v10 = v3->__r_.__value_.__s.__data_[v9];
        if ((v10 & 0x80000000) != 0)
        {
          if (!__maskrune(v3->__r_.__value_.__s.__data_[v9], 0x40000uLL) || __maskrune(v10, 0x4000uLL))
            goto LABEL_19;
        }
        else
        {
          v11 = *(_DWORD *)(v6 + 4 * v10 + 60);
          if ((v11 & 0x40000) == 0 || (v11 & 0x4000) != 0)
            goto LABEL_19;
        }
        v4->__r_.__value_.__s.__data_[0] = v3->__r_.__value_.__s.__data_[v9];
        v4 = (std::string *)((char *)v4 + 1);
LABEL_19:
        ++v9;
        if (!--v5)
          goto LABEL_28;
      }
    }
  }
  v4 = v3;
LABEL_28:
  v12 = HIBYTE(v1->__r_.__value_.__r.__words[2]);
  v13 = (char)v12;
  v14 = (std::string *)v1->__r_.__value_.__r.__words[0];
  v15 = (char *)(v1->__r_.__value_.__r.__words[0] + v1->__r_.__value_.__l.__size_);
  if ((v12 & 0x80u) != 0)
  {
    v16 = v1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v15 = (char *)v1 + v12;
    v16 = (std::string::size_type)v1;
  }
  if ((v12 & 0x80u) != 0)
    v12 = v1->__r_.__value_.__l.__size_;
  v17 = (std::string::size_type)v4 - v16;
  if (v12 < (unint64_t)v4 - v16)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v15 - (char *)v4 == -1)
  {
    if (v13 < 0)
    {
      v1->__r_.__value_.__l.__size_ = v17;
      v1 = v14;
    }
    else
    {
      *((_BYTE *)&v1->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
    v1->__r_.__value_.__s.__data_[v17] = 0;
  }
  else
  {
    std::string::__erase_external_with_move(v1, v17, v15 - (char *)v4);
  }
}

uint64_t util::convert_garbage(uint64_t result)
{
  int v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v1 = *(char *)(result + 23);
  if (v1 >= 0)
    v2 = (_BYTE *)result;
  else
    v2 = *(_BYTE **)result;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(result + 23);
  else
    v3 = *(_QWORD *)(result + 8);
  if (v3)
  {
    v4 = MEMORY[0x1E0C80978];
    do
    {
      v5 = (char)*v2;
      if ((v5 & 0x80000000) != 0)
      {
        result = __maskrune((char)*v2, 0x40000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
        result = __maskrune(v5, 0x4000uLL);
        if ((_DWORD)result)
          goto LABEL_10;
      }
      else
      {
        v6 = *(_DWORD *)(v4 + 4 * v5 + 60);
        if ((v6 & 0x40000) != 0)
          goto LABEL_10;
        result = v6 & 0x4000;
        if ((v6 & 0x4000) != 0)
          goto LABEL_10;
      }
      *v2 = 32;
LABEL_10:
      ++v2;
      --v3;
    }
    while (v3);
  }
  return result;
}

void util::strip_pattern(char *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  std::string::size_type v10;
  char *v11;
  uint64_t size;
  std::string::size_type v13;
  std::string::size_type v14;
  int v15;
  std::string *v16;
  int v17;
  char *v18;
  int64_t v19;
  int64_t v20;
  char *v21;
  int v22;
  std::string *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  std::string *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::string::size_type v33;
  int v34;
  std::string *v35;
  int v36;
  char *v37;
  int64_t v38;
  int64_t v39;
  char *v40;
  int v41;
  std::string *v42;
  int64_t v43;
  char *v44;
  char *v45;

  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5 = a1[23];
  v6 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
  v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    v8 = a3;
  else
    v8 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if (v5 >= 0)
    v9 = a1[23];
  else
    v9 = *((_QWORD *)a1 + 1);
  v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if (v5 >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  if (!v9)
  {
    v13 = 0;
    goto LABEL_20;
  }
  if (v6 >= 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  if (size >= v9)
  {
    v27 = (char *)v8 + size;
    v28 = *v11;
    v29 = v8;
    do
    {
      v30 = size - v9;
      if (v30 == -1)
        break;
      v31 = (char *)memchr(v29, v28, v30 + 1);
      if (!v31)
        break;
      v32 = v31;
      if (!memcmp(v31, v11, v9))
      {
        if (v32 != v27)
        {
          v13 = v32 - (char *)v8;
          if (v32 - (char *)v8 != -1)
          {
            if (v9 == -1)
            {
              while (1)
              {
                v33 = a3->__r_.__value_.__l.__size_;
                if ((v10 & 0x80u) == 0)
                  v33 = v10;
                if (v33 < v13)
                  break;
                if ((char)v10 < 0)
                {
                  a3->__r_.__value_.__l.__size_ = v13;
                }
                else
                {
                  *((_BYTE *)&a3->__r_.__value_.__s + 23) = v13 & 0x7F;
                  v7 = a3;
                }
                v7->__r_.__value_.__s.__data_[v13] = 0;
                v34 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                v7 = (std::string *)a3->__r_.__value_.__r.__words[0];
                if (v34 >= 0)
                  v35 = a3;
                else
                  v35 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v36 = a1[23];
                if (v36 >= 0)
                  v37 = a1;
                else
                  v37 = *(char **)a1;
                if (v36 >= 0)
                  v38 = a1[23];
                else
                  v38 = *((_QWORD *)a1 + 1);
                if (v38)
                {
                  if (v34 >= 0)
                    v39 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v39 = a3->__r_.__value_.__l.__size_;
                  if (v39 < v38)
                    return;
                  v40 = (char *)v35 + v39;
                  v41 = *v37;
                  v42 = v35;
                  while (1)
                  {
                    v43 = v39 - v38;
                    if (v43 == -1)
                      return;
                    v44 = (char *)memchr(v42, v41, v43 + 1);
                    if (!v44)
                      return;
                    v45 = v44;
                    if (!memcmp(v44, v37, v38))
                      break;
                    v42 = (std::string *)(v45 + 1);
                    v39 = v40 - (v45 + 1);
                    if (v39 < v38)
                      return;
                  }
                  if (v45 == v40)
                    return;
                  v13 = v45 - (char *)v35;
                  if (v45 - (char *)v35 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            else
            {
LABEL_20:
              while (1)
              {
                v14 = (v10 & 0x80u) == 0 ? v10 : a3->__r_.__value_.__l.__size_;
                if (v14 < v13)
                  break;
                std::string::__erase_external_with_move(a3, v13, v9);
                v15 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                v10 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                if (v15 >= 0)
                  v16 = a3;
                else
                  v16 = (std::string *)a3->__r_.__value_.__r.__words[0];
                v17 = a1[23];
                if (v17 >= 0)
                  v18 = a1;
                else
                  v18 = *(char **)a1;
                if (v17 >= 0)
                  v19 = a1[23];
                else
                  v19 = *((_QWORD *)a1 + 1);
                if (v19)
                {
                  if (v15 >= 0)
                    v20 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
                  else
                    v20 = a3->__r_.__value_.__l.__size_;
                  if (v20 < v19)
                    return;
                  v21 = (char *)v16 + v20;
                  v22 = *v18;
                  v23 = v16;
                  while (1)
                  {
                    v24 = v20 - v19;
                    if (v24 == -1)
                      return;
                    v25 = (char *)memchr(v23, v22, v24 + 1);
                    if (!v25)
                      return;
                    v26 = v25;
                    if (!memcmp(v25, v18, v19))
                      break;
                    v23 = (std::string *)(v26 + 1);
                    v20 = v21 - (v26 + 1);
                    if (v20 < v19)
                      return;
                  }
                  if (v26 == v21)
                    return;
                  v13 = v26 - (char *)v16;
                  if (v26 - (char *)v16 == -1)
                    return;
                }
                else
                {
                  v13 = 0;
                }
              }
            }
            std::string::__throw_out_of_range[abi:ne180100]();
          }
        }
        return;
      }
      v29 = (std::string *)(v32 + 1);
      size = v27 - (v32 + 1);
    }
    while (size >= v9);
  }
}

void sub_1BF658E88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *util::strip_leading_trailing@<X0>(_QWORD *result@<X0>, void **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  void *v10;
  size_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *((unsigned __int8 *)result + 23);
  v5 = (_QWORD *)*result;
  v6 = result[1];
  if ((v4 & 0x80u) == 0)
    v7 = result;
  else
    v7 = (_QWORD *)*result;
  if ((v4 & 0x80u) == 0)
    v8 = *((unsigned __int8 *)result + 23);
  else
    v8 = result[1];
  v9 = *((char *)a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *a2;
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)a2 + 23);
  else
    v11 = (size_t)a2[1];
  if (!v8)
    goto LABEL_26;
  v12 = result;
  v13 = 0;
  if (!v11)
  {
    v14 = v8 - 1;
    if ((v4 & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_24;
  }
  while (1)
  {
    result = memchr(v10, *((char *)v7 + v13), v11);
    if (!result)
      break;
    if (v8 == ++v13)
      goto LABEL_26;
  }
  if (v13 == -1)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  do
  {
    if (!v8)
    {
      v14 = -1;
      if ((v4 & 0x80) == 0)
        goto LABEL_28;
LABEL_24:
      if (v6 >= v13)
      {
        v4 = v6;
        v12 = v5;
        goto LABEL_29;
      }
LABEL_41:
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    result = memchr(v10, *((char *)v7 + --v8), v11);
  }
  while (result);
  v14 = v8;
  if ((v4 & 0x80) != 0)
    goto LABEL_24;
LABEL_28:
  if (v13 > v4)
    goto LABEL_41;
LABEL_29:
  v15 = v14 - v13 + 1;
  if (v4 - v13 >= v15)
    v16 = v15;
  else
    v16 = v4 - v13;
  if (v16 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v16 >= 0x17)
  {
    v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v17 = v16 | 7;
    v18 = v17 + 1;
    v19 = operator new(v17 + 1);
    a3[1] = v16;
    a3[2] = v18 | 0x8000000000000000;
    *a3 = v19;
    a3 = v19;
    goto LABEL_39;
  }
  *((_BYTE *)a3 + 23) = v16;
  if (v16)
LABEL_39:
    result = memmove(a3, (char *)v12 + v13, v16);
  *((_BYTE *)a3 + v16) = 0;
  return result;
}

uint64_t util::to_upper(uint64_t result)
{
  uint64_t v1;
  int v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;

  v1 = *(unsigned __int8 *)(result + 23);
  v2 = (char)v1;
  v3 = (_BYTE *)(result + v1);
  if (v2 >= 0)
    v4 = v3;
  else
    v4 = (_BYTE *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if (v2 >= 0)
    v5 = (_BYTE *)result;
  else
    v5 = *(_BYTE **)result;
  for (; v5 != v4; ++v5)
  {
    result = __toupper((char)*v5);
    *v5 = result;
  }
  return result;
}

BOOL util::equal_nocase(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return strcasecmp(a1, a2) == 0;
}

void util::strip_non_alpha(std::string *a1)
{
  std::string::size_type size;
  char *v3;
  char *v4;
  std::string::size_type v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  std::string *v14;
  std::string::size_type v15;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = (char *)a1;
  else
    v3 = (char *)a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_21;
  v4 = &v3[size];
  v5 = size - 1;
  v6 = MEMORY[0x1E0C80978];
  while (1)
  {
    v7 = *v3;
    if ((v7 & 0x80000000) != 0)
    {
      if (!__maskrune(v7, 0x100uLL))
        break;
      goto LABEL_9;
    }
    if ((*(_DWORD *)(v6 + 4 * v7 + 60) & 0x100) == 0)
      break;
LABEL_9:
    ++v3;
    --v5;
    if (v3 == v4)
      goto LABEL_22;
  }
  if (v3 != v4 && v3 + 1 != v4)
  {
    v8 = 1;
    v4 = v3;
    while (1)
    {
      v9 = v3[v8];
      if ((v9 & 0x80000000) == 0)
        break;
      if (__maskrune(v9, 0x100uLL))
        goto LABEL_16;
LABEL_17:
      ++v8;
      if (!--v5)
        goto LABEL_22;
    }
    if ((*(_DWORD *)(v6 + 4 * v9 + 60) & 0x100) == 0)
      goto LABEL_17;
LABEL_16:
    *v4++ = v3[v8];
    goto LABEL_17;
  }
LABEL_21:
  v4 = v3;
LABEL_22:
  v10 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v11 = (char)v10;
  v12 = a1->__r_.__value_.__r.__words[0];
  v13 = (char *)(a1->__r_.__value_.__r.__words[0] + a1->__r_.__value_.__l.__size_);
  if ((v10 & 0x80u) != 0)
  {
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    v13 = (char *)a1 + v10;
    v14 = a1;
  }
  if ((v10 & 0x80u) != 0)
    v10 = a1->__r_.__value_.__l.__size_;
  v15 = v4 - (char *)v14;
  if (v10 < v4 - (char *)v14)
    std::string::__throw_out_of_range[abi:ne180100]();
  if (v13 - v4 == -1)
  {
    if (v11 < 0)
    {
      a1->__r_.__value_.__l.__size_ = v15;
      *(_BYTE *)(v12 + v15) = 0;
    }
    else
    {
      *((_BYTE *)&a1->__r_.__value_.__s + 23) = v15 & 0x7F;
      a1->__r_.__value_.__s.__data_[v15] = 0;
    }
  }
  else
  {
    std::string::__erase_external_with_move(a1, v15, v13 - v4);
  }
}

void util::readPlistToCFDictionary(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  const __CFAllocator *v4;
  __CFError *v5;
  __CFError *v6;
  uint64_t (*v7)(uint64_t);
  __CFError *v8;
  __CFReadStream *v9;
  uint64_t (*v10)(uint64_t);
  CFPropertyListRef v11;
  unsigned __int8 v12;
  NSObject *v13;
  CFIndex Code;
  void **v15;
  void *__p[2];
  uint64_t v17;
  CFErrorRef error[4];
  uint8_t buf[24];
  void **v20;
  uint64_t v21;

  v2 = (const char *)a1;
  v21 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (*(char *)(a1 + 23) < 0)
    v2 = *(const char **)a1;
  v5 = (__CFError *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, 0x8000100u);
  error[3] = v5;
  v6 = CFURLCreateWithFileSystemPath(v4, (CFStringRef)v5, kCFURLPOSIXPathStyle, 0);
  error[2] = v6;
  *a2 = 0;
  v7 = ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get;
  if (!v6)
    v7 = 0;
  if (!v7)
    goto LABEL_18;
  v8 = CFReadStreamCreateWithFile(v4, v6);
  v9 = v8;
  error[1] = v8;
  v10 = ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get;
  if (!v8)
    v10 = 0;
  if (!v10
    || (CFReadStreamOpen(v8),
        error[0] = 0,
        v11 = CFPropertyListCreateWithStream(v4, v9, 0, 1uLL, 0, error),
        *a2 = v11,
        CFReadStreamClose(v9),
        !error[0]))
  {
LABEL_16:
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  CFErrorGetDomain(error[0]);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  v17 = *(_QWORD *)&buf[16];
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v13 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
LABEL_26:
    Code = CFErrorGetCode(error[0]);
    v15 = __p;
    if (v17 < 0)
      v15 = (void **)__p[0];
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = Code;
    *(_WORD *)&buf[22] = 2080;
    v20 = v15;
    _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Failed to create %@ PropertyList: %ld: %s", buf, 0x20u);
    goto LABEL_13;
  }
  v13 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
    goto LABEL_26;
LABEL_13:
  CFRelease(error[0]);
  *a2 = 0;
  if (v11)
    CFRelease(v11);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
    goto LABEL_16;
  operator delete(__p[0]);
  if (v9)
LABEL_17:
    CFRelease(v9);
LABEL_18:
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
}

void sub_1BF65950C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::SharedRef<__CFURL const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFURL const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFReadStream,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFReadStream>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFReadStream>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFURL const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void util::moveDirContent(const void **a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int filtered_files;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  int v17;
  size_t v18;
  unint64_t v19;
  std::string *p_dst;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  int is_directory;
  int v29;
  size_t v30;
  unint64_t v31;
  std::string *v32;
  unsigned __int8 v33;
  NSObject *v34;
  int v35;
  size_t v36;
  unint64_t v37;
  std::string *v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  std::string *v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *p_p;
  unsigned __int8 v62;
  NSObject *v63;
  void **v64;
  void **v65;
  char *v66;
  __int128 v67;
  int v68;
  size_t v69;
  unint64_t v70;
  std::string *p_buf;
  uint64_t v72;
  uint64_t v73;
  const void *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  int v79;
  size_t v80;
  unint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  __int128 v89;
  char v90;
  unsigned __int8 v91;
  NSObject *v92;
  int v93;
  size_t v94;
  unint64_t v95;
  std::string *v96;
  NSObject *v97;
  int v98;
  size_t v99;
  unint64_t v100;
  std::string *v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  const void *v113;
  std::string *v114;
  std::string::size_type v115;
  std::string *v116;
  __int128 v117;
  std::string *v118;
  std::string *v119;
  std::string::size_type v120;
  int v121;
  char *v124;
  std::locale v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  uint64_t v130;
  std::string v131;
  void *v132[2];
  std::string::size_type v133;
  std::string __dst;
  std::string __p;
  std::locale v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  uint64_t v141;
  char *v142;
  void **v143;
  uint64_t v144;
  uint8_t v145[4];
  std::string *v146;
  __int16 v147;
  std::string *v148;
  std::string buf;
  std::string v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  std::locale::locale(&v136, (const std::locale *)a5);
  v137 = *(_OWORD *)(a5 + 8);
  v138 = *(_OWORD *)(a5 + 24);
  v8 = *(std::__shared_weak_count **)(a5 + 48);
  v139 = *(_QWORD *)(a5 + 40);
  v140 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v141 = *(_QWORD *)(a5 + 56);
  filtered_files = ctu::fs::get_filtered_files();
  v12 = v140;
  if (!v140)
    goto LABEL_8;
  v13 = (unint64_t *)&v140->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    std::locale::~locale(&v136);
    if (filtered_files)
    {
LABEL_9:
      v15 = v142;
      v124 = (char *)v143;
      if (v142 != (char *)v143)
      {
        if (a4)
        {
          while (1)
          {
            memset(&v150, 170, sizeof(v150));
            if (v15[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
            }
            else
            {
              v16 = *(_OWORD *)v15;
              v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
              *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v16;
            }
            v17 = *((char *)a1 + 23);
            if (v17 >= 0)
              v18 = *((unsigned __int8 *)a1 + 23);
            else
              v18 = (size_t)a1[1];
            v19 = v18 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v18 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v19 >= 0x17)
            {
              v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v19 | 7) != 0x17)
                v21 = v19 | 7;
              v22 = v21 + 1;
              p_dst = (std::string *)operator new(v21 + 1);
              __dst.__r_.__value_.__l.__size_ = v18 + 1;
              __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              p_dst = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v18 + 1;
              if (!v18)
                goto LABEL_30;
            }
            if (v17 >= 0)
              v23 = a1;
            else
              v23 = *a1;
            memmove(p_dst, v23, v18);
LABEL_30:
            *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v18) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &v150;
            else
              v24 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              size = v150.__r_.__value_.__l.__size_;
            v26 = std::string::append(&__dst, (const std::string::value_type *)v24, size);
            v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            is_directory = ctu::fs::is_directory();
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_38:
                if (is_directory)
                  goto LABEL_39;
                goto LABEL_48;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_38;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (is_directory)
            {
LABEL_39:
              v29 = *((char *)a1 + 23);
              if (v29 >= 0)
                v30 = *((unsigned __int8 *)a1 + 23);
              else
                v30 = (size_t)a1[1];
              v31 = v30 + 1;
              memset(&__dst, 170, sizeof(__dst));
              if (v30 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v31 >= 0x17)
              {
                v39 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v31 | 7) != 0x17)
                  v39 = v31 | 7;
                v40 = v39 + 1;
                v32 = (std::string *)operator new(v39 + 1);
                __dst.__r_.__value_.__l.__size_ = v30 + 1;
                __dst.__r_.__value_.__r.__words[2] = v40 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
              }
              else
              {
                memset(&__dst, 0, sizeof(__dst));
                v32 = &__dst;
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v30 + 1;
                if (!v30)
                  goto LABEL_65;
              }
              if (v29 >= 0)
                v41 = a1;
              else
                v41 = *a1;
              memmove(v32, v41, v30);
LABEL_65:
              *(_WORD *)((char *)&v32->__r_.__value_.__l.__data_ + v30) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v42 = &v150;
              else
                v42 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v43 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v43 = v150.__r_.__value_.__l.__size_;
              v44 = std::string::append(&__dst, (const std::string::value_type *)v42, v43);
              v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
              __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
              v44->__r_.__value_.__l.__size_ = 0;
              v44->__r_.__value_.__r.__words[2] = 0;
              v44->__r_.__value_.__r.__words[0] = 0;
              v46 = std::string::append(&__p, "/", 1uLL);
              v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
              v133 = v46->__r_.__value_.__r.__words[2];
              *(_OWORD *)v132 = v47;
              v46->__r_.__value_.__l.__size_ = 0;
              v46->__r_.__value_.__r.__words[2] = 0;
              v46->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(a2 + 23) < 0)
                std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
              else
                v131 = *(std::string *)a2;
              std::locale::locale(&v125, (const std::locale *)a5);
              v126 = *(_OWORD *)(a5 + 8);
              v127 = *(_OWORD *)(a5 + 24);
              v48 = *(std::__shared_weak_count **)(a5 + 48);
              v128 = *(_QWORD *)(a5 + 40);
              v129 = v48;
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldxr(v49);
                while (__stxr(v50 + 1, v49));
              }
              v130 = *(_QWORD *)(a5 + 56);
              util::moveDirContent(v132, &v131, a3, (a4 - 1), &v125);
              v51 = v129;
              if (!v129)
                goto LABEL_81;
              v52 = (unint64_t *)&v129->__shared_owners_;
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_82;
              }
              else
              {
LABEL_81:
                std::locale::~locale(&v125);
                if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SHIBYTE(v133) & 0x80000000) == 0)
                    goto LABEL_83;
LABEL_88:
                  operator delete(v132[0]);
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_84;
                  goto LABEL_89;
                }
              }
              operator delete(v131.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v133) & 0x80000000) == 0)
              {
LABEL_83:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_89;
              }
              goto LABEL_88;
            }
LABEL_48:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED70F6F8 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v34 = qword_1ED70F6F8;
              if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            else
            {
              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
              v34 = qword_1ED70F6F8;
              if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
                goto LABEL_91;
            }
            v35 = *((char *)a1 + 23);
            if (v35 >= 0)
              v36 = *((unsigned __int8 *)a1 + 23);
            else
              v36 = (size_t)a1[1];
            v37 = v36 + 1;
            memset(&__dst, 170, sizeof(__dst));
            if (v36 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v37 >= 0x17)
            {
              v121 = v35;
              v54 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v54 = v37 | 7;
              v55 = v54 + 1;
              v38 = (std::string *)operator new(v54 + 1);
              __dst.__r_.__value_.__l.__size_ = v36 + 1;
              __dst.__r_.__value_.__r.__words[2] = v55 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
              v35 = v121;
            }
            else
            {
              memset(&__dst, 0, sizeof(__dst));
              v38 = &__dst;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v36 + 1;
              if (!v36)
                goto LABEL_100;
            }
            if (v35 >= 0)
              v56 = a1;
            else
              v56 = *a1;
            memmove(v38, v56, v36);
LABEL_100:
            *(_WORD *)((char *)&v38->__r_.__value_.__l.__data_ + v36) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v57 = &v150;
            else
              v57 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v58 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v58 = v150.__r_.__value_.__l.__size_;
            v59 = std::string::append(&__dst, (const std::string::value_type *)v57, v58);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = a4;
            _os_log_error_impl(&dword_1BF566000, v34, OS_LOG_TYPE_ERROR, "%s is not a directory. So, skip to move it with the depth (%d)", (uint8_t *)&buf, 0x12u);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_84:
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_90;
              goto LABEL_91;
            }
LABEL_89:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
LABEL_90:
              operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_91:
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v150.__r_.__value_.__l.__data_);
            v15 += 24;
            if (v15 == v124)
              goto LABEL_118;
          }
        }
        while (1)
        {
          memset(&v150, 170, sizeof(v150));
          if (v15[23] < 0)
          {
            std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
          }
          else
          {
            v67 = *(_OWORD *)v15;
            v150.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
            *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v67;
          }
          memset(&__p, 170, sizeof(__p));
          v68 = *(char *)(a2 + 23);
          if (v68 >= 0)
            v69 = *(unsigned __int8 *)(a2 + 23);
          else
            v69 = *(_QWORD *)(a2 + 8);
          v70 = v69 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v69 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v70 >= 0x17)
          {
            v72 = (v70 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v70 | 7) != 0x17)
              v72 = v70 | 7;
            v73 = v72 + 1;
            p_buf = (std::string *)operator new(v72 + 1);
            buf.__r_.__value_.__l.__size_ = v69 + 1;
            buf.__r_.__value_.__r.__words[2] = v73 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)p_buf;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            p_buf = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v69 + 1;
            if (!v69)
              goto LABEL_148;
          }
          if (v68 >= 0)
            v74 = (const void *)a2;
          else
            v74 = *(const void **)a2;
          memmove(p_buf, v74, v69);
LABEL_148:
          *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v69) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v150;
          else
            v75 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v76 = v150.__r_.__value_.__l.__size_;
          v77 = std::string::append(&buf, (const std::string::value_type *)v75, v76);
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          ctu::fs::get_unique_filename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_156;
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_156;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
LABEL_156:
          v79 = *((char *)a1 + 23);
          if (v79 >= 0)
            v80 = *((unsigned __int8 *)a1 + 23);
          else
            v80 = (size_t)a1[1];
          v81 = v80 + 1;
          memset(&buf, 170, sizeof(buf));
          if (v80 + 1 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v81 >= 0x17)
          {
            v83 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v81 | 7) != 0x17)
              v83 = v81 | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            buf.__r_.__value_.__l.__size_ = v80 + 1;
            buf.__r_.__value_.__r.__words[2] = v84 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            memset(&buf, 0, sizeof(buf));
            v82 = &buf;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v80 + 1;
            if (!v80)
              goto LABEL_170;
          }
          if (v79 >= 0)
            v85 = a1;
          else
            v85 = *a1;
          memmove(v82, v85, v80);
LABEL_170:
          *(_WORD *)((char *)&v82->__r_.__value_.__l.__data_ + v80) = 47;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v86 = &v150;
          else
            v86 = (std::string *)v150.__r_.__value_.__r.__words[0];
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          else
            v87 = v150.__r_.__value_.__l.__size_;
          v88 = std::string::append(&buf, (const std::string::value_type *)v86, v87);
          v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v89;
          v88->__r_.__value_.__l.__size_ = 0;
          v88->__r_.__value_.__r.__words[2] = 0;
          v88->__r_.__value_.__r.__words[0] = 0;
          v90 = ctu::fs::rename();
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__dst.__r_.__value_.__l.__data_);
            if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_178:
              if ((v90 & 1) == 0)
                goto LABEL_193;
              goto LABEL_179;
            }
          }
          else if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_178;
          }
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((v90 & 1) == 0)
          {
LABEL_193:
            {
              GetOsLogContext(void)::sOsLogContext = 0;
              qword_1ED70F6F8 = 0;
              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
            }
            if (GetOsLogContext(void)::onceToken == -1)
            {
              v97 = qword_1ED70F6F8;
              if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
                goto LABEL_243;
LABEL_196:
              v98 = *((char *)a1 + 23);
              if (v98 >= 0)
                v99 = *((unsigned __int8 *)a1 + 23);
              else
                v99 = (size_t)a1[1];
              v100 = v99 + 1;
              memset(&buf, 170, sizeof(buf));
              if (v99 + 1 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              if (v100 >= 0x17)
              {
                v111 = (v100 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v100 | 7) != 0x17)
                  v111 = v100 | 7;
                v112 = v111 + 1;
                v101 = (std::string *)operator new(v111 + 1);
                buf.__r_.__value_.__l.__size_ = v99 + 1;
                buf.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
                buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v101;
              }
              else
              {
                memset(&buf, 0, sizeof(buf));
                v101 = &buf;
                *((_BYTE *)&buf.__r_.__value_.__s + 23) = v99 + 1;
                if (!v99)
                  goto LABEL_230;
              }
              if (v98 >= 0)
                v113 = a1;
              else
                v113 = *a1;
              memmove(v101, v113, v99);
LABEL_230:
              *(_WORD *)((char *)&v101->__r_.__value_.__l.__data_ + v99) = 47;
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v114 = &v150;
              else
                v114 = (std::string *)v150.__r_.__value_.__r.__words[0];
              if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v115 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
              else
                v115 = v150.__r_.__value_.__l.__size_;
              v116 = std::string::append(&buf, (const std::string::value_type *)v114, v115);
              v117 = *(_OWORD *)&v116->__r_.__value_.__l.__data_;
              __dst.__r_.__value_.__r.__words[2] = v116->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v117;
              v116->__r_.__value_.__l.__size_ = 0;
              v116->__r_.__value_.__r.__words[2] = 0;
              v116->__r_.__value_.__r.__words[0] = 0;
              v118 = &__dst;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v118 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              v119 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v119 = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)v145 = 136315394;
              v146 = v118;
              v147 = 2080;
              v148 = v119;
              _os_log_error_impl(&dword_1BF566000, v97, OS_LOG_TYPE_ERROR, "Failed to move %s -> %s", v145, 0x16u);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_241:
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_243;
                goto LABEL_242;
              }
LABEL_221:
              if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_243;
LABEL_242:
              operator delete(buf.__r_.__value_.__l.__data_);
              goto LABEL_243;
            }
            dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
            v97 = qword_1ED70F6F8;
            if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
              goto LABEL_196;
            goto LABEL_243;
          }
LABEL_179:
          {
            GetOsLogContext(void)::sOsLogContext = 0;
            qword_1ED70F6F8 = 0;
            __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
          }
          if (GetOsLogContext(void)::onceToken == -1)
          {
            v92 = qword_1ED70F6F8;
            if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
              goto LABEL_243;
LABEL_182:
            v93 = *((char *)a1 + 23);
            if (v93 >= 0)
              v94 = *((unsigned __int8 *)a1 + 23);
            else
              v94 = (size_t)a1[1];
            v95 = v94 + 1;
            memset(&buf, 170, sizeof(buf));
            if (v94 + 1 > 0x7FFFFFFFFFFFFFF7)
              std::string::__throw_length_error[abi:ne180100]();
            if (v95 >= 0x17)
            {
              v102 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v95 | 7) != 0x17)
                v102 = v95 | 7;
              v103 = v102 + 1;
              v96 = (std::string *)operator new(v102 + 1);
              buf.__r_.__value_.__l.__size_ = v94 + 1;
              buf.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
            }
            else
            {
              memset(&buf, 0, sizeof(buf));
              v96 = &buf;
              *((_BYTE *)&buf.__r_.__value_.__s + 23) = v94 + 1;
              if (!v94)
                goto LABEL_210;
            }
            if (v93 >= 0)
              v104 = a1;
            else
              v104 = *a1;
            memmove(v96, v104, v94);
LABEL_210:
            *(_WORD *)((char *)&v96->__r_.__value_.__l.__data_ + v94) = 47;
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v105 = &v150;
            else
              v105 = (std::string *)v150.__r_.__value_.__r.__words[0];
            if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
            else
              v106 = v150.__r_.__value_.__l.__size_;
            v107 = std::string::append(&buf, (const std::string::value_type *)v105, v106);
            v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
            __dst.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v108;
            v107->__r_.__value_.__l.__size_ = 0;
            v107->__r_.__value_.__r.__words[2] = 0;
            v107->__r_.__value_.__r.__words[0] = 0;
            v109 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v109 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            v110 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)v145 = 136315394;
            v146 = v109;
            v147 = 2080;
            v148 = v110;
            _os_log_impl(&dword_1BF566000, v92, OS_LOG_TYPE_DEFAULT, "Moved %s -> %s", v145, 0x16u);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_241;
            goto LABEL_221;
          }
          dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
          v92 = qword_1ED70F6F8;
          if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
            goto LABEL_182;
LABEL_243:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
LABEL_247:
              operator delete(v150.__r_.__value_.__l.__data_);
          }
          else if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          {
            goto LABEL_247;
          }
          v15 += 24;
          if (v15 == v124)
            goto LABEL_118;
        }
      }
      goto LABEL_118;
    }
  }
  else
  {
LABEL_8:
    std::locale::~locale(&v136);
    if (filtered_files)
      goto LABEL_9;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v63 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v63 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_118;
  }
  v120 = (std::string::size_type)a1;
  if (*((char *)a1 + 23) < 0)
    v120 = (std::string::size_type)*a1;
  LODWORD(v150.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)v150.__r_.__value_.__r.__words + 4) = v120;
  _os_log_error_impl(&dword_1BF566000, v63, OS_LOG_TYPE_ERROR, "Failed to find a content in %s", (uint8_t *)&v150, 0xCu);
LABEL_118:
  if (a3)
    ctu::fs::remove_dir();
  v64 = (void **)v142;
  if (v142)
  {
    v65 = v143;
    v66 = v142;
    if (v143 != (void **)v142)
    {
      do
      {
        if (*((char *)v65 - 1) < 0)
          operator delete(*(v65 - 3));
        v65 -= 3;
      }
      while (v65 != v64);
      v66 = v142;
    }
    v143 = v64;
    operator delete(v66);
  }
}

void sub_1BF65A638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,std::locale a58)
{
  uint64_t v58;

  if (a57 < 0)
    operator delete(__p);
  if (*(char *)(v58 - 105) < 0)
    operator delete(*(void **)(v58 - 128));
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v58 - 216));
  _Unwind_Resume(a1);
}

void util::generateSHA256(const char *a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, unsigned __int8 **a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 v10;
  const char *v11;
  int v12;
  unint64_t v13;
  ssize_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  const char *v17;
  uint8_t *p_c;
  NSObject *v19;
  uint32_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  int *v23;
  char *v24;
  int v25;
  int v26;
  unsigned __int8 v27;
  NSObject *v28;
  int *v29;
  char *v30;
  int v31;
  int v32;
  CC_SHA256_CTX c;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = (unsigned __int8 *)operator new(0x20uLL);
  a4[1] = v8 + 32;
  a4[2] = v8 + 32;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *a4 = v8;
  if (!a2)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v16 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v16 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return;
    }
    LOWORD(c.count[0]) = 0;
    v17 = "dataIn Buffer is NULL";
    p_c = (uint8_t *)&c;
    v19 = v16;
    v20 = 2;
LABEL_20:
    _os_log_error_impl(&dword_1BF566000, v19, OS_LOG_TYPE_ERROR, v17, p_c, v20);
    return;
  }
  v9 = v8;
  *(_QWORD *)&c.wbuf[14] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v10 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&c.wbuf[6] = v10;
  *(_OWORD *)&c.wbuf[10] = v10;
  *(_OWORD *)&c.hash[6] = v10;
  *(_OWORD *)&c.wbuf[2] = v10;
  *(_OWORD *)c.count = v10;
  *(_OWORD *)&c.hash[2] = v10;
  if (!ctu::fs::get_file_size())
    return;
  CC_SHA256_Init(&c);
  v11 = a1;
  if (a1[23] < 0)
    v11 = *(const char **)a1;
  v12 = open(v11, 0);
  if (v12 >= 1)
  {
    v13 = 0;
    while (1)
    {
      v14 = read(v12, a2, a3);
      if (v14 == -1)
        break;
      CC_SHA256_Update(&c, a2, v14);
      v13 += v14;
      if (v13 >= 0xAAAAAAAAAAAAAAAALL)
        goto LABEL_24;
    }
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v28 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      {
LABEL_24:
        CC_SHA256_Final(v9, &c);
        close(v12);
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v28 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
    }
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v29 = __error();
    v30 = strerror(*v29);
    v31 = *__error();
    v32 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v30;
    v38 = 1024;
    v39 = v31;
    v40 = 1024;
    v41 = v32;
    _os_log_error_impl(&dword_1BF566000, v28, OS_LOG_TYPE_ERROR, "Failed to read: %s : %s (%d,0x%x)", buf, 0x22u);
    goto LABEL_24;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v22 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      return;
    goto LABEL_17;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  v22 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
  {
LABEL_17:
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v23 = __error();
    v24 = strerror(*v23);
    v25 = *__error();
    v26 = *__error();
    *(_DWORD *)buf = 136315906;
    v35 = a1;
    v36 = 2080;
    v37 = v24;
    v38 = 1024;
    v39 = v25;
    v40 = 1024;
    v41 = v26;
    v17 = "Failed to open: %s : %s (%d, 0x%x)";
    p_c = buf;
    v19 = v22;
    v20 = 34;
    goto LABEL_20;
  }
}

void sub_1BF65AC90(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BF65ACA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BF65ACC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BF65ACD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1BF65ACF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

BOOL util::markPurgeableFile(uint64_t *a1)
{
  uint64_t *v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  uint64_t v6;
  _BOOL8 result;
  int *v8;
  char *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int *v15;
  char *v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t *v19;
  __int16 v20;
  _BYTE v21[14];
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v24 = *MEMORY[0x1E0C80C00];
  v17 = 65541;
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v2 = open((const char *)a1, 0);
    if ((v2 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_11:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v14 = qword_1ED70F6F8;
      result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v14 = qword_1ED70F6F8;
      result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
    }
    if (*((char *)v1 + 23) < 0)
      v1 = (uint64_t *)*v1;
    v15 = __error();
    v16 = strerror(*v15);
    *(_DWORD *)buf = 136315394;
    v19 = v1;
    v20 = 2080;
    *(_QWORD *)v21 = v16;
    v10 = "Failed to open %s : %s";
    v11 = v14;
    v12 = 22;
    goto LABEL_17;
  }
  v2 = open((const char *)*a1, 0);
  if (v2 < 0)
    goto LABEL_11;
LABEL_3:
  v3 = v2;
  v4 = ffsctl(v2, 0xC0084A44uLL, &v17, 0);
  close(v3);
  if (!v4)
    return 1;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (result)
    {
LABEL_7:
      if (*((char *)v1 + 23) < 0)
        v1 = (uint64_t *)*v1;
      v8 = __error();
      v9 = strerror(*v8);
      *(_DWORD *)buf = 136315906;
      v19 = v1;
      v20 = 1024;
      *(_DWORD *)v21 = v4;
      *(_WORD *)&v21[4] = 2080;
      *(_QWORD *)&v21[6] = v9;
      v22 = 2048;
      v23 = v17;
      v10 = "Failed to mark %s as purgeable %d (%s) (flags 0x%llx)";
      v11 = v6;
      v12 = 38;
LABEL_17:
      _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      return 0;
    }
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (result)
      goto LABEL_7;
  }
  return result;
}

BOOL util::checkLogFileAge(uint64_t a1, int64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  std::sub_match<const char *> *v6;
  std::sub_match<std::__wrap_iter<const char *>> *v7;
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  _BOOL8 v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  char *v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  char *v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  char *v58;
  __int128 *v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  char *v71;
  __int128 *v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  _BYTE *v82;
  _BYTE *v83;
  char *v84;
  __int128 *v85;
  _OWORD *v86;
  unint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  time_t v92;
  std::string v93;
  _BYTE v94[40];
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  tm __p;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v95 = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v99 = v4;
  v96 = 0;
  v98 = 0uLL;
  LOBYTE(v99) = 0;
  BYTE8(v99) = 0;
  v100 = 0;
  memset(v94, 0, sizeof(v94));
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (std::sub_match<const char *> *)a1;
  else
    v6 = *(std::sub_match<const char *> **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v7 = (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v6 + v5);
  v103 = 0xAAAAAAAAAAAAAA00;
  __p.tm_gmtoff = 0xAAAAAAAAAAAAAAAALL;
  v106 = v4;
  __p.tm_zone = 0;
  v102 = 0;
  v104 = 0;
  v105 = 0;
  LOBYTE(v106) = 0;
  BYTE8(v106) = 0;
  v107 = 0;
  memset(&__p, 0, 41);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a3, v6, (std::sub_match<const char *> *)((char *)v6 + v5), (std::vector<std::csub_match> *)&__p, 4160);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v94, (uint64_t)v6, v7, (uint64_t *)&__p.tm_sec, 0);
  if (*(_QWORD *)&__p.tm_sec)
  {
    *(_QWORD *)&__p.tm_hour = *(_QWORD *)&__p.tm_sec;
    operator delete(*(void **)&__p.tm_sec);
  }
  if ((_BYTE)v99)
    v9 = 0;
  else
    v9 = v8;
  if (v9 != 1)
  {
    v21 = 0;
    v22 = *(void **)v94;
    if (!*(_QWORD *)v94)
      return v21;
LABEL_23:
    *(_QWORD *)&v94[8] = v22;
    operator delete(v22);
    return v21;
  }
  memset(&__p, 0, sizeof(__p));
  v10 = *(_QWORD *)v94;
  if (!*(_BYTE *)(*(_QWORD *)v94 + 40))
  {
    memset(&v93, 0, sizeof(v93));
    goto LABEL_33;
  }
  v12 = *(_QWORD *)(*(_QWORD *)v94 + 24);
  v11 = *(char **)(*(_QWORD *)v94 + 32);
  v13 = (unint64_t)&v11[-v12];
  if ((unint64_t)&v11[-v12] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v13 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v11 - v12;
    v14 = &v93;
    if ((char *)v12 != v11)
      goto LABEL_16;
LABEL_29:
    *v14 = 0;
    goto LABEL_33;
  }
  v24 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v13 | 7) != 0x17)
    v24 = v13 | 7;
  v25 = v24 + 1;
  v14 = operator new(v24 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[-v12];
  v93.__r_.__value_.__r.__words[2] = v25 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
  if ((char *)v12 == v11)
    goto LABEL_29;
LABEL_16:
  if (v13 < 0x20 || (unint64_t)&v14[-v12] < 0x20)
  {
    v15 = v14;
    v16 = (char *)v12;
  }
  else
  {
    v15 = &v14[v13 & 0xFFFFFFFFFFFFFFE0];
    v16 = (char *)(v12 + (v13 & 0xFFFFFFFFFFFFFFE0));
    v17 = (__int128 *)(v12 + 16);
    v18 = v14 + 16;
    v19 = v13 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v20 = *v17;
      *(v18 - 1) = *(v17 - 1);
      *v18 = v20;
      v17 += 2;
      v18 += 2;
      v19 -= 32;
    }
    while (v19);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_32;
  }
  do
  {
    v26 = *v16++;
    *v15++ = v26;
  }
  while (v16 != v11);
LABEL_32:
  *v15 = 0;
LABEL_33:
  util::convert<int>(&v93, &__p.tm_year, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __p.tm_year -= 1900;
    if (*(_BYTE *)(v10 + 64))
      goto LABEL_35;
LABEL_45:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_53;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_year -= 1900;
  if (!*(_BYTE *)(v10 + 64))
    goto LABEL_45;
LABEL_35:
  v28 = *(_QWORD *)(v10 + 48);
  v27 = *(char **)(v10 + 56);
  v29 = (unint64_t)&v27[-v28];
  if ((unint64_t)&v27[-v28] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v27 - v28;
    v30 = &v93;
    if ((char *)v28 != v27)
      goto LABEL_38;
LABEL_49:
    *v30 = 0;
    goto LABEL_53;
  }
  v37 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v37 = v29 | 7;
  v38 = v37 + 1;
  v30 = operator new(v37 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v27[-v28];
  v93.__r_.__value_.__r.__words[2] = v38 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  if ((char *)v28 == v27)
    goto LABEL_49;
LABEL_38:
  if (v29 < 0x20 || (unint64_t)&v30[-v28] < 0x20)
  {
    v31 = v30;
    v32 = (char *)v28;
  }
  else
  {
    v31 = &v30[v29 & 0xFFFFFFFFFFFFFFE0];
    v32 = (char *)(v28 + (v29 & 0xFFFFFFFFFFFFFFE0));
    v33 = (__int128 *)(v28 + 16);
    v34 = v30 + 16;
    v35 = v29 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v36 = *v33;
      *(v34 - 1) = *(v33 - 1);
      *v34 = v36;
      v33 += 2;
      v34 += 2;
      v35 -= 32;
    }
    while (v35);
    if (v29 == (v29 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_52;
  }
  do
  {
    v39 = *v32++;
    *v31++ = v39;
  }
  while (v32 != v27);
LABEL_52:
  *v31 = 0;
LABEL_53:
  util::convert<int>(&v93, &__p.tm_mon, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    --__p.tm_mon;
    if (*(_BYTE *)(v10 + 88))
      goto LABEL_55;
LABEL_65:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_73;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  --__p.tm_mon;
  if (!*(_BYTE *)(v10 + 88))
    goto LABEL_65;
LABEL_55:
  v41 = *(_QWORD *)(v10 + 72);
  v40 = *(char **)(v10 + 80);
  v42 = (unint64_t)&v40[-v41];
  if ((unint64_t)&v40[-v41] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v42 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v40 - v41;
    v43 = &v93;
    if ((char *)v41 != v40)
      goto LABEL_58;
LABEL_69:
    *v43 = 0;
    goto LABEL_73;
  }
  v50 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v42 | 7) != 0x17)
    v50 = v42 | 7;
  v51 = v50 + 1;
  v43 = operator new(v50 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v40[-v41];
  v93.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
  if ((char *)v41 == v40)
    goto LABEL_69;
LABEL_58:
  if (v42 < 0x20 || (unint64_t)&v43[-v41] < 0x20)
  {
    v44 = v43;
    v45 = (char *)v41;
  }
  else
  {
    v44 = &v43[v42 & 0xFFFFFFFFFFFFFFE0];
    v45 = (char *)(v41 + (v42 & 0xFFFFFFFFFFFFFFE0));
    v46 = (__int128 *)(v41 + 16);
    v47 = v43 + 16;
    v48 = v42 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v49 = *v46;
      *(v47 - 1) = *(v46 - 1);
      *v47 = v49;
      v46 += 2;
      v47 += 2;
      v48 -= 32;
    }
    while (v48);
    if (v42 == (v42 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_72;
  }
  do
  {
    v52 = *v45++;
    *v44++ = v52;
  }
  while (v45 != v40);
LABEL_72:
  *v44 = 0;
LABEL_73:
  util::convert<int>(&v93, (_DWORD *)((unint64_t)&__p | 0xC), 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 112))
      goto LABEL_75;
LABEL_85:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_93;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 112))
    goto LABEL_85;
LABEL_75:
  v54 = *(_QWORD *)(v10 + 96);
  v53 = *(char **)(v10 + 104);
  v55 = (unint64_t)&v53[-v54];
  if ((unint64_t)&v53[-v54] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v55 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v53 - v54;
    v56 = &v93;
    if ((char *)v54 != v53)
      goto LABEL_78;
LABEL_89:
    *v56 = 0;
    goto LABEL_93;
  }
  v63 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v55 | 7) != 0x17)
    v63 = v55 | 7;
  v64 = v63 + 1;
  v56 = operator new(v63 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v53[-v54];
  v93.__r_.__value_.__r.__words[2] = v64 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
  if ((char *)v54 == v53)
    goto LABEL_89;
LABEL_78:
  if (v55 < 0x20 || (unint64_t)&v56[-v54] < 0x20)
  {
    v57 = v56;
    v58 = (char *)v54;
  }
  else
  {
    v57 = &v56[v55 & 0xFFFFFFFFFFFFFFE0];
    v58 = (char *)(v54 + (v55 & 0xFFFFFFFFFFFFFFE0));
    v59 = (__int128 *)(v54 + 16);
    v60 = v56 + 16;
    v61 = v55 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v62 = *v59;
      *(v60 - 1) = *(v59 - 1);
      *v60 = v62;
      v59 += 2;
      v60 += 2;
      v61 -= 32;
    }
    while (v61);
    if (v55 == (v55 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_92;
  }
  do
  {
    v65 = *v58++;
    *v57++ = v65;
  }
  while (v58 != v53);
LABEL_92:
  *v57 = 0;
LABEL_93:
  util::convert<int>(&v93, &__p.tm_hour, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 136))
      goto LABEL_95;
LABEL_105:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_113;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 136))
    goto LABEL_105;
LABEL_95:
  v67 = *(_QWORD *)(v10 + 120);
  v66 = *(char **)(v10 + 128);
  v68 = (unint64_t)&v66[-v67];
  if ((unint64_t)&v66[-v67] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v68 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v66 - v67;
    v69 = &v93;
    if ((char *)v67 != v66)
      goto LABEL_98;
LABEL_109:
    *v69 = 0;
    goto LABEL_113;
  }
  v76 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v68 | 7) != 0x17)
    v76 = v68 | 7;
  v77 = v76 + 1;
  v69 = operator new(v76 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[-v67];
  v93.__r_.__value_.__r.__words[2] = v77 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v69;
  if ((char *)v67 == v66)
    goto LABEL_109;
LABEL_98:
  if (v68 < 0x20 || (unint64_t)&v69[-v67] < 0x20)
  {
    v70 = v69;
    v71 = (char *)v67;
  }
  else
  {
    v70 = &v69[v68 & 0xFFFFFFFFFFFFFFE0];
    v71 = (char *)(v67 + (v68 & 0xFFFFFFFFFFFFFFE0));
    v72 = (__int128 *)(v67 + 16);
    v73 = v69 + 16;
    v74 = v68 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v75 = *v72;
      *(v73 - 1) = *(v72 - 1);
      *v73 = v75;
      v72 += 2;
      v73 += 2;
      v74 -= 32;
    }
    while (v74);
    if (v68 == (v68 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_112;
  }
  do
  {
    v78 = *v71++;
    *v70++ = v78;
  }
  while (v71 != v66);
LABEL_112:
  *v70 = 0;
LABEL_113:
  util::convert<int>(&v93, &__p.tm_min, 10);
  if ((SHIBYTE(v93.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v10 + 160))
      goto LABEL_115;
LABEL_125:
    memset(&v93, 0, sizeof(v93));
    goto LABEL_133;
  }
  operator delete(v93.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v10 + 160))
    goto LABEL_125;
LABEL_115:
  v80 = *(_QWORD *)(v10 + 144);
  v79 = *(char **)(v10 + 152);
  v81 = (unint64_t)&v79[-v80];
  if ((unint64_t)&v79[-v80] > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v81 <= 0x16)
  {
    *((_BYTE *)&v93.__r_.__value_.__s + 23) = (_BYTE)v79 - v80;
    v82 = &v93;
    if ((char *)v80 != v79)
      goto LABEL_118;
LABEL_129:
    *v82 = 0;
    goto LABEL_133;
  }
  v89 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v81 | 7) != 0x17)
    v89 = v81 | 7;
  v90 = v89 + 1;
  v82 = operator new(v89 + 1);
  v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79[-v80];
  v93.__r_.__value_.__r.__words[2] = v90 | 0x8000000000000000;
  v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
  if ((char *)v80 == v79)
    goto LABEL_129;
LABEL_118:
  if (v81 < 0x20 || (unint64_t)&v82[-v80] < 0x20)
  {
    v83 = v82;
    v84 = (char *)v80;
  }
  else
  {
    v83 = &v82[v81 & 0xFFFFFFFFFFFFFFE0];
    v84 = (char *)(v80 + (v81 & 0xFFFFFFFFFFFFFFE0));
    v85 = (__int128 *)(v80 + 16);
    v86 = v82 + 16;
    v87 = v81 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v88 = *v85;
      *(v86 - 1) = *(v85 - 1);
      *v86 = v88;
      v85 += 2;
      v86 += 2;
      v87 -= 32;
    }
    while (v87);
    if (v81 == (v81 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_132;
  }
  do
  {
    v91 = *v84++;
    *v83++ = v91;
  }
  while (v84 != v79);
LABEL_132:
  *v83 = 0;
LABEL_133:
  util::convert<int>(&v93, &__p, 10);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  __p.tm_isdst = -1;
  v92 = mktime(&__p);
  v93.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  v93.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday((timeval *)&v93, 0);
  v21 = (int64_t)(v93.__r_.__value_.__r.__words[0] - v92) > a2;
  v22 = *(void **)v94;
  if (*(_QWORD *)v94)
    goto LABEL_23;
  return v21;
}

void sub_1BF65B85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void util::findBasebandLogInfoFile(const void **a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v3;
  __int128 v5;
  int v6;
  size_t v7;
  int v8;
  size_t size;
  unint64_t v10;
  void **v11;
  const void *v12;
  char *v13;
  std::string *v14;
  timespec v15;
  const char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  DIR *v21;
  DIR *v22;
  dirent *v23;
  _DWORD *v24;
  void **v28;
  void *v29;
  _DWORD *v30;
  char *v34;
  uint64_t v35;
  int v36;
  int v38;
  size_t v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::string *v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 *v47;
  void *__dst[3];
  std::string v49;
  stat v50;

  *a3 = 0;
  a3[1] = 0;
  v46 = a3;
  a3[2] = 0;
  v3 = *a2;
  v47 = a2[1];
  if (v3 == v47)
    return;
  while (1)
  {
    memset(&v49, 170, sizeof(v49));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
    }
    else
    {
      v5 = *v3;
      v49.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v5;
    }
    v6 = *((char *)a1 + 23);
    if (v6 >= 0)
      v7 = *((unsigned __int8 *)a1 + 23);
    else
      v7 = (size_t)a1[1];
    v8 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      size = v49.__r_.__value_.__l.__size_;
    v10 = size + v7;
    memset(__dst, 170, sizeof(__dst));
    if (size + v7 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v10 <= 0x16)
    {
      memset(__dst, 0, sizeof(__dst));
      v11 = __dst;
      HIBYTE(__dst[2]) = size + v7;
      if (!v7)
        goto LABEL_20;
LABEL_16:
      if (v6 >= 0)
        v12 = a1;
      else
        v12 = *a1;
      memmove(v11, v12, v7);
      goto LABEL_20;
    }
    v18 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v18 = v10 | 7;
    v19 = v18 + 1;
    v11 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)(size + v7);
    __dst[2] = (void *)(v19 | 0x8000000000000000);
    __dst[0] = v11;
    if (v7)
      goto LABEL_16;
LABEL_20:
    v13 = (char *)v11 + v7;
    if (size)
    {
      if (v8 >= 0)
        v14 = &v49;
      else
        v14 = (std::string *)v49.__r_.__value_.__r.__words[0];
      memmove(v13, v14, size);
    }
    v13[size] = 0;
    v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    v15.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
    *(timespec *)&v50.st_blksize = v15;
    *(timespec *)v50.st_qspare = v15;
    v50.st_birthtimespec = v15;
    *(timespec *)&v50.st_size = v15;
    v50.st_mtimespec = v15;
    v50.st_ctimespec = v15;
    *(timespec *)&v50.st_uid = v15;
    v50.st_atimespec = v15;
    *(timespec *)&v50.st_dev = v15;
    if (SHIBYTE(__dst[2]) >= 0)
      v16 = (const char *)__dst;
    else
      v16 = (const char *)__dst[0];
    if (stat(v16, &v50)
      || (SHIBYTE(__dst[2]) >= 0 ? (v20 = (const char *)__dst) : (v20 = (const char *)__dst[0]),
          v21 = opendir(v20),
          (v22 = v21) == 0))
    {
      v17 = HIBYTE(__dst[2]);
      goto LABEL_30;
    }
    v23 = readdir(v21);
    closedir(v22);
    v17 = HIBYTE(__dst[2]);
    if (v23)
      break;
LABEL_30:
    if (v17 < 0)
    {
      operator delete(__dst[0]);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
LABEL_59:
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    else if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    {
      goto LABEL_59;
    }
    v3 = (__int128 *)((char *)v3 + 24);
    if (v3 == v47)
      return;
  }
  if ((HIBYTE(__dst[2]) & 0x80) == 0)
  {
    if (HIBYTE(__dst[2]) <= 4u)
      goto LABEL_99;
    v24 = (_DWORD *)((char *)__dst + HIBYTE(__dst[2]) - 5);
    if (*v24 == 1885626669 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 108)
      goto LABEL_79;
    if (*v24 == 1935962413 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 115)
      goto LABEL_79;
    if (*v24 == 1634296877 && *((_BYTE *)__dst + HIBYTE(__dst[2]) - 1) == 103)
      goto LABEL_79;
    if (HIBYTE(__dst[2]) < 9u)
      goto LABEL_99;
    v28 = __dst;
    v29 = (void *)HIBYTE(__dst[2]);
    goto LABEL_74;
  }
  v29 = __dst[1];
  if (__dst[1] < (void *)5)
    goto LABEL_99;
  v28 = (void **)__dst[0];
  v30 = (char *)__dst[1] + (unint64_t)__dst[0] - 5;
  if ((*v30 != 1885626669 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 108)
    && (*v30 != 1935962413 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 115)
    && (*v30 != 1634296877 || *((_BYTE *)__dst[1] + (unint64_t)__dst[0] - 1) != 103))
  {
    if (__dst[1] < (void *)9)
LABEL_99:
      std::string::__throw_out_of_range[abi:ne180100]();
LABEL_74:
    v34 = (char *)v28 + (_QWORD)v29;
    v35 = *(_QWORD *)(v34 - 9);
    v36 = *(v34 - 1);
    if (v35 == 0x636172742D62622DLL && v36 == 101)
      goto LABEL_79;
    goto LABEL_30;
  }
LABEL_79:
  v38 = SHIBYTE(v49.__r_.__value_.__r.__words[2]);
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    v39 = v49.__r_.__value_.__l.__size_;
  v40 = v39 + 9;
  memset(&v50, 170, 24);
  if (v39 + 9 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v40 >= 0x17)
  {
    v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v40 | 7) != 0x17)
      v42 = v40 | 7;
    v43 = v42 + 1;
    v41 = operator new(v42 + 1);
    v50.st_ino = v39 + 9;
    *(_QWORD *)&v50.st_uid = v43 | 0x8000000000000000;
    *(_QWORD *)&v50.st_dev = v41;
  }
  else
  {
    memset(&v50, 0, 24);
    v41 = &v50;
    HIBYTE(v50.st_gid) = v39 + 9;
    if (!v39)
      goto LABEL_93;
  }
  if (v38 >= 0)
    v44 = &v49;
  else
    v44 = (std::string *)v49.__r_.__value_.__r.__words[0];
  memmove(v41, v44, v39);
LABEL_93:
  strcpy((char *)v41 + v39, "/info.txt");
  v45 = v46;
  *v46 = *(_OWORD *)&v50.st_dev;
  *((_QWORD *)v45 + 2) = *(_QWORD *)&v50.st_uid;
  if ((v17 & 0x80) == 0)
  {
    if ((v38 & 0x80) == 0)
      return;
LABEL_97:
    operator delete(v49.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__dst[0]);
  if ((*((_BYTE *)&v49.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_97;
}

void sub_1BF65BD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  _Unwind_Resume(exception_object);
}

BOOL util::isDumpForSysdiagnose(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  int v3;
  size_t v4;
  unint64_t v5;
  const void **v6;
  std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  const void **v12;
  std::string *v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _BOOL8 v21;
  void **v22;
  void **v23;
  void *v24;
  int v25;
  size_t size;
  int v27;
  size_t v28;
  unint64_t v29;
  void **v30;
  const void *v31;
  char *v32;
  std::string *v33;
  void **v34;
  uint64_t v35;
  int v36;
  void *v37;
  char *v38;
  void **v39;
  char *v40;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  NSObject *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void **v55;
  void **v56;
  void *v57;
  std::string *v59;
  void *v60;
  void **v61;
  uint64_t v62;
  std::string v63;
  std::locale v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::string v70;
  std::string v71;
  _BYTE v72[48];
  __int128 v73;
  void *v74;
  void **v75;
  uint64_t v76;
  void *__dst[4];
  void *__p[76];

  __p[73] = *(void **)MEMORY[0x1E0C80C00];
  v74 = 0;
  v75 = 0;
  v76 = 0;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v72[32] = v2;
  v73 = v2;
  *(_OWORD *)v72 = v2;
  *(_OWORD *)&v72[16] = v2;
  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = v4 + 2;
  memset(&v71, 170, sizeof(v71));
  if (v4 + 2 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (const void **)a2;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v11 = operator new(v9 + 1);
    v71.__r_.__value_.__l.__size_ = v4 + 2;
    v71.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    *v11 = 10798;
    v8 = (std::string::value_type *)(v11 + 1);
  }
  else
  {
    v71.__r_.__value_.__r.__words[2] = 0;
    *((_BYTE *)&v71.__r_.__value_.__s + 23) = v4 + 2;
    v8 = &v71.__r_.__value_.__s.__data_[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = 0x2A2EuLL;
    if (!v4)
      goto LABEL_15;
  }
  if (v3 >= 0)
    v12 = v6;
  else
    v12 = (const void **)*v6;
  memmove(v8, v12, v4);
LABEL_15:
  v8[v4] = 0;
  v13 = std::string::append(&v71, ".*", 2uLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p[2] = (void *)v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v72, (uint64_t)__p, 0);
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v71.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_20:
    operator delete(v71.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_20;
LABEL_17:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_18:
    v70 = *(std::string *)a1;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_22:
  std::locale::locale(&v64, (const std::locale *)v72);
  v65 = *(_OWORD *)&v72[8];
  v66 = *(_OWORD *)&v72[24];
  v67 = *(_QWORD *)&v72[40];
  v68 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v15 = (unint64_t *)(v73 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v69 = *((_QWORD *)&v73 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)&v70, (uint64_t)&v64, (uint64_t)&v74, 0);
  v18 = v68;
  if (!v68)
    goto LABEL_29;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_30:
      if (FilteredFiles)
        goto LABEL_31;
LABEL_35:
      v21 = 0;
      goto LABEL_116;
    }
  }
  else
  {
LABEL_29:
    std::locale::~locale(&v64);
    if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_30;
  }
  operator delete(v70.__r_.__value_.__l.__data_);
  if (!FilteredFiles)
    goto LABEL_35;
LABEL_31:
  memset(&v71, 170, sizeof(v71));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v63, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v63 = *(std::string *)a1;
  v60 = 0;
  v61 = 0;
  v62 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v60, (uint64_t)v74, (uint64_t)v75, 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - (_BYTE *)v74) >> 3));
  util::findBasebandLogInfoFile((const void **)&v63.__r_.__value_.__l.__data_, (__int128 **)&v60, &v71);
  v22 = (void **)v60;
  if (v60)
  {
    v23 = v61;
    v24 = v60;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v23 - 1) < 0)
          operator delete(*(v23 - 3));
        v23 -= 3;
      }
      while (v23 != v22);
      v24 = v60;
    }
    v61 = v22;
    operator delete(v24);
  }
  if ((SHIBYTE(v63.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v25 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      size = v71.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_50;
LABEL_97:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v47 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v47 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
    }
    if (*((char *)v6 + 23) < 0)
      v6 = (const void **)*v6;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v6;
    _os_log_impl(&dword_1BF566000, v47, OS_LOG_TYPE_DEFAULT, "No baseband info file found for %s", (uint8_t *)__p, 0xCu);
LABEL_103:
    v21 = 0;
    if ((v25 & 0x80) != 0)
      goto LABEL_115;
    goto LABEL_116;
  }
  operator delete(v63.__r_.__value_.__l.__data_);
  v25 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    size = v71.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_97;
LABEL_50:
  memset(__p, 170, 0x240uLL);
  v27 = *(char *)(a1 + 23);
  if (v27 >= 0)
    v28 = *(unsigned __int8 *)(a1 + 23);
  else
    v28 = *(_QWORD *)(a1 + 8);
  v29 = v28 + size;
  memset(__dst, 170, 24);
  if (v28 + size > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 <= 0x16)
  {
    memset(__dst, 0, 24);
    v30 = __dst;
    HIBYTE(__dst[2]) = v28 + size;
    if (!v28)
      goto LABEL_60;
    goto LABEL_56;
  }
  v48 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v29 | 7) != 0x17)
    v48 = v29 | 7;
  v49 = v48 + 1;
  v30 = (void **)operator new(v48 + 1);
  __dst[1] = (void *)(v28 + size);
  __dst[2] = (void *)(v49 | 0x8000000000000000);
  __dst[0] = v30;
  if (v28)
  {
LABEL_56:
    if (v27 >= 0)
      v31 = (const void *)a1;
    else
      v31 = *(const void **)a1;
    memmove(v30, v31, v28);
  }
LABEL_60:
  v32 = (char *)v30 + v28;
  if (v25 >= 0)
    v33 = &v71;
  else
    v33 = (std::string *)v71.__r_.__value_.__r.__words[0];
  memmove(v32, v33, size);
  v32[size] = 0;
  std::ifstream::basic_ifstream(__p);
  if (SHIBYTE(__dst[2]) < 0)
  {
    operator delete(__dst[0]);
    if (__p[17])
      goto LABEL_65;
LABEL_110:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v51 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      {
LABEL_113:
        v21 = 0;
        goto LABEL_114;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v51 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        goto LABEL_113;
    }
    v59 = (std::string *)v71.__r_.__value_.__r.__words[0];
    if (v25 >= 0)
      v59 = &v71;
    LODWORD(__dst[0]) = 136315138;
    *(void **)((char *)__dst + 4) = v59;
    _os_log_error_impl(&dword_1BF566000, v51, OS_LOG_TYPE_ERROR, "Failed to open info file: %s", (uint8_t *)__dst, 0xCu);
    goto LABEL_113;
  }
  if (!__p[17])
    goto LABEL_110;
LABEL_65:
  std::istream::seekg();
  memset(__dst, 170, 24);
  v34 = __dst;
  support::fs::readCurrentLine(__p, __dst);
  v35 = HIBYTE(__dst[2]);
  v36 = SHIBYTE(__dst[2]);
  v37 = __dst[0];
  if (SHIBYTE(__dst[2]) < 0)
  {
    v35 = (uint64_t)__dst[1];
    v34 = (void **)__dst[0];
  }
  v38 = (char *)v34 + v35;
  if (v35 >= 35)
  {
    v39 = v34;
    do
    {
      v40 = (char *)memchr(v39, 98, v35 - 34);
      if (!v40)
        break;
      if (*(_QWORD *)v40 == 0x6320676F6C206262
        && *((_QWORD *)v40 + 1) == 0x6F697463656C6C6FLL
        && *((_QWORD *)v40 + 2) == 0x20726F66202D206ELL
        && *((_QWORD *)v40 + 3) == 0x6E67616964737973
        && *(_QWORD *)(v40 + 27) == 0x65736F6E67616964)
      {
        goto LABEL_85;
      }
      v39 = (void **)(v40 + 1);
      v35 = v38 - (char *)v39;
    }
    while (v38 - (char *)v39 > 34);
  }
  v40 = v38;
LABEL_85:
  v21 = v40 != v38 && v40 - (char *)v34 != -1;
  if (v36 < 0)
    operator delete(v37);
LABEL_114:
  __p[0] = *(void **)MEMORY[0x1E0DE4F40];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3B8C184](&__p[2]);
  std::istream::~istream();
  MEMORY[0x1C3B8C364](&__p[53]);
  if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_115:
    operator delete(v71.__r_.__value_.__l.__data_);
LABEL_116:
  v52 = (std::__shared_weak_count *)v73;
  if ((_QWORD)v73)
  {
    v53 = (unint64_t *)(v73 + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  std::locale::~locale((std::locale *)v72);
  v55 = (void **)v74;
  if (v74)
  {
    v56 = v75;
    v57 = v74;
    if (v75 != v74)
    {
      do
      {
        if (*((char *)v56 - 1) < 0)
          operator delete(*(v56 - 3));
        v56 -= 3;
      }
      while (v56 != v55);
      v57 = v74;
    }
    v75 = v55;
    operator delete(v57);
  }
  return v21;
}

void sub_1BF65C61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a31);
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

void sub_1BF65C67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::locale a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43)
{
  std::vector<std::string>::~vector[abi:ne180100](&a10);
  if (a18 < 0)
    operator delete(a13);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a34);
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1BF65C6A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a17);
  if (a30 < 0)
    JUMPOUT(0x1BF65C6B8);
  JUMPOUT(0x1BF65C6BCLL);
}

void sub_1BF65C6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
  {
    operator delete(__p);
    if (a33 < 0)
    {
LABEL_5:
      operator delete(a28);
      std::vector<std::string>::~vector[abi:ne180100](&a43);
      _Unwind_Resume(a1);
    }
  }
  else if (a33 < 0)
  {
    goto LABEL_5;
  }
  std::vector<std::string>::~vector[abi:ne180100](&a43);
  _Unwind_Resume(a1);
}

void sub_1BF65C730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::vector<std::string>::~vector[abi:ne180100](&a40);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1C3B8C178](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1BF65C824(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1C3B8C364](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1C3B8C184](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1C3B8C364](a1 + 53);
  return a1;
}

void util::findLastLogDumpTimestamp(util *this@<X0>, const char *__s@<X1>, const char *a3@<X2>, int a4@<W3>, char *a5@<X4>, std::string *a6@<X8>)
{
  unsigned int v8;
  std::string *v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 FilteredFiles;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  const void **v34;
  __int128 v35;
  int64_t size;
  std::string::size_type v37;
  int v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  int64_t v42;
  __int128 v43;
  std::string::size_type v44;
  std::sub_match<const char *> *v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  _BYTE *p_end_cap;
  std::vector<std::ssub_match>::pointer begin;
  std::__wrap_iter<const char *>::iterator_type i;
  const char **p_i;
  const char *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 *v56;
  const char *v57;
  __int128 *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int v65;
  std::sub_match<std::__wrap_iter<const char *>> *v66;
  char *v67;
  int v68;
  std::string *v69;
  int64_t v70;
  char *v71;
  char *v72;
  char *v73;
  int v74;
  std::string *v75;
  int64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  size_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  _BOOL4 isDumpForSysdiagnose;
  unsigned __int8 v88;
  NSObject *v89;
  std::string *v90;
  char v91;
  char v92;
  int64_t v93;
  std::string *v94;
  size_t v95;
  unint64_t *v96;
  unint64_t v97;
  _BOOL4 v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  const void **v108;
  const void **v109;
  const void **v110;
  unsigned int v111;
  char *v113;
  const void **v115;
  std::string *v116;
  BOOL v117;
  std::locale v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  uint64_t v123;
  std::string v124;
  std::string v125;
  void *v126[2];
  unint64_t v127;
  std::vector<std::ssub_match> v128[2];
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  std::string v136;
  std::string v137;
  std::locale v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  std::__shared_weak_count *v142;
  uint64_t v143;
  void *__p[2];
  unint64_t v145;
  _BYTE v146[48];
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  void *v150[3];
  const void **v151;
  const void **v152;
  uint64_t v153;
  __int128 __dst;
  _BYTE v155[32];
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;

  v8 = a3;
  v10 = a6;
  v163 = *MEMORY[0x1E0C80C00];
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  memset(v150, 170, sizeof(v150));
  v11 = strlen(__s);
  v116 = v10;
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    *(_QWORD *)v155 = v15 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  v155[7] = v11;
  p_dst = &__dst;
  if (v11)
LABEL_8:
    memcpy(p_dst, __s, v12);
  *((_BYTE *)p_dst + v12) = 0;
  v16 = std::string::append((std::string *)&__dst, ".*", 2uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v150[2] = (void *)v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)v150 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if ((v155[7] & 0x80000000) != 0)
    operator delete((void *)__dst);
  *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v18;
  v149 = v18;
  *(_OWORD *)v148 = v18;
  *(_OWORD *)&v148[16] = v18;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)v150, 0);
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v146[32] = v19;
  v147 = v19;
  *(_OWORD *)v146 = v19;
  *(_OWORD *)&v146[16] = v19;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)v146, "(\\d{4})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{2})-(\\d{3})", 0);
  v20 = strlen((const char *)this);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = (void *)v20;
  v117 = a5 == 0;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    v145 = v24 | 0x8000000000000000;
    __p[0] = v22;
    __p[1] = v21;
    goto LABEL_18;
  }
  HIBYTE(v145) = v20;
  v22 = __p;
  if (v20)
LABEL_18:
    memcpy(v22, this, (size_t)v21);
  *((_BYTE *)v21 + (_QWORD)v22) = 0;
  std::locale::locale(&v138, (const std::locale *)v148);
  v139 = *(_OWORD *)&v148[8];
  v140 = *(_OWORD *)&v148[24];
  v141 = *(_QWORD *)&v148[40];
  v142 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v25 = (unint64_t *)(v149 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v143 = *((_QWORD *)&v149 + 1);
  FilteredFiles = support::fs::getFilteredFiles((const char *)__p, (uint64_t)&v138, (uint64_t)&v151, 0);
  v28 = v142;
  if (!v142)
    goto LABEL_26;
  p_shared_owners = (unint64_t *)&v142->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
    {
LABEL_27:
      if (!FilteredFiles)
        goto LABEL_176;
      goto LABEL_31;
    }
  }
  else
  {
LABEL_26:
    std::locale::~locale(&v138);
    if ((SHIBYTE(v145) & 0x80000000) == 0)
      goto LABEL_27;
  }
  operator delete(__p[0]);
  if (!FilteredFiles)
    goto LABEL_176;
LABEL_31:
  v32 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v152 - v151));
  if (v152 == v151)
    v33 = 0;
  else
    v33 = v32;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>((uint64_t)v151, v152, v33, 1, v31);
  memset(&v137, 0, sizeof(v137));
  v34 = v151;
  v115 = v152;
  if (v151 == v152)
  {
LABEL_176:
    if (!v8)
      goto LABEL_196;
LABEL_177:
    if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v124, v10->__r_.__value_.__l.__data_, v10->__r_.__value_.__l.__size_);
    else
      v124 = *v10;
    std::locale::locale(&v118, (const std::locale *)v146);
    v119 = *(_OWORD *)&v146[8];
    v120 = *(_OWORD *)&v146[24];
    v121 = *(_QWORD *)&v146[40];
    v122 = (std::__shared_weak_count *)v147;
    if ((_QWORD)v147)
    {
      v96 = (unint64_t *)(v147 + 8);
      do
        v97 = __ldxr(v96);
      while (__stxr(v97 + 1, v96));
    }
    v123 = *((_QWORD *)&v147 + 1);
    v98 = util::checkLogFileAge((uint64_t)&v124, v8, (uint64_t)&v118);
    v99 = v122;
    if (!v122)
      goto LABEL_187;
    v100 = (unint64_t *)&v122->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_188:
        if (!v98)
          goto LABEL_196;
LABEL_192:
        if (SHIBYTE(v10->__r_.__value_.__r.__words[2]) < 0)
        {
          *v10->__r_.__value_.__l.__data_ = 0;
          v10->__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v10->__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v10->__r_.__value_.__s + 23) = 0;
        }
        goto LABEL_196;
      }
    }
    else
    {
LABEL_187:
      std::locale::~locale(&v118);
      if ((SHIBYTE(v124.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_188;
    }
    operator delete(v124.__r_.__value_.__l.__data_);
    if (!v98)
      goto LABEL_196;
    goto LABEL_192;
  }
  v111 = v8;
  v113 = a5;
  while (1)
  {
    memset(&v136, 170, sizeof(v136));
    if (*((char *)v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v136, (const std::string::value_type *)*v34, (std::string::size_type)v34[1]);
    }
    else
    {
      v35 = *(_OWORD *)v34;
      v136.__r_.__value_.__r.__words[2] = (std::string::size_type)v34[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v35;
    }
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    else
      size = v137.__r_.__value_.__l.__size_;
    v37 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
    v38 = SHIBYTE(v136.__r_.__value_.__r.__words[2]);
    v39 = (std::string *)v136.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v137;
      else
        v40 = (std::string *)v137.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v136;
      else
        v41 = (std::string *)v136.__r_.__value_.__r.__words[0];
      v42 = v136.__r_.__value_.__l.__size_;
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if (v42 >= size)
      {
        v67 = (char *)v41 + v42;
        v68 = v40->__r_.__value_.__s.__data_[0];
        v69 = v41;
        do
        {
          v70 = v42 - size;
          if (v70 == -1)
            break;
          v71 = (char *)memchr(v69, v68, v70 + 1);
          if (!v71)
            break;
          v72 = v71;
          if (!memcmp(v71, v40, size))
          {
            if (v72 == v67 || v72 - (char *)v41 == -1)
              break;
            v65 = 3;
            v10 = v116;
            if ((v38 & 0x80) == 0)
              goto LABEL_155;
            goto LABEL_109;
          }
          v69 = (std::string *)(v72 + 1);
          v42 = v67 - (v72 + 1);
        }
        while (v42 >= size);
      }
    }
    *(_QWORD *)&v43 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v43 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v134 = v43;
    v131 = 0xAAAAAAAAAAAAAA00;
    v128[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
    v129 = 0;
    v130 = 0;
    v132 = 0;
    v133 = 0;
    LOBYTE(v134) = 0;
    BYTE8(v134) = 0;
    v135 = 0;
    memset(v128, 0, 41);
    if (v117)
    {
      v44 = v136.__r_.__value_.__l.__size_;
      v161 = v43;
      v158 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&v155[24] = v43;
      v156 = 0;
      v157 = 0;
      v159 = 0;
      v160 = 0;
      LOBYTE(v161) = 0;
      BYTE8(v161) = 0;
      v162 = 0;
      __dst = 0uLL;
      *(_OWORD *)v155 = 0uLL;
      if (v38 >= 0)
        v45 = (std::sub_match<const char *> *)&v136;
      else
        v45 = (std::sub_match<const char *> *)v39;
      if (v38 >= 0)
        v44 = v37;
      *(_OWORD *)&v155[9] = 0uLL;
      v10 = v116;
      v46 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v146, v45, (std::sub_match<const char *> *)((char *)v45 + v44), (std::vector<std::csub_match> *)&__dst, 0);
      v47 = HIBYTE(v136.__r_.__value_.__r.__words[2]);
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = &v136;
      else
        v48 = (std::string *)v136.__r_.__value_.__r.__words[0];
      if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = v136.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v128, (uint64_t)v48, (std::sub_match<std::__wrap_iter<const char *>> *)((char *)v48 + v47), (uint64_t *)&__dst, 0);
      if ((_QWORD)__dst)
      {
        *((_QWORD *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      if (v46)
      {
        p_end_cap = &v128[1].__end_cap_;
        if (v128[0].__end_ != v128[0].__begin_)
          p_end_cap = &v128[0].__begin_->matched;
        if (!*p_end_cap)
        {
          __dst = 0uLL;
          *(_QWORD *)v155 = 0;
          if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_119;
          goto LABEL_104;
        }
        begin = (std::vector<std::ssub_match>::pointer)&v128[1];
        if (v128[0].__end_ != v128[0].__begin_)
          begin = v128[0].__begin_;
        i = begin->first.__i_;
        p_i = &v128[0].__begin_->second.__i_;
        if (v128[0].__end_ == v128[0].__begin_)
          p_i = (const char **)&v128[1].__end_;
        v53 = *p_i;
        v54 = *p_i - i;
        if (v54 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v54 > 0x16)
        {
          v79 = (v54 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v54 | 7) != 0x17)
            v79 = v54 | 7;
          v80 = v79 + 1;
          v55 = (__int128 *)operator new(v79 + 1);
          *((_QWORD *)&__dst + 1) = v54;
          *(_QWORD *)v155 = v80 | 0x8000000000000000;
          *(_QWORD *)&__dst = v55;
          if (i != v53)
          {
LABEL_77:
            if (v54 < 0x20 || (unint64_t)((char *)v55 - i) < 0x20)
            {
              v56 = v55;
              v57 = i;
            }
            else
            {
              v56 = (__int128 *)((char *)v55 + (v54 & 0xFFFFFFFFFFFFFFE0));
              v57 = &i[v54 & 0xFFFFFFFFFFFFFFE0];
              v58 = (__int128 *)(i + 16);
              v59 = v55 + 1;
              v60 = v54 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v61 = *v58;
                *(v59 - 1) = *(v58 - 1);
                *v59 = v61;
                v58 += 2;
                v59 += 2;
                v60 -= 32;
              }
              while (v60);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFE0))
              {
LABEL_118:
                *(_BYTE *)v56 = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_119:
                  *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                  v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                  if (!a4)
                    goto LABEL_146;
                  goto LABEL_120;
                }
LABEL_104:
                operator delete(v116->__r_.__value_.__l.__data_);
                *(_OWORD *)&v116->__r_.__value_.__l.__data_ = __dst;
                v116->__r_.__value_.__r.__words[2] = *(_QWORD *)v155;
                if (!a4)
                  goto LABEL_146;
LABEL_120:
                v82 = strlen((const char *)this);
                if (v82 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v83 = (void *)v82;
                if (v82 >= 0x17)
                {
                  v85 = (v82 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v82 | 7) != 0x17)
                    v85 = v82 | 7;
                  v86 = v85 + 1;
                  v84 = operator new(v85 + 1);
                  v126[1] = v83;
                  v127 = v86 | 0x8000000000000000;
                  v126[0] = v84;
                }
                else
                {
                  HIBYTE(v127) = v82;
                  v84 = v126;
                  if (!v82)
                  {
                    LOBYTE(v126[0]) = 0;
                    if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    {
LABEL_124:
                      v125 = *v116;
LABEL_130:
                      isDumpForSysdiagnose = util::isDumpForSysdiagnose((uint64_t)v126, (uint64_t)&v125);
                      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(v125.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v127) & 0x80000000) == 0)
                        {
LABEL_132:
                          if (isDumpForSysdiagnose)
                          {
LABEL_133:
                            if ((v88 & 1) == 0
                            {
                              GetOsLogContext(void)::sOsLogContext = 0;
                              qword_1ED70F6F8 = 0;
                              __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
                            }
                            if (GetOsLogContext(void)::onceToken == -1)
                            {
                              v89 = qword_1ED70F6F8;
                              if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            else
                            {
                              dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
                              v89 = qword_1ED70F6F8;
                              if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
                                goto LABEL_140;
                            }
                            if ((v116->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v90 = v116;
                            else
                              v90 = (std::string *)v116->__r_.__value_.__r.__words[0];
                            LODWORD(__dst) = 136315138;
                            *(_QWORD *)((char *)&__dst + 4) = v90;
                            _os_log_impl(&dword_1BF566000, v89, OS_LOG_TYPE_DEFAULT, "Ignore dump for sysdiagnose: %s", (uint8_t *)&__dst, 0xCu);
LABEL_140:
                            if (&v137 != v116)
                            {
                              v91 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                              if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
                              {
                                if (v91 >= 0)
                                  v94 = v116;
                                else
                                  v94 = (std::string *)v116->__r_.__value_.__r.__words[0];
                                if (v91 >= 0)
                                  v95 = HIBYTE(v116->__r_.__value_.__r.__words[2]);
                                else
                                  v95 = v116->__r_.__value_.__l.__size_;
                                std::string::__assign_no_alias<false>((void **)&v137.__r_.__value_.__l.__data_, v94, v95);
                              }
                              else
                              {
                                if ((*((_BYTE *)&v116->__r_.__value_.__s + 23) & 0x80) == 0)
                                {
                                  v137 = *v116;
LABEL_169:
                                  v65 = 0;
                                  v116->__r_.__value_.__s.__data_[0] = 0;
                                  *((_BYTE *)&v116->__r_.__value_.__s + 23) = 0;
                                  goto LABEL_151;
                                }
                                std::string::__assign_no_alias<true>(&v137, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                              }
                            }
                            if (SHIBYTE(v116->__r_.__value_.__r.__words[2]) < 0)
                            {
                              v65 = 0;
                              *v116->__r_.__value_.__l.__data_ = 0;
                              v116->__r_.__value_.__l.__size_ = 0;
                              goto LABEL_151;
                            }
                            goto LABEL_169;
                          }
                          goto LABEL_146;
                        }
                      }
                      else if ((SHIBYTE(v127) & 0x80000000) == 0)
                      {
                        goto LABEL_132;
                      }
                      operator delete(v126[0]);
                      if (isDumpForSysdiagnose)
                        goto LABEL_133;
LABEL_146:
                      v65 = 2;
LABEL_151:
                      v92 = 1;
LABEL_152:
                      v117 = v92;
                      v66 = v128[0].__begin_;
                      if (v128[0].__begin_)
                        goto LABEL_153;
                      goto LABEL_154;
                    }
LABEL_129:
                    std::string::__init_copy_ctor_external(&v125, v116->__r_.__value_.__l.__data_, v116->__r_.__value_.__l.__size_);
                    goto LABEL_130;
                  }
                }
                memcpy(v84, this, (size_t)v83);
                *((_BYTE *)v83 + (_QWORD)v84) = 0;
                if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_124;
                goto LABEL_129;
              }
            }
            do
            {
              v81 = *v57++;
              *(_BYTE *)v56 = v81;
              v56 = (__int128 *)((char *)v56 + 1);
            }
            while (v57 != v53);
            goto LABEL_118;
          }
        }
        else
        {
          v155[7] = *(_BYTE *)p_i - (_BYTE)i;
          v55 = &__dst;
          if (i != v53)
            goto LABEL_77;
        }
        *(_BYTE *)v55 = 0;
        if ((SHIBYTE(v116->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_119;
        goto LABEL_104;
      }
LABEL_150:
      v65 = 0;
      goto LABEL_151;
    }
    if (v38 >= 0)
      v39 = &v136;
    v62 = strlen(v113);
    v10 = v116;
    if (!v62)
    {
LABEL_149:
      std::string::__assign_external(&v137, v113);
      goto LABEL_150;
    }
    v63 = v62;
    v64 = v136.__r_.__value_.__l.__size_;
    if (v38 >= 0)
      v64 = v37;
    if (v64 >= v62)
    {
      v73 = (char *)v39 + v64;
      v74 = *v113;
      v75 = v39;
      do
      {
        v76 = v64 - v63;
        if (v76 == -1)
          break;
        v77 = (char *)memchr(v75, v74, v76 + 1);
        if (!v77)
          break;
        v78 = v77;
        if (!memcmp(v77, v113, v63))
        {
          v92 = 0;
          if (v78 != v73)
          {
            v93 = v78 - (char *)v39;
            v65 = 0;
            if (v93 == -1)
              goto LABEL_152;
            goto LABEL_149;
          }
          v65 = 0;
          v117 = 0;
          v66 = v128[0].__begin_;
          if (v128[0].__begin_)
            goto LABEL_153;
          goto LABEL_154;
        }
        v75 = (std::string *)(v78 + 1);
        v64 = v73 - (v78 + 1);
      }
      while (v64 >= v63);
    }
    v65 = 0;
    v117 = 0;
    v66 = v128[0].__begin_;
    if (v128[0].__begin_)
    {
LABEL_153:
      v128[0].__end_ = v66;
      operator delete(v66);
    }
LABEL_154:
    if ((*((_BYTE *)&v136.__r_.__value_.__s + 23) & 0x80) != 0)
      break;
LABEL_155:
    if (v65 != 3)
      goto LABEL_156;
LABEL_36:
    v34 += 3;
    if (v34 == v115)
      goto LABEL_175;
  }
LABEL_109:
  operator delete(v136.__r_.__value_.__l.__data_);
  if (v65 == 3)
    goto LABEL_36;
LABEL_156:
  if (!v65)
    goto LABEL_36;
LABEL_175:
  v8 = v111;
  if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_176;
  operator delete(v137.__r_.__value_.__l.__data_);
  if (v111)
    goto LABEL_177;
LABEL_196:
  v102 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v103 = (unint64_t *)(v147 + 8);
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
      std::locale::~locale((std::locale *)v146);
      v105 = (std::__shared_weak_count *)v149;
      if ((_QWORD)v149)
        goto LABEL_201;
      goto LABEL_204;
    }
  }
  std::locale::~locale((std::locale *)v146);
  v105 = (std::__shared_weak_count *)v149;
  if (!(_QWORD)v149)
    goto LABEL_204;
LABEL_201:
  v106 = (unint64_t *)&v105->__shared_owners_;
  do
    v107 = __ldaxr(v106);
  while (__stlxr(v107 - 1, v106));
  if (v107)
  {
LABEL_204:
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
      goto LABEL_205;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
    std::__shared_weak_count::__release_weak(v105);
    std::locale::~locale((std::locale *)v148);
    if (SHIBYTE(v150[2]) < 0)
LABEL_205:
      operator delete(v150[0]);
  }
  v108 = v151;
  if (v151)
  {
    v109 = v152;
    v110 = v151;
    if (v152 != v151)
    {
      do
      {
        if (*((char *)v109 - 1) < 0)
          operator delete((void *)*(v109 - 3));
        v109 -= 3;
      }
      while (v109 != v108);
      v110 = v151;
    }
    v152 = v108;
    operator delete(v110);
  }
}

void sub_1BF65D59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x220]);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&STACK[0x260]);
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v24 - 248));
  if (*(char *)(a24 + 23) < 0)
    operator delete(*(void **)a24);
  _Unwind_Resume(a1);
}

uint64_t util::getNumberOfLogDumps(uint64_t a1, const void **a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  int v7;
  size_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  _BYTE *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  __int128 v20;
  int v21;
  size_t v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  _BYTE *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::sub_match<const char *> *v39;
  std::sub_match<const char *> *v40;
  __int128 v41;
  const char *second;
  std::sub_match<const char *> *first;
  int v44;
  const char *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t v49;
  char **v50;
  char *v51;
  unint64_t v52;
  _OWORD *v53;
  _BYTE *v54;
  char *v55;
  __int128 *v56;
  _OWORD *v57;
  unint64_t v58;
  __int128 v59;
  void *v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  unint64_t v72;
  uint64_t **v73;
  uint64_t *v74;
  char v75;
  void *v76;
  void **v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  const void **v82;
  void **v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const void **v87;
  void **v88;
  uint64_t v89;
  int v90;
  _QWORD *v91;
  float v92;
  uint64_t v93;
  _QWORD *v94;
  _BOOL8 v95;
  unint64_t v96;
  unint64_t v97;
  size_t prime;
  void *v99;
  void *v100;
  uint64_t v101;
  _QWORD **v102;
  size_t v103;
  size_t v104;
  size_t v105;
  _QWORD *i;
  size_t v107;
  uint64_t v108;
  unint64_t v109;
  uint8x8_t v110;
  uint64_t v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  size_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void **v125;
  void *v126;
  void **v127;
  void **v128;
  void *v129;
  void **v131;
  void *v132;
  char *v133;
  std::sub_match<const char *> *v134;
  void *v135[2];
  int64_t v136;
  std::locale v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::string v143;
  std::locale v144[2];
  __int128 v145;
  __int128 v146;
  __int128 v147;
  _BYTE v148[48];
  __int128 v149;
  __int128 v150;
  __int128 v151;
  unint64_t v152;
  void *v153;
  std::sub_match<const char *> *v154;
  uint64_t v155;
  _BYTE __p[48];
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  _BYTE __dst[48];
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v150 = 0u;
  v151 = 0u;
  v152 = 0xAAAAAAAA3F800000;
  v4 = (char *)operator new(0x48uLL);
  v5 = v4;
  strcpy(v4, "[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2}-[0-9]{2,4}-[0-9]{3}");
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v148[32] = v6;
  v149 = v6;
  *(_OWORD *)v148 = v6;
  *(_OWORD *)&v148[16] = v6;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = v8 + 64;
  memset(__dst, 170, 24);
  v133 = v4;
  if (v8 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v9 <= 0x16)
  {
    memset(__dst, 0, 24);
    v10 = __dst;
    __dst[23] = v8 + 64;
LABEL_10:
    if (v7 >= 0)
      v13 = a2;
    else
      v13 = *a2;
    memmove(v10, v13, v8);
    goto LABEL_14;
  }
  v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v11 = v9 | 7;
  v12 = v11 + 1;
  v10 = operator new(v11 + 1);
  *(_QWORD *)&__dst[8] = v8 + 64;
  *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
  *(_QWORD *)__dst = v10;
  if (v8)
    goto LABEL_10;
LABEL_14:
  v14 = &v10[v8];
  v15 = *(_OWORD *)v5;
  v16 = *((_OWORD *)v5 + 1);
  v17 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v14 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v14 + 3) = v17;
  *(_OWORD *)v14 = v15;
  *((_OWORD *)v14 + 1) = v16;
  v14[64] = 0;
  v18 = std::string::append((std::string *)__dst, ".*", 2uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v148, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((__dst[23] & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*(void **)__dst);
LABEL_16:
  *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v146 = v20;
  v147 = v20;
  v145 = v20;
  *(_OWORD *)&v144[0].__locale_ = v20;
  v21 = *((char *)a2 + 23);
  if (v21 >= 0)
    v22 = *((unsigned __int8 *)a2 + 23);
  else
    v22 = (size_t)a2[1];
  v23 = v22 + 64;
  memset(__dst, 170, 24);
  if (v22 + 64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v23 <= 0x16)
  {
    memset(__dst, 0, 24);
    v24 = __dst;
    __dst[23] = v22 + 64;
LABEL_25:
    if (v21 >= 0)
      v27 = a2;
    else
      v27 = *a2;
    memmove(v24, v27, v22);
    goto LABEL_29;
  }
  v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17)
    v25 = v23 | 7;
  v26 = v25 + 1;
  v24 = operator new(v25 + 1);
  *(_QWORD *)&__dst[8] = v22 + 64;
  *(_QWORD *)&__dst[16] = v26 | 0x8000000000000000;
  *(_QWORD *)__dst = v24;
  if (v22)
    goto LABEL_25;
LABEL_29:
  v28 = &v24[v22];
  v29 = *(_OWORD *)v5;
  v30 = *((_OWORD *)v5 + 1);
  v31 = *((_OWORD *)v5 + 3);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v5 + 2);
  *((_OWORD *)v28 + 3) = v31;
  *(_OWORD *)v28 = v29;
  *((_OWORD *)v28 + 1) = v30;
  v28[64] = 0;
  v32 = std::string::append((std::string *)__dst, "(?=-*)(?!\\.json)", 0x10uLL);
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = *((_QWORD *)&v32->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v144, (uint64_t)__p, 0);
  if ((__p[23] & 0x80000000) == 0)
  {
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_31;
LABEL_36:
    operator delete(*(void **)__dst);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_32;
    goto LABEL_37;
  }
  operator delete(*(void **)__p);
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_36;
LABEL_31:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
LABEL_32:
    v143 = *(std::string *)a1;
    goto LABEL_38;
  }
LABEL_37:
  std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
LABEL_38:
  std::locale::locale(&v137, (const std::locale *)v148);
  v138 = *(_OWORD *)&v148[8];
  v139 = *(_OWORD *)&v148[24];
  v140 = *(_QWORD *)&v148[40];
  v141 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v34 = (unint64_t *)(v149 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v142 = *((_QWORD *)&v149 + 1);
  support::fs::getFilteredFiles((const char *)&v143, (uint64_t)&v137, (uint64_t)&v153, 0);
  v36 = v141;
  if (!v141)
    goto LABEL_45;
  p_shared_owners = (unint64_t *)&v141->__shared_owners_;
  do
    v38 = __ldaxr(p_shared_owners);
  while (__stlxr(v38 - 1, p_shared_owners));
  if (!v38)
  {
    ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
    std::__shared_weak_count::__release_weak(v36);
    std::locale::~locale(&v137);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_46:
      v40 = (std::sub_match<const char *> *)v153;
      v39 = v154;
      if (v153 == v154)
        goto LABEL_222;
      goto LABEL_50;
    }
  }
  else
  {
LABEL_45:
    std::locale::~locale(&v137);
    if ((SHIBYTE(v143.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_46;
  }
  operator delete(v143.__r_.__value_.__l.__data_);
  v40 = (std::sub_match<const char *> *)v153;
  v39 = v154;
  if (v153 != v154)
  {
LABEL_50:
    v134 = v39;
    while (1)
    {
      *(_QWORD *)&v41 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v41 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v170 = v41;
      v167 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__dst[40] = 0xAAAAAAAAAAAAAAAALL;
      v165 = 0;
      v166 = 0;
      v168 = 0;
      v169 = 0;
      LOBYTE(v170) = 0;
      BYTE8(v170) = 0;
      v171 = 0;
      memset(__dst, 0, 41);
      v162 = v41;
      v159 = 0xAAAAAAAAAAAAAA00;
      *(_QWORD *)&__p[40] = 0xAAAAAAAAAAAAAAAALL;
      v157 = 0;
      v158 = 0;
      v160 = 0;
      v161 = 0;
      LOBYTE(v162) = 0;
      BYTE8(v162) = 0;
      v163 = 0;
      memset(__p, 0, 41);
      second = (const char *)*((unsigned __int8 *)&v40->matched + 7);
      if ((char)second >= 0)
        first = v40;
      else
        first = (std::sub_match<const char *> *)v40->first;
      if ((char)second < 0)
        second = v40->second;
      v44 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v144, first, (std::sub_match<const char *> *)&second[(_QWORD)first], (std::vector<std::csub_match> *)__p, 0);
      v45 = (const char *)*((unsigned __int8 *)&v40->matched + 7);
      if ((char)v45 >= 0)
        v46 = (uint64_t)v40;
      else
        v46 = (uint64_t)v40->first;
      if ((char)v45 < 0)
        v45 = v40->second;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)__dst, v46, (std::sub_match<std::__wrap_iter<const char *>> *)&v45[v46], (uint64_t *)__p, 0);
      if (*(_QWORD *)__p)
      {
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        operator delete(*(void **)__p);
      }
      if (!v44)
        goto LABEL_220;
      v47 = *(_QWORD *)&__dst[8] == *(_QWORD *)__dst ? &__dst[40] : (_BYTE *)(*(_QWORD *)__dst + 16);
      if (*v47)
        break;
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v135[0] = 0;
      v135[1] = 0;
      v136 = 0;
LABEL_90:
      if ((v62 & 0x80u) == 0)
        v66 = (uint64_t *)v135;
      else
        v66 = v61;
      if ((v62 & 0x80u) == 0)
        v67 = v62;
      else
        v67 = (unint64_t)v60;
      v68 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)__p, v66, v67);
      v69 = v68;
      v70 = *((_QWORD *)&v150 + 1);
      if (!*((_QWORD *)&v150 + 1))
      {
        v72 = 0xAAAAAAAAAAAAAAAALL;
LABEL_146:
        *(_QWORD *)&__p[16] = 0xAAAAAAAAAAAAAA01;
        v91 = operator new(0x28uLL);
        *(_QWORD *)__p = v91;
        *(_QWORD *)&__p[8] = &v151;
        *v91 = 0;
        v91[1] = v69;
        *((_OWORD *)v91 + 1) = *(_OWORD *)v135;
        v91[4] = v136;
        v135[0] = 0;
        v135[1] = 0;
        v136 = 0;
        v92 = (float)(unint64_t)(*((_QWORD *)&v151 + 1) + 1);
        if (v70 && (float)(*(float *)&v152 * (float)v70) >= v92)
        {
          v39 = v134;
          v93 = v150;
          v94 = *(_QWORD **)(v150 + 8 * v72);
          if (v94)
            goto LABEL_149;
LABEL_198:
          *v91 = v151;
          *(_QWORD *)&v151 = v91;
          *(_QWORD *)(v93 + 8 * v72) = &v151;
          if (*v91)
          {
            v115 = *(_QWORD *)(*v91 + 8);
            if ((v70 & (v70 - 1)) != 0)
            {
              if (v115 >= v70)
                v115 %= v70;
            }
            else
            {
              v115 &= v70 - 1;
            }
            v94 = (_QWORD *)(v150 + 8 * v115);
LABEL_217:
            *v94 = v91;
          }
          ++*((_QWORD *)&v151 + 1);
          if (v136 < 0)
            goto LABEL_219;
          goto LABEL_220;
        }
        v95 = (v70 & (v70 - 1)) != 0;
        if (v70 < 3)
          v95 = 1;
        v96 = v95 | (2 * v70);
        v97 = vcvtps_u32_f32(v92 / *(float *)&v152);
        if (v96 <= v97)
          prime = v97;
        else
          prime = v96;
        v39 = v134;
        if (prime == 1)
        {
          prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          prime = std::__next_prime(prime);
          v70 = *((_QWORD *)&v150 + 1);
        }
        if (prime <= v70)
        {
          if (prime >= v70)
            goto LABEL_196;
          v109 = vcvtps_u32_f32((float)*((unint64_t *)&v151 + 1) / *(float *)&v152);
          if (v70 < 3 || (v110 = (uint8x8_t)vcnt_s8((int8x8_t)v70), v110.i16[0] = vaddlv_u8(v110), v110.u32[0] > 1uLL))
          {
            v109 = std::__next_prime(v109);
          }
          else
          {
            v111 = 1 << -(char)__clz(v109 - 1);
            if (v109 >= 2)
              v109 = v111;
          }
          if (prime <= v109)
            prime = v109;
          if (prime < v70)
          {
            if (prime)
              goto LABEL_160;
            v113 = (void *)v150;
            *(_QWORD *)&v150 = 0;
            if (v113)
              operator delete(v113);
            v70 = 0;
            *((_QWORD *)&v150 + 1) = 0;
            v114 = -1;
            goto LABEL_197;
          }
          v70 = *((_QWORD *)&v150 + 1);
          v114 = *((_QWORD *)&v150 + 1) - 1;
          if ((*((_QWORD *)&v150 + 1) & (*((_QWORD *)&v150 + 1) - 1)) == 0)
            goto LABEL_197;
          goto LABEL_209;
        }
LABEL_160:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v99 = operator new(8 * prime);
        v100 = (void *)v150;
        *(_QWORD *)&v150 = v99;
        if (v100)
          operator delete(v100);
        v101 = 0;
        *((_QWORD *)&v150 + 1) = prime;
        do
          *(_QWORD *)(v150 + 8 * v101++) = 0;
        while (prime != v101);
        v102 = (_QWORD **)v151;
        if (!(_QWORD)v151)
        {
LABEL_208:
          v70 = prime;
          v114 = prime - 1;
          if ((prime & (prime - 1)) == 0)
            goto LABEL_197;
          goto LABEL_209;
        }
        v103 = *(_QWORD *)(v151 + 8);
        v104 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v105 = v103 & v104;
          *(_QWORD *)(v150 + 8 * v105) = &v151;
          for (i = *v102; *v102; i = *v102)
          {
            v107 = i[1] & v104;
            if (v107 == v105)
            {
              v102 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(v150 + 8 * v107))
            {
              *v102 = (_QWORD *)*i;
              v108 = 8 * v107;
              *i = **(_QWORD **)(v150 + v108);
              **(_QWORD **)(v150 + v108) = i;
            }
            else
            {
              *(_QWORD *)(v150 + 8 * v107) = v102;
              v102 = (_QWORD **)i;
              v105 = v107;
            }
          }
          goto LABEL_208;
        }
        if (v103 < prime)
        {
          *(_QWORD *)(v150 + 8 * v103) = &v151;
          v112 = *v102;
          if (*v102)
            goto LABEL_203;
LABEL_195:
          v70 = prime;
LABEL_196:
          v114 = v70 - 1;
          if ((v70 & (v70 - 1)) == 0)
          {
LABEL_197:
            v72 = v114 & v69;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * (v114 & v69));
            if (!v94)
              goto LABEL_198;
LABEL_149:
            *v91 = *v94;
            goto LABEL_217;
          }
LABEL_209:
          if (v69 >= v70)
          {
            v72 = v69 % v70;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * (v69 % v70));
            if (!v94)
              goto LABEL_198;
          }
          else
          {
            v72 = v69;
            v93 = v150;
            v94 = *(_QWORD **)(v150 + 8 * v69);
            if (!v94)
              goto LABEL_198;
          }
          goto LABEL_149;
        }
        v103 %= prime;
        *(_QWORD *)(v150 + 8 * v103) = &v151;
        v112 = *v102;
        if (!*v102)
          goto LABEL_195;
        while (1)
        {
LABEL_203:
          v117 = v112[1];
          if (v117 >= prime)
            v117 %= prime;
          if (v117 == v103)
            goto LABEL_202;
          if (*(_QWORD *)(v150 + 8 * v117))
            break;
          *(_QWORD *)(v150 + 8 * v117) = v102;
          v102 = (_QWORD **)v112;
          v112 = (_QWORD *)*v112;
          v103 = v117;
          if (!v112)
            goto LABEL_208;
        }
        *v102 = (_QWORD *)*v112;
        v116 = 8 * v117;
        *v112 = **(_QWORD **)(v150 + v116);
        **(_QWORD **)(v150 + v116) = v112;
        v112 = v102;
LABEL_202:
        v102 = (_QWORD **)v112;
        v112 = (_QWORD *)*v112;
        if (!v112)
          goto LABEL_208;
        goto LABEL_203;
      }
      v71 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v150 + 8));
      v71.i16[0] = vaddlv_u8(v71);
      if (v71.u32[0] > 1uLL)
      {
        v72 = v68;
        if (v68 >= *((_QWORD *)&v150 + 1))
          v72 = v68 % *((_QWORD *)&v150 + 1);
      }
      else
      {
        v72 = (*((_QWORD *)&v150 + 1) - 1) & v68;
      }
      v73 = *(uint64_t ***)(v150 + 8 * v72);
      if (!v73)
        goto LABEL_146;
      v74 = *v73;
      if (!*v73)
        goto LABEL_146;
      v75 = HIBYTE(v136);
      if (v136 >= 0)
        v76 = (void *)HIBYTE(v136);
      else
        v76 = v135[1];
      if (v136 >= 0)
        v77 = v135;
      else
        v77 = (void **)v135[0];
      if (v71.u32[0] >= 2uLL)
      {
        while (1)
        {
          v79 = v74[1];
          if (v79 == v69)
          {
            v80 = *((unsigned __int8 *)v74 + 39);
            if ((v80 & 0x80u) == 0)
              v81 = (void *)*((unsigned __int8 *)v74 + 39);
            else
              v81 = (void *)v74[3];
            if (v81 == v76)
            {
              v82 = (const void **)(v74 + 2);
              if ((v80 & 0x80) != 0)
              {
                if (!memcmp(*v82, v77, v74[3]))
                {
LABEL_128:
                  v39 = v134;
                  if (v75 < 0)
                    goto LABEL_219;
                  goto LABEL_220;
                }
              }
              else
              {
                if (!*((_BYTE *)v74 + 39))
                  goto LABEL_128;
                v83 = v77;
                while (*(unsigned __int8 *)v82 == *(unsigned __int8 *)v83)
                {
                  v82 = (const void **)((char *)v82 + 1);
                  v83 = (void **)((char *)v83 + 1);
                  if (!--v80)
                    goto LABEL_128;
                }
              }
            }
          }
          else
          {
            if (v79 >= v70)
              v79 %= v70;
            if (v79 != v72)
              goto LABEL_146;
          }
          v74 = (uint64_t *)*v74;
          if (!v74)
            goto LABEL_146;
        }
      }
      v78 = *((_QWORD *)&v150 + 1) - 1;
      while (1)
      {
        v84 = v74[1];
        if (v84 != v69)
        {
          if ((v84 & v78) != v72)
            goto LABEL_146;
          goto LABEL_131;
        }
        v85 = *((unsigned __int8 *)v74 + 39);
        v86 = (v85 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v74 + 39) : (void *)v74[3];
        if (v86 == v76)
          break;
LABEL_131:
        v74 = (uint64_t *)*v74;
        if (!v74)
          goto LABEL_146;
      }
      v87 = (const void **)(v74 + 2);
      if ((v85 & 0x80) == 0)
      {
        if (!*((_BYTE *)v74 + 39))
          goto LABEL_144;
        v88 = v77;
        while (*(unsigned __int8 *)v87 == *(unsigned __int8 *)v88)
        {
          v87 = (const void **)((char *)v87 + 1);
          v88 = (void **)((char *)v88 + 1);
          if (!--v85)
            goto LABEL_144;
        }
        goto LABEL_131;
      }
      v132 = v76;
      v89 = v78;
      v90 = memcmp(*v87, v77, v74[3]);
      v78 = v89;
      v76 = v132;
      if (v90)
        goto LABEL_131;
LABEL_144:
      v39 = v134;
      if (v75 < 0)
LABEL_219:
        operator delete(v135[0]);
LABEL_220:
      if (*(_QWORD *)__dst)
      {
        *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
        operator delete(*(void **)__dst);
      }
      if (++v40 == v39)
        goto LABEL_222;
    }
    v48 = (uint64_t *)&__dst[24];
    if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
      v48 = *(uint64_t **)__dst;
    v49 = *v48;
    v50 = (char **)(*(_QWORD *)__dst + 8);
    if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
      v50 = (char **)&__dst[32];
    v51 = *v50;
    v52 = (unint64_t)&(*v50)[-v49];
    if (v52 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v52 > 0x16)
    {
      v63 = (v52 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v52 | 7) != 0x17)
        v63 = v52 | 7;
      v64 = v63 + 1;
      v53 = operator new(v63 + 1);
      v135[1] = (void *)v52;
      v136 = v64 | 0x8000000000000000;
      v135[0] = v53;
      if ((char *)v49 != v51)
        goto LABEL_76;
    }
    else
    {
      HIBYTE(v136) = *(_BYTE *)v50 - v49;
      v53 = v135;
      if ((char *)v49 != v51)
      {
LABEL_76:
        if (v52 < 0x20 || (unint64_t)v53 - v49 < 0x20)
        {
          v54 = v53;
          v55 = (char *)v49;
        }
        else
        {
          v54 = (char *)v53 + (v52 & 0xFFFFFFFFFFFFFFE0);
          v55 = (char *)(v49 + (v52 & 0xFFFFFFFFFFFFFFE0));
          v56 = (__int128 *)(v49 + 16);
          v57 = v53 + 1;
          v58 = v52 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v59 = *v56;
            *(v57 - 1) = *(v56 - 1);
            *v57 = v59;
            v56 += 2;
            v57 += 2;
            v58 -= 32;
          }
          while (v58);
          if (v52 == (v52 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_89;
        }
        do
        {
          v65 = *v55++;
          *v54++ = v65;
        }
        while (v55 != v51);
LABEL_89:
        *v54 = 0;
        v62 = HIBYTE(v136);
        v61 = (uint64_t *)v135[0];
        v60 = v135[1];
        goto LABEL_90;
      }
    }
    v54 = v53;
    goto LABEL_89;
  }
LABEL_222:
  v118 = *((_QWORD *)&v151 + 1);
  v119 = (std::__shared_weak_count *)v147;
  if ((_QWORD)v147)
  {
    v120 = (unint64_t *)(v147 + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  std::locale::~locale(v144);
  v122 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v123 = (unint64_t *)(v149 + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  std::locale::~locale((std::locale *)v148);
  operator delete(v133);
  v125 = (void **)v151;
  if ((_QWORD)v151)
  {
    do
    {
      v131 = (void **)*v125;
      if (*((char *)v125 + 39) < 0)
        operator delete(v125[2]);
      operator delete(v125);
      v125 = v131;
    }
    while (v131);
  }
  v126 = (void *)v150;
  *(_QWORD *)&v150 = 0;
  if (v126)
    operator delete(v126);
  v127 = (void **)v153;
  if (v153)
  {
    v128 = (void **)v154;
    v129 = v153;
    if (v154 != v153)
    {
      do
      {
        if (*((char *)v128 - 1) < 0)
          operator delete(*(v128 - 3));
        v128 -= 3;
      }
      while (v128 != v127);
      v129 = v153;
    }
    v154 = (std::sub_match<const char *> *)v127;
    operator delete(v129);
  }
  return v118;
}

void sub_1BF65E6F4(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  operator delete(v2);
  std::unordered_set<std::string>::~unordered_set[abi:ne180100](&v3);
  std::vector<std::string>::~vector[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void sub_1BF65E6FC()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF65E704);
}

void sub_1BF65E724(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF65E72CLL);
  JUMPOUT(0x1BF65E5CCLL);
}

uint64_t std::unordered_set<std::string>::~unordered_set[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t util::compareTwoStringsWithPattern(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  std::sub_match<const char *> *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::vector<std::ssub_match>::pointer end;
  __int128 v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::__wrap_iter<const char *>::iterator_type i;
  unint64_t v17;
  std::sub_match<const char *> *v18;
  std::sub_match<const char *> *v19;
  _BYTE *v20;
  __int128 *v21;
  BOOL *p_matched;
  unint64_t v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  void **v32;
  __int128 v33;
  uint64_t v34;
  std::sub_match<const char *> *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  std::vector<std::ssub_match>::pointer v39;
  std::vector<std::ssub_match>::pointer v40;
  __int128 v41;
  std::__wrap_iter<const char *>::iterator_type v42;
  std::__wrap_iter<const char *>::iterator_type v43;
  unint64_t v44;
  std::sub_match<const char *> *v45;
  std::sub_match<const char *> *v46;
  _BYTE *v47;
  __int128 *v48;
  BOOL *v49;
  unint64_t v50;
  __int128 v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  void **v62;
  char *v63;
  char *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t *p_shared_owners;
  unint64_t v74;
  void *__p;
  char *v77;
  unint64_t v78;
  void *v79;
  char *v80;
  unint64_t v81;
  std::locale v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::vector<std::ssub_match> v86[2];
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::vector<std::csub_match> v94[2];
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v89 = 0xAAAAAAAAAAAAAA00;
  v86[1].__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)0xAAAAAAAAAAAAAAAALL;
  v92 = v5;
  v87 = 0;
  v88 = 0;
  v90 = 0;
  v91 = 0;
  LOBYTE(v92) = 0;
  BYTE8(v92) = 0;
  v93 = 0;
  memset(v86, 0, 41);
  v84 = v5;
  v85 = v5;
  *(_OWORD *)&v82[0].__locale_ = v5;
  v83 = v5;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v82, a3, 0);
  v79 = 0;
  v80 = 0;
  v81 = 0;
  __p = 0;
  v77 = 0;
  v78 = 0;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97 = 0xAAAAAAAAAAAAAA00;
  v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
  v100 = v6;
  v95 = 0;
  v96 = 0;
  v98 = 0;
  v99 = 0;
  LOBYTE(v100) = 0;
  BYTE8(v100) = 0;
  v101 = 0;
  memset(v94, 0, 32);
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::sub_match<const char *> *)a1;
  else
    v8 = *(std::sub_match<const char *> **)a1;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v8, (std::sub_match<const char *> *)((char *)v8 + v7), v94, 0);
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) == 0)
    v11 = a1;
  else
    v11 = *(_QWORD *)a1;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v11, (std::sub_match<std::__wrap_iter<const char *>> *)(v11 + v10), (uint64_t *)v94, 0);
  if (v94[0].__begin_)
  {
    v94[0].__end_ = v94[0].__begin_;
    operator delete(v94[0].__begin_);
  }
  if (v9)
  {
    end = v86[0].__end_;
    begin = v86[0].__begin_;
    if (v86[0].__begin_ != v86[0].__end_)
    {
      while (1)
      {
        if (!begin->matched)
        {
          memset(v94, 0, 24);
          v25 = v80;
          if ((unint64_t)v80 >= v81)
            goto LABEL_38;
          goto LABEL_16;
        }
        i = begin->first.__i_;
        v15 = begin->second.__i_;
        v17 = v15 - begin->first.__i_;
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v17 > 0x16)
        {
          v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v26 = v17 | 7;
          v27 = v26 + 1;
          v18 = (std::sub_match<const char *> *)operator new(v26 + 1);
          v94[0].__end_ = (std::vector<std::csub_match>::pointer)v17;
          v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v27 | 0x8000000000000000);
          v94[0].__begin_ = v18;
          if (i == v15)
          {
LABEL_33:
            LOBYTE(v18->first) = 0;
            v25 = v80;
            if ((unint64_t)v80 >= v81)
              goto LABEL_38;
            goto LABEL_16;
          }
        }
        else
        {
          HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v15 - LOBYTE(begin->first.__i_);
          v18 = (std::sub_match<const char *> *)v94;
          if (i == v15)
            goto LABEL_33;
        }
        if (v17 < 0x20 || (unint64_t)((char *)v18 - i) < 0x20)
          break;
        v19 = (std::sub_match<const char *> *)((char *)v18 + (v17 & 0xFFFFFFFFFFFFFFE0));
        v20 = &i[v17 & 0xFFFFFFFFFFFFFFE0];
        v21 = (__int128 *)(i + 16);
        p_matched = &v18->matched;
        v23 = v17 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v24 = *v21;
          *((_OWORD *)p_matched - 1) = *(v21 - 1);
          *(_OWORD *)p_matched = v24;
          v21 += 2;
          p_matched += 32;
          v23 -= 32;
        }
        while (v23);
        if (v17 != (v17 & 0x7FFFFFFFFFFFFFE0))
          goto LABEL_36;
LABEL_37:
        LOBYTE(v19->first) = 0;
        v25 = v80;
        if ((unint64_t)v80 >= v81)
        {
LABEL_38:
          v80 = std::vector<std::string>::__push_back_slow_path<std::string>(&v79, (uint64_t)v94);
          if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
            operator delete(v94[0].__begin_);
          goto LABEL_17;
        }
LABEL_16:
        v14 = *(_OWORD *)&v94[0].__begin_;
        *((_QWORD *)v25 + 2) = v94[0].__end_cap_.__value_;
        *(_OWORD *)v25 = v14;
        v80 = v25 + 24;
LABEL_17:
        if (++begin == end)
          goto LABEL_40;
      }
      v19 = v18;
      v20 = i;
      do
      {
LABEL_36:
        v28 = *v20++;
        LOBYTE(v19->first) = v28;
        v19 = (std::sub_match<const char *> *)((char *)v19 + 1);
      }
      while (v20 != v15);
      goto LABEL_37;
    }
LABEL_40:
    v29 = (char *)v79;
    v30 = v80;
    if (v80 - (_BYTE *)v79 != 24)
    {
      if ((char *)v79 + 24 != v80)
      {
        v31 = (char *)v79 + 23;
        do
        {
          v32 = (void **)(v31 - 23);
          if (*v31 < 0)
            operator delete(*v32);
          *(_OWORD *)v32 = *(_OWORD *)(v31 + 1);
          *(_QWORD *)(v31 - 7) = *(_QWORD *)(v31 + 17);
          v31[24] = 0;
          v31 += 24;
          *(v31 - 23) = 0;
          v29 += 24;
        }
        while (v31 + 1 != v30);
        v30 = v80;
      }
      while (v30 != v29)
      {
        if (*(v30 - 1) < 0)
          operator delete(*((void **)v30 - 3));
        v30 -= 24;
      }
      v80 = v29;
    }
    *(_QWORD *)&v33 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v97 = 0xAAAAAAAAAAAAAA00;
    v94[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
    v100 = v33;
    v95 = 0;
    v96 = 0;
    v98 = 0;
    v99 = 0;
    LOBYTE(v100) = 0;
    BYTE8(v100) = 0;
    v101 = 0;
    memset(v94, 0, 32);
    v34 = *(unsigned __int8 *)(a2 + 23);
    if ((v34 & 0x80u) == 0)
      v35 = (std::sub_match<const char *> *)a2;
    else
      v35 = *(std::sub_match<const char *> **)a2;
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v94[1].__begin_ + 1) = 0uLL;
    v36 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v82, v35, (std::sub_match<const char *> *)((char *)v35 + v34), v94, 0);
    v37 = *(unsigned __int8 *)(a2 + 23);
    if ((v37 & 0x80u) == 0)
      v38 = a2;
    else
      v38 = *(_QWORD *)a2;
    if ((v37 & 0x80u) != 0)
      v37 = *(_QWORD *)(a2 + 8);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(v86, v38, (std::sub_match<std::__wrap_iter<const char *>> *)(v38 + v37), (uint64_t *)v94, 0);
    if (v94[0].__begin_)
    {
      v94[0].__end_ = v94[0].__begin_;
      operator delete(v94[0].__begin_);
    }
    if (v36)
    {
      v40 = v86[0].__end_;
      v39 = v86[0].__begin_;
      if (v86[0].__begin_ != v86[0].__end_)
      {
        while (1)
        {
          if (!v39->matched)
          {
            memset(v94, 0, 24);
            v52 = v77;
            if ((unint64_t)v77 >= v78)
              goto LABEL_89;
            goto LABEL_67;
          }
          v43 = v39->first.__i_;
          v42 = v39->second.__i_;
          v44 = v42 - v39->first.__i_;
          if (v44 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v44 > 0x16)
          {
            v53 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v53 = v44 | 7;
            v54 = v53 + 1;
            v45 = (std::sub_match<const char *> *)operator new(v53 + 1);
            v94[0].__end_ = (std::vector<std::csub_match>::pointer)v44;
            v94[0].__end_cap_.__value_ = (std::sub_match<const char *> *)(v54 | 0x8000000000000000);
            v94[0].__begin_ = v45;
            if (v43 == v42)
            {
LABEL_84:
              LOBYTE(v45->first) = 0;
              v52 = v77;
              if ((unint64_t)v77 >= v78)
                goto LABEL_89;
              goto LABEL_67;
            }
          }
          else
          {
            HIBYTE(v94[0].__end_cap_.__value_) = (_BYTE)v42 - LOBYTE(v39->first.__i_);
            v45 = (std::sub_match<const char *> *)v94;
            if (v43 == v42)
              goto LABEL_84;
          }
          if (v44 < 0x20 || (unint64_t)((char *)v45 - v43) < 0x20)
            break;
          v46 = (std::sub_match<const char *> *)((char *)v45 + (v44 & 0xFFFFFFFFFFFFFFE0));
          v47 = &v43[v44 & 0xFFFFFFFFFFFFFFE0];
          v48 = (__int128 *)(v43 + 16);
          v49 = &v45->matched;
          v50 = v44 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v51 = *v48;
            *((_OWORD *)v49 - 1) = *(v48 - 1);
            *(_OWORD *)v49 = v51;
            v48 += 2;
            v49 += 32;
            v50 -= 32;
          }
          while (v50);
          if (v44 != (v44 & 0x7FFFFFFFFFFFFFE0))
            goto LABEL_87;
LABEL_88:
          LOBYTE(v46->first) = 0;
          v52 = v77;
          if ((unint64_t)v77 >= v78)
          {
LABEL_89:
            v77 = std::vector<std::string>::__push_back_slow_path<std::string>(&__p, (uint64_t)v94);
            if (SHIBYTE(v94[0].__end_cap_.__value_) < 0)
              operator delete(v94[0].__begin_);
            goto LABEL_68;
          }
LABEL_67:
          v41 = *(_OWORD *)&v94[0].__begin_;
          *((_QWORD *)v52 + 2) = v94[0].__end_cap_.__value_;
          *(_OWORD *)v52 = v41;
          v77 = v52 + 24;
LABEL_68:
          if (++v39 == v40)
            goto LABEL_91;
        }
        v46 = v45;
        v47 = v43;
        do
        {
LABEL_87:
          v55 = *v47++;
          LOBYTE(v46->first) = v55;
          v46 = (std::sub_match<const char *> *)((char *)v46 + 1);
        }
        while (v47 != v42);
        goto LABEL_88;
      }
LABEL_91:
      v57 = (char *)__p;
      v56 = v77;
      if (v77 - (_BYTE *)__p == 24)
      {
        v58 = (char *)v79;
        v59 = v80;
        v60 = 1;
        if (v79 != v80)
          goto LABEL_117;
LABEL_105:
        if (v57)
          goto LABEL_106;
LABEL_134:
        v64 = (char *)v79;
        if (v79)
          goto LABEL_135;
        goto LABEL_108;
      }
      if ((char *)__p + 24 != v77)
      {
        v61 = (char *)__p + 23;
        do
        {
          v62 = (void **)(v61 - 23);
          if (*v61 < 0)
            operator delete(*v62);
          *(_OWORD *)v62 = *(_OWORD *)(v61 + 1);
          *(_QWORD *)(v61 - 7) = *(_QWORD *)(v61 + 17);
          v61[24] = 0;
          v61 += 24;
          *(v61 - 23) = 0;
          v57 += 24;
        }
        while (v61 + 1 != v56);
        v56 = v77;
      }
      while (v56 != v57)
      {
        if (*(v56 - 1) < 0)
          operator delete(*((void **)v56 - 3));
        v56 -= 24;
      }
      v77 = v57;
      v57 = (char *)__p;
      v58 = (char *)v79;
      v59 = v80;
      v60 = 1;
      if (v79 == v80)
        goto LABEL_105;
      while (1)
      {
LABEL_117:
        v66 = v58[23];
        if ((v66 & 0x80u) == 0)
          v67 = v58[23];
        else
          v67 = *((_QWORD *)v58 + 1);
        v68 = v57[23];
        v69 = (char)v68;
        if ((v68 & 0x80u) != 0)
          v68 = *((_QWORD *)v57 + 1);
        if (v67 != v68)
          break;
        if (v69 >= 0)
          v70 = v57;
        else
          v70 = *(char **)v57;
        if ((v66 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v58, v70, *((_QWORD *)v58 + 1)))
            break;
        }
        else if (v58[23])
        {
          v71 = 0;
          while (v58[v71] == v70[v71])
          {
            if (v66 == ++v71)
              goto LABEL_116;
          }
          break;
        }
LABEL_116:
        v58 += 24;
        v57 += 24;
        if (v58 == v59)
          goto LABEL_133;
      }
    }
  }
  v60 = 0;
LABEL_133:
  v57 = (char *)__p;
  if (!__p)
    goto LABEL_134;
LABEL_106:
  v63 = v77;
  if (v77 != v57)
  {
    do
    {
      if (*(v63 - 1) < 0)
        operator delete(*((void **)v63 - 3));
      v63 -= 24;
    }
    while (v63 != v57);
    v77 = v57;
    operator delete(__p);
    v64 = (char *)v79;
    if (v79)
      goto LABEL_135;
LABEL_108:
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  v77 = v57;
  operator delete(v57);
  v64 = (char *)v79;
  if (!v79)
    goto LABEL_108;
LABEL_135:
  v72 = v80;
  if (v80 == v64)
  {
    v80 = v64;
    operator delete(v64);
    v65 = (std::__shared_weak_count *)v85;
    if (!(_QWORD)v85)
      goto LABEL_146;
    goto LABEL_142;
  }
  do
  {
    if (*(v72 - 1) < 0)
      operator delete(*((void **)v72 - 3));
    v72 -= 24;
  }
  while (v72 != v64);
  v80 = v64;
  operator delete(v79);
  v65 = (std::__shared_weak_count *)v85;
  if ((_QWORD)v85)
  {
LABEL_142:
    p_shared_owners = (unint64_t *)&v65->__shared_owners_;
    do
      v74 = __ldaxr(p_shared_owners);
    while (__stlxr(v74 - 1, p_shared_owners));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
LABEL_146:
  std::locale::~locale(v82);
  if (v86[0].__begin_)
  {
    v86[0].__end_ = v86[0].__begin_;
    operator delete(v86[0].__begin_);
  }
  return v60;
}

void sub_1BF65EF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  v26 = *(void **)(v24 - 192);
  if (v26)
  {
    *(_QWORD *)(v24 - 184) = v26;
    operator delete(v26);
  }
  std::vector<std::string>::~vector[abi:ne180100]((void **)&a9);
  std::vector<std::string>::~vector[abi:ne180100](&a12);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a15);
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(24 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = (std::string *)&v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)v11;
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1BF65F0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1BF65F0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::__exception_guard_exceptions<std::vector<std::string>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

__n128 std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(uint64_t a1, const void **a2, uint64_t a3, char a4, __n128 result)
{
  unint64_t j;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  int v17;
  const void *v18;
  size_t v19;
  int v20;
  const void *v21;
  size_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  __n128 *v27;
  size_t v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  unint64_t v35;
  const void **v36;
  const void **v37;
  const void **v38;
  const void *v39;
  const void **v40;
  size_t v41;
  size_t v42;
  int v43;
  const void *v44;
  const void **v45;
  size_t v46;
  size_t v47;
  int v48;
  const void **v49;
  __int128 v50;
  __int128 v51;
  __n128 *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  const void *v56;
  unint64_t v57;
  size_t v58;
  int v59;
  const void **v60;
  const void *v61;
  const void **v62;
  unint64_t v63;
  size_t v64;
  int v65;
  __n128 *v66;
  __n128 v67;
  __n128 v68;
  BOOL v69;
  __n128 v70;
  const void **v71;
  __n128 *v72;
  size_t v73;
  size_t v74;
  const void *v75;
  const void **v76;
  const void **v77;
  size_t v78;
  size_t v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  const void *v83;
  size_t v84;
  size_t v85;
  int v86;
  const void **k;
  const void **v88;
  const void **v89;
  size_t v90;
  size_t v91;
  int v92;
  const void *v93;
  __int128 v94;
  __int128 v95;
  __n128 *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  const void *v100;
  unint64_t v101;
  size_t v102;
  int v103;
  const void **v104;
  const void *v105;
  const void **v106;
  const void *v107;
  size_t v108;
  int v109;
  __n128 *v110;
  __n128 v111;
  int v112;
  const void *v113;
  size_t v114;
  size_t v115;
  int v116;
  __n128 *v117;
  int v118;
  const void **v119;
  size_t v120;
  int v121;
  void *v122;
  const void *v123;
  const void *v124;
  size_t v125;
  size_t v126;
  int v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  __n128 *v131;
  __n128 *v132;
  int v133;
  const void *v134;
  size_t v135;
  int v136;
  __n128 *v137;
  size_t v138;
  size_t v139;
  int v140;
  __n128 v141;
  __n128 *v142;
  size_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  const void *v147;
  size_t v148;
  size_t v149;
  int v150;
  int64_t v151;
  int64_t v152;
  const void **v153;
  int64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  const void **v158;
  int v159;
  const void *v160;
  unint64_t v161;
  int v162;
  const void *v163;
  unint64_t v164;
  size_t v165;
  int v166;
  BOOL v167;
  uint64_t v168;
  int v169;
  const void *v170;
  size_t v171;
  int v172;
  const void *v173;
  size_t v174;
  size_t v175;
  int v176;
  BOOL v177;
  __n128 v178;
  __int128 v179;
  unint64_t v180;
  __n128 *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  const void *v186;
  unint64_t v187;
  int v188;
  const void *v189;
  unint64_t v190;
  size_t v191;
  int v192;
  BOOL v193;
  int v194;
  const void *v195;
  size_t v196;
  size_t v197;
  int v198;
  int64_t v199;
  uint64_t v200;
  uint64_t v201;
  __n128 *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const void *v206;
  size_t v207;
  int v208;
  const void *v209;
  size_t v210;
  size_t v211;
  int v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  const void *v218;
  size_t v219;
  int v220;
  __n128 *v221;
  size_t v222;
  size_t v223;
  int v224;
  __n128 v225;
  __n128 *v226;
  size_t v227;
  __n128 v228;
  __int128 v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  const void *v233;
  size_t v234;
  size_t v235;
  int v236;
  const void *v237;
  const void **v238;
  int v239;
  const void *v240;
  size_t v241;
  int v242;
  const void *v243;
  size_t v244;
  size_t v245;
  int v246;
  __n128 v247;
  __n128 *v248;
  size_t v249;
  uint64_t i;
  int v251;
  const void *v252;
  size_t v253;
  size_t v254;
  int v255;
  const void *v256;
  uint64_t v257;
  const void **v258;
  const void **v259;
  size_t v261;
  const void *v262;
  uint64_t v263;
  __n128 *v264;
  const void *v265;
  const void **v266;
  int64_t v267;
  const void *v268;
  const void **v269;
  const void **v270;
  __n128 v271;
  int64_t v272;

LABEL_1:
  v266 = a2 - 3;
  v269 = a2;
  v258 = a2 - 9;
  v259 = a2 - 6;
  j = a1;
  while (2)
  {
    a1 = j;
    v9 = (uint64_t)a2 - j;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v117 = (__n128 *)(a2 - 3);
        v118 = *((char *)a2 - 1);
        if (v118 >= 0)
          v119 = a2 - 3;
        else
          v119 = (const void **)*(a2 - 3);
        if (v118 >= 0)
          v120 = *((unsigned __int8 *)a2 - 1);
        else
          v120 = (size_t)*(a2 - 2);
        v121 = *(char *)(a1 + 23);
        v122 = *(void **)a1;
        v123 = *(const void **)(a1 + 8);
        if (v121 >= 0)
          v124 = (const void *)a1;
        else
          v124 = *(const void **)a1;
        if (v121 >= 0)
          v125 = *(unsigned __int8 *)(a1 + 23);
        else
          v125 = *(_QWORD *)(a1 + 8);
        if (v125 >= v120)
          v126 = v120;
        else
          v126 = v125;
        v127 = memcmp(v119, v124, v126);
        if (v127)
        {
          if (v127 < 0)
            return result;
        }
        else if (v120 <= v125)
        {
          return result;
        }
        v256 = *(const void **)(a1 + 16);
        v257 = (uint64_t)*(a2 - 1);
        result = *v117;
        *(__n128 *)a1 = *v117;
        *(_QWORD *)(a1 + 16) = v257;
        *(a2 - 3) = v122;
        *(a2 - 2) = v123;
        *(a2 - 1) = v256;
        return result;
      case 3uLL:
        result.n128_u64[0] = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, v266).n128_u64[0];
        return result;
      case 4uLL:
        result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, v266).n128_u64[0];
        return result;
      case 5uLL:
        result.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, v266).n128_u64[0];
        return result;
      default:
        if (v9 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void **)a1 == a2)
              return result;
            v128 = (const void *)(a1 + 24);
            if ((const void **)(a1 + 24) == a2)
              return result;
            v129 = 0;
            v130 = a1;
            while (1)
            {
              v132 = (__n128 *)v130;
              v130 = (uint64_t)v128;
              v133 = v132[2].n128_i8[15];
              if (v133 >= 0)
                v134 = v128;
              else
                v134 = (const void *)v132[1].n128_u64[1];
              if (v133 >= 0)
                v135 = v132[2].n128_u8[15];
              else
                v135 = v132[2].n128_u64[0];
              v136 = v132[1].n128_i8[7];
              if (v136 >= 0)
                v137 = v132;
              else
                v137 = (__n128 *)v132->n128_u64[0];
              if (v136 >= 0)
                v138 = v132[1].n128_u8[7];
              else
                v138 = v132->n128_u64[1];
              if (v138 >= v135)
                v139 = v135;
              else
                v139 = v138;
              v140 = memcmp(v134, v137, v139);
              if (v140)
              {
                if (v140 < 0)
                  goto LABEL_259;
              }
              else if (v135 <= v138)
              {
                goto LABEL_259;
              }
              v141 = *(__n128 *)v130;
              v272 = *(_QWORD *)(v130 + 16);
              v271 = v141;
              if (v272 >= 0)
                v142 = &v271;
              else
                v142 = (__n128 *)v141.n128_u64[0];
              if (v272 >= 0)
                v143 = HIBYTE(v272);
              else
                v143 = v141.n128_u64[1];
              *(_QWORD *)(v130 + 16) = v132[1].n128_u64[0];
              *(__n128 *)v130 = *v132;
              v132[1].n128_u8[7] = 0;
              v132->n128_u8[0] = 0;
              v131 = (__n128 *)a1;
              if (v132 != (__n128 *)a1)
              {
                v144 = v129;
                while (1)
                {
                  v145 = a1 + v144;
                  v146 = *(char *)(a1 + v144 - 1);
                  if (v146 >= 0)
                    v147 = (const void *)(a1 + v144 - 24);
                  else
                    v147 = *(const void **)(a1 + v144 - 24);
                  if (v146 >= 0)
                    v148 = *(unsigned __int8 *)(a1 + v144 - 1);
                  else
                    v148 = *(_QWORD *)(a1 + v144 - 16);
                  if (v148 >= v143)
                    v149 = v143;
                  else
                    v149 = v148;
                  v150 = memcmp(v142, v147, v149);
                  if (v150)
                  {
                    if (v150 < 0)
                    {
                      v131 = (__n128 *)(a1 + v144);
                      break;
                    }
                  }
                  else if (v143 <= v148)
                  {
                    v131 = v132;
                    break;
                  }
                  v132 = (__n128 *)((char *)v132 - 24);
                  *(_OWORD *)v145 = *(_OWORD *)(a1 + v144 - 24);
                  *(_QWORD *)(v145 + 16) = *(_QWORD *)(a1 + v144 - 8);
                  *(_BYTE *)(v145 - 1) = 0;
                  *(_BYTE *)(v145 - 24) = 0;
                  v144 -= 24;
                  if (!v144)
                  {
                    v131 = (__n128 *)a1;
                    break;
                  }
                }
              }
              result = v271;
              v131[1].n128_u64[0] = v272;
              *v131 = result;
LABEL_259:
              v128 = (const void *)(v130 + 24);
              v129 += 24;
              if ((const void **)(v130 + 24) == v269)
                return result;
            }
          }
          if ((const void **)a1 == a2)
            return result;
          v237 = (const void *)(a1 + 24);
          if ((const void **)(a1 + 24) == a2)
            return result;
LABEL_471:
          v238 = (const void **)a1;
          a1 = (uint64_t)v237;
          v239 = *((char *)v238 + 47);
          if (v239 >= 0)
            v240 = v237;
          else
            v240 = v238[3];
          if (v239 >= 0)
            v241 = *((unsigned __int8 *)v238 + 47);
          else
            v241 = (size_t)v238[4];
          v242 = *((char *)v238 + 23);
          if (v242 >= 0)
            v243 = v238;
          else
            v243 = *v238;
          if (v242 >= 0)
            v244 = *((unsigned __int8 *)v238 + 23);
          else
            v244 = (size_t)v238[1];
          if (v244 >= v241)
            v245 = v241;
          else
            v245 = v244;
          v246 = memcmp(v240, v243, v245);
          if (v246)
          {
            if (v246 < 0)
              goto LABEL_470;
          }
          else if (v241 <= v244)
          {
            goto LABEL_470;
          }
          v247 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v247;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v272 >= 0)
            v248 = &v271;
          else
            v248 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v249 = HIBYTE(v272);
          else
            v249 = v271.n128_u64[1];
          for (i = a1; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_QWORD *)(i + 16) = *(_QWORD *)(i - 8);
            *(_BYTE *)(i - 1) = 0;
            *(_BYTE *)(i - 24) = 0;
            v251 = *(char *)(i - 25);
            if (v251 >= 0)
              v252 = (const void *)(i - 48);
            else
              v252 = *(const void **)(i - 48);
            if (v251 >= 0)
              v253 = *(unsigned __int8 *)(i - 25);
            else
              v253 = *(_QWORD *)(i - 40);
            if (v253 >= v249)
              v254 = v249;
            else
              v254 = v253;
            v255 = memcmp(v248, v252, v254);
            if (v255)
            {
              if (v255 < 0)
              {
LABEL_469:
                result = v271;
                *(_QWORD *)(i - 8) = v272;
                *(__n128 *)(i - 24) = result;
LABEL_470:
                v237 = (const void *)(a1 + 24);
                if ((const void **)(a1 + 24) == a2)
                  return result;
                goto LABEL_471;
              }
            }
            else if (v249 <= v253)
            {
              goto LABEL_469;
            }
          }
        }
        if (!a3)
        {
          if ((const void **)a1 == a2)
            return result;
          v151 = (v10 - 2) >> 1;
          v152 = v151;
          while (1)
          {
            v154 = v152;
            if (v151 < v152)
              goto LABEL_306;
            v155 = (2 * v152) | 1;
            v156 = a1 + 24 * v155;
            v157 = 2 * v152 + 2;
            if (v157 >= (uint64_t)v10)
              goto LABEL_330;
            v158 = (const void **)(v156 + 24);
            v159 = *(char *)(v156 + 23);
            v160 = v159 >= 0 ? (const void *)(a1 + 24 * v155) : *(const void **)v156;
            v161 = v159 >= 0 ? *(unsigned __int8 *)(v156 + 23) : *(_QWORD *)(v156 + 8);
            v162 = *(char *)(v156 + 47);
            v163 = v162 >= 0 ? (const void *)(v156 + 24) : *(const void **)(v156 + 24);
            v164 = v162 >= 0 ? *(unsigned __int8 *)(v156 + 47) : *(_QWORD *)(v156 + 32);
            v165 = v164 >= v161 ? v161 : v164;
            v166 = memcmp(v160, v163, v165);
            if (v166)
              break;
            v167 = v161 >= v164;
            if (v161 == v164)
            {
              v158 = (const void **)(a1 + 24 * v155);
              v157 = (2 * v154) | 1;
              a2 = v269;
              goto LABEL_331;
            }
            a2 = v269;
            if (!v167)
              goto LABEL_330;
LABEL_331:
            v168 = a1 + 24 * v154;
            v169 = *((char *)v158 + 23);
            if (v169 >= 0)
              v170 = v158;
            else
              v170 = *v158;
            if (v169 >= 0)
              v171 = *((unsigned __int8 *)v158 + 23);
            else
              v171 = (size_t)v158[1];
            v172 = *(char *)(v168 + 23);
            if (v172 >= 0)
              v173 = (const void *)(a1 + 24 * v154);
            else
              v173 = *(const void **)v168;
            if (v172 >= 0)
              v174 = *(unsigned __int8 *)(v168 + 23);
            else
              v174 = *(_QWORD *)(v168 + 8);
            if (v174 >= v171)
              v175 = v171;
            else
              v175 = v174;
            v176 = memcmp(v170, v173, v175);
            if (v176)
            {
              v151 = (v10 - 2) >> 1;
              if (v176 < 0)
                goto LABEL_350;
            }
            else
            {
              v177 = v171 > v174;
              v151 = (v10 - 2) >> 1;
              if (!v177)
              {
LABEL_350:
                v178 = *(__n128 *)v168;
                v272 = *(_QWORD *)(v168 + 16);
                v271 = v178;
                *(_QWORD *)(v168 + 8) = 0;
                *(_QWORD *)(v168 + 16) = 0;
                *(_QWORD *)v168 = 0;
                v179 = *(_OWORD *)v158;
                *(_QWORD *)(v168 + 16) = v158[2];
                *(_OWORD *)v168 = v179;
                *((_BYTE *)v158 + 23) = 0;
                *(_BYTE *)v158 = 0;
                if (v151 >= v157)
                {
                  v180 = HIBYTE(v272);
                  v181 = &v271;
                  if (v272 < 0)
                  {
                    v180 = v271.n128_u64[1];
                    v181 = (__n128 *)v271.n128_u64[0];
                  }
                  v261 = v180;
                  v264 = v181;
                  v267 = v154;
                  while (1)
                  {
                    v183 = (2 * v157) | 1;
                    v184 = a1 + 24 * v183;
                    v157 = 2 * v157 + 2;
                    if (v157 >= (uint64_t)v10)
                      goto LABEL_378;
                    v153 = (const void **)(v184 + 24);
                    v185 = *(char *)(v184 + 23);
                    v186 = v185 >= 0 ? (const void *)(a1 + 24 * v183) : *(const void **)v184;
                    v187 = v185 >= 0 ? *(unsigned __int8 *)(v184 + 23) : *(_QWORD *)(v184 + 8);
                    v188 = *(char *)(v184 + 47);
                    v189 = v188 >= 0 ? (const void *)(v184 + 24) : *(const void **)(v184 + 24);
                    v190 = v188 >= 0 ? *(unsigned __int8 *)(v184 + 47) : *(_QWORD *)(v184 + 32);
                    v191 = v190 >= v187 ? v187 : v190;
                    v192 = memcmp(v186, v189, v191);
                    if (v192)
                      break;
                    v193 = v187 >= v190;
                    if (v187 == v190)
                    {
                      v153 = (const void **)(a1 + 24 * v183);
                      v157 = v183;
                      a2 = v269;
                      v151 = (v10 - 2) >> 1;
                      goto LABEL_379;
                    }
                    a2 = v269;
                    v151 = (v10 - 2) >> 1;
                    if (!v193)
                      goto LABEL_378;
LABEL_379:
                    v194 = *((char *)v153 + 23);
                    if (v194 >= 0)
                      v195 = v153;
                    else
                      v195 = *v153;
                    if (v194 >= 0)
                      v196 = *((unsigned __int8 *)v153 + 23);
                    else
                      v196 = (size_t)v153[1];
                    if (v261 >= v196)
                      v197 = v196;
                    else
                      v197 = v261;
                    v198 = memcmp(v195, v264, v197);
                    if (v198)
                    {
                      v154 = v267;
                      if ((v198 & 0x80000000) == 0)
                        goto LABEL_304;
                    }
                    else
                    {
                      v154 = v267;
                      if (v196 > v261)
                        goto LABEL_304;
                    }
                    v182 = *(_OWORD *)v153;
                    v158[2] = v153[2];
                    *(_OWORD *)v158 = v182;
                    *((_BYTE *)v153 + 23) = 0;
                    *(_BYTE *)v153 = 0;
                    v158 = v153;
                    if (v151 < v157)
                      goto LABEL_305;
                  }
                  a2 = v269;
                  v151 = (v10 - 2) >> 1;
                  if ((v192 & 0x80000000) == 0)
                    goto LABEL_379;
LABEL_378:
                  v153 = (const void **)(a1 + 24 * v183);
                  v157 = v183;
                  goto LABEL_379;
                }
LABEL_304:
                v153 = v158;
LABEL_305:
                result = v271;
                v153[2] = (const void *)v272;
                *(__n128 *)v153 = result;
              }
            }
LABEL_306:
            v152 = v154 - 1;
            if (!v154)
            {
              v199 = v9 / 0x18uLL;
              while (2)
              {
                if (v199 < 2)
                  goto LABEL_393;
                v200 = 0;
                v268 = *(const void **)a1;
                v270 = a2;
                v262 = *(const void **)(a1 + 16);
                v265 = *(const void **)(a1 + 8);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                v201 = a1;
                *(_QWORD *)a1 = 0;
LABEL_399:
                v203 = v201 + 24 * v200 + 24;
                v204 = (2 * v200) | 1;
                v200 = 2 * v200 + 2;
                if (v200 >= v199)
                  goto LABEL_397;
                v202 = (__n128 *)(v203 + 24);
                v205 = *(char *)(v203 + 23);
                if (v205 >= 0)
                  v206 = (const void *)v203;
                else
                  v206 = *(const void **)v203;
                if (v205 >= 0)
                  v207 = *(unsigned __int8 *)(v203 + 23);
                else
                  v207 = *(_QWORD *)(v203 + 8);
                v208 = *(char *)(v203 + 47);
                if (v208 >= 0)
                  v209 = (const void *)(v203 + 24);
                else
                  v209 = *(const void **)(v203 + 24);
                if (v208 >= 0)
                  v210 = *(unsigned __int8 *)(v203 + 47);
                else
                  v210 = *(_QWORD *)(v203 + 32);
                if (v210 >= v207)
                  v211 = v207;
                else
                  v211 = v210;
                v212 = memcmp(v206, v209, v211);
                if (v212)
                {
                  if ((v212 & 0x80000000) == 0)
                    goto LABEL_417;
LABEL_397:
                  v202 = (__n128 *)v203;
                  v200 = v204;
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                  {
LABEL_398:
                    result = *v202;
                    *(_QWORD *)(v201 + 16) = v202[1].n128_u64[0];
                    *(__n128 *)v201 = result;
                    v202[1].n128_u8[7] = 0;
                    v202->n128_u8[0] = 0;
                    v201 = (uint64_t)v202;
                    if (v200 > (uint64_t)((unint64_t)(v199 - 2) >> 1))
                    {
                      if (v202 == (__n128 *)(a2 - 3))
                      {
                        v202->n128_u64[0] = (unint64_t)v268;
                        v202->n128_u64[1] = (unint64_t)v265;
                        v202[1].n128_u64[0] = (unint64_t)v262;
                      }
                      else
                      {
                        result = *(__n128 *)(a2 - 3);
                        v202[1].n128_u64[0] = (unint64_t)*(a2 - 1);
                        *v202 = result;
                        *(a2 - 3) = v268;
                        *(a2 - 2) = v265;
                        *(a2 - 1) = v262;
                        v213 = (uint64_t)&v202[1].n128_i64[1] - a1;
                        if (v213 >= 25)
                        {
                          v214 = v213 / 0x18uLL - 2;
                          v215 = v214 >> 1;
                          v216 = a1 + 24 * (v214 >> 1);
                          v217 = *(char *)(v216 + 23);
                          if (v217 >= 0)
                            v218 = (const void *)(a1 + 24 * (v214 >> 1));
                          else
                            v218 = *(const void **)v216;
                          if (v217 >= 0)
                            v219 = *(unsigned __int8 *)(v216 + 23);
                          else
                            v219 = *(_QWORD *)(v216 + 8);
                          v220 = v202[1].n128_i8[7];
                          if (v220 >= 0)
                            v221 = v202;
                          else
                            v221 = (__n128 *)v202->n128_u64[0];
                          if (v220 >= 0)
                            v222 = v202[1].n128_u8[7];
                          else
                            v222 = v202->n128_u64[1];
                          if (v222 >= v219)
                            v223 = v219;
                          else
                            v223 = v222;
                          v224 = memcmp(v218, v221, v223);
                          if (v224)
                          {
                            if (v224 < 0)
                              goto LABEL_393;
LABEL_443:
                            v225 = *v202;
                            v272 = v202[1].n128_i64[0];
                            v271 = v225;
                            v202->n128_u64[1] = 0;
                            v202[1].n128_u64[0] = 0;
                            v202->n128_u64[0] = 0;
                            if (v272 >= 0)
                              v226 = &v271;
                            else
                              v226 = (__n128 *)v271.n128_u64[0];
                            if (v272 >= 0)
                              v227 = HIBYTE(v272);
                            else
                              v227 = v271.n128_u64[1];
                            v228 = *(__n128 *)v216;
                            v202[1].n128_u64[0] = *(_QWORD *)(v216 + 16);
                            *v202 = v228;
                            *(_BYTE *)(v216 + 23) = 0;
                            *(_BYTE *)v216 = 0;
                            if (v214 >= 2)
                            {
                              while (1)
                              {
                                v230 = v215 - 1;
                                v215 = (v215 - 1) >> 1;
                                v231 = a1 + 24 * v215;
                                v232 = *(char *)(v231 + 23);
                                if (v232 >= 0)
                                  v233 = (const void *)(a1 + 24 * v215);
                                else
                                  v233 = *(const void **)v231;
                                if (v232 >= 0)
                                  v234 = *(unsigned __int8 *)(v231 + 23);
                                else
                                  v234 = *(_QWORD *)(v231 + 8);
                                if (v227 >= v234)
                                  v235 = v234;
                                else
                                  v235 = v227;
                                v236 = memcmp(v233, v226, v235);
                                if (v236)
                                {
                                  if (v236 < 0)
                                    break;
                                }
                                else if (v234 <= v227)
                                {
                                  break;
                                }
                                v229 = *(_OWORD *)v231;
                                *(_QWORD *)(v216 + 16) = *(_QWORD *)(v231 + 16);
                                *(_OWORD *)v216 = v229;
                                *(_BYTE *)(v231 + 23) = 0;
                                *(_BYTE *)v231 = 0;
                                v216 = a1 + 24 * v215;
                                if (v230 <= 1)
                                  goto LABEL_465;
                              }
                            }
                            v231 = v216;
LABEL_465:
                            result = v271;
                            *(_QWORD *)(v231 + 16) = v272;
                            *(__n128 *)v231 = result;
                            a2 = v270;
                          }
                          else if (v219 > v222)
                          {
                            goto LABEL_443;
                          }
                        }
                      }
LABEL_393:
                      a2 -= 3;
                      v177 = (unint64_t)v199-- > 2;
                      if (!v177)
                        return result;
                      continue;
                    }
                    goto LABEL_399;
                  }
                }
                else
                {
                  if (v207 == v210 || v207 < v210)
                    goto LABEL_397;
LABEL_417:
                  if ((*(char *)(v201 + 23) & 0x80000000) == 0)
                    goto LABEL_398;
                }
                break;
              }
              operator delete(*(void **)v201);
              goto LABEL_398;
            }
          }
          a2 = v269;
          if ((v166 & 0x80000000) == 0)
            goto LABEL_331;
LABEL_330:
          v158 = (const void **)(a1 + 24 * v155);
          v157 = (2 * v154) | 1;
          goto LABEL_331;
        }
        v11 = v10 >> 1;
        v12 = a1 + 24 * (v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v12, a1, v266);
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, v12, v266);
          v13 = 24 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 24, v13 + a1 - 24, v259);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1 + 48, a1 + 24 + v13, v258);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(v13 + a1 - 24, v12, (const void **)(a1 + 24 + v13));
          v14 = *(void **)a1;
          v15 = *(_OWORD *)(a1 + 8);
          v16 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = v16;
          *(_QWORD *)v12 = v14;
          *(_OWORD *)(v12 + 8) = v15;
          v263 = a3 - 1;
          if ((a4 & 1) != 0)
            goto LABEL_26;
        }
        v17 = *(char *)(a1 - 1);
        if (v17 >= 0)
          v18 = (const void *)(a1 - 24);
        else
          v18 = *(const void **)(a1 - 24);
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a1 - 1);
        else
          v19 = *(_QWORD *)(a1 - 16);
        v20 = *(char *)(a1 + 23);
        if (v20 >= 0)
          v21 = (const void *)a1;
        else
          v21 = *(const void **)a1;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a1 + 23);
        else
          v22 = *(_QWORD *)(a1 + 8);
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        v24 = memcmp(v18, v21, v23);
        if (v24)
        {
          if ((v24 & 0x80000000) == 0)
            goto LABEL_26;
LABEL_124:
          v70 = *(__n128 *)a1;
          v272 = *(_QWORD *)(a1 + 16);
          v271 = v70;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v71 = a2;
          if (v272 >= 0)
            v72 = &v271;
          else
            v72 = (__n128 *)v271.n128_u64[0];
          if (v272 >= 0)
            v73 = HIBYTE(v272);
          else
            v73 = v271.n128_u64[1];
          v74 = *((unsigned __int8 *)v71 - 1);
          v76 = (const void **)*(v71 - 3);
          v75 = *(v71 - 2);
          if ((v74 & 0x80u) == 0)
            v77 = v266;
          else
            v77 = (const void **)*(v71 - 3);
          if ((v74 & 0x80u) == 0)
            v78 = *((unsigned __int8 *)v71 - 1);
          else
            v78 = (size_t)*(v71 - 2);
          if (v78 >= v73)
            v79 = v73;
          else
            v79 = v78;
          v80 = memcmp(v72, v77, v79);
          if (v80)
          {
            if ((v80 & 0x80000000) == 0)
              goto LABEL_141;
          }
          else if (v73 > v78)
          {
LABEL_141:
            v81 = a1 + 24;
            do
            {
              while (1)
              {
                j = v81;
                v82 = *(unsigned __int8 *)(v81 + 23);
                v83 = (v82 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v84 = (v82 & 0x80u) == 0 ? v82 : *(_QWORD *)(j + 8);
                v85 = v84 >= v73 ? v73 : v84;
                v86 = memcmp(v72, v83, v85);
                v81 = j + 24;
                if (v86)
                  break;
                if (v73 > v84)
                  goto LABEL_154;
              }
            }
            while (v86 < 0);
            goto LABEL_154;
          }
          for (j = a1 + 24; j < (unint64_t)v269; j += 24)
          {
            v112 = *(char *)(j + 23);
            if (v112 >= 0)
              v113 = (const void *)j;
            else
              v113 = *(const void **)j;
            if (v112 >= 0)
              v114 = *(unsigned __int8 *)(j + 23);
            else
              v114 = *(_QWORD *)(j + 8);
            if (v114 >= v73)
              v115 = v73;
            else
              v115 = v114;
            v116 = memcmp(v72, v113, v115);
            if (v116)
            {
              if ((v116 & 0x80000000) == 0)
                break;
            }
            else if (v73 > v114)
            {
              break;
            }
          }
LABEL_154:
          k = v269;
          if (j < (unint64_t)v269)
          {
            for (k = v266; ; v75 = k[1])
            {
              if ((v74 & 0x80u) == 0)
                v89 = k;
              else
                v89 = v76;
              if ((v74 & 0x80u) == 0)
                v90 = v74;
              else
                v90 = (size_t)v75;
              if (v90 >= v73)
                v91 = v73;
              else
                v91 = v90;
              v92 = memcmp(v72, v89, v91);
              if (v92)
              {
                if (v92 < 0)
                  break;
              }
              else if (v73 <= v90)
              {
                break;
              }
              v88 = (const void **)*(k - 3);
              k -= 3;
              v76 = v88;
              v74 = *((unsigned __int8 *)k + 23);
            }
          }
          if (j < (unint64_t)k)
          {
            v93 = *(const void **)j;
            do
            {
              v94 = *(_OWORD *)(j + 8);
              v95 = *(_OWORD *)k;
              *(_QWORD *)(j + 16) = k[2];
              *(_OWORD *)j = v95;
              *k = v93;
              *(_OWORD *)(k + 1) = v94;
              if (v272 >= 0)
                v96 = &v271;
              else
                v96 = (__n128 *)v271.n128_u64[0];
              if (v272 >= 0)
                v97 = HIBYTE(v272);
              else
                v97 = v271.n128_u64[1];
              v98 = j + 24;
              do
              {
                while (1)
                {
                  j = v98;
                  v99 = *(unsigned __int8 *)(v98 + 23);
                  v93 = *(const void **)j;
                  v100 = (v99 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                  v101 = (v99 & 0x80u) == 0 ? v99 : *(_QWORD *)(j + 8);
                  v102 = v101 >= v97 ? v97 : v101;
                  v103 = memcmp(v96, v100, v102);
                  v98 = j + 24;
                  if (v103)
                    break;
                  if (v97 > v101)
                    goto LABEL_191;
                }
              }
              while (v103 < 0);
LABEL_191:
              v104 = k - 3;
              do
              {
                while (1)
                {
                  k = v104;
                  v105 = (const void *)*((unsigned __int8 *)v104 + 23);
                  v106 = (char)v105 >= 0 ? k : (const void **)*k;
                  v107 = (char)v105 >= 0 ? v105 : k[1];
                  v108 = (unint64_t)v107 >= v97 ? v97 : (size_t)v107;
                  v109 = memcmp(v96, v106, v108);
                  v104 = k - 3;
                  if (v109)
                    break;
                  if (v97 <= (unint64_t)v107)
                    goto LABEL_171;
                }
              }
              while ((v109 & 0x80000000) == 0);
LABEL_171:
              ;
            }
            while (j < (unint64_t)k);
          }
          v110 = (__n128 *)(j - 24);
          if (j - 24 == a1)
          {
            a2 = v269;
            a3 = v263;
            if (*(char *)(j - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v111 = *v110;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
            *(__n128 *)a1 = v111;
            *(_BYTE *)(j - 1) = 0;
            *(_BYTE *)(j - 24) = 0;
            a2 = v269;
            a3 = v263;
          }
          a4 = 0;
          result = v271;
          *(_QWORD *)(j - 8) = v272;
          *v110 = result;
          continue;
        }
        if (v19 <= v22)
          goto LABEL_124;
LABEL_26:
        v25 = 0;
        v26 = *(__n128 *)a1;
        v272 = *(_QWORD *)(a1 + 16);
        v271 = v26;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        if (v272 >= 0)
          v27 = &v271;
        else
          v27 = (__n128 *)v271.n128_u64[0];
        if (v272 >= 0)
          v28 = HIBYTE(v272);
        else
          v28 = v271.n128_u64[1];
        while (2)
        {
          v29 = *(const void **)(a1 + v25 + 24);
          v30 = *(char *)(a1 + v25 + 47);
          if (v30 >= 0)
            v31 = (const void *)(a1 + v25 + 24);
          else
            v31 = *(const void **)(a1 + v25 + 24);
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(a1 + v25 + 47);
          else
            v32 = *(_QWORD *)(a1 + v25 + 32);
          if (v28 >= v32)
            v33 = v32;
          else
            v33 = v28;
          v34 = memcmp(v31, v27, v33);
          if (!v34)
          {
            if (v32 <= v28)
              goto LABEL_45;
LABEL_33:
            v25 += 24;
            continue;
          }
          break;
        }
        if ((v34 & 0x80000000) == 0)
          goto LABEL_33;
LABEL_45:
        v35 = a1 + v25 + 24;
        v36 = v266;
        if (v25)
        {
          do
          {
            while (1)
            {
              v37 = v36;
              v44 = (const void *)*((unsigned __int8 *)v36 + 23);
              v45 = (char)v44 >= 0 ? v37 : (const void **)*v37;
              v46 = (size_t)((char)v44 >= 0 ? v44 : v37[1]);
              v47 = v28 >= v46 ? v46 : v28;
              v48 = memcmp(v45, v27, v47);
              v36 = v37 - 3;
              if (v48)
                break;
              if (v46 > v28)
                goto LABEL_76;
            }
          }
          while (v48 < 0);
        }
        else
        {
          v37 = v269;
          if (v35 < (unint64_t)v269)
          {
            v38 = v266;
            do
            {
              while (1)
              {
                v37 = v38;
                v39 = (const void *)*((unsigned __int8 *)v38 + 23);
                v40 = (char)v39 >= 0 ? v37 : (const void **)*v37;
                v41 = (size_t)((char)v39 >= 0 ? v39 : v37[1]);
                v42 = v28 >= v41 ? v41 : v28;
                v43 = memcmp(v40, v27, v42);
                v38 = v37 - 3;
                if (!v43)
                  break;
                if (v35 >= (unint64_t)v37 || (v43 & 0x80000000) == 0)
                  goto LABEL_76;
              }
            }
            while (v35 < (unint64_t)v37 && v41 <= v28);
          }
        }
LABEL_76:
        if (v35 >= (unint64_t)v37)
        {
          j = v35;
        }
        else
        {
          v49 = v37;
          j = v35;
          do
          {
            v50 = *(_OWORD *)(j + 8);
            v51 = *(_OWORD *)v49;
            *(_QWORD *)(j + 16) = v49[2];
            *(_OWORD *)j = v51;
            *v49 = v29;
            *(_OWORD *)(v49 + 1) = v50;
            if (v272 >= 0)
              v52 = &v271;
            else
              v52 = (__n128 *)v271.n128_u64[0];
            if (v272 >= 0)
              v53 = HIBYTE(v272);
            else
              v53 = v271.n128_u64[1];
            v54 = j + 24;
            do
            {
              while (1)
              {
                j = v54;
                v55 = *(unsigned __int8 *)(v54 + 23);
                v29 = *(const void **)j;
                v56 = (v55 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                v57 = (v55 & 0x80u) == 0 ? v55 : *(_QWORD *)(j + 8);
                v58 = v53 >= v57 ? v57 : v53;
                v59 = memcmp(v56, v52, v58);
                v54 = j + 24;
                if (v59)
                  break;
                if (v57 <= v53)
                  goto LABEL_98;
              }
            }
            while ((v59 & 0x80000000) == 0);
LABEL_98:
            v60 = v49 - 3;
            do
            {
              while (1)
              {
                v49 = v60;
                v61 = (const void *)*((unsigned __int8 *)v60 + 23);
                v62 = (char)v61 >= 0 ? v49 : (const void **)*v49;
                v63 = (unint64_t)((char)v61 >= 0 ? v61 : v49[1]);
                v64 = v53 >= v63 ? v63 : v53;
                v65 = memcmp(v62, v52, v64);
                v60 = v49 - 3;
                if (v65)
                  break;
                if (v63 > v53)
                  goto LABEL_78;
              }
            }
            while (v65 < 0);
LABEL_78:
            ;
          }
          while (j < (unint64_t)v49);
        }
        v66 = (__n128 *)(j - 24);
        if (j - 24 == a1)
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(j - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          a2 = v269;
          a3 = v263;
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v67 = *v66;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(j - 8);
          *(__n128 *)a1 = v67;
          *(_BYTE *)(j - 1) = 0;
          *(_BYTE *)(j - 24) = 0;
        }
        v68 = v271;
        *(_QWORD *)(j - 8) = v272;
        *v66 = v68;
        if (v35 < (unint64_t)v37)
        {
LABEL_122:
          std::__introsort<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*,false>(a1, j - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v69 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, (const void **)(j - 24));
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(j, a2))
        {
          if (v69)
            continue;
          goto LABEL_122;
        }
        a2 = (const void **)(j - 24);
        if (!v69)
          goto LABEL_1;
        return result;
    }
  }
}

__n128 std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6;
  const void *v7;
  const void *v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  int v18;
  const void *v19;
  size_t v20;
  size_t v21;
  int v22;
  const void *v23;
  const void *v24;
  __n128 result;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  const void *v36;
  size_t v37;
  size_t v38;
  int v39;
  const void *v40;
  const void *v41;
  int v42;
  const void *v43;
  size_t v44;
  int v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  size_t v49;
  size_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *(char *)(a2 + 23);
  v7 = *(const void **)a2;
  v8 = *(const void **)(a2 + 8);
  if (v6 >= 0)
    v9 = (const void *)a2;
  else
    v9 = *(const void **)a2;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = *(char *)(a1 + 23);
  v13 = *(const void **)a1;
  v12 = *(const void **)(a1 + 8);
  if (v11 >= 0)
    v14 = (const void *)a1;
  else
    v14 = *(const void **)a1;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 23);
  else
    v15 = *(_QWORD *)(a1 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      goto LABEL_18;
  }
  else if (v10 > v15)
  {
LABEL_18:
    v18 = *((char *)a3 + 23);
    if (v18 >= 0)
      v19 = a3;
    else
      v19 = *a3;
    if (v18 >= 0)
      v20 = *((unsigned __int8 *)a3 + 23);
    else
      v20 = (size_t)a3[1];
    if (v10 >= v20)
      v21 = v20;
    else
      v21 = v10;
    v22 = memcmp(v19, v9, v21);
    if (v22)
    {
      if ((v22 & 0x80000000) == 0)
      {
LABEL_29:
        v23 = *(const void **)(a1 + 16);
        v24 = a3[2];
        result = *(__n128 *)a3;
        *(_OWORD *)a1 = *(_OWORD *)a3;
        *(_QWORD *)(a1 + 16) = v24;
        *a3 = v13;
        a3[1] = v12;
        a3[2] = v23;
        return result;
      }
    }
    else if (v20 > v10)
    {
      goto LABEL_29;
    }
    v31 = *(_QWORD *)(a1 + 16);
    v32 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v32;
    *(_QWORD *)a2 = v13;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 16) = v31;
    v33 = *((char *)a3 + 23);
    if (v33 >= 0)
      v34 = a3;
    else
      v34 = *a3;
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)a3 + 23);
    else
      v35 = (size_t)a3[1];
    if (v31 >= 0)
      v36 = (const void *)a2;
    else
      v36 = v13;
    if (v31 >= 0)
      v37 = HIBYTE(v31);
    else
      v37 = (size_t)v12;
    if (v37 >= v35)
      v38 = v35;
    else
      v38 = v37;
    v39 = memcmp(v34, v36, v38);
    if (v39)
    {
      if (v39 < 0)
        return result;
    }
    else if (v35 <= v37)
    {
      return result;
    }
    result = *(__n128 *)a3;
    *(_QWORD *)(a2 + 16) = a3[2];
    *(__n128 *)a2 = result;
    *a3 = v13;
    a3[1] = v12;
    a3[2] = (const void *)v31;
    return result;
  }
  v26 = *((char *)a3 + 23);
  if (v26 >= 0)
    v27 = a3;
  else
    v27 = *a3;
  if (v26 >= 0)
    v28 = *((unsigned __int8 *)a3 + 23);
  else
    v28 = (size_t)a3[1];
  if (v10 >= v28)
    v29 = v28;
  else
    v29 = v10;
  v30 = memcmp(v27, v9, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v28 <= v10)
  {
    return result;
  }
  v40 = *(const void **)(a2 + 16);
  v41 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v41;
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v40;
  v42 = *(char *)(a2 + 23);
  if (v42 >= 0)
    v43 = (const void *)a2;
  else
    v43 = *(const void **)a2;
  if (v42 >= 0)
    v44 = *(unsigned __int8 *)(a2 + 23);
  else
    v44 = *(_QWORD *)(a2 + 8);
  v45 = *(char *)(a1 + 23);
  v46 = *(const void **)a1;
  v47 = *(_QWORD *)(a1 + 8);
  if (v45 >= 0)
    v48 = (const void *)a1;
  else
    v48 = *(const void **)a1;
  if (v45 >= 0)
    v49 = *(unsigned __int8 *)(a1 + 23);
  else
    v49 = *(_QWORD *)(a1 + 8);
  if (v49 >= v44)
    v50 = v44;
  else
    v50 = v49;
  v51 = memcmp(v43, v48, v50);
  if (!v51)
  {
    if (v44 <= v49)
      return result;
    goto LABEL_84;
  }
  if ((v51 & 0x80000000) == 0)
  {
LABEL_84:
    v52 = *(_QWORD *)(a1 + 16);
    v53 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v53;
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v47;
    *(_QWORD *)(a2 + 16) = v52;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  const void **v8;
  size_t v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  size_t v14;
  size_t v15;
  int v16;
  const void **v17;
  const void **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 *v34;
  unint64_t v35;
  int v36;
  const void *v37;
  unint64_t v38;
  size_t v39;
  int v40;
  const void *v41;
  uint64_t v42;
  const void **v43;
  __int128 v44;
  const void *v45;

  v2 = a2;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 3;
      v7 = *((char *)a2 - 1);
      if (v7 >= 0)
        v8 = a2 - 3;
      else
        v8 = (const void **)*(a2 - 3);
      if (v7 >= 0)
        v9 = *((unsigned __int8 *)a2 - 1);
      else
        v9 = (size_t)*(a2 - 2);
      v10 = *(char *)(a1 + 23);
      v11 = *(const void **)a1;
      v12 = *(const void **)(a1 + 8);
      if (v10 >= 0)
        v13 = (const void *)a1;
      else
        v13 = *(const void **)a1;
      if (v10 >= 0)
        v14 = *(unsigned __int8 *)(a1 + 23);
      else
        v14 = *(_QWORD *)(a1 + 8);
      if (v14 >= v9)
        v15 = v9;
      else
        v15 = v14;
      v16 = memcmp(v8, v13, v15);
      if (v16)
      {
        if (v16 < 0)
          return 1;
      }
      else if (v9 <= v14)
      {
        return 1;
      }
      v41 = *(const void **)(a1 + 16);
      v42 = (uint64_t)*(v2 - 1);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 16) = v42;
      *(v2 - 3) = v11;
      *(v2 - 2) = v12;
      *(v2 - 1) = v41;
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 3);
      return 1;
    default:
      v17 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a1 + 24, (const void **)(a1 + 48));
      v18 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2)
        return 1;
      v19 = 0;
      v20 = 0;
      v43 = v2;
      break;
  }
  while (2)
  {
    v23 = *((char *)v18 + 23);
    if (v23 >= 0)
      v24 = v18;
    else
      v24 = *v18;
    if (v23 >= 0)
      v25 = *((unsigned __int8 *)v18 + 23);
    else
      v25 = (size_t)v18[1];
    v26 = *((char *)v17 + 23);
    if (v26 >= 0)
      v27 = v17;
    else
      v27 = *v17;
    if (v26 >= 0)
      v28 = *((unsigned __int8 *)v17 + 23);
    else
      v28 = (size_t)v17[1];
    if (v28 >= v25)
      v29 = v25;
    else
      v29 = v28;
    v30 = memcmp(v24, v27, v29);
    if (v30)
    {
      if (v30 < 0)
        goto LABEL_25;
    }
    else if (v25 <= v28)
    {
      goto LABEL_25;
    }
    v44 = *(_OWORD *)v18;
    v45 = v18[2];
    *(_OWORD *)v18 = *(_OWORD *)v17;
    v18[2] = v17[2];
    *((_BYTE *)v17 + 23) = 0;
    *(_BYTE *)v17 = 0;
    v21 = a1;
    if (v17 == (const void **)a1)
      goto LABEL_24;
    v31 = v19;
    while (1)
    {
      v32 = a1 + v31;
      v33 = (_OWORD *)(a1 + v31 + 24);
      v34 = SHIBYTE(v45) >= 0 ? &v44 : (__int128 *)v44;
      v35 = SHIBYTE(v45) >= 0 ? HIBYTE(v45) : *((_QWORD *)&v44 + 1);
      v36 = *(char *)(v32 + 47);
      v37 = v36 >= 0 ? (const void *)(a1 + v31 + 24) : *(const void **)(a1 + v31 + 24);
      v38 = v36 >= 0 ? *(unsigned __int8 *)(v32 + 47) : *(_QWORD *)(v32 + 32);
      v39 = v38 >= v35 ? v35 : v38;
      v40 = memcmp(v34, v37, v39);
      if (!v40)
        break;
      if (v40 < 0)
      {
        v21 = (uint64_t)v17;
        goto LABEL_23;
      }
LABEL_48:
      v17 -= 3;
      *(_OWORD *)(v32 + 48) = *v33;
      *(_QWORD *)(v32 + 64) = *(_QWORD *)(a1 + v31 + 40);
      *(_BYTE *)(v32 + 47) = 0;
      *(_BYTE *)v33 = 0;
      v31 -= 24;
      if (v31 == -48)
      {
        v21 = a1;
        goto LABEL_23;
      }
    }
    if (v35 > v38)
      goto LABEL_48;
    v21 = a1 + v31 + 48;
LABEL_23:
    v2 = v43;
LABEL_24:
    v22 = v44;
    *(_QWORD *)(v21 + 16) = v45;
    *(_OWORD *)v21 = v22;
    if (++v20 == 8)
      return v18 + 3 == v2;
LABEL_25:
    v17 = v18;
    v19 += 24;
    v18 += 3;
    if (v18 != v2)
      continue;
    return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  int v8;
  const void *v9;
  size_t v10;
  int v11;
  const void *v12;
  const void *v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;
  __n128 result;
  const void *v19;
  const void *v20;
  int v21;
  const void *v22;
  size_t v23;
  int v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const void *v34;
  size_t v35;
  int v36;
  const void *v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, (const void **)a3);
  v8 = *((char *)a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *a4;
  if (v8 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  v11 = *(char *)(a3 + 23);
  v12 = *(const void **)a3;
  v13 = *(const void **)(a3 + 8);
  if (v11 >= 0)
    v14 = (const void *)a3;
  else
    v14 = *(const void **)a3;
  if (v11 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  if (v15 >= v10)
    v16 = v10;
  else
    v16 = v15;
  v17 = memcmp(v9, v14, v16);
  if (v17)
  {
    if (v17 < 0)
      return result;
  }
  else if (v10 <= v15)
  {
    return result;
  }
  v19 = *(const void **)(a3 + 16);
  v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v20;
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v19;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = (const void *)a3;
  else
    v22 = *(const void **)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = *(char *)(a2 + 23);
  v25 = *(const void **)a2;
  v26 = *(_QWORD *)(a2 + 8);
  if (v24 >= 0)
    v27 = (const void *)a2;
  else
    v27 = *(const void **)a2;
  if (v24 >= 0)
    v28 = *(unsigned __int8 *)(a2 + 23);
  else
    v28 = *(_QWORD *)(a2 + 8);
  if (v28 >= v23)
    v29 = v23;
  else
    v29 = v28;
  v30 = memcmp(v22, v27, v29);
  if (v30)
  {
    if (v30 < 0)
      return result;
  }
  else if (v23 <= v28)
  {
    return result;
  }
  v31 = *(_QWORD *)(a2 + 16);
  v32 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)a3 = v25;
  *(_QWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v31;
  v33 = *(char *)(a2 + 23);
  if (v33 >= 0)
    v34 = (const void *)a2;
  else
    v34 = *(const void **)a2;
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a2 + 23);
  else
    v35 = *(_QWORD *)(a2 + 8);
  v36 = *(char *)(a1 + 23);
  v37 = *(const void **)a1;
  v38 = *(_QWORD *)(a1 + 8);
  if (v36 >= 0)
    v39 = (const void *)a1;
  else
    v39 = *(const void **)a1;
  if (v36 >= 0)
    v40 = *(unsigned __int8 *)(a1 + 23);
  else
    v40 = *(_QWORD *)(a1 + 8);
  if (v40 >= v35)
    v41 = v35;
  else
    v41 = v40;
  v42 = memcmp(v34, v39, v41);
  if (!v42)
  {
    if (v35 <= v40)
      return result;
LABEL_58:
    v43 = *(_QWORD *)(a1 + 16);
    v44 = *(_QWORD *)(a2 + 16);
    result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v44;
    *(_QWORD *)a2 = v37;
    *(_QWORD *)(a2 + 8) = v38;
    *(_QWORD *)(a2 + 16) = v43;
    return result;
  }
  if ((v42 & 0x80000000) == 0)
    goto LABEL_58;
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  int v10;
  const void *v11;
  size_t v12;
  int v13;
  const void *v14;
  const void *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  __n128 result;
  const void *v21;
  const void *v22;
  int v23;
  const void *v24;
  size_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const void *v36;
  size_t v37;
  int v38;
  const void *v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  const void *v48;
  size_t v49;
  int v50;
  const void *v51;
  uint64_t v52;
  const void *v53;
  size_t v54;
  size_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<std::string> &,std::string*>(a1, a2, a3, (const void **)a4);
  v10 = *((char *)a5 + 23);
  if (v10 >= 0)
    v11 = a5;
  else
    v11 = *a5;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  v13 = *(char *)(a4 + 23);
  v14 = *(const void **)a4;
  v15 = *(const void **)(a4 + 8);
  if (v13 >= 0)
    v16 = (const void *)a4;
  else
    v16 = *(const void **)a4;
  if (v13 >= 0)
    v17 = *(unsigned __int8 *)(a4 + 23);
  else
    v17 = *(_QWORD *)(a4 + 8);
  if (v17 >= v12)
    v18 = v12;
  else
    v18 = v17;
  v19 = memcmp(v11, v16, v18);
  if (v19)
  {
    if (v19 < 0)
      return result;
  }
  else if (v12 <= v17)
  {
    return result;
  }
  v21 = *(const void **)(a4 + 16);
  v22 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v22;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = v21;
  v23 = *(char *)(a4 + 23);
  if (v23 >= 0)
    v24 = (const void *)a4;
  else
    v24 = *(const void **)a4;
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a4 + 23);
  else
    v25 = *(_QWORD *)(a4 + 8);
  v26 = *(char *)(a3 + 23);
  v27 = *(const void **)a3;
  v28 = *(_QWORD *)(a3 + 8);
  if (v26 >= 0)
    v29 = (const void *)a3;
  else
    v29 = *(const void **)a3;
  if (v26 >= 0)
    v30 = *(unsigned __int8 *)(a3 + 23);
  else
    v30 = *(_QWORD *)(a3 + 8);
  if (v30 >= v25)
    v31 = v25;
  else
    v31 = v30;
  v32 = memcmp(v24, v29, v31);
  if (v32)
  {
    if (v32 < 0)
      return result;
  }
  else if (v25 <= v30)
  {
    return result;
  }
  v33 = *(_QWORD *)(a3 + 16);
  v34 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v34;
  *(_QWORD *)a4 = v27;
  *(_QWORD *)(a4 + 8) = v28;
  *(_QWORD *)(a4 + 16) = v33;
  v35 = *(char *)(a3 + 23);
  if (v35 >= 0)
    v36 = (const void *)a3;
  else
    v36 = *(const void **)a3;
  if (v35 >= 0)
    v37 = *(unsigned __int8 *)(a3 + 23);
  else
    v37 = *(_QWORD *)(a3 + 8);
  v38 = *(char *)(a2 + 23);
  v39 = *(const void **)a2;
  v40 = *(_QWORD *)(a2 + 8);
  if (v38 >= 0)
    v41 = (const void *)a2;
  else
    v41 = *(const void **)a2;
  if (v38 >= 0)
    v42 = *(unsigned __int8 *)(a2 + 23);
  else
    v42 = *(_QWORD *)(a2 + 8);
  if (v42 >= v37)
    v43 = v37;
  else
    v43 = v42;
  v44 = memcmp(v36, v41, v43);
  if (v44)
  {
    if (v44 < 0)
      return result;
  }
  else if (v37 <= v42)
  {
    return result;
  }
  v45 = *(_QWORD *)(a2 + 16);
  v46 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v46;
  *(_QWORD *)a3 = v39;
  *(_QWORD *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v45;
  v47 = *(char *)(a2 + 23);
  if (v47 >= 0)
    v48 = (const void *)a2;
  else
    v48 = *(const void **)a2;
  if (v47 >= 0)
    v49 = *(unsigned __int8 *)(a2 + 23);
  else
    v49 = *(_QWORD *)(a2 + 8);
  v50 = *(char *)(a1 + 23);
  v51 = *(const void **)a1;
  v52 = *(_QWORD *)(a1 + 8);
  if (v50 >= 0)
    v53 = (const void *)a1;
  else
    v53 = *(const void **)a1;
  if (v50 >= 0)
    v54 = *(unsigned __int8 *)(a1 + 23);
  else
    v54 = *(_QWORD *)(a1 + 8);
  if (v54 >= v49)
    v55 = v49;
  else
    v55 = v54;
  v56 = memcmp(v48, v53, v55);
  if (v56)
  {
    if (v56 < 0)
      return result;
  }
  else if (v49 <= v54)
  {
    return result;
  }
  v57 = *(_QWORD *)(a1 + 16);
  v58 = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)a2;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v58;
  *(_QWORD *)a2 = v51;
  *(_QWORD *)(a2 + 8) = v52;
  *(_QWORD *)(a2 + 16) = v57;
  return result;
}

char *std::vector<std::string>::__push_back_slow_path<std::string>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = (const std::locale *)MEMORY[0x1C3B8C328]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(a1, a2, &a2[v7]) != (std::basic_regex<char> *)&a2[v7])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1BF660CB4(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1BF660CD0(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v15;
  std::basic_regex<char> *v16;
  std::__owns_one_state<char> *v17;
  int v18;
  std::basic_regex<char> *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  std::basic_regex<char> *v30;
  char *v31;
  std::__owns_one_state<char> *v32;
  int v33;
  std::basic_regex<char> *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = operator new(8uLL);
  *v6 = &unk_1E7914370;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_1E79143C8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      v12 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 56) = v12;
      v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if (v13 <= 0x3F)
        goto LABEL_6;
LABEL_11:
      if (v13 != 64)
      {
        if (v13 == 128)
          return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(a1, a2, a3);
        if (v13 == 256)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
LABEL_38:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (v13)
  {
    if (v13 == 16)
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
    if (v13 != 32)
      goto LABEL_38;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  }
  v15 = a2;
  while (1)
  {
    v16 = (std::basic_regex<char> *)v15;
    v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v15, a3);
    if (v15 == (char *)v16)
      break;
LABEL_17:
    if (v15 == (char *)v16)
      goto LABEL_23;
  }
  v17 = *(std::__owns_one_state<char> **)(a1 + 56);
  v18 = *(_DWORD *)(a1 + 28);
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
  if (v19 != v16)
  {
    v15 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v19, (std::basic_regex<char> *)a3, v17, (v18 + 1), (*(_DWORD *)(a1 + 28) + 1));
    goto LABEL_17;
  }
LABEL_23:
  if (v16 == (std::basic_regex<char> *)a2)
  {
    v20 = operator new(0x10uLL);
    v21 = *(_QWORD *)(a1 + 56);
    v22 = *(_QWORD *)(v21 + 8);
    v20[1] = v22;
    *(_QWORD *)(v21 + 8) = v20;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v16 == (std::basic_regex<char> *)a3)
    return (std::basic_regex<char> *)a3;
  while (2)
  {
    if (LOBYTE(v16->__traits_.__loc_.__locale_) != 124)
      return v16;
    v29 = *(_QWORD *)(a1 + 56);
    v30 = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
    v31 = (char *)&v16->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v16 = (std::basic_regex<char> *)v31;
      v31 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, v31, a3);
      if (v31 != (char *)v16)
      {
LABEL_32:
        if (v31 == (char *)v16)
          goto LABEL_27;
        continue;
      }
      break;
    }
    v32 = *(std::__owns_one_state<char> **)(a1 + 56);
    v33 = *(_DWORD *)(a1 + 28);
    v34 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>((std::basic_regex<char> *)a1, v16, (std::basic_regex<char> *)a3);
    if (v34 != v16)
    {
      v31 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v34, (std::basic_regex<char> *)a3, v32, (v33 + 1), (*(_DWORD *)(a1 + 28) + 1));
      goto LABEL_32;
    }
LABEL_27:
    if (v16 == v30)
    {
      v35 = operator new(0x10uLL);
      v36 = *(_QWORD *)(a1 + 56);
      v37 = *(_QWORD *)(v36 + 8);
      v35[1] = v37;
      *(_QWORD *)(v36 + 8) = v35;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    v23 = operator new(0x18uLL);
    v24 = *(_QWORD *)(v29 + 8);
    v23[1] = *(_QWORD *)(v12 + 8);
    v23[2] = v24;
    *v23 = &unk_1E7914988;
    *(_QWORD *)(v12 + 8) = v23;
    *(_QWORD *)(v29 + 8) = 0;
    v25 = operator new(0x10uLL);
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v25[1] = v26;
    *(_QWORD *)(v29 + 8) = v25;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v27 = operator new(0x10uLL);
    v28 = *(_QWORD *)(v29 + 8);
    *v27 = &unk_1E79149D0;
    v27[1] = v28;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v29 + 8);
    if (v16 != (std::basic_regex<char> *)a3)
      continue;
    return (std::basic_regex<char> *)a3;
  }
}

void sub_1BF6610E4(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1BF661120(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v7, a3);
    if (v7 == (char *)v8)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
  if (v11 != v8)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 == (std::basic_regex<char> *)a2)
  {
    v12 = (std::__node<char> *)operator new(0x10uLL);
    v13 = a1->__end_;
    first = v13->__first_;
    v12[1].__vftable = (std::__node<char>_vtbl *)first;
    v13->__first_ = v12;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v8 == (std::basic_regex<char> *)a3)
    return a3;
  while (2)
  {
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (2)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>((uint64_t)a1, v23, a3);
      if (v23 != (char *)v8)
      {
LABEL_14:
        if (v23 == (char *)v8)
          goto LABEL_17;
        continue;
      }
      break;
    }
    v24 = a1->__end_;
    v25 = a1->__marked_count_;
    v26 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, v8);
    if (v26 != v8)
    {
      v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      goto LABEL_14;
    }
LABEL_17:
    if (v8 == v22)
    {
      v27 = (std::__node<char> *)operator new(0x10uLL);
      v28 = a1->__end_;
      v29 = v28->__first_;
      v27[1].__vftable = (std::__node<char>_vtbl *)v29;
      v28->__first_ = v27;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    v15 = (std::__node<char> *)operator new(0x18uLL);
    v16 = v21->__first_;
    v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
    v15[2].__vftable = (std::__node<char>_vtbl *)v16;
    v15->__vftable = (std::__node<char>_vtbl *)&unk_1E7914988;
    end->__first_ = v15;
    v21->__first_ = 0;
    v17 = (std::__node<char> *)operator new(0x10uLL);
    v18 = a1->__end_->__first_;
    v17[1].__vftable = (std::__node<char>_vtbl *)v18;
    v21->__first_ = v17;
    a1->__end_->__first_ = 0;
    v19 = (std::__node<char> *)operator new(0x10uLL);
    v20 = v21->__first_;
    v19->__vftable = (std::__node<char>_vtbl *)&unk_1E79149D0;
    v19[1].__vftable = (std::__node<char>_vtbl *)v20;
    a1->__end_->__first_ = v19;
    a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
    if (v8 != (std::basic_regex<char> *)a3)
      continue;
    return a3;
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_1E79144C0;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, (uint64_t)v10, a3);
      if (v13 != (char *)v10)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v3 != v10)
          continue;
      }
      if ((char *)&v10->__traits_.__loc_.__locale_ + 1 != a3 || LOBYTE(v10->__traits_.__loc_.__locale_) != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_1E7914508;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_13;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v7, v3);
  }
  while (v7 != v8);
  if (v8 == a2)
LABEL_13:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 != v3)
  {
    while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
    {
      v9 = *(_QWORD *)(a1 + 56);
      v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), v3);
      if (v11 == (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1))
        goto LABEL_13;
      do
      {
        v8 = v11;
        v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, v11, v3);
      }
      while (v11 != v8);
      if (v8 == v10)
        goto LABEL_13;
      v12 = operator new(0x18uLL);
      v13 = *(_QWORD *)(v9 + 8);
      v12[1] = *(_QWORD *)(v6 + 8);
      v12[2] = v13;
      *v12 = &unk_1E7914988;
      *(_QWORD *)(v6 + 8) = v12;
      *(_QWORD *)(v9 + 8) = 0;
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v14[1] = v15;
      *(_QWORD *)(v9 + 8) = v14;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
      v16 = operator new(0x10uLL);
      v17 = *(_QWORD *)(v9 + 8);
      *v16 = &unk_1E79149D0;
      v16[1] = v17;
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
      if (v8 == v3)
        return v3;
    }
    return v8;
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = v8 + 1;
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v9, 10, a3 - v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E7914988;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E79149D0;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = v22 + 1;
  }
  while (v9 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v10 = operator new(0x10uLL);
    v11 = *(_QWORD *)(v6 + 8);
    v10[1] = v11;
    *(_QWORD *)(v6 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
    if (v8 == a3)
      v9 = v8;
    else
      v9 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v9 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v9, 10, (char *)a3 - (char *)v9);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v9)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v9, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E7914988;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E79149D0;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v9 = v22;
    else
      v9 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v9 != a3);
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  BOOL v8;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  __int128 v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  unsigned int marked_count;
  std::basic_regex<char> v27;

  if (a2 == a3)
    return a2;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v15 = a2[1];
        if (v15 == 66)
        {
          v16 = (char *)operator new(0x30uLL);
          v24 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E7914550;
          *((_QWORD *)v16 + 1) = v24;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 1;
        }
        else
        {
          if (v15 != 98)
            return a2;
          v16 = (char *)operator new(0x30uLL);
          v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v16 = &unk_1E7914550;
          *((_QWORD *)v16 + 1) = v17;
          std::locale::locale((std::locale *)v16 + 2, (const std::locale *)a1);
          *(_OWORD *)(v16 + 24) = *(_OWORD *)(a1 + 8);
          v16[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 2;
      }
      return a2;
    }
    if (v6 != 94)
      return a2;
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
LABEL_14:
    *v10 = v14 + 16;
    v10[1] = v13;
    *((_BYTE *)v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v10 = operator new(0x18uLL);
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    goto LABEL_14;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (v8)
    return a2;
  v8 = *v7 == 63;
  v18 = a2 + 2;
  if (!v8 || v18 == a3)
    return a2;
  v20 = *v18;
  if (v20 == 33)
  {
    *(_QWORD *)&v25 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v27.__loop_count_ = v25;
    *(_OWORD *)&v27.__start_.__cntrl_ = v25;
    *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v25;
    *(_OWORD *)&v27.__traits_.__col_ = v25;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
    v27.__flags_ = *(_DWORD *)(a1 + 24);
    v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
    marked_count = v27.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v22 == a3 || *v22 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_32;
  }
  if (v20 != 61)
    return a2;
  *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v27.__loop_count_ = v21;
  *(_OWORD *)&v27.__start_.__cntrl_ = v21;
  *(_OWORD *)&v27.__traits_.__loc_.__locale_ = v21;
  *(_OWORD *)&v27.__traits_.__col_ = v21;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v27);
  v27.__flags_ = *(_DWORD *)(a1 + 24);
  v22 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v27, a2 + 3, a3);
  v23 = v27.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v27, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v23;
  if (v22 == a3 || *v22 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_32:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v27.__traits_.__loc_);
  return v22 + 1;
}

void sub_1BF661CE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF661CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF661D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF661D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int *p_open_count;
  char *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v12;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 != a3)
  {
    switch(LOBYTE(a2->__traits_.__loc_.__locale_))
    {
      case '(':
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
          goto LABEL_26;
        if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
          && BYTE1(a2->__traits_.__loc_.__locale_) == 63
          && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, (char *)a3);
          if (v7 == (char *)a3)
            goto LABEL_26;
          v3 = (std::basic_regex<char> *)v7;
          if (*v7 != 41)
            goto LABEL_26;
        }
        else
        {
          if ((this->__flags_ & 2) != 0)
          {
            marked_count = this->__marked_count_;
          }
          else
          {
            v12 = (std::__node<char> *)operator new(0x18uLL);
            marked_count = this->__marked_count_ + 1;
            this->__marked_count_ = marked_count;
            end = this->__end_;
            first = end->__first_;
            v12->__vftable = (std::__node<char>_vtbl *)&unk_1E7914820;
            v12[1].__vftable = (std::__node<char>_vtbl *)first;
            LODWORD(v12[2].__vftable) = marked_count;
            end->__first_ = v12;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, (char *)a3);
          if (v16 == (char *)a3 || (v3 = (std::basic_regex<char> *)v16, *v16 != 41))
LABEL_26:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          if ((this->__flags_ & 2) == 0)
          {
            v17 = (std::__node<char> *)operator new(0x18uLL);
            v18 = this->__end_;
            v19 = v18->__first_;
            v17->__vftable = (std::__node<char>_vtbl *)&unk_1E7914868;
            v17[1].__vftable = (std::__node<char>_vtbl *)v19;
            LODWORD(v17[2].__vftable) = marked_count;
            v18->__first_ = v17;
            this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
          }
        }
        --*p_open_count;
LABEL_23:
        v3 = (std::basic_regex<char> *)((char *)v3 + 1);
        break;
      case ')':
      case ',':
      case '-':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
      case '*':
      case '+':
      case '?':
        goto LABEL_25;
      case '.':
        v8 = (std::__node<char> *)operator new(0x10uLL);
        v9 = this->__end_;
        v10 = v9->__first_;
        v8->__vftable = (std::__node<char>_vtbl *)&unk_1E79145E0;
        v8[1].__vftable = (std::__node<char>_vtbl *)v10;
        v9->__first_ = v8;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_23;
      case '[':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, (char *)a3);
      case '\\':
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      default:
        if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
    }
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  char *v9;
  size_t v10;
  char *v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  std::basic_regex<char> *v17;
  unsigned __int8 *v18;
  BOOL v20;
  std::basic_regex<char> *v21;
  BOOL v22;
  char *v23;
  size_t v24;
  std::basic_regex<char> *v25;
  int v26;
  int v27;
  std::basic_regex<char> *v28;
  int v29;
  std::basic_regex<char> *v30;
  _BYTE *v31;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v20 = 1;
      else
        v20 = v8 == a3;
      if (!v20 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 0;
        goto LABEL_35;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 0;
      goto LABEL_44;
    }
    if (locale_low == 43)
    {
      v8 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v9 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v10 = 1;
LABEL_35:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v10, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v9;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v24 = 1;
      goto LABEL_44;
    }
    return this;
  }
  if (locale_low == 63)
  {
    v21 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v22 = 1;
    else
      v22 = v21 == a3;
    if (v22 || LOBYTE(v21->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v21;
    }
    else
    {
      v23 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v23;
    }
  }
  else
  {
    if (locale_low != 123)
      return this;
    v11 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_71;
    v12 = *v11;
    if ((v12 & 0xF8) != 0x30 && (v12 & 0xFE) != 0x38)
      goto LABEL_71;
    v13 = v12 - 48;
    v14 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_19:
      v14 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v15 = *v14;
        if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
          break;
        if (v13 >= 214748364)
          goto LABEL_71;
        v13 = v15 + 10 * v13 - 48;
        if (++v14 == (char *)a3)
          goto LABEL_19;
      }
    }
    if (v14 == v11)
      goto LABEL_71;
    if (v14 == (char *)a3)
      goto LABEL_72;
    v16 = *v14;
    if (v16 != 44)
    {
      if (v16 == 125)
      {
        v17 = (std::basic_regex<char> *)(v14 + 1);
        if (v6 || v17 == a3 || LOBYTE(v17->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 1);
          return v17;
        }
        else
        {
          v18 = (unsigned __int8 *)(v14 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v13, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v18;
        }
      }
LABEL_71:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v25 = (std::basic_regex<char> *)(v14 + 1);
    if (v14 + 1 == (char *)a3)
      goto LABEL_71;
    v26 = LOBYTE(v25->__traits_.__loc_.__locale_);
    if (v26 == 125)
    {
      v8 = (std::basic_regex<char> *)(v14 + 2);
      if (!v6 && v8 != a3 && LOBYTE(v8->__traits_.__loc_.__locale_) == 63)
      {
        v10 = v13;
        v9 = v14 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_35;
      }
      v24 = v13;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_44:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v24, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v8;
    }
    if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
      goto LABEL_72;
    v27 = v26 - 48;
    v28 = (std::basic_regex<char> *)(v14 + 2);
    if (v28 == a3)
    {
LABEL_60:
      v28 = a3;
    }
    else
    {
      while (1)
      {
        v29 = LOBYTE(v28->__traits_.__loc_.__locale_);
        if ((v29 & 0xF8) != 0x30 && (v29 & 0xFE) != 0x38)
          break;
        if (v27 >= 214748364)
          goto LABEL_71;
        v27 = v29 + 10 * v27 - 48;
        v28 = (std::basic_regex<char> *)((char *)v28 + 1);
        if (v28 == a3)
          goto LABEL_60;
      }
    }
    if (v28 == v25 || v28 == a3 || LOBYTE(v28->__traits_.__loc_.__locale_) != 125)
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v27 < v13)
      goto LABEL_71;
    v30 = (std::basic_regex<char> *)((char *)&v28->__traits_.__loc_.__locale_ + 1);
    if (v6 || v30 == a3 || LOBYTE(v30->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 1);
      return v30;
    }
    else
    {
      v31 = (char *)&v28->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v13, v27, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v31;
    }
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  int v7;
  unsigned int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = *v5;
  v8 = v7 - 48;
  if (v7 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v8);
    return a2 + 2;
  }
  if ((v7 - 49) > 8)
    goto LABEL_18;
  v10 = a2 + 2;
  if (a2 + 2 == a3)
  {
    v10 = a3;
  }
  else
  {
    while (1)
    {
      v11 = *v10;
      if ((v11 - 48) > 9)
        break;
      if (v8 >= 0x19999999)
        goto LABEL_23;
      ++v10;
      v8 = v11 + 10 * v8 - 48;
      if (v10 == a3)
      {
        v10 = a3;
        break;
      }
    }
    if (!v8)
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v8 > this->__marked_count_)
    goto LABEL_23;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v8);
  if (v10 == v5)
  {
LABEL_18:
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>((uint64_t)this, a2 + 1, a3);
    if (v10 == v5)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, a3, 0);
      if (v12 == v5)
        return a2;
      else
        return v12;
    }
  }
  return v10;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v7, a3, (uint64_t)v8);
    }
    while (v7 != v9);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1BF662628(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1BF66287C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF662890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6628A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6628B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6628CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6628E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned __int8 v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;
  std::basic_regex<char>::value_type v16;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3)
        goto LABEL_81;
      v8 = v4[1];
      if (((v8 & 0xDF) - 65) > 0x19u)
        goto LABEL_81;
      v9 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v9;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v9);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v10 = v4[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_38;
          }
        }
      }
      goto LABEL_81;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_65:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_38:
      if (v4 + 1 == a3)
        goto LABEL_81;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_43;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_81;
      v13 = -87;
LABEL_43:
      if (v4 + 2 == a3)
        goto LABEL_81;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_81:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v15 = -87;
      }
      v16 = v14 + 16 * (v12 + v13) + v15;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v16;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_81;
      if (!a4)
        goto LABEL_65;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int v5;
  char *v6;
  int v9;
  int v10;
  char v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  char *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  char *v22;
  uint64_t v23;
  int v24;
  int v25;
  std::basic_regex<char>::value_type *v26;
  char *v27;
  char *v28;
  int v29;
  void **v30;
  _BYTE *v31;
  char *v32;
  _BYTE *v34;
  void *v35[2];
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  int64_t v42;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (char *)a4;
  v9 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_38:
    v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_33;
  }
  v10 = a2[1];
  if (v10 != 46)
  {
    if (v10 != 58)
    {
      if (v10 == 61)
      {
        v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
        v11 = 0;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v9 = 0;
      goto LABEL_38;
    }
    v12 = a2 + 2;
    if (a3 - (v4 + 2) >= 2)
    {
      v13 = 0;
      v14 = (unsigned __int8 *)v4;
      if (v4[2] == 58)
        goto LABEL_14;
      do
      {
        do
        {
          if (a3 - v4 - 4 == v13)
            goto LABEL_89;
          v14 = (unsigned __int8 *)&v4[++v13];
        }
        while (v4[v13 + 2] != 58);
LABEL_14:
        ;
      }
      while (v14[3] != 93);
      v15 = &v4[v13 + 2];
      if (v15 != a3)
      {
        v16 = std::regex_traits<char>::__lookup_classname<char const*>(a1, v12, v15, *(_DWORD *)(a1 + 24) & 1);
        if (!v16)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
        v11 = 0;
        *((_DWORD *)v6 + 40) |= v16;
        v6 = &v4[v13 + 4];
        if (SHIBYTE(v40) < 0)
          goto LABEL_63;
        goto LABEL_64;
      }
    }
LABEL_89:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  v17 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_89;
  v18 = a3 - v4 - 4;
  v19 = v4 + 2;
  v20 = v17 + 1;
  if (*v17 == 46)
    goto LABEL_23;
  do
  {
    do
    {
      if (!v18)
        goto LABEL_89;
      --v18;
      v19 = v20;
      v21 = *v20++;
    }
    while (v21 != 46);
LABEL_23:
    ;
  }
  while (*v20 != 93);
  if (v19 == a3)
    goto LABEL_89;
  std::regex_traits<char>::__lookup_collatename<char *>(v17, a1, v19, (uint64_t)&v41);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  v40 = v42;
  *(_OWORD *)__p = v41;
  v22 = (char *)HIBYTE(v42);
  v9 = SHIBYTE(v42);
  v23 = *((_QWORD *)&v41 + 1);
  if (v42 < 0)
    v22 = (char *)__p[1];
  if ((unint64_t)(v22 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = v19 + 2;
  v24 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v42 >= 0)
    v23 = HIBYTE(v42);
  if (v23)
  {
    v28 = v4;
    if (v4 == a3)
      goto LABEL_41;
    goto LABEL_40;
  }
LABEL_33:
  if ((v24 | 0x40) != 0x40)
  {
    LOBYTE(v25) = *v4;
LABEL_57:
    if (v9 < 0)
    {
      v34 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v25;
      v34[1] = 0;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    else
    {
      HIBYTE(v40) = 1;
      LOWORD(__p[0]) = v25;
      v28 = v4 + 1;
      if (v4 + 1 == a3)
        goto LABEL_41;
    }
    goto LABEL_40;
  }
  v25 = *v4;
  if (v25 != 92)
    goto LABEL_57;
  v26 = v4 + 1;
  if (v24)
    v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v26, a3, (uint64_t *)__p);
  else
    v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v26, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v6);
  v28 = v27;
  if (v27 == a3)
  {
LABEL_41:
    if (SHIBYTE(v40) < 0)
    {
      if (!__p[1])
        goto LABEL_62;
      if (__p[1] != (void *)1)
      {
        v30 = (void **)__p[0];
LABEL_61:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v6, *(char *)v30, *((char *)v30 + 1));
LABEL_62:
        v11 = 1;
        v4 = v28;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_64;
        goto LABEL_63;
      }
      v30 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v40))
        goto LABEL_62;
      v30 = __p;
      if (HIBYTE(v40) != 1)
        goto LABEL_61;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, *(char *)v30);
    goto LABEL_62;
  }
LABEL_40:
  v29 = *v28;
  if (v29 == 93)
    goto LABEL_41;
  v31 = v28 + 1;
  if (v28 + 1 == a3 || v29 != 45 || *v31 == 93)
    goto LABEL_41;
  v41 = 0uLL;
  v42 = 0;
  v4 = v28 + 2;
  if (v28 + 2 == a3 || *v31 != 91 || *v4 != 46)
  {
    if ((v24 | 0x40) == 0x40)
    {
      LODWORD(v31) = *v31;
      if ((_DWORD)v31 == 92)
      {
        if (v24)
          v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v28 + 2, a3, (uint64_t *)&v41);
        else
          v32 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v28 + 2, (unsigned __int8 *)a3, (uint64_t)&v41, (uint64_t)v6);
        goto LABEL_79;
      }
    }
    else
    {
      LOBYTE(v31) = *v31;
    }
    HIBYTE(v42) = 1;
    LOWORD(v41) = v31;
    goto LABEL_80;
  }
  v32 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v28 + 3, a3, (uint64_t)&v41);
LABEL_79:
  v4 = v32;
LABEL_80:
  *(_OWORD *)v37 = *(_OWORD *)__p;
  v38 = v40;
  __p[1] = 0;
  v40 = 0;
  __p[0] = 0;
  *(_OWORD *)v35 = v41;
  v36 = v42;
  v41 = 0uLL;
  v42 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v6, (char *)v37, (uint64_t)v35);
  if (SHIBYTE(v36) < 0)
  {
    operator delete(v35[0]);
    if ((SHIBYTE(v38) & 0x80000000) == 0)
    {
LABEL_82:
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_83;
LABEL_87:
      operator delete((void *)v41);
      v11 = 1;
      if (SHIBYTE(v40) < 0)
        goto LABEL_63;
      goto LABEL_64;
    }
  }
  else if ((SHIBYTE(v38) & 0x80000000) == 0)
  {
    goto LABEL_82;
  }
  operator delete(v37[0]);
  if (SHIBYTE(v42) < 0)
    goto LABEL_87;
LABEL_83:
  v11 = 1;
  if (SHIBYTE(v40) < 0)
LABEL_63:
    operator delete(__p[0]);
LABEL_64:
  if ((v11 & 1) != 0)
    return v4;
  return v6;
}

void sub_1BF6632BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  void **v14;
  void **v15;
  void *__p[3];
  void *v18[3];

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_39;
  v7 = 0;
  v8 = __src;
  if (*__src != 61)
    goto LABEL_5;
LABEL_4:
  if (v8[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v7)
    {
      v8 = &__src[++v7];
      if (__src[v7] == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v7] == a3)
    goto LABEL_39;
  memset(v18, 170, sizeof(v18));
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v7], (uint64_t)v18);
  if ((SHIBYTE(v18[2]) & 0x80000000) == 0)
  {
    v9 = (char *)HIBYTE(v18[2]);
    if (HIBYTE(v18[2]))
    {
      memset(__p, 170, sizeof(__p));
      v10 = v18;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v9 = (char *)v18[1];
  if (!v18[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v10 = (void **)v18[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v10, &v9[(_QWORD)v10], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v11 = *(_QWORD *)(a4 + 144);
      if (v11 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v12 = *(_OWORD *)__p;
          *(void **)(v11 + 16) = __p[2];
          *(_OWORD *)v11 = v12;
        }
        *(_QWORD *)(a4 + 144) = v11 + 24;
        *(_QWORD *)(a4 + 144) = v11 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v13 = (void *)HIBYTE(v18[2]);
  if (SHIBYTE(v18[2]) < 0)
    v13 = v18[1];
  if (v13 == (void *)2)
  {
    v15 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v15 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v15, *((char *)v15 + 1));
  }
  else
  {
    if (v13 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v14 = v18;
    if (SHIBYTE(v18[2]) < 0)
      v14 = (void **)v18[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v14);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v18[2]) < 0)
      goto LABEL_38;
    return &__src[v7 + 2];
  }
LABEL_33:
  if (SHIBYTE(v18[2]) < 0)
LABEL_38:
    operator delete(v18[0]);
  return &__src[v7 + 2];
}

void sub_1BF663584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *__src, char *a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;
  unint64_t v12;

  if (a3 - __src < 2 || a3 - 1 == __src)
    goto LABEL_15;
  v6 = 0;
  v7 = __src;
  if (*__src != 46)
    goto LABEL_5;
LABEL_4:
  if (v7[1] != 93)
  {
LABEL_5:
    while (a3 - __src - 2 != v6)
    {
      v7 = &__src[++v6];
      if (__src[v6] == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (&__src[v6] == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<char *>(__src, a1, &__src[v6], (uint64_t)&v11);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v11;
  v8 = v12;
  *(_QWORD *)(a4 + 16) = v12;
  v9 = HIBYTE(v8);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  if (v9 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return &__src[v6 + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, _BYTE *__src, _BYTE *a3, BOOL a4)
{
  size_t v4;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  const char *v14;
  uint64_t classname;
  void *__dst[3];

  v4 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v4);
    v9 = (void **)((char *)v9 + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v4;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v13, &v12[(_QWORD)v13]);
  if (SHIBYTE(__dst[2]) >= 0)
    v14 = (const char *)__dst;
  else
    v14 = (const char *)__dst[0];
  classname = std::__get_classname(v14, a4);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  return classname;
}

void sub_1BF663DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v15;
  std::__owns_one_state<char> *v16;
  int v17;
  std::basic_regex<char> *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>((std::basic_regex<char> *)a1, (char *)a2, a3);
  v7 = v6;
  if (v6 != (char *)a2 || v6 == a3)
    return v7;
  if ((char *)(a2 + 1) == a3)
    return (char *)a2;
  if (*(_BYTE *)a2 != 92)
    return (char *)a2;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_1E7914820;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_25;
      v15 = v9;
      v16 = *(std::__owns_one_state<char> **)(a1 + 56);
      v17 = *(_DWORD *)(a1 + 28);
      v18 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, v15, a3);
      if (v18 == v15)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>((std::basic_regex<char> *)a1, v18, (std::basic_regex<char> *)a3, v16, (v17 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v9 != v15);
    if ((char *)&v15->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v15->__traits_.__loc_.__locale_) != 92
      || BYTE1(v15->__traits_.__loc_.__locale_) != 41)
    {
LABEL_25:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v7 = (char *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v19 = operator new(0x18uLL);
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      *v19 = &unk_1E7914868;
      v19[1] = v21;
      *((_DWORD *)v19 + 4) = v11;
      *(_QWORD *)(v20 + 8) = v19;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v7;
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return (char *)a2;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  std::basic_regex<char> *v6;
  int locale_low;
  std::basic_regex<char> *v9;
  int v10;
  int v11;
  std::basic_regex<char> *v12;
  int v13;
  std::basic_regex<char> *v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;

  v6 = this;
  if (this == a3)
    return v6;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)v6 + 1);
  }
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return v6;
  }
  v9 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v9 == a3)
    goto LABEL_43;
  v10 = LOBYTE(v9->__traits_.__loc_.__locale_);
  if ((v10 & 0xF8) != 0x30 && (v10 & 0xFE) != 0x38)
    goto LABEL_43;
  v11 = v10 - 48;
  v12 = (std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v9->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_16:
    v12 = a3;
  }
  else
  {
    while (1)
    {
      v13 = LOBYTE(v12->__traits_.__loc_.__locale_);
      if ((v13 & 0xF8) != 0x30 && (v13 & 0xFE) != 0x38)
        break;
      if (v11 >= 214748364)
        goto LABEL_43;
      v11 = v13 + 10 * v11 - 48;
      v12 = (std::basic_regex<char> *)((char *)v12 + 1);
      if (v12 == a3)
        goto LABEL_16;
    }
  }
  if (v12 == v9)
    goto LABEL_43;
  if (v12 == a3)
    goto LABEL_41;
  v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 1);
  v15 = LOBYTE(v12->__traits_.__loc_.__locale_);
  if (v15 != 44)
  {
    if (v14 != a3 && v15 == 92 && LOBYTE(v14->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v12->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v11, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_41;
  }
  if (v14 == a3)
    goto LABEL_41;
  v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
  if ((v16 & 0xF8) == 0x30 || (v16 & 0xFE) == 0x38)
  {
    v14 = (std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v12->__traits_.__loc_.__locale_ + 2) == a3)
      goto LABEL_41;
    v17 = v16 - 48;
    while (1)
    {
      v16 = LOBYTE(v14->__traits_.__loc_.__locale_);
      if ((v16 & 0xF8) != 0x30 && (v16 & 0xFE) != 0x38)
        break;
      if (v17 >= 214748364)
        goto LABEL_43;
      v17 = v16 + 10 * v17 - 48;
      v14 = (std::basic_regex<char> *)((char *)v14 + 1);
      if (v14 == a3)
        goto LABEL_41;
    }
  }
  else
  {
    v17 = -1;
  }
  if (v14 == a3
    || (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1) == a3
    || v16 != 92
    || BYTE1(v14->__traits_.__loc_.__locale_) != 125)
  {
LABEL_41:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  v18 = (unsigned __int8 *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 125);
  if (v17 != -1)
  {
    if (v17 >= v11)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, v17, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v18;
    }
LABEL_43:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else
  {
    if (v6 != a3 && v5 == 92)
    {
      v9 = *v6;
      if ((v9 - 36) <= 0x3A && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
        return a2 + 2;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v5 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E7914A18;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  int locale_low;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2
    && (v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(a1, a2, a3), v8 == a2))
  {
    if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(a1 + 56);
      v16 = *(_QWORD *)(v15 + 8);
      *v14 = &unk_1E7914A18;
      v14[1] = v16;
      *(_QWORD *)(v15 + 8) = v14;
LABEL_14:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, (char *)a2, (char *)a3);
    if (v8 != a2)
      goto LABEL_25;
  }
  else if (v8 != a2)
  {
    goto LABEL_25;
  }
  if (v8 == a3)
  {
LABEL_25:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
      goto LABEL_13;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_1E7914820;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_1E7914868;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_25;
    case '^':
      v10 = operator new(0x18uLL);
      v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v12 = *(_QWORD *)(a1 + 56);
LABEL_13:
      v17 = *(_QWORD *)(v12 + 8);
      *v10 = v13 + 16;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      goto LABEL_14;
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = this;
  if (this == a3)
    return (std::basic_regex<char>::value_type *)v3;
  v4 = (char *)&this->__traits_.__loc_.__locale_ + 1;
  if ((std::basic_regex<char> *)((char *)&v3->__traits_.__loc_.__locale_ + 1) == a3
    || LOBYTE(v3->__traits_.__loc_.__locale_) != 92)
  {
    return (std::basic_regex<char>::value_type *)v3;
  }
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      return (char *)v3 + 2;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, (std::basic_regex<char>::value_type *)a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = (char *)v3 + v8;
      }
      break;
  }
  return result;
}

uint64_t *std::unique_ptr<std::__hash_node<std::string,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v23 = *(uint64_t *)((char *)a2 + a3 - 48);
      v24 = *(uint64_t *)((char *)a2 + a3 - 40);
      v25 = *(uint64_t *)((char *)a2 + a3 - 24);
      v27 = *(uint64_t *)((char *)a2 + a3 - 64);
      v26 = *(uint64_t *)((char *)a2 + a3 - 56);
      v28 = *(uint64_t *)((char *)a2 + a3 - 16);
      v29 = *(uint64_t *)((char *)a2 + a3 - 8);
      v30 = v26 + v28;
      v31 = 0x9DDFEA08EB382D69
          * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ (v23 + a3))));
      v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
      v33 = v23 + v26 + v27 + a3;
      v34 = v33 + v24;
      v35 = __ROR8__(v33, 44) + v27 + a3 + __ROR8__(v27 + a3 + v24 - 0x622015F714C7D297 * (v31 ^ (v31 >> 47)), 21);
      v36 = v26 + v28 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v37 = v25 + v28 + v36;
      v38 = __ROR8__(v37, 44);
      v39 = v37 + v29;
      v40 = v38 + v36 + __ROR8__(v36 + v24 + v29, 21);
      v42 = *a2;
      v41 = a2 + 4;
      v43 = v42 - 0x4B6D499041670D8DLL * v24;
      v44 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v45 = *(v41 - 3);
        v46 = v43 + v34 + v30 + v45;
        v47 = v41[2];
        v48 = v41[3];
        v49 = v41[1];
        v30 = v49 + v34 - 0x4B6D499041670D8DLL * __ROR8__(v30 + v35 + v47, 42);
        v50 = v32 + v39;
        v51 = *(v41 - 2);
        v52 = *(v41 - 1);
        v53 = *(v41 - 4) - 0x4B6D499041670D8DLL * v35;
        v54 = v53 + v39 + v52;
        v55 = v53 + v45 + v51;
        v34 = v55 + v52;
        v56 = __ROR8__(v55, 44) + v53;
        v57 = (0xB492B66FBE98F273 * __ROR8__(v46, 37)) ^ v40;
        v43 = 0xB492B66FBE98F273 * __ROR8__(v50, 33);
        v35 = v56 + __ROR8__(v54 + v57, 21);
        v58 = v43 + v40 + *v41;
        v39 = v49 + v47 + v58 + v48;
        v40 = __ROR8__(v49 + v47 + v58, 44) + v58 + __ROR8__(v30 + v51 + v58 + v48, 21);
        v41 += 8;
        v32 = v57;
        v44 += 64;
      }
      while (v44);
      v59 = v43
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v35)))) >> 47));
      v60 = 0x9DDFEA08EB382D69
          * (v59 ^ (v57
                  - 0x4B6D499041670D8DLL * (v30 ^ (v30 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) ^ ((0x9DDFEA08EB382D69 * (v39 ^ ((0x9DDFEA08EB382D69 * (v39 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v39 ^ v34)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47));
    }
    else
    {
      v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      v9 = a2[2];
      v8 = a2[3];
      v10 = __ROR8__(v7 + v8, 52);
      v11 = v7 + a2[1];
      v12 = __ROR8__(v11, 7);
      v13 = v11 + v9;
      v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      v15 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      v16 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      v17 = 0xC3A5C85C97CB3127 * (v16 + *(uint64_t *)((char *)a2 + a3 - 8) + v8 + v15)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 8) + v8 + v14, 52)
           + __ROR8__(v16, 31));
      return 0x9AE16A3B2F90404FLL
           * ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) ^ ((v15 - 0x3C5A37A36834CED9 * (v17 ^ (v17 >> 47))) >> 47));
    }
  }
  else if (a3 > 0x10)
  {
    v18 = a2[1];
    v19 = 0xB492B66FBE98F273 * *a2;
    v20 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v19 - v18, 43);
    v21 = v19 + a3 + __ROR8__(v18 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
    v22 = 0x9DDFEA08EB382D69 * ((v20 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v21);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  }
  else if (a3 < 9)
  {
    if (a3 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a3)
      {
        v63 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                       * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v63 ^ (v63 >> 47));
      }
    }
    else
    {
      v61 = *(unsigned int *)((char *)a2 + a3 - 4);
      v62 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v61);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) ^ ((0x9DDFEA08EB382D69 * (v61 ^ (v62 >> 47) ^ v62)) >> 47));
    }
  }
  else
  {
    v3 = *(uint64_t *)((char *)a2 + a3 - 8);
    v4 = __ROR8__(v3 + a3, a3);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
  }
  return result;
}

void TransportService::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count_vtbl *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  std::__shared_weak_count *shared_owners;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t buf[8];
  uint64_t v57;
  void (*v58)(uint64_t);
  void *v59;
  uint64_t *v60;
  uint64_t v61[2];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v11 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v57 = 0x40000000;
  v58 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v59 = &__block_descriptor_tmp_13_8;
  v60 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v12 = (std::__shared_weak_count *)unk_1ED70F6A0;
    v54 = GetABMLogServer(void)::sLogServer;
    v55 = unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v12 = (std::__shared_weak_count *)unk_1ED70F6A0;
    v54 = GetABMLogServer(void)::sLogServer;
    v55 = unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
LABEL_6:
  v15 = *((_QWORD *)GetGlobalLogger(&v54) + 4);
  if (!v12)
    goto LABEL_10;
  v16 = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (v17)
  {
LABEL_10:
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      goto LABEL_12;
    goto LABEL_11;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
LABEL_11:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I IPC: Creating ARI transport service...", buf, 2u);
  }
LABEL_12:
  v19 = *a1;
  v18 = a1[1];
  v20 = (std::__shared_weak_count *)operator new(0x118uLL);
  v21 = v20;
  v20->__shared_owners_ = 0;
  v22 = (unint64_t *)&v20->__shared_owners_;
  v20->__shared_weak_owners_ = 0;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_1E791A3D8;
  *(_QWORD *)buf = v19;
  v57 = v18;
  if (v18)
  {
    v23 = (unint64_t *)(v18 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)a2[1];
  v64 = *a2;
  v65 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (std::__shared_weak_count_vtbl *)&v20[1];
  v29 = *a3;
  v30 = (std::__shared_weak_count *)a3[1];
  v62 = v29;
  v63 = v30;
  if (v30)
  {
    p_shared_weak_owners = (unint64_t *)&v30->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
  }
  v33 = *a4;
  v34 = (std::__shared_weak_count *)a4[1];
  v61[0] = v33;
  v61[1] = (uint64_t)v34;
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  ARITransportService::ARITransportService((uint64_t)&v20[1], buf, &v64, &v62, v61);
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v63)
    std::__shared_weak_count::__release_weak(v63);
  v39 = v65;
  if (v65)
  {
    v40 = (unint64_t *)&v65->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)v57;
  if (v57)
  {
    v43 = (unint64_t *)(v57 + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
      v45 = (uint64_t *)&v21[4];
      shared_owners = (std::__shared_weak_count *)v21[4].__shared_owners_;
      if (shared_owners)
        goto LABEL_41;
      do
LABEL_49:
        v50 = __ldxr(v22);
      while (__stxr(v50 + 1, v22));
      v51 = (unint64_t *)&v21->__shared_weak_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v21[4].__vftable = v28;
      v21[4].__shared_owners_ = (uint64_t)v21;
      goto LABEL_53;
    }
  }
  v45 = (uint64_t *)&v21[4];
  shared_owners = (std::__shared_weak_count *)v21[4].__shared_owners_;
  if (!shared_owners)
    goto LABEL_49;
LABEL_41:
  if (shared_owners->__shared_owners_ != -1)
    goto LABEL_56;
  do
    v47 = __ldxr(v22);
  while (__stxr(v47 + 1, v22));
  v48 = (unint64_t *)&v21->__shared_weak_owners_;
  do
    v49 = __ldxr(v48);
  while (__stxr(v49 + 1, v48));
  v21[4].__vftable = v28;
  v21[4].__shared_owners_ = (uint64_t)v21;
  std::__shared_weak_count::__release_weak(shared_owners);
  do
LABEL_53:
    v53 = __ldaxr(v22);
  while (__stlxr(v53 - 1, v22));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
LABEL_56:
  *(_QWORD *)buf = v11;
  v57 = 0x40000000;
  v58 = ___ZN19ARITransportService4initEv_block_invoke;
  v59 = &__block_descriptor_tmp_9_3;
  v60 = (uint64_t *)&v21[1];
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(v45, (uint64_t)buf);
  *a5 = (char *)v21 + 128;
  a5[1] = v21;
}

void sub_1BF66501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_1BF665058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ARITransportService::init(ARITransportService *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN19ARITransportService4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9_3;
  v1[4] = this;
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

uint64_t ARITransportService::ARITransportService(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  NSObject *initially_inactive;
  NSObject *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE v28[16];
  _BYTE v29[16];
  _BYTE v30[16];

  *(_QWORD *)a1 = off_1E7919EC0;
  *(_QWORD *)(a1 + 104) = &unk_1E7919F70;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, "com.apple.telephony.abm", "ipc.svc.ari");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v11 = dispatch_queue_create_with_target_V2("ipc.svc.ari", initially_inactive, 0);
  dispatch_set_qos_class_floor(v11, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v11);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v11;
  if (v11)
  {
    dispatch_retain(v11);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v11);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E791A398;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v30);
  *(_QWORD *)(a1 + 8) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 56) = *a2;
  v12 = a2[1];
  *(_QWORD *)(a1 + 64) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v29);
  *(_QWORD *)a1 = off_1E791A428;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  v15 = *a5;
  v16 = (std::__shared_weak_count *)a5[1];
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 104) = &unk_1E791A318;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = v16;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 104) = &unk_1E791A318;
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = 0;
  }
  *(_QWORD *)a1 = off_1E7919EC0;
  *(_QWORD *)(a1 + 104) = &unk_1E7919F70;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 152) = 256;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 192) = *a3;
  v21 = a3[1];
  *(_QWORD *)(a1 + 200) = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  *(_QWORD *)(a1 + 208) = *a4;
  v24 = a4[1];
  *(_QWORD *)(a1 + 216) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 16);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  std::string::append((std::string *)(a1 + 224), 0x100uLL, 0);
  return a1;
}

void sub_1BF665364(_Unwind_Exception *a1)
{
  uint64_t v1;
  TransportService *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  std::__shared_weak_count *v9;
  NSObject *v10;

  if (*(char *)(v1 + 247) < 0)
  {
    operator delete(*v7);
    v9 = *(std::__shared_weak_count **)(v1 + 216);
    if (!v9)
    {
LABEL_3:
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v6);
      std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v3);
      v10 = *(NSObject **)(v1 + 176);
      if (!v10)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    v9 = *(std::__shared_weak_count **)(v1 + 216);
    if (!v9)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v6);
  std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](v3);
  v10 = *(NSObject **)(v1 + 176);
  if (!v10)
  {
LABEL_5:
    dispatch::callback<void({block_pointer})(WakeReason)>::~callback(v5);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
    TransportService::~TransportService(v2);
    ctu::SharedLoggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v1);
    _Unwind_Resume(a1);
  }
LABEL_4:
  dispatch_release(v10);
  goto LABEL_5;
}

void sub_1BF6653EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  _QWORD *v13;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *ARITransportService::getName(ARITransportService *this)
{
  return "ipc.svc.ari";
}

void **std::unique_ptr<support::misc::Watchdog>::~unique_ptr[abi:ne180100](void **a1)
{
  void *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v2);
  }
  return a1;
}

void TransportService::~TransportService(TransportService *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = &unk_1E791A318;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *ctu::SharedLoggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791A398;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791A398;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ARITransportService::~ARITransportService(ARITransportService *this)
{
  AriHostRt *v2;
  Ari *v3;
  Ari *LogLevels;
  void (*v5)(unsigned int, const char *);
  Ari *v6;
  uint64_t v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  const void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  NSObject *v24;
  std::__shared_weak_count *v25;
  uint8_t v26[16];

  *(_QWORD *)this = off_1E7919EC0;
  *((_QWORD *)this + 13) = &unk_1E7919F70;
  ARITransportService::cancelWakeRequest_sync(this);
  v3 = (Ari *)AriHostRt::Shutdown(v2);
  LogLevels = (Ari *)Ari::GetLogLevels(v3);
  v6 = (Ari *)Ari::LogConfig(LogLevels, 0, v5);
  v7 = Ari::GetLogLevels(v6);
  MEMORY[0x1C3B8B560](v7, 0, 0);
  v8 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if ((*((char *)this + 247) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_35:
    operator delete(*((void **)this + 28));
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (!v9)
      goto LABEL_5;
    goto LABEL_4;
  }
  *(_WORD *)v26 = 0;
  _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Gone!", v26, 2u);
  if (*((char *)this + 247) < 0)
    goto LABEL_35;
LABEL_3:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v9)
LABEL_4:
    std::__shared_weak_count::__release_weak(v9);
LABEL_5:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v10)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
LABEL_9:
    v13 = (void *)*((_QWORD *)this + 23);
    *((_QWORD *)this + 23) = 0;
    if (!v13)
      goto LABEL_11;
    goto LABEL_10;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  v13 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v13)
  {
LABEL_10:
    TelephonyBasebandWatchdogStop();
    operator delete(v13);
  }
LABEL_11:
  v14 = *((_QWORD *)this + 22);
  if (v14)
    dispatch_release(v14);
  v15 = *((_QWORD *)this + 21);
  if (v15)
    dispatch_release(v15);
  v16 = (const void *)*((_QWORD *)this + 20);
  if (v16)
    _Block_release(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *((_QWORD *)this + 13) = &unk_1E791A318;
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)this = off_1E791A398;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v23 = *((_QWORD *)this + 12);
  if (v23)
    dispatch_release(v23);
  v24 = *((_QWORD *)this + 11);
  if (v24)
    dispatch_release(v24);
  v25 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
}

{
  void *v1;

  ARITransportService::~ARITransportService(this);
  operator delete(v1);
}

void ARITransportService::shutdown_sync(ARITransportService *this)
{
  AriHostRt *v1;
  Ari *v2;
  Ari *LogLevels;
  void (*v4)(unsigned int, const char *);
  Ari *v5;

  ARITransportService::cancelWakeRequest_sync(this);
  v2 = (Ari *)AriHostRt::Shutdown(v1);
  LogLevels = (Ari *)Ari::GetLogLevels(v2);
  v5 = (Ari *)Ari::LogConfig(LogLevels, 0, v4);
  Ari::GetLogLevels(v5);
  JUMPOUT(0x1C3B8B560);
}

const char *`non-virtual thunk to'ARITransportService::getName(ARITransportService *this)
{
  return "ipc.svc.ari";
}

void ARITransportService::cancelWakeRequest_sync(ARITransportService *this)
{
  NSObject *v2;
  NSObject *v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  const char *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  uint64_t block;
  uint64_t v22;
  void (*v23)(uint64_t);
  void *v24;
  void *aBlock;
  int v26;
  xpc_object_t object;

  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 22);
    *((_QWORD *)this + 22) = 0;
    if (v3)
      dispatch_release(v3);
    if (*((_QWORD *)this + 20) && *((_QWORD *)this + 21))
    {
      if (*((char *)this + 247) < 0)
      {
        if (*((_QWORD *)this + 29))
          goto LABEL_8;
      }
      else if (*((_BYTE *)this + 247))
      {
LABEL_8:
        v4 = xpc_dictionary_create(0, 0, 0);
        if (v4 || (v4 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v4);
            v5 = v4;
          }
          else
          {
            v5 = xpc_null_create();
          }
        }
        else
        {
          v5 = xpc_null_create();
          v4 = 0;
        }
        xpc_release(v4);
        v10 = xpc_string_create((const char *)*MEMORY[0x1E0CFB258]);
        if (!v10)
          v10 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB2B8], v10);
        v11 = xpc_null_create();
        xpc_release(v10);
        xpc_release(v11);
        v12 = (char *)this + 224;
        if (*((char *)this + 247) < 0)
          v12 = *(const char **)v12;
        v13 = xpc_string_create(v12);
        if (!v13)
          v13 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFB458], v13);
        v14 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v14);
        v15 = xpc_BOOL_create(*((_BYTE *)this + 248));
        if (!v15)
          v15 = xpc_null_create();
        xpc_dictionary_set_value(v5, (const char *)*MEMORY[0x1E0CFBDF0], v15);
        v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        if (v5)
        {
          xpc_retain(v5);
          v17 = v5;
          v18 = (const void *)*((_QWORD *)this + 20);
          if (v18)
          {
LABEL_38:
            v19 = _Block_copy(v18);
            goto LABEL_41;
          }
        }
        else
        {
          v17 = xpc_null_create();
          v18 = (const void *)*((_QWORD *)this + 20);
          if (v18)
            goto LABEL_38;
        }
        v19 = 0;
LABEL_41:
        v20 = *((_QWORD *)this + 21);
        block = MEMORY[0x1E0C809B0];
        v22 = 1174405120;
        v23 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        v24 = &__block_descriptor_tmp_52_2;
        if (v19)
        {
          aBlock = _Block_copy(v19);
          v26 = 3;
          object = v17;
          if (v17)
          {
LABEL_43:
            xpc_retain(v17);
LABEL_46:
            dispatch_async(v20, &block);
            xpc_release(object);
            object = 0;
            if (aBlock)
              _Block_release(aBlock);
            if (v19)
              _Block_release(v19);
            xpc_release(v17);
            xpc_release(v5);
            return;
          }
        }
        else
        {
          aBlock = 0;
          v26 = 3;
          object = v17;
          if (v17)
            goto LABEL_43;
        }
        object = xpc_null_create();
        goto LABEL_46;
      }
      v6 = xpc_null_create();
      v7 = (const void *)*((_QWORD *)this + 20);
      if (v7)
        v8 = _Block_copy(v7);
      else
        v8 = 0;
      v9 = *((_QWORD *)this + 21);
      block = MEMORY[0x1E0C809B0];
      v22 = 1174405120;
      v23 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
      v24 = &__block_descriptor_tmp_52_2;
      if (v8)
      {
        aBlock = _Block_copy(v8);
        v26 = 4;
        object = v6;
        if (v6)
        {
LABEL_19:
          xpc_retain(v6);
LABEL_22:
          dispatch_async(v9, &block);
          xpc_release(object);
          object = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v8)
            _Block_release(v8);
          xpc_release(v6);
          return;
        }
      }
      else
      {
        aBlock = 0;
        v26 = 4;
        object = v6;
        if (v6)
          goto LABEL_19;
      }
      object = xpc_null_create();
      goto LABEL_22;
    }
  }
}

void ARITransportService::flushAndCloseLogs_sync(ARITransportService *this)
{
  Ari *LogLevels;
  void (*v2)(unsigned int, const char *);
  Ari *v3;

  LogLevels = (Ari *)Ari::GetLogLevels(this);
  v3 = (Ari *)Ari::LogConfig(LogLevels, 0, v2);
  Ari::GetLogLevels(v3);
  JUMPOUT(0x1C3B8B560);
}

void ARITransportService::shutdown(ARITransportService *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19ARITransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_20;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = (char *)this + 72;
  block[5] = &v4;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN19ARITransportService8shutdownEv_block_invoke(uint64_t a1)
{
  AriHostRt *v1;
  Ari *v2;
  Ari *LogLevels;
  void (*v4)(unsigned int, const char *);
  Ari *v5;

  ARITransportService::cancelWakeRequest_sync(*(ARITransportService **)(a1 + 32));
  v2 = (Ari *)AriHostRt::Shutdown(v1);
  LogLevels = (Ari *)Ari::GetLogLevels(v2);
  v5 = (Ari *)Ari::LogConfig(LogLevels, 0, v4);
  Ari::GetLogLevels(v5);
  JUMPOUT(0x1C3B8B560);
}

void `non-virtual thunk to'ARITransportService::shutdown(ARITransportService *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN19ARITransportService8shutdownEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_20;
  v3[4] = (char *)this - 104;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = (char *)this - 32;
  block[5] = &v4;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN19ARITransportService4initEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t (***v16)(_QWORD, uint64_t);
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  NSObject *v26;
  _BOOL4 v27;
  const char *v28;
  int v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_weak_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE buf[22];
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I ----------------- Setting up ----------------", buf, 2u);
  }
  v4 = capabilities::ipc::supportsPCI((capabilities::ipc *)v3);
  if ((v4 & 1) == 0)
  {
    v42 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
      goto LABEL_69;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "capabilities::ipc::supportsPCI()";
    v47 = 2080;
    v48 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/ARI/Service/ARITransportService.cpp";
    v49 = 1024;
    v50 = 126;
    goto LABEL_68;
  }
  v5 = capabilities::pci::controlChannelCount((capabilities::pci *)v4);
  if (HIDWORD(v5))
  {
    v42 = GetOsLogContext()[1];
    if (!os_log_type_enabled(v42, OS_LOG_TYPE_FAULT))
      goto LABEL_69;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "ABM ASSERT";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "capabilities::pci::controlChannelCount() <= std::numeric_limits<unsigned>::max()";
    v47 = 2080;
    v48 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serve"
          "r/Transport/ARI/Service/ARITransportService.cpp";
    v49 = 1024;
    v50 = 127;
LABEL_68:
    _os_log_fault_impl(&dword_1BF566000, v42, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
LABEL_69:
    __break(1u);
  }
  if (capabilities::pci::controlChannelCount((capabilities::pci *)v5) != 1)
  {
    v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "The number of control channels is not one!", buf, 2u);
    }
  }
  ARIXpcServer::create((uint64_t *)buf);
  v7 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v8 = *(std::__shared_weak_count **)(v1 + 144);
  *(_OWORD *)(v1 + 136) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_17;
  v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_17:
    v14 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  v14 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
LABEL_18:
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I ----------------- ARI runtime XPC Server up ----------------", buf, 2u);
  }
LABEL_19:
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70F248)
    goto LABEL_20;
  v16 = (uint64_t (***)(_QWORD, uint64_t))operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v16, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v15 = operator new(0x20uLL);
  *v15 = &unk_1E7919E70;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v16;
  v17 = (std::__shared_weak_count *)off_1ED70F250;
  qword_1ED70F248 = (uint64_t)v16;
  off_1ED70F250 = v15;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_20:
    v16 = (uint64_t (***)(_QWORD, uint64_t))qword_1ED70F248;
    v15 = off_1ED70F250;
    v43 = (std::__shared_weak_count *)off_1ED70F250;
    if (!off_1ED70F250)
      goto LABEL_32;
    goto LABEL_30;
  }
  v43 = (std::__shared_weak_count *)v15;
LABEL_30:
  v20 = v15 + 1;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_32:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  HIBYTE(v47) = 18;
  strcpy(buf, "ICEEnableARIResets");
  if ((Preferences::getPreference<BOOL>(v16, buf, (ctu::cf *)(v1 + 153)) & 1) != 0)
  {
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_34;
LABEL_37:
    operator delete(*(void **)buf);
    v22 = v43;
    if (!v43)
      goto LABEL_41;
    goto LABEL_38;
  }
  *(_BYTE *)(v1 + 153) = 1;
  if (SHIBYTE(v47) < 0)
    goto LABEL_37;
LABEL_34:
  v22 = v43;
  if (!v43)
    goto LABEL_41;
LABEL_38:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (v24)
  {
LABEL_41:
    v25 = *(unsigned __int8 *)(v1 + 153);
    v26 = *(NSObject **)(v1 + 40);
    v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    if (v25)
      goto LABEL_42;
    goto LABEL_45;
  }
  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
  std::__shared_weak_count::__release_weak(v22);
  v29 = *(unsigned __int8 *)(v1 + 153);
  v26 = *(NSObject **)(v1 + 40);
  v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
  if (v29)
  {
LABEL_42:
    if (v27)
    {
      *(_WORD *)buf = 0;
      v28 = "#I Allowing ARI reset requests";
LABEL_47:
      _os_log_impl(&dword_1BF566000, v26, OS_LOG_TYPE_DEFAULT, v28, buf, 2u);
      goto LABEL_48;
    }
    goto LABEL_48;
  }
LABEL_45:
  if (v27)
  {
    *(_WORD *)buf = 0;
    v28 = "#I Ignoring ARI reset requests";
    goto LABEL_47;
  }
LABEL_48:
  v30 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v30 || (v31 = *(_QWORD *)(v1 + 72), (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
  do
    v35 = __ldxr(p_shared_weak_owners);
  while (__stxr(v35 + 1, p_shared_weak_owners));
  v36 = (unint64_t *)&v32->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v33);
  }
  do
    v38 = __ldxr(p_shared_weak_owners);
  while (__stxr(v38 + 1, p_shared_weak_owners));
  v39 = operator new(0x20uLL);
  *v39 = &off_1E791A488;
  v39[1] = v31;
  v39[2] = v33;
  v39[3] = v1;
  v45 = v39;
  AriHostRt::RegisterBasebandResetDelegate();
  v40 = v45;
  if (v45 == v44)
  {
    v41 = 4;
    v40 = v44;
    goto LABEL_61;
  }
  if (v45)
  {
    v41 = 5;
LABEL_61:
    (*(void (**)(_QWORD *))(*v40 + 8 * v41))(v40);
  }
  std::__shared_weak_count::__release_weak(v33);
}

void `non-virtual thunk to'ARITransportService::init(ARITransportService *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN19ARITransportService4initEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_9_3;
  v1[4] = (char *)this - 104;
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped((uint64_t *)this - 4, (uint64_t)v1);
}

uint64_t ARITransportService::engage(ARITransportService *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19ARITransportService6engageEv_block_invoke;
  v5[3] = &unk_1E791A088;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZN19ARITransportService6engageEv_block_invoke(capabilities::abs *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  capabilities::abs *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  _QWORD v12[10];
  _BYTE buf[24];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a1 + 5);
  if (*(_BYTE *)(v2 + 152))
  {
    v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Skipping RT init as bypass is enabled", buf, 2u);
    }
    *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 24) = 1;
    return;
  }
  if ((unint64_t)capabilities::abs::ARIMessageTimeoutScalingFactor(a1) >> 32)
  {
    v11 = GetOsLogContext()[1];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "ABM ASSERT";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "capabilities::abs::ARIMessageTimeoutScalingFactor() <= std::numeric_limits<uint32_t>::max()";
      *(_WORD *)&buf[22] = 2080;
      v14 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/Transport/ARI/Service/ARITransportService.cpp";
      v15 = 1024;
      v16 = 268;
      _os_log_fault_impl(&dword_1BF566000, v11, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  else
  {
    v4 = *(NSObject **)(v2 + 40);
    v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = capabilities::abs::ARIMessageTimeoutScalingFactor((capabilities::abs *)v5);
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Recovering ARI Runtime with %zu scaling factor", buf, 0xCu);
    }
    v6 = MEMORY[0x1E0C809B0];
    v12[5] = MEMORY[0x1E0C809B0];
    v12[6] = 0x40000000;
    v12[7] = ___ZN19ARITransportService6engageEv_block_invoke_12;
    v12[8] = &__block_descriptor_tmp_13_3;
    v12[9] = v2;
    capabilities::abs::ARIMessageTimeoutScalingFactor((capabilities::abs *)v5);
    v7 = (capabilities::abs *)AriHostRt::Init();
    if ((_DWORD)v7 == -92)
    {
      *(_QWORD *)buf = operator new(0x38uLL);
      *(_OWORD *)&buf[8] = xmmword_1BF740C30;
      strcpy(*(char **)buf, "Failed to open transport to communicate with baseband.");
      ARITransportService::resetBaseband_sync((_QWORD *)v2, buf);
    }
    else
    {
      if (!(_DWORD)v7)
      {
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8) + 24) = 1;
        *(_DWORD *)(v2 + 128) = 1;
        capabilities::abs::engageTimeoutScalingFactor(v7);
        v12[0] = v6;
        v12[1] = 0x40000000;
        v12[2] = ___ZN19ARITransportService6engageEv_block_invoke_14;
        v12[3] = &__block_descriptor_tmp_17_1;
        v12[4] = v2;
        v8 = operator new(0x10uLL);
        v9 = _Block_copy(v12);
        *v8 = "Watchdog timed out";
        TelephonyBasebandWatchdogStart();
        if (v9)
          _Block_release(v9);
        v10 = *(void **)(v2 + 184);
        *(_QWORD *)(v2 + 184) = v8;
        if (v10)
        {
          TelephonyBasebandWatchdogStop();
          operator delete(v10);
        }
        return;
      }
      *(_QWORD *)buf = operator new(0x28uLL);
      *(_OWORD *)&buf[8] = xmmword_1BF73D670;
      strcpy(*(char **)buf, "Failed to initialize ARI runtime.");
      ARITransportService::resetBaseband_sync((_QWORD *)v2, buf);
    }
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
}

void sub_1BF666808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN19ARITransportService6engageEv_block_invoke_12(uint64_t a1)
{
  ARITransportService *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(ARITransportService **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Received All-Ready from ARI Runtime", v3, 2u);
  }
  ARITransportService::broadcastTransportReady_sync(v1);
}

void ARITransportService::broadcastTransportReady_sync(ARITransportService *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  char *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint8_t v15[8];
  void *aBlock;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v20 = 0;
  v21 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2)
    goto LABEL_18;
  v21 = std::__shared_weak_count::lock(v2);
  if (!v21)
    goto LABEL_18;
  v3 = *((_QWORD *)this + 26);
  v20 = v3;
  if (!v3)
    goto LABEL_18;
  v4 = abm::kEventTransportIsReady[0];
  v5 = strlen(abm::kEventTransportIsReady[0]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v19 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v19) = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_12;
  }
  memmove(v7, v4, (size_t)v6);
LABEL_12:
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  aBlock = 0;
  cf = 0;
  Service::broadcastEvent(v3, (uint64_t)__dst, &cf, (const void **)&aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
LABEL_18:
  v10 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I ----------------- TransportIsReady event broadcasted to other modules ----------------", v15, 2u);
  }
  *((_DWORD *)this + 32) = 2;
  v11 = (void *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v11)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v11);
  }
  v12 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BF666AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void ___ZN19ARITransportService6engageEv_block_invoke_14(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN19ARITransportService6engageEv_block_invoke_2;
  v2[3] = &__block_descriptor_tmp_16_2;
  v2[4] = v1;
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void ___ZN19ARITransportService6engageEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *__p;
  __int128 v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v1 + 128) != 2)
  {
    __p = operator new(0x20uLL);
    v3 = xmmword_1BF740C40;
    strcpy((char *)__p, "Baseband ARI engage timeout");
    ARITransportService::resetBaseband_sync((_QWORD *)v1, (const char *)&__p);
    if (SHIBYTE(v3) < 0)
      operator delete(__p);
  }
}

void sub_1BF666BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ARITransportService::resetBaseband_sync(_QWORD *a1, const char *a2)
{
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  const char *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  __int128 *p_buf;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const void *v27;
  xpc_object_t object;
  uint64_t v29;
  std::__shared_weak_count *v30;
  __int128 buf;
  unint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(const char **)a2;
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v10;
    _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    v5 = (std::__shared_weak_count *)a1[27];
    if (!v5)
      return;
  }
  else
  {
    v5 = (std::__shared_weak_count *)a1[27];
    if (!v5)
      return;
  }
  v6 = std::__shared_weak_count::lock(v5);
  v30 = v6;
  if (!v6)
    return;
  v29 = a1[26];
  if (!v29)
  {
    v9 = v6;
LABEL_39:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    return;
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v7) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v11 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB538], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFC000]);
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB8D0], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  if (a2[23] >= 0)
    v15 = a2;
  else
    v15 = *(const char **)a2;
  v16 = xpc_string_create(v15);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v8, (const char *)*MEMORY[0x1E0CFB788], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = v29;
  v19 = (const void *)*MEMORY[0x1E0CFB4E0];
  v20 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    p_buf = (__int128 *)operator new(v23 + 1);
    *((_QWORD *)&buf + 1) = v21;
    v32 = v24 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_34:
    memmove(p_buf, v19, v21);
    *((_BYTE *)p_buf + v21) = 0;
    object = v8;
    if (v8)
      goto LABEL_30;
    goto LABEL_35;
  }
  HIBYTE(v32) = v20;
  p_buf = &buf;
  if (v20)
    goto LABEL_34;
  LOBYTE(buf) = 0;
  object = v8;
  if (v8)
  {
LABEL_30:
    xpc_retain(v8);
    goto LABEL_36;
  }
LABEL_35:
  object = xpc_null_create();
LABEL_36:
  v27 = 0;
  Service::runCommand(v18, (uint64_t)&buf, &object, &v27);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v32) < 0)
    operator delete((void *)buf);
  xpc_release(v8);
  v9 = v30;
  if (v30)
    goto LABEL_39;
}

void sub_1BF666F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t `non-virtual thunk to'ARITransportService::engage(ARITransportService *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19ARITransportService6engageEv_block_invoke;
  v5[3] = &unk_1E791A088;
  v5[4] = &v6;
  v5[5] = (char *)this - 104;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = (char *)this - 32;
  block[5] = &v10;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ARITransportService::recover(ARITransportService *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'ARITransportService::recover(ARITransportService *this)
{
  return 1;
}

void ARITransportService::enterLowPower(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  _QWORD v16[5];
  dispatch_group_t group;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN19ARITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke;
  v16[3] = &__block_descriptor_tmp_24_1;
  v14 = *a2;
  v16[4] = a1;
  group = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  v18 = v6;
  v19 = v9;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(v5, (uint64_t)v16);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN19ARITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  const void *v4;
  void *v5;
  const void *v6;
  NSObject *v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  _QWORD v16[5];
  dispatch_group_t group;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint8_t buf[8];
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  void *aBlock;
  int v25;

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting ARI RT Enter LP event", buf, 2u);
  }
  *(_BYTE *)(v2 + 248) = 0;
  if (*(char *)(v2 + 247) < 0)
  {
    *(_QWORD *)(v2 + 232) = 0;
    **(_BYTE **)(v2 + 224) = 0;
    v4 = *(const void **)(v2 + 160);
    if (!v4)
      goto LABEL_15;
  }
  else
  {
    *(_BYTE *)(v2 + 247) = 0;
    *(_BYTE *)(v2 + 224) = 0;
    v4 = *(const void **)(v2 + 160);
    if (!v4)
      goto LABEL_15;
  }
  if (*(_QWORD *)(v2 + 168))
  {
    v5 = _Block_copy(v4);
    v6 = v5;
    v7 = *(NSObject **)(v2 + 168);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v21 = 1174405120;
    v22 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke;
    v23 = &__block_descriptor_tmp_50_1;
    if (v5)
      v8 = _Block_copy(v5);
    else
      v8 = 0;
    aBlock = v8;
    v25 = 2;
    dispatch_async(v7, buf);
    if (aBlock)
      _Block_release(aBlock);
    if (v6)
      _Block_release(v6);
  }
LABEL_15:
  v9 = dispatch_group_create();
  if (AriHostRt::SetOPMode())
  {
    v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Failed to trigger ARI RT transition", buf, 2u);
    }
  }
  else
  {
    v11 = *(NSObject **)(v2 + 88);
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 1174405120;
    v16[2] = ___ZN19ARITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_22;
    v16[3] = &__block_descriptor_tmp_23_5;
    v12 = a1[5];
    v16[4] = v2;
    group = v12;
    if (v12)
    {
      dispatch_retain(v12);
      dispatch_group_enter(v12);
    }
    v13 = (std::__shared_weak_count *)a1[7];
    v18 = a1[6];
    v19 = v13;
    if (v13)
    {
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
    }
    dispatch_group_notify(v9, v11, v16);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
  }
  if (v9)
    dispatch_release(v9);
}

void sub_1BF667494(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void ___ZN19ARITransportService13enterLowPowerEN8dispatch13group_sessionE_block_invoke_22(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[6])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I ARI Runtime completed LPM enter transition", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c44_ZTSNSt3__18weak_ptrI19ARITransportServiceEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    v5 = a1[5];
    if (v5)
      dispatch_group_enter(v5);
  }
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE48c44_ZTSNSt3__18weak_ptrI19ARITransportServiceEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_release(v4);
  }
}

void `non-virtual thunk to'ARITransportService::enterLowPower(uint64_t a1, NSObject **a2)
{
  ARITransportService::enterLowPower(a1 - 104, a2);
}

uint64_t ARITransportService::tearDown(ARITransportService *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19ARITransportService8tearDownEv_block_invoke;
  v5[3] = &unk_1E791A110;
  v5[4] = &v6;
  v5[5] = this;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = (char *)this + 72;
  block[5] = &v10;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ___ZN19ARITransportService8tearDownEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  _BOOL8 v4;
  NSObject *v5;
  _BOOL8 v6;
  NSObject *v7;
  void *v8;
  uint8_t v9[16];
  uint8_t v10[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v1 + 128))
  {
    ARITransportService::cancelWakeRequest_sync(*(ARITransportService **)(a1 + 40));
    v3 = *(NSObject **)(v1 + 40);
    v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Cancelling all ARI transactions...", buf, 2u);
    }
    AriHostRt::CancelAllTransactions((AriHostRt *)v4);
    v5 = *(NSObject **)(v1 + 40);
    v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Tearing down ARI Runtime...", v10, 2u);
    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = AriHostRt::Shutdown((AriHostRt *)v6) == 0;
    *(_DWORD *)(v1 + 128) = 0;
  }
  else
  {
    v7 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Ignoring tear down request as ARI transport state is already reset", v9, 2u);
    }
  }
  v8 = *(void **)(v1 + 184);
  *(_QWORD *)(v1 + 184) = 0;
  if (v8)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v8);
  }
}

uint64_t `non-virtual thunk to'ARITransportService::tearDown(ARITransportService *this)
{
  NSObject *v1;
  char *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19ARITransportService8tearDownEv_block_invoke;
  v5[3] = &unk_1E791A110;
  v5[4] = &v6;
  v5[5] = (char *)this - 104;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = (char *)this - 32;
  block[5] = &v10;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void ARITransportService::exitLowPower(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  _QWORD v16[5];
  dispatch_group_t group;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN19ARITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke;
  v16[3] = &__block_descriptor_tmp_28_1;
  v14 = *a2;
  v16[4] = a1;
  group = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  v18 = v6;
  v19 = v9;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(v5, (uint64_t)v16);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  std::__shared_weak_count::__release_weak(v9);
}

void ___ZN19ARITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  _QWORD v12[5];
  dispatch_group_t group;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint8_t buf[16];

  v2 = a1[4];
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Starting ARI RT Exit LP event", buf, 2u);
  }
  if (*(_DWORD *)(v2 + 128) == 2)
  {
    ARITransportService::updateWakeReason_sync((ARITransportService *)v2);
    v4 = dispatch_group_create();
    if (AriHostRt::SetOPMode())
    {
      v5 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Failed to trigger ARI RT transition", buf, 2u);
      }
    }
    else
    {
      v7 = *(NSObject **)(v2 + 88);
      v12[0] = MEMORY[0x1E0C809B0];
      v12[1] = 1174405120;
      v12[2] = ___ZN19ARITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke_26;
      v12[3] = &__block_descriptor_tmp_27_3;
      v8 = a1[5];
      v12[4] = v2;
      group = v8;
      if (v8)
      {
        dispatch_retain(v8);
        dispatch_group_enter(v8);
      }
      v9 = (std::__shared_weak_count *)a1[7];
      v14 = a1[6];
      v15 = v9;
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      dispatch_group_notify(v4, v7, v12);
      if (v15)
        std::__shared_weak_count::__release_weak(v15);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
    }
    if (v4)
      dispatch_release(v4);
  }
  else
  {
    v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Skipping Exit LPM as baseband ready is pending", buf, 2u);
    }
  }
}

void sub_1BF667BFC(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void ARITransportService::updateWakeReason_sync(ARITransportService *this)
{
  _QWORD *v2;
  char SystemWakeReason;
  NSObject *v4;
  char v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 224);
  if ((*((char *)this + 247) & 0x80000000) == 0)
  {
    SystemWakeReason = TelephonyUtilGetSystemWakeReason();
    v4 = *((_QWORD *)this + 5);
    if ((SystemWakeReason & 1) != 0)
      goto LABEL_3;
LABEL_9:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v6) = 0;
      _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "Failed to fetch system wake reason", (uint8_t *)&v6, 2u);
      if (!*((_QWORD *)this + 20))
        return;
      goto LABEL_11;
    }
LABEL_10:
    if (!*((_QWORD *)this + 20))
      return;
    goto LABEL_11;
  }
  v5 = TelephonyUtilGetSystemWakeReason();
  v4 = *((_QWORD *)this + 5);
  if ((v5 & 1) == 0)
    goto LABEL_9;
LABEL_3:
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    goto LABEL_10;
  if (*((char *)this + 247) < 0)
    v2 = (_QWORD *)*v2;
  v6 = 136315138;
  v7 = v2;
  _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I System wake reason: %s", (uint8_t *)&v6, 0xCu);
  if (*((_QWORD *)this + 20))
  {
LABEL_11:
    if (*((_QWORD *)this + 21))
      ARITransportService::getWakeReason_sync(this, 2);
  }
}

void ___ZN19ARITransportService12exitLowPowerEN8dispatch13group_sessionE_block_invoke_26(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[6])
      {
        v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I ARI Runtime completed LPM exit transition", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void `non-virtual thunk to'ARITransportService::exitLowPower(uint64_t a1, NSObject **a2)
{
  ARITransportService::exitLowPower(a1 - 104, a2);
}

void ARITransportService::dumpState(ARITransportService *this)
{
  NSObject *v1;
  char *v2;
  ARITransportService *v3;
  _QWORD block[6];

  v3 = this;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_51_3;
  block[4] = (char *)this + 72;
  block[5] = &v3;
  v2 = (char *)this + 88;
  v1 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void `non-virtual thunk to'ARITransportService::dumpState(ARITransportService *this)
{
  NSObject *v1;
  char *v2;
  char *v3;
  _QWORD block[6];

  v3 = (char *)this - 104;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIZNS1_9dumpStateEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  block[3] = &__block_descriptor_tmp_51_3;
  block[4] = (char *)this - 32;
  block[5] = &v3;
  v2 = (char *)this - 16;
  v1 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ARITransportService::reportPowerDownMessages_sync(ARITransportService *this)
{
  xpc_object_t v2;
  uint64_t v3;
  xpc_object_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  xpc_object_t v7;
  xpc_object_t v8;
  std::__shared_weak_count *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const void *v21;
  xpc_object_t object;
  void *__dst[2];
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = xpc_array_create(0, 0);
  v3 = MEMORY[0x1E0C812C8];
  if (v2 || (v2 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v2) == v3)
    {
      xpc_retain(v2);
      v4 = v2;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v2 = 0;
  }
  xpc_release(v2);
  if (MEMORY[0x1C3B8CD78](v4) != v3)
    goto LABEL_8;
  if (!xpc_array_get_count(v4))
    goto LABEL_8;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v5)
    goto LABEL_8;
  v6 = std::__shared_weak_count::lock(v5);
  v26 = v6;
  if (!v6)
    goto LABEL_8;
  v25 = *((_QWORD *)this + 26);
  if (!v25)
  {
    v9 = v6;
LABEL_37:
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_8;
  }
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v7) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  if (v4)
  {
    xpc_retain(v4);
    v10 = v4;
  }
  else
  {
    v10 = xpc_null_create();
  }
  xpc_dictionary_set_value(v8, abm::kKeyPowerDownMessageList[0], v10);
  v11 = xpc_null_create();
  xpc_release(v10);
  xpc_release(v11);
  v12 = v25;
  v13 = abm::kCommandSetPowerDownMessageList[0];
  v14 = strlen(abm::kCommandSetPowerDownMessageList[0]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    v24 = v18 | 0x8000000000000000;
    __dst[0] = v16;
    goto LABEL_30;
  }
  HIBYTE(v24) = v14;
  v16 = __dst;
  if (v14)
LABEL_30:
    memmove(v16, v13, (size_t)v15);
  *((_BYTE *)v15 + (_QWORD)v16) = 0;
  object = v8;
  if (v8)
    xpc_retain(v8);
  else
    object = xpc_null_create();
  v21 = 0;
  Service::runCommand(v12, (uint64_t)__dst, &object, &v21);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
  xpc_release(v8);
  v9 = v26;
  if (v26)
    goto LABEL_37;
LABEL_8:
  xpc_release(v4);
}

void sub_1BF66820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  void *v19;

  xpc_release(object);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(v19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ARITransportService::reportPowerDownMessages_sync(ARITransportService *this)
{
  ARITransportService::reportPowerDownMessages_sync((ARITransportService *)((char *)this - 104));
}

uint64_t ARITransportService::enableBypass(ARITransportService *this, char a2)
{
  NSObject *v2;
  char *v3;
  uint64_t v4;
  _QWORD v6[6];
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD block[6];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN19ARITransportService12enableBypassEb_block_invoke;
  v6[3] = &unk_1E791A198;
  v7 = a2;
  v6[4] = &v8;
  v6[5] = this;
  v12 = v6;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = (char *)this + 72;
  block[5] = &v12;
  v3 = (char *)this + 88;
  v2 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
  v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t ___ZN19ARITransportService12enableBypassEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t result;
  uint8_t v7[16];
  uint8_t buf[16];

  v2 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 152) = *(_BYTE *)(a1 + 48);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(NSObject **)(v2 + 40);
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Bypass enable", buf, 2u);
    }
    result = AriHostRt::Shutdown((AriHostRt *)v5);
  }
  else
  {
    if (v5)
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Bypass disable", v7, 2u);
    }
    result = AriHostRt::Init((AriHostRt *)"ABMRT/PCIe/ARI", (const char *)1);
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)result == 0;
  return result;
}

uint64_t `non-virtual thunk to'ARITransportService::enableBypass(ARITransportService *this, char a2)
{
  NSObject *v2;
  char *v3;
  uint64_t v4;
  _QWORD v6[6];
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  _QWORD block[6];

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = ___ZN19ARITransportService12enableBypassEb_block_invoke;
  v6[3] = &unk_1E791A198;
  v7 = a2;
  v6[4] = &v8;
  v6[5] = (char *)this - 104;
  v12 = v6;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_37_2;
  block[4] = (char *)this - 32;
  block[5] = &v12;
  v3 = (char *)this - 16;
  v2 = *((_QWORD *)this - 2);
  if (*((_QWORD *)v3 + 1))
    dispatch_async_and_wait(v2, block);
  else
    dispatch_sync(v2, block);
  v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void ARITransportService::registerForWakeReason(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN19ARITransportService21registerForWakeReasonEN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_30_3;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN19ARITransportService21registerForWakeReasonEN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE_block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  const void *v4;
  NSObject *v5;
  NSObject *v6;

  v3 = a1[4];
  v2 = (void *)a1[5];
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 160);
  *(_QWORD *)(v3 + 160) = v2;
  if (v4)
    _Block_release(v4);
  v5 = a1[6];
  if (v5)
    dispatch_retain(v5);
  v6 = *(NSObject **)(v3 + 168);
  *(_QWORD *)(v3 + 168) = v5;
  if (v6)
    dispatch_release(v6);
}

void __copy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c57_ZTSN8dispatch8callbackIU13block_pointerFv10WakeReasonEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void `non-virtual thunk to'ARITransportService::registerForWakeReason(uint64_t a1, uint64_t a2)
{
  ARITransportService::registerForWakeReason(a1 - 104, a2);
}

void ARITransportService::getWakeReason_sync(ARITransportService *this, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  CommandDriverFactory *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  NSObject *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v35[6];
  std::__shared_weak_count *v36;
  int v37;
  void *aBlock;
  dispatch_object_t object;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  uint8_t buf[16];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v3 || (v5 = *((_QWORD *)this + 9), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v7);
  v12 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
LABEL_9:
    --a2;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending request to get wake reason. Remaining-attempts=%u", buf, 8u);
  }
LABEL_10:
  v44 = 0xAAAAAAAAAAAAAAAALL;
  v45 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v13 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v14 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v13);
    v15 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v16 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v15;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v20 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = off_1ED70F4D0;
  }
  v22 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v40 = v14;
  v41 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v23 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&v42, v14);
  v44 = 0;
  v45 = 0;
  if (v43)
  {
    v45 = std::__shared_weak_count::lock(v43);
    if (v45)
      v44 = v42;
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
  }
  if (!v22)
    goto LABEL_34;
  v25 = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v27 = v44;
    if (v44)
      goto LABEL_35;
  }
  else
  {
LABEL_34:
    v27 = v44;
    if (v44)
    {
LABEL_35:
      v35[0] = MEMORY[0x1E0C809B0];
      v35[1] = 1174405120;
      v35[2] = ___ZN19ARITransportService18getWakeReason_syncEj_block_invoke;
      v35[3] = &__block_descriptor_tmp_33_7;
      v35[4] = this;
      v35[5] = v5;
      v36 = v7;
      do
        v28 = __ldxr(p_shared_weak_owners);
      while (__stxr(v28 + 1, p_shared_weak_owners));
      v37 = a2;
      v29 = _Block_copy(v35);
      v30 = *((_QWORD *)this + 11);
      if (v30)
        dispatch_retain(v30);
      aBlock = v29;
      object = v30;
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v27 + 136))(v27, &aBlock);
      if (object)
        dispatch_release(object);
      if (aBlock)
        _Block_release(aBlock);
      if (v36)
      {
        std::__shared_weak_count::__release_weak(v36);
        v31 = v45;
        if (!v45)
          goto LABEL_55;
        goto LABEL_51;
      }
LABEL_50:
      v31 = v45;
      if (!v45)
        goto LABEL_55;
      goto LABEL_51;
    }
  }
  v32 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    goto LABEL_50;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1BF566000, v32, OS_LOG_TYPE_ERROR, "Failed to get radio command driver!", buf, 2u);
  v31 = v45;
  if (!v45)
    goto LABEL_55;
LABEL_51:
  v33 = (unint64_t *)&v31->__shared_owners_;
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (!v34)
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF668A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN19ARITransportService18getWakeReason_syncEj_block_invoke(uint64_t a1, _QWORD *a2, ctu **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  std::__shared_weak_count *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  const void *v20;
  uint64_t (*v21)(uint64_t);
  int v22;
  NSObject *v23;
  NSObject *v24;
  dispatch_time_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  NSObject *v28;
  unint64_t *p_shared_weak_owners;
  unint64_t v30;
  uint64_t (*v31)(uint64_t);
  xpc_object_t v32;
  xpc_object_t v33;
  const void *v34;
  void *v35;
  const void *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  _QWORD handler[6];
  std::__shared_weak_count *v45;
  int v46;
  xpc_object_t v47;
  xpc_object_t xdict;
  std::__shared_weak_count *v50;
  xpc_object_t object;
  uint64_t v52;
  void (*v53)(uint64_t);
  void *v54;
  void *aBlock;
  int v56;
  xpc_object_t v57;

  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    v7 = *(_QWORD *)(a1 + 32);
    v8 = std::__shared_weak_count::lock(v4);
    v50 = v8;
    if (v8)
    {
      if (!*(_QWORD *)(a1 + 40))
      {
        v11 = v8;
LABEL_85:
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
      xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v9 = xpc_dictionary_create(0, 0, 0);
      v10 = v9;
      if (v9)
      {
        xdict = v9;
      }
      else
      {
        v10 = xpc_null_create();
        xdict = v10;
        if (!v10)
        {
          v12 = xpc_null_create();
          v10 = 0;
          goto LABEL_12;
        }
      }
      if (MEMORY[0x1C3B8CD78](v10) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v10);
        goto LABEL_13;
      }
      v12 = xpc_null_create();
LABEL_12:
      xdict = v12;
LABEL_13:
      xpc_release(v10);
      v13 = xpc_string_create((const char *)*MEMORY[0x1E0CFB258]);
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB2B8], v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = (const char *)(v7 + 224);
      if (*(char *)(v7 + 247) < 0)
        v15 = *(const char **)v15;
      v16 = xpc_string_create(v15);
      if (!v16)
        v16 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFB458], v16);
      v17 = xpc_null_create();
      xpc_release(v16);
      xpc_release(v17);
      v18 = xpc_BOOL_create(*(_BYTE *)(v7 + 248));
      if (!v18)
        v18 = xpc_null_create();
      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CFBDF0], v18);
      v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if (*a2)
        v21 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v21 = 0;
      if (v21)
        goto LABEL_25;
      v31 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      if (!*a3)
        v31 = 0;
      if (!v31)
      {
LABEL_25:
        v22 = *(_DWORD *)(a1 + 56);
        if (v22)
        {
          v23 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(v7 + 88));
          v24 = *(NSObject **)(v7 + 176);
          *(_QWORD *)(v7 + 176) = v23;
          if (v24)
          {
            dispatch_release(v24);
            v23 = *(NSObject **)(v7 + 176);
          }
          if (v23)
          {
            v25 = dispatch_time(0, 1000000000);
            dispatch_source_set_timer(v23, v25, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
            handler[0] = MEMORY[0x1E0C809B0];
            handler[2] = ___ZN19ARITransportService18getWakeReason_syncEj_block_invoke_2;
            handler[3] = &__block_descriptor_tmp_31_1;
            v27 = *(_QWORD *)(a1 + 40);
            v26 = *(std::__shared_weak_count **)(a1 + 48);
            handler[4] = v7;
            handler[5] = v27;
            v28 = *(NSObject **)(v7 + 176);
            handler[1] = 1174405120;
            v45 = v26;
            if (v26)
            {
              p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
              do
                v30 = __ldxr(p_shared_weak_owners);
              while (__stxr(v30 + 1, p_shared_weak_owners));
            }
            v46 = *(_DWORD *)(a1 + 56);
            dispatch_source_set_event_handler(v28, handler);
            dispatch_activate(*(dispatch_object_t *)(v7 + 176));
            if (v45)
              std::__shared_weak_count::__release_weak(v45);
          }
          goto LABEL_84;
        }
      }
      else
      {
        if (*(_QWORD *)(v7 + 160) && *(_QWORD *)(v7 + 168))
        {
          ctu::cf_to_xpc(*a3, v20);
          v32 = object;
          if (object && MEMORY[0x1C3B8CD78](object) == MEMORY[0x1E0C812F8])
            xpc_retain(object);
          else
            v32 = xpc_null_create();
          xpc_release(object);
          v47 = v32;
          if (v32)
            xpc_retain(v32);
          else
            v47 = xpc_null_create();
          abm::ParseWakeDataIce(&v47, &xdict);
          xpc_release(v47);
          v47 = 0;
          xpc_release(v32);
        }
        v22 = 1;
      }
      if (*(_QWORD *)(v7 + 160) && *(_QWORD *)(v7 + 168))
      {
        if (*(char *)(v7 + 247) < 0)
        {
          if (((*(_QWORD *)(v7 + 232) == 0) & ~v22) == 0)
            goto LABEL_52;
        }
        else if (((*(_BYTE *)(v7 + 247) == 0) & ~v22) == 0)
        {
LABEL_52:
          v33 = xdict;
          if (xdict)
            xpc_retain(xdict);
          else
            v33 = xpc_null_create();
          v36 = *(const void **)(v7 + 160);
          if (v36)
            v37 = _Block_copy(v36);
          else
            v37 = 0;
          v40 = *(NSObject **)(v7 + 168);
          object = (xpc_object_t)MEMORY[0x1E0C809B0];
          v52 = 1174405120;
          v53 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
          v54 = &__block_descriptor_tmp_52_2;
          if (v37)
            v41 = _Block_copy(v37);
          else
            v41 = 0;
          aBlock = v41;
          v56 = 3;
          v57 = v33;
          if (v33)
            xpc_retain(v33);
          else
            v57 = xpc_null_create();
          dispatch_async(v40, &object);
          xpc_release(v57);
          v57 = 0;
          if (aBlock)
            _Block_release(aBlock);
          if (v37)
            _Block_release(v37);
LABEL_83:
          xpc_release(v33);
          goto LABEL_84;
        }
        v33 = xpc_null_create();
        v34 = *(const void **)(v7 + 160);
        if (v34)
          v35 = _Block_copy(v34);
        else
          v35 = 0;
        v38 = *(NSObject **)(v7 + 168);
        object = (xpc_object_t)MEMORY[0x1E0C809B0];
        v52 = 1174405120;
        v53 = ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke;
        v54 = &__block_descriptor_tmp_52_2;
        if (v35)
          v39 = _Block_copy(v35);
        else
          v39 = 0;
        aBlock = v39;
        v56 = 4;
        v57 = v33;
        if (v33)
          xpc_retain(v33);
        else
          v57 = xpc_null_create();
        dispatch_async(v38, &object);
        xpc_release(v57);
        v57 = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v35)
          _Block_release(v35);
        goto LABEL_83;
      }
LABEL_84:
      xpc_release(xdict);
      v11 = v50;
      if (!v50)
        return;
      goto LABEL_85;
    }
  }
}

void sub_1BF6690B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, xpc_object_t a19, char a20)
{
  void *v20;

  xpc_release(object);
  xpc_release(v20);
  xpc_release(a19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void ___ZN19ARITransportService18getWakeReason_syncEj_block_invoke_2(uint64_t a1)
{
  std::__shared_weak_count *v2;
  dispatch_source_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(dispatch_source_t **)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 40))
      {
        dispatch_source_cancel(v3[22]);
        v6 = v3[22];
        v3[22] = 0;
        if (v6)
          dispatch_release(v6);
        ARITransportService::getWakeReason_sync((ARITransportService *)v3, *(_DWORD *)(a1 + 56));
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF669238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19ARITransportServiceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19ARITransportServiceEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t ARITransportService::shouldTeardownOnWillReset(ARITransportService *this)
{
  uint64_t v1;

  v1 = capabilities::coredump::supportsSPMISignalling(this);
  if ((v1 & 1) != 0)
    return 1;
  else
    return capabilities::coredump::supportsGPIOSignalling((capabilities::coredump *)v1);
}

uint64_t `non-virtual thunk to'ARITransportService::shouldTeardownOnWillReset(ARITransportService *this)
{
  uint64_t v1;

  v1 = capabilities::coredump::supportsSPMISignalling(this);
  if ((v1 & 1) != 0)
    return 1;
  else
    return capabilities::coredump::supportsGPIOSignalling((capabilities::coredump *)v1);
}

uint64_t ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "ipc.svc.ari");
}

uint64_t ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791A398;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791A398;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_emplace<ARITransportService>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791A3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ARITransportService>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791A3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ARITransportService>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ctu::SharedLoggable<ARITransportService,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791A398;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E791A488;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEED0Ev(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E791A488;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

_QWORD *_ZNKSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE7__cloneEv(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E791A488;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *_ZNKSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE7__cloneEPNS0_6__baseISD_EE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E791A488;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void _ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEEclEOS7_OSC_OiOj(_QWORD *a1, int *a2, uint64_t a3, int *a4, unsigned int *a5)
{
  int v6;
  std::__shared_weak_count *v7;
  int v8;
  Ari *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::ios_base *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  unint64_t v22;
  std::string::value_type *v23;
  int v24;
  size_t v25;
  unint64_t v26;
  std::string::value_type *v27;
  const char *v28;
  size_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  void **v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  size_t v40;
  void *v41;
  const char *v42;
  size_t v43;
  std::string::size_type v44;
  std::string *p_dst;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void **v49;
  char v50;
  NSObject *v51;
  std::string *p_p;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  __int128 v60;
  void **v61;
  std::string::size_type v62;
  std::string *v63;
  std::string::size_type v64;
  char v65;
  uint64_t v66;
  const void **v67;
  const char *v68;
  size_t v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type v75;
  std::string::size_type v76;
  _BYTE *v77;
  uint64_t v78;
  const void **v79;
  const void *v80;
  uint64_t v81;
  uint64_t v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  std::string::size_type v88;
  char v89;
  capabilities::coredump *v90;
  xpc_object_t v91;
  xpc_object_t v92;
  xpc_object_t v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  std::string *v97;
  __int128 v98;
  std::string *v99;
  __int128 v100;
  std::string *p_buf;
  std::string::size_type size;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  std::string *v106;
  xpc_object_t v107;
  xpc_object_t v108;
  std::string::size_type v109;
  const void *v110;
  size_t v111;
  std::string::size_type v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  const void *v116;
  size_t v117;
  std::string::size_type v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  std::string *v122;
  std::string::size_type v123;
  std::string *v124;
  __int128 v125;
  const std::string::value_type *v126;
  std::string::size_type v127;
  std::string *v128;
  __int128 v129;
  const void *v130;
  size_t v131;
  size_t v132;
  __int128 *v133;
  uint64_t v134;
  uint64_t v135;
  const std::string::value_type *v136;
  std::string::size_type v137;
  std::string *v138;
  __int128 v139;
  std::string *v140;
  xpc_object_t v141;
  xpc_object_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  BOOL v149;
  char v150;
  std::__shared_weak_count *v151;
  std::__shared_weak_count *v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  xpc_object_t v155;
  xpc_object_t v156;
  NSObject *v157;
  xpc_object_t v158;
  xpc_object_t v159;
  xpc_object_t v160;
  xpc_object_t v161;
  std::string *v162;
  xpc_object_t v163;
  xpc_object_t v164;
  const void *v165;
  size_t v166;
  std::string::size_type v167;
  std::string *v168;
  uint64_t v169;
  uint64_t v170;
  xpc_object_t v171;
  unint64_t *p_shared_owners;
  unint64_t v173;
  unint64_t *v174;
  unint64_t v175;
  std::string::size_type v176;
  std::string *v177;
  uint64_t v178;
  const void **v179;
  const void *v180;
  uint64_t v181;
  uint64_t v182;
  std::string *v183;
  void *v184[2];
  uint64_t v185;
  xpc_object_t object;
  xpc_object_t xdict;
  void *v188;
  size_t v189;
  int64_t v190;
  std::string v191;
  std::string v192;
  std::string v193;
  std::string __p;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  _OWORD v202[10];
  __int128 v203;
  int64_t v204;
  std::string v205;
  std::string __dst;
  std::string buf;
  uint64_t v208;

  v208 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  *(_OWORD *)v184 = *(_OWORD *)a3;
  v185 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v7 = (std::__shared_weak_count *)a1[2];
  if (!v7 || (v8 = *a4, v9 = (Ari *)*a5, v10 = a1[3], (v11 = std::__shared_weak_count::lock(v7)) == 0))
  {
LABEL_299:
    if ((SHIBYTE(v185) & 0x80000000) == 0)
      return;
    goto LABEL_300;
  }
  v12 = v11;
  if (a1[1])
  {
    *(_QWORD *)&v13 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v202[0] = v13;
    v202[9] = v13;
    v202[8] = v13;
    v202[7] = v13;
    v202[6] = v13;
    v202[5] = v13;
    v202[4] = v13;
    v202[3] = v13;
    v202[2] = v13;
    v202[1] = v13;
    v201 = v13;
    v200 = v13;
    v199 = v13;
    v198 = v13;
    v197 = v13;
    v196 = v13;
    v14 = MEMORY[0x1E0DE4FE0];
    v15 = MEMORY[0x1E0DE4FE0] + 64;
    v16 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v17 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    *((_QWORD *)&v202[0] + 1) = MEMORY[0x1E0DE4FE0] + 64;
    v195 = v16;
    *(uint64_t *)((char *)&v195 + *(_QWORD *)(v16 - 24)) = v17;
    v18 = (std::ios_base *)((char *)&v195 + *(_QWORD *)(v195 - 24));
    std::ios_base::init(v18, &v196);
    v18[1].__vftable = 0;
    v18[1].__fmtflags_ = -1;
    v195 = v14 + 24;
    *((_QWORD *)&v202[0] + 1) = v15;
    std::streambuf::basic_streambuf();
    v19 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&v196 = MEMORY[0x1E0DE4FB8] + 16;
    v200 = 0u;
    v201 = 0u;
    LODWORD(v202[0]) = 16;
    v20 = v195;
    *(_DWORD *)((char *)&v195 + *(_QWORD *)(v195 - 24) + 8) |= 0x200u;
    *(_DWORD *)((char *)&v195 + *(_QWORD *)(v20 - 24) + 8) = *(_DWORD *)((_BYTE *)&v195 + *(_QWORD *)(v20 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    memset(&__p, 0, sizeof(__p));
    if (v6 != 1)
    {
      if (v6 != 2)
      {
        if (v6 == 3)
        {
          if (v185 >= 0)
            v21 = HIBYTE(v185);
          else
            v21 = (size_t)v184[1];
          v22 = v21 + 14;
          memset(&buf, 170, sizeof(buf));
          if (v21 + 14 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          if (v22 >= 0x17)
          {
            v53 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v22 | 7) != 0x17)
              v53 = v22 | 7;
            v54 = v53 + 1;
            v55 = (char *)operator new(v53 + 1);
            buf.__r_.__value_.__l.__size_ = v21 + 14;
            buf.__r_.__value_.__r.__words[2] = v54 | 0x8000000000000000;
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
            qmemcpy(v55, "ARI_CLI_ERR - ", 14);
            v23 = v55 + 14;
          }
          else
          {
            buf.__r_.__value_.__s.__data_[15] = 0;
            buf.__r_.__value_.__r.__words[2] = 0;
            *((_BYTE *)&buf.__r_.__value_.__s + 23) = v21 + 14;
            strcpy((char *)&buf, "ARI_CLI_ERR - ");
            v23 = &buf.__r_.__value_.__s.__data_[14];
            if (!v21)
              goto LABEL_52;
          }
          if (v185 >= 0)
            v56 = v184;
          else
            v56 = (void **)v184[0];
          memmove(v23, v56, v21);
LABEL_52:
          v50 = 0;
          v23[v21] = 0;
          __p = buf;
          v51 = *(NSObject **)(v10 + 40);
          if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            goto LABEL_248;
          goto LABEL_42;
        }
        v42 = (const char *)asString();
        v43 = strlen(v42);
        if (v43 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v44 = v43;
        if (v43 >= 0x17)
        {
          v57 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v43 | 7) != 0x17)
            v57 = v43 | 7;
          v58 = v57 + 1;
          p_dst = (std::string *)operator new(v57 + 1);
          __dst.__r_.__value_.__l.__size_ = v44;
          __dst.__r_.__value_.__r.__words[2] = v58 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v43;
          p_dst = &__dst;
          if (!v43)
          {
LABEL_58:
            p_dst->__r_.__value_.__s.__data_[v44] = 0;
            v19 = MEMORY[0x1E0DE4FB8];
            v59 = std::string::append(&__dst, " - ", 3uLL);
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            buf.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            if (v185 >= 0)
              v61 = v184;
            else
              v61 = (void **)v184[0];
            if (v185 >= 0)
              v62 = HIBYTE(v185);
            else
              v62 = (std::string::size_type)v184[1];
            v63 = std::string::append(&buf, (const std::string::value_type *)v61, v62);
            v64 = v63->__r_.__value_.__r.__words[0];
            v205.__r_.__value_.__r.__words[0] = v63->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v205.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7);
            v65 = HIBYTE(v63->__r_.__value_.__r.__words[2]);
            v63->__r_.__value_.__l.__size_ = 0;
            v63->__r_.__value_.__r.__words[2] = 0;
            v63->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            __p.__r_.__value_.__r.__words[0] = v64;
            __p.__r_.__value_.__l.__size_ = v205.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v205.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&__p.__r_.__value_.__s + 23) = v65;
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(buf.__r_.__value_.__l.__data_);
              if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_68:
                if (!(_DWORD)v9)
                {
LABEL_84:
                  if (!v8)
                    goto LABEL_247;
LABEL_85:
                  if ((v202[0] & 0x10) != 0)
                  {
                    v78 = *((_QWORD *)&v201 + 1);
                    if (*((_QWORD *)&v201 + 1) < (unint64_t)v199)
                    {
                      *((_QWORD *)&v201 + 1) = v199;
                      v78 = v199;
                    }
                    v79 = (const void **)&v198 + 1;
                  }
                  else
                  {
                    if ((v202[0] & 8) == 0)
                    {
                      v76 = 0;
                      *((_BYTE *)&v205.__r_.__value_.__s + 23) = 0;
                      v77 = &v205;
                      goto LABEL_142;
                    }
                    v79 = (const void **)&v197;
                    v78 = v198;
                  }
                  v94 = *v79;
                  v76 = v78 - (_QWORD)*v79;
                  if (v76 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  if (v76 >= 0x17)
                  {
                    v95 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v76 | 7) != 0x17)
                      v95 = v76 | 7;
                    v96 = v95 + 1;
                    v77 = operator new(v95 + 1);
                    v205.__r_.__value_.__l.__size_ = v76;
                    v205.__r_.__value_.__r.__words[2] = v96 | 0x8000000000000000;
                    v205.__r_.__value_.__r.__words[0] = (std::string::size_type)v77;
                  }
                  else
                  {
                    *((_BYTE *)&v205.__r_.__value_.__s + 23) = v78 - *(_BYTE *)v79;
                    v77 = &v205;
                    if (!v76)
                    {
LABEL_142:
                      v77[v76] = 0;
                      v97 = std::string::insert(&v205, 0, "(contextId ", 0xDuLL);
                      v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
                      __dst.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v98;
                      v97->__r_.__value_.__l.__size_ = 0;
                      v97->__r_.__value_.__r.__words[2] = 0;
                      v97->__r_.__value_.__r.__words[0] = 0;
                      v99 = std::string::append(&__dst, ")", 2uLL);
                      v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                      buf.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v100;
                      v99->__r_.__value_.__l.__size_ = 0;
                      v99->__r_.__value_.__r.__words[2] = 0;
                      v99->__r_.__value_.__r.__words[0] = 0;
                      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        p_buf = &buf;
                      else
                        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                      else
                        size = buf.__r_.__value_.__l.__size_;
                      std::string::append(&__p, (const std::string::value_type *)p_buf, size);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(buf.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        {
LABEL_150:
                          if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_247;
LABEL_154:
                          operator delete(v205.__r_.__value_.__l.__data_);
                          goto LABEL_247;
                        }
                      }
                      else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
                        goto LABEL_150;
                      }
                      operator delete(__dst.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_247;
                      goto LABEL_154;
                    }
                  }
                  memmove(v77, v94, v76);
                  goto LABEL_142;
                }
LABEL_75:
                *((_BYTE *)&v205.__r_.__value_.__s + 23) = 11;
                strcpy((char *)&v205, "(message ");
                v68 = (const char *)Ari::MsgNameById(v9);
                v69 = strlen(v68);
                v70 = std::string::append(&v205, v68, v69);
                v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
                __dst.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v71;
                v70->__r_.__value_.__l.__size_ = 0;
                v70->__r_.__value_.__r.__words[2] = 0;
                v70->__r_.__value_.__r.__words[0] = 0;
                v72 = std::string::append(&__dst, ")", 2uLL);
                v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
                buf.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
                *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v73;
                v72->__r_.__value_.__l.__size_ = 0;
                v72->__r_.__value_.__r.__words[2] = 0;
                v72->__r_.__value_.__r.__words[0] = 0;
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v74 = &buf;
                else
                  v74 = (std::string *)buf.__r_.__value_.__r.__words[0];
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v75 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                else
                  v75 = buf.__r_.__value_.__l.__size_;
                std::string::append(&__p, (const std::string::value_type *)v74, v75);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(buf.__r_.__value_.__l.__data_);
                  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_83:
                    if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_84;
LABEL_127:
                    operator delete(v205.__r_.__value_.__l.__data_);
                    if (v8)
                      goto LABEL_85;
LABEL_247:
                    v50 = 0;
                    v51 = *(NSObject **)(v10 + 40);
                    if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
                      goto LABEL_248;
                    goto LABEL_42;
                  }
                }
                else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
                  goto LABEL_83;
                }
                operator delete(__dst.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_84;
                goto LABEL_127;
              }
            }
            else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_68;
            }
            operator delete(__dst.__r_.__value_.__l.__data_);
            if (!(_DWORD)v9)
              goto LABEL_84;
            goto LABEL_75;
          }
        }
        memmove(p_dst, v42, v44);
        goto LABEL_58;
      }
      v24 = SHIBYTE(v185);
      if (v185 >= 0)
        v25 = HIBYTE(v185);
      else
        v25 = (size_t)v184[1];
      v26 = v25 + 17;
      memset(&buf, 170, sizeof(buf));
      if (v25 + 17 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      if (v26 >= 0x17)
      {
        v46 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v26 | 7) != 0x17)
          v46 = v26 | 7;
        v47 = v46 + 1;
        v48 = (char *)operator new(v46 + 1);
        buf.__r_.__value_.__l.__size_ = v25 + 17;
        buf.__r_.__value_.__r.__words[2] = v47 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
        v48[16] = 32;
        *(_OWORD *)v48 = *(_OWORD *)"ARI_NO_CLI_ACK - ";
        v27 = v48 + 17;
      }
      else
      {
        buf.__r_.__value_.__r.__words[2] = 32;
        *((_BYTE *)&buf.__r_.__value_.__s + 23) = v25 + 17;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)"ARI_NO_CLI_ACK - ";
        v27 = &buf.__r_.__value_.__s.__data_[17];
        if (!v25)
          goto LABEL_41;
      }
      if (v24 >= 0)
        v49 = v184;
      else
        v49 = (void **)v184[0];
      memmove(v27, v49, v25);
LABEL_41:
      v27[v25] = 0;
      __p = buf;
      v50 = 1;
      v51 = *(NSObject **)(v10 + 40);
      if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        goto LABEL_248;
LABEL_42:
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_error_impl(&dword_1BF566000, v51, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
LABEL_248:
      if (*(_BYTE *)(v10 + 153))
        v150 = v50;
      else
        v150 = 1;
      if ((v150 & 1) != 0
        || (v151 = *(std::__shared_weak_count **)(v10 + 216)) == 0
        || (v152 = std::__shared_weak_count::lock(v151)) == 0)
      {
LABEL_291:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v195 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v195 + *(_QWORD *)(v195 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        *(_QWORD *)&v196 = v19 + 16;
        if (SBYTE7(v201) < 0)
          operator delete((void *)v200);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C3B8C364]((char *)v202 + 8);
        goto LABEL_296;
      }
      v153 = v152;
      v154 = *(_QWORD *)(v10 + 208);
      if (!v154)
      {
LABEL_287:
        p_shared_owners = (unint64_t *)&v153->__shared_owners_;
        do
          v173 = __ldaxr(p_shared_owners);
        while (__stlxr(v173 - 1, p_shared_owners));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
        goto LABEL_291;
      }
      v155 = xpc_dictionary_create(0, 0, 0);
      if (v155 || (v155 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v155) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v155);
          v156 = v155;
        }
        else
        {
          v156 = xpc_null_create();
        }
      }
      else
      {
        v156 = xpc_null_create();
        v155 = 0;
      }
      xpc_release(v155);
      v158 = xpc_string_create((const char *)*MEMORY[0x1E0CFB590]);
      if (!v158)
        v158 = xpc_null_create();
      xpc_dictionary_set_value(v156, (const char *)*MEMORY[0x1E0CFB538], v158);
      v159 = xpc_null_create();
      xpc_release(v158);
      xpc_release(v159);
      v160 = xpc_string_create((const char *)*MEMORY[0x1E0CFC000]);
      if (!v160)
        v160 = xpc_null_create();
      xpc_dictionary_set_value(v156, (const char *)*MEMORY[0x1E0CFB8D0], v160);
      v161 = xpc_null_create();
      xpc_release(v160);
      xpc_release(v161);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v162 = &__p;
      else
        v162 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v163 = xpc_string_create((const char *)v162);
      if (!v163)
        v163 = xpc_null_create();
      xpc_dictionary_set_value(v156, (const char *)*MEMORY[0x1E0CFB788], v163);
      v164 = xpc_null_create();
      xpc_release(v163);
      xpc_release(v164);
      v165 = (const void *)*MEMORY[0x1E0CFB4E0];
      v166 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
      if (v166 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v167 = v166;
      if (v166 >= 0x17)
      {
        v169 = (v166 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v166 | 7) != 0x17)
          v169 = v166 | 7;
        v170 = v169 + 1;
        v168 = (std::string *)operator new(v169 + 1);
        buf.__r_.__value_.__l.__size_ = v167;
        buf.__r_.__value_.__r.__words[2] = v170 | 0x8000000000000000;
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
      }
      else
      {
        *((_BYTE *)&buf.__r_.__value_.__s + 23) = v166;
        v168 = &buf;
        if (!v166)
          goto LABEL_281;
      }
      memmove(v168, v165, v167);
LABEL_281:
      v168->__r_.__value_.__s.__data_[v167] = 0;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
      if (v156)
      {
        xpc_retain(v156);
        v19 = MEMORY[0x1E0DE4FB8];
      }
      else
      {
        v171 = xpc_null_create();
        v19 = MEMORY[0x1E0DE4FB8];
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v171;
      }
      v191.__r_.__value_.__r.__words[0] = 0;
      Service::runCommand(v154, (uint64_t)&buf, (xpc_object_t *)&__dst.__r_.__value_.__l.__data_, (const void **)&v191.__r_.__value_.__l.__data_);
      xpc_release(__dst.__r_.__value_.__l.__data_);
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      xpc_release(v156);
      goto LABEL_287;
    }
    *((_BYTE *)&v191.__r_.__value_.__s + 23) = 14;
    strcpy((char *)&v191, "ARI_TIMEOUT - ");
    v28 = (const char *)Ari::MsgNameById(v9);
    v29 = strlen(v28);
    v30 = std::string::append(&v191, v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v192.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v192, ", client ", 9uLL);
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v193.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (v185 >= 0)
      v34 = v184;
    else
      v34 = (void **)v184[0];
    if (v185 >= 0)
      v35 = HIBYTE(v185);
    else
      v35 = (std::string::size_type)v184[1];
    v36 = std::string::append(&v193, (const std::string::value_type *)v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v205.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v205, "(contextId ", 0xDuLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    if ((v202[0] & 0x10) != 0)
    {
      v66 = *((_QWORD *)&v201 + 1);
      if (*((_QWORD *)&v201 + 1) < (unint64_t)v199)
      {
        *((_QWORD *)&v201 + 1) = v199;
        v66 = v199;
      }
      v67 = (const void **)&v198 + 1;
    }
    else
    {
      if ((v202[0] & 8) == 0)
      {
        v40 = 0;
        HIBYTE(v190) = 0;
        v41 = &v188;
        goto LABEL_100;
      }
      v67 = (const void **)&v197;
      v66 = v198;
    }
    v80 = *v67;
    v40 = v66 - (_QWORD)*v67;
    if (v40 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v40 >= 0x17)
    {
      v81 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v40 | 7) != 0x17)
        v81 = v40 | 7;
      v82 = v81 + 1;
      v41 = operator new(v81 + 1);
      v189 = v40;
      v190 = v82 | 0x8000000000000000;
      v188 = v41;
    }
    else
    {
      HIBYTE(v190) = v66 - *(_BYTE *)v67;
      v41 = &v188;
      if (!v40)
      {
LABEL_100:
        *((_BYTE *)v41 + v40) = 0;
        if (v190 >= 0)
          v83 = (const std::string::value_type *)&v188;
        else
          v83 = (const std::string::value_type *)v188;
        if (v190 >= 0)
          v84 = HIBYTE(v190);
        else
          v84 = v189;
        v85 = std::string::append(&__dst, v83, v84);
        v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        v87 = std::string::append(&buf, ")", 2uLL);
        v88 = v87->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v203 = v87->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v203 + 7) = *(std::string::size_type *)((char *)&v87->__r_.__value_.__r.__words[1] + 7);
        v89 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v88;
        __p.__r_.__value_.__l.__size_ = v203;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v203 + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v89;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(buf.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v190) & 0x80000000) == 0)
          {
LABEL_110:
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_111;
            goto LABEL_120;
          }
        }
        else if ((SHIBYTE(v190) & 0x80000000) == 0)
        {
          goto LABEL_110;
        }
        operator delete(v188);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_111:
          if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_112;
          goto LABEL_121;
        }
LABEL_120:
        operator delete(__dst.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_112:
          if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_113;
          goto LABEL_122;
        }
LABEL_121:
        operator delete(v205.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_113:
          if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_114;
          goto LABEL_123;
        }
LABEL_122:
        operator delete(v193.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_114:
          if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_115;
LABEL_124:
          operator delete(v191.__r_.__value_.__l.__data_);
LABEL_115:
          capabilities::coredump::recoveryForControlMessageTimeout((capabilities::coredump *)v87);
          v90 = (capabilities::coredump *)capabilities::coredump::operator&();
          if (!(_DWORD)v90)
            goto LABEL_246;
          xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          v91 = xpc_dictionary_create(0, 0, 0);
          v92 = v91;
          if (v91)
          {
            xdict = v91;
          }
          else
          {
            v92 = xpc_null_create();
            xdict = v92;
            if (!v92)
            {
              v93 = xpc_null_create();
              v92 = 0;
              goto LABEL_156;
            }
          }
          if (MEMORY[0x1C3B8CD78](v92) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v92);
            goto LABEL_157;
          }
          v93 = xpc_null_create();
LABEL_156:
          xdict = v93;
LABEL_157:
          xpc_release(v92);
          v103 = MEMORY[0x1C3B8CD78](xdict);
          v104 = MEMORY[0x1E0C812F8];
          if (v103 != MEMORY[0x1E0C812F8])
          {
            v105 = *(NSObject **)(v10 + 40);
            if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_error_impl(&dword_1BF566000, v105, OS_LOG_TYPE_ERROR, "Failed to create an input dictionary", (uint8_t *)&buf, 2u);
            }
            goto LABEL_244;
          }
          memset(&buf, 170, sizeof(buf));
          Timestamp::Timestamp((Timestamp *)&buf);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v106 = &__p;
          else
            v106 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v107 = xpc_string_create((const char *)v106);
          if (!v107)
            v107 = xpc_null_create();
          xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CF10C8], v107);
          v108 = xpc_null_create();
          xpc_release(v107);
          xpc_release(v108);
          v109 = *MEMORY[0x1E0CF1010];
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&xdict;
          __dst.__r_.__value_.__l.__size_ = v109;
          xpc::dict::object_proxy::operator=(&object, (uint64_t)&__dst);
          xpc_release(object);
          object = 0;
          v110 = (const void *)*MEMORY[0x1E0D01A30];
          v111 = strlen((const char *)*MEMORY[0x1E0D01A30]);
          if (v111 > 0x7FFFFFFFFFFFFFF7)
            std::string::__throw_length_error[abi:ne180100]();
          v112 = v111;
          if (v111 >= 0x17)
          {
            v114 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v111 | 7) != 0x17)
              v114 = v111 | 7;
            v115 = v114 + 1;
            v113 = operator new(v114 + 1);
            v192.__r_.__value_.__l.__size_ = v112;
            v192.__r_.__value_.__r.__words[2] = v115 | 0x8000000000000000;
            v192.__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
          }
          else
          {
            *((_BYTE *)&v192.__r_.__value_.__s + 23) = v111;
            v113 = &v192;
            if (!v111)
            {
LABEL_173:
              v113[v112] = 0;
              v116 = (const void *)*MEMORY[0x1E0D01A20];
              v117 = strlen((const char *)*MEMORY[0x1E0D01A20]);
              if (v117 > 0x7FFFFFFFFFFFFFF7)
                std::string::__throw_length_error[abi:ne180100]();
              v118 = v117;
              if (v117 >= 0x17)
              {
                v120 = (v117 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v117 | 7) != 0x17)
                  v120 = v117 | 7;
                v121 = v120 + 1;
                v119 = operator new(v120 + 1);
                v191.__r_.__value_.__l.__size_ = v118;
                v191.__r_.__value_.__r.__words[2] = v121 | 0x8000000000000000;
                v191.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
              }
              else
              {
                *((_BYTE *)&v191.__r_.__value_.__s + 23) = v117;
                v119 = &v191;
                if (!v117)
                {
LABEL_181:
                  v119[v118] = 0;
                  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v122 = &v191;
                  else
                    v122 = (std::string *)v191.__r_.__value_.__r.__words[0];
                  if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v123 = HIBYTE(v191.__r_.__value_.__r.__words[2]);
                  else
                    v123 = v191.__r_.__value_.__l.__size_;
                  v124 = std::string::append(&v192, (const std::string::value_type *)v122, v123);
                  v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
                  v193.__r_.__value_.__r.__words[2] = v124->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v125;
                  v124->__r_.__value_.__l.__size_ = 0;
                  v124->__r_.__value_.__r.__words[2] = 0;
                  v124->__r_.__value_.__r.__words[0] = 0;
                  Timestamp::asString((uint64_t)&buf, 0, 9, &v188);
                  if (v190 >= 0)
                    v126 = (const std::string::value_type *)&v188;
                  else
                    v126 = (const std::string::value_type *)v188;
                  if (v190 >= 0)
                    v127 = HIBYTE(v190);
                  else
                    v127 = v189;
                  v128 = std::string::append(&v193, v126, v127);
                  v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
                  v205.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v129;
                  v128->__r_.__value_.__l.__size_ = 0;
                  v128->__r_.__value_.__r.__words[2] = 0;
                  v128->__r_.__value_.__r.__words[0] = 0;
                  v130 = (const void *)*MEMORY[0x1E0D01A10];
                  v131 = strlen((const char *)*MEMORY[0x1E0D01A10]);
                  if (v131 > 0x7FFFFFFFFFFFFFF7)
                    std::string::__throw_length_error[abi:ne180100]();
                  v132 = v131;
                  if (v131 >= 0x17)
                  {
                    v134 = (v131 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v131 | 7) != 0x17)
                      v134 = v131 | 7;
                    v135 = v134 + 1;
                    v133 = (__int128 *)operator new(v134 + 1);
                    *((_QWORD *)&v203 + 1) = v132;
                    v204 = v135 | 0x8000000000000000;
                    *(_QWORD *)&v203 = v133;
                  }
                  else
                  {
                    HIBYTE(v204) = v131;
                    v133 = &v203;
                    if (!v131)
                    {
LABEL_201:
                      *((_BYTE *)v133 + v132) = 0;
                      if (v204 >= 0)
                        v136 = (const std::string::value_type *)&v203;
                      else
                        v136 = (const std::string::value_type *)v203;
                      if (v204 >= 0)
                        v137 = HIBYTE(v204);
                      else
                        v137 = *((_QWORD *)&v203 + 1);
                      v138 = std::string::append(&v205, v136, v137);
                      v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
                      __dst.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v139;
                      v138->__r_.__value_.__l.__size_ = 0;
                      v138->__r_.__value_.__r.__words[2] = 0;
                      v138->__r_.__value_.__r.__words[0] = 0;
                      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v140 = &__dst;
                      else
                        v140 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                      v141 = xpc_string_create((const char *)v140);
                      if (!v141)
                        v141 = xpc_null_create();
                      xpc_dictionary_set_value(xdict, (const char *)*MEMORY[0x1E0CF1000], v141);
                      v142 = xpc_null_create();
                      xpc_release(v141);
                      xpc_release(v142);
                      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(__dst.__r_.__value_.__l.__data_);
                        if ((SHIBYTE(v204) & 0x80000000) == 0)
                        {
LABEL_214:
                          if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_215;
                          goto LABEL_228;
                        }
                      }
                      else if ((SHIBYTE(v204) & 0x80000000) == 0)
                      {
                        goto LABEL_214;
                      }
                      operator delete((void *)v203);
                      if ((SHIBYTE(v205.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_215:
                        if ((SHIBYTE(v190) & 0x80000000) == 0)
                          goto LABEL_216;
                        goto LABEL_229;
                      }
LABEL_228:
                      operator delete(v205.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v190) & 0x80000000) == 0)
                      {
LABEL_216:
                        if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_217;
                        goto LABEL_230;
                      }
LABEL_229:
                      operator delete(v188);
                      if ((SHIBYTE(v193.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_217:
                        if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_218;
                        goto LABEL_231;
                      }
LABEL_230:
                      operator delete(v193.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      {
LABEL_218:
                        if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                          goto LABEL_219;
LABEL_232:
                        operator delete(v192.__r_.__value_.__l.__data_);
LABEL_219:
                        __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
                        __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
                        GetABMLogServer(&v205);
                        abm::HelperClient::create();
                        v143 = (std::__shared_weak_count *)v205.__r_.__value_.__l.__size_;
                        if (v205.__r_.__value_.__l.__size_)
                        {
                          v144 = (unint64_t *)(v205.__r_.__value_.__l.__size_ + 8);
                          do
                            v145 = __ldaxr(v144);
                          while (__stlxr(v145 - 1, v144));
                          if (!v145)
                          {
                            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                            std::__shared_weak_count::__release_weak(v143);
                          }
                        }
                        v192.__r_.__value_.__r.__words[0] = (std::string::size_type)xdict;
                        if (xdict)
                          xpc_retain(xdict);
                        else
                          v192.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
                        *(_OWORD *)&v193.__r_.__value_.__l.__data_ = 0uLL;
                        abm::HelperClient::perform();
                        if (v193.__r_.__value_.__l.__size_)
                          dispatch_release((dispatch_object_t)v193.__r_.__value_.__l.__size_);
                        if (v193.__r_.__value_.__r.__words[0])
                          _Block_release(v193.__r_.__value_.__l.__data_);
                        xpc_release(v192.__r_.__value_.__l.__data_);
                        v192.__r_.__value_.__r.__words[0] = 0;
                        v146 = (std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_;
                        if (__dst.__r_.__value_.__l.__size_)
                        {
                          v147 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
                          do
                            v148 = __ldaxr(v147);
                          while (__stlxr(v148 - 1, v147));
                          if (!v148)
                          {
                            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                            std::__shared_weak_count::__release_weak(v146);
                          }
                        }
                        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, (_QWORD *)buf.__r_.__value_.__l.__size_);
LABEL_244:
                        xpc_release(xdict);
                        v149 = v103 == v104;
                        v19 = MEMORY[0x1E0DE4FB8];
                        if (!v149)
                          goto LABEL_247;
LABEL_246:
                        capabilities::coredump::recoveryForControlMessageTimeout(v90);
                        if (capabilities::coredump::operator&())
                          goto LABEL_247;
                        v157 = *(NSObject **)(v10 + 40);
                        if (!os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
                        {
LABEL_260:
                          v50 = 1;
                          v51 = *(NSObject **)(v10 + 40);
                          if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
                            goto LABEL_248;
                          goto LABEL_42;
                        }
                        if ((v202[0] & 0x10) != 0)
                        {
                          v178 = *((_QWORD *)&v201 + 1);
                          if (*((_QWORD *)&v201 + 1) < (unint64_t)v199)
                          {
                            *((_QWORD *)&v201 + 1) = v199;
                            v178 = v199;
                          }
                          v179 = (const void **)&v198 + 1;
                        }
                        else
                        {
                          if ((v202[0] & 8) == 0)
                          {
                            v176 = 0;
                            *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
                            v177 = &buf;
                            goto LABEL_319;
                          }
                          v179 = (const void **)&v197;
                          v178 = v198;
                        }
                        v180 = *v179;
                        v176 = v178 - (_QWORD)*v179;
                        if (v176 > 0x7FFFFFFFFFFFFFF7)
                          std::string::__throw_length_error[abi:ne180100]();
                        if (v176 >= 0x17)
                        {
                          v181 = (v176 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v176 | 7) != 0x17)
                            v181 = v176 | 7;
                          v182 = v181 + 1;
                          v177 = (std::string *)operator new(v181 + 1);
                          buf.__r_.__value_.__l.__size_ = v176;
                          buf.__r_.__value_.__r.__words[2] = v182 | 0x8000000000000000;
                          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v177;
                        }
                        else
                        {
                          *((_BYTE *)&buf.__r_.__value_.__s + 23) = v178 - *(_BYTE *)v179;
                          v177 = &buf;
                          if (!v176)
                            goto LABEL_319;
                        }
                        memmove(v177, v180, v176);
LABEL_319:
                        v177->__r_.__value_.__s.__data_[v176] = 0;
                        v183 = &buf;
                        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v183 = (std::string *)buf.__r_.__value_.__r.__words[0];
                        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
                        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v183;
                        _os_log_error_impl(&dword_1BF566000, v157, OS_LOG_TYPE_ERROR, "WARNING! A MESSAGE TIMED OUT BUT WE'RE SKIPPING MODEM RESET: %s", (uint8_t *)&__dst, 0xCu);
                        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(buf.__r_.__value_.__l.__data_);
                        goto LABEL_260;
                      }
LABEL_231:
                      operator delete(v191.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v192.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_219;
                      goto LABEL_232;
                    }
                  }
                  memmove(v133, v130, v132);
                  goto LABEL_201;
                }
              }
              memmove(v119, v116, v118);
              goto LABEL_181;
            }
          }
          memmove(v113, v110, v112);
          goto LABEL_173;
        }
LABEL_123:
        operator delete(v192.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v191.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_115;
        goto LABEL_124;
      }
    }
    memmove(v41, v80, v40);
    goto LABEL_100;
  }
LABEL_296:
  v174 = (unint64_t *)&v12->__shared_owners_;
  do
    v175 = __ldaxr(v174);
  while (__stlxr(v175 - 1, v174));
  if (v175)
    goto LABEL_299;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (SHIBYTE(v185) < 0)
LABEL_300:
    operator delete(v184[0]);
}

void sub_1BF66ABEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF66B168()
{
  JUMPOUT(0x1BF66B104);
}

void sub_1BF66B170()
{
  JUMPOUT(0x1BF66B118);
}

uint64_t _ZNKSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN19ARITransportService4initEvEUb_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN19ARITransportService4initEvEUb_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN19ARITransportService4initEvEUb_E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN19ARITransportService4initEvEUb_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZZN19ARITransportService4initEvEUb_E3__0NS_9allocatorIS3_EEFvN9AriHostRt20ARI_CLIENT_ERROR_EVTENS_12basic_stringIcNS_11char_traitsIcEENS4_IcEEEEijEE11target_typeEv()
{
  return &_ZTIZZN19ARITransportService4initEvEUb_E3__0;
}

void xpc::dict::object_proxy::operator=(_QWORD *a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;

  v4 = xpc_null_create();
  xpc_dictionary_set_value(**(xpc_object_t **)a2, *(const char **)(a2 + 8), v4);
  *a1 = v4;
  v5 = xpc_null_create();
  xpc_release(v5);
}

void ctu::SharedSynchronizable<ARITransportService>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791A510;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI19ARITransportServiceE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__110shared_ptrIK19ARITransportServiceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__110shared_ptrIK19ARITransportServiceEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJNS1_6StatusEEEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  xpc_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  object = xpc_null_create();
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v2);
  xpc_release(object);
}

void sub_1BF66B444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ___ZNK8dispatch8callbackIU13block_pointerFv10WakeReasonEEclIJS1_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void *v3;
  int v4;
  xpc_object_t object;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  v3 = *(void **)(a1 + 48);
  v4 = v2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, int *))(v1 + 16))(v1, &v4);
  xpc_release(object);
}

void sub_1BF66B52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  xpc_object_t result;

  v4 = *(void **)(a2 + 32);
  if (v4)
    v4 = _Block_copy(v4);
  *(_QWORD *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    return xpc_retain(v5);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFv10WakeReasonEEE40c16_ZTS10WakeReason(uint64_t a1)
{
  const void *v2;

  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
}

uint64_t __cxx_global_var_init_34()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_35()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

_QWORD *Stats::Stats(_QWORD *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _BYTE v15[16];
  dispatch_object_t object[5];

  v4 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v4 = *(const char **)a2;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v15, "com.apple.telephony.abm", v4);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_8;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v6 = unk_1ED70F6A0;
    v13 = GetABMLogServer(void)::sLogServer;
    v14 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_8;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v6 = unk_1ED70F6A0;
    v13 = GetABMLogServer(void)::sLogServer;
    v14 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_8;
  }
  v7 = (unint64_t *)(v6 + 8);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
LABEL_8:
  object[0] = 0;
  ctu::SharedSynchronizable<Stats>::SharedSynchronizable(a1 + 9, a2, 0, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(a1, (uint64_t)v15, &v13);
  *a1 = off_1E791A6E0;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *a1 = off_1E791A5D8;
  return a1;
}

void sub_1BF66B810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF66B834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

void Stats::~Stats(Stats *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E791A6A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

uint64_t Stats::create@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  __n128 v3;
  uint64_t result;
  NSObject *v5;
  _BYTE v6[22];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  if (a1)
  {
    v5 = GetOsLogContext()[1];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)v6 = 136315906;
      *(_QWORD *)&v6[4] = "ABM ASSERT";
      *(_WORD *)&v6[12] = 2080;
      *(_QWORD *)&v6[14] = "statsType != statsType";
      v7 = 2080;
      v8 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Serv"
           "er/Stats/Stats.cpp";
      v9 = 1024;
      v10 = 33;
      _os_log_fault_impl(&dword_1BF566000, v5, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", v6, 0x26u);
    }
    __break(1u);
  }
  BootStats::createInternal(v6);
  v3 = *(__n128 *)v6;
  *(_OWORD *)a2 = *(_OWORD *)v6;
  result = v3.n128_u64[0];
  if (v3.n128_u64[0])
    return (*(uint64_t (**)(unint64_t, _QWORD, __n128))(*(_QWORD *)v3.n128_u64[0] + 48))(v3.n128_u64[0], 0, v3);
  return result;
}

void sub_1BF66B9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF66B9D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF66B9EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Stats::init(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 104) = a2;
  return 1;
}

_QWORD *ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791A6A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791A6A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

_QWORD *ctu::SharedSynchronizable<Stats>::SharedSynchronizable(_QWORD *a1, uint64_t a2, dispatch_queue_attr_t attr, dispatch_object_t *a4)
{
  const char *v6;
  NSObject *v7;
  NSObject *v8;

  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  v7 = *a4;
  if (*a4)
  {
    dispatch_retain(*a4);
    dispatch_retain(v7);
    v8 = dispatch_queue_create_with_target_V2(v6, attr, v7);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = v8;
    if (!v8)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = dispatch_queue_create(v6, attr);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v8;
  if (v8)
LABEL_6:
    dispatch_retain(v8);
LABEL_7:
  a1[3] = v7;
  if (v7)
    dispatch_retain(v7);
  if (v8)
    dispatch_release(v8);
  if (v7)
  {
    dispatch_release(v7);
    dispatch_release(v7);
  }
  return a1;
}

_QWORD *ctu::Loggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E791A6A0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF66BBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791A6A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<Stats,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791A6A0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ABMServer::create_default_global@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  ABMServerInternal *v4;
  _QWORD *result;

  v3 = operator new(0x10uLL);
  *v3 = 0xAAAAAAAAAAAAAAAALL;
  v3[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v4);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(v3, (uint64_t)v4);
  *a1 = v3;
  result = operator new(0x20uLL);
  *result = off_1E791ABB0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_1BF66BD1C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = (std::__shared_weak_count *)v1[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      operator delete(v1);
      _Unwind_Resume(a1);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::ABMServer(ABMServer *this)
{
  ABMServerInternal *v2;

  *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

{
  ABMServerInternal *v2;

  *(_QWORD *)this = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)this + 1) = 0xAAAAAAAAAAAAAAAALL;
  v2 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v2);
  std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(this, (uint64_t)v2);
}

void sub_1BF66BDD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF66BE24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *ABMServerInternal::create@<X0>(_QWORD *a1@<X8>)
{
  ABMServerInternal *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (ABMServerInternal *)operator new(0x130uLL);
  ABMServerInternal::ABMServerInternal(v3);
  return std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(a1, (uint64_t)v3);
}

void sub_1BF66BE74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ABMServer::init(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  v4 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  ABMServerInternal::init(v4, (uint64_t)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF66BF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v7[6];
  std::string __p;
  _QWORD *v9;
  _QWORD block[6];

  v4 = a1 + 8;
  v5 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_3;
  v7[4] = a1;
  v7[5] = a3;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v9 = v7;
  block[0] = v5;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_44_2;
  block[4] = v4;
  block[5] = &v9;
  v6 = *(NSObject **)(a1 + 24);
  if (*(_QWORD *)(a1 + 32))
  {
    dispatch_async_and_wait(v6, block);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  dispatch_sync(v6, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
}

BOOL ABMServer::start(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::start(*this, a2);
}

BOOL ABMServerInternal::start(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  _QWORD v10[6];
  dispatch_group_t group;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint8_t buf[8];
  uint64_t v18;
  _QWORD *(*v19)(uint64_t);
  void *v20;
  char *v21;
  _QWORD *v22;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to start server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke;
  v10[3] = &unk_1E791A800;
  v10[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v10[4] = &v12;
  v16 = v10;
  *(_QWORD *)buf = v5;
  v18 = 0x40000000;
  v19 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v20 = &__block_descriptor_tmp_44_2;
  v21 = (char *)this + 8;
  v22 = &v16;
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  else
  {
    dispatch_sync(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  dispatch_group_leave(v8);
  if (group)
    dispatch_release(group);
LABEL_13:
  _Block_object_dispose(&v12, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v7 != 0;
}

BOOL ABMServer::stop(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::stop(*this, a2);
}

BOOL ABMServerInternal::stop(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  _QWORD v10[6];
  dispatch_group_t group;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint8_t buf[8];
  uint64_t v18;
  _QWORD *(*v19)(uint64_t);
  void *v20;
  char *v21;
  _QWORD *v22;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to stop server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
  }
  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v15 = 0;
  v5 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke;
  v10[3] = &unk_1E791A838;
  v10[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v10[4] = &v12;
  v16 = v10;
  *(_QWORD *)buf = v5;
  v18 = 0x40000000;
  v19 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v20 = &__block_descriptor_tmp_44_2;
  v21 = (char *)this + 8;
  v22 = &v16;
  v6 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  else
  {
    dispatch_sync(v6, buf);
    v7 = *((unsigned __int8 *)v13 + 24);
    v8 = group;
    if (!group)
      goto LABEL_13;
  }
  dispatch_group_leave(v8);
  if (group)
    dispatch_release(group);
LABEL_13:
  _Block_object_dispose(&v12, 8);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v7 != 0;
}

BOOL ABMServer::shutdown(ABMServerInternal **this, NSObject *a2)
{
  return ABMServerInternal::shutdown(*this, a2);
}

BOOL ABMServerInternal::shutdown(ABMServerInternal *this, NSObject *a2)
{
  NSObject *v4;
  NSObject *v5;
  dispatch_group_s *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  _QWORD v12[6];
  dispatch_group_t group;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint8_t buf[8];
  uint64_t v20;
  _QWORD *(*v21)(uint64_t);
  void *v22;
  char *v23;
  _QWORD *v24;

  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Request to shutdown server", buf, 2u);
  }
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_retain(a2);
    dispatch_group_enter(a2);
    dispatch_release(a2);
LABEL_5:
    v5 = 0;
    goto LABEL_8;
  }
  v6 = (dispatch_group_s *)dispatch_group_create();
  a2 = v6;
  if (!v6)
    goto LABEL_5;
  dispatch_retain((dispatch_object_t)v6);
  dispatch_group_enter(a2);
  v5 = a2;
LABEL_8:
  v14 = 0;
  v15 = &v14;
  v16 = 0x2000000000;
  v17 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1174405120;
  v12[2] = ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke;
  v12[3] = &unk_1E791A870;
  v12[4] = &v14;
  v12[5] = this;
  group = a2;
  if (a2)
  {
    dispatch_retain(a2);
    dispatch_group_enter(a2);
  }
  v18 = v12;
  *(_QWORD *)buf = v7;
  v20 = 0x40000000;
  v21 = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v22 = &__block_descriptor_tmp_44_2;
  v23 = (char *)this + 8;
  v24 = &v18;
  v8 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4))
  {
    dispatch_async_and_wait(v8, buf);
    v9 = *((unsigned __int8 *)v15 + 24);
    v10 = group;
    if (!group)
      goto LABEL_16;
  }
  else
  {
    dispatch_sync(v8, buf);
    v9 = *((unsigned __int8 *)v15 + 24);
    v10 = group;
    if (!group)
      goto LABEL_16;
  }
  dispatch_group_leave(v10);
  if (group)
    dispatch_release(group);
LABEL_16:
  _Block_object_dispose(&v14, 8);
  if (v5)
    dispatch_release(v5);
  if (a2)
  {
    dispatch_group_leave(a2);
    dispatch_release(a2);
  }
  return v9 != 0;
}

void ABMServer::broadcast(uint64_t *a1, uint64_t a2, const void **a3, const void **a4)
{
  uint64_t v6;
  const void *v7;
  void *v8;
  void *v9;
  const void *v10;
  std::string v11;

  v6 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    v10 = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = *(std::string *)a2;
  v7 = *a3;
  v10 = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  if (*a4)
    v8 = _Block_copy(*a4);
  else
    v8 = 0;
  v9 = v8;
  ABMServerInternal::broadcast(v6, (uint64_t)&v11, &v10, &v9);
  if (v8)
    _Block_release(v8);
  if (v7)
    CFRelease(v7);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BF66C644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  const void *v16;

  if (v16)
    _Block_release(v16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ABMServerInternal::broadcast(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  const void *v7;
  void *v8;
  _QWORD v9[5];
  std::string __p;
  CFTypeRef cf;
  void *aBlock;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_23_6;
  v9[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    cf = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v7 = *a3;
  cf = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  v8 = *a4;
  if (*a4)
    v8 = _Block_copy(v8);
  aBlock = v8;
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ABMServerInternal::ABMServerInternal(ABMServerInternal *this)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *shared_owners;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE v28[16];
  xpc_object_t object;
  __int128 __p;
  void (*v31)(uint64_t);
  void *v32;
  uint64_t *v33;
  _QWORD v34[2];

  *(_QWORD *)this = &off_1E791A738;
  *((_QWORD *)this + 9) = &unk_1E791A778;
  HIBYTE(v31) = 11;
  strcpy((char *)&__p, "server.main");
  object = xpc_null_create();
  v34[0] = 0;
  ctu::XpcServer::XpcServer();
  xpc_release(object);
  object = 0;
  *(_QWORD *)this = &off_1E791A738;
  *((_QWORD *)this + 9) = &unk_1E791A778;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v28, "com.apple.telephony.abm", "server.main");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&__p = MEMORY[0x1E0C809B0];
  *((_QWORD *)&__p + 1) = 0x40000000;
  v31 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v32 = &__block_descriptor_tmp_13_8;
  v33 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v4 = GetABMLogServer(void)::sLogServer;
    v3 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v4 = GetABMLogServer(void)::sLogServer;
    v3 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
LABEL_6:
  *((_QWORD *)this + 9) = off_1E791AB70;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__p);
  *((_QWORD *)this + 10) = &unk_1E7911E48;
  *((_QWORD *)this + 16) = v4;
  *((_QWORD *)this + 17) = v3;
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v34);
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v34);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v28);
  *(_QWORD *)this = &off_1E791A738;
  *((_QWORD *)this + 9) = &unk_1E791A778;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = 3;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  v10 = (std::__shared_weak_count *)operator new(0x38uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_1E791AC50;
  Registry::Registry((Registry *)&v10[1]);
  *((_QWORD *)this + 28) = v12;
  *((_QWORD *)this + 29) = v10;
  shared_owners = (std::__shared_weak_count *)v10[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v14 = __ldxr(v11);
    while (__stxr(v14 + 1, v11));
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
    v10[1].__shared_owners_ = (uint64_t)v10;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v17 = __ldxr(v11);
    while (__stxr(v17 + 1, v11));
    v18 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)&v10[1];
    v10[1].__shared_owners_ = (uint64_t)v10;
  }
  do
    v20 = __ldaxr(v11);
  while (__stlxr(v20 - 1, v11));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_27:
  _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((uint64_t *)&__p);
  v21 = __p;
  *((_OWORD *)this + 15) = __p;
  if (*((_QWORD *)&v21 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (char *)operator new(0x28uLL);
  *((_QWORD *)v24 + 2) = 0;
  *(_QWORD *)v24 = off_1E791D1C8;
  *((_QWORD *)v24 + 1) = 0;
  if (*((_QWORD *)&v21 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    *(_OWORD *)(v24 + 24) = v21;
    *((_QWORD *)this + 32) = v24 + 24;
    *((_QWORD *)this + 33) = v24;
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 - 1, v25));
    if (!v27)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v21 + 1) + 16))(*((_QWORD *)&v21 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  else
  {
    *((_QWORD *)v24 + 3) = v21;
    *((_QWORD *)v24 + 4) = 0;
    *((_QWORD *)this + 32) = v24 + 24;
    *((_QWORD *)this + 33) = v24;
  }
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  ctu::LoggerCommonBase::setLogLevel();
}

void sub_1BF66CBDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  dispatch_group_t *v6;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 + 288);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 + 240);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 + 224);
  if (*v6)
  {
    dispatch_group_leave(*v6);
    if (*v6)
      dispatch_release(*v6);
  }
  if (*(char *)(v1 + 191) < 0)
    operator delete(*v5);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*(_QWORD **)(v1 + 152));
  *(_QWORD *)(v1 + 72) = v4;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  ctu::XpcServer::~XpcServer((ctu::XpcServer *)v1);
  _Unwind_Resume(a1);
}

void sub_1BF66CC8C(uint64_t a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v2 - 80));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  JUMPOUT(0x1BF66CC7CLL);
}

void sub_1BF66CCB4()
{
  JUMPOUT(0x1BF66CC7CLL);
}

void sub_1BF66CCC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  NSObject *v23;

  v23 = *(NSObject **)(v21 - 80);
  if (v23)
    dispatch_release(v23);
  xpc_release(object);
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF66CC84);
}

const char *ABMServerInternal::getName(ABMServerInternal *this)
{
  return "server.main";
}

void xpc::connection::~connection(xpc_object_t *this)
{
  xpc_release(*this);
  *this = 0;
}

void ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;

  *(_QWORD *)this = &off_1E791A738;
  *((_QWORD *)this + 9) = &unk_1E791A778;
  ABMServerInternal::finishShutdown_sync(this);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 29);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *((_QWORD *)this + 25);
  if (v17)
  {
    dispatch_group_leave(v17);
    v18 = *((_QWORD *)this + 25);
    if (v18)
      dispatch_release(v18);
  }
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((_QWORD **)this + 19));
  *((_QWORD *)this + 9) = off_1E791AB70;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  ctu::XpcServer::~XpcServer(this);
}

{
  void *v1;

  ABMServerInternal::~ABMServerInternal(this);
  operator delete(v1);
}

void ABMServerInternal::finishShutdown_sync(ABMServerInternal *this)
{
  _QWORD *v2;
  NSObject *v3;
  xpc_connection_t *Listener_sync;
  NSObject *v5;
  uint8_t v6[16];
  xpc_object_t object;
  dispatch_group_t group;

  v2 = (_QWORD *)((char *)this + 152);
  std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*((_QWORD **)this + 19));
  *((_QWORD *)this + 18) = v2;
  *((_QWORD *)this + 20) = 0;
  *v2 = 0;
  group = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownGlobalServices(*((ServiceManager **)this + 36), &group);
  v3 = group;
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  Listener_sync = (xpc_connection_t *)ctu::XpcServer::getListener_sync(this);
  xpc_connection_cancel(*Listener_sync);
  object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  object = 0;
  ABMServerInternal::changeState_sync(this, 5);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 34) + 88))(*((_QWORD *)this + 34), 5);
  v5 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I --------- ABM shutdown completed ---------", v6, 2u);
  }
  ABMServerInternal::stopRunLoop_sync(this);
  if (v3)
    dispatch_release(v3);
}

void sub_1BF66CFDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  NSObject *v11;

  xpc_release(object);
  if (v11)
    dispatch_release(v11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ABMServerInternal::~ABMServerInternal(ABMServerInternal *this)
{
  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));
}

{
  void *v1;

  ABMServerInternal::~ABMServerInternal((ABMServerInternal *)((char *)this - 72));
  operator delete(v1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::radio *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __CFNotificationCenter *DarwinNotifyCenter;
  __int128 *v23;
  void **v24;
  char v25;
  __int128 v26;
  void *v27;
  size_t v28;
  NSObject *v29;
  void (***v30)(uint8_t *__return_ptr, _QWORD, uint64_t *);
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  void *v47;
  const void *v48;
  NSObject *v49;
  char v50;
  char v51;
  NSObject *v52;
  _BOOL8 v53;
  int v54;
  uint64_t v55;
  __int16 v56[6];
  int v57;
  _QWORD aBlock[5];
  uint64_t v59;
  std::__shared_weak_count *v60;
  xpc_object_t object;
  uint64_t v62[2];
  dispatch_group_t buf[3];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Request to init server", (uint8_t *)buf, 2u);
  }
  v4 = *(_QWORD *)(v2 + 256);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(std::__shared_weak_count **)(v5 + 24);
  v62[0] = *(_QWORD *)(v5 + 16);
  v62[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  ABMServerRegistryBuilder::setupQMIServer(v4, (Registry **)(v2 + 224), v62);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (capabilities::radio::vendor(v9) == 2)
  {
    v12 = (std::__shared_weak_count *)operator new(0x88uLL);
    v12->__shared_owners_ = 0;
    v13 = (unint64_t *)&v12->__shared_owners_;
    v12->__shared_weak_owners_ = 0;
    v12->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E7916D80;
    v14 = v12 + 1;
    BootController::BootController((BootController *)&v12[1]);
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E7920B98;
    LOBYTE(v12[5].__shared_owners_) = 1;
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v12[4].__shared_weak_owners_ = (uint64_t)v14;
    v12[5].__vftable = (std::__shared_weak_count_vtbl *)v12;
    do
      v18 = __ldaxr(v13);
    while (__stlxr(v18 - 1, v13));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    v19 = *(std::__shared_weak_count **)(v2 + 280);
    *(_QWORD *)(v2 + 272) = v14;
    *(_QWORD *)(v2 + 280) = v12;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  ABMServerInternal::startRunLoop_sync((ABMServerInternal *)v2);
  object = xpc_connection_create_mach_service(kABMDefaultServiceName[0], 0, 1uLL);
  if (!object)
    object = xpc_null_create();
  ctu::XpcServer::setListener_sync();
  xpc_release(object);
  object = 0;
  ctu::XpcServer::startListener_sync((ctu::XpcServer *)v2);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("kAppleBasebandManagerDaemonReady"), 0, 0, 1u);
  v23 = (__int128 *)(a1 + 48);
  v24 = (void **)(v2 + 168);
  if (v2 + 168 != a1 + 48)
  {
    v25 = *(_BYTE *)(a1 + 71);
    if (*(char *)(v2 + 191) < 0)
    {
      if (v25 >= 0)
        v27 = (void *)(a1 + 48);
      else
        v27 = *(void **)(a1 + 48);
      if (v25 >= 0)
        v28 = *(unsigned __int8 *)(a1 + 71);
      else
        v28 = *(_QWORD *)(a1 + 56);
      std::string::__assign_no_alias<false>(v24, v27, v28);
    }
    else if ((*(_BYTE *)(a1 + 71) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v24, *(void **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v26 = *v23;
      *(_QWORD *)(v2 + 184) = *(_QWORD *)(a1 + 64);
      *(_OWORD *)v24 = v26;
    }
  }
  v29 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 71) < 0)
      v23 = *(__int128 **)v23;
    LODWORD(buf[0]) = 136315138;
    *(dispatch_group_t *)((char *)buf + 4) = (dispatch_group_t)v23;
    _os_log_impl(&dword_1BF566000, v29, OS_LOG_TYPE_DEFAULT, "#I host: %s", (uint8_t *)buf, 0xCu);
  }
  ABMServerInternal::changeState_sync(v2, 3u);
  v31 = *(std::__shared_weak_count **)(v2 + 232);
  v30 = *(void (****)(uint8_t *__return_ptr, _QWORD, uint64_t *))(v2 + 240);
  v59 = *(_QWORD *)(v2 + 224);
  v60 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  (**v30)((uint8_t *)buf, v30, &v59);
  v34 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  v35 = *(std::__shared_weak_count **)(v2 + 296);
  *(_OWORD *)(v2 + 288) = v34;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)buf[1];
  if (buf[1])
  {
    v39 = (unint64_t *)&buf[1][1];
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v60;
  if (v60)
  {
    v42 = (unint64_t *)&v60->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *(_QWORD *)(v2 + 288);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3;
  aBlock[3] = &__block_descriptor_tmp_21;
  aBlock[4] = v2;
  v45 = _Block_copy(aBlock);
  v46 = v45;
  if (!v45)
  {
    v48 = *(const void **)(v44 + 184);
    *(_QWORD *)(v44 + 184) = 0;
    if (!v48)
      goto LABEL_66;
    goto LABEL_65;
  }
  v47 = _Block_copy(v45);
  v48 = *(const void **)(v44 + 184);
  *(_QWORD *)(v44 + 184) = v47;
  if (v48)
LABEL_65:
    _Block_release(v48);
LABEL_66:
  if (v46)
    _Block_release(v46);
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 288) + 64))(*(_QWORD *)(v2 + 288));
  buf[0] = (dispatch_group_t)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeGlobalServices(*(ServiceManager **)(v2 + 288), buf);
  v49 = buf[0];
  dispatch_group_wait(buf[0], 0xFFFFFFFFFFFFFFFFLL);
  v57 = 6;
  v50 = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(v2 + 272) + 96))(*(_QWORD *)(v2 + 272), &v57);
  if (v57 == 3)
    v51 = v50;
  else
    v51 = 0;
  if ((v51 & 1) == 0)
  {
    v52 = *(NSObject **)(v2 + 112);
    v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
    if (v53)
    {
      v56[0] = 0;
      _os_log_impl(&dword_1BF566000, v52, OS_LOG_TYPE_DEFAULT, "#I Previous shutdown was not clean", (uint8_t *)v56, 2u);
    }
    v54 = capabilities::radio::ice((capabilities::radio *)v53);
    v55 = 72;
    if (v54)
      v55 = 80;
    (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 272) + v55))(*(_QWORD *)(v2 + 272));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 272) + 88))(*(_QWORD *)(v2 + 272), 3);
  }
  if (v49)
    dispatch_release(v49);
}

void sub_1BF66D5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, xpc_object_t object, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::startRunLoop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  NSObject *v3;
  __int128 v4;
  _QWORD v5[5];
  dispatch_object_t object;
  pthread_attr_t buf;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__sig) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting ABM RunLoop", (uint8_t *)&buf, 2u);
  }
  v3 = dispatch_group_create();
  dispatch_group_enter(v3);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke;
  v5[3] = &__block_descriptor_tmp_11_4;
  v5[4] = this;
  object = v3;
  if (v3)
    dispatch_retain(v3);
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&buf.__opaque[24] = v4;
  *(_OWORD *)&buf.__opaque[40] = v4;
  *(_OWORD *)&buf.__sig = v4;
  *(_OWORD *)&buf.__opaque[8] = v4;
  pthread_attr_init(&buf);
  pthread_attr_set_qos_class_np(&buf, QOS_CLASS_USER_INITIATED, 0);
  pthread_create((pthread_t *)this + 27, &buf, (void *(__cdecl *)(void *))sServerRunLoopMain, v5);
  dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
  if (object)
    dispatch_release(object);
  if (v3)
    dispatch_release(v3);
}

void sub_1BF66D780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_object_t object)
{
  NSObject *v14;

  if (object)
  {
    dispatch_release(object);
    if (!v14)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v14)
  {
    goto LABEL_3;
  }
  dispatch_release(v14);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::changeState_sync(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  char *v5;
  NSObject *v6;
  dispatch_object_t v7;
  uint8_t buf[4];
  char *v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = to_string(*(_DWORD *)(a1 + 192));
    *(_DWORD *)buf = 136315394;
    v9 = v5;
    v10 = 2080;
    v11 = to_string(a2);
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I State change: %s -> %s", buf, 0x16u);
  }
  *(_DWORD *)(a1 + 192) = a2;
  v6 = *(NSObject **)(a1 + 200);
  if (v6)
  {
    v7 = *(dispatch_object_t *)(a1 + 200);
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    ABMServerInternal::checkShutdown_sync((ABMServerInternal *)a1, &v7);
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
}

void sub_1BF66D8B0(_Unwind_Exception *a1)
{
  NSObject *v1;

  dispatch_group_leave(v1);
  dispatch_release(v1);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal4initENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKN3abm9OverridesE_block_invoke_3(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  _QWORD *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  char *v13;
  std::string *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  const void *v20;
  std::string __p;
  void *aBlock[2];

  v6 = *(_QWORD **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    aBlock[0] = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v7 = *a3;
  aBlock[0] = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  v8 = *a4;
  if (*a4)
    v8 = _Block_copy(v8);
  aBlock[1] = v8;
  v9 = (std::__shared_weak_count *)v6[2];
  if (!v9 || (v10 = v6[1], (v11 = std::__shared_weak_count::lock(v9)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = v6;
  v14 = (std::string *)(v13 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)v13 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *((_OWORD *)v13 + 2) = *(_OWORD *)aBlock;
  aBlock[0] = 0;
  aBlock[1] = 0;
  v15 = v6[3];
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = operator new(0x18uLL);
  *v18 = v13;
  v18[1] = v10;
  v18[2] = v12;
  dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v20 = aBlock[1];
    if (!aBlock[1])
      goto LABEL_22;
    goto LABEL_21;
  }
  v20 = aBlock[1];
  if (aBlock[1])
LABEL_21:
    _Block_release(v20);
LABEL_22:
  if (aBlock[0])
    CFRelease(aBlock[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void __copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 48);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void ___ZN17ABMServerInternal5startEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *__dst[2];
  unint64_t v13;

  v1 = a1[5];
  v2 = *(_DWORD *)(v1 + 192);
  if (v2 > 5)
    return;
  if (((1 << v2) & 0x35) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 0;
    return;
  }
  if (v2 == 1)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    return;
  }
  ABMServerInternal::changeState_sync(a1[5], 0);
  v4 = (const void *)*MEMORY[0x1E0CFB490];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB490]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v13) = v5;
    v7 = __dst;
    if (!v5)
      goto LABEL_15;
  }
  memmove(v7, v4, (size_t)v6);
LABEL_15:
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  v10 = a1[6];
  v11 = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ABMServerInternal::start_sync(v1, &v11);
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
}

void sub_1BF66DC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getState_sync(ABMServerInternal *this)
{
  return *((unsigned int *)this + 48);
}

void ABMServerInternal::broadcastServerState_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v6;
  __CFDictionary *v7;
  const void *v8;
  size_t v9;
  void *v10;
  void **v11;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  CFTypeID v15;
  const void *v16;
  void *v17;
  ctu *v18;
  void *__dst[2];
  unint64_t v20;
  CFTypeRef cf;
  std::string v22;

  cf = 0;
  v4 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (Mutable)
    cf = Mutable;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  ctu::cf::insert<char const*,std::string>(v7, (const __CFString **)*MEMORY[0x1E0CFB0E0], (uint64_t)&v22, v4, v6);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  v8 = (const void *)*MEMORY[0x1E0CFB730];
  v9 = strlen((const char *)*MEMORY[0x1E0CFB730]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_16:
    memmove(v11, v8, (size_t)v10);
    *((_BYTE *)v10 + (_QWORD)v11) = 0;
    v12 = cf;
    if (!cf)
      goto LABEL_19;
    goto LABEL_17;
  }
  HIBYTE(v20) = v9;
  v11 = __dst;
  if (v9)
    goto LABEL_16;
  LOBYTE(__dst[0]) = 0;
  v12 = cf;
  if (!cf)
    goto LABEL_19;
LABEL_17:
  v15 = CFGetTypeID(v12);
  if (v15 == CFDictionaryGetTypeID())
  {
    v18 = (ctu *)v12;
    CFRetain(v12);
    v16 = v12;
    goto LABEL_20;
  }
LABEL_19:
  v16 = 0;
  v18 = 0;
LABEL_20:
  v17 = 0;
  ABMServerInternal::broadcast_sync(a1, (uint64_t)__dst, &v18, &v17);
  if (v16)
    CFRelease(v16);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__dst[0]);
    if (!v12)
      return;
  }
  else if (!v12)
  {
    return;
  }
  CFRelease(v12);
}

void sub_1BF66DEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
  {
    operator delete(__p);
    ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
    _Unwind_Resume(a1);
  }
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a17);
  _Unwind_Resume(a1);
}

void ABMServerInternal::start_sync(uint64_t a1, NSObject **a2)
{
  NSObject *v4;
  void **v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  NSObject *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD block[6];
  std::__shared_weak_count *v20;
  dispatch_group_t group;
  void *__p[2];
  char v23;
  uint8_t buf[4];
  void **v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 112);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    abm::asString();
    v5 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v25 = v5;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting ABM with profile: %s", buf, 0xCu);
    if (v23 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 0);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 72))(*(_QWORD *)(a1 + 288));
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  ServiceManager::initializeDynamicServices(*(ServiceManager **)(a1 + 288), (NSObject **)__p);
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v6 || (v7 = *(_QWORD *)(a1 + 8), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = __p[0];
  v11 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_12_4;
  block[4] = a1;
  block[5] = v7;
  v20 = v8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = *a2;
  group = v14;
  if (v14)
  {
    dispatch_retain(v14);
    dispatch_group_enter(v14);
  }
  dispatch_group_notify(v10, v11, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (__p[0])
    dispatch_release((dispatch_object_t)__p[0]);
}

void sub_1BF66E14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 48);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_48c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 48);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN17ABMServerInternal4stopEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v2;
  char v4;
  const void *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  void *__dst[2];
  unint64_t v14;

  v1 = a1[5];
  v2 = *(_DWORD *)(v1 + 192);
  if (v2 <= 5)
  {
    v4 = 1;
    if (((1 << v2) & 0x15) != 0)
    {
      v4 = 0;
LABEL_20:
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = v4;
      return;
    }
    if (((1 << v2) & 0x28) != 0)
      goto LABEL_20;
    ABMServerInternal::changeState_sync(a1[5], 2u);
    v5 = (const void *)*MEMORY[0x1E0CFB498];
    v6 = strlen((const char *)*MEMORY[0x1E0CFB498]);
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      v8 = (void **)operator new(v9 + 1);
      __dst[1] = v7;
      v14 = v10 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v14) = v6;
      v8 = __dst;
      if (!v6)
        goto LABEL_13;
    }
    memmove(v8, v5, (size_t)v7);
LABEL_13:
    *((_BYTE *)v7 + (_QWORD)v8) = 0;
    ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
    if (SHIBYTE(v14) < 0)
      operator delete(__dst[0]);
    v11 = a1[6];
    v12 = v11;
    if (v11)
    {
      dispatch_retain(v11);
      dispatch_group_enter(v11);
    }
    ABMServerInternal::stop_sync(v1, &v12);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
    v4 = 1;
    goto LABEL_20;
  }
}

void sub_1BF66E35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::stop_sync(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD block[6];
  std::__shared_weak_count *v18;
  dispatch_group_t group;
  NSObject *v20;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 2);
  v20 = 0xAAAAAAAAAAAAAAAALL;
  ServiceManager::shutdownDynamicServices(*(ServiceManager **)(a1 + 288), &v20);
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4 || (v5 = *(_QWORD *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = v20;
  v9 = *(NSObject **)(a1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_4;
  block[4] = a1;
  block[5] = v5;
  v18 = v6;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = *a2;
  group = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(v12);
  }
  dispatch_group_notify(v8, v9, block);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  if (v20)
    dispatch_release(v20);
}

void sub_1BF66E51C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  NSObject *v3;

  v3 = *(NSObject **)(v1 - 56);
  if (v3)
    dispatch_release(v3);
  _Unwind_Resume(exception_object);
}

void ___ZN17ABMServerInternal8shutdownEP16dispatch_group_s_block_invoke(_QWORD *a1)
{
  NSObject *v2;
  ABMServerInternal *v3;
  dispatch_object_t v4;

  v3 = (ABMServerInternal *)a1[5];
  v2 = a1[6];
  v4 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = ABMServerInternal::checkShutdown_sync(v3, &v4);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1BF66E5B8(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::checkShutdown_sync(ABMServerInternal *this, dispatch_object_t *a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void **v10;
  NSObject *v11;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *__dst[2];
  unint64_t v17;

  switch(*((_DWORD *)this + 48))
  {
    case 0:
    case 2:
      v4 = *a2;
      if (*a2)
      {
        dispatch_retain(*a2);
        dispatch_group_enter(v4);
      }
      v5 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = v4;
      if (!v5)
        return 1;
      dispatch_group_leave(v5);
      v6 = v5;
      goto LABEL_25;
    case 1:
      ABMServerInternal::changeState_sync(this, 4);
      v7 = (const void *)*MEMORY[0x1E0CFB498];
      v8 = strlen((const char *)*MEMORY[0x1E0CFB498]);
      if (v8 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = (void *)v8;
      if (v8 >= 0x17)
      {
        v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v13 = v8 | 7;
        v14 = v13 + 1;
        v10 = (void **)operator new(v13 + 1);
        __dst[1] = v9;
        v17 = v14 | 0x8000000000000000;
        __dst[0] = v10;
      }
      else
      {
        HIBYTE(v17) = v8;
        v10 = __dst;
        if (!v8)
          goto LABEL_19;
      }
      memmove(v10, v7, (size_t)v9);
LABEL_19:
      *((_BYTE *)v9 + (_QWORD)v10) = 0;
      ABMServerInternal::broadcastServerState_sync((uint64_t)this, (uint64_t)__dst);
      if (SHIBYTE(v17) < 0)
        operator delete(__dst[0]);
      v11 = *a2;
      v15 = v11;
      if (v11)
      {
        dispatch_retain(v11);
        dispatch_group_enter(v11);
      }
      ABMServerInternal::shutdown_sync((uint64_t)this, &v15);
      if (v11)
      {
LABEL_24:
        dispatch_group_leave(v11);
        v6 = v11;
LABEL_25:
        dispatch_release(v6);
      }
      return 1;
    case 3:
      ABMServerInternal::finishShutdown_sync(this);
      v11 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = 0;
      if (!v11)
        return 1;
      goto LABEL_24;
    case 4:
      return 0;
    case 5:
      v11 = *((_QWORD *)this + 25);
      *((_QWORD *)this + 25) = 0;
      if (!v11)
        return 1;
      goto LABEL_24;
    default:
      return 1;
  }
}

void sub_1BF66E79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  NSObject *v15;

  if (v15)
  {
    dispatch_group_leave(v15);
    dispatch_release(v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServerInternal::getRunLoop(ABMServerInternal *this)
{
  return *((_QWORD *)this + 26);
}

void ABMServerInternal::shutdown_sync(uint64_t a1, NSObject **a2)
{
  NSObject *v4;
  NSObject *v5;

  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 272) + 88))(*(_QWORD *)(a1 + 272), 4);
  v4 = *a2;
  v5 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ABMServerInternal::stop_sync(a1, &v5);
  if (v4)
  {
    dispatch_group_leave(v4);
    dispatch_release(v4);
  }
}

void sub_1BF66E864(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

char *to_string(unsigned int a1)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5[2];
  uint64_t v6[2];
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 >= 6)
  {
    GetABMLogServer(v6);
    v3 = *((_QWORD *)GetGlobalLogger(v6) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v8) = a1;
      _os_log_fault_impl(&dword_1BF566000, v3, OS_LOG_TYPE_FAULT, "Unknown server state %d", buf, 8u);
    }
    GetABMLogServer(v5);
    v4 = *((_QWORD *)GetGlobalLogger(v5) + 4);
    std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)v5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "ABM ASSERT";
      v9 = 2080;
      v10 = "false";
      v11 = 2080;
      v12 = "/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Ser"
            "ver/ABMServer.cpp";
      v13 = 1024;
      v14 = 85;
      _os_log_fault_impl(&dword_1BF566000, v4, OS_LOG_TYPE_FAULT, "%s (%s): File: %s Line: %d", buf, 0x26u);
    }
    __break(1u);
  }
  return off_1E791ACE8[a1];
}

void sub_1BF66E9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF66E9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal17startRunLoop_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *(_QWORD *)(a1 + 32);
  pthread_setname_np("ABM.Server.RunLoop");
  pthread_set_qos_class_self_np(QOS_CLASS_DEFAULT, 0);
  *(_QWORD *)(v2 + 208) = CFRunLoopGetCurrent();
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  v3 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I ABM RunLoop Started", v4, 2u);
  }
}

void __copy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    dispatch_retain(v3);
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE(uint64_t a1)
{
  NSObject *v1;

  v1 = *(NSObject **)(a1 + 40);
  if (v1)
    dispatch_release(v1);
}

uint64_t sServerRunLoopMain(void (**a1)(_QWORD))
{
  CFRunLoopSourceRef v2;
  __CFRunLoopSource *v3;
  __CFRunLoop *Current;
  const __CFString *v5;
  __CFRunLoop *v6;
  unsigned __int8 v8;
  NSObject *v9;
  uint8_t v10[16];
  CFRunLoopSourceContext context;

  memset(&context, 0, sizeof(context));
  v2 = CFRunLoopSourceCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &context);
  if (v2)
  {
    v3 = v2;
    Current = CFRunLoopGetCurrent();
    v5 = (const __CFString *)*MEMORY[0x1E0C9B280];
    CFRunLoopAddSource(Current, v3, (CFRunLoopMode)*MEMORY[0x1E0C9B280]);
    a1[2](a1);
    while ((CFRunLoopRunInMode(v5, 1.79769313e308, 1u) - 1) > 1)
      ;
    v6 = CFRunLoopGetCurrent();
    CFRunLoopRemoveSource(v6, v3, v5);
    CFRelease(v3);
    return 0;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v9 = qword_1ED70F6F8;
    if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_9;
    return 0;
  }
  v9 = qword_1ED70F6F8;
  if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
    return 0;
LABEL_9:
  *(_WORD *)v10 = 0;
  _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "Failed to create dummySource for runloop", v10, 2u);
  return 0;
}

void ABMServerInternal::stopRunLoop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping ABM RunLoop", (uint8_t *)v5, 2u);
  }
  usleep(0x7A120u);
  CFRunLoopStop(*((CFRunLoopRef *)this + 26));
  *((_QWORD *)this + 26) = 0;
  v3 = pthread_join(*((pthread_t *)this + 27), 0);
  *((_QWORD *)this + 27) = 0;
  v4 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Stopped ABM RunLoop: %d", (uint8_t *)v5, 8u);
  }
}

uint64_t ABMServer::getProfile(ABMServer *this)
{
  return 3;
}

uint64_t ___ZN17ABMServerInternal10start_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *__dst[2];
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 32);
  ABMServerInternal::changeState_sync(v1, 1u);
  v2 = (const void *)*MEMORY[0x1E0CFB380];
  v3 = strlen((const char *)*MEMORY[0x1E0CFB380]);
  if (v3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v10 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_8;
  }
  HIBYTE(v10) = v3;
  v5 = __dst;
  if (v3)
LABEL_8:
    memmove(v5, v2, (size_t)v4);
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v10) < 0)
    operator delete(__dst[0]);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 272) + 88))(*(_QWORD *)(v1 + 272), 1);
}

void sub_1BF66EE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__110shared_ptrIN3ctu9XpcServerEEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void ___ZN17ABMServerInternal9stop_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  ABMServerInternal *v2;
  std::error_code *v3;
  NSObject *v4;
  const void *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  ctu *v18;
  void *__p[2];
  unint64_t v20;
  void *__dst[2];
  unint64_t v22;
  std::__fs::filesystem::path buf;

  v2 = *(ABMServerInternal **)(a1 + 32);
  v1 = (uint64_t)v2;
  if (*((_DWORD *)v2 + 48) == 4)
  {
    ABMServerInternal::finishShutdown_sync(v2);
  }
  else
  {
    ABMServerInternal::changeState_sync(v2, 3);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v1 + 272) + 88))(*(_QWORD *)(v1 + 272), 3);
    v4 = *(NSObject **)(v1 + 112);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", (uint8_t *)&buf, 2u);
    }
  }
  *((_BYTE *)&buf.__pn_.__r_.__value_.__s + 23) = 17;
  strcpy((char *)&buf, "/tmp/abm.shutdown");
  if (remove(&buf, v3))
    unlink((const char *)&buf);
  v5 = (const void *)*MEMORY[0x1E0CFB388];
  v6 = strlen((const char *)*MEMORY[0x1E0CFB388]);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v22 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_14;
  }
  HIBYTE(v22) = v6;
  v8 = __dst;
  if (v6)
LABEL_14:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ABMServerInternal::broadcastServerState_sync(v1, (uint64_t)__dst);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  v11 = (const void *)*MEMORY[0x1E0CFB3B8];
  v12 = strlen((const char *)*MEMORY[0x1E0CFB3B8]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = (void *)v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    __p[1] = v13;
    v20 = v16 | 0x8000000000000000;
    __p[0] = v14;
    goto LABEL_24;
  }
  HIBYTE(v20) = v12;
  v14 = __p;
  if (v12)
LABEL_24:
    memmove(v14, v11, (size_t)v13);
  *((_BYTE *)v13 + (_QWORD)v14) = 0;
  v17 = 0;
  v18 = 0;
  ABMServerInternal::broadcast_sync(v1, (uint64_t)__p, &v18, &v17);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_1BF66F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

void ABMServerInternal::finishStop_sync(ABMServerInternal *this)
{
  NSObject *v2;
  uint8_t v3[16];

  ABMServerInternal::changeState_sync((uint64_t)this, 3u);
  (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 34) + 88))(*((_QWORD *)this + 34), 3);
  v2 = *((_QWORD *)this + 14);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I --------- ABM stop completed ---------", v3, 2u);
  }
}

_QWORD *ABMServerInternal::getClientState_sync@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  *a3 = 0;
  a3[1] = 0;
  v5 = *(_QWORD **)(a1 + 152);
  result = (_QWORD *)(a1 + 152);
  v4 = v5;
  if (v5)
  {
    v6 = *a2;
    v7 = result;
    do
    {
      v8 = v4[4];
      v9 = v8 >= v6;
      if (v8 >= v6)
        v10 = v4;
      else
        v10 = v4 + 1;
      if (v9)
        v7 = v4;
      v4 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != result && v6 >= v7[4])
    {
      v12 = v7[5];
      v11 = v7[6];
      if (v11)
      {
        v13 = (unint64_t *)(v11 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      *a3 = v12;
      a3[1] = v11;
    }
  }
  return result;
}

void ABMServerInternal::handleServerError_sync(uint64_t a1, xpc::object *a2)
{
  int v2;
  NSObject *v5;
  void *p_p;
  void *__p;
  char v8;
  uint8_t buf[4];
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 192);
  if (v2 != 3 && v2 != 5)
  {
    v5 = *(NSObject **)(a1 + 112);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string(a2);
      if (v8 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      *(_DWORD *)buf = 136315138;
      v10 = p_p;
      _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Server error: %s", buf, 0xCu);
      if (v8 < 0)
        operator delete(__p);
    }
  }
}

void ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  CFMutableDictionaryRef Mutable;
  const __CFAllocator *v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void **v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  CFTypeID v14;
  const void *v15;
  void *v16;
  ctu *v17;
  void *__dst[2];
  unint64_t v19;
  xpc_object_t object;
  CFTypeRef cf;

  v2 = *(_QWORD **)(a1 + 32);
  cf = 0;
  v3 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    cf = Mutable;
  ctu::cf::insert<char const*,char const*>(Mutable, (const __CFString **)*MEMORY[0x1E0CFB0E0], (const __CFString **)*MEMORY[0x1E0CFB380], v3, v5);
  v6 = *(void **)(a1 + 40);
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  v7 = (const void *)*MEMORY[0x1E0CFB730];
  v8 = strlen((const char *)*MEMORY[0x1E0CFB730]);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    v10 = (void **)operator new(v12 + 1);
    __dst[1] = v9;
    v19 = v13 | 0x8000000000000000;
    __dst[0] = v10;
LABEL_14:
    memmove(v10, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    v11 = cf;
    if (!cf)
      goto LABEL_17;
    goto LABEL_15;
  }
  HIBYTE(v19) = v8;
  v10 = __dst;
  if (v8)
    goto LABEL_14;
  LOBYTE(__dst[0]) = 0;
  v11 = cf;
  if (!cf)
    goto LABEL_17;
LABEL_15:
  v14 = CFGetTypeID(v11);
  if (v14 == CFDictionaryGetTypeID())
  {
    v17 = (ctu *)v11;
    CFRetain(v11);
    v15 = v11;
    goto LABEL_18;
  }
LABEL_17:
  v15 = 0;
  v17 = 0;
LABEL_18:
  v16 = 0;
  ABMServerInternal::unicast_sync(v2, (xpc_connection_t *)&object, (uint64_t)__dst, &v17, &v16);
  if (v15)
    CFRelease(v15);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
  xpc_release(object);
  object = 0;
  if (v11)
    CFRelease(v11);
}

void sub_1BF66F580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, xpc_object_t object, const void *a19)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  if (a17 < 0)
    operator delete(__p);
  xpc_release(object);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a19);
  _Unwind_Resume(a1);
}

void ABMServerInternal::unicast_sync(_QWORD *a1, xpc_connection_t *a2, uint64_t a3, ctu **a4, void **a5)
{
  xpc_object_t v10;
  xpc_object_t v11;
  const void *v12;
  uint64_t (*v13)(uint64_t);
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  xpc_connection_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t SystemTime;
  NSObject *v37;
  void **v38;
  const void *v39;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::string *v45;
  _xpc_connection_s **v46;
  void **v47;
  _xpc_connection_s *v48;
  NSObject *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  unint64_t v57;
  xpc_connection_t v58;
  void *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  xpc_connection_t *v63;
  uint64_t v64;
  _QWORD block[6];
  std::__shared_weak_count *v66;
  xpc_object_t object;
  std::string v68;
  void *aBlock;
  _QWORD handler[6];
  std::__shared_weak_count *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::string __p;
  uint64_t v75;
  NSObject *v76;
  std::string v77;
  unint64_t v78;
  unint64_t v79;
  xpc_object_t v80;
  uint8_t buf[4];
  const void *v82;
  __int16 v83;
  std::string *v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v10 = xpc_dictionary_create(0, 0, 0);
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
      v11 = v10;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v10 = 0;
  }
  xpc_release(v10);
  v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a4)
    v13 = 0;
  if (v13)
  {
    ctu::cf_to_xpc(*a4, v12);
    xpc_dictionary_set_value(v11, kKeyEventData[0], v80);
    v14 = v80;
    v80 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v80);
    v80 = 0;
  }
  v15 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v11, kKeyCommand[0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = (const char *)a3;
  if (*(char *)(a3 + 23) < 0)
    v17 = *(const char **)a3;
  v18 = xpc_string_create(v17);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v11, kKeyEvent[0], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = dispatch_group_create();
  v21 = (std::__shared_weak_count *)a1[2];
  if (!v21 || (v64 = a1[1], (v22 = std::__shared_weak_count::lock(v21)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v23 = v22;
  p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (v27)
  {
    v78 = 0xAAAAAAAAAAAAAAAALL;
    v79 = 0xAAAAAAAAAAAAAAAALL;
    v28 = *a2;
    if (*a2)
      goto LABEL_25;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v23);
    v78 = 0xAAAAAAAAAAAAAAAALL;
    v79 = 0xAAAAAAAAAAAAAAAALL;
    v28 = *a2;
    if (*a2)
    {
LABEL_25:
      xpc_retain(v28);
      v78 = 0;
      v79 = 0;
      v29 = a1 + 19;
      v30 = (_QWORD *)a1[19];
      if (!v30)
        goto LABEL_39;
      goto LABEL_29;
    }
  }
  v28 = (xpc_connection_t)xpc_null_create();
  v78 = 0;
  v79 = 0;
  v29 = a1 + 19;
  v30 = (_QWORD *)a1[19];
  if (!v30)
  {
LABEL_39:
    v35 = 0;
    goto LABEL_40;
  }
LABEL_29:
  v31 = v29;
  do
  {
    v32 = v30[4];
    v33 = v32 >= (unint64_t)v28;
    if (v32 >= (unint64_t)v28)
      v34 = v30;
    else
      v34 = v30 + 1;
    if (v33)
      v31 = v30;
    v30 = (_QWORD *)*v34;
  }
  while (*v34);
  if (v31 == v29 || (unint64_t)v28 < v31[4])
    goto LABEL_39;
  v35 = v31[5];
  v42 = v31[6];
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v78 = v35;
  v79 = v42;
LABEL_40:
  xpc_release(v28);
  if (!v35
    || (uint64_t *)(v35 + 40) == std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v35 + 32, (const void **)a3))
  {
    goto LABEL_76;
  }
  SystemTime = TelephonyUtilGetSystemTime();
  v37 = a1[14];
  v63 = a2;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = a5;
    v39 = (const void *)a3;
    if (*(char *)(a3 + 23) < 0)
    {
      v39 = *(const void **)a3;
      v40 = v78;
      if ((*(char *)(v78 + 23) & 0x80000000) == 0)
        goto LABEL_45;
    }
    else
    {
      v40 = v78;
      if ((*(char *)(v78 + 23) & 0x80000000) == 0)
      {
LABEL_45:
        v41 = *(_OWORD *)v40;
        v77.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 16);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v41;
LABEL_52:
        v45 = &v77;
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)v77.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        v82 = v39;
        v83 = 2080;
        v84 = v45;
        v85 = 2048;
        v86 = SystemTime;
        _os_log_impl(&dword_1BF566000, v37, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        a5 = v38;
        a2 = v63;
        goto LABEL_57;
      }
    }
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v40, *(_QWORD *)(v40 + 8));
    goto LABEL_52;
  }
LABEL_57:
  if (*a5)
  {
    v46 = a2;
    v47 = a5;
    dispatch_group_enter(v20);
    v48 = *v46;
    v49 = a1[3];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
    handler[3] = &__block_descriptor_tmp_28_2;
    handler[4] = a1;
    handler[5] = v64;
    v71 = v23;
    do
      v50 = __ldxr(p_shared_weak_owners);
    while (__stxr(v50 + 1, p_shared_weak_owners));
    v72 = v78;
    v73 = (std::__shared_weak_count *)v79;
    if (v79)
    {
      v51 = (unint64_t *)(v79 + 8);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    v75 = SystemTime;
    v76 = v20;
    xpc_connection_send_message_with_reply(v48, v11, v49, handler);
    a5 = v47;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v53 = v73;
    a2 = v63;
    if (v73)
    {
      v54 = (unint64_t *)&v73->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v71)
      std::__shared_weak_count::__release_weak(v71);
  }
  else
  {
    xpc_connection_send_message(*a2, v11);
  }
LABEL_76:
  if (!*a5)
    goto LABEL_92;
  v56 = a1[3];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_29;
  block[3] = &__block_descriptor_tmp_30_4;
  block[4] = a1;
  block[5] = v64;
  v66 = v23;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = *a2;
  object = v58;
  if (!v58)
  {
    object = xpc_null_create();
    if ((*(char *)(a3 + 23) & 0x80000000) == 0)
      goto LABEL_81;
LABEL_83:
    std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    goto LABEL_84;
  }
  xpc_retain(v58);
  if (*(char *)(a3 + 23) < 0)
    goto LABEL_83;
LABEL_81:
  v68 = *(std::string *)a3;
LABEL_84:
  v59 = *a5;
  if (*a5)
    v59 = _Block_copy(v59);
  aBlock = v59;
  dispatch_group_notify(v20, v56, block);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  xpc_release(object);
  object = 0;
  if (v66)
    std::__shared_weak_count::__release_weak(v66);
LABEL_92:
  dispatch_release(v20);
  v60 = (std::__shared_weak_count *)v79;
  if (v79)
  {
    v61 = (unint64_t *)(v79 + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  std::__shared_weak_count::__release_weak(v23);
  xpc_release(v11);
}

void sub_1BF66FC6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v39 - 168);
  std::__shared_weak_count::__release_weak(v38);
  xpc_release(v37);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc::object *v3;
  xpc_object_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  const std::string::value_type **v12;
  int v13;
  const void *v14;
  NSObject *v15;
  __int128 v16;
  NSObject *v17;
  std::string *p_p;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::string __p;
  const void *v26;
  const std::string::value_type **v27;
  std::__shared_weak_count *v28;
  uint8_t buf[4];
  std::string *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = (xpc::object *)(a1 + 40);
  v4 = *(xpc_object_t *)(a1 + 40);
  if (v4)
  {
    xpc_retain(*(xpc_object_t *)(a1 + 40));
    v27 = 0;
    v28 = 0;
    v5 = (_QWORD *)(v2 + 152);
    v6 = *(_QWORD **)(v2 + 152);
    if (!v6)
      goto LABEL_15;
  }
  else
  {
    v4 = xpc_null_create();
    v27 = 0;
    v28 = 0;
    v5 = (_QWORD *)(v2 + 152);
    v6 = *(_QWORD **)(v2 + 152);
    if (!v6)
    {
LABEL_15:
      v11 = 0;
      v12 = 0;
      goto LABEL_16;
    }
  }
  v7 = v5;
  do
  {
    v8 = v6[4];
    v9 = v8 >= (unint64_t)v4;
    if (v8 >= (unint64_t)v4)
      v10 = v6;
    else
      v10 = v6 + 1;
    if (v9)
      v7 = v6;
    v6 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 == v5 || (unint64_t)v4 < v7[4])
    goto LABEL_15;
  v12 = (const std::string::value_type **)v7[5];
  v11 = (std::__shared_weak_count *)v7[6];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v27 = v12;
  v28 = v11;
LABEL_16:
  xpc_release(v4);
  if (!v12)
  {
    v17 = *(NSObject **)(v2 + 112);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_39;
    xpc::object::to_string(v3);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v30 = p_p;
    _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "%s is not in client list", buf, 0xCu);
    goto LABEL_37;
  }
  v13 = *(unsigned __int8 *)(a1 + 56);
  v14 = *(const void **)(a1 + 48);
  v26 = v14;
  if (v14)
    CFRetain(v14);
  ServerClientState::registerNotification_sync((void **)&v27, v13 != 0, &v26);
  if (v14)
    CFRelease(v14);
  v15 = *(NSObject **)(v2 + 112);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *v12, (std::string::size_type)v12[1]);
    }
    else
    {
      v16 = *(_OWORD *)v12;
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v12[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v16;
    }
    v21 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v22 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 136315394;
    v30 = v21;
    v31 = 2112;
    v32 = v22;
    _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I %s registered for: %@", buf, 0x16u);
LABEL_37:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_39:
  if (v11)
  {
    v23 = (unint64_t *)&v11->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF670078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF6700AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void __destroy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    CFRelease(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN17ABMServerInternal9broadcastENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  ctu *v3;
  const void *v4;
  void *v5;
  void *v6;
  ctu *v7;
  std::string v8;

  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    v3 = *(ctu **)(a1 + 64);
    v7 = v3;
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v8 = *(std::string *)(a1 + 40);
  v3 = *(ctu **)(a1 + 64);
  v7 = v3;
  if (v3)
LABEL_5:
    CFRetain(v3);
LABEL_6:
  v4 = *(const void **)(a1 + 72);
  if (v4)
    v5 = _Block_copy(v4);
  else
    v5 = 0;
  v6 = v5;
  ABMServerInternal::broadcast_sync(v2, (uint64_t)&v8, &v7, &v6);
  if (v5)
    _Block_release(v5);
  if (v3)
    CFRelease(v3);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BF6701FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  const void *v16;

  if (v16)
    _Block_release(v16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  const void *v6;
  void *result;

  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
    v6 = *(const void **)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v6;
    if (!v6)
      goto LABEL_6;
    goto LABEL_5;
  }
  v5 = *(_OWORD *)(a2 + 40);
  v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
  *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  v6 = *(const void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
LABEL_5:
    CFRetain(v6);
LABEL_6:
  result = *(void **)(a2 + 72);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 72) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE72c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 72);
  if (v2)
    _Block_release(v2);
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  __int128 *v7;
  __int128 v8;
  std::string *p_p;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  std::string *v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (v3 = *(_QWORD *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v16 = v4) != 0))
  {
    v5 = v4;
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(__int128 **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v10 = (_QWORD *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        v18 = p_p;
        v19 = 2080;
        v20 = v10;
        v21 = 2048;
        v22 = v11;
        _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  }
}

void sub_1BF6704B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v3;
  unint64_t *v4;
  unint64_t v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;
  std::string *v9;
  __int128 v10;

  v3 = *(_QWORD *)(a2 + 48);
  a1[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
  a1[2].__r_.__value_.__r.__words[0] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(_QWORD *)(a2 + 64);
  a1[2].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 56);
  a1[2].__r_.__value_.__r.__words[2] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a1 + 3;
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    a1[3].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
}

void sub_1BF670568(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTS17ServerClientState72c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_8;
  }
  else
  {
    v2 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v2)
      goto LABEL_8;
  }
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_8:
    v5 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v5)
      return;
    goto LABEL_9;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
LABEL_9:
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t std::pair<xpc::connection const,ServerClientState>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  xpc_release(*(xpc_object_t *)a1);
  *(_QWORD *)a1 = 0;
  return a1;
}

void ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_26(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t buf[4];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          v6 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v6 = (_QWORD *)*v6;
          *(_DWORD *)buf = 136315138;
          v10 = v6;
          _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I All clients responded to %s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 80) + 16))();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF6707A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::string *v7;
  __int128 v8;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  result = *(void **)(a2 + 80);
  if (result)
    result = _Block_copy(result);
  a1[10] = result;
  return result;
}

void sub_1BF670830(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 80);
  if (v2)
    _Block_release(v2);
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v3)
      return;
    goto LABEL_5;
  }
  operator delete(*(void **)(a1 + 56));
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
LABEL_5:
    std::__shared_weak_count::__release_weak(v3);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  __int128 *v7;
  __int128 v8;
  std::string *p_p;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string __p;
  std::__shared_weak_count *v16;
  uint8_t buf[4];
  std::string *v18;
  __int16 v19;
  _QWORD *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2 && (v3 = *(_QWORD *)(a1 + 32), v4 = std::__shared_weak_count::lock(v2), (v16 = v4) != 0))
  {
    v5 = v4;
    if (*(_QWORD *)(a1 + 40))
    {
      v6 = *(NSObject **)(v3 + 112);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(__int128 **)(a1 + 56);
        if (*((char *)v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        }
        else
        {
          v8 = *v7;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
        }
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        v10 = (_QWORD *)(a1 + 72);
        if (*(char *)(a1 + 95) < 0)
          v10 = (_QWORD *)*v10;
        v11 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        v18 = p_p;
        v19 = 2080;
        v20 = v10;
        v21 = 2048;
        v22 = v11;
        _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I %s responded to %s sent at %llu", buf, 0x20u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
  }
}

void sub_1BF670A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal12unicast_syncEN3xpc10connectionENSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_29(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  void *p_p;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p;
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint8_t buf[4];
  void *v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v12 = 0;
  v13 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    v13 = v4;
    if (v4)
    {
      v12 = *(_QWORD *)(a1 + 40);
      if (v12)
      {
        v5 = *(NSObject **)(v2 + 112);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          xpc::object::to_string((xpc::object *)(a1 + 56));
          p_p = __p;
          if (v11 >= 0)
            p_p = &__p;
          v7 = (_QWORD *)(a1 + 64);
          if (*(char *)(a1 + 87) < 0)
            v7 = (_QWORD *)*v7;
          *(_DWORD *)buf = 136315394;
          v15 = p_p;
          v16 = 2080;
          v17 = v7;
          _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Client '%s' responded to %s", buf, 0x16u);
          if (v11 < 0)
            operator delete(__p);
        }
      }
    }
  }
  else
  {
    v4 = 0;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 88) + 16))();
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF670BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF670BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  std::string *v8;
  __int128 v9;
  void *result;

  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(void **)(a2 + 56);
  a1[7] = v7;
  if (v7)
  {
    xpc_retain(v7);
    v8 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
    {
LABEL_6:
      v9 = *(_OWORD *)(a2 + 64);
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 80);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      goto LABEL_9;
    }
  }
  else
  {
    a1[7] = xpc_null_create();
    v8 = (std::string *)(a1 + 8);
    if ((*(char *)(a2 + 87) & 0x80000000) == 0)
      goto LABEL_6;
  }
  std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
LABEL_9:
  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  a1[11] = result;
  return result;
}

void sub_1BF670C98(_Unwind_Exception *a1)
{
  uint64_t v1;
  xpc_object_t *v2;
  std::__shared_weak_count *v4;

  xpc::connection::~connection(v2);
  v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrIN3ctu9XpcServerEEE56c23_ZTSKN3xpc10connectionE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 88);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t ABMServer::previousShutdownWasClean(ABMServer *this)
{
  if (qword_1ED70F7C8 != -1)
    dispatch_once(&qword_1ED70F7C8, &__block_literal_global_1);
  return _MergedGlobals_2;
}

void ___ZN9ABMServer24previousShutdownWasCleanEv_block_invoke()
{
  timespec v0;
  int v1;
  int v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  unint64_t *v10;
  unint64_t v11;
  const char *v12;
  unsigned __int8 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char __p[18];
  char v30;
  stat block;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = 17;
  strcpy(__p, "/tmp/abm.shutdown");
  v0.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v0.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&block.st_blksize = v0;
  *(timespec *)block.st_qspare = v0;
  block.st_birthtimespec = v0;
  *(timespec *)&block.st_size = v0;
  block.st_mtimespec = v0;
  block.st_ctimespec = v0;
  *(timespec *)&block.st_uid = v0;
  block.st_atimespec = v0;
  *(timespec *)&block.st_dev = v0;
  v1 = stat(__p, &block);
  v2 = v1;
  if ((v30 & 0x80000000) == 0)
  {
    if (v1)
      goto LABEL_3;
LABEL_19:
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
    }
    *(_QWORD *)&block.st_dev = MEMORY[0x1E0C809B0];
    block.st_ino = 0x40000000;
    *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_8;
    block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v28 = GetABMLogServer(void)::sLogServer;
      if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_22;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
      v14 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v28 = GetABMLogServer(void)::sLogServer;
      if (*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      {
LABEL_22:
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
      }
    }
    v17 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v28) + 4);
    if (v14)
    {
      v18 = (unint64_t *)&v14->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      block.st_dev = 136315138;
      *(_QWORD *)&block.st_mode = "abmserver";
      _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: Previous shutdown was not clean", (uint8_t *)&block, 0xCu);
    }
    _MergedGlobals_2 = 0;
    return;
  }
  operator delete(*(void **)__p);
  if (!v2)
    goto LABEL_19;
LABEL_3:
  _MergedGlobals_2 = 1;
  HIBYTE(block.st_gid) = 17;
  strcpy((char *)&block, "/tmp/abm.shutdown");
  v3 = open((const char *)&block, 513, 420);
  v4 = v3;
  if (SHIBYTE(block.st_gid) < 0)
  {
    operator delete(*(void **)&block.st_dev);
    if (v4 < 1)
      goto LABEL_33;
    do
    {
LABEL_5:
      if (!close(v4))
        return;
    }
    while (*__error() == 4);
    {
      __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
    }
    *(_QWORD *)&block.st_dev = MEMORY[0x1E0C809B0];
    block.st_ino = 0x40000000;
    *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
    *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_8;
    block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
    if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
    {
      v6 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v27 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_12;
    }
    else
    {
      dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
      v27 = GetABMLogServer(void)::sLogServer;
      if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
        goto LABEL_12;
    }
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
LABEL_12:
    v9 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v27) + 4);
    if (!v6)
      goto LABEL_16;
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        return;
    }
    else
    {
LABEL_16:
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        return;
    }
    block.st_dev = 136315394;
    *(_QWORD *)&block.st_mode = "abmserver";
    WORD2(block.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&block.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    v12 = "%s: Failed closing %s";
    goto LABEL_48;
  }
  if (v3 >= 1)
    goto LABEL_5;
LABEL_33:
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block.st_dev = MEMORY[0x1E0C809B0];
  block.st_ino = 0x40000000;
  *(_QWORD *)&block.st_uid = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  *(_QWORD *)&block.st_rdev = &__block_descriptor_tmp_13_8;
  block.st_atimespec.tv_sec = (__darwin_time_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v21 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v26 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_38;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v21 = (std::__shared_weak_count *)*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1);
    v26 = GetABMLogServer(void)::sLogServer;
    if (!*((_QWORD *)&GetABMLogServer(void)::sLogServer + 1))
      goto LABEL_38;
  }
  v22 = (unint64_t *)&v21->__shared_owners_;
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
LABEL_38:
  v9 = *((_QWORD *)GetGlobalLogger((uint64_t *)&v26) + 4);
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    block.st_dev = 136315394;
    *(_QWORD *)&block.st_mode = "abmserver";
    WORD2(block.st_ino) = 2080;
    *(__darwin_ino64_t *)((char *)&block.st_ino + 6) = (__darwin_ino64_t)"/tmp/abm.shutdown";
    v12 = "%s: Failed creating %s";
LABEL_48:
    _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&block, 0x16u);
  }
}

void sub_1BF6712E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF6712FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF671310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF671324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ABMServer::getRunLoop(ABMServer *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 208);
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "server.main");
}

uint64_t ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791AB70;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ABMServerInternal,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791AB70;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<ABMServer *,std::shared_ptr<ABMServer>::__shared_ptr_default_delete<ABMServer,ABMServer>,std::allocator<ABMServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF741130)
    return a1 + 24;
  if (((v3 & 0x80000001BF741130 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF741130))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF741130 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *std::shared_ptr<ABMServerInternal>::shared_ptr[abi:ne180100]<ABMServerInternal,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791AC00;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF67162C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF67164C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ABMServerInternal *,std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal *)#1},std::allocator<ABMServerInternal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_"
                     "ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3_"
                                "_110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_9XpcServerEE15make_shared_ptrI17ABMServerInternalEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ABMServerInternal> ctu::SharedSynchronizable<ctu::XpcServer>::make_shared_ptr<ABMServerInternal>(ABMServerInternal*)::{lambda(ABMServerInternal*)#1}::operator() const(ABMServerInternal*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791AC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Registry>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791AC50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<Registry>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (a1)
  {
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(*a1);
    std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::destroy(a1[1]);
    v2 = (std::__shared_weak_count *)a1[6];
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    xpc_release((xpc_object_t)a1[4]);
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableINS1_9XpcServerEE15execute_wrappedIZZZN17ABMServerInternal4initENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN3abm9OverridesEEUb_EUb0_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISJ_NS7_14default_deleteISJ_EEEEENUlPvE_8__invokeESS_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void **v4;
  __int128 v5;
  ctu *v6;
  const void *v7;
  void *v8;
  const void *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  ctu *v15;
  std::string v16;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 8);
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v16.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)a1 + 24);
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  }
  v6 = (ctu *)v2[4];
  v15 = v6;
  if (v6)
    CFRetain(v6);
  v7 = (const void *)v2[5];
  if (v7)
    v8 = _Block_copy(v7);
  else
    v8 = 0;
  v14 = v8;
  ABMServerInternal::broadcast_sync(v3, (uint64_t)&v16, &v15, &v14);
  if (v8)
    _Block_release(v8);
  if (v6)
    CFRelease(v6);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    v9 = (const void *)v2[5];
    if (!v9)
      goto LABEL_18;
    goto LABEL_17;
  }
  v9 = (const void *)v2[5];
  if (v9)
LABEL_17:
    _Block_release(v9);
LABEL_18:
  v10 = (const void *)v2[4];
  if (v10)
    CFRelease(v10);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v4);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF671988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  const void *v20;
  const void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v20 = *(const void **)(v17 + 40);
  if (v20)
    _Block_release(v20);
  v21 = *(const void **)(v17 + 32);
  if (v21)
    CFRelease(v21);
  if (*(char *)(v17 + 31) < 0)
    operator delete(*v18);
  operator delete((void *)v17);
  v22 = (std::__shared_weak_count *)v16[2];
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIKN3ctu9XpcServerEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::__shared_weak_count_vtbl **sys::UIObserver::create_default_global@<X0>(uint64_t a1@<X8>)
{
  sys::UIObserver *v3;

  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v3 = (sys::UIObserver *)operator new(0x40uLL);
  sys::UIObserver::UIObserver(v3);
  return std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_1BF671B30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

sys::UIObserver *sys::UIObserver::UIObserver(sys::UIObserver *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t *v4;

  v2 = dispatch_queue_create("sys::UIObserver", 0);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v2;
  if (v2)
  {
    v3 = v2;
    dispatch_retain(v2);
    *((_QWORD *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  *((_QWORD *)this + 4) = &off_1E791AE28;
  v4 = (uint64_t *)operator new(0x28uLL);
  boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(v4);
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>((_QWORD *)this + 5, (uint64_t)v4);
  *((_QWORD *)this + 7) = 0xFFFFFFFF00000000;
  return this;
}

void sub_1BF671BE8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  operator delete(v2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

void sub_1BF671C04(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v1);
  _Unwind_Resume(a1);
}

uint64_t sys::UIObserver::handleDisplayLockedChange_sync(uint64_t this)
{
  uint64_t v1;
  char v2;

  if (*(_DWORD *)(this + 60) != -1)
  {
    v1 = this;
    v2 = SBSGetScreenLockStatus() != 0;
    return boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v1 + 40), v2);
  }
  return this;
}

void sys::UIObserver::registerForScreenLockedNotification_sync(sys::UIObserver *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[5];
  std::__shared_weak_count *v12;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke;
  v11[3] = &__block_descriptor_tmp_22;
  v11[4] = v3;
  v12 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  notify_register_dispatch("com.apple.springboard.lockstate", (int *)this + 15, *((dispatch_queue_t *)this + 2), v11);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF671D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;

  if (a14)
    std::__shared_weak_count::__release_weak(a14);
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver40registerForScreenLockedNotification_syncEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  char v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 32);
      if (v5 && *(_DWORD *)(v5 + 60) != -1)
      {
        v6 = SBSGetScreenLockStatus() != 0;
        boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v5 + 40), v6);
      }
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BF671E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t sys::UIObserver::unregisterForScreenLockedNotification_sync(sys::UIObserver *this)
{
  uint64_t result;

  result = *((unsigned int *)this + 15);
  if ((_DWORD)result != -1)
  {
    result = notify_cancel(result);
    *((_DWORD *)this + 15) = -1;
  }
  return result;
}

void sys::UIObserver::observe(sys::UIObserver *this@<X0>, char a2@<W1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count_vtbl *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  void (__cdecl *v19)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[6];
  std::__shared_weak_count *v27;
  char v28;
  _QWORD aBlock[6];
  std::__shared_weak_count *v30;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v4 || (v7 = *(_QWORD *)this, (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (std::__shared_weak_count_vtbl *)0xAAAAAAAAAAAAAAAALL;
  v14 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v15 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN3sys10UIObserver7observeEb_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_6_4;
  aBlock[4] = this;
  aBlock[5] = v7;
  v30 = v9;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(aBlock);
  v18 = v17;
  if (v17)
    v19 = (void (__cdecl *)(std::__shared_weak_count *__hidden))_Block_copy(v17);
  else
    v19 = 0;
  v14->~__shared_weak_count = v19;
  *a3 = v14;
  v20 = (std::__shared_weak_count *)operator new(0x20uLL);
  v20->__shared_owners_ = 0;
  v21 = (unint64_t *)&v20->__shared_owners_;
  v20->__vftable = (std::__shared_weak_count_vtbl *)off_1E791B070;
  v20->__shared_weak_owners_ = 0;
  v20[1].__vftable = v14;
  a3[1] = (std::__shared_weak_count_vtbl *)v20;
  if (v18)
    _Block_release(v18);
  v26[0] = v15;
  v26[1] = 1174405120;
  v26[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_7;
  v26[3] = &__block_descriptor_tmp_8_2;
  v26[4] = this;
  v26[5] = v14;
  v27 = v20;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v28 = a2;
  ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped((uint64_t *)this, (uint64_t)v26);
  v23 = v27;
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_1BF6720B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  const void **v25;
  const void *v26;
  uint64_t v27;

  (*(void (**)(uint64_t))(v27 + 16))(v27);
  if (*v25)
    _Block_release(*v25);
  operator delete(v25);
  if (v26)
    _Block_release(v26);
  if (a24)
  {
    std::__shared_weak_count::__release_weak(a24);
    std::__shared_weak_count::__release_weak(v24);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v9[5];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = (uint64_t *)a1[5];
      if (v6)
      {
        v9[0] = MEMORY[0x1E0C809B0];
        v9[1] = 0x40000000;
        v9[2] = ___ZN3sys10UIObserver7observeEb_block_invoke_2;
        v9[3] = &__block_descriptor_tmp_5_4;
        v9[4] = v3;
        ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(v6, (uint64_t)v9);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

uint64_t ___ZN3sys10UIObserver7observeEb_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)(result + 32);
  v2 = *(_DWORD *)(v1 + 56) - 1;
  *(_DWORD *)(v1 + 56) = v2;
  if (!v2)
  {
    result = *(unsigned int *)(v1 + 60);
    if ((_DWORD)result != -1)
    {
      result = notify_cancel(result);
      *(_DWORD *)(v1 + 60) = -1;
    }
  }
  return result;
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrIN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN3sys10UIObserver7observeEb_block_invoke_7(uint64_t a1)
{
  uint64_t v2;
  int v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_DWORD *)(v2 + 56);
  *(_DWORD *)(v2 + 56) = v3 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a1 + 56))
      return;
  }
  else
  {
    sys::UIObserver::registerForScreenLockedNotification_sync((sys::UIObserver *)v2);
    if (!*(_BYTE *)(a1 + 56))
      return;
  }
  if (*(_DWORD *)(v2 + 60) != -1)
  {
    v4 = SBSGetScreenLockStatus() != 0;
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(*(uint64_t ****)(v2 + 40), v4);
  }
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__110shared_ptrIN3sys10UIObserver6HandleEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

std::__shared_weak_count_vtbl **std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *__p;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791ADD8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  __p = 0;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (!v6)
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    do
LABEL_12:
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_15;
  }
  if (v6->__shared_owners_ == -1)
  {
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_12;
  }
LABEL_15:
  v14 = __p;
  __p = 0;
  if (v14)
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&__p, v14);
  return a1;
}

void sub_1BF67248C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;

  a10 = 0;
  if (v10)
    std::default_delete<sys::UIObserver>::operator()[abi:ne180100]((int)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<sys::UIObserver>::operator()[abi:ne180100](a1 + 24, *(_QWORD **)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver *,std::shared_ptr<sys::UIObserver>::__shared_ptr_default_delete<sys::UIObserver,sys::UIObserver>,std::allocator<sys::UIObserver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF74147ALL)
    return a1 + 24;
  if (((v3 & 0x80000001BF74147ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF74147ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF74147ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::default_delete<sys::UIObserver>::operator()[abi:ne180100](int a1, _QWORD *__p)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;

  if (__p)
  {
    __p[4] = &off_1E791AE28;
    v3 = (unsigned int *)__p[6];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    v10 = __p[3];
    if (v10)
      dispatch_release(v10);
    v11 = __p[2];
    if (v11)
      dispatch_release(v11);
    v12 = (std::__shared_weak_count *)__p[1];
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
    operator delete(__p);
  }
}

_QWORD *boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *a1 = &off_1E791AE28;
  v2 = (unsigned int *)a1[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::~signal(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  *__p = &off_1E791AE28;
  v2 = (unsigned int *)__p[2];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  operator delete(__p);
}

uint64_t boost::signals2::signal<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::lock_pimpl@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(result + 16);
  *a2 = *(_QWORD *)(result + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  a1[1] = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = off_1E791AFA8;
  v4[2] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF672790(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1BF672860(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  __cxa_end_catch();
  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::signal_impl(uint64_t *a1)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  pthread_mutex_t *v9;
  _QWORD *v10;
  uint64_t *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD **v23;
  _QWORD *v24[4];

  v2 = (uint64_t *)operator new(0x20uLL);
  v20 = (uint64_t)&v20;
  v21 = &v20;
  v24[0] = 0;
  v24[1] = 0;
  v22 = 0;
  v23 = v24;
  v3 = operator new(0x40uLL);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v3, (uint64_t)&v20);
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v2, (uint64_t)v3);
  v4 = operator new(1uLL);
  v2[2] = (uint64_t)v4;
  v2[3] = 0;
  v5 = operator new(0x18uLL);
  v5[1] = 0x100000001;
  *v5 = off_1E791AEE8;
  v5[2] = v4;
  v2[3] = (uint64_t)v5;
  boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(a1, (uint64_t)v2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v23, v24[0]);
  if (v22)
  {
    v6 = v20;
    v7 = v21;
    v8 = *v21;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v20 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v22 = 0;
    if (v7 != &v20)
    {
      do
      {
        v12 = (uint64_t *)v7[1];
        v13 = (unsigned int *)v7[3];
        if (v13)
        {
          v14 = v13 + 2;
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
            v17 = v13 + 3;
            do
            {
              v18 = __ldaxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
              (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
          }
        }
        operator delete(v7);
        v7 = v12;
      }
      while (v12 != &v20);
    }
  }
  a1[2] = *(_QWORD *)*a1;
  v9 = (pthread_mutex_t *)operator new(0x40uLL);
  pthread_mutex_init(v9, 0);
  a1[3] = (uint64_t)v9;
  a1[4] = 0;
  v10 = operator new(0x18uLL);
  v10[1] = 0x100000001;
  *v10 = off_1E791AF48;
  v10[2] = v9;
  a1[4] = (uint64_t)v10;
  return a1;
}

void sub_1BF672A80(void *a1)
{
  pthread_mutex_t *v1;

  __cxa_begin_catch(a1);
  pthread_mutex_destroy(v1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BF672A98()
{
  __break(1u);
}

void sub_1BF672B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  __cxa_end_catch();
  v11 = (unsigned int *)v9[3];
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 16))(v11);
      v15 = v11 + 3;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11);
    }
  }
  boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr((uint64_t)v9);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1BF672BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  void *v11;

  v11 = v10;
  operator delete(v11);
  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1BF672C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t *boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~grouped_list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(a1 + 3), (_QWORD *)a1[4]);
  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
    operator delete(v1);
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::optional_last_value<void>>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::mutex>::dispose(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
  {
    pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 16));
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::mutex>::get_untyped_deleter()
{
  return 0;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[4];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::operator()(uint64_t ***a1, char a2)
{
  __int128 v3;
  pthread_mutex_t *v4;
  uint64_t **v5;
  unsigned int v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  char *v20;
  char *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  uint64_t **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD v49[4];
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  uint64_t ***v53;
  uint64_t v54;
  uint64_t **v55;
  unsigned int *v56;
  char v57;
  __int128 v58;
  __int128 v59;
  std::runtime_error v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  void *__p[2];
  pthread_mutex_t *v72[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v57 = a2;
  v55 = 0;
  v56 = 0;
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = v3;
  v70 = v3;
  v67 = v3;
  v68 = v3;
  v65 = v3;
  v66 = v3;
  v63 = v3;
  v64 = v3;
  v61 = v3;
  v62 = v3;
  v4 = (pthread_mutex_t *)a1[3];
  __p[0] = (void *)10;
  __p[1] = &v61;
  v72[0] = 0;
  v72[1] = v4;
  pthread_mutex_lock(v4);
  v5 = a1[1];
  if (!v5)
  {
    v7 = *a1;
    goto LABEL_15;
  }
  v6 = atomic_load((unsigned int *)v5 + 2);
  v7 = *a1;
  if (v6 == 1)
  {
    v8 = (uint64_t)a1[2];
    if ((uint64_t *)v8 == *v7)
    {
      v8 = (*v7)[1];
      *(_QWORD *)&v58 = v8;
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
      {
LABEL_11:
        a1[2] = (uint64_t **)v8;
        goto LABEL_12;
      }
    }
    else
    {
      *(_QWORD *)&v58 = a1[2];
      v9 = *v7;
      if (*v7 == (uint64_t *)v8)
        goto LABEL_11;
    }
    v10 = *(_QWORD *)(v8 + 16);
    if (*(_BYTE *)(v10 + 24))
    {
      v8 = *(_QWORD *)(v8 + 8);
    }
    else
    {
      v8 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v9, (int *)(v10 + 64), (uint64_t **)&v58);
      v7 = *a1;
    }
    goto LABEL_11;
  }
LABEL_12:
  v5 = a1[1];
  if (v5)
  {
    v11 = (unsigned int *)(v5 + 1);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
LABEL_15:
  v13 = v56;
  v55 = v7;
  v56 = (unsigned int *)v5;
  if (v13)
  {
    v14 = v13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
      v17 = v13 + 3;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  pthread_mutex_unlock(v72[1]);
  v20 = (char *)__p[1];
  if (__p[1])
  {
    if ((uint64_t)&v72[0][-1].__opaque[55] >= 0)
    {
      v21 = (char *)__p[1] + 16 * (uint64_t)v72[0];
      do
      {
        v22 = (unsigned int *)*((_QWORD *)v21 - 1);
        if (v22)
        {
          v23 = v22 + 2;
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 16))(v22);
            v26 = v22 + 3;
            do
            {
              v27 = __ldaxr(v26);
              v28 = v27 - 1;
            }
            while (__stlxr(v28, v26));
            if (!v28)
              (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 24))(v22);
          }
        }
        v21 -= 16;
      }
      while (v21 > v20);
    }
    if (__p[0] >= (void *)0xB)
      operator delete(__p[1]);
  }
  *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v74 = v29;
  v75 = v29;
  *(_OWORD *)v72 = v29;
  v73 = v29;
  v70 = v29;
  *(_OWORD *)__p = v29;
  v68 = v29;
  v69 = v29;
  v66 = v29;
  v67 = v29;
  v64 = v29;
  v65 = v29;
  v62 = v29;
  v63 = v29;
  v61 = v29;
  LOBYTE(v61) = 0;
  v76 = 0xAAAAAAAAAAAAAAAALL;
  v77 = 10;
  v78 = (char *)&v61 + 8;
  v79 = 0;
  v81 = 0;
  v82 = 0;
  v80 = &v57;
  v30 = v55;
  v31 = (uint64_t)*v55;
  v52 = &v61;
  v53 = a1;
  v54 = v31;
  *(_QWORD *)&v50 = *(_QWORD *)(v31 + 8);
  *((_QWORD *)&v50 + 1) = v31;
  *(_QWORD *)&v51 = &v61;
  *((_QWORD *)&v51 + 1) = v31;
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v50);
  v49[0] = *v30;
  v49[1] = v49[0];
  v49[2] = &v61;
  v49[3] = v49[0];
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(v49);
  v58 = v50;
  v59 = v51;
  v32 = v49[0];
  v33 = v50;
  if ((_QWORD)v50 == v49[0])
  {
    if (HIDWORD(v81) <= v81)
      goto LABEL_57;
LABEL_56:
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections((uint64_t)v53, v54);
    goto LABEL_57;
  }
  v34 = (_BYTE *)v59;
  if (!*(_BYTE *)v59)
  {
    v35 = *(_QWORD *)(*(_QWORD *)(v50 + 16) + 32);
    v36 = *(_QWORD *)(v35 + 24);
    if (!v36)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t, _QWORD))((v36 & 0xFFFFFFFFFFFFFFFELL) + 8))(v35 + 32, **(unsigned __int8 **)(v59 + 272));
    if (!*v34)
      *v34 = 1;
  }
  *(_QWORD *)&v58 = *(_QWORD *)(v33 + 8);
  boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
  v37 = v59;
  if (*(_BYTE *)v59)
    *(_BYTE *)v59 = 0;
  for (i = v58; (_QWORD)v58 != v32; i = v58)
  {
    v39 = *(_QWORD *)(*(_QWORD *)(i + 16) + 32);
    v40 = *(_QWORD *)(v39 + 24);
    if (!v40)
    {
      std::runtime_error::runtime_error(&v60, "call to empty boost::function");
      v60.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
      boost::throw_exception<boost::bad_function_call>(&v60);
    }
    (*(void (**)(uint64_t, _QWORD))((v40 & 0xFFFFFFFFFFFFFFFELL) + 8))(v39 + 32, **(unsigned __int8 **)(v37 + 272));
    if (!*(_BYTE *)v37)
      *(_BYTE *)v37 = 1;
    *(_QWORD *)&v58 = *(_QWORD *)(i + 8);
    boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(&v58);
    v37 = v59;
    if (*(_BYTE *)v59)
      *(_BYTE *)v59 = 0;
  }
  if (*((_DWORD *)v52 + 71) > *((_DWORD *)v52 + 70))
    goto LABEL_56;
LABEL_57:
  result = boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v61);
  v42 = v56;
  if (v56)
  {
    v43 = v56 + 2;
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v42 + 16))(v42);
      v46 = v42 + 3;
      do
      {
        v47 = __ldaxr(v46);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, v46));
      if (!v48)
        return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v42 + 24))(v42);
    }
  }
  return result;
}

void sub_1BF6734DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&a29);
  JUMPOUT(0x1BF673650);
}

void sub_1BF6734EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::runtime_error a27)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::runtime_error::~runtime_error(&a27);
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v29);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v31);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v30);
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  boost::signals2::detail::connection_body_base::disconnect(*(boost::signals2::detail::connection_body_base **)(a23 + 16));
  __cxa_rethrow();
}

void sub_1BF67354C(_Unwind_Exception *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __cxa_end_catch();
  if (a2 != 2)
  {
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(&v4);
    boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache((uint64_t)&v6);
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::~shared_ptr((uint64_t)&v5);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF67351CLL);
}

void sub_1BF673584(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,unint64_t a49,char *__p,uint64_t a51)
{
  char *v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;

  if (__p)
  {
    if (a51 - 1 >= 0)
    {
      v51 = &__p[16 * a51];
      do
      {
        v52 = (unsigned int *)*((_QWORD *)v51 - 1);
        if (v52)
        {
          v53 = v52 + 2;
          do
          {
            v54 = __ldaxr(v53);
            v55 = v54 - 1;
          }
          while (__stlxr(v55, v53));
          if (!v55)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 16))(v52);
            v56 = v52 + 3;
            do
            {
              v57 = __ldaxr(v56);
              v58 = v57 - 1;
            }
            while (__stlxr(v58, v56));
            if (!v58)
              (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 24))(v52);
          }
        }
        v51 -= 16;
      }
      while (v51 > __p);
    }
    if (a49 >= 0xB)
      operator delete(__p);
  }
  JUMPOUT(0x1BF673650);
}

void sub_1BF67362C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1BF673658);
}

uint64_t *boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_janitor::~invocation_janitor(uint64_t *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
    boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(a1[1], a1[2]);
  return a1;
}

void boost::signals2::detail::slot_call_iterator_t<boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::lock_next_callable(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int i;
  unsigned int v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  int *v51;
  char v52;
  unsigned int *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int *v62;
  unsigned int v63;
  uint64_t v64;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  unint64_t v85;
  unint64_t v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  _QWORD v107[6];

  v107[3] = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1 == a1[3])
    return;
  if (v1 == a1[1])
  {
LABEL_126:
    v80 = a1[3];
    if (v80 != v1)
    {
      *(_QWORD *)&v81 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v81 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v103 = v81;
      v104 = v81;
      v101 = v81;
      v102 = v81;
      v99 = v81;
      v100 = v81;
      v97 = v81;
      v98 = v81;
      v95 = v81;
      v96 = v81;
      v82 = *(_QWORD *)(v80 + 16);
      *(_QWORD *)&v105 = 10;
      *((_QWORD *)&v105 + 1) = &v95;
      *(_QWORD *)&v106 = 0;
      *((_QWORD *)&v106 + 1) = v82;
      (*(void (**)(uint64_t))(*(_QWORD *)v82 + 24))(v82);
      v83 = a1[2];
      a1[3] = a1[1];
      v84 = *(_DWORD **)(v83 + 288);
      if (v84)
        boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v84, &v95);
      *(_QWORD *)(v83 + 288) = 0;
      (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 32))(*((_QWORD *)&v106 + 1));
      v85 = *((_QWORD *)&v105 + 1);
      if (*((_QWORD *)&v105 + 1))
      {
        if ((uint64_t)v106 - 1 >= 0)
        {
          v86 = *((_QWORD *)&v105 + 1) + 16 * v106;
          do
          {
            v87 = *(unsigned int **)(v86 - 8);
            if (v87)
            {
              v88 = v87 + 2;
              do
              {
                v89 = __ldaxr(v88);
                v90 = v89 - 1;
              }
              while (__stlxr(v90, v88));
              if (!v90)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 16))(v87);
                v91 = v87 + 3;
                do
                {
                  v92 = __ldaxr(v91);
                  v93 = v92 - 1;
                }
                while (__stlxr(v93, v91));
                if (!v93)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v87 + 24))(v87);
              }
            }
            v86 -= 16;
          }
          while (v86 > v85);
        }
        if ((unint64_t)v105 >= 0xB)
          operator delete(*((void **)&v105 + 1));
      }
    }
    return;
  }
  while (1)
  {
    v3 = a1[2];
    v4 = *(_QWORD *)(v3 + 264);
    if (v4)
    {
      if (v4 - 1 < 0)
      {
        v17 = *(_QWORD *)(v3 + 264);
      }
      else
      {
        v5 = *(_QWORD *)(v3 + 256);
        v6 = v5 + 24 * v4;
        v7 = v6;
        do
        {
          v8 = *(_DWORD *)(v7 - 24);
          v7 -= 24;
          if (v8 == v8 >> 31)
          {
            v9 = *(unsigned int **)(v6 - 8);
            if (v9)
            {
              v10 = v9 + 2;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
                v13 = v9 + 3;
                do
                {
                  v14 = __ldaxr(v13);
                  v15 = v14 - 1;
                }
                while (__stlxr(v15, v13));
                if (!v15)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v6 - 16);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
          }
          v6 = v7;
        }
        while (v7 > v5);
        v17 = *(_QWORD *)(v3 + 264);
        v1 = *a1;
      }
      *(_QWORD *)(v3 + 264) = v17 - v4;
    }
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v105 = v18;
    v106 = v18;
    v103 = v18;
    v104 = v18;
    v101 = v18;
    v102 = v18;
    v99 = v18;
    v100 = v18;
    v97 = v18;
    v98 = v18;
    v95 = v18;
    v96 = v18;
    v19 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)&v105 = 10;
    *((_QWORD *)&v105 + 1) = &v95;
    *(_QWORD *)&v106 = 0;
    *((_QWORD *)&v106 + 1) = v19;
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    v20 = *a1;
    v21 = *(_QWORD *)(*a1 + 16);
    v22 = a1[2];
    v23 = *(uint64_t **)(v21 + 32);
    if (v23)
    {
      v24 = *v23;
      if (*v23 != v23[1])
      {
        while (1)
        {
          memset(v107, 170, 24);
          v25 = *(_DWORD *)v24 ^ (*(int *)v24 >> 31);
          if (v25 == 2)
          {
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v24 + 8) + 16))(&v94);
            v107[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 16))(v94);
            LODWORD(v107[0]) = 1;
            if (v94)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
              if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
                goto LABEL_68;
LABEL_39:
              v30 = *(_QWORD *)(v24 + 16);
              if (!v30)
                goto LABEL_69;
              if (!atomic_load((unsigned int *)(v30 + 8)))
                goto LABEL_69;
              goto LABEL_41;
            }
LABEL_38:
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_68;
            goto LABEL_39;
          }
          if (v25 != 1)
          {
            LODWORD(v107[0]) = 0;
            v107[1] = 0;
            v107[2] = 0;
            goto LABEL_38;
          }
          v26 = *(_QWORD *)(v24 + 16);
          if (!v26)
          {
LABEL_67:
            v107[1] = 0;
            v107[2] = v26;
            LODWORD(v107[0]) = 0;
            if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) == 2)
              goto LABEL_68;
            goto LABEL_39;
          }
          v27 = (unsigned int *)(v26 + 8);
          for (i = *(_DWORD *)(v26 + 8); ; i = v29)
          {
            if (!i)
            {
              v26 = 0;
              goto LABEL_67;
            }
            v29 = __ldxr(v27);
            if (v29 != i)
            {
              __clrex();
              continue;
            }
            if (!__stxr(i + 1, v27))
              break;
          }
          v107[1] = *(_QWORD *)(v24 + 8);
          v107[2] = v26;
          LODWORD(v107[0]) = 0;
          if ((*(_DWORD *)v24 ^ (*(int *)v24 >> 31)) != 2)
            goto LABEL_39;
LABEL_68:
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 8) + 24))(*(_QWORD *)(v24 + 8)))
          {
LABEL_69:
            if (*(_BYTE *)(v21 + 24))
            {
              *(_BYTE *)(v21 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>((_DWORD *)v21, &v95);
            }
            v52 = 1;
            if (LODWORD(v107[0]) == SLODWORD(v107[0]) >> 31)
              goto LABEL_72;
LABEL_89:
            if (v107[1])
              (*(void (**)(_QWORD))(*(_QWORD *)v107[1] + 8))(v107[1]);
            goto LABEL_91;
          }
LABEL_41:
          v32 = *(_QWORD *)(v22 + 264);
          if (v32 == *(_QWORD *)(v22 + 248))
          {
            if (v32 == -1)
            {
              v34 = *(_QWORD **)(v22 + 256);
              v50 = -1;
            }
            else
            {
              if (4 * v32 <= (unint64_t)(v32 + 1))
                v33 = v32 + 1;
              else
                v33 = 4 * v32;
              v34 = (_QWORD *)(v22 + 8);
              if (v33 >= 0xB)
              {
                if (v33 >= 0xAAAAAAAAAAAAAABLL)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v34 = operator new(24 * v33);
              }
              if (v32)
              {
                v35 = *(_QWORD *)(v22 + 256);
                v36 = v35 + 24 * v32;
                v37 = v34;
                do
                {
                  v39 = *(_QWORD *)(v35 + 8);
                  if (*(_DWORD *)v35 == *(int *)v35 >> 31)
                  {
                    v37[1] = v39;
                    v40 = *(_QWORD *)(v35 + 16);
                    v37[2] = v40;
                    if (v40)
                    {
                      v41 = (unsigned int *)(v40 + 8);
                      do
                        v42 = __ldxr(v41);
                      while (__stxr(v42 + 1, v41));
                    }
                  }
                  else
                  {
                    v37[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
                  }
                  v38 = *(_DWORD *)v35;
                  v35 += 24;
                  *(_DWORD *)v37 = v38 ^ (v38 >> 31);
                  v37 += 3;
                }
                while (v35 != v36);
              }
              boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(v22 + 8));
              *(_QWORD *)(v22 + 248) = v33;
              *(_QWORD *)(v22 + 256) = v34;
              v50 = *(_QWORD *)(v22 + 264);
            }
            v60 = &v34[3 * v50 + 1];
            v45 = v107[0];
            v46 = SLODWORD(v107[0]) >> 31;
            if (SLODWORD(v107[0]) >> 31 == LODWORD(v107[0]))
            {
              *v60 = v107[1];
              v61 = v107[2];
              v34[3 * v50 + 2] = v107[2];
              if (v61)
              {
                v62 = (unsigned int *)(v61 + 8);
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }
            }
            else
            {
              *v60 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v107[1] + 16))(v107[1]);
            }
            v51 = (int *)&v34[3 * v50];
          }
          else
          {
            v43 = *(_QWORD *)(v22 + 256);
            v44 = (_QWORD *)(v43 + 24 * v32 + 8);
            v45 = v107[0];
            v46 = SLODWORD(v107[0]) >> 31;
            if (SLODWORD(v107[0]) >> 31 == LODWORD(v107[0]))
            {
              *v44 = v107[1];
              v47 = v107[2];
              *(_QWORD *)(v43 + 24 * v32 + 16) = v107[2];
              if (v47)
              {
                v48 = (unsigned int *)(v47 + 8);
                do
                  v49 = __ldxr(v48);
                while (__stxr(v49 + 1, v48));
              }
            }
            else
            {
              *v44 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v107[1] + 16))(v107[1]);
            }
            v51 = (int *)(v43 + 24 * v32);
          }
          v52 = 0;
          *v51 = v45 ^ v46;
          ++*(_QWORD *)(v22 + 264);
          if (LODWORD(v107[0]) != SLODWORD(v107[0]) >> 31)
            goto LABEL_89;
LABEL_72:
          v53 = (unsigned int *)v107[2];
          if (v107[2])
          {
            v54 = (unsigned int *)(v107[2] + 8);
            do
            {
              v55 = __ldaxr(v54);
              v56 = v55 - 1;
            }
            while (__stlxr(v56, v54));
            if (!v56)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 16))(v53);
              v57 = v53 + 3;
              do
              {
                v58 = __ldaxr(v57);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, v57));
              if (!v59)
                (*(void (**)(unsigned int *))(*(_QWORD *)v53 + 24))(v53);
            }
          }
LABEL_91:
          if ((v52 & 1) == 0)
          {
            v24 += 24;
            if (v24 != *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8))
              continue;
          }
          v20 = *a1;
          v21 = *(_QWORD *)(*a1 + 16);
          v22 = a1[2];
          break;
        }
      }
    }
    if (*(_BYTE *)(v21 + 24))
    {
      ++*(_DWORD *)(v22 + 280);
      v64 = *(_QWORD *)(v21 + 16);
      if (v64)
      {
        if (atomic_load((unsigned int *)(v64 + 8)))
        {
          v66 = 1;
          goto LABEL_108;
        }
        v22 = a1[2];
        v20 = *a1;
      }
      a1[3] = v20;
      if (a1[1] == v20)
      {
        v69 = *(_DWORD **)(v22 + 288);
        if (v69)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v69, &v95);
        v66 = 0;
        *(_QWORD *)(v22 + 288) = 0;
      }
      else
      {
        v67 = *(_QWORD *)(v20 + 16);
        v68 = *(_DWORD **)(v22 + 288);
        if (v68)
          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(v68, &v95);
        *(_QWORD *)(v22 + 288) = v67;
        v66 = 0;
        if (v67)
          ++*(_DWORD *)(v67 + 28);
      }
    }
    else
    {
      ++*(_DWORD *)(v22 + 284);
      v66 = 1;
    }
LABEL_108:
    (*(void (**)(_QWORD))(**((_QWORD **)&v106 + 1) + 32))(*((_QWORD *)&v106 + 1));
    v70 = *((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      if ((uint64_t)v106 - 1 >= 0)
      {
        v71 = *((_QWORD *)&v105 + 1) + 16 * v106;
        do
        {
          v72 = *(unsigned int **)(v71 - 8);
          if (v72)
          {
            v73 = v72 + 2;
            do
            {
              v74 = __ldaxr(v73);
              v75 = v74 - 1;
            }
            while (__stlxr(v75, v73));
            if (!v75)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 16))(v72);
              v76 = v72 + 3;
              do
              {
                v77 = __ldaxr(v76);
                v78 = v77 - 1;
              }
              while (__stlxr(v78, v76));
              if (!v78)
                (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 24))(v72);
            }
          }
          v71 -= 16;
        }
        while (v71 > v70);
      }
      if ((unint64_t)v105 >= 0xB)
        operator delete(*((void **)&v105 + 1));
    }
    v1 = *a1;
    v79 = a1[1];
    if (!v66)
      break;
    v1 = *(_QWORD *)(v1 + 8);
    *a1 = v1;
    if (v1 == v79)
    {
      v1 = v79;
      goto LABEL_126;
    }
  }
  if (v1 == v79)
    goto LABEL_126;
}

void sub_1BF673EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF673F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33,char *__p,uint64_t a35)
{
  char *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;

  if (__p)
  {
    if (a35 - 1 >= 0)
    {
      v36 = &__p[16 * a35];
      do
      {
        v37 = (unsigned int *)*((_QWORD *)v36 - 1);
        if (v37)
        {
          v38 = v37 + 2;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
            v41 = v37 + 3;
            do
            {
              v42 = __ldaxr(v41);
              v43 = v42 - 1;
            }
            while (__stlxr(v43, v41));
            if (!v43)
              (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
          }
        }
        v36 -= 16;
      }
      while (v36 > __p);
    }
    if (a33 >= 0xB)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x1BF6741A0);
}

void sub_1BF674060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a5 + 8))(a5);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF6740ACLL);
}

void sub_1BF674088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF6740A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(v5 - 128);
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF6740C4(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    __cxa_begin_catch(a1);
    if (v3 != v2)
    {
      v4 = v2;
      do
      {
        if (*(_DWORD *)v4 == *(int *)v4 >> 31)
        {
          v5 = *(unsigned int **)(v4 + 16);
          if (v5)
          {
            v6 = v5 + 2;
            do
            {
              v7 = __ldaxr(v6);
              v8 = v7 - 1;
            }
            while (__stlxr(v8, v6));
            if (!v8)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
              v9 = v5 + 3;
              do
              {
                v10 = __ldaxr(v9);
                v11 = v10 - 1;
              }
              while (__stlxr(v11, v9));
              if (!v11)
                (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
            }
          }
        }
        else
        {
          v12 = *(_QWORD *)(v4 + 8);
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        v4 += 24;
      }
      while (v4 != v3);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF6741A0);
}

void sub_1BF67417C()
{
  void *v0;
  unint64_t v1;

  __cxa_end_catch();
  if (v1 >= 0xB)
    operator delete(v0);
  JUMPOUT(0x1BF6740A4);
}

void sub_1BF674198(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  v1 = a1[31];
  if (v1)
  {
    v3 = a1[32];
    if (v3 - 1 >= 0)
    {
      v4 = v1 + 24 * v3;
      v5 = v4;
      do
      {
        v6 = *(_DWORD *)(v5 - 24);
        v5 -= 24;
        if (v6 == v6 >> 31)
        {
          v7 = *(unsigned int **)(v4 - 8);
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
        }
        else
        {
          v14 = *(_QWORD *)(v4 - 16);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        v4 = v5;
      }
      while (v5 > v1);
    }
    if (a1[30] >= 0xBuLL)
      operator delete((void *)a1[31]);
  }
}

void boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::force_cleanup_connections(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  _OWORD v37[10];
  unint64_t v38;
  void *__p;
  uint64_t v40;
  pthread_mutex_t *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[8] = v4;
  v37[9] = v4;
  v37[6] = v4;
  v37[7] = v4;
  v37[4] = v4;
  v37[5] = v4;
  v37[2] = v4;
  v37[3] = v4;
  v37[0] = v4;
  v37[1] = v4;
  v5 = *(pthread_mutex_t **)(a1 + 24);
  v38 = 10;
  __p = v37;
  v40 = 0;
  v41 = v5;
  pthread_mutex_lock(v5);
  if (**(_QWORD **)a1 == a2)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (!v6 || (v7 = atomic_load((unsigned int *)(v6 + 8)), v7 != 1))
    {
      v8 = (uint64_t *)operator new(0x20uLL);
      v9 = *(uint64_t **)a1;
      v10 = **(_QWORD **)a1;
      v11 = operator new(0x40uLL);
      boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v11, v10);
      boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v8, (uint64_t)v11);
      v8[2] = v9[2];
      v12 = v9[3];
      v8[3] = v12;
      if (v12)
      {
        v13 = (unsigned int *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v36, (uint64_t)v8);
      v15 = *(uint64_t **)a1;
      v16 = *(unsigned int **)(a1 + 8);
      *(_OWORD *)a1 = v36;
      *(_QWORD *)&v36 = v15;
      *((_QWORD *)&v36 + 1) = v16;
      if (v16)
      {
        v17 = v16 + 2;
        do
        {
          v18 = __ldaxr(v17);
          v19 = v18 - 1;
        }
        while (__stlxr(v19, v17));
        if (!v19)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 16))(v16);
          v20 = v16 + 3;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
            (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
    }
    v23 = *(uint64_t ***)a1;
    v24 = **(uint64_t ***)a1;
    v25 = v24[1];
    *(_QWORD *)&v36 = v25;
    if (v24 != (uint64_t *)v25)
    {
      do
      {
        while (1)
        {
          v26 = *(_QWORD *)(v25 + 16);
          if (!*(_BYTE *)(v26 + 24))
            break;
          v25 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)&v36 = v25;
          v24 = *v23;
          if ((uint64_t *)v25 == *v23)
            goto LABEL_20;
        }
        v25 = boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(v24, (int *)(v26 + 64), (uint64_t **)&v36);
        v23 = *(uint64_t ***)a1;
        *(_QWORD *)&v36 = v25;
        v24 = *v23;
      }
      while ((uint64_t *)v25 != *v23);
    }
LABEL_20:
    *(_QWORD *)(a1 + 16) = v25;
  }
  pthread_mutex_unlock(v41);
  v27 = (char *)__p;
  if (__p)
  {
    if (v40 - 1 >= 0)
    {
      v28 = (char *)__p + 16 * v40;
      do
      {
        v29 = (unsigned int *)*((_QWORD *)v28 - 1);
        if (v29)
        {
          v30 = v29 + 2;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
            v33 = v29 + 3;
            do
            {
              v34 = __ldaxr(v33);
              v35 = v34 - 1;
            }
            while (__stlxr(v35, v33));
            if (!v35)
              (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
          }
        }
        v28 -= 16;
      }
      while (v28 > v27);
    }
    if (v38 >= 0xB)
      operator delete(__p);
  }
}

void sub_1BF674534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::slot_call_iterator_cache<boost::signals2::detail::void_type,boost::signals2::detail::variadic_slot_invoker<boost::signals2::detail::void_type,BOOL>>::~slot_call_iterator_cache(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  char *v4;
  char *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _OWORD v14[10];
  unint64_t v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 288);
  if (v2)
  {
    *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[8] = v3;
    v14[9] = v3;
    v14[6] = v3;
    v14[7] = v3;
    v14[4] = v3;
    v14[5] = v3;
    v14[2] = v3;
    v14[3] = v3;
    v14[0] = v3;
    v14[1] = v3;
    v15 = 10;
    __p = v14;
    v17 = 0;
    v18 = v2;
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(*(_DWORD **)(a1 + 288), v14);
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
    v4 = (char *)__p;
    if (__p)
    {
      if (v17 - 1 >= 0)
      {
        v5 = (char *)__p + 16 * v17;
        do
        {
          v6 = (unsigned int *)*((_QWORD *)v5 - 1);
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          v5 -= 16;
        }
        while (v5 > v4);
      }
      if (v15 >= 0xB)
        operator delete(__p);
    }
  }
  boost::signals2::detail::auto_buffer<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>>>::auto_buffer_destroy((_QWORD *)(a1 + 8));
  if (*(_BYTE *)a1)
    *(_BYTE *)a1 = 0;
  return a1;
}

void sub_1BF67479C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::SharedSynchronizable<sys::UIObserver>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791B030;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN3sys10UIObserverEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrIKN3sys10UIObserverEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__on_zero_shared(uint64_t a1)
{
  const void **v1;

  v1 = *(const void ***)(a1 + 24);
  if (v1)
  {
    (*((void (**)(void))*v1 + 2))();
    if (*v1)
      _Block_release(*v1);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<sys::UIObserver::Handle *,std::shared_ptr<sys::UIObserver::Handle>::__shared_ptr_default_delete<sys::UIObserver::Handle,sys::UIObserver::Handle>,std::allocator<sys::UIObserver::Handle>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF7416BELL)
    return a1 + 24;
  if (((v3 & 0x80000001BF7416BELL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF7416BELL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF7416BELL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

BOOL defaults::bbipc::get(char *a1, uint64_t a2)
{
  capabilities::trace *v4;
  capabilities::ipc *v5;
  const char *v6;
  capabilities::ipc *v7;
  unsigned __int8 v8;
  NSObject *v9;
  _BOOL8 result;
  std::string::size_type v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type v16;
  char v17;
  uint64_t v18;
  std::string v19;
  char *v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]);
    if ((_DWORD)v4)
    {
      v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB238]);
      v6 = a1;
      if ((_DWORD)v5)
        goto LABEL_4;
      goto LABEL_14;
    }
LABEL_15:
    v14 = capabilities::trace::enabledByDefault(v4);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v14);
    goto LABEL_17;
  }
  v6 = *(const char **)a1;
  v4 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]);
  if (!(_DWORD)v4)
    goto LABEL_15;
  v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB238]);
  if (!(_DWORD)v5)
  {
LABEL_14:
    v13 = capabilities::ipc::defaultLogLevel(v5);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v13);
LABEL_17:
    v21[0] = v19.__r_.__value_.__l.__size_;
    v16 = v19.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 7);
    v17 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v18 = v21[0];
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v18;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v21 + 7);
    *(_BYTE *)(a2 + 23) = v17;
    return 1;
  }
LABEL_4:
  v7 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB468]);
  if (!(_DWORD)v7)
  {
    v15 = capabilities::ipc::defaultMHIConfigPayloadSizeBytes(v7);
    v21[0] = 0;
    *(_QWORD *)((char *)v21 + 7) = 0;
    std::to_string(&v19, v15);
    goto LABEL_17;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v9 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v9 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v11 = *MEMORY[0x1E0CFB240];
  if (a1[23] >= 0)
    v12 = a1;
  else
    v12 = *(char **)a1;
  LODWORD(v19.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v19.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 6) = v11;
  HIWORD(v19.__r_.__value_.__r.__words[2]) = 2080;
  v20 = v12;
  _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v19,
    0x20u);
  return 0;
}

void sub_1BF674D70(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF674CB0);
    JUMPOUT(0x1BF674CB8);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::compression::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  uint64_t IsInternalBuild;
  int CompressionMode;
  std::string v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CF11E8]))
      goto LABEL_3;
LABEL_12:
    IsInternalBuild = TelephonyUtilIsInternalBuild();
    if ((IsInternalBuild & 1) != 0 || (IsInternalBuild = TelephonyUtilIsCarrierBuild(), (_DWORD)IsInternalBuild))
      CompressionMode = capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
    else
      CompressionMode = 2;
    std::to_string(&v12, CompressionMode);
    goto LABEL_18;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CF11E8]))
    goto LABEL_12;
LABEL_3:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CF1070]))
  {
    std::to_string(&v12, 0);
LABEL_18:
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v12;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x1E0CFB248];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v12.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v12.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v12.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v12.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v12.__r_.__value_.__r.__words[2]) = 2080;
  v13 = v9;
  _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v12,
    0x20u);
  return 0;
}

BOOL defaults::ttr::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  int IsCarrierBuild;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  std::string v14;
  char *v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    v4 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
      goto LABEL_3;
LABEL_12:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    memset(v16, 0, 15);
    std::to_string(&v14, IsCarrierBuild);
    goto LABEL_17;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_12;
LABEL_3:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBBF8]))
  {
    memset(v16, 0, 15);
    std::to_string(&v14, 43200);
LABEL_17:
    v16[0] = v14.__r_.__value_.__l.__size_;
    v11 = v14.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v13 = v16[0];
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a2 + 23) = v12;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x1E0CFB198];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v14.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v14.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v14.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v14.__r_.__value_.__r.__words[2]) = 2080;
  v15 = v9;
  _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v14,
    0x20u);
  return 0;
}

void sub_1BF67521C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF67515CLL);
    JUMPOUT(0x1BF675164);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::logfilter::get(char *a1, uint64_t a2)
{
  const char *v4;
  capabilities::trace *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  std::string::size_type v9;
  char *v10;
  int v11;
  std::string::size_type v12;
  char v13;
  uint64_t v14;
  std::string v15;
  char *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB570]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB7E8]))
        goto LABEL_4;
      goto LABEL_14;
    }
LABEL_15:
    memset(v17, 0, 15);
    std::to_string(&v15, 512);
    goto LABEL_17;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB570]))
    goto LABEL_15;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB7E8]))
  {
LABEL_14:
    memset(v17, 0, 15);
    std::to_string(&v15, -1);
LABEL_17:
    v17[0] = v15.__r_.__value_.__l.__size_;
    v12 = v15.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
    v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v14 = v17[0];
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v14;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a2 + 23) = v13;
    return 1;
  }
LABEL_4:
  v5 = (capabilities::trace *)strcasecmp(v4, (const char *)*MEMORY[0x1E0CFC0C0]);
  if (!(_DWORD)v5)
  {
    v11 = capabilities::trace::supportsDuplicateSignatureDetection(v5);
    memset(v17, 0, 15);
    std::to_string(&v15, v11);
    goto LABEL_17;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v7 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v7 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v9 = *MEMORY[0x1E0CFAFC0];
  if (a1[23] >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v9;
  HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
  v16 = v10;
  _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v15,
    0x20u);
  return 0;
}

void sub_1BF6754C8(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF675408);
    JUMPOUT(0x1BF675410);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::systemlogs::get(char *a1, uint64_t a2)
{
  capabilities::abs *v4;
  const char *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  std::string::size_type v9;
  char *v10;
  int v11;
  int IsCarrierBuild;
  std::string::size_type v13;
  char v14;
  uint64_t v15;
  std::string v16;
  char *v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
    {
      v4 = (capabilities::abs *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]);
      v5 = a1;
      if ((_DWORD)v4)
        goto LABEL_4;
LABEL_14:
      v11 = capabilities::abs::defaultSystemLogsHistory(v4);
      v18[0] = 0;
      *(_QWORD *)((char *)v18 + 7) = 0;
      std::to_string(&v16, v11);
LABEL_20:
      v18[0] = v16.__r_.__value_.__l.__size_;
      v13 = v16.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 7);
      v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v15 = v18[0];
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v15;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v18 + 7);
      *(_BYTE *)(a2 + 23) = v14;
      return 1;
    }
LABEL_15:
    if ((TelephonyUtilIsInternalBuild() & 1) != 0)
      IsCarrierBuild = 1;
    else
      IsCarrierBuild = TelephonyUtilIsCarrierBuild();
    *(_QWORD *)((char *)v18 + 7) = 0;
    v18[0] = 0;
    std::to_string(&v16, IsCarrierBuild);
    goto LABEL_20;
  }
  v5 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_15;
  v4 = (capabilities::abs *)strcasecmp(v5, (const char *)*MEMORY[0x1E0CFB178]);
  if (!(_DWORD)v4)
    goto LABEL_14;
LABEL_4:
  if (!strcasecmp(v5, (const char *)*MEMORY[0x1E0CFBA40]))
  {
    *(_QWORD *)((char *)v18 + 7) = 0;
    v18[0] = 0;
    std::to_string(&v16, 1);
    goto LABEL_20;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v7 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v7 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v9 = *MEMORY[0x1E0CFB190];
  if (a1[23] >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  LODWORD(v16.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v16.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v16.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v16.__r_.__value_.__r.__words[1] + 6) = v9;
  HIWORD(v16.__r_.__value_.__r.__words[2]) = 2080;
  v17 = v10;
  _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v16,
    0x20u);
  return 0;
}

void sub_1BF675794(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF6756D4);
    JUMPOUT(0x1BF6756DCLL);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::profile::get(char *a1, uint64_t a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  std::string::size_type v8;
  char *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  std::string v13;
  char *v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
  {
    v4 = *(const char **)a1;
    if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFAF68]))
      goto LABEL_12;
  }
  else
  {
    v4 = a1;
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]))
    {
LABEL_12:
      memset(v15, 0, 15);
      std::to_string(&v13, 0);
      v15[0] = v13.__r_.__value_.__l.__size_;
      v10 = v13.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
      v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v12 = v15[0];
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v12;
      *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
      *(_BYTE *)(a2 + 23) = v11;
      return 1;
    }
  }
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFC078]))
    goto LABEL_12;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x1E0CFB048];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v8;
  HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
  v14 = v9;
  _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v13,
    0x20u);
  return 0;
}

void sub_1BF675A0C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF67594CLL);
    JUMPOUT(0x1BF675954);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tailspin::get(const char *a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  unsigned __int8 v5;
  NSObject *v6;
  std::string::size_type v7;
  uint64_t *v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  std::string v13;
  uint64_t *v14;
  _QWORD v15[3];

  v3 = (uint64_t *)a1;
  v15[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAF68]);
  if (v4)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return v4 == 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return v4 == 0;
    }
    v7 = *MEMORY[0x1E0CFB0A0];
    if (*((char *)v3 + 23) >= 0)
      v8 = v3;
    else
      v8 = (uint64_t *)*v3;
    LODWORD(v13.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v13.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v13.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 6) = v7;
    HIWORD(v13.__r_.__value_.__r.__words[2]) = 2080;
    v14 = v8;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v13,
      0x20u);
  }
  else
  {
    memset(v15, 0, 15);
    std::to_string(&v13, 0);
    v15[0] = v13.__r_.__value_.__l.__size_;
    v9 = v13.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7);
    v10 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v11 = v15[0];
    *(_QWORD *)a2 = v9;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v15 + 7);
    *(_BYTE *)(a2 + 23) = v10;
  }
  return v4 == 0;
}

void sub_1BF675C2C(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF675B68);
    JUMPOUT(0x1BF675B70);
  }
  _Unwind_Resume(a1);
}

BOOL defaults::tracesettings::get(char *a1, std::string *a2)
{
  const char *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _BOOL8 result;
  uint64_t v8;
  char *v9;
  const std::string::value_type *v10;
  const char *v11;
  size_t v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB938]))
    {
LABEL_19:
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        a2->__r_.__value_.__l.__size_ = 1;
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&a2->__r_.__value_.__s + 23) = 1;
      }
      LOWORD(a2->__r_.__value_.__l.__data_) = 48;
      return 1;
    }
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBA30]))
    {
      v4 = a1;
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB470]))
        goto LABEL_5;
LABEL_16:
      if ((TelephonyUtilIsInternalBuild() & 1) != 0 || TelephonyUtilIsCarrierBuild())
        v10 = "1";
      else
        v10 = "3";
      std::string::__assign_external(a2, v10);
      return 1;
    }
LABEL_21:
    v11 = (const char *)abm::helper::asString();
    v12 = strlen(v11);
    if (v12 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v13 = v12;
    if (v12 >= 0x17)
    {
      v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17)
        v15 = v12 | 7;
      v16 = v15 + 1;
      v14 = operator new(v15 + 1);
      *(_QWORD *)&v17[8] = v13;
      *(_QWORD *)&v17[16] = v16 | 0x8000000000000000;
      *(_QWORD *)v17 = v14;
    }
    else
    {
      v17[23] = v12;
      v14 = v17;
      if (!v12)
      {
        v17[0] = 0;
        if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_25:
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v17;
          a2->__r_.__value_.__r.__words[2] = *(_QWORD *)&v17[16];
          return 1;
        }
LABEL_32:
        operator delete(a2->__r_.__value_.__l.__data_);
        goto LABEL_25;
      }
    }
    memmove(v14, v11, v13);
    v14[v13] = 0;
    if ((SHIBYTE(a2->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_32;
  }
  v4 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB938]))
    goto LABEL_19;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBA30]))
    goto LABEL_21;
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB470]))
    goto LABEL_16;
LABEL_5:
  if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB7D0]))
    goto LABEL_19;
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v6 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v8 = *MEMORY[0x1E0CFB098];
  if (a1[23] >= 0)
    v9 = a1;
  else
    v9 = *(char **)a1;
  *(_DWORD *)v17 = 136315650;
  *(_QWORD *)&v17[4] = "prop.default";
  *(_WORD *)&v17[12] = 2080;
  *(_QWORD *)&v17[14] = v8;
  *(_WORD *)&v17[22] = 2080;
  v18 = v9;
  _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'", v17, 0x20u);
  return 0;
}

double util::to_str<BOOL>(std::string *a1, int __val)
{
  double result;
  std::string v4;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1BF675FE8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF675FD8);
}

void sub_1BF675FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::mode(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<int>@<D0>(int a1@<W0>, std::string *a2@<X8>)
{
  double result;
  std::string v4;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, a1);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a2 = v4;
  return result;
}

void sub_1BF676068(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF676058);
}

void sub_1BF676074(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::history(defaults::bbtrace *this)
{
  return capabilities::trace::defaultHistorySizeMB(this);
}

double util::to_str<diag::config::DuringAPSleep>(std::string *a1)
{
  double result;
  std::string v3;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1BF6760EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF6760DCLL);
}

void sub_1BF6760F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::enabled_during_sleep(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::buffering_on_ap_wake(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::stall_detection(defaults::bbtrace *this)
{
  return 0;
}

double util::to_str<unsigned int>(std::string *a1, unsigned int __val)
{
  double result;
  std::string v4;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v4, __val);
  result = *(double *)&v4.__r_.__value_.__l.__data_;
  *a1 = v4;
  return result;
}

void sub_1BF676174(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF676164);
}

void sub_1BF676180(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_retries(defaults::bbtrace *this)
{
  return 3;
}

double util::to_str<diag::config::Recovery>(std::string *a1)
{
  double result;
  std::string v3;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::to_string(&v3, 0);
  result = *(double *)&v3.__r_.__value_.__l.__data_;
  *a1 = v3;
  return result;
}

void sub_1BF6761EC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BF6761DCLL);
}

void sub_1BF6761F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t defaults::bbtrace::stall_recovery(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::keep_scratch_logs(defaults::bbtrace *this)
{
  return 0;
}

const char *defaults::bbtrace::primary_dmc(defaults::bbtrace *this)
{
  if (config::hw::watch(this))
    return "Lite";
  else
    return "Default";
}

const char *defaults::bbtrace::secondary_dmc(defaults::bbtrace *this)
{
  config::hw *v1;

  v1 = (config::hw *)capabilities::radio::ice(this);
  if (!(_DWORD)v1)
    return "None";
  if (config::hw::watch(v1))
    return "Lite";
  return "Default";
}

const char *defaults::bbtrace::extra_dmc(defaults::bbtrace *this)
{
  return "None";
}

const char *defaults::bbtrace::sleep_dmc(defaults::bbtrace *this)
{
  return "Sleep";
}

uint64_t defaults::bbtrace::max_memory_file_count(defaults::bbtrace *this)
{
  return capabilities::trace::defaultMemoryFileMaxCount(this);
}

uint64_t defaults::bbtrace::high_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this))
    return 80;
  else
    return 0xFFFFFFFFLL;
}

uint64_t defaults::bbtrace::low_water_mark(defaults::bbtrace *this)
{
  if (capabilities::radio::ice(this))
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t defaults::bbtrace::carrier_logging_allowed(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::file_size(defaults::bbtrace *this)
{
  return capabilities::trace::defaultFileSizeBytes(this);
}

uint64_t defaults::bbtrace::transport_read_size(defaults::bbtrace *this)
{
  capabilities::abs *v1;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t defaults::bbtrace::transport_read_count(defaults::bbtrace *this)
{
  capabilities::abs *v1;
  int v2;
  char shouldUseMinBasebandTransportIOReadCount;
  int v4;
  int v5;
  unsigned int v6;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (((_DWORD)v1 - 1) > 2)
    v2 = 23;
  else
    v2 = dword_1BF741714[(int)v1 - 1];
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(v1);
  if (v2 == 15)
    v4 = 36;
  else
    v4 = 4;
  if (v2 == 16)
    v5 = 36;
  else
    v5 = v4;
  if (v2 == 2)
    v6 = 16;
  else
    v6 = v5;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v6;
}

uint64_t defaults::bbtrace::privacyLevel(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::error_handling(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::live_filter(defaults::bbtrace *this)
{
  return 0;
}

uint64_t defaults::bbtrace::min_file_size(defaults::bbtrace *this)
{
  capabilities::abs *v1;

  v1 = (capabilities::abs *)capabilities::radio::vendor(this);
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v1))
    return 0x4000;
  else
    return 0x8000;
}

capabilities::trace *defaults::ipc::enabled(defaults::ipc *this)
{
  capabilities::trace *result;

  result = (capabilities::trace *)capabilities::ipc::supportsPCI(this);
  if ((_DWORD)result)
    return (capabilities::trace *)capabilities::trace::enabledByDefault(result);
  return result;
}

uint64_t defaults::ipc::history(defaults::ipc *this)
{
  return capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(this);
}

uint64_t defaults::ipc::buffer_count(defaults::ipc *this)
{
  return 4;
}

uint64_t defaults::bbipc::mhiConfigPayloadSize(defaults::bbipc *this)
{
  return capabilities::ipc::defaultMHIConfigPayloadSizeBytes(this);
}

uint64_t defaults::logfilter::free_space_limit(defaults::logfilter *this)
{
  return 512;
}

uint64_t defaults::logfilter::max_log_limit(defaults::logfilter *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t defaults::helper::supported(defaults::helper *this)
{
  return 1;
}

uint64_t defaults::compression::mode(defaults::compression *this)
{
  uint64_t IsInternalBuild;

  IsInternalBuild = TelephonyUtilIsInternalBuild();
  if ((IsInternalBuild & 1) != 0)
    return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  IsInternalBuild = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)IsInternalBuild)
    return capabilities::trace::getCompressionMode((capabilities::trace *)IsInternalBuild);
  else
    return 2;
}

uint64_t defaults::compression::splitArchive(defaults::compression *this)
{
  return 0;
}

uint64_t defaults::compression::supported(defaults::compression *this)
{
  return 1;
}

uint64_t defaults::ttr::mode(defaults::ttr *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::ttr::agelimit(defaults::ttr *this)
{
  return 43200;
}

uint64_t defaults::ttr::supported(defaults::ttr *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::mode(defaults::systemlogs *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

uint64_t defaults::systemlogs::history(defaults::systemlogs *this)
{
  return capabilities::abs::defaultSystemLogsHistory(this);
}

uint64_t defaults::systemlogs::userConfirmationRequired(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::systemlogs::supported(defaults::systemlogs *this)
{
  return 1;
}

uint64_t defaults::profile::enabled(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::profile::version(defaults::profile *this)
{
  return 0;
}

uint64_t defaults::tailspin::enabled(defaults::tailspin *this)
{
  return 0;
}

unint64_t defaults::tracesettings::config@<X0>(_QWORD *a1@<X8>)
{
  const char *v3;
  unint64_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)abm::helper::asString();
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a1[1] = v5;
    a1[2] = v7 | 0x8000000000000000;
    *a1 = v8;
    a1 = v8;
  }
  else
  {
    *((_BYTE *)a1 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a1 = 0;
      return result;
    }
  }
  result = (unint64_t)memmove(a1, v3, v5);
  *((_BYTE *)a1 + v5) = 0;
  return result;
}

void CMOnBodyDelegate::create(NSObject **this@<X0>, queue a2@<0:X1>, _QWORD *a3@<X8>)
{
  char *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  NSObject *v15;
  uint8_t v16[48];

  if ((objc_msgSend(MEMORY[0x1E0CA5690], "isOnBodyStatusDetectionAvailable") & 1) == 0)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v15 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      {
LABEL_17:
        *a3 = 0;
        a3[1] = 0;
        return;
      }
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v15 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
    }
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "Motion on-body detection is not available on this device", v16, 2u);
    goto LABEL_17;
  }
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = (char *)operator new(0x38uLL);
  v6 = *this;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *((_QWORD *)v5 + 2) = v6;
  *a3 = v5;
  v7 = (std::__shared_weak_count *)operator new(0x28uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1E791B150;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v7[1].__shared_owners_ = (uint64_t)&__block_literal_global_2;
  a3[1] = v7;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  *(_QWORD *)v5 = v5;
  *((_QWORD *)v5 + 1) = v7;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if (!v6)
      return;
LABEL_19:
    dispatch_release(v6);
    return;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v8);
  if (v6)
    goto LABEL_19;
}

void sub_1BF67682C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t a1), void *a12, uint64_t a13)
{
  uint64_t v13;
  NSObject *v14;

  __cxa_begin_catch(a1);
  v14 = *(NSObject **)(v13 + 16);
  a9 = MEMORY[0x1E0C809B0];
  a10 = 3221225472;
  a11 = _block_invoke_2;
  a12 = &__block_descriptor_40_e5_v8__0l;
  a13 = v13;
  dispatch_async(v14, &a9);
  __cxa_rethrow();
}

void sub_1BF676874(_Unwind_Exception *a1)
{
  NSObject *v1;

  __cxa_end_catch();
  if (v1)
    dispatch_release(v1);
  _Unwind_Resume(a1);
}

uint64_t CMOnBodyDelegate::isSupported(CMOnBodyDelegate *this)
{
  return objc_msgSend(MEMORY[0x1E0CA5690], "isOnBodyStatusDetectionAvailable");
}

void _block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD block[5];

  v2 = *(NSObject **)(a2 + 16);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = _block_invoke_2;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = a2;
  dispatch_async(v2, block);
}

void _block_invoke_2(uint64_t a1)
{
  CMOnBodyDelegate *v1;
  void *v2;

  v1 = *(CMOnBodyDelegate **)(a1 + 32);
  if (v1)
  {
    CMOnBodyDelegate::~CMOnBodyDelegate(v1);
    operator delete(v2);
  }
}

void CMOnBodyDelegate::CMOnBodyDelegate(CMOnBodyDelegate *this, queue a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 2) = *(_QWORD *)a2.fObj.fObj;
}

{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 2) = *(_QWORD *)a2.fObj.fObj;
}

uint64_t CMOnBodyDelegate::shutdown(CMOnBodyDelegate *this)
{
  uint64_t result;

  result = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5690], "sharedOnBodyStatusManager"), "stopOnBodyStatusDetection");
  if (*((_QWORD *)this + 2))
    *((_QWORD *)this + 2) = 0;
  return result;
}

uint64_t CMOnBodyDelegate::stopMotionDetection(CMOnBodyDelegate *this)
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5690], "sharedOnBodyStatusManager"), "stopOnBodyStatusDetection");
}

void CMOnBodyDelegate::~CMOnBodyDelegate(CMOnBodyDelegate *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;

  v2 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 4) = v2;
  v6 = (const void *)*((_QWORD *)this + 6);
  if (v6)
    CFRelease(v6);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    v8 = *((_QWORD *)this + 4);
    v9 = (void *)*((_QWORD *)this + 3);
    if (v8 != v7)
    {
      do
      {
        v10 = *(NSObject **)(v8 - 8);
        if (v10)
          dispatch_release(v10);
        v11 = *(const void **)(v8 - 16);
        if (v11)
          _Block_release(v11);
        v8 -= 16;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v7;
    operator delete(v9);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

void CMOnBodyDelegate::startMotionDetection(CMOnBodyDelegate *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t);
  unsigned __int8 v16;
  NSObject *v17;
  _QWORD v18[5];
  std::__shared_weak_count *v19;
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    if (*((_QWORD *)this + 6))
      v15 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v15 = 0;
    if (v15)
      goto LABEL_12;
LABEL_20:
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v17 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_24;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v17 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_24;
    }
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "Motion Parameter is not ready. Cannot start the motion detection!", buf, 2u);
    goto LABEL_24;
  }
  if (*((_QWORD *)this + 6))
    v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_20;
LABEL_12:
  v11 = (void *)objc_msgSend(MEMORY[0x1E0CA5690], "sharedOnBodyStatusManager");
  v12 = *((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 6);
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3321888768;
  v18[2] = ___ZN16CMOnBodyDelegate20startMotionDetectionEv_block_invoke;
  v18[3] = &__block_descriptor_48_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE_e36_v24__0__CMOnBodyStatus_8__NSError_16l;
  v18[4] = v3;
  v19 = v5;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  objc_msgSend(v11, "startOnBodyStatusDetectionToQueue:withParameters:handler:", v12, v13, v18);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
LABEL_24:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF676C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count *v14;

  if (a14)
  {
    std::__shared_weak_count::__release_weak(a14);
    std::__shared_weak_count::__release_weak(v14);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

void ___ZN16CMOnBodyDelegate20startMotionDetectionEv_block_invoke(uint64_t a1, void *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 32);
      if (v7)
        CMOnBodyDelegate::motionCallback_sync(v7, objc_msgSend(a2, "result", v7, v5), objc_msgSend(a2, "confidence"));
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BF676D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CMOnBodyDelegate::motionCallback_sync(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v7;
  NSObject *v8;
  void *v9;
  const void *v10;
  void *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  int v18;
  int v19;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3 != v4)
  {
    while (*(_QWORD *)v3)
    {
      v7 = _Block_copy(*(const void **)v3);
      v8 = *(NSObject **)(v3 + 8);
      if (v8)
        goto LABEL_6;
LABEL_7:
      if (v7)
      {
        v9 = _Block_copy(v7);
        v10 = v9;
        v13 = MEMORY[0x1E0C809B0];
        v14 = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_48_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE_e5_v8__0l;
        if (v9)
        {
          v11 = _Block_copy(v9);
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v13 = MEMORY[0x1E0C809B0];
        v14 = 3321888768;
        v12 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_48_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE_e5_v8__0l;
      }
      aBlock = v11;
      v18 = a2;
      v19 = a3;
      dispatch_async(v8, &v13);
      if (aBlock)
        _Block_release(aBlock);
      if ((v12 & 1) == 0)
        _Block_release(v10);
      if (v8)
        dispatch_release(v8);
      if (v7)
        _Block_release(v7);
      v3 += 16;
      if (v3 == v4)
        return;
    }
    v7 = 0;
    v8 = *(NSObject **)(v3 + 8);
    if (!v8)
      goto LABEL_7;
LABEL_6:
    dispatch_retain(v8);
    goto LABEL_7;
  }
}

uint64_t __copy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c41_ZTSNSt3__18weak_ptrI16CMOnBodyDelegateEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void CMOnBodyDelegate::setThresholds(CMOnBodyDelegate *this, CFTypeRef cf)
{
  const void *v3;
  uint64_t (*v4)(uint64_t);
  unsigned __int8 v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  unsigned __int8 v10;
  __int16 v11;
  __int16 v12;

  v3 = (const void *)*((_QWORD *)this + 6);
  v4 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!v3)
    v4 = 0;
  if (!v4)
  {
    if (cf)
    {
      CFRetain(cf);
      v3 = (const void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 6) = cf;
    if (v3)
      CFRelease(v3);
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CA5690], "sharedOnBodyStatusManager"), "setPropertiesWithDictionary:", cf);
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        return;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v6 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
        return;
    }
    v11 = 0;
    v7 = "Motion parameter is set!";
    v8 = (uint8_t *)&v11;
    goto LABEL_16;
  }
  if ((v5 & 1) == 0)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v6 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
      return;
    goto LABEL_7;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  v6 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    v12 = 0;
    v7 = "Motion parameter is already set.";
    v8 = (uint8_t *)&v12;
LABEL_16:
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
  }
}

_QWORD *CMOnBodyDelegate::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[4];
  if ((unint64_t)v4 >= a1[5])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(a1 + 3, (uint64_t)a2);
    a1[4] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[4] = v4 + 2;
  }
  return result;
}

const char *CMOnBodyDelegate::toString(unsigned int a1)
{
  if (a1 > 2)
    return "Unknown";
  else
    return off_1E791B1C0[a1];
}

const char *CMOnBodyDelegate::toString(int a1)
{
  const char *v1;

  v1 = "Confidence Level Unknown";
  if (a1 == 1)
    v1 = "Confidence Level High";
  if (a1)
    return v1;
  else
    return "Confidence Level Low";
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CMOnBodyDelegate *,void({block_pointer})(CMOnBodyDelegate *),std::allocator<CMOnBodyDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF74177DLL)
    return a1 + 32;
  if (((v3 & 0x80000001BF74177DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF74177DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF74177DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 32;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEclIJS2_S3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void *__copy_helper_block_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c109_ZTSN8dispatch5blockIU13block_pointerFvN16CMOnBodyDelegate14CMOnBodyResultENS1_24CMOnBodyResultConfidenceEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

BOOL BootControllerINT::prepare(capabilities::radio *a1, std::string *a2)
{
  timespec v4;
  void **v5;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  void **v10;
  void *__p[3];
  stat v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(__p, 170, sizeof(__p));
  capabilities::radio::personalizedFirmwarePath(a1);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v12.st_blksize = v4;
  *(timespec *)v12.st_qspare = v4;
  v12.st_birthtimespec = v4;
  *(timespec *)&v12.st_size = v4;
  v12.st_mtimespec = v4;
  v12.st_ctimespec = v4;
  *(timespec *)&v12.st_uid = v4;
  v12.st_atimespec = v4;
  *(timespec *)&v12.st_dev = v4;
  if (SHIBYTE(__p[2]) >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = stat((const char *)v5, &v12);
  if (v6)
  {
    v7 = *((_QWORD *)a1 + 5);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      v10 = __p;
      if (SHIBYTE(__p[2]) < 0)
        v10 = (void **)__p[0];
      v12.st_dev = 136315138;
      *(_QWORD *)&v12.st_mode = v10;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed to find the firmware in \"%s\"", (uint8_t *)&v12, 0xCu);
    }
    capabilities::trace::allowed((capabilities::trace *)v8);
    std::string::__assign_external(a2, "Baseband Firmware Path Not Found", 0x20uLL);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return v6 == 0;
}

void sub_1BF67765C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BootControllerINT::bootModem(uint64_t a1, uint64_t a2)
{
  ctu::XpcJetsamAssertion *v4;
  void *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  const __CFAllocator *v18;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v20;
  CFMutableDictionaryRef v21;
  CFMutableDictionaryRef v22;
  CFMutableDictionaryRef v23;
  CFMutableDictionaryRef v24;
  _BOOL8 v25;
  NSObject *v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  CFTypeRef v30;
  CFNumberRef v31;
  const void *v32;
  _QWORD *v33;
  uint64_t (***v34)(void *, void *);
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  const char *v40;
  const void *v41;
  char v42;
  size_t v43;
  std::string *v44;
  size_t size;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string::size_type v49;
  NSObject *v50;
  std::string *p_p;
  void *v52;
  CFTypeRef v53;
  __CFDictionary *v54;
  std::string::size_type v55;
  const void *v56;
  const void *v57;
  int v58;
  const void *v59;
  CFTypeRef v60;
  uint64_t (*v61)(uint64_t);
  NSObject *v62;
  NSObject *v63;
  NSObject *v64;
  CFTypeRef v65;
  CFTypeRef v66;
  uint64_t (*v67)(uint64_t);
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  CFTypeRef v71;
  CFTypeRef v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::string *v77;
  std::string v78;
  CFTypeRef v79;
  void *value[2];
  uint64_t v81;
  std::string v82;
  CFTypeRef cf;
  std::string __p;
  CFTypeRef v85;
  CFTypeRef v86;
  __CFDictionary *v87;
  void *v88[4];
  char v89[24];
  unint64_t v90;
  unint64_t v91;
  void *v92;
  std::string v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v90 = 0xAAAAAAAAAAAAAAAALL;
  v91 = 0xAAAAAAAAAAAAAAAALL;
  v4 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v5 = (void *)xmmword_1ED70F3D8;
  if (!(_QWORD)xmmword_1ED70F3D8)
  {
    ctu::XpcJetsamAssertion::create_default_global(v4);
    v6 = *(_OWORD *)&v93.__r_.__value_.__l.__data_;
    *(_OWORD *)&v93.__r_.__value_.__l.__data_ = 0uLL;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F3D8 + 1);
    xmmword_1ED70F3D8 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v93.__r_.__value_.__l.__size_)
    {
      v10 = (unint64_t *)(v93.__r_.__value_.__l.__size_ + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)v93.__r_.__value_.__l.__size_ + 16))(v93.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v93.__r_.__value_.__l.__size_);
      }
    }
    v5 = (void *)xmmword_1ED70F3D8;
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F3D8 + 1);
  v88[0] = v5;
  v88[1] = *((void **)&xmmword_1ED70F3D8 + 1);
  if (*((_QWORD *)&xmmword_1ED70F3D8 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&xmmword_1ED70F3D8 + 1) + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v89[23] = 13;
  strcpy(v89, "Booting modem");
  ctu::XpcJetsamAssertion::createActivity();
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  BYTE5(v88[2]) = -86;
  HIWORD(v88[2]) = 5290;
  strcpy((char *)v88, "boot::debugArguments");
  if (*(char *)(a2 + 23) < 0)
  {
    *(_QWORD *)(a2 + 8) = 7;
    v17 = *(char **)a2;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 7;
    v17 = (char *)a2;
  }
  strcpy(v17, "unknown");
  v86 = 0;
  v87 = 0;
  v85 = 0;
  v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v20 = Mutable;
  if (Mutable)
  {
    v87 = Mutable;
    v21 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v22 = v21;
    if (v21)
    {
      v86 = v21;
      v23 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v24 = v23;
      if (v23)
      {
        v85 = v23;
        ctu::cf::update<__CFString const*,__CFDictionary *>(v20, CFSTR("RestoreOptions"), v22);
        v25 = ctu::cf::update<__CFString const*,__CFDictionary *>(v20, CFSTR("Options"), v24);
        capabilities::radio::personalizedFirmwarePath((capabilities::radio *)v25);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v93, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v93 = __p;
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("firmwareDataFolder");
        CFRetain(CFSTR("firmwareDataFolder"));
        value[0] = 0;
        ctu::cf::convert_copy();
        v92 = 0;
        CFRelease(CFSTR("firmwareDataFolder"));
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v93.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_40;
        }
        else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_40;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_40:
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("BootMode");
        CFRetain(CFSTR("BootMode"));
        LODWORD(value[0]) = 1;
        v31 = CFNumberCreate(v18, kCFNumberIntType, value);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if (v31)
        {
          CFDictionarySetValue(v20, CFSTR("BootMode"), v31);
          CFRelease(v31);
        }
        CFRelease(CFSTR("BootMode"));
        v32 = (const void *)*MEMORY[0x1E0C9AE50];
        ctu::cf::update<__CFString const*,__CFBoolean const*>(v20, CFSTR("skipCoredump"), (CFTypeRef)*MEMORY[0x1E0C9AE50]);
        ctu::cf::update<__CFString const*,__CFBoolean const*>(v20, CFSTR("ccBoot"), v32);
        memset(&__p, 0, sizeof(__p));
        v92 = (void *)0xAAAAAAAAAAAAAAAALL;
        cf = 0;
        pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        if (!(_QWORD)xmmword_1ED70F248)
        {
          v34 = (uint64_t (***)(void *, void *))operator new(0x18uLL);
          MEMORY[0x1C3B8B8C0](v34, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
          v33 = operator new(0x20uLL);
          *v33 = &unk_1E7919E70;
          v33[1] = 0;
          v33[2] = 0;
          v33[3] = v34;
          v35 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
          *(_QWORD *)&xmmword_1ED70F248 = v34;
          *((_QWORD *)&xmmword_1ED70F248 + 1) = v33;
          if (!v35)
          {
            v93.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
            v93.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
            goto LABEL_53;
          }
          v36 = (unint64_t *)&v35->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v33 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
        v34 = (uint64_t (***)(void *, void *))xmmword_1ED70F248;
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = xmmword_1ED70F248;
        if (!*((_QWORD *)&xmmword_1ED70F248 + 1))
        {
LABEL_55:
          pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
          v82.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAA00;
          *(_OWORD *)&v82.__r_.__value_.__r.__words[1] = xmmword_1BF7417B0;
          if (SHIBYTE(v88[2]) >= 0)
            v40 = (const char *)v88;
          else
            v40 = (const char *)v88[0];
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)value, v40);
          v41 = (const void *)(**v34)(v34, value[0]);
          if (v41)
          {
            v42 = ctu::cf::assign();
            CFRelease(v41);
            MEMORY[0x1C3B8B878](value);
            if ((v42 & 1) != 0)
              goto LABEL_72;
            v43 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_61;
          }
          else
          {
            MEMORY[0x1C3B8B878](value);
            v43 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_61:
              if ((v43 & 0x80) != 0)
                std::string::__assign_no_alias<true>(&__p, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
              else
                __p = v82;
              goto LABEL_72;
            }
          }
          if ((v43 & 0x80u) == 0)
            v44 = &v82;
          else
            v44 = (std::string *)v82.__r_.__value_.__r.__words[0];
          if ((v43 & 0x80u) == 0)
            size = v43;
          else
            size = v82.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>((void **)&__p.__r_.__value_.__l.__data_, v44, size);
LABEL_72:
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v82.__r_.__value_.__l.__data_);
            v46 = (std::__shared_weak_count *)v93.__r_.__value_.__l.__size_;
            if (!v93.__r_.__value_.__l.__size_)
              goto LABEL_79;
          }
          else
          {
            v46 = (std::__shared_weak_count *)v93.__r_.__value_.__l.__size_;
            if (!v93.__r_.__value_.__l.__size_)
              goto LABEL_79;
          }
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
            v55 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v55 = __p.__r_.__value_.__l.__size_;
            if (v55)
              goto LABEL_82;
            goto LABEL_95;
          }
LABEL_79:
          v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v49 = __p.__r_.__value_.__l.__size_;
          if (v49)
          {
LABEL_82:
            if (ctu::cf::convert_copy())
            {
              v50 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
              {
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                LODWORD(v93.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
                _os_log_impl(&dword_1BF566000, v50, OS_LOG_TYPE_DEFAULT, "#N Retrieved debug args: %s", (uint8_t *)&v93, 0xCu);
              }
              v52 = v92;
              v53 = cf;
              cf = v92;
              if (v53)
                CFRelease(v53);
              v54 = (__CFDictionary *)v85;
              v93.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("DebugArgs");
              CFRetain(CFSTR("DebugArgs"));
              value[0] = v52;
              if (v52)
              {
                CFRetain(v52);
                CFDictionarySetValue(v54, CFSTR("DebugArgs"), v52);
                CFRelease(v52);
              }
              CFRelease(CFSTR("DebugArgs"));
            }
          }
LABEL_95:
          value[1] = (void *)0xAAAAAAAAAAAAAA00;
          v81 = 0x8AAAAAAAAAAAAAALL;
          v79 = 0;
          value[0] = (void *)0x646E616265736142;
          v20 = v87;
          v93.__r_.__value_.__r.__words[0] = 0;
          v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79;
          v56 = (const void *)BasebandUpdaterCreate();
          v57 = *(const void **)v93.__r_.__value_.__l.__size_;
          if (v93.__r_.__value_.__r.__words[0])
          {
            *(_QWORD *)v93.__r_.__value_.__l.__size_ = v93.__r_.__value_.__r.__words[0];
            if (!v57)
              goto LABEL_100;
          }
          else
          {
            *(_QWORD *)v93.__r_.__value_.__l.__size_ = 0;
            if (!v57)
              goto LABEL_100;
          }
          CFRelease(v57);
LABEL_100:
          if (!v56)
          {
            v60 = v79;
            v61 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
            if (!v79)
              v61 = 0;
            if (v61 && (v62 = *(NSObject **)(a1 + 40), os_log_type_enabled(v62, OS_LOG_TYPE_ERROR)))
            {
              LODWORD(v93.__r_.__value_.__l.__data_) = 138412290;
              *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v60;
              _os_log_error_impl(&dword_1BF566000, v62, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v93, 0xCu);
              v63 = *(NSObject **)(a1 + 40);
              if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                goto LABEL_122;
            }
            else
            {
              v63 = *(NSObject **)(a1 + 40);
              if (!os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                goto LABEL_122;
            }
            LOWORD(v93.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl(&dword_1BF566000, v63, OS_LOG_TYPE_ERROR, "Failed to initialize BasebandUpdater", (uint8_t *)&v93, 2u);
            goto LABEL_122;
          }
          v93.__r_.__value_.__r.__words[0] = 0;
          v93.__r_.__value_.__l.__size_ = (std::string::size_type)&v79;
          v58 = BasebandUpdaterExecCommand();
          v59 = *(const void **)v93.__r_.__value_.__l.__size_;
          if (v93.__r_.__value_.__r.__words[0])
          {
            *(_QWORD *)v93.__r_.__value_.__l.__size_ = v93.__r_.__value_.__r.__words[0];
            if (v59)
              goto LABEL_111;
          }
          else
          {
            *(_QWORD *)v93.__r_.__value_.__l.__size_ = 0;
            if (v59)
LABEL_111:
              CFRelease(v59);
          }
          if (v58)
          {
            v64 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v93.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_1BF566000, v64, OS_LOG_TYPE_DEFAULT, "#I Baseband boot complete", (uint8_t *)&v93, 2u);
            }
            CFRelease(v56);
            v27 = 1;
            v65 = v79;
            if (!v79)
            {
LABEL_127:
              if (SHIBYTE(v81) < 0)
              {
                operator delete(value[0]);
                v71 = cf;
                if (!cf)
                  goto LABEL_132;
              }
              else
              {
                v71 = cf;
                if (!cf)
                {
LABEL_132:
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  {
                    operator delete(__p.__r_.__value_.__l.__data_);
                    v72 = v85;
                    if (!v85)
                      goto LABEL_137;
                  }
                  else
                  {
                    v72 = v85;
                    if (!v85)
                    {
LABEL_137:
                      v30 = v86;
                      if (!v86)
                        goto LABEL_139;
                      goto LABEL_138;
                    }
                  }
                  CFRelease(v72);
                  goto LABEL_137;
                }
              }
              CFRelease(v71);
              goto LABEL_132;
            }
LABEL_126:
            CFRelease(v65);
            goto LABEL_127;
          }
          CFRelease(v56);
          v66 = v79;
          v67 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
          if (!v79)
            v67 = 0;
          if (v67 && (v68 = *(NSObject **)(a1 + 40), os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)))
          {
            LODWORD(v93.__r_.__value_.__l.__data_) = 138412290;
            *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
            _os_log_error_impl(&dword_1BF566000, v68, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v93, 0xCu);
            v69 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
              goto LABEL_122;
          }
          else
          {
            v69 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
              goto LABEL_122;
          }
          LOWORD(v93.__r_.__value_.__l.__data_) = 0;
          _os_log_error_impl(&dword_1BF566000, v69, OS_LOG_TYPE_ERROR, "Failed to boot baseband", (uint8_t *)&v93, 2u);
LABEL_122:
          memset(&v93, 0, sizeof(v93));
          ctu::cf::assign();
          v78 = v93;
          v70 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            v77 = &v78;
            if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v77 = (std::string *)v78.__r_.__value_.__r.__words[0];
            LODWORD(v93.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
            _os_log_error_impl(&dword_1BF566000, v70, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v93, 0xCu);
            if ((*(char *)(a2 + 23) & 0x80000000) == 0)
            {
LABEL_125:
              v27 = 0;
              *(std::string *)a2 = v78;
              v65 = v79;
              if (!v79)
                goto LABEL_127;
              goto LABEL_126;
            }
          }
          else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
          {
            goto LABEL_125;
          }
          operator delete(*(void **)a2);
          goto LABEL_125;
        }
LABEL_53:
        v38 = v33 + 1;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        goto LABEL_55;
      }
      v28 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
LABEL_35:
        v27 = 0;
        v30 = v86;
        if (!v86)
          goto LABEL_139;
LABEL_138:
        CFRelease(v30);
        goto LABEL_139;
      }
      LOWORD(v93.__r_.__value_.__l.__data_) = 0;
      v29 = "Failed to create updater option dictionary!";
    }
    else
    {
      v28 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        goto LABEL_35;
      LOWORD(v93.__r_.__value_.__l.__data_) = 0;
      v29 = "Failed to create restore option dictionary!";
    }
    _os_log_error_impl(&dword_1BF566000, v28, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&v93, 2u);
    v27 = 0;
    v30 = v86;
    if (v86)
      goto LABEL_138;
  }
  else
  {
    v26 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v93.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF566000, v26, OS_LOG_TYPE_ERROR, "Failed to create option dictionary!", (uint8_t *)&v93, 2u);
    }
    v27 = 0;
    v20 = 0;
  }
LABEL_139:
  if (v20)
    CFRelease(v20);
  if (SHIBYTE(v88[2]) < 0)
    operator delete(v88[0]);
  v73 = (std::__shared_weak_count *)v91;
  if (v91)
  {
    v74 = (unint64_t *)(v91 + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  return v27;
}

void sub_1BF6782C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

const void **ctu::cf::detail::TakeOwnershipProxy<__CFError>::~TakeOwnershipProxy(const void **a1)
{
  const void **v2;
  const void *v3;
  const void *v4;

  v3 = *a1;
  v2 = (const void **)a1[1];
  v4 = *v2;
  if (v3)
  {
    *v2 = v3;
    if (v4)
      goto LABEL_5;
  }
  else
  {
    *v2 = 0;
    if (v4)
LABEL_5:
      CFRelease(v4);
  }
  return a1;
}

void BootControllerINT::handleError(BootControllerINT *this@<X0>, _OWORD *a2@<X8>)
{
  NSObject *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, 24);
  v7 = 0uLL;
  v8 = 0;
  ctu::cf::assign();
  *a2 = 0uLL;
  *((_QWORD *)a2 + 2) = v8;
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *(_OWORD **)a2;
    LODWORD(v7) = 136315138;
    *(_QWORD *)((char *)&v7 + 4) = v6;
    _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1BF678654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BootControllerINT::~BootControllerINT(BootControllerINT *this)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E79224E0;
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = &unk_1E791B2D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E79224E0;
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = &unk_1E791B2D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "boot.ctrl");
}

uint64_t ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E791B2D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = &unk_1E791B2D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void ctu::cf::update<__CFString const*,__CFBoolean const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionarySetValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF678914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF678938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_4()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_21()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF566000);
  }
  return result;
}

const char *HealthEventDB::getName(HealthEventDB *this)
{
  return "HealthEventDB";
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *this, const HealthEvent *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    HealthEvent::asString(a2, __p);
    v11 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v15 = v11;
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Adding health event: %s", buf, 0xCu);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  v6 = *((_QWORD *)this + 10);
  v5 = *((_QWORD *)this + 11);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) == *((_QWORD *)this + 14))
  {
    if (v5 != v6)
    {
      *(_OWORD *)(*((_QWORD *)this + 13) + 8) = *(_OWORD *)((char *)a2 + 8);
      v7 = *((_QWORD *)this + 13) + 24;
      *((_QWORD *)this + 13) = v7;
      if (v7 == *((_QWORD *)this + 11))
      {
        v7 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 13) = v7;
      }
      *((_QWORD *)this + 12) = v7;
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 13);
    *(_QWORD *)v8 = &unk_1E7917288;
    *(_OWORD *)(v8 + 8) = *(_OWORD *)((char *)a2 + 8);
    v9 = *((_QWORD *)this + 13) + 24;
    *((_QWORD *)this + 13) = v9;
    if (v9 == *((_QWORD *)this + 11))
      *((_QWORD *)this + 13) = *((_QWORD *)this + 10);
    ++*((_QWORD *)this + 14);
  }
  HealthEventDB::commitToDisk(this);
  return 1;
}

void HealthEventDB::commitToDisk(HealthEventDB *this)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v4;
  CFMutableArrayRef v5;
  __CFArray *v6;
  CFMutableArrayRef v7;
  const __CFAllocator *v8;
  __CFArray *v9;
  uint64_t v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  const __CFAllocator *v16;
  os_unfair_lock_s *v17;
  _QWORD *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  CFTypeRef v31;
  void *__p[2];
  char v33;
  CFTypeRef cf;
  CFTypeRef v35;
  CFTypeRef v36;
  __int128 valuePtr;
  os_unfair_lock_s *v38;
  CFTypeRef v39;

  v35 = 0;
  v36 = 0;
  cf = 0;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = Mutable;
  if (Mutable)
    v36 = Mutable;
  v5 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v6 = v5;
  if (v5)
    v35 = v5;
  v7 = CFArrayCreateMutable(v2, 0, MEMORY[0x1E0C9B378]);
  v9 = v7;
  if (v7)
    cf = v7;
  if (*((_QWORD *)this + 14))
  {
    v10 = *((_QWORD *)this + 12);
    if (v10)
    {
      while (1)
      {
        LOBYTE(__p[0]) = *(_BYTE *)(v10 + 8);
        *(_QWORD *)&valuePtr = *(_QWORD *)(v10 + 16);
        v11 = CFNumberCreate(v2, kCFNumberSInt8Type, __p);
        v12 = CFNumberCreate(v2, kCFNumberSInt64Type, &valuePtr);
        v13 = v12;
        if (v11
           ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
           : 0)
        {
          if (v12
             ? ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get
             : 0)
          {
            break;
          }
        }
        if (v12)
          goto LABEL_22;
LABEL_23:
        if (v11)
          CFRelease(v11);
        v10 += 24;
        if (v10 == *((_QWORD *)this + 11))
          v10 = *((_QWORD *)this + 10);
        if (!v10 || v10 == *((_QWORD *)this + 13))
          goto LABEL_29;
      }
      if (v11)
      {
        CFRetain(v11);
        CFArrayAppendValue(v6, v11);
        CFRelease(v11);
      }
      if (!v13)
        goto LABEL_23;
      CFRetain(v13);
      CFArrayAppendValue(v9, v13);
      CFRelease(v13);
LABEL_22:
      CFRelease(v13);
      goto LABEL_23;
    }
  }
LABEL_29:
  ctu::cf::insert<char const*,__CFArray *>(v4, (const __CFString **)"HealthEventTypes", v6, (uint64_t)v2, v8);
  ctu::cf::insert<char const*,__CFArray *>((__CFDictionary *)v36, (const __CFString **)"HealthEventTimes", cf, (uint64_t)v2, v16);
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v17 = (os_unfair_lock_s *)off_1ED70F558;
  if (!off_1ED70F558)
  {
    v18 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v18, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v18[3] = 0;
    v18[4] = 0;
    *((_DWORD *)v18 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(&valuePtr, (uint64_t)v18);
    v19 = valuePtr;
    valuePtr = 0uLL;
    v20 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v19;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&valuePtr + 1);
    if (*((_QWORD *)&valuePtr + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&valuePtr + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v17 = (os_unfair_lock_s *)off_1ED70F558;
  }
  v26 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v27 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v33 = 13;
  strcpy((char *)__p, "HealthEventDB");
  v38 = v17;
  v39 = v36;
  *(_QWORD *)&valuePtr = __p;
  *((_QWORD *)&valuePtr + 1) = &v39;
  ctu::SharedLockable<SharedData>::execute_sync<BOOL SharedData::setPreference<__CFDictionary *>(std::string const&,__CFDictionary *)::{lambda(void)#1}>(v17 + 6, (uint64_t *)&valuePtr);
  if (v33 < 0)
    operator delete(__p[0]);
  if (!v26)
    goto LABEL_50;
  v29 = (unint64_t *)&v26->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (v30)
  {
LABEL_50:
    v31 = cf;
    if (!cf)
      goto LABEL_52;
    goto LABEL_51;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  v31 = cf;
  if (cf)
LABEL_51:
    CFRelease(v31);
LABEL_52:
  if (v35)
    CFRelease(v35);
  if (v36)
    CFRelease(v36);
}

void sub_1BF678EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13, const void *a14)
{
  void *v14;

  operator delete(v14);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(&a12);
  ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(&a13);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a14);
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::addHealthEvent(HealthEventDB *a1, char a2)
{
  _BYTE v5[8];
  _QWORD *v6;
  std::string __p;
  void *v8;
  unint64_t v9;
  uint64_t *v10;
  std::string v11;

  v9 = 0xAAAAAAAAAAAAAAAALL;
  Timestamp::Timestamp((Timestamp *)v5);
  Timestamp::asString((uint64_t)v5, 0, 9, &__p);
  v8 = &unk_1E7917288;
  LOBYTE(v9) = a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v11 = __p;
  v10 = Timestamp::convert((uint64_t)&v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_6:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v5, v6);
  HealthEventDB::addHealthEvent(a1, (const HealthEvent *)&v8);
  return 1;
}

void sub_1BF679098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1BF6790FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t HealthEventDB::getHealthEvents(HealthEventDB *this)
{
  return (uint64_t)this + 80;
}

void HealthEventDB::HealthEventDB(HealthEventDB *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _BYTE v11[16];
  _QWORD block[5];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v11, "com.apple.telephony.abm", "HealthEventDB");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = unk_1ED70F6A0;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = unk_1ED70F6A0;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v11, &v9);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v11);
  *(_QWORD *)this = off_1E791B310;
  *((_DWORD *)this + 18) = 128;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  HealthEventDB::initFromDisk(this);
}

void sub_1BF6792B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  boost::circular_buffer<HealthEvent,std::allocator<HealthEvent>>::~circular_buffer(v3);
  *v1 = off_1E791B3B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  _Unwind_Resume(a1);
}

void sub_1BF6792DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E791B3B8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF6793A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void HealthEventDB::initFromDisk(HealthEventDB *this)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  uint64_t v8;
  void (***v9)(_QWORD);
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  CFTypeRef v24;
  const __CFArray *v25;
  const __CFArray *v26;
  uint64_t (*v27)(uint64_t);
  unsigned int Count;
  unsigned int v29;
  uint64_t v30;
  CFIndex i;
  uint64_t v32;
  uint64_t v33;
  signed __int8 *ValueAtIndex;
  signed __int8 *v35;
  CFTypeID v36;
  const __CFNumber *v37;
  uint64_t *v38;
  uint64_t *v39;
  CFTypeID v40;
  const __CFNumber *v41;
  char v42;
  __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  const __CFArray *v49;
  const __CFArray *v50;
  CFTypeRef v51;
  void *__p[2];
  char v53;
  CFTypeRef cf;
  __CFString *v55;

  v2 = *((unsigned int *)this + 18);
  if ((_DWORD)v2)
    v3 = (char *)operator new(24 * v2);
  else
    v3 = 0;
  v4 = &v3[24 * v2];
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 10);
  v6 = (void (***)(_QWORD))*((_QWORD *)this + 11);
  *((_QWORD *)this + 10) = v3;
  *((_QWORD *)this + 11) = v4;
  v7 = (void (***)(_QWORD))*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v3;
  *((_QWORD *)this + 13) = v3;
  v8 = *((_QWORD *)this + 14);
  for (*((_QWORD *)this + 14) = 0; v8; --v8)
  {
    v9 = v7 + 3;
    (**v7)(v7);
    if (v9 == v6)
      v7 = v5;
    else
      v7 = v9;
  }
  if (v5)
    operator delete(v5);
  cf = 0;
  pthread_mutex_lock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v10 = off_1ED70F558;
  if (!off_1ED70F558)
  {
    v11 = operator new(0x30uLL);
    MEMORY[0x1C3B8B8C0](v11, CFSTR("com.apple.AppleBasebandManager.data"), *MEMORY[0x1E0C9B260]);
    v11[3] = 0;
    v11[4] = 0;
    *((_DWORD *)v11 + 10) = 0;
    std::shared_ptr<SharedData>::shared_ptr[abi:ne180100]<SharedData,void>(__p, (uint64_t)v11);
    v12 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v13 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
    off_1ED70F558 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v17 = (unint64_t *)((char *)__p[1] + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v10 = off_1ED70F558;
  }
  v19 = (std::__shared_weak_count *)*(&off_1ED70F558 + 1);
  if (*(&off_1ED70F558 + 1))
  {
    v20 = (unint64_t *)(*(&off_1ED70F558 + 1) + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  v53 = 13;
  strcpy((char *)__p, "HealthEventDB");
  os_unfair_lock_lock((os_unfair_lock_t)(v10 + 40));
  Preferences::getPreference<__CFDictionary const*>((uint64_t (***)(_QWORD, uint64_t))v10, (const char *)__p, &cf);
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 40));
  if (v53 < 0)
    operator delete(__p[0]);
  if (!v19)
    goto LABEL_32;
  v22 = (unint64_t *)&v19->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_32:
    v24 = cf;
    v51 = cf;
    if (!cf)
      goto LABEL_34;
    goto LABEL_33;
  }
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  v24 = cf;
  v51 = cf;
  if (cf)
LABEL_33:
    CFRetain(v24);
LABEL_34:
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)__p, (const __CFDictionary *)v24);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v55, "HealthEventTypes");
  v25 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)__p, v55);
  MEMORY[0x1C3B8B878](&v55);
  v50 = v25;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v55, "HealthEventTimes");
  v26 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)__p, v55);
  MEMORY[0x1C3B8B878](&v55);
  v49 = v26;
  v27 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!v25)
    v27 = 0;
  if (v27)
  {
    Count = CFArrayGetCount(v25);
    v29 = CFArrayGetCount(v26);
    v30 = v29 >= Count ? Count : v29;
    if ((_DWORD)v30)
    {
      for (i = 0; i != v30; ++i)
      {
        v48 = 0;
        v55 = 0;
        ValueAtIndex = (signed __int8 *)CFArrayGetValueAtIndex(v25, i);
        v35 = ValueAtIndex;
        if (ValueAtIndex)
        {
          v36 = CFGetTypeID(ValueAtIndex);
          if (v36 == CFNumberGetTypeID() && (ctu::cf::assign((ctu::cf *)&v48, v35, v37) & 1) != 0)
          {
            v38 = (uint64_t *)CFArrayGetValueAtIndex(v26, i);
            v39 = v38;
            if (v38)
            {
              v40 = CFGetTypeID(v38);
              if (v40 == CFNumberGetTypeID())
              {
                if (ctu::cf::assign((ctu::cf *)&v55, v39, v41))
                {
                  v42 = v48;
                  v43 = v55;
                  v45 = *((_QWORD *)this + 10);
                  v44 = *((_QWORD *)this + 11);
                  if (0xAAAAAAAAAAAAAAABLL * ((v44 - v45) >> 3) == *((_QWORD *)this + 14))
                  {
                    if (v44 != v45)
                    {
                      v46 = *((_QWORD *)this + 13);
                      *(_BYTE *)(v46 + 8) = v48;
                      *(_QWORD *)(v46 + 16) = v43;
                      v47 = *((_QWORD *)this + 13) + 24;
                      *((_QWORD *)this + 13) = v47;
                      if (v47 == *((_QWORD *)this + 11))
                      {
                        v47 = *((_QWORD *)this + 10);
                        *((_QWORD *)this + 13) = v47;
                      }
                      *((_QWORD *)this + 12) = v47;
                    }
                  }
                  else
                  {
                    v32 = *((_QWORD *)this + 13);
                    *(_QWORD *)v32 = &unk_1E7917288;
                    *(_BYTE *)(v32 + 8) = v42;
                    *(_QWORD *)(v32 + 16) = v43;
                    v33 = *((_QWORD *)this + 13) + 24;
                    *((_QWORD *)this + 13) = v33;
                    if (v33 == *((_QWORD *)this + 11))
                      *((_QWORD *)this + 13) = *((_QWORD *)this + 10);
                    ++*((_QWORD *)this + 14);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v26)
    CFRelease(v26);
  if (v25)
    CFRelease(v25);
  MEMORY[0x1C3B8B8B4](__p);
  if (v24)
    CFRelease(v24);
}

void sub_1BF679850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  operator delete(v22);
  pthread_mutex_unlock(&ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance);
  _Unwind_Resume(a1);
}

void HealthEventDB::~HealthEventDB(HealthEventDB *this)
{
  unint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;

  *(_QWORD *)this = off_1E791B310;
  if (*((_QWORD *)this + 14))
  {
    v2 = 0;
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 12);
    do
    {
      (**v3)(v3);
      v4 = (void (***)(_QWORD))*((_QWORD *)this + 11);
      v3 = (void (***)(_QWORD))(*((_QWORD *)this + 12) + 24);
      *((_QWORD *)this + 12) = v3;
      if (v3 == v4)
      {
        v3 = (void (***)(_QWORD))*((_QWORD *)this + 10);
        *((_QWORD *)this + 12) = v3;
      }
      ++v2;
    }
    while (v2 < *((_QWORD *)this + 14));
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
    operator delete(v5);
  *(_QWORD *)this = off_1E791B3B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  unint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void *v5;

  *(_QWORD *)this = off_1E791B310;
  if (*((_QWORD *)this + 14))
  {
    v2 = 0;
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 12);
    do
    {
      (**v3)(v3);
      v4 = (void (***)(_QWORD))*((_QWORD *)this + 11);
      v3 = (void (***)(_QWORD))(*((_QWORD *)this + 12) + 24);
      *((_QWORD *)this + 12) = v3;
      if (v3 == v4)
      {
        v3 = (void (***)(_QWORD))*((_QWORD *)this + 10);
        *((_QWORD *)this + 12) = v3;
      }
      ++v2;
    }
    while (v2 < *((_QWORD *)this + 14));
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
    operator delete(v5);
  *(_QWORD *)this = off_1E791B3B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791B3B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<HealthEventDB,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791B3B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::cf::insert<char const*,__CFArray *>(__CFDictionary *a1, const __CFString **a2, const void *a3, uint64_t a4, const __CFAllocator *a5)
{
  CFTypeRef v7;
  CFTypeRef cf;

  cf = 0;
  ctu::cf::convert_copy((ctu::cf *)&cf, a2, (const char *)0x8000100, a4, a5);
  v7 = cf;
  cf = a3;
  if (a3)
  {
    CFRetain(a3);
    if (v7)
      CFDictionaryAddValue(a1, v7, a3);
    CFRelease(a3);
  }
  if (v7)
    CFRelease(v7);
}

void sub_1BF679C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF679C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_5()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<SharedData>::~PthreadMutexGuardPolicy, &ctu::Singleton<SharedData,SharedData,ctu::PthreadMutexGuardPolicy<SharedData>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t asString@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  _BYTE *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *__src[2];
  void *__p[2];
  __int128 v32;
  __int128 v33;
  _OWORD v34[9];
  unint64_t v35;

  v35 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v34[7] = v4;
  v34[8] = v4;
  v34[5] = v4;
  v34[6] = v4;
  v34[3] = v4;
  v34[4] = v4;
  v34[1] = v4;
  v34[2] = v4;
  v33 = v4;
  v34[0] = v4;
  *(_OWORD *)__p = v4;
  v32 = v4;
  v29 = v4;
  *(_OWORD *)__src = v4;
  v27 = v4;
  v28 = v4;
  v26 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v26);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Time: ", 6);
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = a1;
  else
    v7 = *(_QWORD *)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; Mode: ", 8);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"; Action: ", 10);
  v14 = *(_QWORD *)(a1 + 32);
  v13 = a1 + 32;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  if ((BYTE8(v33) & 0x10) != 0)
  {
    v19 = (_BYTE *)v33;
    if ((void *)v33 < __src[1])
    {
      *(void **)&v33 = __src[1];
      v19 = __src[1];
    }
    v20 = __src[0];
    v18 = v19 - (char *)__src[0];
    if ((unint64_t)(v19 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_30;
  }
  else
  {
    if ((BYTE8(v33) & 8) == 0)
    {
      v18 = 0;
      a2[23] = 0;
      goto LABEL_26;
    }
    v20 = (const void *)*((_QWORD *)&v28 + 1);
    v18 = *((_QWORD *)&v29 + 1) - *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v29 + 1) - *((_QWORD *)&v28 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_30:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v23 = operator new(v21 + 1);
    *((_QWORD *)a2 + 1) = v18;
    *((_QWORD *)a2 + 2) = v22 | 0x8000000000000000;
    *(_QWORD *)a2 = v23;
    a2 = v23;
    goto LABEL_25;
  }
  a2[23] = v18;
  if (v18)
LABEL_25:
    memmove(a2, v20, v18);
LABEL_26:
  a2[v18] = 0;
  *(_QWORD *)&v26 = *MEMORY[0x1E0DE4F50];
  v24 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v26 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v27 = v24;
  *((_QWORD *)&v27 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v32) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8C364](v34);
}

void sub_1BF679EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BBLogTracker::addLog(uint64_t **a1, __int128 *a2, int a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  std::string *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::string *v17;
  unint64_t v18;
  int v19;
  __int128 *v20;

  v19 = a3;
  v17 = (std::string *)0xAAAAAAAAAAAAAAAALL;
  v18 = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>((uint64_t)a2, &v19, a4, &v17);
  v20 = a2;
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)a2, (uint64_t)&std::piecewise_construct, &v20);
  v8 = v17;
  v7 = (uint64_t *)v18;
  if (v18)
  {
    v9 = (unint64_t *)(v18 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)v6[8];
  v6[7] = (uint64_t *)v8;
  v6[8] = v7;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)v18;
  if (v18)
  {
    v15 = (unint64_t *)(v18 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BF679FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::getLog@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a3 = 0;
  a3[1] = 0;
  result = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(a1, a2);
  if ((uint64_t *)(a1 + 8) != result)
  {
    v7 = result[7];
    v6 = result[8];
    if (v6)
    {
      v8 = (unint64_t *)(v6 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *a3 = v7;
    a3[1] = v6;
  }
  return result;
}

void sub_1BF67A028(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *BBLogTracker::limitLogs(uint64_t *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t *v3;

  v2 = a2;
  if (this[2] > (unint64_t)a2)
  {
    v3 = this;
    do
      this = std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(v3, *v3);
    while (v3[2] > v2);
  }
  return this;
}

void BBLogTracker::getLastLog(BBLogTracker *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  __darwin_time_t tv_sec;
  __darwin_suseconds_t tv_usec;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const void *v28;
  _QWORD *v29;
  const void *v30;
  int v31;
  const void *v32;
  size_t v33;
  int v34;
  void *v35;
  _QWORD *v36;
  size_t v37;
  size_t v38;
  int v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD v47[2];
  unsigned __int8 v48;
  _QWORD v49[3];
  timeval v50;

  *a3 = 0;
  a3[1] = 0;
  if (!*((_QWORD *)this + 2))
    return;
  if (a2)
  {
    v50.tv_sec = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v50.tv_usec = 0xAAAAAAAAAAAAAAAALL;
    gettimeofday(&v50, 0);
    tv_sec = v50.tv_sec;
    tv_usec = v50.tv_usec;
    if (v50.tv_usec >= 0)
      v8 = v50.tv_usec;
    else
      v8 = (v50.tv_usec + 1000000);
    memset(v49, 170, sizeof(v49));
    Timestamp::Timestamp((Timestamp *)v49);
    if (v49[1])
    {
      v9 = (uint64_t *)v49[1];
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v9;
          v12 = *((_DWORD *)v9 + 8);
          if (v12 < 1)
            break;
          v9 = *v11;
          v10 = v11;
          if (!*v11)
            goto LABEL_22;
        }
        if ((v12 & 0x80000000) == 0)
          break;
        v9 = v11[1];
        if (!v9)
        {
          v10 = v11 + 1;
          goto LABEL_22;
        }
      }
      v21 = v11;
    }
    else
    {
      v10 = (uint64_t **)&v49[1];
      v11 = (uint64_t **)&v49[1];
LABEL_22:
      v21 = operator new(0x38uLL);
      v21[8] = 0;
      *((_QWORD *)v21 + 5) = 0;
      *((_QWORD *)v21 + 6) = 0;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = v11;
      *v10 = (uint64_t *)v21;
      v22 = (uint64_t *)v21;
      if (*(_QWORD *)v49[0])
      {
        v49[0] = *(_QWORD *)v49[0];
        v22 = *v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v49[1], v22);
      ++v49[2];
    }
    *((_QWORD *)v21 + 5) = tv_sec - a2 + (tv_usec >> 31);
    *((_QWORD *)v21 + 6) = v8 | 0xAAAAAAAA00000000;
    v25 = (_QWORD *)*((_QWORD *)this + 1);
    v24 = (_QWORD *)((char *)this + 8);
    v23 = v25;
    if (v25)
    {
      do
      {
        v26 = v23;
        v23 = (_QWORD *)v23[1];
      }
      while (v23);
    }
    else
    {
      v27 = v24;
      do
      {
        v26 = (_QWORD *)v27[2];
        v16 = *v26 == (_QWORD)v27;
        v27 = v26;
      }
      while (v16);
    }
    Timestamp::asString((uint64_t)v49, 0, 9, v47);
    v30 = (const void *)v26[4];
    v29 = v26 + 4;
    v28 = v30;
    v31 = *((char *)v29 + 23);
    if (v31 >= 0)
      v32 = v29;
    else
      v32 = v28;
    if (v31 >= 0)
      v33 = *((unsigned __int8 *)v29 + 23);
    else
      v33 = v29[1];
    v34 = (char)v48;
    v35 = (void *)v47[0];
    if ((v48 & 0x80u) == 0)
      v36 = v47;
    else
      v36 = (_QWORD *)v47[0];
    if ((v48 & 0x80u) == 0)
      v37 = v48;
    else
      v37 = v47[1];
    if (v37 >= v33)
      v38 = v33;
    else
      v38 = v37;
    v39 = memcmp(v32, v36, v38);
    if (v39)
    {
      if ((v39 & 0x80000000) == 0)
        goto LABEL_47;
    }
    else if (v33 >= v37)
    {
LABEL_47:
      v40 = 1;
      if ((v34 & 0x80000000) == 0)
      {
LABEL_49:
        if (v40)
        {
          v41 = (_QWORD *)*v24;
          if (*v24)
          {
            do
            {
              v42 = v41;
              v41 = (_QWORD *)v41[1];
            }
            while (v41);
          }
          else
          {
            do
            {
              v42 = (_QWORD *)v24[2];
              v16 = *v42 == (_QWORD)v24;
              v24 = v42;
            }
            while (v16);
          }
          v44 = v42[7];
          v43 = v42[8];
          if (v43)
          {
            v45 = (unint64_t *)(v43 + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          *a3 = v44;
          a3[1] = v43;
        }
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v49, (_QWORD *)v49[1]);
        return;
      }
LABEL_48:
      operator delete(v35);
      goto LABEL_49;
    }
    v40 = 0;
    if ((v34 & 0x80000000) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v14 = (char *)this + 8;
  v13 = (char *)*((_QWORD *)this + 1);
  if (v13)
  {
    do
    {
      v15 = v13;
      v13 = (char *)*((_QWORD *)v13 + 1);
    }
    while (v13);
  }
  else
  {
    do
    {
      v15 = (char *)*((_QWORD *)v14 + 2);
      v16 = *(_QWORD *)v15 == (_QWORD)v14;
      v14 = v15;
    }
    while (v16);
  }
  v18 = *((_QWORD *)v15 + 7);
  v17 = *((_QWORD *)v15 + 8);
  if (v17)
  {
    v19 = (unint64_t *)(v17 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  *a3 = v18;
  a3[1] = v17;
}

void sub_1BF67A334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  _QWORD *v5;
  va_list va;

  va_start(va, a4);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)va, v5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void sub_1BF67A360(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BBLogTracker::count(BBLogTracker *this)
{
  return *((unsigned int *)this + 4);
}

void std::allocate_shared[abi:ne180100]<LogInfo,std::allocator<LogInfo>,std::string const&,abm::helper::SystemLogsMode &,std::string const&,void>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, std::string **a4@<X8>)
{
  std::string *v8;
  std::string *v9;
  std::string *v10;
  int v11;
  std::string *v12;

  v8 = (std::string *)operator new(0x50uLL);
  v9 = v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E791B3F8;
  v10 = v8 + 1;
  v11 = *a2;
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8 + 1, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v8[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  LODWORD(v9[2].__r_.__value_.__l.__data_) = v11;
  v12 = (std::string *)((char *)v9 + 56);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9[3].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 16);
  }
  *a4 = v10;
  a4[1] = v9;
}

void sub_1BF67A444(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
    operator delete(v4);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791B3F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LogInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791B3F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<LogInfo>::__on_zero_shared(uint64_t a1)
{
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(*(void **)(a1 + 24));
    return;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_5;
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::string *v22;
  __int128 *v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t *v26;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    while (1)
    {
      v11 = (uint64_t **)v6;
      v14 = (const void *)v6[4];
      v12 = v6 + 4;
      v13 = v14;
      v15 = *((char *)v12 + 23);
      if (v15 >= 0)
        v16 = v12;
      else
        v16 = v13;
      if (v15 >= 0)
        v17 = *((unsigned __int8 *)v12 + 23);
      else
        v17 = v12[1];
      if (v17 >= v10)
        v18 = v10;
      else
        v18 = v17;
      v19 = memcmp(v9, v16, v18);
      if (v19)
      {
        if (v19 < 0)
          goto LABEL_8;
LABEL_22:
        v20 = memcmp(v16, v9, v18);
        if (v20)
        {
          if ((v20 & 0x80000000) == 0)
            return v11;
        }
        else if (v17 >= v10)
        {
          return v11;
        }
        v6 = v11[1];
        if (!v6)
        {
          v7 = v11 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v10 >= v17)
          goto LABEL_22;
LABEL_8:
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_29;
      }
    }
  }
  v11 = a1 + 1;
LABEL_29:
  v21 = operator new(0x48uLL);
  v22 = (std::string *)(v21 + 4);
  v23 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v22, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
  }
  else
  {
    v24 = *v23;
    v21[6] = *((_QWORD *)v23 + 2);
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v24;
  }
  v21[7] = 0;
  v21[8] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v25 = (uint64_t *)**a1;
  v26 = v21;
  if (v25)
  {
    *a1 = v25;
    v26 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v26);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v21;
}

void sub_1BF67A67C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 64);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if ((*(char *)(a2 + 55) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  if (*(char *)(a2 + 55) < 0)
LABEL_14:
    operator delete(*(void **)(a2 + 32));
LABEL_15:
  operator delete((void *)a2);
  return v4;
}

_QWORD *PowerManager::PowerManager(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = off_1E791B448;
  v3 = a1 + 1;
  v4 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  PowerManager::State::create(&v8, v3);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v9;

  *a1 = off_1E791B448;
  v3 = a1 + 1;
  v4 = (std::__shared_weak_count *)a2[1];
  v8 = *a2;
  v9 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  PowerManager::State::create(&v8, v3);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  PowerManager::State::init((PowerManager::State *)*v3);
  return a1;
}

void sub_1BF67A7E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF67A7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v4 = operator new(0x120uLL);
  v5 = (uint64_t)v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v9 = *a1;
  v10 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  PowerManager::State::State((uint64_t)v4, &v9);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(a2, v5);
  ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

void sub_1BF67A8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v10);
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(a1);
}

void PowerManager::State::init(PowerManager::State *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN12PowerManager5State4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_11_5;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  block[3] = &__block_descriptor_tmp_12_5;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF67AAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v12 = *(std::__shared_weak_count **)(v10 + 16);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  _Unwind_Resume(exception_object);
}

void PowerManager::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = operator new(0x18uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *v4 = off_1E791B448;
    v12 = v6;
    v13 = v7;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  else
  {
    *v4 = off_1E791B448;
    v12 = v6;
    v13 = 0;
  }
  PowerManager::State::create(&v12, v4 + 1);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  PowerManager::State::init((PowerManager::State *)v5[1]);
  *a2 = v5;
  v11 = operator new(0x20uLL);
  *v11 = off_1E791B9C0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v5;
  a2[1] = v11;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF67ABD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

void PowerManager::registerForPowerEvents(uint64_t a1, const void **a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD v5[5];
  void *aBlock;

  v2 = *(_QWORD *)(a1 + 8);
  if (*a2)
    v3 = _Block_copy(*a2);
  else
    v3 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke;
  v5[3] = &__block_descriptor_tmp_17_2;
  v5[4] = v2;
  if (v3)
    v4 = _Block_copy(v3);
  else
    v4 = 0;
  aBlock = v4;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v5);
  if (aBlock)
    _Block_release(aBlock);
  if (v3)
    _Block_release(v3);
}

void PowerManager::createPowerAssertion(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject **a4@<X8>)
{
  _QWORD *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  std::string *v13;
  dispatch_group_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  std::string v20;
  _QWORD *v21;
  std::string __p;
  uint64_t v23;
  dispatch_group_t group;

  v6 = *(_QWORD **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  v7 = dispatch_group_create();
  *a4 = v7;
  v21 = v6;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    __p = v20;
  v23 = a3;
  group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    if (group)
      dispatch_group_enter(group);
  }
  v8 = (std::__shared_weak_count *)v6[10];
  if (!v8 || (v9 = v6[9], (v10 = std::__shared_weak_count::lock(v8)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  v12 = operator new(0x30uLL);
  *v12 = v21;
  v13 = (std::string *)(v12 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v13, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v14 = group;
  v12[4] = v23;
  v12[5] = v14;
  group = 0;
  v15 = v6[11];
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  v18 = operator new(0x18uLL);
  *v18 = v12;
  v18[1] = v9;
  v18[2] = v11;
  dispatch_async_f(v15, v18, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(v20.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
}

void sub_1BF67AF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  NSObject *v14;

  if (v14)
  {
    dispatch_release(v14);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PowerManager::initialize(PowerManager *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *((_QWORD *)this + 1);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State10initializeEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_33_8;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::shutdown(PowerManager *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *((_QWORD *)this + 1);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN12PowerManager5State8shutdownEv_block_invoke;
  v2[3] = &__block_descriptor_tmp_34_3;
  v2[4] = v1;
  ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
}

void PowerManager::~PowerManager(PowerManager *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E791B448;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E791B448;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF67B1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF67B204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<PowerManager::State>::shared_ptr[abi:ne180100]<PowerManager::State,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791B4B8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF67B320(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF67B340(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<PowerManager::State *,std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State *)#1},std::allocator<PowerManager::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shar"
                                "ed_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN12PowerManager5StateEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<PowerManager::State> ctu::SharedSynchronizable<PowerManager::State>::make_shared_ptr<PowerManager::State>(PowerManager::State*)::{lambda(PowerManager::State*)#1}::operator() const(PowerManager::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t PowerManager::State::State(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *initially_inactive;
  NSObject *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  PowerStats *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  *(_QWORD *)a1 = off_1E791B508;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "power.mgr");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v6 = GetABMLogServer(void)::sLogServer;
    v5 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v6 = GetABMLogServer(void)::sLogServer;
    v5 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_4:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2("power.mgr", initially_inactive, 0);
  dispatch_set_qos_class_floor(v10, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v10);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v10;
  if (v10)
  {
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E791B618;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 8) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)a1 = off_1E791B5D8;
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)a1 = off_1E791B5D8;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E791B508;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0x200000001;
  *(_DWORD *)(a1 + 128) = -536870144;
  v14 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v14);
  *(_QWORD *)(a1 + 136) = v14;
  v15 = operator new(0x20uLL);
  *v15 = off_1E7920B18;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = v14;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 144) = v15;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = a1 + 208;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 272) = *a2;
  v16 = a2[1];
  *(_QWORD *)(a1 + 280) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 16);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  ctu::LoggerCommonBase::setLogLevel();
  return a1;
}

void sub_1BF67B740(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const void **v6;
  std::__shared_weak_count *v8;
  const void *v9;

  v8 = *(std::__shared_weak_count **)(v1 + 280);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v1 + 256));
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*(_QWORD *)(v1 + 232));
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*(_QWORD *)(v1 + 208));
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v4);
  v9 = *(const void **)(v1 + 160);
  if (v9)
    _Block_release(v9);
  if (*v6)
    _Block_release(*v6);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_1BF67B7B8()
{
  PowerStats *v0;

  PowerStats::~PowerStats(v0);
}

void sub_1BF67B7C4()
{
  _QWORD *v0;
  _Unwind_Exception *v1;
  uint64_t v2;
  void *v3;

  operator delete(v3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v0);
  _Unwind_Resume(v1);
}

void sub_1BF67B7EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1BF67B808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791B618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791B618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void PowerManager::State::~State(PowerManager::State *this)
{
  void *v1;

  PowerManager::State::~State(this);
  operator delete(v1);
}

{
  uint64_t v2;
  const void *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *v20;
  NSObject *v21;
  std::__shared_weak_count *v22;
  uint8_t v23[16];

  *(_QWORD *)this = off_1E791B508;
  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, 1);
    v3 = (const void *)*((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v3)
      _Block_release(v3);
  }
  v4 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Gone!", v23, 2u);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((char **)this + 32));
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*((_QWORD *)this + 29));
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(*((_QWORD *)this + 26));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (!v9)
    goto LABEL_17;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_17:
    v12 = (const void *)*((_QWORD *)this + 20);
    if (!v12)
      goto LABEL_19;
    goto LABEL_18;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v12 = (const void *)*((_QWORD *)this + 20);
  if (v12)
LABEL_18:
    _Block_release(v12);
LABEL_19:
  v13 = (const void *)*((_QWORD *)this + 19);
  if (v13)
    _Block_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_QWORD *)this = off_1E791B618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v20 = *((_QWORD *)this + 12);
  if (v20)
    dispatch_release(v20);
  v21 = *((_QWORD *)this + 11);
  if (v21)
    dispatch_release(v21);
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "power.mgr");
}

uint64_t ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void ctu::SharedLoggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791B618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791B618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<PowerManager::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791B618;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(char *a1)
{
  NSObject *v2;
  NSObject *v3;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = *((_QWORD *)a1 + 7);
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = *((_QWORD *)a1 + 7);
      if (v3)
        dispatch_release(v3);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15;
  void *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  NSObject *v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v34;
  __int128 v35;
  uint8_t v36[16];
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, int);
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44;
  void *v45;
  void *v46;
  std::string __p;
  uint8_t buf[16];
  _QWORD aBlock[4];
  __int128 v50;
  std::__shared_weak_count *v51;
  __int128 v52;
  __int128 v53;
  std::string v54;

  v54.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = v2;
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v2;
  v52 = v2;
  v3 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN12PowerManager5State4initEv_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_23;
  v35 = *(_OWORD *)(a1 + 32);
  v50 = v35;
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  v51 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = _Block_copy(aBlock);
  v8 = *(NSObject **)(v35 + 88);
  *(_QWORD *)&v52 = 1;
  *((_QWORD *)&v52 + 1) = v8;
  if (v8)
    dispatch_retain(v8);
  if (v7)
  {
    v53 = (unint64_t)_Block_copy(v7);
    v54.__r_.__value_.__r.__words[0] = 5063233;
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 3;
    _Block_release(v7);
  }
  else
  {
    v53 = 0uLL;
    v54.__r_.__value_.__r.__words[0] = 5063233;
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 3;
  }
  ctu::power::manager::get((ctu::power::manager *)v8);
  v9 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v10 = *(std::__shared_weak_count **)(v35 + 176);
  *(_OWORD *)(v35 + 168) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (*(_QWORD *)&buf[8])
  {
    v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[8] + 16))(*(_QWORD *)&buf[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  v44 = v52;
  if (*((_QWORD *)&v52 + 1))
    dispatch_retain(*((dispatch_object_t *)&v52 + 1));
  v15 = (void *)v53;
  if ((_QWORD)v53)
    v15 = _Block_copy((const void *)v53);
  v45 = v15;
  v16 = (void *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
    v16 = _Block_copy(*((const void **)&v53 + 1));
  v46 = v16;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    __p = v54;
  ctu::power::manager::registerListener();
  v17 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v18 = *(std::__shared_weak_count **)(v35 + 192);
  *(_OWORD *)(v35 + 184) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_37;
  v22 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
  {
LABEL_37:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_41:
    operator delete(__p.__r_.__value_.__l.__data_);
    v24 = v46;
    if (!v46)
      goto LABEL_43;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_41;
LABEL_38:
  v24 = v46;
  if (v46)
LABEL_42:
    _Block_release(v24);
LABEL_43:
  if (v45)
    _Block_release(v45);
  if (*((_QWORD *)&v44 + 1))
    dispatch_release(*((dispatch_object_t *)&v44 + 1));
  v25 = *(NSObject **)(v35 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v25, OS_LOG_TYPE_DEFAULT, "#I Registered power listener", buf, 2u);
  }
  memset(buf, 170, sizeof(buf));
  abm::AWDHelperGetConnection(buf);
  if (*(_QWORD *)buf)
  {
    v37 = v3;
    v38 = 1174405120;
    v39 = ___ZN12PowerManager5State4initEv_block_invoke_5;
    v40 = &__block_descriptor_tmp_10_3;
    v27 = *(_QWORD *)(a1 + 40);
    v26 = *(std::__shared_weak_count **)(a1 + 48);
    v41 = v35;
    v42 = v27;
    v43 = v26;
    if (v26)
    {
      v28 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    wis::WISServerConnection::RegisterQueriableMetricCallbackForIdentifier();
    if (v43)
    {
      std::__shared_weak_count::__release_weak(v43);
      v30 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_62;
      goto LABEL_58;
    }
  }
  else
  {
    v31 = *(NSObject **)(v35 + 40);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v36 = 0;
      _os_log_error_impl(&dword_1BF566000, v31, OS_LOG_TYPE_ERROR, "AWD connection setup failed", v36, 2u);
      v30 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_62;
      goto LABEL_58;
    }
  }
  v30 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_62;
LABEL_58:
  v32 = (unint64_t *)&v30->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
LABEL_62:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v54.__r_.__value_.__l.__data_);
    v34 = (const void *)*((_QWORD *)&v53 + 1);
    if (!*((_QWORD *)&v53 + 1))
      goto LABEL_67;
    goto LABEL_66;
  }
  v34 = (const void *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
LABEL_66:
    _Block_release(v34);
LABEL_67:
  if ((_QWORD)v53)
    _Block_release((const void *)v53);
  if (*((_QWORD *)&v52 + 1))
    dispatch_release(*((dispatch_object_t *)&v52 + 1));
  if (v51)
    std::__shared_weak_count::__release_weak(v51);
}

void sub_1BF67C0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, char a20,dispatch_object_t object,void *a22,void *aBlock,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  uint64_t v36;
  std::__shared_weak_count *v38;

  if (aBlock)
    _Block_release(aBlock);
  if (a22)
    _Block_release(a22);
  if (object)
  {
    dispatch_release(object);
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    v38 = a36;
    if (!a36)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else
  {
    ctu::power::manager::parameters::~parameters((void **)(v36 - 128));
    v38 = a36;
    if (!a36)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v38);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_2(_QWORD *a1, ctu::power::manager *a2, const void **a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v8;
  void (**v9)(void *, uint64_t);
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_weak_owners;
  unint64_t v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  const void *v52;
  int v53;
  _QWORD block[5];
  dispatch_object_t object;
  void *aBlock;
  uint64_t v57;
  std::__shared_weak_count *v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  _BYTE buf[12];
  __int16 v65;
  _BYTE v66[24];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  const char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = a1[4];
  v6 = (std::__shared_weak_count *)a1[6];
  if (!v6)
  {
    v8 = 0;
    goto LABEL_7;
  }
  v8 = std::__shared_weak_count::lock(v6);
  if (!v8 || !a1[5])
  {
LABEL_7:
    (*((void (**)(void))*a3 + 2))();
    if (!v8)
      return;
    goto LABEL_96;
  }
  if (*a3)
    v9 = (void (**)(void *, uint64_t))_Block_copy(*a3);
  else
    v9 = 0;
  v10 = *(_DWORD *)(v5 + 120);
  v11 = *(_QWORD *)(v5 + 124);
  v53 = v11;
  HIDWORD(v12) = (_DWORD)a2;
  LODWORD(v12) = (_DWORD)a2 + 536870288;
  switch((v12 >> 4))
  {
    case 0u:
      if (v10 != 1)
        goto LABEL_34;
      v13 = 0;
      v14 = 1;
      if (*(_QWORD *)(v5 + 216))
        goto LABEL_31;
      goto LABEL_49;
    case 1u:
      if (v10 != 1)
        goto LABEL_34;
      v14 = 0;
      v13 = v11 != 0;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
      goto LABEL_31;
    case 2u:
      if (!(_DWORD)v11)
        goto LABEL_24;
      goto LABEL_34;
    case 9u:
      if (v10)
        v15 = 0;
      else
        v15 = (_DWORD)v11 == 2;
      if (!v15)
        goto LABEL_34;
LABEL_24:
      v13 = 2;
      v14 = 1;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
      goto LABEL_31;
    case 0xBu:
      if (v10)
        v16 = 1;
      else
        v16 = (_DWORD)v11 == 2;
      if (v16)
        goto LABEL_34;
      v14 = 0;
      v13 = 2;
      if (!*(_QWORD *)(v5 + 216))
        goto LABEL_49;
LABEL_31:
      if ((_DWORD)a2 == -536870288)
        goto LABEL_34;
      if ((_DWORD)a2 != -536870272)
      {
LABEL_49:
        *(_DWORD *)(v5 + 120) = v14;
        *(_DWORD *)(v5 + 124) = v13;
        *(_DWORD *)(v5 + 128) = (_DWORD)a2;
        v26 = *(_QWORD *)(v5 + 136);
        v61 = (int)a2;
        v62 = v10;
        v63 = v11;
        v60 = __PAIR64__(v13, v14);
        PowerStats::reportSystemStateChange(v26, (uint64_t)&v62, (uint64_t *)&v60);
        v27 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v28 = ctu::power::manager::asCString(a2);
          v29 = "Unknown";
          v30 = "PoweredOn";
          v31 = *(_DWORD *)(v5 + 120);
          v32 = *(int *)(v5 + 124);
          if (v31 != 1)
            v30 = "Unknown";
          if (!v31)
            v30 = "LowPower";
          if (v32 <= 2)
            v29 = off_1E791BA00[v32];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v28;
          v65 = 2080;
          *(_QWORD *)v66 = v30;
          *(_WORD *)&v66[8] = 2080;
          *(_QWORD *)&v66[10] = v29;
          _os_log_impl(&dword_1BF566000, v27, OS_LOG_TYPE_DEFAULT, "#I Power notification: %s, Power state: %s, Sleep state: %s", buf, 0x20u);
        }
        v33 = *(_DWORD *)(v5 + 128);
        switch(v33)
        {
          case -536870144:
            goto LABEL_60;
          case -536870256:
            v9[2](v9, 1);
            v46 = *(_QWORD *)(v5 + 264);
            if (v46)
            {
              v47 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v46;
                _os_log_impl(&dword_1BF566000, v47, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (after WillNotSleep); count=%zd",
                  buf,
                  0xCu);
              }
              std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
              *(_QWORD *)(v5 + 256) = 0;
              *(_QWORD *)(v5 + 264) = 0;
              *(_QWORD *)(v5 + 248) = v5 + 256;
            }
            break;
          case -536870272:
LABEL_60:
            v34 = *(unsigned int *)(v5 + 120);
            v35 = dispatch_group_create();
            v36 = *(_QWORD *)(v5 + 152);
            if (v36)
            {
              if (v35)
              {
                dispatch_retain(v35);
                dispatch_group_enter(v35);
                v36 = *(_QWORD *)(v5 + 152);
              }
              *(_QWORD *)buf = v35;
              (*(void (**)(uint64_t, uint64_t, _BYTE *))(v36 + 16))(v36, v34, buf);
              if (*(_QWORD *)buf)
              {
                dispatch_group_leave(*(dispatch_group_t *)buf);
                if (*(_QWORD *)buf)
                  dispatch_release(*(dispatch_object_t *)buf);
              }
            }
            v37 = *(std::__shared_weak_count **)(v5 + 80);
            if (!v37 || (v38 = *(_QWORD *)(v5 + 72), (v39 = std::__shared_weak_count::lock(v37)) == 0))
              std::__throw_bad_weak_ptr[abi:ne180100]();
            v40 = v39;
            p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
            do
              v42 = __ldxr(p_shared_weak_owners);
            while (__stxr(v42 + 1, p_shared_weak_owners));
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v40);
            }
            block[0] = MEMORY[0x1E0C809B0];
            block[1] = 1174405120;
            block[2] = ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke;
            block[3] = &__block_descriptor_tmp_15_3;
            block[4] = v5;
            object = v35;
            if (v35)
              dispatch_retain(v35);
            if (v9)
              v45 = _Block_copy(v9);
            else
              v45 = 0;
            aBlock = v45;
            v57 = v38;
            v58 = v40;
            do
              v48 = __ldxr(p_shared_weak_owners);
            while (__stxr(v48 + 1, p_shared_weak_owners));
            v59 = v34;
            dispatch_group_notify(v35, *(dispatch_queue_t *)(v5 + 88), block);
            if (v58)
              std::__shared_weak_count::__release_weak(v58);
            if (aBlock)
              _Block_release(aBlock);
            if (object)
              dispatch_release(object);
            std::__shared_weak_count::__release_weak(v40);
            if (v35)
              dispatch_release(v35);
LABEL_94:
            if (!v9)
              goto LABEL_96;
            break;
          default:
            v9[2](v9, 1);
            break;
        }
LABEL_95:
        _Block_release(v9);
        goto LABEL_96;
      }
      if (*(_QWORD *)(v5 + 264))
      {
LABEL_34:
        v9[2](v9, 0);
        v17 = 0;
        v18 = *(NSObject **)(v5 + 40);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          goto LABEL_42;
        goto LABEL_35;
      }
      if (v9)
        v51 = _Block_copy(v9);
      else
        v51 = 0;
      v52 = *(const void **)(v5 + 160);
      *(_QWORD *)(v5 + 160) = v51;
      if (v52)
        _Block_release(v52);
      v17 = 1;
      v18 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_35:
        v19 = ctu::power::manager::asCString(a2);
        v20 = *(_QWORD *)(v5 + 216);
        v21 = "Unknown";
        v22 = *(_QWORD *)(v5 + 264);
        if (v10 == 1)
          v21 = "PoweredOn";
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v19;
        v65 = 1024;
        if (!v10)
          v21 = "LowPower";
        *(_DWORD *)v66 = v53;
        v23 = "false";
        *(_WORD *)&v66[4] = 2080;
        *(_QWORD *)&v66[6] = v21;
        *(_WORD *)&v66[14] = 2048;
        if (v17)
          v23 = "true";
        *(_QWORD *)&v66[16] = v20;
        v67 = 2048;
        v68 = v22;
        v69 = 2080;
        v70 = v23;
        _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I Cannot accept notification: %s, SleepState: %u, PowerState: %s, Assertions: %lu, Assertions-deferred: %lu, Deferred-ack: %s", buf, 0x3Au);
      }
LABEL_42:
      if ((_DWORD)a2 != -536870144 && (_DWORD)a2 != -536870256)
        goto LABEL_94;
      v24 = *(_QWORD *)(v5 + 264);
      if (!v24)
        goto LABEL_94;
      v25 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v24;
        _os_log_impl(&dword_1BF566000, v25, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run (skipping power event); count=%zd",
          buf,
          0xCu);
      }
      std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v5 + 256));
      *(_QWORD *)(v5 + 256) = 0;
      *(_QWORD *)(v5 + 264) = 0;
      *(_QWORD *)(v5 + 248) = v5 + 256;
      if (v9)
        goto LABEL_95;
LABEL_96:
      v49 = (unint64_t *)&v8->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      return;
    default:
      goto LABEL_34;
  }
}

void sub_1BF67C894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,dispatch_group_t group)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN12PowerManager5State4initEv_block_invoke_5(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[5];
  int v11;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v10[0] = MEMORY[0x1E0C809B0];
        v10[1] = 0x40000000;
        v10[2] = ___ZN12PowerManager5State4initEv_block_invoke_2_6;
        v10[3] = &__block_descriptor_tmp_8_3;
        v10[4] = v5;
        v11 = a2;
        ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v5 + 72), (uint64_t)v10);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN12PowerManager5State4initEv_block_invoke_2_6(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 40) == 524466)
    PowerStats::submitLowPowerStatsMetric_sync(*(os_log_t **)(*(_QWORD *)(a1 + 32) + 136));
}

void ___ZN12PowerManager5State28handlePowerNotification_syncEN8dispatch5blockIU13block_pointerFvbEEEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 56))
      {
        if (*(_DWORD *)(a1 + 72) == 1)
        {
          v6 = *(_QWORD *)(v2 + 264);
          if (v6)
          {
            v7 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            {
              v10 = 134217984;
              v11 = v6;
              _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Allowing deferred work to run; count=%zd",
                (uint8_t *)&v10,
                0xCu);
            }
            std::__tree<std::__value_type<std::string,dispatch::group_session>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::group_session>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::group_session>>>::destroy(*(char **)(v2 + 256));
            *(_QWORD *)(v2 + 256) = 0;
            *(_QWORD *)(v2 + 264) = 0;
            *(_QWORD *)(v2 + 248) = v2 + 256;
          }
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void *__copy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(_QWORD *a1, _QWORD *a2)
{
  NSObject *v4;
  void *result;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v4 = a2[5];
  a1[5] = v4;
  if (v4)
    dispatch_retain(v4);
  result = (void *)a2[6];
  if (result)
    result = _Block_copy(result);
  v7 = a2[7];
  v6 = a2[8];
  a1[6] = result;
  a1[7] = v7;
  a1[8] = v6;
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void __destroy_helper_block_e8_40c21_ZTSN8dispatch5groupE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE56c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  const void *v3;
  NSObject *v4;

  v2 = (std::__shared_weak_count *)a1[8];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (const void *)a1[6];
  if (v3)
    _Block_release(v3);
  v4 = a1[5];
  if (v4)
    dispatch_release(v4);
}

void ctu::power::manager::parameters::~parameters(void **this)
{
  const void *v2;
  const void *v3;
  NSObject *v4;

  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    v2 = this[3];
    if (!v2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = this[3];
  if (v2)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  v3 = this[2];
  if (v3)
    _Block_release(v3);
  v4 = this[1];
  if (v4)
    dispatch_release(v4);
}

void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791B750;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIKN12PowerManager5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN12PowerManager5State22registerForPowerEventsEN8dispatch5blockIU13block_pointerFv10PowerStateNS1_13group_sessionEEEE_block_invoke(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  const void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v1 = *(void **)(a1 + 40);
  if (v1)
    v1 = _Block_copy(v1);
  v3 = *(const void **)(v2 + 152);
  *(_QWORD *)(v2 + 152) = v1;
  if (v3)
    _Block_release(v3);
}

void *__copy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c73_ZTSN8dispatch5blockIU13block_pointerFv10PowerStateNS_13group_sessionEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>(PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1},std::default_delete<PowerManager::State::createPowerAssertion(std::string,std::chrono::duration<long long,std::ratio<1l,1000l>>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t **v24;
  size_t v25;
  size_t v26;
  const void *v27;
  const void *v28;
  size_t v29;
  uint64_t **v30;
  uint64_t **v31;
  int v32;
  uint64_t *v33;
  size_t v34;
  size_t v35;
  int v36;
  uint64_t **v37;
  int v38;
  uint64_t *v39;
  size_t v40;
  size_t v41;
  int v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t *v54;
  char v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  size_t v59;
  const void *v60;
  size_t v61;
  size_t v62;
  int v63;
  _QWORD *v64;
  uint64_t **v65;
  int v66;
  const void *v67;
  size_t v68;
  size_t v69;
  int v70;
  int v71;
  char v72;
  uint64_t *v73;
  std::string *v74;
  __int128 v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  NSObject *v82;
  _BOOL4 v83;
  std::string::size_type v84;
  std::string::size_type v85;
  uint64_t v86;
  std::string::size_type v87;
  std::string::size_type v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const void *v92;
  NSObject *v93;
  __int128 v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  __int128 v105;
  NSObject *v106;
  uint64_t *v107;
  std::string *p_buf;
  std::string::size_type size;
  uint64_t **v110;
  uint64_t **v111;
  _QWORD *v112;
  const void *v113;
  const void *v114;
  int v115;
  const void *v116;
  size_t v117;
  size_t v118;
  int v119;
  int v120;
  uint64_t *v121;
  std::string *v122;
  uint64_t v123;
  uint64_t *v124;
  void *v125;
  uint64_t **v126;
  uint64_t *v127;
  size_t v128;
  const void *v129;
  size_t v130;
  const void *v131;
  size_t v132;
  uint64_t **v133;
  uint64_t **v134;
  int v135;
  uint64_t *v136;
  size_t v137;
  size_t v138;
  int v139;
  uint64_t **v140;
  int v141;
  uint64_t *v142;
  size_t v143;
  size_t v144;
  int v145;
  uint64_t *v146;
  std::__shared_weak_count *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t **v152;
  uint64_t *v153;
  char v154;
  uint64_t *v155;
  int v156;
  uint64_t *v157;
  size_t v158;
  const void *v159;
  size_t v160;
  int v161;
  uint64_t **v162;
  size_t v163;
  size_t v164;
  const void *v165;
  size_t v166;
  size_t v167;
  int v168;
  int v169;
  std::__shared_weak_count *v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  NSObject *v174;
  NSObject *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  char v179;
  char *v180;
  uint64_t *v181;
  __int128 v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  char v186;
  uint64_t *__p;
  uint64_t *__pa;
  char v189;
  std::__shared_weak_count *v190;
  _QWORD *v191;
  _QWORD *v193;
  uint64_t v194;
  std::string v195;
  unint64_t v196;
  unint64_t v197;
  std::string buf;
  _BYTE group[24];
  std::__shared_weak_count *v200;
  std::string v201;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)*a1;
  v2 = *(_QWORD **)*a1;
  v194 = *a1 + 8;
  v196 = 0xAAAAAAAAAAAAAAAALL;
  v197 = 0xAAAAAAAAAAAAAAAALL;
  v193 = v1;
  pthread_mutex_lock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  if (qword_1ED70F428)
    goto LABEL_20;
  v3 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  MEMORY[0x1C3B8BB78]();
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791B7F0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = v3;
  v6 = (std::__shared_weak_count *)v3->~__shared_weak_count_0;
  if (!v6)
  {
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v12 = __ldxr(p_shared_weak_owners);
    while (__stxr(v12 + 1, p_shared_weak_owners));
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    do
LABEL_12:
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    goto LABEL_15;
  }
  if (v6->__shared_owners_ == -1)
  {
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v3->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v3;
    v3->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
    goto LABEL_12;
  }
LABEL_15:
  v14 = (std::__shared_weak_count *)off_1ED70F430;
  qword_1ED70F428 = (uint64_t)v3;
  off_1ED70F430 = v4;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
LABEL_20:
  v17 = (std::__shared_weak_count *)off_1ED70F430;
  if (off_1ED70F430)
  {
    v18 = (unint64_t *)((char *)off_1ED70F430 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  ctu::power::assertion::createInternal();
  if (v17)
  {
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      v22 = (uint64_t *)v196;
      if (v196)
        goto LABEL_28;
LABEL_72:
      v49 = v2[5];
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = v194;
        if (*((char *)v1 + 31) < 0)
          v50 = *(_QWORD *)v194;
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v50;
        _os_log_error_impl(&dword_1BF566000, v49, OS_LOG_TYPE_ERROR, "Failed to create power assertion '%s'", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_344;
    }
  }
  v22 = (uint64_t *)v196;
  if (!v196)
    goto LABEL_72;
LABEL_28:
  v24 = (uint64_t **)(v2 + 26);
  v23 = (uint64_t *)v2[26];
  v191 = v2;
  __p = v22;
  if (!v23)
  {
    v51 = (uint64_t **)v2[25];
    v37 = (uint64_t **)(v2 + 26);
    if (v51 == v24)
    {
      v52 = 0;
      v37 = v24;
      v53 = v24;
      if (*v24)
        goto LABEL_153;
      goto LABEL_138;
    }
    goto LABEL_86;
  }
  v25 = *((unsigned __int8 *)v1 + 31);
  v27 = (const void *)v1[1];
  v26 = v1[2];
  if ((v25 & 0x80u) == 0)
    v28 = (const void *)v194;
  else
    v28 = (const void *)v1[1];
  if ((v25 & 0x80u) == 0)
    v29 = *((unsigned __int8 *)v1 + 31);
  else
    v29 = v1[2];
  v30 = (uint64_t **)(v2 + 26);
  v31 = (uint64_t **)v2[26];
  do
  {
    while (1)
    {
      v32 = *((char *)v31 + 55);
      v33 = v32 >= 0 ? (uint64_t *)(v31 + 4) : v31[4];
      v34 = v32 >= 0 ? *((unsigned __int8 *)v31 + 55) : (size_t)v31[5];
      v35 = v29 >= v34 ? v34 : v29;
      v36 = memcmp(v33, v28, v35);
      if (v36)
        break;
      if (v34 >= v29)
        goto LABEL_50;
LABEL_36:
      v31 = (uint64_t **)v31[1];
      if (!v31)
        goto LABEL_51;
    }
    if (v36 < 0)
      goto LABEL_36;
LABEL_50:
    v30 = v31;
    v31 = (uint64_t **)*v31;
  }
  while (v31);
LABEL_51:
  v37 = v24;
  if (v30 != v24)
  {
    v38 = *((char *)v30 + 55);
    if (v38 >= 0)
      v39 = (uint64_t *)(v30 + 4);
    else
      v39 = v30[4];
    if (v38 >= 0)
      v40 = *((unsigned __int8 *)v30 + 55);
    else
      v40 = (size_t)v30[5];
    if (v40 >= v29)
      v41 = v29;
    else
      v41 = v40;
    v42 = memcmp(v28, v39, v41);
    if (v42)
    {
      if ((v42 & 0x80000000) == 0)
      {
LABEL_63:
        v43 = v197;
        if (v197)
        {
          v44 = (unint64_t *)(v197 + 8);
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        v46 = (std::__shared_weak_count *)v30[8];
        v30[7] = __p;
        v30[8] = (uint64_t *)v43;
        if (v46)
        {
          v47 = (unint64_t *)&v46->__shared_owners_;
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        goto LABEL_153;
      }
    }
    else if (v29 >= v40)
    {
      goto LABEL_63;
    }
    v37 = v30;
  }
  v52 = *v37;
  if ((uint64_t **)v191[25] == v37)
  {
    v53 = v37;
    if (v52)
      v24 = v37 + 1;
    else
      v24 = v37;
    if (*v24)
      goto LABEL_153;
LABEL_138:
    if (v52)
      v65 = v53;
    else
      v65 = v37;
    v64 = v193;
    v72 = *((_BYTE *)v193 + 31);
    goto LABEL_144;
  }
  if (!v52)
  {
LABEL_86:
    v53 = v37;
    do
    {
      v56 = (uint64_t *)v53;
      v53 = (uint64_t **)v53[2];
    }
    while (*v53 == v56);
    v52 = 0;
    v25 = *((unsigned __int8 *)v193 + 31);
    v27 = (const void *)v193[1];
    v26 = v193[2];
    v55 = *((_BYTE *)v193 + 31);
    goto LABEL_89;
  }
  v54 = *v37;
  do
  {
    v53 = (uint64_t **)v54;
    v54 = (uint64_t *)v54[1];
  }
  while (v54);
  v55 = v25;
LABEL_89:
  v57 = *((char *)v53 + 55);
  if (v57 >= 0)
    v58 = (uint64_t *)(v53 + 4);
  else
    v58 = v53[4];
  if (v57 >= 0)
    v59 = *((unsigned __int8 *)v53 + 55);
  else
    v59 = (size_t)v53[5];
  v189 = v55;
  if (v55 >= 0)
    v60 = (const void *)v194;
  else
    v60 = v27;
  if (v55 >= 0)
    v61 = v25;
  else
    v61 = v26;
  if (v61 >= v59)
    v62 = v59;
  else
    v62 = v61;
  v63 = memcmp(v58, v60, v62);
  if (!v63)
  {
    if (v59 >= v61)
      goto LABEL_106;
    goto LABEL_129;
  }
  if (v63 < 0)
  {
LABEL_129:
    if (v52)
      v24 = v53 + 1;
    else
      v24 = v37;
    if (*v24)
      goto LABEL_153;
    goto LABEL_138;
  }
LABEL_106:
  v64 = v193;
  if (!v23)
  {
    v65 = v24;
    goto LABEL_143;
  }
  while (2)
  {
    while (2)
    {
      v65 = (uint64_t **)v23;
      v66 = *((char *)v23 + 55);
      if (v66 >= 0)
        v67 = v23 + 4;
      else
        v67 = (const void *)v23[4];
      if (v66 >= 0)
        v68 = *((unsigned __int8 *)v23 + 55);
      else
        v68 = v23[5];
      if (v68 >= v61)
        v69 = v61;
      else
        v69 = v68;
      v70 = memcmp(v60, v67, v69);
      if (v70)
      {
        if (v70 < 0)
          break;
        goto LABEL_122;
      }
      if (v61 >= v68)
      {
LABEL_122:
        v71 = memcmp(v67, v60, v69);
        if (v71)
        {
          if ((v71 & 0x80000000) == 0)
            goto LABEL_153;
        }
        else if (v68 >= v61)
        {
          goto LABEL_153;
        }
        v23 = v65[1];
        v64 = v193;
        if (!v23)
        {
          v24 = v65 + 1;
          goto LABEL_143;
        }
        continue;
      }
      break;
    }
    v23 = *v65;
    if (*v65)
      continue;
    break;
  }
  v24 = v65;
LABEL_143:
  v72 = v189;
LABEL_144:
  v73 = (uint64_t *)operator new(0x48uLL);
  v74 = (std::string *)(v73 + 4);
  if (v72 < 0)
  {
    std::string::__init_copy_ctor_external(v74, (const std::string::value_type *)v64[1], v64[2]);
    v76 = v197;
    v73[7] = v196;
    v73[8] = v76;
    if (!v76)
      goto LABEL_150;
  }
  else
  {
    v75 = *(_OWORD *)v194;
    v73[6] = *(_QWORD *)(v194 + 16);
    *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
    v76 = v197;
    v73[7] = (uint64_t)__p;
    v73[8] = v76;
    if (!v76)
      goto LABEL_150;
  }
  v77 = (unint64_t *)(v76 + 8);
  do
    v78 = __ldxr(v77);
  while (__stxr(v78 + 1, v77));
LABEL_150:
  *v73 = 0;
  v73[1] = 0;
  v73[2] = (uint64_t)v65;
  *v24 = v73;
  v79 = *(_QWORD *)v191[25];
  if (v79)
  {
    v191[25] = v79;
    v73 = *v24;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[26], v73);
  ++v191[27];
LABEL_153:
  v80 = *(_DWORD *)(v196 + 32);
  v81 = *((_DWORD *)v191 + 30);
  v82 = v191[5];
  v83 = os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT);
  if (!v81)
  {
    v1 = v193;
    if (!v83)
    {
LABEL_166:
      v91 = v191[20];
      if (v91)
      {
        (*(void (**)(uint64_t, uint64_t))(v91 + 16))(v91, 1);
        v92 = (const void *)v191[20];
        v191[20] = 0;
        if (v92)
          _Block_release(v92);
        v93 = v191[5];
        if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          v80 = 2;
          _os_log_impl(&dword_1BF566000, v93, OS_LOG_TYPE_DEFAULT, "#I Assertion held, but action will be deferred; acknowledging previous notification",
            (uint8_t *)&buf,
            2u);
          v86 = v191[17];
          if (*((char *)v193 + 31) < 0)
            goto LABEL_158;
        }
        else
        {
          v80 = 2;
          v86 = v191[17];
          if (*((char *)v193 + 31) < 0)
            goto LABEL_158;
        }
        goto LABEL_174;
      }
      v80 = 2;
      goto LABEL_173;
    }
    v87 = v194;
    if (*((char *)v193 + 31) < 0)
    {
      v87 = *(_QWORD *)v194;
      v88 = v193[4];
      v89 = *((int *)v191 + 31);
      if (v89 <= 2)
        goto LABEL_162;
    }
    else
    {
      v88 = v193[4];
      v89 = *((int *)v191 + 31);
      if (v89 <= 2)
      {
LABEL_162:
        v90 = off_1E791BA00[v89];
LABEL_165:
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v87;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v88;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        *(_DWORD *)group = v80;
        *(_WORD *)&group[4] = 1024;
        *(_DWORD *)&group[6] = 2;
        *(_WORD *)&group[10] = 2080;
        *(_QWORD *)&group[12] = v90;
        _os_log_impl(&dword_1BF566000, v82, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s' during sleep; Timeout (millisec): %llu, Status = %d, Override = %d; Sleep state: %s",
          (uint8_t *)&buf,
          0x2Cu);
        goto LABEL_166;
      }
    }
    v90 = "Unknown";
    goto LABEL_165;
  }
  v1 = v193;
  if (!v83)
  {
LABEL_173:
    v86 = v191[17];
    if (*((char *)v1 + 31) < 0)
      goto LABEL_158;
    goto LABEL_174;
  }
  v84 = v194;
  if (*((char *)v193 + 31) < 0)
    v84 = *(_QWORD *)v194;
  v85 = v193[4];
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v84;
  WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v85;
  HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
  *(_DWORD *)group = v80;
  _os_log_impl(&dword_1BF566000, v82, OS_LOG_TYPE_DEFAULT, "#I Power assertion created for '%s'; Timeout (millisec): %llu, Status = %d",
    (uint8_t *)&buf,
    0x1Cu);
  v86 = v191[17];
  if (*((char *)v193 + 31) < 0)
  {
LABEL_158:
    std::string::__init_copy_ctor_external(&v195, (const std::string::value_type *)v1[1], v1[2]);
    goto LABEL_175;
  }
LABEL_174:
  v94 = *(_OWORD *)v194;
  v195.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
  *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v94;
LABEL_175:
  PowerStats::gotAssertion(v86, (uint64_t)&v195, v80);
  if ((SHIBYTE(v195.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v80 == 2)
      goto LABEL_177;
LABEL_180:
    if ((uint64_t)v1[4] < 1)
      goto LABEL_344;
    v96 = (std::__shared_weak_count *)v191[10];
    if (!v96 || (v97 = v191[9], (v98 = std::__shared_weak_count::lock(v96)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v99 = v98;
    v100 = (unint64_t *)&v98->__shared_weak_owners_;
    do
      v101 = __ldxr(v100);
    while (__stxr(v101 + 1, v100));
    v102 = (unint64_t *)&v98->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v99);
    }
    buf.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    buf.__r_.__value_.__l.__size_ = 1174405120;
    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke;
    *(_QWORD *)group = &__block_descriptor_tmp_18_2;
    *(_QWORD *)&group[8] = v191;
    *(_QWORD *)&group[16] = v97;
    v200 = v99;
    do
      v104 = __ldxr(v100);
    while (__stxr(v104 + 1, v100));
    v190 = v99;
    if (*((char *)v1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v201, (const std::string::value_type *)v1[1], v1[2]);
    }
    else
    {
      v105 = *(_OWORD *)v194;
      v201.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
      *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v105;
    }
    v202 = v1[4];
    v124 = (uint64_t *)operator new(0x10uLL);
    v125 = _Block_copy(&buf);
    *v124 = (uint64_t)"Watchdog timed out";
    __pa = v124;
    TelephonyBasebandWatchdogStart();
    if (v125)
      _Block_release(v125);
    v126 = (uint64_t **)(v191 + 29);
    v127 = (uint64_t *)v191[29];
    if (!v127)
    {
      v140 = (uint64_t **)(v191 + 29);
      if ((uint64_t **)v191[28] == v126)
      {
        v151 = 0;
        v140 = (uint64_t **)(v191 + 29);
        v152 = (uint64_t **)(v191 + 29);
        goto LABEL_335;
      }
      goto LABEL_291;
    }
    v128 = *((unsigned __int8 *)v1 + 31);
    v129 = (const void *)v1[1];
    v130 = v1[2];
    if ((v128 & 0x80u) == 0)
      v131 = (const void *)v194;
    else
      v131 = (const void *)v1[1];
    if ((v128 & 0x80u) == 0)
      v132 = *((unsigned __int8 *)v1 + 31);
    else
      v132 = v1[2];
    v133 = (uint64_t **)(v191 + 29);
    v134 = (uint64_t **)v191[29];
    while (1)
    {
      v135 = *((char *)v134 + 55);
      if (v135 >= 0)
        v136 = (uint64_t *)(v134 + 4);
      else
        v136 = v134[4];
      if (v135 >= 0)
        v137 = *((unsigned __int8 *)v134 + 55);
      else
        v137 = (size_t)v134[5];
      if (v132 >= v137)
        v138 = v137;
      else
        v138 = v132;
      v139 = memcmp(v136, v131, v138);
      if (v139)
      {
        if (v139 < 0)
          goto LABEL_249;
      }
      else if (v137 < v132)
      {
LABEL_249:
        v134 = (uint64_t **)v134[1];
        if (!v134)
          goto LABEL_264;
        continue;
      }
      v133 = v134;
      v134 = (uint64_t **)*v134;
      if (!v134)
      {
LABEL_264:
        v140 = (uint64_t **)(v191 + 29);
        if (v133 == v126)
          goto LABEL_286;
        v141 = *((char *)v133 + 55);
        if (v141 >= 0)
          v142 = (uint64_t *)(v133 + 4);
        else
          v142 = v133[4];
        if (v141 >= 0)
          v143 = *((unsigned __int8 *)v133 + 55);
        else
          v143 = (size_t)v133[5];
        if (v143 >= v132)
          v144 = v132;
        else
          v144 = v143;
        v145 = memcmp(v131, v142, v144);
        if (!v145)
        {
          v1 = v193;
          if (v132 < v143)
            goto LABEL_285;
LABEL_276:
          v146 = (uint64_t *)operator new(0x20uLL);
          *v146 = (uint64_t)off_1E791B840;
          v146[1] = 0;
          v147 = v190;
          v146[2] = 0;
          v146[3] = (uint64_t)__pa;
          v148 = (std::__shared_weak_count *)v133[8];
          v133[7] = __pa;
          v133[8] = v146;
          if (v148)
          {
            v149 = (unint64_t *)&v148->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
              std::__shared_weak_count::__release_weak(v148);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_373;
              goto LABEL_341;
            }
          }
LABEL_340:
          if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_373;
          goto LABEL_341;
        }
        v1 = v193;
        if ((v145 & 0x80000000) == 0)
          goto LABEL_276;
LABEL_285:
        v140 = v133;
LABEL_286:
        v151 = *v140;
        if ((uint64_t **)v191[28] == v140)
        {
          v152 = v140;
          goto LABEL_335;
        }
        if (v151)
        {
          v153 = *v140;
          do
          {
            v152 = (uint64_t **)v153;
            v153 = (uint64_t *)v153[1];
          }
          while (v153);
          v154 = v128;
LABEL_294:
          v156 = *((char *)v152 + 55);
          if (v156 >= 0)
            v157 = (uint64_t *)(v152 + 4);
          else
            v157 = v152[4];
          if (v156 >= 0)
            v158 = *((unsigned __int8 *)v152 + 55);
          else
            v158 = (size_t)v152[5];
          v186 = v154;
          if (v154 >= 0)
            v159 = (const void *)v194;
          else
            v159 = v129;
          if (v154 >= 0)
            v130 = v128;
          if (v130 >= v158)
            v160 = v158;
          else
            v160 = v130;
          v161 = memcmp(v157, v159, v160);
          if (v161)
          {
            if (v161 < 0)
            {
LABEL_335:
              if (v151)
                v126 = v152 + 1;
              else
                v126 = v140;
              if (!*v126)
              {
                if (v151)
                  v162 = v152;
                else
                  v162 = v140;
                v1 = v193;
                v179 = *((_BYTE *)v193 + 31);
                goto LABEL_367;
              }
LABEL_339:
              TelephonyBasebandWatchdogStop();
              operator delete(__pa);
              v1 = v193;
              v147 = v190;
              goto LABEL_340;
            }
          }
          else if (v158 < v130)
          {
            goto LABEL_335;
          }
          if (!v127)
          {
            v162 = (uint64_t **)(v191 + 29);
            v1 = v193;
            goto LABEL_366;
          }
          v1 = v193;
          while (1)
          {
            v162 = (uint64_t **)v127;
            v163 = *((unsigned __int8 *)v127 + 55);
            v164 = v127[5];
            if ((v163 & 0x80u) == 0)
              v165 = v127 + 4;
            else
              v165 = (const void *)v127[4];
            if ((v163 & 0x80u) == 0)
              v166 = v163;
            else
              v166 = v164;
            if (v166 >= v130)
              v167 = v130;
            else
              v167 = v166;
            v168 = memcmp(v159, v165, v167);
            if (v168)
            {
              if ((v168 & 0x80000000) == 0)
                goto LABEL_328;
            }
            else if (v130 >= v166)
            {
LABEL_328:
              v169 = memcmp(v165, v159, v167);
              if (v169)
              {
                if ((v169 & 0x80000000) == 0)
                  goto LABEL_339;
              }
              else if (v166 >= v130)
              {
                goto LABEL_339;
              }
              v127 = v162[1];
              v1 = v193;
              if (!v127)
              {
                v126 = v162 + 1;
                goto LABEL_366;
              }
              continue;
            }
            v127 = *v162;
            if (!*v162)
            {
              v126 = v162;
LABEL_366:
              v179 = v186;
LABEL_367:
              v180 = (char *)operator new(0x48uLL);
              v181 = (uint64_t *)v180;
              if (v179 < 0)
              {
                v183 = (uint64_t)__pa;
                v147 = v190;
                std::string::__init_copy_ctor_external((std::string *)(v180 + 32), (const std::string::value_type *)v1[1], v1[2]);
              }
              else
              {
                v182 = *(_OWORD *)v194;
                *((_QWORD *)v180 + 6) = *(_QWORD *)(v194 + 16);
                *((_OWORD *)v180 + 2) = v182;
                v183 = (uint64_t)__pa;
                v147 = v190;
              }
              v181[7] = v183;
              v184 = operator new(0x20uLL);
              *v184 = off_1E791B840;
              v184[1] = 0;
              v184[2] = 0;
              v184[3] = v183;
              v181[8] = (uint64_t)v184;
              *v181 = 0;
              v181[1] = 0;
              v181[2] = (uint64_t)v162;
              *v126 = v181;
              v185 = *(_QWORD *)v191[28];
              if (v185)
              {
                v191[28] = v185;
                v181 = *v126;
              }
              std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[29], v181);
              ++v191[30];
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
              {
LABEL_373:
                operator delete(v201.__r_.__value_.__l.__data_);
                v170 = v200;
                if (!v200)
                  goto LABEL_343;
LABEL_342:
                std::__shared_weak_count::__release_weak(v170);
LABEL_343:
                std::__shared_weak_count::__release_weak(v147);
                goto LABEL_344;
              }
LABEL_341:
              v170 = v200;
              if (v200)
                goto LABEL_342;
              goto LABEL_343;
            }
          }
        }
LABEL_291:
        v152 = v140;
        do
        {
          v155 = (uint64_t *)v152;
          v152 = (uint64_t **)v152[2];
        }
        while (*v152 == v155);
        v151 = 0;
        v128 = *((unsigned __int8 *)v193 + 31);
        v129 = (const void *)v193[1];
        v130 = v193[2];
        v154 = *((_BYTE *)v193 + 31);
        goto LABEL_294;
      }
    }
  }
  operator delete(v195.__r_.__value_.__l.__data_);
  if (v80 != 2)
    goto LABEL_180;
LABEL_177:
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    v95 = *(_OWORD *)v194;
    buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v194 + 16);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v95;
  }
  v106 = v1[5];
  *(_QWORD *)group = v106;
  if (v106)
  {
    dispatch_retain(v106);
    if (*(_QWORD *)group)
      dispatch_group_enter(*(dispatch_group_t *)group);
  }
  v107 = (uint64_t *)v191[32];
  if (!v107)
  {
    v110 = (uint64_t **)(v191 + 32);
    v111 = (uint64_t **)(v191 + 32);
    goto LABEL_225;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_buf = &buf;
  else
    p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  else
    size = buf.__r_.__value_.__l.__size_;
  do
  {
    while (2)
    {
      v111 = (uint64_t **)v107;
      v114 = (const void *)v107[4];
      v112 = v107 + 4;
      v113 = v114;
      v115 = *((char *)v112 + 23);
      if (v115 >= 0)
        v116 = v112;
      else
        v116 = v113;
      if (v115 >= 0)
        v117 = *((unsigned __int8 *)v112 + 23);
      else
        v117 = v112[1];
      if (v117 >= size)
        v118 = size;
      else
        v118 = v117;
      v119 = memcmp(p_buf, v116, v118);
      if (v119)
      {
        if (v119 < 0)
          goto LABEL_204;
      }
      else if (size < v117)
      {
LABEL_204:
        v107 = *v111;
        v110 = v111;
        if (!*v111)
          goto LABEL_225;
        continue;
      }
      break;
    }
    v120 = memcmp(v116, p_buf, v118);
    if (v120)
    {
      if ((v120 & 0x80000000) == 0)
        goto LABEL_231;
    }
    else if (v117 >= size)
    {
      goto LABEL_231;
    }
    v107 = v111[1];
  }
  while (v107);
  v110 = v111 + 1;
LABEL_225:
  v121 = (uint64_t *)operator new(0x40uLL);
  v122 = (std::string *)(v121 + 4);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v122, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v122->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    v121[6] = buf.__r_.__value_.__r.__words[2];
  }
  v121[7] = *(_QWORD *)group;
  *(_QWORD *)group = 0;
  *v121 = 0;
  v121[1] = 0;
  v121[2] = (uint64_t)v111;
  *v110 = v121;
  v123 = *(_QWORD *)v191[31];
  if (v123)
  {
    v191[31] = v123;
    v121 = *v110;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v191[32], v121);
  ++v191[33];
LABEL_231:
  if (*(_QWORD *)group)
  {
    dispatch_group_leave(*(dispatch_group_t *)group);
    if (*(_QWORD *)group)
      dispatch_release(*(dispatch_object_t *)group);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
LABEL_344:
  v171 = (std::__shared_weak_count *)v197;
  if (v197)
  {
    v172 = (unint64_t *)(v197 + 8);
    do
      v173 = __ldaxr(v172);
    while (__stlxr(v173 - 1, v172));
    if (!v173)
    {
      ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
      std::__shared_weak_count::__release_weak(v171);
    }
  }
  v174 = v1[5];
  if (v174)
  {
    dispatch_group_leave(v174);
    v175 = v1[5];
    if (v175)
      dispatch_release(v175);
  }
  if (*((char *)v1 + 31) < 0)
    operator delete(*(void **)v194);
  operator delete(v1);
  v176 = (std::__shared_weak_count *)a1[2];
  if (v176)
  {
    v177 = (unint64_t *)&v176->__shared_owners_;
    do
      v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
      std::__shared_weak_count::__release_weak(v176);
    }
  }
  operator delete(a1);
}

void sub_1BF67DF0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_group_t group,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __break(1u);
}

void sub_1BF67E034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void **a16)
{
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  __cxa_end_catch();
  pthread_mutex_unlock(&ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance);
  v16 = *(NSObject **)(a15 + 40);
  if (v16)
  {
    dispatch_group_leave(v16);
    v17 = *(NSObject **)(a15 + 40);
    if (v17)
      dispatch_release(v17);
  }
  if (*(char *)(a15 + 31) < 0)
    operator delete(*a16);
  operator delete((void *)a15);
  v18 = (std::__shared_weak_count *)a14[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(a14);
  JUMPOUT(0x1BF67E1A8);
}

void sub_1BF67E068()
{
  JUMPOUT(0x1BF67E090);
}

void sub_1BF67E074()
{
  JUMPOUT(0x1BF67E090);
}

void sub_1BF67E07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x1BF67E08CLL);
  JUMPOUT(0x1BF67E090);
}

void sub_1BF67E0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, void **a16)
{
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  NSObject *v19;
  NSObject *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;

  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = *(NSObject **)(a15 + 40);
  if (v19)
  {
    dispatch_group_leave(v19);
    v20 = *(NSObject **)(a15 + 40);
    if (v20)
      dispatch_release(v20);
  }
  if (*(char *)(a15 + 31) < 0)
    operator delete(*a16);
  operator delete((void *)a15);
  v21 = (std::__shared_weak_count *)a14[2];
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  operator delete(a14);
  JUMPOUT(0x1BF67E1A8);
}

void sub_1BF67E110(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZZN12PowerManager5State20createPowerAssertionENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_6chrono8durationIxNS1_5ratioILl1ELl1000EEEEEENKUlvE_clEv_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  _QWORD *v11;
  std::string *v12;
  NSObject *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::string __p;
  uint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = std::__shared_weak_count::lock(v2);
    v24 = v4;
    if (v4)
    {
      v5 = *(_QWORD **)(a1 + 40);
      v23 = v5;
      if (!v5)
      {
        v6 = v4;
LABEL_23:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
        return;
      }
      v20 = v3;
      if (*(char *)(a1 + 79) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
      else
        __p = *(std::string *)(a1 + 56);
      v22 = *(_QWORD *)(a1 + 80);
      v7 = (std::__shared_weak_count *)v5[10];
      if (!v7 || (v8 = v5[9], (v9 = std::__shared_weak_count::lock(v7)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v10 = v9;
      v11 = operator new(0x28uLL);
      *v11 = v20;
      v12 = (std::string *)(v11 + 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v11[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      }
      v11[4] = v22;
      v13 = v5[11];
      v14 = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      v16 = operator new(0x18uLL);
      *v16 = v11;
      v16[1] = v8;
      v16[2] = v10;
      dispatch_async_f(v13, v16, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_);
      do
        v17 = __ldaxr(v14);
      while (__stlxr(v17 - 1, v14));
      if (v17)
      {
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_19;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_19:
          v6 = v24;
          if (!v24)
            return;
          goto LABEL_23;
        }
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      v6 = v24;
      if (!v24)
        return;
      goto LABEL_23;
    }
  }
}

void sub_1BF67E388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF67E418(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE56c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ctu::power::assertion *,std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion *)#1},std::allocator<ctu::power::assertion>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared"
                                "_ptrIT_EEPS7_EUlPS2_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableINS_5power9assertionEE15make_shared_ptrIS2_EENSt3__110shared_ptrIT_EEPS7_EUlPS2_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<ctu::power::assertion> ctu::SharedSynchronizable<ctu::power::assertion>::make_shared_ptr<ctu::power::assertion>(ctu::power::assertion*)::{lambda(ctu::power::assertion*)#1}::operator() const(ctu::power::assertion*)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(char **)(a1 + 40));
    v2 = *(NSObject **)(a1 + 24);
    if (v2)
      dispatch_release(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
    v4 = *(std::__shared_weak_count **)(a1 + 8);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete((void *)a1);
  }
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(char *a1)
{
  std::__shared_weak_count *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ctu::power::assertion::HandleRaw>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (std::__shared_weak_count *)*((_QWORD *)a1 + 8);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN12PowerManager5StateEE15execute_wrappedIZZZNS4_20createPowerAssertionENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS7_6chrono8durationIxNS7_5ratioILl1ELl1000EEEEEENKUlvE_clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS7_10unique_ptrISL_NS7_14default_deleteISL_EEEEENUlPvE_8__invokeESU_(void ***a1)
{
  void **v2;
  _QWORD *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  _QWORD *v9;
  void **v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  xpc_object_t v19;
  xpc_object_t v20;
  NSObject *v21;
  size_t v22;
  void **v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  size_t v26;
  void **p_dst;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  uint64_t v37;
  const char *v38;
  xpc_object_t v39;
  xpc_object_t v40;
  const void *v41;
  size_t v42;
  size_t v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  const void **v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  void **__dst;
  size_t v60;
  int64_t v61;
  std::string v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 __p;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 buf;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v70 = 0xAAAAAAAAAAAAAAAALL;
  v80 = v4;
  v79 = v4;
  v78 = v4;
  v77 = v4;
  v76 = v4;
  v75 = v4;
  v74 = v4;
  v73 = v4;
  v72 = v4;
  v69 = v4;
  __p = v4;
  v66 = v4;
  v67 = v4;
  v64 = v4;
  v65 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v71 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v63 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v63 + *(_QWORD *)(v63 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v63 + *(_QWORD *)(v63 - 24));
  std::ios_base::init(v8, &v64);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v63 = v5 + 24;
  v71 = v6;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&v64 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v69 = 0u;
  LODWORD(v70) = 16;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Power assertion watchdog fired for '", 36);
  v10 = v2 + 1;
  v11 = *((char *)v2 + 31);
  if (v11 >= 0)
    v12 = (uint64_t)(v2 + 1);
  else
    v12 = (uint64_t)v2[1];
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)v2 + 31);
  else
    v13 = (uint64_t)v2[2];
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"'; Timeout (millisec): ",
    23);
  std::ostream::operator<<();
  if (*((char *)v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v62, (const std::string::value_type *)v2[1], (std::string::size_type)v2[2]);
  }
  else
  {
    v15 = *(_OWORD *)v10;
    v62.__r_.__value_.__r.__words[2] = (std::string::size_type)v2[3];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v15;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (TelephonyUtilIsInternalBuild())
  {
    v16 = (std::__shared_weak_count *)v3[35];
    if (!v16)
      goto LABEL_93;
    v17 = std::__shared_weak_count::lock(v16);
    if (!v17)
      goto LABEL_93;
    v18 = v17;
    v57 = v3[34];
    if (!v57)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
LABEL_73:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      goto LABEL_93;
    }
    v19 = xpc_dictionary_create(0, 0, 0);
    if (v19 || (v19 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v19) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v19);
        v20 = v19;
      }
      else
      {
        v20 = xpc_null_create();
      }
    }
    else
    {
      v20 = xpc_null_create();
      v19 = 0;
    }
    xpc_release(v19);
    if ((v70 & 0x10) != 0)
    {
      v28 = *((_QWORD *)&v69 + 1);
      if (*((_QWORD *)&v69 + 1) < (unint64_t)v67)
      {
        *((_QWORD *)&v69 + 1) = v67;
        v28 = v67;
      }
      v29 = (const void *)*((_QWORD *)&v66 + 1);
      v26 = v28 - *((_QWORD *)&v66 + 1);
      if ((unint64_t)(v28 - *((_QWORD *)&v66 + 1)) > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_76;
    }
    else
    {
      if ((v70 & 8) == 0)
      {
        v26 = 0;
        HIBYTE(v61) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_42;
      }
      v29 = (const void *)v65;
      v26 = v66 - v65;
      if ((_QWORD)v66 - (_QWORD)v65 > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_76:
        std::string::__throw_length_error[abi:ne180100]();
    }
    if (v26 >= 0x17)
    {
      v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v30 = v26 | 7;
      v31 = v30 + 1;
      p_dst = (void **)operator new(v30 + 1);
      v60 = v26;
      v61 = v31 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v61) = v26;
      p_dst = (void **)&__dst;
      if (!v26)
      {
LABEL_42:
        *((_BYTE *)p_dst + v26) = 0;
        if (v61 >= 0)
          v32 = (const char *)&__dst;
        else
          v32 = (const char *)__dst;
        v33 = xpc_string_create(v32);
        if (!v33)
          v33 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB930], v33);
        v34 = xpc_null_create();
        xpc_release(v33);
        xpc_release(v34);
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        v35 = xpc_int64_create(0);
        if (!v35)
          v35 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB010], v35);
        v36 = xpc_null_create();
        xpc_release(v35);
        xpc_release(v36);
        Timestamp::Timestamp((Timestamp *)&buf);
        Timestamp::asString(v37, 0, 9, &__dst);
        if (v61 >= 0)
          v38 = (const char *)&__dst;
        else
          v38 = (const char *)__dst;
        v39 = xpc_string_create(v38);
        if (!v39)
          v39 = xpc_null_create();
        xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB370], v39);
        v40 = xpc_null_create();
        xpc_release(v39);
        xpc_release(v40);
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&buf, *((_QWORD **)&buf + 1));
        v41 = (const void *)*MEMORY[0x1E0CFB5F0];
        v42 = strlen((const char *)*MEMORY[0x1E0CFB5F0]);
        if (v42 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v43 = v42;
        if (v42 >= 0x17)
        {
          v45 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v42 | 7) != 0x17)
            v45 = v42 | 7;
          v46 = v45 + 1;
          v44 = (void **)operator new(v45 + 1);
          v60 = v43;
          v61 = v46 | 0x8000000000000000;
          __dst = v44;
        }
        else
        {
          HIBYTE(v61) = v42;
          v44 = (void **)&__dst;
          if (!v42)
            goto LABEL_66;
        }
        memmove(v44, v41, v43);
LABEL_66:
        *((_BYTE *)v44 + v43) = 0;
        *(_QWORD *)&buf = v20;
        if (v20)
          xpc_retain(v20);
        else
          *(_QWORD *)&buf = xpc_null_create();
        v58 = 0;
        ServiceManager::runCommand(v57, (uint64_t)&__dst, (void **)&buf, &v58);
        xpc_release((xpc_object_t)buf);
        *(_QWORD *)&buf = 0;
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        xpc_release(v20);
        v47 = (unint64_t *)&v18->__shared_owners_;
        do
          v25 = __ldaxr(v47);
        while (__stlxr(v25 - 1, v47));
        goto LABEL_73;
      }
    }
    memmove(p_dst, v29, v26);
    goto LABEL_42;
  }
  v21 = v3[5];
  if (!os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    goto LABEL_93;
  if ((v70 & 0x10) != 0)
  {
    v48 = *((_QWORD *)&v69 + 1);
    if (*((_QWORD *)&v69 + 1) < (unint64_t)v67)
    {
      *((_QWORD *)&v69 + 1) = v67;
      v48 = v67;
    }
    v49 = (const void **)&v66 + 1;
  }
  else
  {
    if ((v70 & 8) == 0)
    {
      v22 = 0;
      HIBYTE(v61) = 0;
      v23 = (void **)&__dst;
      goto LABEL_89;
    }
    v49 = (const void **)&v65;
    v48 = v66;
  }
  v50 = *v49;
  v22 = v48 - (_QWORD)*v49;
  if (v22 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v22 >= 0x17)
  {
    v51 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v51 = v22 | 7;
    v52 = v51 + 1;
    v23 = (void **)operator new(v51 + 1);
    v60 = v22;
    v61 = v52 | 0x8000000000000000;
    __dst = v23;
  }
  else
  {
    HIBYTE(v61) = v48 - *(_BYTE *)v49;
    v23 = (void **)&__dst;
    if (!v22)
      goto LABEL_89;
  }
  memmove(v23, v50, v22);
LABEL_89:
  *((_BYTE *)v23 + v22) = 0;
  v53 = (void **)&__dst;
  if (v61 < 0)
    v53 = __dst;
  LODWORD(buf) = 136315138;
  *(_QWORD *)((char *)&buf + 4) = v53;
  _os_log_fault_impl(&dword_1BF566000, v21, OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&buf, 0xCu);
  if (SHIBYTE(v61) < 0)
    operator delete(__dst);
LABEL_93:
  v63 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v63 + *(_QWORD *)(v63 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v64 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v69) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](&v71);
  if (*((char *)v2 + 31) < 0)
    operator delete(*v10);
  operator delete(v2);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF67ED74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void PowerManager::State::releasePowerAssertion_sync(_QWORD *a1, const void **a2)
{
  const void **v2;
  uint64_t *v4;
  _QWORD *v5;
  char v6;
  const void *v7;
  size_t v8;
  _QWORD *v9;
  uint64_t *v10;
  int v11;
  uint64_t *v12;
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  const void *v17;
  size_t v18;
  size_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  const void **v24;
  const char *v25;
  _QWORD *v26;
  BOOL v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  const void **v31;
  uint64_t *v32;
  char v33;
  const void *v34;
  size_t v35;
  _QWORD *v36;
  uint64_t *v37;
  int v38;
  const void *v39;
  size_t v40;
  size_t v41;
  int v42;
  int v43;
  const void *v44;
  size_t v45;
  size_t v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  NSObject *v54;
  uint64_t v55;
  NSObject *v56;
  const void *v57;
  int v58;
  const void **v59;
  uint64_t v60;

  v2 = a2;
  v60 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 26;
  v4 = (uint64_t *)a1[26];
  if (!v4)
    goto LABEL_40;
  v6 = *((_BYTE *)a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *a2;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  v9 = a1 + 26;
  v10 = (uint64_t *)a1[26];
  do
  {
    while (1)
    {
      v11 = *((char *)v10 + 55);
      v12 = v11 >= 0 ? v10 + 4 : (uint64_t *)v10[4];
      v13 = v11 >= 0 ? *((unsigned __int8 *)v10 + 55) : v10[5];
      v14 = v8 >= v13 ? v13 : v8;
      v15 = memcmp(v12, v7, v14);
      if (v15)
        break;
      if (v13 >= v8)
        goto LABEL_23;
LABEL_9:
      v10 = (uint64_t *)v10[1];
      if (!v10)
        goto LABEL_24;
    }
    if (v15 < 0)
      goto LABEL_9;
LABEL_23:
    v9 = v10;
    v10 = (uint64_t *)*v10;
  }
  while (v10);
LABEL_24:
  if (v9 == v5)
    goto LABEL_40;
  v16 = *((char *)v9 + 55);
  if (v16 >= 0)
    v17 = v9 + 4;
  else
    v17 = (const void *)v9[4];
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)v9 + 55);
  else
    v18 = v9[5];
  if (v18 >= v8)
    v19 = v8;
  else
    v19 = v18;
  v20 = memcmp(v7, v17, v19);
  if (v20)
  {
    if ((v20 & 0x80000000) == 0)
      goto LABEL_36;
LABEL_40:
    v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = v2;
      if (*((char *)v2 + 23) < 0)
        v24 = (const void **)*v2;
      v58 = 136315138;
      v59 = v24;
      v25 = "#I Attempt to release non-existent power assertion '%s'";
LABEL_60:
      _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, v25, (uint8_t *)&v58, 0xCu);
    }
  }
  else
  {
    if (v8 < v18)
      goto LABEL_40;
LABEL_36:
    v21 = (_QWORD *)v9[1];
    if (v21)
    {
      do
      {
        v22 = v21;
        v21 = (_QWORD *)*v21;
      }
      while (v21);
    }
    else
    {
      v26 = v9;
      do
      {
        v22 = (_QWORD *)v26[2];
        v27 = *v22 == (_QWORD)v26;
        v26 = v22;
      }
      while (!v27);
    }
    if ((_QWORD *)a1[25] == v9)
      a1[25] = v22;
    --a1[27];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v9);
    v28 = (std::__shared_weak_count *)v9[8];
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (*((char *)v9 + 55) < 0)
      operator delete((void *)v9[4]);
    operator delete(v9);
    v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v31 = v2;
      if (*((char *)v2 + 23) < 0)
        v31 = (const void **)*v2;
      v58 = 136315138;
      v59 = v31;
      v25 = "#I Released power assertion '%s'";
      goto LABEL_60;
    }
  }
  v32 = (uint64_t *)a1[29];
  if (!v32)
    goto LABEL_117;
  v33 = *((_BYTE *)v2 + 23);
  if (v33 >= 0)
    v34 = v2;
  else
    v34 = *v2;
  if (v33 >= 0)
    v35 = *((unsigned __int8 *)v2 + 23);
  else
    v35 = (size_t)v2[1];
  v36 = a1 + 29;
  v37 = (uint64_t *)a1[29];
  while (2)
  {
    while (2)
    {
      v38 = *((char *)v37 + 55);
      if (v38 >= 0)
        v39 = v37 + 4;
      else
        v39 = (const void *)v37[4];
      if (v38 >= 0)
        v40 = *((unsigned __int8 *)v37 + 55);
      else
        v40 = v37[5];
      if (v35 >= v40)
        v41 = v40;
      else
        v41 = v35;
      v42 = memcmp(v39, v34, v41);
      if (v42)
      {
        if ((v42 & 0x80000000) == 0)
          break;
        goto LABEL_69;
      }
      if (v40 < v35)
      {
LABEL_69:
        v37 = (uint64_t *)v37[1];
        if (!v37)
          goto LABEL_84;
        continue;
      }
      break;
    }
    v36 = v37;
    v37 = (uint64_t *)*v37;
    if (v37)
      continue;
    break;
  }
LABEL_84:
  if (v36 != a1 + 29)
  {
    v43 = *((char *)v36 + 55);
    if (v43 >= 0)
      v44 = v36 + 4;
    else
      v44 = (const void *)v36[4];
    if (v43 >= 0)
      v45 = *((unsigned __int8 *)v36 + 55);
    else
      v45 = v36[5];
    if (v45 >= v35)
      v46 = v35;
    else
      v46 = v45;
    v47 = memcmp(v34, v44, v46);
    if (v47)
    {
      if (v47 < 0)
        goto LABEL_117;
LABEL_98:
      v48 = (_QWORD *)v36[1];
      if (v48)
      {
        do
        {
          v49 = v48;
          v48 = (_QWORD *)*v48;
        }
        while (v48);
      }
      else
      {
        v50 = v36;
        do
        {
          v49 = (_QWORD *)v50[2];
          v27 = *v49 == (_QWORD)v50;
          v50 = v49;
        }
        while (!v27);
      }
      if ((_QWORD *)a1[28] == v36)
        a1[28] = v49;
      --a1[30];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v32, v36);
      v51 = (std::__shared_weak_count *)v36[8];
      if (v51)
      {
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      if (*((char *)v36 + 55) < 0)
        operator delete((void *)v36[4]);
      operator delete(v36);
      v54 = a1[5];
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 23) < 0)
          v2 = (const void **)*v2;
        v58 = 136315138;
        v59 = v2;
        _os_log_impl(&dword_1BF566000, v54, OS_LOG_TYPE_DEFAULT, "#I Clear watchdog timer for power assertion '%s'", (uint8_t *)&v58, 0xCu);
      }
    }
    else if (v35 >= v45)
    {
      goto LABEL_98;
    }
  }
LABEL_117:
  if (!a1[27])
  {
    *(_BYTE *)(a1[17] + 88) = 0;
    v55 = a1[20];
    if (v55)
    {
      v56 = a1[5];
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v58) = 0;
        _os_log_impl(&dword_1BF566000, v56, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", (uint8_t *)&v58, 2u);
        v55 = a1[20];
      }
      (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v55, 1);
      v57 = (const void *)a1[20];
      a1[20] = 0;
      if (v57)
        _Block_release(v57);
    }
  }
}

void sub_1BF67F460(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<support::misc::Watchdog  *>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
  {
    TelephonyBasebandWatchdogStop();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<support::misc::Watchdog  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF741D4DLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF741D4DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF741D4DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF741D4DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string v9;

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD ***)a1;
  v4 = (void **)(*(_QWORD *)a1 + 8);
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, (const std::string::value_type *)v2[1], v2[2]);
  }
  else
  {
    v5 = *(_OWORD *)v4;
    v9.__r_.__value_.__r.__words[2] = v2[3];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v5;
  }
  PowerManager::State::releasePowerAssertion_sync(v3, (const void **)&v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if ((*((char *)v2 + 31) & 0x80000000) == 0)
    {
LABEL_6:
      operator delete(v2);
      v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
      if (!v6)
        goto LABEL_7;
      goto LABEL_11;
    }
  }
  else if ((*((char *)v2 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*v4);
  operator delete(v2);
  v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v6)
    goto LABEL_7;
LABEL_11:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    operator delete(a1);
    return;
  }
LABEL_7:
  operator delete(a1);
}

void sub_1BF67F644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a10);
  v18 = (std::__shared_weak_count *)v16[2];
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

void ___ZN12PowerManager5State10initializeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  __int128 *p_dst;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const void *v28;
  const void *v29;
  size_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  NSObject *v37;
  const void *v38;
  size_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  NSObject *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  void *v51;
  NSObject *v52;
  void *v53;
  const void *v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD v62[5];
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  _QWORD v66[6];
  std::__shared_weak_count *v67;
  void *v68;
  dispatch_object_t v69;
  void *v70[2];
  unint64_t v71;
  _QWORD v72[6];
  std::__shared_weak_count *v73;
  void *v74;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v77;
  const void *v78;
  void *v79[2];
  char v80;
  _QWORD aBlock[6];
  std::__shared_weak_count *v82;
  void *v83;
  __int128 __dst;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 72), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    v86 = 0;
    v87 = 0;
    v10 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v10)
      goto LABEL_109;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
    v86 = 0;
    v87 = 0;
    v10 = *(std::__shared_weak_count **)(v1 + 280);
    if (!v10)
      goto LABEL_109;
  }
  v87 = std::__shared_weak_count::lock(v10);
  if (!v87)
    goto LABEL_114;
  v11 = *(_QWORD *)(v1 + 272);
  v86 = v11;
  if (v11)
  {
    v12 = abm::kCommandSetPowerDownMessageList[0];
    v13 = strlen(abm::kCommandSetPowerDownMessageList[0]);
    if (v13 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v14 = v13;
    if (v13 >= 0x17)
    {
      v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v13 | 7) != 0x17)
        v16 = v13 | 7;
      v17 = v16 + 1;
      p_dst = (__int128 *)operator new(v16 + 1);
      *((_QWORD *)&__dst + 1) = v14;
      v85 = v17 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v85) = v13;
      p_dst = &__dst;
      if (!v13)
        goto LABEL_21;
    }
    memmove(p_dst, v12, v14);
LABEL_21:
    *((_BYTE *)p_dst + v14) = 0;
    v18 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_24_2;
    aBlock[4] = v1;
    aBlock[5] = v3;
    v82 = v5;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v20 = _Block_copy(aBlock);
    v83 = v20;
    ServiceManager::registerCommandHandler(v11, (uint64_t)&__dst, &v83);
    if (v20)
      _Block_release(v20);
    if (SHIBYTE(v85) < 0)
      operator delete((void *)__dst);
    v80 = 9;
    v78 = 0;
    strcpy((char *)v79, "power.mgr");
    AppleBasebandManager::create();
    v21 = __dst;
    __dst = 0uLL;
    v22 = *(std::__shared_weak_count **)(v1 + 112);
    *(_OWORD *)(v1 + 104) = v21;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_36;
    v26 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v28 = v78;
      if (!v78)
      {
LABEL_38:
        if (v80 < 0)
          operator delete(v79[0]);
        v29 = (const void *)*MEMORY[0x1E0CFB9A8];
        v30 = strlen((const char *)*MEMORY[0x1E0CFB9A8]);
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v31 = (void *)v30;
        if (v30 >= 0x17)
        {
          v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v30 | 7) != 0x17)
            v33 = v30 | 7;
          v34 = v33 + 1;
          v32 = operator new(v33 + 1);
          __p[1] = v31;
          v77 = v34 | 0x8000000000000000;
          __p[0] = v32;
        }
        else
        {
          HIBYTE(v77) = v30;
          v32 = __p;
          if (!v30)
            goto LABEL_48;
        }
        memmove(v32, v29, (size_t)v31);
LABEL_48:
        *((_BYTE *)v31 + (_QWORD)v32) = 0;
        v72[0] = v18;
        v72[1] = 1174405120;
        v72[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_25;
        v72[3] = &__block_descriptor_tmp_27_5;
        v72[4] = v1;
        v72[5] = v3;
        v73 = v5;
        do
          v35 = __ldxr(p_shared_weak_owners);
        while (__stxr(v35 + 1, p_shared_weak_owners));
        v36 = _Block_copy(v72);
        v37 = *(NSObject **)(v1 + 88);
        if (v37)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        v74 = v36;
        object = v37;
        AppleBasebandManager::setEventHandler();
        if (object)
          dispatch_release(object);
        if (v74)
          _Block_release(v74);
        if (SHIBYTE(v77) < 0)
          operator delete(__p[0]);
        v38 = (const void *)*MEMORY[0x1E0CFB9B0];
        v39 = strlen((const char *)*MEMORY[0x1E0CFB9B0]);
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v40 = (void *)v39;
        if (v39 >= 0x17)
        {
          v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v42 = v39 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          v70[1] = v40;
          v71 = v43 | 0x8000000000000000;
          v70[0] = v41;
        }
        else
        {
          HIBYTE(v71) = v39;
          v41 = v70;
          if (!v39)
            goto LABEL_66;
        }
        memmove(v41, v38, (size_t)v40);
LABEL_66:
        *((_BYTE *)v40 + (_QWORD)v41) = 0;
        v66[0] = v18;
        v66[1] = 1174405120;
        v66[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_28;
        v66[3] = &__block_descriptor_tmp_29_2;
        v66[4] = v1;
        v66[5] = v3;
        v67 = v5;
        do
          v44 = __ldxr(p_shared_weak_owners);
        while (__stxr(v44 + 1, p_shared_weak_owners));
        v45 = _Block_copy(v66);
        v46 = *(NSObject **)(v1 + 88);
        if (v46)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        v68 = v45;
        v69 = v46;
        AppleBasebandManager::setEventHandler();
        if (v69)
          dispatch_release(v69);
        if (v68)
          _Block_release(v68);
        if (SHIBYTE(v71) < 0)
          operator delete(v70[0]);
        AppleBasebandManager::eventsOn(*(AppleBasebandManager **)(v1 + 104));
        v47 = *(_QWORD *)(v1 + 136);
        v62[0] = v18;
        v62[1] = 1174405120;
        v62[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_30;
        v62[3] = &__block_descriptor_tmp_32_2;
        v62[4] = v3;
        v63 = v5;
        do
          v48 = __ldxr(p_shared_weak_owners);
        while (__stxr(v48 + 1, p_shared_weak_owners));
        v64 = v86;
        v65 = v87;
        if (v87)
        {
          v49 = (unint64_t *)&v87->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v51 = _Block_copy(v62);
        v52 = *(NSObject **)(v1 + 88);
        if (v52)
          dispatch_retain(*(dispatch_object_t *)(v1 + 88));
        if (v51)
        {
          v53 = _Block_copy(v51);
          v54 = *(const void **)(v47 + 104);
          *(_QWORD *)(v47 + 104) = v53;
          if (!v54)
            goto LABEL_88;
        }
        else
        {
          v54 = *(const void **)(v47 + 104);
          *(_QWORD *)(v47 + 104) = 0;
          if (!v54)
          {
LABEL_88:
            if (v52)
              dispatch_retain(v52);
            v55 = *(NSObject **)(v47 + 112);
            *(_QWORD *)(v47 + 112) = v52;
            if (v55)
              dispatch_release(v55);
            if (v52)
              dispatch_release(v52);
            if (v51)
              _Block_release(v51);
            v56 = v65;
            if (v65)
            {
              v57 = (unint64_t *)&v65->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            if (v63)
              std::__shared_weak_count::__release_weak(v63);
            if (v67)
              std::__shared_weak_count::__release_weak(v67);
            if (v73)
              std::__shared_weak_count::__release_weak(v73);
            if (v82)
              std::__shared_weak_count::__release_weak(v82);
            goto LABEL_109;
          }
        }
        _Block_release(v54);
        goto LABEL_88;
      }
    }
    else
    {
LABEL_36:
      v28 = v78;
      if (!v78)
        goto LABEL_38;
    }
    CFRelease(v28);
    goto LABEL_38;
  }
LABEL_109:
  v59 = v87;
  if (v87)
  {
    v60 = (unint64_t *)&v87->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
LABEL_114:
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF67FDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v49;

  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  if (a38)
    std::__shared_weak_count::__release_weak(a38);
  v49 = *(std::__shared_weak_count **)(v47 - 160);
  if (v49)
  {
    std::__shared_weak_count::__release_weak(v49);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v47 - 120);
    std::__shared_weak_count::__release_weak(v46);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v47 - 120);
  std::__shared_weak_count::__release_weak(v46);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN12PowerManager5State10initializeEv_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_22_5;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_3(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t object;
  xpc_object_t v9;

  v3 = a1[4];
  v2 = (void *)a1[5];
  v4 = *(_QWORD *)(v3 + 136);
  object = v2;
  if (v2)
    xpc_retain(v2);
  else
    object = xpc_null_create();
  PowerStats::setPowerdownMessage(v4, &object);
  xpc_release(object);
  object = 0;
  v5 = xpc_null_create();
  v6 = a1[6];
  v9 = v5;
  v7 = xpc_null_create();
  (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v6 + 16))(v6, 0, &v9);
  xpc_release(v9);
  xpc_release(v7);
}

void sub_1BF6800B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_25(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
        PowerStats::dumpState(*(os_log_t **)(v3 + 136));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF680194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_28(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  os_log_t *v9;
  _QWORD *v10;
  NSObject *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint8_t buf[4];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = (os_log_t *)v3[17];
        if (v9)
          PowerStats::dumpState(v9);
        v10 = (_QWORD *)v3[25];
        if (v10 != v3 + 26)
        {
          do
          {
            v11 = v3[5];
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              v12 = v10 + 4;
              if (*((char *)v10 + 55) < 0)
                v12 = (_QWORD *)*v12;
              *(_DWORD *)buf = 136315138;
              v22 = v12;
              _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Pending power assertion '%s'", buf, 0xCu);
            }
            v13 = (_QWORD *)v10[1];
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (_QWORD *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = (_QWORD *)v10[2];
                v15 = *v14 == (_QWORD)v10;
                v10 = v14;
              }
              while (!v15);
            }
            v10 = v14;
          }
          while (v14 != v3 + 26);
        }
        v16 = (_QWORD *)v3[31];
        if (v16 != v3 + 32)
        {
          do
          {
            v17 = v3[5];
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              v18 = v16 + 4;
              if (*((char *)v16 + 55) < 0)
                v18 = (_QWORD *)*v18;
              *(_DWORD *)buf = 136315138;
              v22 = v18;
              _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I Deferred work due to sleep '%s'", buf, 0xCu);
            }
            v19 = (_QWORD *)v16[1];
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = (_QWORD *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (_QWORD *)v16[2];
                v15 = *v20 == (_QWORD)v16;
                v16 = v20;
              }
              while (!v15);
            }
            v16 = v20;
          }
          while (v20 != v3 + 32);
        }
      }
    }
  }
}

void ___ZN12PowerManager5State10initializeEv_block_invoke_30(_QWORD *a1, xpc_object_t *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  void *v10;
  void **v11;
  xpc_object_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  void *v18;
  void *__dst[2];
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = (std::__shared_weak_count *)a1[5];
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v22 = v5;
  if (!v5)
    return;
  v6 = v5;
  v21 = a1[4];
  if (!v21 || (v7 = a1[6]) == 0)
  {
LABEL_18:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  v8 = (const void *)*MEMORY[0x1E0CFB5E0];
  v9 = strlen((const char *)*MEMORY[0x1E0CFB5E0]);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = (void *)v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    v11 = (void **)operator new(v13 + 1);
    __dst[1] = v10;
    v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
LABEL_13:
    memmove(v11, v8, (size_t)v10);
    *((_BYTE *)v10 + (_QWORD)v11) = 0;
    v12 = *a2;
    v18 = v12;
    if (v12)
      goto LABEL_9;
    goto LABEL_14;
  }
  HIBYTE(v20) = v9;
  v11 = __dst;
  if (v9)
    goto LABEL_13;
  LOBYTE(__dst[0]) = 0;
  v12 = *a2;
  v18 = v12;
  if (v12)
  {
LABEL_9:
    xpc_retain(v12);
    goto LABEL_15;
  }
LABEL_14:
  v12 = xpc_null_create();
  v18 = v12;
LABEL_15:
  v17 = 0;
  ServiceManager::runCommand(v7, (uint64_t)__dst, &v18, &v17);
  xpc_release(v12);
  v18 = 0;
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  v6 = v22;
  if (v22)
    goto LABEL_18;
}

void sub_1BF68057C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;

  xpc_release(v18);
  if (a17 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[7];
  result[6] = a2[6];
  result[7] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return result;
}

void __destroy_helper_block_e8_32c45_ZTSNSt3__18weak_ptrIN12PowerManager5StateEEE48c42_ZTSNSt3__110shared_ptrI14ServiceManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 40);
    if (!v5)
      return;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZN12PowerManager5State8shutdownEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = (std::__shared_weak_count *)v1[10];
  if (!v2 || (v3 = v1[9], (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = v1;
  v7 = v1[11];
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    v12 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v12)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    v12 = (std::__shared_weak_count *)v1[14];
    v1[13] = 0;
    v1[14] = 0;
    if (!v12)
      return;
  }
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
}

void dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>(PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<PowerManager::State::releasePendingPowerAssertions(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint8_t buf[4];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = (_QWORD *)v3[25];
  v5 = v3 + 26;
  if (v4 != v3 + 26)
  {
    do
    {
      v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = v4 + 4;
        if (*((char *)v4 + 55) < 0)
          v7 = (_QWORD *)*v7;
        *(_DWORD *)buf = 136315138;
        v19 = v7;
        _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Forcefully releasing power assertion '%s'", buf, 0xCu);
      }
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v5);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(v3[26]);
  v11 = v3[29];
  v3[25] = v5;
  v3[26] = 0;
  v3[27] = 0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<LogInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<LogInfo>>>>::destroy(v11);
  v3[28] = v3 + 29;
  v3[29] = 0;
  v3[30] = 0;
  *(_BYTE *)(v3[17] + 88) = 0;
  v12 = v3[20];
  if (v12)
  {
    v13 = v3[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I No more assertions held, acknowledging previous notification", buf, 2u);
      v12 = v3[20];
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 16))(v12, 1);
    v14 = (const void *)v3[20];
    v3[20] = 0;
    if (v14)
      _Block_release(v14);
  }
  operator delete(v2);
  v15 = (std::__shared_weak_count *)a1[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(a1);
}

void sub_1BF6809A4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerManager *,std::shared_ptr<PowerManager>::__shared_ptr_default_delete<PowerManager,PowerManager>,std::allocator<PowerManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF741DFDLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF741DFDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF741DFDLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF741DFDLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_6()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

const char *IOPortUSBCAccessoriesDelegate::getName(IOPortUSBCAccessoriesDelegate *this)
{
  return "IOPortUSBCAccessories.delegate";
}

uint64_t IOPortUSBCAccessoriesDelegate::create@<X0>(_QWORD *a1@<X0>, NSObject **a2@<X1>, std::__shared_weak_count_vtbl **a3@<X8>)
{
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  NSObject *v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  v26 = 0;
  v6 = (std::__shared_weak_count_vtbl *)operator new(0x70uLL);
  v7 = a1[3];
  if (!v7)
    goto LABEL_4;
  if ((_QWORD *)v7 != a1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
LABEL_4:
    v28 = (_QWORD *)v7;
    goto LABEL_6;
  }
  v28 = v27;
  (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v27);
LABEL_6:
  v8 = *a2;
  v24 = v8;
  if (v8)
    dispatch_retain(v8);
  IOPortUSBCAccessoriesDelegate::IOPortUSBCAccessoriesDelegate((uint64_t)v6, v27, &v24);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E791BB28;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6->__on_zero_shared;
  if (on_zero_shared)
  {
    if (on_zero_shared->__shared_owners_ != -1)
      goto LABEL_21;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
  }
  else
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
  }
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_21:
  v25 = v6;
  v26 = v11;
  if (v8)
    dispatch_release(v8);
  v21 = v28;
  if (v28 == v27)
  {
    v22 = 4;
    v21 = v27;
    goto LABEL_27;
  }
  if (v28)
  {
    v22 = 5;
LABEL_27:
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v21 + 8 * v22))(v21, v9, v10);
  }
  result = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 7))(v6);
  *a3 = v6;
  a3[1] = (std::__shared_weak_count_vtbl *)v11;
  return result;
}

void sub_1BF680D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t IOPortUSBCAccessoriesDelegate::IOPortUSBCAccessoriesDelegate(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  _QWORD *v5;
  NSObject *v6;
  const char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = off_1E791BA50;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v13 = 0;
  }
  v6 = *a3;
  if (v6)
    dispatch_retain(v6);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  if (v6)
    dispatch_retain(v6);
  *(_QWORD *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), "com.apple.telephony.abm", v7);
  *(_QWORD *)a1 = off_1E791FD60;
  v8 = (uint64_t)v13;
  if (!v13)
    goto LABEL_13;
  if (v13 != v12)
  {
    v8 = (*(uint64_t (**)(void))(*v13 + 16))();
LABEL_13:
    *(_QWORD *)(a1 + 72) = v8;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 72) = a1 + 48;
  (*(void (**)(_QWORD *))(v12[0] + 24))(v12);
LABEL_15:
  *(_BYTE *)(a1 + 80) = 0;
  if (v6)
    dispatch_release(v6);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_21;
  }
  if (v13)
  {
    v10 = 5;
LABEL_21:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  *(_QWORD *)a1 = off_1E791BA50;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_1BF680FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  NSObject *v13;
  _QWORD *v14;

  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v14);
  if (v13)
    dispatch_release(v13);
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(a1);
  }
  if (!a13)
    _Unwind_Resume(a1);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(a1);
}

void IOPortUSBCAccessoriesDelegate::~IOPortUSBCAccessoriesDelegate(IOPortUSBCAccessoriesDelegate *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  IOPortUSBCAccessoriesDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E791BA50;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E791FD60;
  v5 = (IOPortUSBCAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v5 == (IOPortUSBCAccessoriesDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (IOPortUSBCAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  IOPortUSBCAccessoriesDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E791BA50;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E791FD60;
  v5 = (IOPortUSBCAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v5 == (IOPortUSBCAccessoriesDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (IOPortUSBCAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  IOPortUSBCAccessoriesDelegate *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = off_1E791BA50;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E791FD60;
  v5 = (IOPortUSBCAccessoriesDelegate *)*((_QWORD *)this + 9);
  if (v5 == (IOPortUSBCAccessoriesDelegate *)((char *)this + 48))
  {
    v6 = 4;
    v5 = (IOPortUSBCAccessoriesDelegate *)((char *)this + 48);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_11:
  MEMORY[0x1C3B8B74C]((char *)this + 40);
  v7 = *((_QWORD *)this + 4);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 3);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  operator delete(this);
}

void IOPortUSBCAccessoriesDelegate::start(IOPortUSBCAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_5;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  const char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  queue v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  _QWORD v25[6];
  std::__shared_weak_count *v26;
  void *aBlock;
  dispatch_object_t v28;
  dispatch_object_t object;
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 80))
  {
    v2 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
    }
    *(_BYTE *)(v1 + 80) = 1;
    v3 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v3 || (v4 = *(_QWORD *)(v1 + 8), (v5 = std::__shared_weak_count::lock(v3)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v7 = v5;
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v7);
    }
    v12 = *(NSObject **)(v1 + 24);
    object = v12;
    if (v12)
      dispatch_retain(v12);
    v13.fObj.fObj = (dispatch_object_s *)"com.apple.telephony.abm";
    ctu::iokit::IOPortUSBCController::create((ctu::iokit::IOPortUSBCController *)&object, v13, "IOPortUSBCAccessories.delegate", v6);
    v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v15 = *(std::__shared_weak_count **)(v1 + 96);
    *(_OWORD *)(v1 + 88) = v14;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v19 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (object)
      dispatch_release(object);
    if (*(_QWORD *)(v1 + 88))
    {
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 1174405120;
      v25[2] = ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke_2;
      v25[3] = &__block_descriptor_tmp_24;
      v25[4] = v1;
      v25[5] = v4;
      v26 = v7;
      do
        v21 = __ldxr(p_shared_weak_owners);
      while (__stxr(v21 + 1, p_shared_weak_owners));
      v22 = _Block_copy(v25);
      v23 = *(NSObject **)(v1 + 24);
      if (v23)
        dispatch_retain(v23);
      aBlock = v22;
      v28 = v23;
      ctu::iokit::IOPortUSBCController::registerCallback();
      if (v28)
        dispatch_release(v28);
      if (aBlock)
        _Block_release(aBlock);
      if (v26)
        std::__shared_weak_count::__release_weak(v26);
    }
    else
    {
      v24 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF566000, v24, OS_LOG_TYPE_ERROR, "Failed to create IOPort Controller!", buf, 2u);
      }
    }
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1BF6815D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, dispatch_object_t object)
{
  std::__shared_weak_count *v18;

  dispatch::callback<void({block_pointer})(ctu::iokit::USBCAccessory)>::~callback((uint64_t)&a16);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v18);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate5startEv_block_invoke_2(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  void **v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  _DWORD *v71;
  uint64_t v72;
  char *v73;
  _DWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  void *v79;
  int64_t v80;
  _DWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  int v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  char *v99;
  CFTypeRef cf;
  void *__p;
  char *v102;
  unint64_t v103;
  uint8_t buf[4];
  _DWORD v105[7];

  *(_QWORD *)&v105[5] = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (v10)
      {
        if (!v8)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
        if (!v8)
          return;
      }
      v11 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        ctu::iokit::IOPortUSBCController::asString();
        v12 = (v103 & 0x8000000000000000) == 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)v105 = v12;
        _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Detected Accessory: %s\n", buf, 0xCu);
        if (SHIBYTE(v103) < 0)
          operator delete(__p);
      }
      if (*(_QWORD *)(v5 + 72))
      {
        __p = 0;
        v102 = 0;
        v103 = 0;
        if (ctu::iokit::operator&())
        {
          v13 = v102;
          if ((unint64_t)v102 < v103)
          {
            v14 = 131089;
LABEL_22:
            *(_QWORD *)v13 = v14;
            *((_DWORD *)v13 + 2) = 0x20000;
            v15 = v13 + 12;
LABEL_52:
            v102 = v15;
            v21 = 1;
LABEL_53:
            if (ctu::iokit::operator&())
            {
              v33 = v102;
              if ((unint64_t)v102 < v103)
              {
                v34 = 131090;
LABEL_59:
                *(_QWORD *)v33 = v34;
                *((_DWORD *)v33 + 2) = 0x20000;
                v35 = v33 + 12;
LABEL_88:
                v102 = v35;
                v21 = 1;
LABEL_89:
                if (ctu::iokit::operator&())
                {
                  v52 = v102;
                  if ((unint64_t)v102 < v103)
                  {
                    v53 = 131091;
LABEL_95:
                    *(_QWORD *)v52 = v53;
                    *((_DWORD *)v52 + 2) = 0x20000;
                    v54 = v52 + 12;
LABEL_124:
                    v102 = v54;
                    v21 = 1;
LABEL_125:
                    if (ctu::iokit::operator&())
                    {
                      v71 = v102;
                      if ((unint64_t)v102 < v103)
                      {
                        v72 = 131092;
LABEL_131:
                        *(_QWORD *)v71 = v72;
                        v71[2] = 0x20000;
                        v73 = (char *)(v71 + 3);
                        goto LABEL_165;
                      }
                      v74 = __p;
                      v75 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
                      v76 = v75 + 1;
                      if (v75 + 1 > 0x1555555555555555)
                        std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v76)
                        v76 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                        v77 = 0x1555555555555555;
                      else
                        v77 = v76;
                      if (v77)
                      {
                        if (v77 > 0x1555555555555555)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v78 = (char *)operator new(12 * v77);
                      }
                      else
                      {
                        v78 = 0;
                      }
                      v86 = &v78[12 * v75];
                      v87 = &v78[12 * v77];
                      *(_QWORD *)v86 = 131092;
                      *((_DWORD *)v86 + 2) = 0x20000;
                      v73 = v86 + 12;
                      if (v71 != v74)
                      {
                        do
                        {
                          v88 = *(_QWORD *)(v71 - 3);
                          v71 -= 3;
                          v89 = v71[2];
                          *(_QWORD *)(v86 - 12) = v88;
                          v86 -= 12;
                          *((_DWORD *)v86 + 2) = v89;
                        }
                        while (v71 != v74);
LABEL_162:
                        v71 = __p;
                      }
                    }
                    else
                    {
                      if (!ctu::iokit::operator&())
                      {
                        if (!v21)
                        {
                          v90 = *(NSObject **)(v5 + 40);
                          if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
                          {
                            v91 = *(_DWORD *)(v5 + 104);
                            *(_DWORD *)buf = 67109376;
                            v105[0] = v91;
                            LOWORD(v105[1]) = 1024;
                            *(_DWORD *)((char *)&v105[1] + 2) = a2;
                            _os_log_error_impl(&dword_1BF566000, v90, OS_LOG_TYPE_ERROR, "Failed to parse bitmask (current: 0x%x, received: 0x%x)", buf, 0xEu);
                          }
                          goto LABEL_173;
                        }
                        *(_DWORD *)(v5 + 104) = a2;
                        v99 = 0;
                        cf = 0;
                        v97 = 0;
                        v98 = 0;
                        v79 = __p;
                        v80 = v102 - (_BYTE *)__p;
                        if (v102 != __p)
                          goto LABEL_166;
                        goto LABEL_168;
                      }
                      v71 = v102;
                      if ((unint64_t)v102 < v103)
                      {
                        v72 = 65556;
                        goto LABEL_131;
                      }
                      v81 = __p;
                      v82 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
                      v83 = v82 + 1;
                      if (v82 + 1 > 0x1555555555555555)
                        std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v83)
                        v83 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                        v84 = 0x1555555555555555;
                      else
                        v84 = v83;
                      if (v84)
                      {
                        if (v84 > 0x1555555555555555)
                          std::__throw_bad_array_new_length[abi:ne180100]();
                        v85 = (char *)operator new(12 * v84);
                      }
                      else
                      {
                        v85 = 0;
                      }
                      v86 = &v85[12 * v82];
                      v87 = &v85[12 * v84];
                      *(_QWORD *)v86 = 65556;
                      *((_DWORD *)v86 + 2) = 0x20000;
                      v73 = v86 + 12;
                      if (v71 != v81)
                      {
                        do
                        {
                          v92 = *(_QWORD *)(v71 - 3);
                          v71 -= 3;
                          v93 = v71[2];
                          *(_QWORD *)(v86 - 12) = v92;
                          v86 -= 12;
                          *((_DWORD *)v86 + 2) = v93;
                        }
                        while (v71 != v81);
                        goto LABEL_162;
                      }
                    }
                    __p = v86;
                    v102 = v73;
                    v103 = (unint64_t)v87;
                    if (v71)
                      operator delete(v71);
LABEL_165:
                    v102 = v73;
                    *(_DWORD *)(v5 + 104) = a2;
                    v99 = 0;
                    cf = 0;
                    v97 = 0;
                    v98 = 0;
                    v79 = __p;
                    v80 = v73 - (_BYTE *)__p;
                    if (v73 != __p)
                    {
LABEL_166:
                      if (0xAAAAAAAAAAAAAAABLL * (v80 >> 2) > 0x1555555555555555)
                        std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
                      v94 = (char *)operator new(v80);
                      v95 = &v94[4 * (v80 >> 2)];
                      v97 = v94;
                      v99 = v95;
                      memcpy(v94, v79, v80);
                      v98 = v95;
                    }
LABEL_168:
                    v96 = *(_QWORD *)(v5 + 72);
                    if (!v96)
                      std::__throw_bad_function_call[abi:ne180100]();
                    (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v96 + 48))(v96, &cf, &v97);
                    if (v97)
                    {
                      v98 = v97;
                      operator delete(v97);
                    }
                    if (cf)
                      CFRelease(cf);
LABEL_173:
                    if (__p)
                    {
                      v102 = (char *)__p;
                      operator delete(__p);
                    }
                    return;
                  }
                  v55 = (char *)__p;
                  v56 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
                  v57 = v56 + 1;
                  if (v56 + 1 > 0x1555555555555555)
                    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v57)
                    v57 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v58 = 0x1555555555555555;
                  else
                    v58 = v57;
                  if (v58)
                  {
                    if (v58 > 0x1555555555555555)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v59 = (char *)operator new(12 * v58);
                  }
                  else
                  {
                    v59 = 0;
                  }
                  v65 = &v59[12 * v56];
                  v66 = &v59[12 * v58];
                  *(_QWORD *)v65 = 131091;
                  *((_DWORD *)v65 + 2) = 0x20000;
                  v54 = v65 + 12;
                  if (v52 != v55)
                  {
                    do
                    {
                      v67 = *(_QWORD *)(v52 - 12);
                      v52 -= 12;
                      v68 = *((_DWORD *)v52 + 2);
                      *(_QWORD *)(v65 - 12) = v67;
                      v65 -= 12;
                      *((_DWORD *)v65 + 2) = v68;
                    }
                    while (v52 != v55);
LABEL_121:
                    v52 = (char *)__p;
                  }
                }
                else
                {
                  if (!ctu::iokit::operator&())
                    goto LABEL_125;
                  v52 = v102;
                  if ((unint64_t)v102 < v103)
                  {
                    v53 = 65555;
                    goto LABEL_95;
                  }
                  v60 = (char *)__p;
                  v61 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
                  v62 = v61 + 1;
                  if (v61 + 1 > 0x1555555555555555)
                    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v62)
                    v62 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                    v63 = 0x1555555555555555;
                  else
                    v63 = v62;
                  if (v63)
                  {
                    if (v63 > 0x1555555555555555)
                      std::__throw_bad_array_new_length[abi:ne180100]();
                    v64 = (char *)operator new(12 * v63);
                  }
                  else
                  {
                    v64 = 0;
                  }
                  v65 = &v64[12 * v61];
                  v66 = &v64[12 * v63];
                  *(_QWORD *)v65 = 65555;
                  *((_DWORD *)v65 + 2) = 0x20000;
                  v54 = v65 + 12;
                  if (v52 != v60)
                  {
                    do
                    {
                      v69 = *(_QWORD *)(v52 - 12);
                      v52 -= 12;
                      v70 = *((_DWORD *)v52 + 2);
                      *(_QWORD *)(v65 - 12) = v69;
                      v65 -= 12;
                      *((_DWORD *)v65 + 2) = v70;
                    }
                    while (v52 != v60);
                    goto LABEL_121;
                  }
                }
                __p = v65;
                v102 = v54;
                v103 = (unint64_t)v66;
                if (v52)
                  operator delete(v52);
                goto LABEL_124;
              }
              v36 = (char *)__p;
              v37 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
              v38 = v37 + 1;
              if (v37 + 1 > 0x1555555555555555)
                std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v38)
                v38 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v39 = 0x1555555555555555;
              else
                v39 = v38;
              if (v39)
              {
                if (v39 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v40 = (char *)operator new(12 * v39);
              }
              else
              {
                v40 = 0;
              }
              v46 = &v40[12 * v37];
              v47 = &v40[12 * v39];
              *(_QWORD *)v46 = 131090;
              *((_DWORD *)v46 + 2) = 0x20000;
              v35 = v46 + 12;
              if (v33 != v36)
              {
                do
                {
                  v48 = *(_QWORD *)(v33 - 12);
                  v33 -= 12;
                  v49 = *((_DWORD *)v33 + 2);
                  *(_QWORD *)(v46 - 12) = v48;
                  v46 -= 12;
                  *((_DWORD *)v46 + 2) = v49;
                }
                while (v33 != v36);
LABEL_85:
                v33 = (char *)__p;
              }
            }
            else
            {
              if (!ctu::iokit::operator&())
                goto LABEL_89;
              v33 = v102;
              if ((unint64_t)v102 < v103)
              {
                v34 = 65554;
                goto LABEL_59;
              }
              v41 = (char *)__p;
              v42 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
              v43 = v42 + 1;
              if (v42 + 1 > 0x1555555555555555)
                std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v43)
                v43 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v44 = 0x1555555555555555;
              else
                v44 = v43;
              if (v44)
              {
                if (v44 > 0x1555555555555555)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v45 = (char *)operator new(12 * v44);
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[12 * v42];
              v47 = &v45[12 * v44];
              *(_QWORD *)v46 = 65554;
              *((_DWORD *)v46 + 2) = 0x20000;
              v35 = v46 + 12;
              if (v33 != v41)
              {
                do
                {
                  v50 = *(_QWORD *)(v33 - 12);
                  v33 -= 12;
                  v51 = *((_DWORD *)v33 + 2);
                  *(_QWORD *)(v46 - 12) = v50;
                  v46 -= 12;
                  *((_DWORD *)v46 + 2) = v51;
                }
                while (v33 != v41);
                goto LABEL_85;
              }
            }
            __p = v46;
            v102 = v35;
            v103 = (unint64_t)v47;
            if (v33)
              operator delete(v33);
            goto LABEL_88;
          }
          v16 = (char *)__p;
          v17 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
          v18 = v17 + 1;
          if (v17 + 1 > 0x1555555555555555)
            std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v18)
            v18 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v19 = 0x1555555555555555;
          else
            v19 = v18;
          if (v19)
          {
            if (v19 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v20 = (char *)operator new(12 * v19);
          }
          else
          {
            v20 = 0;
          }
          v27 = &v20[12 * v17];
          v28 = &v20[12 * v19];
          *(_QWORD *)v27 = 131089;
          *((_DWORD *)v27 + 2) = 0x20000;
          v15 = v27 + 12;
          if (v13 != v16)
          {
            do
            {
              v29 = *(_QWORD *)(v13 - 12);
              v13 -= 12;
              v30 = *((_DWORD *)v13 + 2);
              *(_QWORD *)(v27 - 12) = v29;
              v27 -= 12;
              *((_DWORD *)v27 + 2) = v30;
            }
            while (v13 != v16);
LABEL_49:
            v13 = (char *)__p;
          }
        }
        else
        {
          if (!ctu::iokit::operator&())
          {
            v21 = 0;
            goto LABEL_53;
          }
          v13 = v102;
          if ((unint64_t)v102 < v103)
          {
            v14 = 65553;
            goto LABEL_22;
          }
          v22 = (char *)__p;
          v23 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__p) >> 2);
          v24 = v23 + 1;
          if (v23 + 1 > 0x1555555555555555)
            std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2) > v24)
            v24 = 0x5555555555555556 * ((uint64_t)(v103 - (_QWORD)__p) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v103 - (_QWORD)__p) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v25 = 0x1555555555555555;
          else
            v25 = v24;
          if (v25)
          {
            if (v25 > 0x1555555555555555)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = (char *)operator new(12 * v25);
          }
          else
          {
            v26 = 0;
          }
          v27 = &v26[12 * v23];
          v28 = &v26[12 * v25];
          *(_QWORD *)v27 = 65553;
          *((_DWORD *)v27 + 2) = 0x20000;
          v15 = v27 + 12;
          if (v13 != v22)
          {
            do
            {
              v31 = *(_QWORD *)(v13 - 12);
              v13 -= 12;
              v32 = *((_DWORD *)v13 + 2);
              *(_QWORD *)(v27 - 12) = v31;
              v27 -= 12;
              *((_DWORD *)v27 + 2) = v32;
            }
            while (v13 != v22);
            goto LABEL_49;
          }
        }
        __p = v27;
        v102 = v15;
        v103 = (unint64_t)v28;
        if (v13)
          operator delete(v13);
        goto LABEL_52;
      }
    }
  }
}

void sub_1BF6820A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (!__p)
    _Unwind_Resume(exception_object);
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrI23AccessoriesDelegateBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c48_ZTSNSt3__18weak_ptrI23AccessoriesDelegateBaseEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::USBCAccessory)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void IOPortUSBCAccessoriesDelegate::stop(IOPortUSBCAccessoriesDelegate *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN29IOPortUSBCAccessoriesDelegate4stopEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_5;
  v1[4] = this;
  ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v1);
}

void ___ZN29IOPortUSBCAccessoriesDelegate4stopEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  uint64_t v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint8_t v13[16];
  uint8_t buf[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = *(NSObject **)(v1 + 40);
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopping", buf, 2u);
    }
    v6 = (_QWORD *)(v1 + 88);
    v5 = *(_QWORD *)(v1 + 88);
    *(_BYTE *)(v1 + 80) = 0;
    if (v5)
    {
      v7 = *(std::__shared_weak_count **)(v1 + 96);
      *(_QWORD *)(v1 + 88) = 0;
      *(_QWORD *)(v1 + 96) = 0;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v10 = *(std::__shared_weak_count **)(v1 + 96);
        *v6 = 0;
        *(_QWORD *)(v1 + 96) = 0;
        if (v10)
        {
          v11 = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 - 1, v11));
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else
      {
        *v6 = 0;
        *(_QWORD *)(v1 + 96) = 0;
      }
    }
  }
  else if (v4)
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Already stopped", v13, 2u);
  }
}

void std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate*)#1}::operator() const(IOPortUSBCAccessoriesDelegate*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<IOPortUSBCAccessoriesDelegate *,std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate *)#1},std::allocator<IOPortUSBCAccessoriesDelegate>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDel"
                     "egateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAcc"
                                "essoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15make_shared_ptrI29IOPortUSBCAccessoriesDelegateEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<IOPortUSBCAccessoriesDelegate> ctu::SharedSynchronizable<AccessoriesDelegateBase>::make_shared_ptr<IOPortUSBCAccessoriesDelegate>(IOPortUSBCAccessoriesDelegate*)::{lambda(IOPortUSBCAccessoriesDelegate*)#1}::operator() const(IOPortUSBCAccessoriesDelegate*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<AccessoriesDelegateBase>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791BB70;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI23AccessoriesDelegateBaseE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIK23AccessoriesDelegateBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__110shared_ptrIK23AccessoriesDelegateBaseEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

capabilities::radio *radio::HealthService::HealthService(capabilities::radio *a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v6;
  const void *v7;
  _QWORD v9[5];
  CFTypeRef cf;

  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  capabilities::radio::maverick(a1);
  v6 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = *a4;
    if (v7)
      CFRetain(v7);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1174405120;
    v9[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
    v9[3] = &__block_descriptor_tmp_25;
    v9[4] = v6;
    cf = v7;
    if (v7)
      CFRetain(v7);
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v6 + 72), (uint64_t)v9);
    if (cf)
      CFRelease(cf);
    if (v7)
      CFRelease(v7);
  }
  return a1;
}

void sub_1BF682668(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::start(uint64_t a1, const void **a2)
{
  const void *v3;
  _QWORD v4[5];
  CFTypeRef cf;

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_25;
  v3 = *a2;
  v4[4] = a1;
  cf = v3;
  if (v3)
    CFRetain(v3);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v4);
  if (cf)
    CFRelease(cf);
}

void radio::HealthService::reportDataStats(radio::HealthService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_5_6;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reportDataStats(radio::HealthService::State *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_5_6;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::reset(radio::HealthService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_6_6;
    v2[4] = v1;
    ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void radio::HealthService::State::reset(radio::HealthService::State *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN5radio13HealthService5State5resetEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_6_6;
  v1[4] = this;
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void radio::HealthService::enterLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD block[4];
  void *aBlock;

  v3 = *a1;
  if (*a1)
  {
    if (*(_QWORD *)a2)
    {
      v4 = _Block_copy(*(const void **)a2);
      v5 = *(NSObject **)(a2 + 8);
      v9 = v4;
      v10 = v5;
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      v5 = *(NSObject **)(a2 + 8);
      v9 = 0;
      v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4)
          return;
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::enterLowPower(v3, (uint64_t)&v9);
    if (!v4)
      return;
    goto LABEL_10;
  }
  if (*(_QWORD *)a2)
    v6 = _Block_copy(*(const void **)a2);
  else
    v6 = 0;
  v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_3;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    v8 = aBlock;
    if (!aBlock)
      goto LABEL_17;
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  v8 = aBlock;
  if (aBlock)
LABEL_16:
    _Block_release(v8);
LABEL_17:
  if (v6)
    _Block_release(v6);
}

void radio::HealthService::State::enterLowPower(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_13_5;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void radio::HealthService::exitLowPower(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _QWORD block[4];
  void *aBlock;

  v3 = *a1;
  if (*a1)
  {
    if (*(_QWORD *)a2)
    {
      v4 = _Block_copy(*(const void **)a2);
      v5 = *(NSObject **)(a2 + 8);
      v9 = v4;
      v10 = v5;
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v4 = 0;
      v5 = *(NSObject **)(a2 + 8);
      v9 = 0;
      v10 = v5;
      if (v5)
      {
LABEL_4:
        dispatch_retain(v5);
        radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
        dispatch_release(v5);
        if (!v4)
          return;
LABEL_10:
        _Block_release(v4);
        return;
      }
    }
    radio::HealthService::State::exitLowPower(v3, (uint64_t)&v9);
    if (!v4)
      return;
    goto LABEL_10;
  }
  if (*(_QWORD *)a2)
    v6 = _Block_copy(*(const void **)a2);
  else
    v6 = 0;
  v7 = *(NSObject **)(a2 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_17_3;
  if (!v6)
  {
    aBlock = 0;
    dispatch_async(v7, block);
    v8 = aBlock;
    if (!aBlock)
      goto LABEL_17;
    goto LABEL_16;
  }
  aBlock = _Block_copy(v6);
  dispatch_async(v7, block);
  v8 = aBlock;
  if (aBlock)
LABEL_16:
    _Block_release(v8);
LABEL_17:
  if (v6)
    _Block_release(v6);
}

void radio::HealthService::State::exitLowPower(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_15_4;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void radio::HealthService::State::~State(radio::HealthService::State *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSObject *v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  uint8_t v19[16];

  *(_QWORD *)this = off_1E791BBB8;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v19, 2u);
      v2 = *((_QWORD *)this + 24);
    }
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((_QWORD *)this + 24) = 0;
  }
  std::__tree<std::string>::destroy((uint64_t)this + 168, *((char **)this + 22));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v7)
      goto LABEL_15;
  }
  else
  {
LABEL_9:
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
    if (!v7)
      goto LABEL_15;
  }
  v8 = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v10)
    goto LABEL_19;
  v11 = (unint64_t *)&v10->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v13)
      goto LABEL_25;
  }
  else
  {
LABEL_19:
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (!v13)
      goto LABEL_25;
  }
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_25:
  *(_QWORD *)this = off_1E791BE48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v16 = *((_QWORD *)this + 12);
  if (v16)
    dispatch_release(v16);
  v17 = *((_QWORD *)this + 11);
  if (v17)
    dispatch_release(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
}

{
  void *v1;

  radio::HealthService::State::~State(this);
  operator delete(v1);
}

void radio::HealthService::State::stopDataReportingTimer_sync(radio::HealthService::State *this)
{
  NSObject *v1;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *((_QWORD *)this + 24);
  if (v1)
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Stopped data reporting", v4, 2u);
      v1 = *((_QWORD *)this + 24);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*((dispatch_object_t *)this + 24));
    *((_QWORD *)this + 24) = 0;
  }
}

_QWORD *ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791BE48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791BE48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *radio::HealthService::State::State(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  NSObject *initially_inactive;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v21[2];
  _BYTE v22[16];
  char v23[16];
  char v24[16];

  *a1 = off_1E791BBB8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v22, "com.apple.telephony.abm", "net.health.svc");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v7 = dispatch_queue_create_with_target_V2("net.health.svc", initially_inactive, 0);
  dispatch_set_qos_class_floor(v7, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v7);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    a1[12] = 0;
    dispatch_release(v7);
  }
  else
  {
    a1[12] = 0;
  }
  *a1 = off_1E791BE48;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v24);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a2;
  v8 = a2[1];
  a1[8] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v23);
  *a1 = off_1E791BEB8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
  *a1 = off_1E791BBB8;
  a1[13] = 0;
  a1[14] = 0;
  v11 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v21[0] = v11;
  v21[1] = (uint64_t)v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  NetworkStatsInterface::create(v21, a1 + 15);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  a1[17] = *a3;
  v17 = a3[1];
  a1[18] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  a1[19] = 0;
  a1[20] = 0;
  a1[23] = 0;
  a1[24] = 0;
  a1[22] = 0;
  a1[21] = a1 + 22;
  return a1;
}

void sub_1BF683128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_1BF68314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *radio::HealthService::State::getName(radio::HealthService::State *this)
{
  return "net.health.svc";
}

void ___ZN5radio13HealthService5State5startEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(uint64_t a1)
{
  radio::HealthService::State *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;

  v1 = *(radio::HealthService::State **)(a1 + 32);
  v2 = *(const __CFDictionary **)(a1 + 40);
  v3 = v2;
  if (v2)
    CFRetain(v2);
  radio::HealthService::State::startDataReportingTimer_sync((uint64_t)v1, &v3);
  if (v2)
    CFRelease(v2);
  radio::HealthService::State::startDataStallReporting_sync(v1);
}

void sub_1BF6831E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t radio::HealthService::State::startDataReportingTimer_sync(uint64_t a1, const __CFDictionary **a2)
{
  unsigned int Int;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD handler[6];
  std::__shared_weak_count *v25;
  _QWORD v26[2];
  uint8_t buf[16];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v26[0] = 0xAAAAAAAAAAAAAAAALL;
  v26[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v26, *a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v26, CFSTR("DataReportingInterval"));
  v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = Int;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Starting data reporting with interval %d millisec", buf, 8u);
  }
  v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  *(_QWORD *)(a1 + 192) = v5;
  dispatch_source_set_timer(v5, 0, 1000000 * Int, 0x3B9ACA00uLL);
  v6 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v6 || (v7 = *(_QWORD *)(a1 + 72), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = *(NSObject **)(a1 + 192);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_7_5;
  handler[4] = a1;
  handler[5] = v7;
  v25 = v9;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v14, handler);
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(a1 + 120), buf);
  v16 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  v17 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v21 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)a1);
  dispatch_activate(*(dispatch_object_t *)(a1 + 192));
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  std::__shared_weak_count::__release_weak(v9);
  return MEMORY[0x1C3B8B8B4](v26);
}

void radio::HealthService::State::startDataStallReporting_sync(radio::HealthService::State *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  _QWORD aBlock[6];
  std::__shared_weak_count *v18;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_9_5;
  aBlock[4] = this;
  aBlock[5] = v3;
  v18 = v5;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  v11 = _Block_copy(aBlock);
  v12 = *((_QWORD *)this + 11);
  if (v12)
    dispatch_retain(*((dispatch_object_t *)this + 11));
  v13 = *((_QWORD *)this + 17);
  if (v11)
  {
    v14 = _Block_copy(v11);
    v15 = v14;
    v16 = v12;
    if (v12)
      goto LABEL_15;
LABEL_18:
    DataStallDetection::setCallback(v13, (uint64_t)&v15);
    if (!v14)
      goto LABEL_20;
    goto LABEL_19;
  }
  v14 = 0;
  v15 = 0;
  v16 = v12;
  if (!v12)
    goto LABEL_18;
LABEL_15:
  dispatch_retain(v12);
  DataStallDetection::setCallback(v13, (uint64_t)&v15);
  dispatch_release(v12);
  if (v14)
LABEL_19:
    _Block_release(v14);
LABEL_20:
  if (v12)
    dispatch_release(v12);
  if (v11)
    _Block_release(v11);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v5);
}

CFTypeRef __copy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSN3ctu2cf11CFSharedRefIK14__CFDictionaryEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void ___ZN5radio13HealthService5State15reportDataStatsEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v1 = *(_QWORD *)(a1 + 32);
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(v1 + 120), &v9);
  v2 = v9;
  v9 = 0uLL;
  v3 = *(std::__shared_weak_count **)(v1 + 160);
  *(_OWORD *)(v1 + 152) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
        goto LABEL_6;
LABEL_9:
      radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v1);
      return;
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_9;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v1);
}

void radio::HealthService::State::queryAndReportDataStats_sync(radio::HealthService::State *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  NetworkStatsInterface::query(*((NetworkStatsInterface **)this + 15), &v9);
  v2 = v9;
  v9 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  *(_OWORD *)((char *)this + 152) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
        goto LABEL_6;
LABEL_9:
      radio::HealthService::State::reportDataStats_sync(this);
      return;
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (!*((_QWORD *)&v9 + 1))
    goto LABEL_9;
LABEL_6:
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    goto LABEL_9;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  radio::HealthService::State::reportDataStats_sync(this);
}

void ___ZN5radio13HealthService5State5resetEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 160);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void ___ZN5radio13HealthService5State28startDataReportingTimer_syncEN3ctu2cf11CFSharedRefIK14__CFDictionaryEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v15 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v12 = v4;
LABEL_17:
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return;
  }
  NetworkStatsInterface::query(*(NetworkStatsInterface **)(v3 + 120), &v16);
  v5 = v16;
  v16 = 0uLL;
  v6 = *(std::__shared_weak_count **)(v3 + 160);
  *(_OWORD *)(v3 + 152) = v5;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v3);
  v12 = v15;
  if (v15)
    goto LABEL_17;
}

void sub_1BF6839C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN5radio13HealthService5State28startDataStallReporting_syncEv_block_invoke(_QWORD *a1, const void **a2)
{
  std::__shared_weak_count *v3;
  uint64_t **v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (uint64_t **)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5 + 21, a2, (uint64_t)a2);
        radio::HealthService::State::reportDataStats_sync((radio::HealthService::State *)v5);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF683ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void radio::HealthService::State::reportDataStats_sync(radio::HealthService::State *this)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t **v3;
  std::__shared_weak_count *v4;
  _QWORD *v5;
  __int128 v6;
  _BOOL4 v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  _DWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v41;
  _QWORD aBlock[6];
  std::__shared_weak_count *v43;
  void *v44;
  dispatch_object_t object;
  _QWORD **v46;
  std::__shared_weak_count *v47;
  unint64_t v48;
  int v49;
  __int128 v50;
  _BYTE __p[32];
  _QWORD **v52;
  std::__shared_weak_count *v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  _BOOL4 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 19))
  {
    v1 = (_QWORD *)*((_QWORD *)this + 19);
    v2 = (_QWORD **)operator new(0x18uLL);
    v2[1] = 0;
    v3 = v2 + 1;
    v2[2] = 0;
    *v2 = v2 + 1;
    v52 = v2;
    v4 = (std::__shared_weak_count *)operator new(0x20uLL);
    v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791BF30;
    v4->__shared_owners_ = 0;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v2;
    v53 = v4;
    v5 = (_QWORD *)*v1;
    v41 = v1 + 1;
    if ((_QWORD *)*v1 != v1 + 1)
    {
      while (1)
      {
        *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&__p[16] = v6;
        v50 = v6;
        *(_OWORD *)__p = v6;
        LODWORD(v50) = *((_DWORD *)v5 + 8);
        __p[0] = *((_BYTE *)v5 + 48);
        *((_QWORD *)&v50 + 1) = v5[5];
        if (*((char *)v5 + 79) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[8], (const std::string::value_type *)v5[7], v5[8]);
        }
        else
        {
          *(_OWORD *)&__p[8] = *(_OWORD *)(v5 + 7);
          *(_QWORD *)&__p[24] = v5[9];
        }
        v48 = 0xAAAAAAAAAAAAAAAALL;
        v49 = -1431655766;
        radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)&v48);
        v48 = *((_QWORD *)&v50 + 1);
        if (__p[0])
          break;
LABEL_24:
        if ((__p[31] & 0x80000000) != 0)
        {
          operator delete(*(void **)&__p[8]);
          v17 = (_QWORD *)v5[1];
          if (v17)
          {
            do
            {
LABEL_28:
              v18 = v17;
              v17 = (_QWORD *)*v17;
            }
            while (v17);
            goto LABEL_4;
          }
        }
        else
        {
          v17 = (_QWORD *)v5[1];
          if (v17)
            goto LABEL_28;
        }
        do
        {
          v18 = (_QWORD *)v5[2];
          v19 = *v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v19);
LABEL_4:
        v5 = v18;
        if (v18 == v41)
          goto LABEL_33;
      }
      v7 = (uint64_t *)((char *)this + 176) != std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)this + 168, (const void **)&__p[8]);
      v49 = v7;
      v8 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        v55 = v50;
        v56 = 1024;
        v57 = v48;
        v58 = 1024;
        v59 = HIDWORD(v48);
        v60 = 1024;
        v61 = v7;
        _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Interface %u, count %u/%u, state %d", buf, 0x1Au);
        v9 = v50;
        v10 = *v3;
        v11 = v2 + 1;
        v12 = v2 + 1;
        if (*v3)
        {
          while (1)
          {
LABEL_15:
            while (1)
            {
              v12 = (uint64_t **)v10;
              v13 = *((_DWORD *)v10 + 7);
              if (v13 <= v9)
                break;
              v10 = *v12;
              v11 = v12;
              if (!*v12)
                goto LABEL_19;
            }
            if (v13 >= v9)
              break;
            v10 = v12[1];
            if (!v10)
            {
              v11 = v12 + 1;
              goto LABEL_19;
            }
          }
          v14 = v12;
          goto LABEL_23;
        }
      }
      else
      {
        v9 = v50;
        v10 = *v3;
        v11 = v2 + 1;
        v12 = v2 + 1;
        if (*v3)
          goto LABEL_15;
      }
LABEL_19:
      v14 = operator new(0x30uLL);
      v14[7] = v9;
      radio::HealthCommandDriver::LinkStats::LinkStats((radio::HealthCommandDriver::LinkStats *)(v14 + 8));
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v12;
      *v11 = (uint64_t *)v14;
      v15 = (_QWORD *)**v2;
      v16 = (uint64_t *)v14;
      if (v15)
      {
        *v2 = v15;
        v16 = *v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v2[1], v16);
      v2[2] = (_QWORD *)((char *)v2[2] + 1);
LABEL_23:
      *((_QWORD *)v14 + 4) = v48;
      v14[10] = v49;
      goto LABEL_24;
    }
LABEL_33:
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v20 || (v21 = *((_QWORD *)this + 9), (v22 = std::__shared_weak_count::lock(v20)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v23 = v22;
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v23);
    }
    v28 = *((_QWORD *)this + 13);
    v46 = v52;
    v47 = v53;
    if (v53)
    {
      v29 = (unint64_t *)&v53->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_11_6;
    aBlock[4] = this;
    aBlock[5] = v21;
    v43 = v23;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v32 = _Block_copy(aBlock);
    v33 = *((_QWORD *)this + 11);
    if (v33)
      dispatch_retain(v33);
    v44 = v32;
    object = v33;
    (*(void (**)(uint64_t, _QWORD ***, void **))(*(_QWORD *)v28 + 56))(v28, &v46, &v44);
    if (object)
      dispatch_release(object);
    if (v44)
      _Block_release(v44);
    v34 = v47;
    if (v47)
    {
      v35 = (unint64_t *)&v47->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v43)
      std::__shared_weak_count::__release_weak(v43);
    std::__shared_weak_count::__release_weak(v23);
    v37 = v53;
    if (v53)
    {
      v38 = (unint64_t *)&v53->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
}

void sub_1BF683F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF683FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1BF684004(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1BF684018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  uint64_t v36;

  operator delete(v35);
  if (a35 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v36 - 176);
  _Unwind_Resume(a1);
}

uint64_t dispatch::callback<void({block_pointer})(std::string)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN5radio13HealthService5State20reportDataStats_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 40);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Failed to update data stats:\n%@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(v13) = 0;
          _os_log_debug_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEBUG, "#D Updated data stats", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_12_6;
  aBlock[4] = v2;
  aBlock[5] = v4;
  v20 = v6;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = (void *)a1[5];
  if (v12)
    v12 = _Block_copy(v12);
  v13 = a1[6];
  v21 = v12;
  v22 = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(v2 + 88);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v23 = (unint64_t)v14;
  v24 = (unint64_t)v15;
  v16 = *(_QWORD *)(v2 + 104);
  if (v14)
  {
    v17 = _Block_copy(v14);
    object = v15;
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  v17 = 0;
  object = v15;
  if (v15)
LABEL_19:
    dispatch_retain(v15);
LABEL_20:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 64))(v16, &v17);
  if (object)
    dispatch_release(object);
  if (v17)
    _Block_release(v17);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF6843BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State13enterLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  void *aBlock;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!*a2)
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v17) = 138412290;
          *(_QWORD *)((char *)&v17 + 4) = v8;
          _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Entering Low Power Failed: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Entering Low Power complete", (uint8_t *)&v17, 2u);
      }
      v11 = (const void *)a1[7];
      if (v11)
        v12 = _Block_copy(v11);
      else
        v12 = 0;
      v13 = a1[8];
      *(_QWORD *)&v17 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v17 + 1) = 1174405120;
      v18 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      v19 = &__block_descriptor_tmp_17_3;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
        {
LABEL_19:
          if (v12)
            _Block_release(v12);
          goto LABEL_21;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
          goto LABEL_19;
      }
      _Block_release(v14);
      goto LABEL_19;
    }
  }
}

void sub_1BF6845E0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;

  v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (void *)a2[7];
  if (v7)
    v7 = _Block_copy(v7);
  v8 = a2[8];
  a1[7] = v7;
  a1[8] = v8;
  if (v8)
    dispatch_retain(v8);
}

void __destroy_helper_block_e8_40c52_ZTSNSt3__18weak_ptrIN5radio13HealthService5StateEEE56c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(_QWORD *a1)
{
  NSObject *v2;
  const void *v3;
  std::__shared_weak_count *v4;

  v2 = a1[8];
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)a1[7];
  if (v3)
    _Block_release(v3);
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

void __copy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c46_ZTSN8dispatch8callbackIU13block_pointerFvvEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  dispatch_object_t object;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = a1[4];
  v3 = *(std::__shared_weak_count **)(v2 + 80);
  if (!v3 || (v4 = *(_QWORD *)(v2 + 72), (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v23 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_14_0;
  aBlock[4] = v2;
  aBlock[5] = v4;
  v20 = v6;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = (void *)a1[5];
  if (v12)
    v12 = _Block_copy(v12);
  v13 = a1[6];
  v21 = v12;
  v22 = v13;
  if (v13)
    dispatch_retain(v13);
  v14 = _Block_copy(aBlock);
  v15 = *(NSObject **)(v2 + 88);
  if (v15)
    dispatch_retain(*(dispatch_object_t *)(v2 + 88));
  v23 = (unint64_t)v14;
  v24 = (unint64_t)v15;
  v16 = *(_QWORD *)(v2 + 104);
  if (v14)
  {
    v17 = _Block_copy(v14);
    object = v15;
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  v17 = 0;
  object = v15;
  if (v15)
LABEL_19:
    dispatch_retain(v15);
LABEL_20:
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 72))(v16, &v17);
  if (object)
    dispatch_release(object);
  if (v17)
    _Block_release(v17);
  if (v15)
    dispatch_release(v15);
  if (v14)
    _Block_release(v14);
  if (v22)
    dispatch_release(v22);
  if (v21)
    _Block_release(v21);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF684924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  std::__shared_weak_count *v18;
  uint64_t v19;
  uint64_t v20;

  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback((uint64_t)&a10);
  dispatch::callback<void({block_pointer})(ctu::cf::CFSharedRef<__CFError>)>::~callback(v20 - 64);
  dispatch::callback<void({block_pointer})(void)>::~callback(v19);
  if (a18)
    std::__shared_weak_count::__release_weak(a18);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void ___ZN5radio13HealthService5State12exitLowPowerEN8dispatch8callbackIU13block_pointerFvvEEE_block_invoke_2(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  const void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  void *aBlock;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
      {
LABEL_21:
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        return;
      }
      v8 = *a2;
      v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      if (!*a2)
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v17) = 138412290;
          *(_QWORD *)((char *)&v17 + 4) = v8;
          _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Exiting Low Power Failed: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Exiting Low Power complete", (uint8_t *)&v17, 2u);
      }
      v11 = (const void *)a1[7];
      if (v11)
        v12 = _Block_copy(v11);
      else
        v12 = 0;
      v13 = a1[8];
      *(_QWORD *)&v17 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v17 + 1) = 1174405120;
      v18 = ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke;
      v19 = &__block_descriptor_tmp_17_3;
      if (v12)
      {
        aBlock = _Block_copy(v12);
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
        {
LABEL_19:
          if (v12)
            _Block_release(v12);
          goto LABEL_21;
        }
      }
      else
      {
        aBlock = 0;
        dispatch_async(v13, &v17);
        v14 = aBlock;
        if (!aBlock)
          goto LABEL_19;
      }
      _Block_release(v14);
      goto LABEL_19;
    }
  }
}

void sub_1BF684B48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "net.health.svc");
}

uint64_t ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791BE48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791BE48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvvEEclIJEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ctu::SharedLoggable<radio::HealthService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791BE48;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<radio::HealthService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791BEF0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN5radio13HealthService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c56_ZTSNSt3__110shared_ptrIKN5radio13HealthService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__on_zero_shared(uint64_t a1)
{
  _QWORD **v1;

  v1 = *(_QWORD ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,radio::HealthCommandDriver::LinkStats> *,std::shared_ptr<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>::__shared_ptr_default_delete<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>,std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>,std::allocator<std::map<unsigned int,radio::HealthCommandDriver::LinkStats>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF74222ALL)
    return a1 + 24;
  if (((v3 & 0x80000001BF74222ALL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF74222ALL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF74222ALL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void HKWorkoutManager::create(NSObject **a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(a1, a2);
}

uint64_t HKWorkoutManager::HKWorkoutManager(uint64_t a1, dispatch_object_t *a2)
{
  NSObject *v3;
  void (**v4)(HKWorkoutManager *__hidden);
  const char *v5;
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *initially_inactive;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  id v18;
  id v19;
  uint64_t v20;
  void *shared_weak_owners;
  std::__shared_weak_count *shared_owners;
  unint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE v31[16];
  _QWORD block[5];
  _BYTE v33[16];

  *(_QWORD *)a1 = off_1E791BF80;
  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    v4 = *(void (***)(HKWorkoutManager *__hidden))a1;
  }
  else
  {
    v4 = off_1E791BF80;
  }
  v5 = (const char *)((uint64_t (*)(uint64_t))v4[6])(a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v31, "com.apple.telephony.abm", v5);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v8 = GetABMLogServer(void)::sLogServer;
    v7 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_9;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v8 = GetABMLogServer(void)::sLogServer;
    v7 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_9;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
LABEL_9:
  if (v3)
    dispatch_retain(v3);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v12 = dispatch_queue_create_with_target_V2("workout.hk", initially_inactive, v3);
  dispatch_set_qos_class_floor(v12, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v12);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v12;
  if (v12)
    dispatch_retain(v12);
  *(_QWORD *)(a1 + 96) = v3;
  if (v3)
    dispatch_retain(v3);
  if (v12)
    dispatch_release(v12);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)a1 = off_1E791C0A8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 8) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v33);
    *(_QWORD *)a1 = off_1E791C138;
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v33);
    *(_QWORD *)a1 = off_1E791C138;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v31);
  if (v3)
    dispatch_release(v3);
  *(_QWORD *)a1 = off_1E791BF80;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  v16 = (std::__shared_weak_count *)operator new(0x30uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_1E791C058;
  v16[1].__vftable = 0;
  v16[1].__shared_owners_ = 0;
  v16[1].__shared_weak_owners_ = 0;
  v18 = objc_alloc(MEMORY[0x1E0CB7058]);
  v19 = objc_alloc_init(MEMORY[0x1E0CB6780]);
  v20 = objc_msgSend(v18, "initWithHealthStore:", v19);
  shared_weak_owners = (void *)v16[1].__shared_weak_owners_;
  v16[1].__shared_weak_owners_ = v20;

  *(_QWORD *)(a1 + 144) = v16 + 1;
  *(_QWORD *)(a1 + 152) = v16;
  shared_owners = (std::__shared_weak_count *)v16[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return a1;
    do
      v23 = __ldxr(v17);
    while (__stxr(v23 + 1, v17));
    p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v25 = __ldxr(p_shared_weak_owners);
    while (__stxr(v25 + 1, p_shared_weak_owners));
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)&v16[1];
    v16[1].__shared_owners_ = (uint64_t)v16;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v26 = __ldxr(v17);
    while (__stxr(v26 + 1, v17));
    v27 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v16[1].__vftable = (std::__shared_weak_count_vtbl *)&v16[1];
    v16[1].__shared_owners_ = (uint64_t)v16;
  }
  do
    v29 = __ldaxr(v17);
  while (__stlxr(v29 - 1, v17));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  return a1;
}

void sub_1BF68537C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = *(std::__shared_weak_count **)(v2 + 32);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v2);
  operator delete(v6);
  v7 = (_QWORD *)v1[16];
  if (v7 == v1 + 13)
  {
    v8 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_8;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_8:
  ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791C0A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791C0A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void HKWorkoutManager::~HKWorkoutManager(HKWorkoutManager *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  HKWorkoutManager *v5;
  HKWorkoutManager *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;

  *(_QWORD *)this = off_1E791BF80;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (HKWorkoutManager *)((char *)this + 104);
      v6 = (HKWorkoutManager *)*((_QWORD *)this + 16);
      if (v6 != (HKWorkoutManager *)((char *)this + 104))
        goto LABEL_6;
LABEL_9:
      v7 = 4;
      v6 = v5;
      goto LABEL_10;
    }
  }
  v5 = (HKWorkoutManager *)((char *)this + 104);
  v6 = (HKWorkoutManager *)*((_QWORD *)this + 16);
  if (v6 == (HKWorkoutManager *)((char *)this + 104))
    goto LABEL_9;
LABEL_6:
  if (!v6)
    goto LABEL_11;
  v7 = 5;
LABEL_10:
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_11:
  *(_QWORD *)this = off_1E791C0A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v8 = *((_QWORD *)this + 12);
  if (v8)
    dispatch_release(v8);
  v9 = *((_QWORD *)this + 11);
  if (v9)
    dispatch_release(v9);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
}

{
  void *v1;

  HKWorkoutManager::~HKWorkoutManager(this);
  operator delete(v1);
}

const char *HKWorkoutManager::getName(HKWorkoutManager *this)
{
  return "workout.hk";
}

void HKWorkoutManager::start(HKWorkoutManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::start(void)::$_0>(HKWorkoutManager::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::start(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::start(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void HKWorkoutManager::stop(HKWorkoutManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::stop(void)::$_0>(HKWorkoutManager::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::stop(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void HKWorkoutManager::registerCallback(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v20[3];
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = v20;
  v4 = (_QWORD *)a2[3];
  if (v4)
  {
    if (v4 == a2)
    {
      v21 = v20;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v20);
    }
    else
    {
      v21 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 16))(v4);
    }
  }
  else
  {
    v21 = 0;
  }
  v5 = (std::__shared_weak_count *)a1[10];
  if (!v5 || (v6 = a1[9], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(0x28uLL);
  v10 = v9;
  v11 = v21;
  *v9 = a1;
  if (v11)
  {
    if (v11 == v20)
    {
      v9[4] = v9 + 1;
      (*(void (**)(_QWORD *))(v20[0] + 24))(v20);
    }
    else
    {
      v9[4] = v11;
      v21 = 0;
    }
  }
  else
  {
    v9[4] = 0;
  }
  v12 = a1[11];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v6;
  v15[2] = v8;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>(HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0,std::default_delete<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    v17 = v21;
    if (v21 != v20)
      goto LABEL_19;
LABEL_22:
    v18 = 4;
    goto LABEL_23;
  }
  v17 = v21;
  if (v21 == v20)
    goto LABEL_22;
LABEL_19:
  if (!v17)
    return;
  v18 = 5;
  v3 = v17;
LABEL_23:
  (*(void (**)(_QWORD *))(*v3 + 8 * v18))(v3);
}

void sub_1BF68591C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void std::__shared_ptr_emplace<HealthStoreManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791C058;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HealthStoreManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791C058;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<HealthStoreManager>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

_QWORD *ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791C0A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791C0A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::allocate_shared[abi:ne180100]<HKWorkoutManager,std::allocator<HKWorkoutManager>,dispatch::workloop &,void>(NSObject **a1@<X1>, uint64_t *a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *shared_owners;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  dispatch_object_t v16;

  v4 = (std::__shared_weak_count *)operator new(0xB8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791C0E8;
  v6 = (uint64_t)&v4[1];
  v7 = *a1;
  v16 = v7;
  if (v7)
    dispatch_retain(v7);
  HKWorkoutManager::HKWorkoutManager(v6, &v16);
  if (v7)
    dispatch_release(v7);
  *a2 = v6;
  a2[1] = (uint64_t)v4;
  shared_owners = (std::__shared_weak_count *)v4[4].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v4[4].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v4[4].__shared_owners_ = (uint64_t)v4;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1BF685C0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  NSObject *v2;
  void *v4;

  if (v2)
    dispatch_release(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<HKWorkoutManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791C0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HKWorkoutManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791C0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<HKWorkoutManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ctu::SharedLoggable<HKWorkoutManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791C0A8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::start(void)::$_0>(HKWorkoutManager::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::start(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  const char *v12;
  NSObject *v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint8_t v23[16];
  _QWORD handler[6];
  std::__shared_weak_count *v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  if (*(_BYTE *)(v3 + 136))
    goto LABEL_26;
  *(_BYTE *)(v3 + 136) = 1;
  v4 = *(std::__shared_weak_count **)(v3 + 80);
  if (!v4 || (v5 = *(_QWORD *)(v3 + 72), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (const char *)*MEMORY[0x1E0CB7660];
  v13 = *(NSObject **)(v3 + 88);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZZN16HKWorkoutManager5startEvENK3__0clEv_block_invoke;
  handler[3] = &__block_descriptor_56_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE_e8_v12__0i8l;
  handler[4] = v3;
  handler[5] = v5;
  v25 = v7;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  notify_register_dispatch(v12, (int *)(v3 + 140), v13, handler);
  v15 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Workout manager started", v23, 2u);
  }
  v16 = *(_QWORD *)(v3 + 128);
  if (v16)
  {
    v17 = *(uint64_t **)(v3 + 144);
    if (v16 == v3 + 104)
    {
      v27 = v26;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 24))(v16, v26);
    }
    else
    {
      v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    }
    HealthStoreManager::queryWorkoutInfo(v17, v26);
    v18 = v27;
    if (v27 == v26)
    {
      v19 = 4;
      v18 = v26;
      goto LABEL_22;
    }
    if (v27)
    {
      v19 = 5;
LABEL_22:
      (*(void (**)(void))(*v18 + 8 * v19))();
    }
  }
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  std::__shared_weak_count::__release_weak(v7);
LABEL_26:
  operator delete(v2);
  v20 = (std::__shared_weak_count *)a1[2];
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(a1);
}

void sub_1BF685F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  void *v22;
  std::__shared_weak_count *v23;
  char *v24;
  char *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;

  v26 = a21;
  if (a21 == v24)
  {
    v27 = 4;
    v26 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  if (a17)
    std::__shared_weak_count::__release_weak(a17);
  std::__shared_weak_count::__release_weak(v23);
  operator delete(v22);
  v28 = (std::__shared_weak_count *)v21[2];
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  operator delete(v21);
  _Unwind_Resume(a1);
}

void ___ZZN16HKWorkoutManager5startEvENK3__0clEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint8_t v13[8];
  std::__shared_weak_count *v15;
  _QWORD v16[3];
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (_QWORD *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v15 = v4;
    if (v4)
    {
      v5 = v4;
      if (!a1[5])
        goto LABEL_15;
      v6 = v3[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Workout notification received", v13, 2u);
      }
      v7 = (_QWORD *)v3[16];
      if (!v7)
        goto LABEL_15;
      v8 = (uint64_t *)v3[18];
      if (v7 == v3 + 13)
      {
        v17 = v16;
        (*(void (**)(_QWORD *, _QWORD *))(*v7 + 24))(v7, v16);
      }
      else
      {
        v17 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
      }
      HealthStoreManager::queryWorkoutInfo(v8, v16);
      v9 = v17;
      if (v17 == v16)
      {
        v10 = 4;
        v9 = v16;
      }
      else
      {
        if (!v17)
          goto LABEL_15;
        v10 = 5;
      }
      (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_15:
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF686180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
    {
      std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
      _Unwind_Resume(a1);
    }
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void HealthStoreManager::queryWorkoutInfo(uint64_t *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  std::__shared_weak_count *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (void *)a1[2];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3321888768;
  v17[2] = ___ZN18HealthStoreManager16queryWorkoutInfoENSt3__18functionIFvN3abm11WorkoutTypeENS2_12WorkoutStateENS2_15WorkoutLocationENS2_12SwimLocationEEEE_block_invoke;
  v17[3] = &__block_descriptor_80_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE_e47_v24__0___HKCurrentWorkoutSnapshot_8__NSError_16l;
  v17[4] = v5;
  v18 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v14 = v19;
  v15 = a2[3];
  if (!v15)
    goto LABEL_14;
  if ((_QWORD *)v15 != a2)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
LABEL_14:
    v20 = (_BYTE *)v15;
    goto LABEL_16;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v19);
LABEL_16:
  objc_msgSend(v12, "currentWorkoutSnapshotWithCompletion:", v17);
  if (v20 == v19)
  {
    v16 = 4;
  }
  else
  {
    if (!v20)
      goto LABEL_21;
    v16 = 5;
    v14 = v20;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v16))(v14);
LABEL_21:
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF686370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  std::__shared_weak_count *v19;

  if (!a15)
  {
    std::__shared_weak_count::__release_weak(v19);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_ea8_40c41_ZTSNSt3__18weak_ptrI16HKWorkoutManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN18HealthStoreManager16queryWorkoutInfoENSt3__18functionIFvN3abm11WorkoutTypeENS2_12WorkoutStateENS2_15WorkoutLocationENS2_12SwimLocationEEEE_block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  _BOOL4 v11;
  void *v12;
  void *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  int v20;
  void *v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  int v29;
  unint64_t v30;
  uint8_t buf[4];
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    v28 = v8;
    if (v8)
    {
      v9 = v8;
      v27 = a1[4];
      if (v27)
      {
        v10 = a1[9];
        if (v10)
        {
          v11 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
          if (v5)
          {
            if (v11)
            {
              objc_msgSend(v5, "configuration");
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 134218240;
              v32 = objc_msgSend(v12, "activityType");
              v33 = 2048;
              v34 = objc_msgSend(v5, "state");
              _os_log_impl(&dword_1BF566000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "#I Workout callback; activity=%lu  session=%lu",
                buf,
                0x16u);

            }
            objc_msgSend(v5, "configuration", v27, v28);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v14 = objc_msgSend(v13, "activityType");

            v15 = 1;
            switch(v14)
            {
              case 13:
                v15 = 4;
                break;
              case 16:
                v15 = 3;
                break;
              case 35:
                v15 = 7;
                break;
              case 37:
                v15 = 6;
                break;
              case 46:
                break;
              case 52:
                v15 = 2;
                break;
              case 63:
                v15 = 8;
                break;
              case 68:
                v15 = 5;
                break;
              default:
                v15 = 9;
                break;
            }
            v16 = objc_msgSend(v5, "state");
            if (v16 == 2)
              v17 = 1;
            else
              v17 = 2 * (v16 == 4);
            objc_msgSend(v5, "configuration");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = objc_msgSend(v18, "locationType");

            if ((unint64_t)(v19 - 1) >= 3)
              v20 = 3;
            else
              v20 = v19 - 1;
            objc_msgSend(v5, "configuration");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            v22 = objc_msgSend(v21, "swimmingLocationType");

            v23 = 3;
            if (v22 < 3)
              v23 = v22;
            *(_DWORD *)buf = v15;
            v29 = v23;
            v30 = __PAIR64__(v17, v20);
            v24 = a1[9];
            if (!v24)
              std::__throw_bad_function_call[abi:ne180100]();
            (*(void (**)(uint64_t, uint8_t *, char *, unint64_t *, int *))(*(_QWORD *)v24 + 48))(v24, buf, (char *)&v30 + 4, &v30, &v29);
          }
          else
          {
            if (v11)
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1BF566000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "#I Workout callback with no data", buf, 2u);
              v10 = a1[9];
              *(_DWORD *)buf = 0;
              v30 = 0;
              v29 = 0;
              if (!v10)
                std::__throw_bad_function_call[abi:ne180100]();
            }
            else
            {
              *(_DWORD *)buf = 0;
              v30 = 0;
              v29 = 0;
            }
            (*(void (**)(uint64_t, uint8_t *, char *, unint64_t *, int *))(*(_QWORD *)v10 + 48))(v10, buf, (char *)&v30 + 4, &v30, &v29);
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }

}

void sub_1BF686724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t result;

  v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = a2[9];
  if (!result)
    goto LABEL_7;
  if ((_QWORD *)result != a2 + 6)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
LABEL_7:
    a1[9] = result;
    return result;
  }
  a1[9] = a1 + 6;
  return (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[9] + 24))(a2[9], a1 + 6);
}

void sub_1BF686814(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_32c43_ZTSNSt3__18weak_ptrI18HealthStoreManagerEE48c105_ZTSNSt3__18functionIFvN3abm11WorkoutTypeENS1_12WorkoutStateENS1_15WorkoutLocationENS1_12SwimLocationEEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD **)(a1 + 72);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::stop(void)::$_0>(HKWorkoutManager::stop(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::stop(void)::$_0,dispatch_queue_s *::default_delete<HKWorkoutManager::stop(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];

  v2 = *a1;
  v3 = **a1;
  if (*(_BYTE *)(v3 + 136))
  {
    *(_BYTE *)(v3 + 136) = 0;
    v4 = *(_DWORD *)(v3 + 140);
    if (v4)
    {
      notify_cancel(v4);
      *(_DWORD *)(v3 + 140) = 0;
    }
    v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Workout manager stopped", v9, 2u);
    }
  }
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(a1);
}

void sub_1BF686960(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<HKWorkoutManager>::execute_wrapped<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>(HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0,std::default_delete<HKWorkoutManager::registerCallback(std::function<void ()(abm::WorkoutType,abm::WorkoutState,abm::WorkoutLocation,abm::SwimLocation)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = (uint64_t)(*a1 + 1);
  v5 = (*a1)[4];
  if (!v5)
    goto LABEL_4;
  if (v5 != v4)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
LABEL_4:
    v18 = (_QWORD *)v5;
    goto LABEL_6;
  }
  v18 = v17;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 24))(v4, v17);
LABEL_6:
  v6 = (_QWORD *)(v3 + 104);
  if ((_QWORD *)(v3 + 104) == v17)
    goto LABEL_15;
  v7 = v18;
  v8 = *(_QWORD **)(v3 + 128);
  if (v18 == v17)
  {
    if (v8 != v6)
    {
      (*(void (**)(_QWORD *, uint64_t))(v17[0] + 24))(v17, v3 + 104);
      (*(void (**)(_QWORD *))(*v18 + 32))(v18);
      v18 = *(_QWORD **)(v3 + 128);
      v10 = v18;
      *(_QWORD *)(v3 + 128) = v6;
      v9 = v10;
      if (v10 == v17)
        goto LABEL_19;
      goto LABEL_16;
    }
    memset(v19, 170, 24);
    (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v19);
    (*(void (**)(_QWORD *))(*v18 + 32))(v18);
    v18 = 0;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v3 + 128) + 24))(*(_QWORD *)(v3 + 128), v17);
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 128) + 32))(*(_QWORD *)(v3 + 128));
    *(_QWORD *)(v3 + 128) = 0;
    v18 = v17;
    (*(void (**)(_QWORD *, uint64_t))(v19[0] + 24))(v19, v3 + 104);
    (*(void (**)(_QWORD *))(v19[0] + 32))(v19);
    *(_QWORD *)(v3 + 128) = v6;
    v9 = v18;
    if (v18 != v17)
      goto LABEL_16;
LABEL_19:
    v11 = 4;
    v9 = v17;
    goto LABEL_20;
  }
  if (v8 == v6)
  {
    (*(void (**)(uint64_t, _QWORD *))(*v6 + 24))(v3 + 104, v17);
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 128) + 32))(*(_QWORD *)(v3 + 128));
    *(_QWORD *)(v3 + 128) = v18;
    v18 = v17;
LABEL_15:
    v9 = v18;
    if (v18 != v17)
      goto LABEL_16;
    goto LABEL_19;
  }
  v18 = *(_QWORD **)(v3 + 128);
  *(_QWORD *)(v3 + 128) = v7;
  v9 = v8;
  if (v8 == v17)
    goto LABEL_19;
LABEL_16:
  if (!v9)
    goto LABEL_21;
  v11 = 5;
LABEL_20:
  (*(void (**)(void))(*v9 + 8 * v11))();
LABEL_21:
  v12 = v2[4];
  if (v12 == v4)
  {
    v13 = 4;
    goto LABEL_25;
  }
  if (v12)
  {
    v13 = 5;
    v4 = v2[4];
LABEL_25:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8 * v13))(v4);
  }
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1BF686C60(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *BasebandTransport::getSupportedProtocols@<X0>(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *result;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  result = (uint64_t *)capabilities::radio::vendor(this);
  if ((_DWORD)result == 1)
  {
    v13 = operator new(0x18uLL);
    v13[4] = 0;
    *(_QWORD *)v13 = &v33;
    *((_QWORD *)v13 + 1) = &v33;
    v34 = (uint64_t *)v13;
    v14 = operator new(0x18uLL);
    v14[4] = 1;
    *(_QWORD *)v14 = v13;
    *((_QWORD *)v14 + 1) = &v33;
    *((_QWORD *)v13 + 1) = v14;
    v15 = operator new(0x18uLL);
    v15[4] = 2;
    *(_QWORD *)v15 = v14;
    *((_QWORD *)v15 + 1) = &v33;
    *((_QWORD *)v14 + 1) = v15;
    v16 = operator new(0x18uLL);
    v16[4] = 3;
    *(_QWORD *)v16 = v15;
    *((_QWORD *)v16 + 1) = &v33;
    *((_QWORD *)v15 + 1) = v16;
    v17 = operator new(0x18uLL);
    v17[4] = 4;
    *(_QWORD *)v17 = v16;
    *((_QWORD *)v17 + 1) = &v33;
    *((_QWORD *)v16 + 1) = v17;
    v18 = operator new(0x18uLL);
    v18[4] = 5;
    *(_QWORD *)v18 = v17;
    *((_QWORD *)v18 + 1) = &v33;
    *((_QWORD *)v17 + 1) = v18;
    v19 = operator new(0x18uLL);
    v19[4] = 10;
    *(_QWORD *)v19 = v18;
    *((_QWORD *)v19 + 1) = &v33;
    *((_QWORD *)v18 + 1) = v19;
    v20 = operator new(0x18uLL);
    v20[4] = 12;
    *(_QWORD *)v20 = v19;
    *((_QWORD *)v20 + 1) = &v33;
    *((_QWORD *)v19 + 1) = v20;
    v21 = operator new(0x18uLL);
    v21[4] = 14;
    *(_QWORD *)v21 = v20;
    *((_QWORD *)v21 + 1) = &v33;
    *((_QWORD *)v20 + 1) = v21;
    v33 = (uint64_t)v21;
    v35 = 9;
    result = (uint64_t *)capabilities::radio::mav20Plus((capabilities::radio *)v21);
    if ((_DWORD)result)
    {
      v22 = operator new(0x18uLL);
      v22[4] = 11;
      v23 = v33;
      *(_QWORD *)v22 = v33;
      *((_QWORD *)v22 + 1) = &v33;
      *(_QWORD *)(v23 + 8) = v22;
      v24 = v35;
      v33 = (uint64_t)v22;
      ++v35;
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 15;
      *result = (uint64_t)v22;
      result[1] = (uint64_t)&v33;
      *((_QWORD *)v22 + 1) = result;
      v33 = (uint64_t)result;
      v35 = v24 + 2;
    }
    if (a2[2])
    {
      v25 = *a2;
      result = (uint64_t *)a2[1];
      v26 = *result;
      *(_QWORD *)(v26 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v25 + 8) = v26;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v27 = result[1];
          operator delete(result);
          result = (uint64_t *)v27;
        }
        while ((uint64_t *)v27 != a2);
      }
    }
  }
  else
  {
    if ((_DWORD)result != 2)
      return result;
    v4 = operator new(0x18uLL);
    v4[4] = 6;
    *(_QWORD *)v4 = &v33;
    *((_QWORD *)v4 + 1) = &v33;
    v34 = (uint64_t *)v4;
    v5 = operator new(0x18uLL);
    v5[4] = 7;
    *(_QWORD *)v5 = v4;
    *((_QWORD *)v5 + 1) = &v33;
    *((_QWORD *)v4 + 1) = v5;
    v6 = operator new(0x18uLL);
    v6[4] = 8;
    *(_QWORD *)v6 = v5;
    *((_QWORD *)v6 + 1) = &v33;
    *((_QWORD *)v5 + 1) = v6;
    v7 = operator new(0x18uLL);
    v7[4] = 9;
    *(_QWORD *)v7 = v6;
    *((_QWORD *)v7 + 1) = &v33;
    *((_QWORD *)v6 + 1) = v7;
    v8 = operator new(0x18uLL);
    v8[4] = 10;
    *(_QWORD *)v8 = v7;
    *((_QWORD *)v8 + 1) = &v33;
    *((_QWORD *)v7 + 1) = v8;
    v33 = (uint64_t)v8;
    v35 = 5;
    result = (uint64_t *)capabilities::abs::supportsETSProtocol((capabilities::abs *)v8);
    if ((_DWORD)result)
    {
      result = (uint64_t *)operator new(0x18uLL);
      *((_DWORD *)result + 4) = 13;
      v9 = v33;
      *result = v33;
      result[1] = (uint64_t)&v33;
      *(_QWORD *)(v9 + 8) = result;
      v33 = (uint64_t)result;
      ++v35;
    }
    if (a2[2])
    {
      v10 = *a2;
      result = (uint64_t *)a2[1];
      v11 = *result;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(*a2 + 8);
      **(_QWORD **)(v10 + 8) = v11;
      a2[2] = 0;
      if (result != a2)
      {
        do
        {
          v12 = result[1];
          operator delete(result);
          result = (uint64_t *)v12;
        }
        while ((uint64_t *)v12 != a2);
      }
    }
  }
  v28 = v35;
  if (v35)
  {
    v30 = v33;
    v29 = v34;
    v31 = *v34;
    *(_QWORD *)(v31 + 8) = *(_QWORD *)(v33 + 8);
    **(_QWORD **)(v30 + 8) = v31;
    v32 = *a2;
    *(_QWORD *)(v32 + 8) = v29;
    *v29 = v32;
    *a2 = v30;
    *(_QWORD *)(v30 + 8) = a2;
    a2[2] += v28;
  }
  return result;
}

void sub_1BF687054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)va);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v2);
  _Unwind_Resume(a1);
}

void sub_1BF687084(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::list<std::pair<unsigned long long,unsigned int>>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1BF68709C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v16;

  do
  {
    v16 = (_QWORD *)v13[1];
    operator delete(v13);
    v13 = v16;
  }
  while (v16 != v14);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(v12);
  _Unwind_Resume(a1);
}

void BasebandTransport::getSupportedProtocolsAsStringLowerCase(BasebandTransport *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t i;
  int v4;
  char v5;
  char v6;
  char v7;
  char v8;
  __darwin_ct_rune_t v9;
  char v10;
  __darwin_ct_rune_t v11;
  _QWORD *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  __darwin_ct_rune_t v19[6];
  uint64_t v20[3];

  *a2 = (uint64_t)a2;
  a2[1] = (uint64_t)a2;
  a2[2] = 0;
  memset(v20, 170, sizeof(v20));
  BasebandTransport::getSupportedProtocols(this, v20);
  for (i = v20[1]; (uint64_t *)i != v20; i = *(_QWORD *)(i + 8))
  {
    v4 = *(_DWORD *)(i + 16);
    memset(v19, 170, sizeof(v19));
    switch(v4)
    {
      case 0:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997712;
        goto LABEL_30;
      case 1:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4997715;
        goto LABEL_30;
      case 2:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1195460932;
        goto LABEL_26;
      case 3:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397114194;
        goto LABEL_26;
      case 4:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX1");
        v7 = 1;
        break;
      case 5:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "QMUX2");
        v7 = 1;
        break;
      case 6:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5066578;
        goto LABEL_30;
      case 7:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1414483778;
        goto LABEL_26;
      case 8:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4805185;
        goto LABEL_30;
      case 9:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5526611;
        goto LABEL_30;
      case 10:
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 2;
        strcpy((char *)v19, "AT");
        v5 = 1;
        break;
      case 11:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1280328769;
        goto LABEL_26;
      case 12:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 8;
        strcpy((char *)v19, "MEDIACTL");
        break;
      case 13:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5461061;
        goto LABEL_30;
      case 14:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        strcpy((char *)v19, "GNSS");
        v6 = 1;
        break;
      case 15:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1397965905;
        goto LABEL_26;
      case 16:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 5;
        strcpy((char *)v19, "RCTTH");
        v7 = 1;
        break;
      case 17:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5260097;
        goto LABEL_30;
      case 18:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1297040214;
        goto LABEL_26;
      case 19:
        v5 = 0;
        v10 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 4;
        v11 = 1129335117;
LABEL_26:
        v19[0] = v11;
        v6 = 1;
        LOBYTE(v19[1]) = 0;
        break;
      case 20:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4999236;
        goto LABEL_30;
      case 21:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 5789005;
        goto LABEL_30;
      case 22:
        v5 = 0;
        v6 = 0;
        v7 = 0;
        v8 = 0;
        HIBYTE(v19[5]) = 3;
        v9 = 4407622;
LABEL_30:
        v19[0] = v9;
        v10 = 1;
        break;
      default:
        v5 = 0;
        v10 = 0;
        v6 = 0;
        v7 = 0;
        HIBYTE(v19[5]) = 7;
        strcpy((char *)v19, "Unknown");
        v8 = 1;
        break;
    }
    LOBYTE(v19[0]) = __tolower(SLOBYTE(v19[0]));
    BYTE1(v19[0]) = __tolower(SBYTE1(v19[0]));
    if ((v5 & 1) == 0)
    {
      BYTE2(v19[0]) = __tolower(SBYTE2(v19[0]));
      if ((v10 & 1) == 0)
      {
        HIBYTE(v19[0]) = __tolower(SHIBYTE(v19[0]));
        if ((v6 & 1) == 0)
        {
          LOBYTE(v19[1]) = __tolower(SLOBYTE(v19[1]));
          if ((v7 & 1) == 0)
          {
            BYTE1(v19[1]) = __tolower(SBYTE1(v19[1]));
            BYTE2(v19[1]) = __tolower(SBYTE2(v19[1]));
            if ((v8 & 1) == 0)
              HIBYTE(v19[1]) = __tolower(SHIBYTE(v19[1]));
          }
        }
      }
    }
    v12 = operator new(0x28uLL);
    v13 = (std::string *)(v12 + 2);
    *v12 = 0;
    v12[1] = 0;
    if (SHIBYTE(v19[5]) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)v19, *(std::string::size_type *)&v19[2]);
    }
    else
    {
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)v19;
      v12[4] = *(_QWORD *)&v19[4];
    }
    v14 = *a2;
    *v12 = *a2;
    v12[1] = a2;
    *(_QWORD *)(v14 + 8) = v12;
    *a2 = (uint64_t)v12;
    ++a2[2];
    if (SHIBYTE(v19[5]) < 0)
      operator delete(*(void **)v19);
  }
  if (v20[2])
  {
    v16 = v20[0];
    v15 = (uint64_t *)v20[1];
    v17 = *(_QWORD *)v20[1];
    *(_QWORD *)(v17 + 8) = *(_QWORD *)(v20[0] + 8);
    **(_QWORD **)(v16 + 8) = v17;
    v20[2] = 0;
    if (v15 != v20)
    {
      do
      {
        v18 = (uint64_t *)v15[1];
        operator delete(v15);
        v15 = v18;
      }
      while (v18 != v20);
    }
  }
}

void sub_1BF6876B0(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1BF6876C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  char *v15;
  void *v16;
  void *v17;

  v17 = v16;
  operator delete(v17);
  if (a14 < 0)
    operator delete(__p);
  std::list<std::pair<unsigned long long,unsigned int>>::~list(&a15);
  std::list<std::string>::~list(v15);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asStringLowerCase@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  char *v6;
  _BYTE *v7;
  _BYTE *v8;

  memset(a2, 170, 24);
  result = BasebandTransport::asString(a1, (char *)a2);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  v6 = (char *)a2 + v4;
  if (v5 >= 0)
    v7 = v6;
  else
    v7 = (_BYTE *)(*a2 + a2[1]);
  if (v5 >= 0)
    v8 = a2;
  else
    v8 = (_BYTE *)*a2;
  for (; v8 != v7; ++v8)
  {
    result = __tolower((char)*v8);
    *v8 = result;
  }
  return result;
}

void sub_1BF68777C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *std::list<std::string>::~list(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v6;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void BasebandTransport::getSupportedProtocolsAsString(BasebandTransport *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18[3];

  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  memset(v18, 170, sizeof(v18));
  BasebandTransport::getSupportedProtocols(this, v18);
  v3 = (uint64_t *)v18[1];
  if ((uint64_t *)v18[1] != v18)
  {
    v4 = a2[2];
    v5 = v4 + 1;
    v6 = (_QWORD *)*a2;
    v7 = v18[1];
    do
    {
      v8 = 8;
      v9 = 0x4C5443414944454DLL;
      switch(*(_DWORD *)(v7 + 16))
      {
        case 0:
          v9 = v4 & 0xFFFFFFFF00000000 | 0x4C4250;
          v8 = 3;
          break;
        case 1:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 3;
          v8 = 3;
          break;
        case 2:
          v10 = 1195460932;
          goto LABEL_25;
        case 3:
          v10 = 1397114194;
          goto LABEL_25;
        case 4:
          v11 = 0x3158554D51;
          goto LABEL_21;
        case 5:
          v11 = 0x3258554D51;
          goto LABEL_21;
        case 6:
          v12 = 5066578;
          goto LABEL_29;
        case 7:
          v10 = 1414483778;
          goto LABEL_25;
        case 8:
          v12 = 4805185;
          goto LABEL_29;
        case 9:
          v12 = 5526611;
          goto LABEL_29;
        case 0xA:
          v13 = v4 & 0xFFFFFFFFFF000000 | 0x5441;
          v8 = 2;
          goto LABEL_30;
        case 0xB:
          v10 = 1280328769;
          goto LABEL_25;
        case 0xC:
          break;
        case 0xD:
          v12 = 5461061;
          goto LABEL_29;
        case 0xE:
          v9 = (v4 & 0xFFFFFF0000000000 | 0x53534451) + 2550;
          v8 = 4;
          break;
        case 0xF:
          v9 = v4 & 0xFFFFFF0000000000 | 0x53534451;
          v8 = 4;
          break;
        case 0x10:
          v11 = 0x4854544352;
LABEL_21:
          v13 = v4 & 0xFFFF000000000000 | v11 & 0xFFFFFFFFFFFFLL;
          v8 = 5;
          goto LABEL_30;
        case 0x11:
          v12 = 5260097;
          goto LABEL_29;
        case 0x12:
          v10 = 1297040214;
          goto LABEL_25;
        case 0x13:
          v10 = 1129335117;
LABEL_25:
          v13 = v4 & 0xFFFFFF0000000000 | v10 & 0xFFFFFFFFFFLL;
          v8 = 4;
          goto LABEL_30;
        case 0x14:
          v9 = (v4 & 0xFFFFFFFF00000000 | 0x4C4250) + 1524;
          v8 = 3;
          break;
        case 0x15:
          v12 = 5789005;
          goto LABEL_29;
        case 0x16:
          v12 = 4407622;
LABEL_29:
          v13 = v4 & 0xFFFFFFFF00000000 | v12;
          v8 = 3;
LABEL_30:
          v9 = v13;
          break;
        default:
          v8 = 7;
          v9 = 0x6E776F6E6B6E55;
          break;
      }
      v14 = operator new(0x28uLL);
      v14[2] = v9;
      v14[3] = 0;
      *((_BYTE *)v14 + 39) = v8;
      *v14 = v6;
      v14[1] = a2;
      v6[1] = v14;
      *a2 = v14;
      a2[2] = v5;
      v7 = *(_QWORD *)(v7 + 8);
      ++v5;
      v4 = v9;
      v6 = v14;
    }
    while ((uint64_t *)v7 != v18);
  }
  if (v18[2])
  {
    v15 = v18[0];
    v16 = *v3;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v18[0] + 8);
    **(_QWORD **)(v15 + 8) = v16;
    v18[2] = 0;
    if (v3 != v18)
    {
      do
      {
        v17 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v17;
      }
      while (v17 != v18);
    }
  }
}

void sub_1BF687AD4(_Unwind_Exception *a1)
{
  char *v1;

  std::list<std::string>::~list(v1);
  _Unwind_Resume(a1);
}

void sub_1BF687AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  va_list va;

  va_start(va, a2);
  std::list<std::pair<unsigned long long,unsigned int>>::~list((uint64_t *)va);
  std::list<std::string>::~list(v2);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::asString@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  switch((int)result)
  {
    case 0:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997712;
      break;
    case 1:
      a2[23] = 3;
      *(_DWORD *)a2 = 4997715;
      break;
    case 2:
      a2[23] = 4;
      strcpy(a2, "DIAG");
      break;
    case 3:
      a2[23] = 4;
      strcpy(a2, "REFS");
      break;
    case 4:
      a2[23] = 5;
      strcpy(a2, "QMUX1");
      break;
    case 5:
      a2[23] = 5;
      strcpy(a2, "QMUX2");
      break;
    case 6:
      a2[23] = 3;
      *(_DWORD *)a2 = 5066578;
      break;
    case 7:
      a2[23] = 4;
      strcpy(a2, "BOOT");
      break;
    case 8:
      a2[23] = 3;
      *(_DWORD *)a2 = 4805185;
      break;
    case 9:
      a2[23] = 3;
      *(_DWORD *)a2 = 5526611;
      break;
    case 10:
      a2[23] = 2;
      strcpy(a2, "AT");
      break;
    case 11:
      a2[23] = 4;
      strcpy(a2, "ADPL");
      break;
    case 12:
      a2[23] = 8;
      strcpy(a2, "MEDIACTL");
      break;
    case 13:
      a2[23] = 3;
      *(_DWORD *)a2 = 5461061;
      break;
    case 14:
      a2[23] = 4;
      strcpy(a2, "GNSS");
      break;
    case 15:
      a2[23] = 4;
      strcpy(a2, "QDSS");
      break;
    case 16:
      a2[23] = 5;
      strcpy(a2, "RCTTH");
      break;
    case 17:
      a2[23] = 3;
      *(_DWORD *)a2 = 5260097;
      break;
    case 18:
      a2[23] = 4;
      strcpy(a2, "VCOM");
      break;
    case 19:
      a2[23] = 4;
      strcpy(a2, "MIPC");
      break;
    case 20:
      a2[23] = 3;
      *(_DWORD *)a2 = 4999236;
      break;
    case 21:
      a2[23] = 3;
      *(_DWORD *)a2 = 5789005;
      break;
    case 22:
      a2[23] = 3;
      *(_DWORD *)a2 = 4407622;
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

{
  switch((int)result)
  {
    case 0:
      a2[23] = 8;
      strcpy(a2, "NotReady");
      break;
    case 1:
      a2[23] = 5;
      strcpy(a2, "Ready");
      break;
    case 2:
      a2[23] = 5;
      strcpy(a2, "Error");
      break;
    case 3:
      a2[23] = 7;
      strcpy(a2, "Stalled");
      break;
    default:
      a2[23] = 7;
      strcpy(a2, "Unknown");
      break;
  }
  return result;
}

uint64_t BasebandTransport::asProtocol(char *__s1)
{
  const char *v1;
  uint64_t result;

  v1 = __s1;
  if ((__s1[23] & 0x80000000) == 0)
  {
    result = strcmp(__s1, "PBL");
    if (!(_DWORD)result)
      return result;
    if (!strcmp(v1, "SBL"))
      return 1;
    if (strcasecmp(v1, "DIAG"))
    {
      if (strcasecmp(v1, "REFS"))
      {
        if (strcasecmp(v1, "QMUX1"))
        {
          if (strcasecmp(v1, "QMUX2"))
          {
            if (strcasecmp(v1, "ROM"))
            {
              if (strcasecmp(v1, "BOOT"))
              {
                if (strcasecmp(v1, "ARI"))
                {
                  if (strcasecmp(v1, "STT"))
                  {
                    if (strcasecmp(v1, "AT"))
                    {
                      if (strcasecmp(v1, "ADPL"))
                      {
                        if (strcasecmp(v1, "MEDIACTL"))
                        {
                          if (strcasecmp(v1, "ETS"))
                          {
                            if (strcasecmp(v1, "GNSS"))
                            {
                              if (strcasecmp(v1, "QDSS"))
                              {
                                if (strcasecmp(v1, "RCTTH"))
                                {
                                  if (strcasecmp(v1, "ACP"))
                                  {
                                    if (strcasecmp(v1, "VCOM"))
                                    {
                                      if (strcasecmp(v1, "MIPC"))
                                      {
                                        if (strcasecmp(v1, "DHL"))
                                        {
                                          if (strcasecmp(v1, "MUX"))
                                            goto LABEL_24;
                                          return 21;
                                        }
                                        return 20;
                                      }
                                      return 19;
                                    }
                                    return 18;
                                  }
                                  return 17;
                                }
                                return 16;
                              }
                              return 15;
                            }
                            return 14;
                          }
                          return 13;
                        }
                        return 12;
                      }
                      return 11;
                    }
                    return 10;
                  }
                  return 9;
                }
                return 8;
              }
              return 7;
            }
            return 6;
          }
          return 5;
        }
        return 4;
      }
      return 3;
    }
    return 2;
  }
  v1 = *(const char **)__s1;
  result = strcmp(*(const char **)__s1, "PBL");
  if (!(_DWORD)result)
    return result;
  if (!strcmp(v1, "SBL"))
    return 1;
  if (!strcasecmp(v1, "DIAG"))
    return 2;
  if (!strcasecmp(v1, "REFS"))
    return 3;
  if (!strcasecmp(v1, "QMUX1"))
    return 4;
  if (!strcasecmp(v1, "QMUX2"))
    return 5;
  if (!strcasecmp(v1, "ROM"))
    return 6;
  if (!strcasecmp(v1, "BOOT"))
    return 7;
  if (!strcasecmp(v1, "ARI"))
    return 8;
  if (!strcasecmp(v1, "STT"))
    return 9;
  if (!strcasecmp(v1, "AT"))
    return 10;
  if (!strcasecmp(v1, "ADPL"))
    return 11;
  if (!strcasecmp(v1, "MEDIACTL"))
    return 12;
  if (!strcasecmp(v1, "ETS"))
    return 13;
  if (!strcasecmp(v1, "GNSS"))
    return 14;
  if (!strcasecmp(v1, "QDSS"))
    return 15;
  if (!strcasecmp(v1, "RCTTH"))
    return 16;
  if (!strcasecmp(v1, "ACP"))
    return 17;
  if (!strcasecmp(v1, "VCOM"))
    return 18;
  if (!strcasecmp(v1, "MIPC"))
    return 19;
  if (!strcasecmp(v1, "DHL"))
    return 20;
  if (!strcasecmp(v1, "MUX"))
    return 21;
LABEL_24:
  if (!strcasecmp(v1, "FAC"))
    return 22;
  else
    return 23;
}

uint64_t BasebandTransport::getDefaultTransportIOReadSize(capabilities::abs *a1)
{
  if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(a1))
    return 0x4000;
  else
    return 0x8000;
}

uint64_t BasebandTransport::getDefaultTransportIOReadCount(capabilities::abs *a1)
{
  int v1;
  char shouldUseMinBasebandTransportIOReadCount;
  int v3;
  int v4;
  unsigned int v5;

  v1 = (int)a1;
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount(a1);
  if (v1 == 15)
    v3 = 36;
  else
    v3 = 4;
  if (v1 == 16)
    v4 = 36;
  else
    v4 = v3;
  if (v1 == 2)
    v5 = 16;
  else
    v5 = v4;
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    return 4;
  else
    return v5;
}

double BasebandTransport::Status::Status(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double BasebandTransport::Status::init(BasebandTransport::Status *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_BYTE *)this + 4) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

uint64_t BasebandTransport::Status::toString@<X0>(BasebandTransport::Status *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  size_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  void *__p[2];
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32[2];
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];
  unint64_t v36;

  v36 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35[7] = v4;
  v35[8] = v4;
  v35[5] = v4;
  v35[6] = v4;
  v35[3] = v4;
  v35[4] = v4;
  v35[1] = v4;
  v35[2] = v4;
  v34 = v4;
  v35[0] = v4;
  *(_OWORD *)v32 = v4;
  v33 = v4;
  v30 = v4;
  v31 = v4;
  v28 = v4;
  v29 = v4;
  v27 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v27);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"State: ", 7);
  switch(*(_DWORD *)this)
  {
    case 0:
      v6 = 8;
      v26 = 8;
      strcpy((char *)__p, "NotReady");
      break;
    case 1:
      v6 = 5;
      v26 = 5;
      strcpy((char *)__p, "Ready");
      break;
    case 2:
      v6 = 5;
      v26 = 5;
      strcpy((char *)__p, "Error");
      break;
    case 3:
      v6 = 7;
      v26 = 7;
      LODWORD(__p[0]) = 1818326099;
      v7 = 1684368492;
      goto LABEL_7;
    default:
      v6 = 7;
      v26 = 7;
      LODWORD(__p[0]) = 1852534357;
      v7 = 1853321070;
LABEL_7:
      *(_DWORD *)((char *)__p + 3) = v7;
      HIBYTE(__p[0]) = 0;
      break;
  }
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)__p, v6);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", ", 2);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Async: ", 7);
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) |= 1u;
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Total Rx: ", 10);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Total Tx: ", 10);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" KB", 3);
  if ((v26 & 0x80000000) == 0)
  {
    v16 = BYTE8(v34);
    if ((BYTE8(v34) & 0x10) == 0)
      goto LABEL_10;
LABEL_13:
    v18 = v34;
    if ((unint64_t)v34 < *((_QWORD *)&v31 + 1))
    {
      *(_QWORD *)&v34 = *((_QWORD *)&v31 + 1);
      v18 = *((_QWORD *)&v31 + 1);
    }
    v19 = (const void *)v31;
    v17 = v18 - v31;
    if ((unint64_t)(v18 - v31) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  v16 = BYTE8(v34);
  if ((BYTE8(v34) & 0x10) != 0)
    goto LABEL_13;
LABEL_10:
  if ((v16 & 8) == 0)
  {
    v17 = 0;
    a2[23] = 0;
    goto LABEL_23;
  }
  v19 = (const void *)*((_QWORD *)&v29 + 1);
  v17 = *((_QWORD *)&v30 + 1) - *((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v30 + 1) - *((_QWORD *)&v29 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_27:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_16:
  if (v17 >= 0x17)
  {
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    v22 = operator new(v20 + 1);
    *((_QWORD *)a2 + 1) = v17;
    *((_QWORD *)a2 + 2) = v21 | 0x8000000000000000;
    *(_QWORD *)a2 = v22;
    a2 = v22;
    goto LABEL_22;
  }
  a2[23] = v17;
  if (v17)
LABEL_22:
    memmove(a2, v19, v17);
LABEL_23:
  a2[v17] = 0;
  *(_QWORD *)&v27 = *MEMORY[0x1E0DE4F50];
  v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v27 + *(_QWORD *)(v27 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v28 = v23;
  *((_QWORD *)&v28 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8C364](v35);
}

void sub_1BF6886E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF6886F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::Parameters::toString@<X0>(BasebandTransport::Parameters *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  size_t v5;
  int v6;
  uint64_t p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  size_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  void *v27[2];
  char v28;
  void *__p;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37[2];
  __int128 v38;
  __int128 v39;
  _OWORD v40[9];
  unint64_t v41;

  v41 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v40[7] = v4;
  v40[8] = v4;
  v40[5] = v4;
  v40[6] = v4;
  v40[3] = v4;
  v40[4] = v4;
  v40[1] = v4;
  v40[2] = v4;
  v39 = v4;
  v40[0] = v4;
  *(_OWORD *)v37 = v4;
  v38 = v4;
  v35 = v4;
  v36 = v4;
  v33 = v4;
  v34 = v4;
  v32 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v32);
  switch(*(_DWORD *)this)
  {
    case 0:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "PBL");
      break;
    case 1:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "SBL");
      break;
    case 2:
      v5 = 4;
      v28 = 4;
      v6 = 1195460932;
      goto LABEL_25;
    case 3:
      v5 = 4;
      v28 = 4;
      v6 = 1397114194;
      goto LABEL_25;
    case 4:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "QMUX1");
      break;
    case 5:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "QMUX2");
      break;
    case 6:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ROM");
      break;
    case 7:
      v5 = 4;
      v28 = 4;
      v6 = 1414483778;
      goto LABEL_25;
    case 8:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ARI");
      break;
    case 9:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "STT");
      break;
    case 0xA:
      v5 = 2;
      v28 = 2;
      strcpy((char *)v27, "AT");
      break;
    case 0xB:
      v5 = 4;
      v28 = 4;
      v6 = 1280328769;
      goto LABEL_25;
    case 0xC:
      v5 = 8;
      v28 = 8;
      strcpy((char *)v27, "MEDIACTL");
      break;
    case 0xD:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ETS");
      break;
    case 0xE:
      v5 = 4;
      v28 = 4;
      v6 = 1397968455;
      goto LABEL_25;
    case 0xF:
      v5 = 4;
      v28 = 4;
      v6 = 1397965905;
      goto LABEL_25;
    case 0x10:
      v5 = 5;
      v28 = 5;
      strcpy((char *)v27, "RCTTH");
      break;
    case 0x11:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "ACP");
      break;
    case 0x12:
      v5 = 4;
      v28 = 4;
      v6 = 1297040214;
      goto LABEL_25;
    case 0x13:
      v5 = 4;
      v28 = 4;
      v6 = 1129335117;
LABEL_25:
      LODWORD(v27[0]) = v6;
      BYTE4(v27[0]) = 0;
      break;
    case 0x14:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "DHL");
      break;
    case 0x15:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "MUX");
      break;
    case 0x16:
      v5 = 3;
      v28 = 3;
      strcpy((char *)v27, "FAC");
      break;
    default:
      v5 = 7;
      v28 = 7;
      strcpy((char *)v27, "Unknown");
      break;
  }
  v30 = 8250;
  v31 = 0;
  HIBYTE(v31) = v5 + 10;
  __p = *(void **)"Protocol: ";
  memcpy((char *)&v30 + 2, v27, v5);
  *((_BYTE *)&v30 + v5 + 2) = 0;
  if (v31 >= 0)
    p_p = (uint64_t)&__p;
  else
    p_p = 0x6C6F636F746F7250;
  if (v31 >= 0)
    v8 = HIBYTE(v31);
  else
    v8 = v30;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, p_p, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Powersave: ", 11);
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) |= 1u;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Create Timeout: ", 16);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" sec, ", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"IO Size: ", 9);
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" KB, ", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Num Pending Reads: ", 19);
  std::ostream::operator<<();
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_34:
      v18 = BYTE8(v39);
      if ((BYTE8(v39) & 0x10) == 0)
        goto LABEL_35;
LABEL_39:
      v20 = v39;
      if ((unint64_t)v39 < *((_QWORD *)&v36 + 1))
      {
        *(_QWORD *)&v39 = *((_QWORD *)&v36 + 1);
        v20 = *((_QWORD *)&v36 + 1);
      }
      v21 = (const void *)v36;
      v19 = v20 - v36;
      if ((unint64_t)(v20 - v36) >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_53;
      goto LABEL_42;
    }
  }
  else if ((v28 & 0x80000000) == 0)
  {
    goto LABEL_34;
  }
  operator delete(v27[0]);
  v18 = BYTE8(v39);
  if ((BYTE8(v39) & 0x10) != 0)
    goto LABEL_39;
LABEL_35:
  if ((v18 & 8) == 0)
  {
    v19 = 0;
    a2[23] = 0;
    goto LABEL_49;
  }
  v21 = (const void *)*((_QWORD *)&v34 + 1);
  v19 = *((_QWORD *)&v35 + 1) - *((_QWORD *)&v34 + 1);
  if (*((_QWORD *)&v35 + 1) - *((_QWORD *)&v34 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_53:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_42:
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v24 = operator new(v22 + 1);
    *((_QWORD *)a2 + 1) = v19;
    *((_QWORD *)a2 + 2) = v23 | 0x8000000000000000;
    *(_QWORD *)a2 = v24;
    a2 = v24;
    goto LABEL_48;
  }
  a2[23] = v19;
  if (v19)
LABEL_48:
    memmove(a2, v21, v19);
LABEL_49:
  a2[v19] = 0;
  *(_QWORD *)&v32 = *MEMORY[0x1E0DE4F50];
  v25 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v33 = v25;
  *((_QWORD *)&v33 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v38) < 0)
    operator delete(v37[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8C364](v40);
}

void sub_1BF688D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF688D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransport::BasebandTransport(uint64_t a1, _QWORD *a2, NSObject **a3)
{
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  capabilities::abs *v11;
  capabilities::abs *shouldUseMinBasebandTransportIOReadSize;
  int v13;
  NSObject *v14;
  uint64_t Controller;
  _BYTE v17[16];
  _BYTE v18[16];
  _BYTE v19[16];

  *(_QWORD *)a1 = off_1E791C1D8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v17, "com.apple.telephony.abm", "ipc.bb");
  v6 = dispatch_queue_create("ipc.bb", 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v6;
  if (v6)
  {
    v7 = v6;
    dispatch_retain(v6);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v7);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E791C660;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v19);
  *(_QWORD *)(a1 + 8) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 56) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 64) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v18);
  *(_QWORD *)a1 = off_1E791C778;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v17);
  *(_QWORD *)a1 = off_1E791C1D8;
  *(_DWORD *)(a1 + 104) = 23;
  *(_BYTE *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 112) = 10;
  shouldUseMinBasebandTransportIOReadSize = (capabilities::abs *)capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v11);
  if ((_DWORD)shouldUseMinBasebandTransportIOReadSize)
    v13 = 0x4000;
  else
    v13 = 0x8000;
  *(_DWORD *)(a1 + 120) = v13;
  capabilities::abs::shouldUseMinBasebandTransportIOReadCount(shouldUseMinBasebandTransportIOReadSize);
  *(_DWORD *)(a1 + 124) = 4;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v14 = *a3;
  *(_QWORD *)(a1 + 152) = *a3;
  if (v14)
    dispatch_retain(v14);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  Controller = TelephonyBasebandCreateController();
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = Controller;
  *(_QWORD *)(a1 + 285) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 320) = dispatch_group_create();
  *(_DWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 332) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 365) = 0;
  return a1;
}

void sub_1BF688FCC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void *v4;
  NSObject *v5;
  const void *v6;

  v4 = (const void *)v1[21];
  if (v4)
    _Block_release(v4);
  if (*v2)
    _Block_release(*v2);
  v5 = v1[19];
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)v1[18];
  if (v6)
    _Block_release(v6);
  ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

const char *BasebandTransport::getName(BasebandTransport *this)
{
  return "ipc.bb";
}

_QWORD *ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791C660;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791C660;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void BasebandTransport::~BasebandTransport(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  NSObject *v11;
  const void *v12;
  NSObject *v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  uint8_t v16[16];

  *(_QWORD *)this = off_1E791C1D8;
  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v16, 2u);
    }
  }
  (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
  v4 = (const void *)*((_QWORD *)this + 33);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 33) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 37);
  if (v5)
  {
    operator delete[](v5);
    *((_QWORD *)this + 37) = 0;
  }
  v6 = *((_QWORD *)this + 40);
  if (v6)
    dispatch_release(v6);
  v7 = *((_QWORD *)this + 39);
  if (v7)
    dispatch_release(v7);
  v8 = (const void *)*((_QWORD *)this + 34);
  if (v8)
    _Block_release(v8);
  v9 = (const void *)*((_QWORD *)this + 21);
  if (v9)
    _Block_release(v9);
  v10 = (const void *)*((_QWORD *)this + 20);
  if (v10)
    _Block_release(v10);
  v11 = *((_QWORD *)this + 19);
  if (v11)
    dispatch_release(v11);
  v12 = (const void *)*((_QWORD *)this + 18);
  if (v12)
    _Block_release(v12);
  *(_QWORD *)this = off_1E791C660;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v13 = *((_QWORD *)this + 12);
  if (v13)
    dispatch_release(v13);
  v14 = *((_QWORD *)this + 11);
  if (v14)
    dispatch_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

{
  void *v1;

  BasebandTransport::~BasebandTransport(this);
  operator delete(v1);
}

void BasebandTransport::timerOff_sync(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

void BasebandTransport::create(NSObject **this@<X0>, queue a2@<0:X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  NSObject *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD block[5];

  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_75;
  block[4] = &qword_1ED70F7D8;
  if (_MergedGlobals_3 == -1)
  {
    v5 = (std::__shared_weak_count *)unk_1ED70F7E0;
    v12 = qword_1ED70F7D8;
    v13 = unk_1ED70F7E0;
    if (!unk_1ED70F7E0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&_MergedGlobals_3, block);
    v5 = (std::__shared_weak_count *)unk_1ED70F7E0;
    v12 = qword_1ED70F7D8;
    v13 = unk_1ED70F7E0;
    if (!unk_1ED70F7E0)
      goto LABEL_5;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
LABEL_5:
  v8 = *this;
  v11 = v8;
  if (v8)
    dispatch_retain(v8);
  BasebandTransport::create((capabilities::radio *)&v12, &v11, a3);
  if (v8)
    dispatch_release(v8);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF6893D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  NSObject *v10;

  if (v10)
    dispatch_release(v10);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void BasebandTransport::create(capabilities::radio *a1@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  BasebandTransportICE *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  NSObject *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  NSObject *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  dispatch_object_t object;
  uint64_t v49;
  std::__shared_weak_count *v50;
  BasebandTransportICE *v51;
  unint64_t v52;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = capabilities::radio::vendor(a1);
  if (v6 == 2)
  {
    v27 = (BasebandTransportICE *)operator new(0x208uLL);
    v28 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v49 = *(_QWORD *)a1;
    v50 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
    }
    v31 = *a2;
    object = v31;
    if (v31)
      dispatch_retain(v31);
    BasebandTransportICE::BasebandTransportICE(v27, &v49, &object);
    v51 = v27;
    v52 = 0xAAAAAAAAAAAAAAAALL;
    v32 = (std::__shared_weak_count *)operator new(0x20uLL);
    v32->__shared_owners_ = 0;
    v33 = (unint64_t *)&v32->__shared_owners_;
    v32->__vftable = (std::__shared_weak_count_vtbl *)off_1E791C7B8;
    v32->__shared_weak_owners_ = 0;
    v32[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
    v52 = (unint64_t)v32;
    v34 = (std::__shared_weak_count *)*((_QWORD *)v27 + 10);
    if (v34)
    {
      if (v34->__shared_owners_ != -1)
      {
LABEL_45:
        v42 = (uint64_t)v51;
        ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v51);
        v43 = v52;
        v51 = 0;
        v52 = 0;
        *(_QWORD *)a3 = v42;
        *(_QWORD *)(a3 + 8) = v43;
        if (object)
          dispatch_release(object);
        v24 = v50;
        if (!v50)
          goto LABEL_52;
        v44 = (unint64_t *)&v50->__shared_owners_;
        do
          v26 = __ldaxr(v44);
        while (__stlxr(v26 - 1, v44));
        goto LABEL_50;
      }
      do
        v35 = __ldxr(v33);
      while (__stxr(v35 + 1, v33));
      p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v37 = __ldxr(p_shared_weak_owners);
      while (__stxr(v37 + 1, p_shared_weak_owners));
      *((_QWORD *)v27 + 9) = v27;
      *((_QWORD *)v27 + 10) = v32;
      std::__shared_weak_count::__release_weak(v34);
    }
    else
    {
      do
        v38 = __ldxr(v33);
      while (__stxr(v38 + 1, v33));
      v39 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      *((_QWORD *)v27 + 9) = v27;
      *((_QWORD *)v27 + 10) = v32;
    }
    do
      v41 = __ldaxr(v33);
    while (__stlxr(v41 - 1, v33));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    goto LABEL_45;
  }
  if (v6 != 3)
    return;
  v7 = (std::__shared_weak_count_vtbl *)operator new(0x198uLL);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v46 = *(_QWORD *)a1;
  v47 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *a2;
  v45 = v11;
  if (v11)
    dispatch_retain(v11);
  BasebandTransport::BasebandTransport((uint64_t)v7, &v46, &v45);
  v51 = (BasebandTransportICE *)v7;
  v52 = 0xAAAAAAAAAAAAAAAALL;
  v12 = (std::__shared_weak_count *)operator new(0x20uLL);
  v12->__shared_owners_ = 0;
  v13 = (unint64_t *)&v12->__shared_owners_;
  v12->__vftable = (std::__shared_weak_count_vtbl *)off_1E791C808;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v7;
  v52 = (unint64_t)v12;
  v14 = (std::__shared_weak_count *)v7[2].~__shared_weak_count;
  if (!v14)
  {
    do
      v18 = __ldxr(v13);
    while (__stxr(v18 + 1, v13));
    v19 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v7[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
    v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    do
LABEL_18:
      v21 = __ldaxr(v13);
    while (__stlxr(v21 - 1, v13));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_21;
  }
  if (v14->__shared_owners_ == -1)
  {
    do
      v15 = __ldxr(v13);
    while (__stxr(v15 + 1, v13));
    v16 = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v7[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
    v7[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v12;
    std::__shared_weak_count::__release_weak(v14);
    goto LABEL_18;
  }
LABEL_21:
  v22 = (uint64_t)v51;
  ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)v51);
  v23 = v52;
  v51 = 0;
  v52 = 0;
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v23;
  if (v11)
    dispatch_release(v11);
  v24 = v47;
  if (!v47)
    goto LABEL_52;
  v25 = (unint64_t *)&v47->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
LABEL_50:
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_52:
  BasebandTransport::init(*(BasebandTransport **)a3);
}

void sub_1BF689720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void BasebandTransport::init(BasebandTransport *this)
{
  std::__shared_weak_count *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD *v18;
  _QWORD block[6];

  v5 = *((_QWORD *)this + 9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  v4 = (char *)this + 72;
  if (!v3 || (v6 = std::__shared_weak_count::lock(v3)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1174405120;
  v16[2] = ___ZN17BasebandTransport4initEv_block_invoke;
  v16[3] = &__block_descriptor_tmp_47_1;
  v16[4] = this;
  v16[5] = v5;
  v17 = v7;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  v18 = v16;
  block[0] = v12;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77_0;
  block[4] = v4;
  block[5] = &v18;
  v14 = *((_QWORD *)this + 11);
  if (!*((_QWORD *)this + 12))
  {
    dispatch_sync(v14, block);
    v15 = v17;
    if (!v17)
      goto LABEL_14;
    goto LABEL_13;
  }
  dispatch_async_and_wait(v14, block);
  v15 = v17;
  if (v17)
LABEL_13:
    std::__shared_weak_count::__release_weak(v15);
LABEL_14:
  std::__shared_weak_count::__release_weak(v7);
}

void ___ZN17BasebandTransport4initEv_block_invoke(capabilities::ipc *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  const void *v15;
  _QWORD v16[6];
  std::__shared_weak_count *v17;
  _QWORD aBlock[6];
  std::__shared_weak_count *v19;

  v2 = *((_QWORD *)a1 + 4);
  if (capabilities::ipc::supportsPCI(a1))
  {
    v3 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN17BasebandTransport4initEv_block_invoke_2;
    aBlock[3] = &__block_descriptor_tmp_26;
    v5 = *((_QWORD *)a1 + 5);
    v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    aBlock[4] = v2;
    aBlock[5] = v5;
    v19 = v4;
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    v8 = _Block_copy(aBlock);
    v9 = *(const void **)(v2 + 160);
    *(_QWORD *)(v2 + 160) = v8;
    if (v9)
      _Block_release(v9);
    v16[0] = v3;
    v16[1] = 1174405120;
    v16[2] = ___ZN17BasebandTransport4initEv_block_invoke_43;
    v16[3] = &__block_descriptor_tmp_45_2;
    v11 = *((_QWORD *)a1 + 5);
    v10 = (std::__shared_weak_count *)*((_QWORD *)a1 + 6);
    v16[4] = v2;
    v16[5] = v11;
    v17 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = _Block_copy(v16);
    v15 = *(const void **)(v2 + 168);
    *(_QWORD *)(v2 + 168) = v14;
    if (v15)
      _Block_release(v15);
    if (v17)
      std::__shared_weak_count::__release_weak(v17);
    if (v19)
      std::__shared_weak_count::__release_weak(v19);
  }
}

void ___ZN17BasebandTransport4initEv_block_invoke_2(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  NSObject *v12;
  const void *v13;
  void *v14;
  const void *v15;
  __int128 v16;
  NSObject *v17;
  void *v18;
  char *v19;
  __int128 v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _BYTE v23[32];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    v9 = a1[4];
    v10 = std::__shared_weak_count::lock(v5);
    if (v10)
    {
      v11 = v10;
      if (a1[5])
      {
        v12 = *(NSObject **)(v9 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v23 = 67109632;
          *(_DWORD *)&v23[4] = a2;
          *(_WORD *)&v23[8] = 2048;
          *(_QWORD *)&v23[10] = a3;
          *(_WORD *)&v23[18] = 2048;
          *(_QWORD *)&v23[20] = a4;
          _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "PCI Transport Status: 0x%x (0x%08lx, 0x%08lx)", v23, 0x1Cu);
        }
        *(_DWORD *)(v9 + 328) = 2 * (a2 != 0);
        *(int64x2_t *)(v9 + 352) = vsubq_s64(*(int64x2_t *)(v9 + 336), *(int64x2_t *)(v9 + 376));
        v13 = *(const void **)(v9 + 272);
        if (v13)
        {
          v14 = _Block_copy(v13);
          v15 = v14;
          v16 = *(_OWORD *)(v9 + 344);
          *(_OWORD *)v23 = *(_OWORD *)(v9 + 328);
          *(_OWORD *)&v23[16] = v16;
          v24 = *(_QWORD *)(v9 + 360);
          v17 = *(NSObject **)(v9 + 152);
          if (v14)
            v18 = _Block_copy(v14);
          else
            v18 = 0;
          v19 = (char *)operator new(0x30uLL);
          *(_QWORD *)v19 = v18;
          v20 = *(_OWORD *)&v23[16];
          *(_OWORD *)(v19 + 8) = *(_OWORD *)v23;
          *(_OWORD *)(v19 + 24) = v20;
          *((_QWORD *)v19 + 5) = v24;
          dispatch_async_f(v17, v19, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (v15)
            _Block_release(v15);
        }
      }
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1BF689C50(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

int64x2_t BasebandTransport::updateDeltas_sync(BasebandTransport *this)
{
  int64x2_t result;

  result = vsubq_s64(*((int64x2_t *)this + 21), *(int64x2_t *)((char *)this + 376));
  *((int64x2_t *)this + 22) = result;
  return result;
}

uint64_t __copy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c42_ZTSNSt3__18weak_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN17BasebandTransport4initEv_block_invoke_43(_QWORD *a1, int a2, void *a3, unsigned int a4)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  void *v20;
  char v21;
  NSObject *v22;
  void *v23;
  void *v24;
  size_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint8_t buf[8];
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v6 = a1[4];
  v33 = 0;
  v34 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v34 = std::__shared_weak_count::lock(v7)) != 0 && (v10 = a1[5], (v33 = v10) != 0))
  {
    v11 = *(NSObject **)(v10 + 320);
    if (v11)
    {
      dispatch_retain(*(dispatch_object_t *)(v10 + 320));
      dispatch_group_enter(v11);
    }
    if (a2)
    {
      v12 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = a2;
        _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D Async read error 0x%08x", buf, 8u);
      }
    }
    else
    {
      *(_QWORD *)(v6 + 336) += a4;
      v16 = *(const void **)(v6 + 144);
      if (v16)
      {
        v17 = _Block_copy(v16);
        v18 = *(_QWORD *)(v6 + 128);
        if (v18)
        {
          __p = 0;
          v31 = 0;
          v32 = 0;
          (*(void (**)(uint64_t, void *, _QWORD, void **))(*(_QWORD *)v18 + 8))(v18, a3, a4, &__p);
          v19 = *(NSObject **)(v6 + 152);
          if (v17)
            v20 = _Block_copy(v17);
          else
            v20 = 0;
          *(_QWORD *)buf = v20;
          v36 = 0;
          v37 = 0;
          v38 = 0;
          v24 = __p;
          v25 = v31 - (_BYTE *)__p;
          if (v31 == __p)
          {
            v27 = 0;
            v26 = 0;
          }
          else
          {
            if ((v25 & 0x8000000000000000) != 0)
              std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
            v26 = (char *)operator new(v31 - (_BYTE *)__p);
            v27 = &v26[v25];
            v36 = v26;
            v38 = &v26[v25];
            memcpy(v26, v24, v25);
            v37 = &v26[v25];
          }
          v28 = operator new(0x20uLL);
          *v28 = v20;
          v28[1] = v26;
          v28[2] = v27;
          v28[3] = v27;
          dispatch_async_f(v19, v28, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          if (__p)
          {
            v31 = __p;
            operator delete(__p);
          }
        }
        else
        {
          v21 = *(_BYTE *)(v6 + 136);
          v22 = *(NSObject **)(v6 + 152);
          if (v17)
            v23 = _Block_copy(v17);
          else
            v23 = 0;
          v29 = operator new(0x18uLL);
          *v29 = v23;
          v29[1] = a3;
          *((_DWORD *)v29 + 4) = a4;
          *((_BYTE *)v29 + 20) = v21;
          dispatch_async_f(v22, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_);
          a3 = 0;
        }
        if (v17)
          _Block_release(v17);
      }
    }
    if (a3 && !*(_BYTE *)(v6 + 136))
      free(a3);
    if (v11)
    {
      dispatch_group_leave(v11);
      dispatch_release(v11);
    }
  }
  else if (a3)
  {
    free(a3);
  }
  v13 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF689F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *aBlock, void *a16, uint64_t a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL BasebandTransport::open(BasebandTransport *a1, __int128 *a2, void **a3)
{
  uint64_t v6;
  __int128 v7;
  void *v8;
  NSObject *v9;
  int v10;
  void *v11;
  _QWORD v13[6];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *aBlock;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  _QWORD block[6];

  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  BasebandTransport::stopReader(a1);
  v6 = MEMORY[0x1E0C809B0];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke;
  v13[3] = &unk_1E791C2C8;
  v13[5] = a1;
  v7 = a2[1];
  v14 = *a2;
  v15 = v7;
  v16 = *((_QWORD *)a2 + 4);
  v8 = *a3;
  if (*a3)
    v8 = _Block_copy(v8);
  aBlock = v8;
  v13[4] = &v18;
  v22 = v13;
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77_0;
  block[4] = (char *)a1 + 72;
  block[5] = &v22;
  v9 = *((_QWORD *)a1 + 11);
  if (*((_QWORD *)a1 + 12))
  {
    dispatch_async_and_wait(v9, block);
    v10 = *((unsigned __int8 *)v19 + 24);
    v11 = aBlock;
    if (!aBlock)
      goto LABEL_8;
    goto LABEL_7;
  }
  dispatch_sync(v9, block);
  v10 = *((unsigned __int8 *)v19 + 24);
  v11 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v11);
LABEL_8:
  _Block_object_dispose(&v18, 8);
  return v10 != 0;
}

void sub_1BF68A164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void BasebandTransport::stopReader(BasebandTransport *this)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  NSObject *v7;
  dispatch_time_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[3];
  char v16;
  _QWORD *v17;
  _QWORD block[6];

  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2000000000;
  v16 = 0;
  v2 = (uint64_t *)((char *)this + 72);
  v3 = MEMORY[0x1E0C809B0];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke;
  v14[3] = &unk_1E791C430;
  v14[4] = v15;
  v14[5] = this;
  v17 = v14;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77_0;
  block[4] = (char *)this + 72;
  block[5] = &v17;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, block);
  else
    dispatch_sync(v4, block);
  v13[0] = v3;
  v13[1] = 0x40000000;
  v13[2] = ___ZN17BasebandTransport10stopReaderEv_block_invoke_2;
  v13[3] = &unk_1E791C458;
  v13[4] = v15;
  v13[5] = this;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v2, (uint64_t)v13);
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    v7 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Waiting for reader to be stopped", (uint8_t *)block, 2u);
      v6 = *((_QWORD *)this + 40);
    }
    v8 = dispatch_time(0, 3000000000);
    if (dispatch_group_wait(v6, v8))
    {
      (*(void (**)(BasebandTransport *))(*(_QWORD *)this + 80))(this);
      v9 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(block[0]) = 0;
        _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "Timeout waiting for read to unblock, freed transport to force read unblock", (uint8_t *)block, 2u);
      }
    }
    else
    {
      v11 = (void *)*((_QWORD *)this + 37);
      if (v11)
      {
        operator delete[](v11);
        *((_QWORD *)this + 37) = 0;
        v12 = *((_QWORD *)this + 39);
        *((_QWORD *)this + 39) = 0;
        if (v12)
          dispatch_release(v12);
      }
    }
    v10 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Reader stopped", (uint8_t *)block, 2u);
    }
  }
  _Block_object_dispose(v15, 8);
}

void sub_1BF68A390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4openENS_10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  char v5;
  __int128 v6;
  void *v7;
  const void *v8;
  _QWORD v9[5];
  char v10;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(NSObject **)(v2 + 280);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(v2 + 280));
    *(_QWORD *)(v2 + 280) = 0;
    v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", (uint8_t *)v9, 2u);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  v5 = *(_BYTE *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 120) = v6;
  *(_BYTE *)(v2 + 136) = v5;
  v7 = *(void **)(a1 + 88);
  if (v7)
    v7 = _Block_copy(v7);
  v8 = *(const void **)(v2 + 144);
  *(_QWORD *)(v2 + 144) = v7;
  if (v8)
    _Block_release(v8);
  if (*(_DWORD *)(v2 + 104) != 23)
  {
    if (capabilities::ipc::supportsPCI((capabilities::ipc *)v7))
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = BasebandTransport::openPCI_sync((BasebandTransport *)v2);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      BasebandTransport::timerOn_sync((BasebandTransport *)v2);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 80))(v2);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
    v9[3] = &__block_descriptor_tmp_70_2;
    v9[4] = v2;
    v10 = 0;
    ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v9);
  }
}

uint64_t BasebandTransport::openPCI_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  capabilities::abs *inited;
  int v10;
  uint64_t shouldUseMinBasebandTransportIOReadCount;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  uint8_t *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  int v27;
  int v28;
  int v29;
  unsigned int v31;
  unsigned int v32;
  uint8_t buf[23];
  char v34;
  uint8_t v35[4];
  uint8_t *v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  inited = (capabilities::abs *)TelephonyBasebandPCITransportInitParameters();
  v10 = *((_DWORD *)this + 28);
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::traceTransportTimeoutScalingFactor(inited);
  v12 = 1000 * v10;
  if ((((1000 * v10) * (unint64_t)shouldUseMinBasebandTransportIOReadCount) & 0xFFFFFFFF00000000) != 0)
  {
    v13 = *((_QWORD *)this + 5);
    shouldUseMinBasebandTransportIOReadCount = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if ((_DWORD)shouldUseMinBasebandTransportIOReadCount)
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v12;
      _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Scaled create timeout overflowed, falling back to unscaled value: %u", buf, 8u);
    }
  }
  v14 = *((_DWORD *)this + 31);
  if (v14)
    goto LABEL_20;
  v15 = *((_DWORD *)this + 26);
  shouldUseMinBasebandTransportIOReadCount = capabilities::abs::shouldUseMinBasebandTransportIOReadCount((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount);
  if ((shouldUseMinBasebandTransportIOReadCount & 1) != 0)
    goto LABEL_14;
  if (v15 != 2)
  {
    if (v15 != 16 && v15 != 15)
    {
LABEL_14:
      v31 = 4;
      v16 = *((_DWORD *)this + 30);
      if (!v16)
        goto LABEL_21;
      goto LABEL_24;
    }
    v14 = 36;
LABEL_20:
    v31 = v14;
    v16 = *((_DWORD *)this + 30);
    if (!v16)
      goto LABEL_21;
    goto LABEL_24;
  }
  v31 = 16;
  v16 = *((_DWORD *)this + 30);
  if (!v16)
  {
LABEL_21:
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)shouldUseMinBasebandTransportIOReadCount))
      v16 = 0x4000;
    else
      v16 = 0x8000;
  }
LABEL_24:
  v32 = v16;
  v17 = *((_DWORD *)this + 26);
  switch(v17)
  {
    case 0:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 1:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 2:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 3:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 4:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 5:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 6:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 7:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 8:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 9:
    case 17:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 10:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 11:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 12:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 13:
    case 18:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 14:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 15:
      v18 = v31;
      if (v31 < 0x41)
        goto LABEL_60;
      goto LABEL_30;
    case 16:
      v18 = v31;
      if (v31 >= 0x41)
      {
LABEL_30:
        v19 = *((_QWORD *)this + 5);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_148;
        switch(v17)
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v28 = 1195460932;
            goto LABEL_122;
          case 3:
            v34 = 4;
            v28 = 1397114194;
            goto LABEL_122;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v28 = 1414483778;
            goto LABEL_122;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            v34 = 4;
            v28 = 1280328769;
            goto LABEL_122;
          case 12:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            v34 = 4;
            v28 = 1397968455;
            goto LABEL_122;
          case 15:
            v34 = 4;
            v28 = 1397965905;
            goto LABEL_122;
          case 16:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            v34 = 4;
            v28 = 1297040214;
LABEL_122:
            *(_DWORD *)buf = v28;
            buf[4] = 0;
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 2048;
        v38 = v18;
        v24 = "%s: invalid transport io read count (%lu)";
LABEL_145:
        v25 = v19;
        v26 = 22;
LABEL_146:
        _os_log_error_impl(&dword_1BF566000, v25, OS_LOG_TYPE_ERROR, v24, v35, v26);
        if (v34 < 0)
          operator delete(*(void **)buf);
        goto LABEL_148;
      }
LABEL_60:
      if (v16 - 0x4000 > 0xFC000)
      {
        v19 = *((_QWORD *)this + 5);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_148;
        switch(v17)
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v29 = 1195460932;
            goto LABEL_143;
          case 3:
            v34 = 4;
            v29 = 1397114194;
            goto LABEL_143;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v29 = 1414483778;
            goto LABEL_143;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 10:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 11:
            v34 = 4;
            v29 = 1280328769;
            goto LABEL_143;
          case 12:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 13:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 14:
            v34 = 4;
            v29 = 1397968455;
            goto LABEL_143;
          case 15:
            v34 = 4;
            v29 = 1397965905;
            goto LABEL_143;
          case 16:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 17:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 18:
            v34 = 4;
            v29 = 1297040214;
LABEL_143:
            *(_DWORD *)buf = v29;
            buf[4] = 0;
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 2048;
        v38 = v16;
        v24 = "%s: invalid transport io read size (%lu)";
        goto LABEL_145;
      }
      if (*((_QWORD *)this + 18))
        *((_BYTE *)this + 332) = 1;
      if (!TelephonyBasebandPCITransportCreate())
      {
        *((_DWORD *)this + 82) = 2;
        v22 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          BasebandTransport::asString(*((unsigned int *)this + 26), (char *)buf);
          if (v34 >= 0)
            v23 = buf;
          else
            v23 = *(uint8_t **)buf;
          *(_DWORD *)v35 = 136315138;
          v36 = v23;
          v24 = "%s: transport open failed";
          v25 = v22;
          v26 = 12;
          goto LABEL_146;
        }
LABEL_148:
        v20 = 0;
        goto LABEL_149;
      }
      v20 = 1;
      *((_DWORD *)this + 82) = 1;
      v21 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        switch(*((_DWORD *)this + 26))
        {
          case 0:
            v34 = 3;
            strcpy((char *)buf, "PBL");
            break;
          case 1:
            v34 = 3;
            strcpy((char *)buf, "SBL");
            break;
          case 2:
            v34 = 4;
            v27 = 1195460932;
            goto LABEL_97;
          case 3:
            v34 = 4;
            v27 = 1397114194;
            goto LABEL_97;
          case 4:
            v34 = 5;
            strcpy((char *)buf, "QMUX1");
            break;
          case 5:
            v34 = 5;
            strcpy((char *)buf, "QMUX2");
            break;
          case 6:
            v34 = 3;
            strcpy((char *)buf, "ROM");
            break;
          case 7:
            v34 = 4;
            v27 = 1414483778;
            goto LABEL_97;
          case 8:
            v34 = 3;
            strcpy((char *)buf, "ARI");
            break;
          case 9:
            v34 = 3;
            strcpy((char *)buf, "STT");
            break;
          case 0xA:
            v34 = 2;
            strcpy((char *)buf, "AT");
            break;
          case 0xB:
            v34 = 4;
            v27 = 1280328769;
            goto LABEL_97;
          case 0xC:
            v34 = 8;
            strcpy((char *)buf, "MEDIACTL");
            break;
          case 0xD:
            v34 = 3;
            strcpy((char *)buf, "ETS");
            break;
          case 0xE:
            v34 = 4;
            v27 = 1397968455;
            goto LABEL_97;
          case 0xF:
            v34 = 4;
            v27 = 1397965905;
            goto LABEL_97;
          case 0x10:
            v34 = 5;
            strcpy((char *)buf, "RCTTH");
            break;
          case 0x11:
            v34 = 3;
            strcpy((char *)buf, "ACP");
            break;
          case 0x12:
            v34 = 4;
            v27 = 1297040214;
            goto LABEL_97;
          case 0x13:
            v34 = 4;
            v27 = 1129335117;
LABEL_97:
            *(_DWORD *)buf = v27;
            buf[4] = 0;
            break;
          case 0x14:
            v34 = 3;
            strcpy((char *)buf, "DHL");
            break;
          case 0x15:
            v34 = 3;
            strcpy((char *)buf, "MUX");
            break;
          case 0x16:
            v34 = 3;
            strcpy((char *)buf, "FAC");
            break;
          default:
            v34 = 7;
            strcpy((char *)buf, "Unknown");
            break;
        }
        *(_DWORD *)v35 = 136315394;
        v36 = buf;
        v37 = 1024;
        LODWORD(v38) = v32;
        _os_log_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEFAULT, "#I %s: transport successfully opened with read io size as %u", v35, 0x12u);
        if (v34 < 0)
          operator delete(*(void **)buf);
      }
LABEL_149:
      std::__shared_weak_count::__release_weak(v4);
      return v20;
    default:
      goto LABEL_148;
  }
}

void sub_1BF68B180(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void sub_1BF68B194(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void BasebandTransport::timerOn_sync(BasebandTransport *this)
{
  NSObject *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  dispatch_time_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  _QWORD handler[6];
  std::__shared_weak_count *v22;
  uint8_t buf[4];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 35);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*((dispatch_object_t *)this + 35));
    *((_QWORD *)this + 35) = 0;
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", buf, 2u);
    }
  }
  if (*((_DWORD *)this + 82) == 1)
  {
    v4 = *((_DWORD *)this + 72);
    if (v4 && *((_QWORD *)this + 34))
    {
      v5 = 1000000000 * v4;
      v6 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 11));
      *((_QWORD *)this + 35) = v6;
      v7 = dispatch_time(0, v5);
      dispatch_source_set_timer(v6, v7, v5, 0xBEBC200uLL);
      v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
        std::__throw_bad_weak_ptr[abi:ne180100]();
      v11 = v10;
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v11);
      }
      v16 = *((_QWORD *)this + 35);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 1174405120;
      handler[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke;
      handler[3] = &__block_descriptor_tmp_69_0;
      handler[4] = this;
      handler[5] = v9;
      v22 = v11;
      do
        v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
      dispatch_source_set_event_handler(v16, handler);
      dispatch_activate(*((dispatch_object_t *)this + 35));
      v18 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *((_DWORD *)this + 72);
        *(_DWORD *)buf = 67109120;
        v24 = v19;
        _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I Status report enabled(%d sec)", buf, 8u);
      }
      if (v22)
        std::__shared_weak_count::__release_weak(v22);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v20 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEFAULT, "#I Invalid state for status report enable.  Ignoring enable request.", buf, 2u);
    }
  }
}

void BasebandTransport::dumpState(BasebandTransport *this, char a2)
{
  _QWORD v2[5];
  char v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN17BasebandTransport9dumpStateEb_block_invoke;
  v2[3] = &__block_descriptor_tmp_70_2;
  v2[4] = this;
  v3 = a2;
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v2);
}

void *__copy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 88);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 88) = result;
  return result;
}

void __destroy_helper_block_e8_88c45_ZTSN8dispatch5blockIU13block_pointerFvPhjEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 88);
  if (v1)
    _Block_release(v1);
}

BOOL BasebandTransport::write(BasebandTransport *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  char *v7;
  _QWORD *v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  uint64_t (**v12)(_QWORD, uint64_t);
  int v13;
  NSObject *v14;
  _BOOL8 v15;
  _QWORD v17[6];
  _QWORD v18[10];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  const unsigned __int8 *v26;
  uint64_t block;
  uint64_t p_block;
  uint64_t v29;
  __n128 (*v30)(_QWORD *, uint64_t);
  void (*v31)(uint64_t);
  void *__p;
  void *v33;
  uint64_t v34;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *(*v47)(uint64_t);
  void *v48;
  char *v49;
  _QWORD *v50;

  v40 = 0;
  v41 = &v40;
  v42 = 0x2000000000;
  v43 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v7 = (char *)this + 72;
  v8 = (_QWORD *)MEMORY[0x1E0C809B0];
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 0x40000000;
  v35[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke;
  v35[3] = &unk_1E791C300;
  v35[5] = &v40;
  v35[6] = this;
  v35[4] = &v36;
  v45 = v35;
  block = MEMORY[0x1E0C809B0];
  p_block = 0x40000000;
  v29 = (uint64_t)___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v30 = (__n128 (*)(_QWORD *, uint64_t))&__block_descriptor_tmp_77_0;
  v31 = (void (*)(uint64_t))((char *)this + 72);
  __p = &v45;
  v10 = (char *)this + 88;
  v9 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v10 + 1))
  {
    dispatch_async_and_wait(v9, &block);
    if (*((_BYTE *)v41 + 24))
      goto LABEL_3;
LABEL_10:
    v15 = 0;
    goto LABEL_19;
  }
  dispatch_sync(v9, &block);
  if (!*((_BYTE *)v41 + 24))
    goto LABEL_10;
LABEL_3:
  block = 0;
  p_block = (uint64_t)&block;
  v29 = 0x4002000000;
  v30 = __Block_byref_object_copy__3;
  v31 = __Block_byref_object_dispose__3;
  v33 = 0;
  v34 = 0;
  __p = 0;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = a2;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = a3;
  v18[0] = v8;
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_50;
  v18[3] = &unk_1E791C328;
  v18[8] = a2;
  v18[9] = a3;
  v18[4] = &block;
  v18[5] = &v23;
  v18[6] = &v19;
  v18[7] = this;
  v44 = v18;
  v45 = v8;
  v46 = 0x40000000;
  v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v48 = &__block_descriptor_tmp_77_0;
  v49 = v7;
  v50 = &v44;
  v11 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v11, &v45);
    if (v20[3])
      goto LABEL_5;
  }
  else
  {
    dispatch_sync(v11, &v45);
    if (v20[3])
    {
LABEL_5:
      v12 = (uint64_t (**)(_QWORD, uint64_t))v37[3];
      if (*v12)
      {
        v13 = (*v12)(v12, v24[3]);
        *((_BYTE *)v41 + 24) = v13;
        if (v13)
        {
          v17[0] = v8;
          v17[1] = 0x40000000;
          v17[2] = ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2;
          v17[3] = &unk_1E791C350;
          v17[4] = &v19;
          v17[5] = this;
          v44 = v17;
          v45 = v8;
          v46 = 0x40000000;
          v47 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
          v48 = &__block_descriptor_tmp_77_0;
          v49 = v7;
          v50 = &v44;
          v14 = *((_QWORD *)this + 11);
          if (*((_QWORD *)this + 12))
            dispatch_async_and_wait(v14, &v45);
          else
            dispatch_sync(v14, &v45);
          v15 = *((_BYTE *)v41 + 24) != 0;
        }
        else
        {
          v15 = 0;
        }
      }
      else
      {
        v15 = 0;
        *((_BYTE *)v41 + 24) = 0;
      }
      goto LABEL_17;
    }
  }
  v15 = 1;
LABEL_17:
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&block, 8);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
LABEL_19:
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(&v40, 8);
  return v15;
}

void sub_1BF68B7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v40 - 224), 8);
  _Block_object_dispose((const void *)(v40 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t result;

  v2 = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v3 = *(uint64_t (**)(void))(v2 + 232);
  if (v3)
  {
    result = v3();
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = result;
  }
  else
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  }
  return result;
}

void ___ZN17BasebandTransport5writeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(v2 + 344) + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  *(_QWORD *)(v2 + 344) = v3;
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v6 = 134218240;
    v7 = v5;
    v8 = 2048;
    v9 = v3;
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Written: %zu bytes, for a total of: %llu", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t BasebandTransport::read(BasebandTransport *this, unsigned __int8 *a2, unint64_t a3, unsigned int *a4)
{
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  char v13;
  void (*v14)(void);
  uint64_t v15;
  _QWORD v17[6];
  _QWORD v18[7];
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  _QWORD block[6];

  v23 = 0;
  v24 = &v23;
  v25 = 0x2000000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2000000000;
  v22 = 0;
  v6 = (uint64_t *)((char *)this + 72);
  v7 = MEMORY[0x1E0C809B0];
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 0x40000000;
  v18[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke;
  v18[3] = &unk_1E791C378;
  v18[5] = &v23;
  v18[6] = this;
  v18[4] = &v19;
  v27 = v18;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77_0;
  block[4] = (char *)this + 72;
  block[5] = &v27;
  v9 = (char *)this + 88;
  v8 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v9 + 1))
  {
    dispatch_async_and_wait(v8, block);
    v10 = v24;
    if (!*((_BYTE *)v24 + 24))
      goto LABEL_13;
LABEL_5:
    v11 = v20[3];
    if (v11 && (v12 = *(uint64_t (**)(void))(v11 + 8)) != 0)
    {
      v13 = v12();
      *((_BYTE *)v24 + 24) = v13;
      if ((v13 & 1) != 0)
      {
        v17[0] = v7;
        v17[1] = 0x40000000;
        v17[2] = ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_54;
        v17[3] = &__block_descriptor_tmp_55_1;
        v17[4] = this;
        v17[5] = a4;
        ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v6, (uint64_t)v17);
        goto LABEL_13;
      }
      v14 = *(void (**)(void))(v20[3] + 24);
      if (!v14)
        goto LABEL_13;
    }
    else
    {
      *((_BYTE *)v10 + 24) = 0;
      v14 = *(void (**)(void))(v11 + 24);
      if (!v14)
        goto LABEL_13;
    }
    v14();
    goto LABEL_13;
  }
  dispatch_sync(v8, block);
  v10 = v24;
  if (*((_BYTE *)v24 + 24))
    goto LABEL_5;
LABEL_13:
  v15 = *((unsigned __int8 *)v24 + 24);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);
  return v15;
}

void sub_1BF68BB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport4readEPhmPjbj_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  unsigned int (*v3)(void);
  NSObject *v4;
  uint8_t v5[16];

  v2 = a1[6];
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v2 + 176;
  v3 = *(unsigned int (**)(void))(v2 + 232);
  if (v3)
  {
    if (!v3())
    {
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
      if (!*(_BYTE *)(v2 + 332))
        return;
      goto LABEL_7;
    }
    LOBYTE(v3) = *(_BYTE *)(v2 + 332) == 0;
  }
  *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = (_BYTE)v3;
  if (!*(_BYTE *)(v2 + 332))
    return;
LABEL_7:
  v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "Explicit reads not allowed in async mode", v5, 2u);
  }
}

uint64_t ___ZN17BasebandTransport4readEPhmPjbj_block_invoke_54(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += **(unsigned int **)(result + 40);
  return result;
}

uint64_t BasebandTransport::close(BasebandTransport *this)
{
  char *v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v9[6];
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  _QWORD *v15;
  uint64_t block;
  uint64_t v17;
  _QWORD *(*v18)(uint64_t);
  void *v19;
  char *v20;
  _QWORD *v21;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 1;
  *((_DWORD *)this + 72) = 0;
  v2 = (char *)this + 72;
  v3 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZN17BasebandTransport5closeEv_block_invoke;
  v10[3] = &__block_descriptor_tmp_56_1;
  v10[4] = this;
  v15 = v10;
  block = MEMORY[0x1E0C809B0];
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_77_0;
  v20 = (char *)this + 72;
  v21 = &v15;
  v5 = (char *)this + 88;
  v4 = *((_QWORD *)this + 11);
  if (*((_QWORD *)v5 + 1))
    dispatch_async_and_wait(v4, &block);
  else
    dispatch_sync(v4, &block);
  BasebandTransport::stopReader(this);
  v9[0] = v3;
  v9[1] = 0x40000000;
  v9[2] = ___ZN17BasebandTransport5closeEv_block_invoke_2;
  v9[3] = &unk_1E791C3E0;
  v9[4] = &v11;
  v9[5] = this;
  v15 = v9;
  block = v3;
  v17 = 0x40000000;
  v18 = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v19 = &__block_descriptor_tmp_77_0;
  v20 = v2;
  v21 = &v15;
  v6 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
    dispatch_async_and_wait(v6, &block);
  else
    dispatch_sync(v6, &block);
  v7 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void sub_1BF68BDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN17BasebandTransport5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  uint8_t v4[16];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 280);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(v1 + 280));
    *(_QWORD *)(v1 + 280) = 0;
    v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Status report disabled", v4, 2u);
    }
  }
}

uint64_t ___ZN17BasebandTransport5closeEv_block_invoke_2(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 80))(*(_QWORD *)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t BasebandTransport::operator*(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD block[6];

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN17BasebandTransportdeEv_block_invoke;
  v5[3] = &unk_1E791C408;
  v5[4] = &v6;
  v5[5] = a1;
  v10 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77_0;
  block[4] = a1 + 72;
  block[5] = &v10;
  v2 = a1 + 88;
  v1 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(v2 + 8))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN17BasebandTransportdeEv_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(result + 40) + 176;
  return result;
}

uint64_t BasebandTransport::switchDIAG_sync(BasebandTransport *this)
{
  return 0;
}

uint64_t BasebandTransport::getIOSizeRx(BasebandTransport *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t BasebandTransport::close_sync(BasebandTransport *this)
{
  unsigned int (*v2)(char *);
  _OWORD *v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  const char *v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  void **v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned int (*)(char *))*((_QWORD *)this + 29);
  if (v2 && (v3 = (_OWORD *)((char *)this + 176), v2((char *)this + 176)))
  {
    *((_DWORD *)this + 82) = 0;
    v4 = TelephonyUtilTransportFree();
    *v3 = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_QWORD *)this + 32) = 0;
    v5 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      return v4;
  }
  else
  {
    v4 = 1;
    v5 = *((_QWORD *)this + 5);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      return v4;
  }
  switch(*((_DWORD *)this + 26))
  {
    case 0:
      v10 = 3;
      LODWORD(__p[0]) = 4997712;
      break;
    case 1:
      v10 = 3;
      LODWORD(__p[0]) = 4997715;
      break;
    case 2:
      v10 = 4;
      v6 = 1195460932;
      goto LABEL_28;
    case 3:
      v10 = 4;
      v6 = 1397114194;
      goto LABEL_28;
    case 4:
      v10 = 5;
      strcpy((char *)__p, "QMUX1");
      break;
    case 5:
      v10 = 5;
      strcpy((char *)__p, "QMUX2");
      break;
    case 6:
      v10 = 3;
      LODWORD(__p[0]) = 5066578;
      break;
    case 7:
      v10 = 4;
      v6 = 1414483778;
      goto LABEL_28;
    case 8:
      v10 = 3;
      LODWORD(__p[0]) = 4805185;
      break;
    case 9:
      v10 = 3;
      LODWORD(__p[0]) = 5526611;
      break;
    case 0xA:
      v10 = 2;
      strcpy((char *)__p, "AT");
      break;
    case 0xB:
      v10 = 4;
      v6 = 1280328769;
      goto LABEL_28;
    case 0xC:
      v10 = 8;
      strcpy((char *)__p, "MEDIACTL");
      break;
    case 0xD:
      v10 = 3;
      LODWORD(__p[0]) = 5461061;
      break;
    case 0xE:
      v10 = 4;
      v6 = 1397968455;
      goto LABEL_28;
    case 0xF:
      v10 = 4;
      v6 = 1397965905;
      goto LABEL_28;
    case 0x10:
      v10 = 5;
      strcpy((char *)__p, "RCTTH");
      break;
    case 0x11:
      v10 = 3;
      LODWORD(__p[0]) = 5260097;
      break;
    case 0x12:
      v10 = 4;
      v6 = 1297040214;
      goto LABEL_28;
    case 0x13:
      v10 = 4;
      v6 = 1129335117;
LABEL_28:
      LODWORD(__p[0]) = v6;
      BYTE4(__p[0]) = 0;
      break;
    case 0x14:
      v10 = 3;
      LODWORD(__p[0]) = 4999236;
      break;
    case 0x15:
      v10 = 3;
      LODWORD(__p[0]) = 5789005;
      break;
    case 0x16:
      v10 = 3;
      LODWORD(__p[0]) = 4407622;
      break;
    default:
      v10 = 7;
      strcpy((char *)__p, "Unknown");
      break;
  }
  v7 = "error";
  if ((_DWORD)v4)
    v7 = "success";
  *(_DWORD *)buf = 136315394;
  v12 = __p;
  v13 = 2080;
  v14 = v7;
  _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Transport close %s: %s", buf, 0x16u);
  if (v10 < 0)
    operator delete(__p[0]);
  return v4;
}

uint64_t BasebandTransport::startReader_sync(NSObject **this)
{
  size_t v2;
  dispatch_queue_t v3;
  NSObject *v4;

  if (!this[37])
  {
    if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize((capabilities::abs *)this))
      v2 = 0x4000;
    else
      v2 = 0x8000;
    this[38] = v2;
    this[37] = operator new[](v2);
    v3 = dispatch_queue_create("ipc.bb", 0);
    v4 = this[39];
    this[39] = v3;
    if (v4)
      dispatch_release(v4);
  }
  *((_BYTE *)this + 292) = 1;
  *((_BYTE *)this + 332) = 1;
  BasebandTransport::queueRead_sync((BasebandTransport *)this);
  return *((unsigned __int8 *)this + 292);
}

void BasebandTransport::queueRead_sync(BasebandTransport *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;
  dispatch_group_t group;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = *((_QWORD *)this + 40);
  if (v6)
  {
    dispatch_retain(*((dispatch_object_t *)this + 40));
    dispatch_group_enter(v6);
  }
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN17BasebandTransport14queueRead_syncEv_block_invoke;
  v13[3] = &__block_descriptor_tmp_63_1;
  v13[4] = this;
  v13[5] = v3;
  v14 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  group = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
  }
  dispatch_async(*((dispatch_queue_t *)this + 39), v13);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 40);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_BYTE *)(v1 + 292);
  *(_BYTE *)(v1 + 292) = 0;
  *(_BYTE *)(v1 + 332) = 0;
  return result;
}

uint64_t ___ZN17BasebandTransport10stopReaderEv_block_invoke_2(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t (*v4)(uint64_t);

  v1 = *(_QWORD *)(result + 40);
  v2 = *(uint64_t (**)(uint64_t))(v1 + 232);
  if (v2)
  {
    v3 = result;
    result = v2(v1 + 176);
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 8) + 24))
      {
        v4 = *(uint64_t (**)(uint64_t))(v1 + 192);
        if (v4)
          return v4(v1 + 176);
      }
    }
  }
  return result;
}

void ___ZN17BasebandTransport14queueRead_syncEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(a1 + 56);
  v3 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  BasebandTransport::read_sync(v1, &v3);
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
}

void sub_1BF68C634(_Unwind_Exception *exception_object)
{
  NSObject *v1;

  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void BasebandTransport::read_sync(uint64_t a1, NSObject **a2)
{
  std::__shared_weak_count *v4;
  uint64_t *v5;
  uint64_t v6;
  capabilities::abs *v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD);
  uint64_t v10;
  capabilities::abs *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD v31[6];
  std::__shared_weak_count *v32;
  _QWORD block[6];
  std::__shared_weak_count *v34;
  dispatch_group_t group;
  int v36;
  _QWORD v37[5];
  int v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v6 = *(_QWORD *)(a1 + 72);
  v4 = *(std::__shared_weak_count **)(a1 + 80);
  v5 = (uint64_t *)(a1 + 72);
  v40 = v6;
  if (!v4
    || (v8 = (capabilities::abs *)std::__shared_weak_count::lock(v4), (v41 = (std::__shared_weak_count *)v8) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = 0;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, _QWORD, uint64_t, _QWORD))(a1 + 184);
  v10 = MEMORY[0x1E0C809B0];
  if (v9)
  {
    v11 = v8;
    v12 = *(_QWORD *)(a1 + 296);
    v13 = capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v8) ? 0x4000 : 0x8000;
    v14 = v9(a1 + 176, v12, v13, &v39, 0, 0xFFFFFFFFLL, 0);
    v15 = v39 ? v14 : 0;
    if (v15 == 1)
    {
      v37[0] = v10;
      v37[1] = 0x40000000;
      v37[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke;
      v37[3] = &__block_descriptor_tmp_64_2;
      v37[4] = a1;
      v38 = v39;
      ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v37);
      block[0] = v10;
      block[1] = 1174405120;
      block[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2;
      block[3] = &__block_descriptor_tmp_65;
      block[4] = a1;
      block[5] = v6;
      v34 = (std::__shared_weak_count *)v11;
      v16 = (unint64_t *)((char *)v11 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = *a2;
      group = v18;
      if (v18)
      {
        dispatch_retain(v18);
        dispatch_group_enter(v18);
      }
      v36 = v39;
      dispatch_sync(*(dispatch_queue_t *)(a1 + 152), block);
      v19 = group;
      if (group)
      {
        dispatch_group_leave(group);
        dispatch_release(v19);
      }
      v20 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
  v31[0] = v10;
  v31[1] = 1174405120;
  v31[2] = ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_66;
  v31[3] = &__block_descriptor_tmp_67_1;
  v31[4] = a1;
  v31[5] = v40;
  v32 = v41;
  if (v41)
  {
    v23 = (unint64_t *)&v41->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(v5, (uint64_t)v31);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1BF68C8D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = a2[7];
  a1[7] = v6;
  if (v6)
  {
    dispatch_retain(v6);
    v7 = a1[7];
    if (v7)
      dispatch_group_enter(v7);
  }
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE56c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 56);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

uint64_t ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 336) += *(unsigned int *)(result + 40);
  return result;
}

void ___ZN17BasebandTransport9read_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p;
  void *v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = v2[16];
  if (v3)
  {
    __p = 0;
    v5 = 0;
    v6 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, v2[37], *(unsigned int *)(a1 + 64), &__p);
    (*(void (**)(void))(v2[18] + 16))();
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    (*(void (**)(void))(v2[18] + 16))();
  }
}

void sub_1BF68CA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__110shared_ptrI17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN17BasebandTransport12timerOn_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD block[6];
  std::__shared_weak_count *v22;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      if (!v6)
      {
LABEL_19:
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        return;
      }
      v7 = (_OWORD *)(v3 + 328);
      v8 = *(_QWORD *)(v3 + 336);
      v9 = *(_QWORD *)(v3 + 376);
      v10 = *(_QWORD *)(v3 + 344) - *(_QWORD *)(v3 + 384);
      *(_QWORD *)(v3 + 352) = v8 - v9;
      *(_QWORD *)(v3 + 360) = v10;
      if (v10)
        v11 = 0;
      else
        v11 = v8 == v9;
      if (v11)
      {
        v12 = 3;
      }
      else
      {
        if (*(_DWORD *)v7 != 3)
        {
LABEL_12:
          v13 = *(_OWORD *)(v3 + 344);
          *(_OWORD *)(v3 + 368) = *v7;
          *(_OWORD *)(v3 + 384) = v13;
          *(_QWORD *)(v3 + 400) = *(_QWORD *)(v3 + 360);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 1174405120;
          block[2] = ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2;
          block[3] = &__block_descriptor_tmp_68_3;
          block[4] = v3;
          block[5] = v6;
          v14 = (unint64_t *)&v4->__shared_owners_;
          v22 = v4;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          dispatch_async(*(dispatch_queue_t *)(v3 + 152), block);
          v16 = v22;
          if (v22)
          {
            v17 = (unint64_t *)&v22->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
              std::__shared_weak_count::__release_weak(v16);
            }
          }
          goto LABEL_19;
        }
        v12 = 1;
      }
      *(_DWORD *)v7 = v12;
      goto LABEL_12;
    }
  }
}

uint64_t ___ZN17BasebandTransport12timerOn_syncEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v5 + 272);
  v10 = *(_QWORD *)(v5 + 400);
  v7 = *(_OWORD *)(v5 + 384);
  v9[0] = *(_OWORD *)(v5 + 368);
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 16))(v6, v9, a3, a4, a5);
}

__n128 BasebandTransport::getStatus@<Q0>(BasebandTransport *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 45);
  result = *(__n128 *)((char *)this + 328);
  v3 = *(_OWORD *)((char *)this + 344);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void ___ZN17BasebandTransport9dumpStateEb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  void **v5;
  void *__p[2];
  char v7;
  uint8_t buf[4];
  void **v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  *(int64x2_t *)(v2 + 352) = vsubq_s64(*(int64x2_t *)(v2 + 336), *(int64x2_t *)(v2 + 376));
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BasebandTransport::Parameters::toString((BasebandTransport::Parameters *)(v2 + 104), __p);
    if (v7 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v9 = v4;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
    if (v7 < 0)
      operator delete(__p[0]);
    v3 = *(NSObject **)(v2 + 40);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((BasebandTransport::Status::toString((BasebandTransport::Status *)(v2 + 328), __p), v7 >= 0)
      ? (v5 = __p)
      : (v5 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        v9 = v5,
        _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu),
        v7 < 0))
  {
    operator delete(__p[0]);
    if (!*(_BYTE *)(a1 + 40))
      return;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    return;
  }
  *(_DWORD *)(v2 + 328) = 0;
  *(_BYTE *)(v2 + 332) = 0;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_QWORD *)(v2 + 365) = 0;
  BasebandTransport::timerOn_sync((BasebandTransport *)v2);
}

void BasebandTransport::reportStatus(uint64_t a1, int a2, void **a3)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  void *v7;
  _QWORD v8[5];
  void *aBlock;
  int v10;
  _QWORD *v11;
  _QWORD block[6];

  v4 = MEMORY[0x1E0C809B0];
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1174405120;
  v8[2] = ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke;
  v8[3] = &__block_descriptor_tmp_71;
  v8[4] = a1;
  v10 = a2;
  v5 = *a3;
  if (*a3)
    v5 = _Block_copy(v5);
  aBlock = v5;
  v11 = v8;
  block[0] = v4;
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_77_0;
  block[4] = a1 + 72;
  block[5] = &v11;
  v6 = *(NSObject **)(a1 + 88);
  if (!*(_QWORD *)(a1 + 96))
  {
    dispatch_sync(v6, block);
    v7 = aBlock;
    if (!aBlock)
      return;
    goto LABEL_7;
  }
  dispatch_async_and_wait(v6, block);
  v7 = aBlock;
  if (aBlock)
LABEL_7:
    _Block_release(v7);
}

void ___ZN17BasebandTransport12reportStatusEjN8dispatch5blockIU13block_pointerFvNS_6StatusEEEE_block_invoke(uint64_t a1)
{
  int v1;
  void *v2;
  uint64_t v3;
  const void *v4;

  v1 = *(_DWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(a1 + 40);
  *(_DWORD *)(v3 + 288) = v1;
  if (v2)
    v2 = _Block_copy(v2);
  v4 = *(const void **)(v3 + 272);
  *(_QWORD *)(v3 + 272) = v2;
  if (v4)
    _Block_release(v4);
  BasebandTransport::timerOn_sync((BasebandTransport *)v3);
}

void *__copy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 40);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __destroy_helper_block_e8_40c70_ZTSN8dispatch5blockIU13block_pointerFvN17BasebandTransport6StatusEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

double ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 16) = 0x600000000000000;
  result = *(double *)"ipc.bb";
  *(_OWORD *)a1 = *(_OWORD *)"ipc.bb";
  return result;
}

uint64_t ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791C660;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791C660;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ___ZL14sLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  char __p[19];
  char v19;
  __int128 v20;

  v19 = 18;
  strcpy(__p, "baseband.transport");
  ctu::LogServer::create();
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v20;
  v20 = 0uLL;
  v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)v2 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (*((_QWORD *)&v20 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      if ((v19 & 0x80000000) == 0)
        goto LABEL_12;
      goto LABEL_11;
    }
  }
  if (v19 < 0)
LABEL_11:
    operator delete(*(void **)__p);
LABEL_12:
  v9 = (std::__shared_weak_count_vtbl *)operator new(8uLL);
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1E791C6C0;
  *(_QWORD *)__p = v9;
  v10 = (std::__shared_weak_count *)operator new(0x20uLL);
  v10->__shared_owners_ = 0;
  v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E791C728;
  v10->__shared_weak_owners_ = 0;
  v10[1].__vftable = v9;
  *(_QWORD *)&__p[8] = v10;
  v17 = v10;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  ctu::LogServer::addWriter();
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  ctu::LogServer::start(**(ctu::LogServer ***)(a1 + 32));
  ctu::LogServer::setEnabled(**(ctu::LogServer ***)(a1 + 32));
  if (*(_QWORD *)&__p[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[8] + 16))(*(_QWORD *)&__p[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
    }
  }
}

void sub_1BF68D278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF68D294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  operator delete(v16);
  _Unwind_Resume(a1);
}

void sub_1BF68D2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<EmptyLogWriter *,std::shared_ptr<ctu::LogWriter>::__shared_ptr_default_delete<ctu::LogWriter,EmptyLogWriter>,std::allocator<EmptyLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF7427A7)
    return a1 + 24;
  if (((v3 & 0x80000001BF7427A7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF7427A7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF7427A7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ctu::SharedLoggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791C660;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::Loggable<BasebandTransport,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF68D534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF68D550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE*)#1}::operator() const(BasebandTransportICE*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransportICE *,std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE *)#1},std::allocator<BasebandTransportICE>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__11"
                     "0shared_ptrIT_EEPS7_EUlPS4_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportIC"
                                "EEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrI20BasebandTransportICEEENSt3__110shared_ptrIT_EEPS7_EUlPS4_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransportICE> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransportICE>(BasebandTransportICE*)::{lambda(BasebandTransportICE*)#1}::operator() const(BasebandTransportICE*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandTransport *,std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport *)#1},std::allocator<BasebandTransport>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_"
                                "ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI17BasebandTransportE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandTransport> ctu::SharedSynchronizable<BasebandTransport>::make_shared_ptr<BasebandTransport>(BasebandTransport*)::{lambda(BasebandTransport*)#1}::operator() const(BasebandTransport*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb0_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (**v6)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t);
  __int128 v7;
  _OWORD v8[2];
  uint64_t v9;

  v6 = *(void (***)(const void *, _OWORD *, uint64_t, uint64_t, uint64_t))a1;
  v7 = *(_OWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v8[0] = *(_OWORD *)(a1 + 8);
  v8[1] = v7;
  v6[2](v6, v8, a3, a4, a5);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  operator delete((void *)a1);
}

void sub_1BF68D724(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__1EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(const void **a1)
{
  void *v2;

  (*((void (**)(void))*a1 + 2))();
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if (*a1)
    _Block_release(*a1);
  operator delete(a1);
}

void sub_1BF68D79C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(_QWORD *)(v1 + 16) = v3;
    operator delete(v3);
  }
  if (*(_QWORD *)v1)
    _Block_release(*(const void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZZZN17BasebandTransport4initEvEUb_EUb1_E3__2EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void *a1)
{
  const void *v2;

  (*(void (**)(void))(*(_QWORD *)a1 + 16))();
  if (*((_BYTE *)a1 + 20))
  {
    v2 = *(const void **)a1;
    if (!*(_QWORD *)a1)
      goto LABEL_6;
    goto LABEL_5;
  }
  free(*((void **)a1 + 1));
  v2 = *(const void **)a1;
  if (*(_QWORD *)a1)
LABEL_5:
    _Block_release(v2);
LABEL_6:
  operator delete(a1);
}

void sub_1BF68D82C(_Unwind_Exception *a1)
{
  const void **v1;

  if (*v1)
    _Block_release(*v1);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<BasebandTransport>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791C870;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIK17BasebandTransportEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void NetworkingModule::create(uint64_t *a1@<X0>, NetworkingModule **a2@<X8>)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  uint64_t v10[2];

  *a2 = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0xC8uLL);
  v5 = (uint64_t)v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v10[0] = v6;
  v10[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  NetworkingModule::NetworkingModule((uint64_t)v4, v10);
  *a2 = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  a2[1] = (NetworkingModule *)0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkingModule>::shared_ptr[abi:ne180100]<NetworkingModule,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1},void>(a2, v5);
  ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync((uint64_t)*a2 + 48);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  NetworkingModule::init(*a2);
}

void sub_1BF68DAB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void NetworkingModule::init(NetworkingModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  NSObject *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v6 = operator new(8uLL);
  *v6 = this;
  v7 = *((_QWORD *)this + 17);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = operator new(0x18uLL);
  *v10 = v6;
  v10[1] = v3;
  v10[2] = v5;
  dispatch_async_f(v7, v10, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::init(void)::$_0>(NetworkingModule::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::init(void)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::init(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

uint64_t NetworkingModule::NetworkingModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  NSObject *initially_inactive;
  NSObject *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[16];
  _QWORD block[5];
  _BYTE v22[16];

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E791CA70;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E791CA70;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E791C8C8;
  *(_QWORD *)(a1 + 48) = &unk_1E791C938;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, "com.apple.telephony.abm", "net.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v15 = dispatch_queue_create_with_target_V2("net.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v15, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v15);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v15;
  if (v15)
  {
    dispatch_retain(v15);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v15);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E791CAE0;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  if (v10)
  {
    v16 = (unint64_t *)&v10->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E791CB98;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 - 1, v16));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v22);
    *(_QWORD *)(a1 + 48) = off_1E791CB98;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(_QWORD *)a1 = off_1E791C8C8;
  *(_QWORD *)(a1 + 48) = &unk_1E791C938;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 178) = 0u;
  return a1;
}

void sub_1BF68DEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  Service *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v4 - 64));
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v2);
  _Unwind_Resume(a1);
}

void sub_1BF68DF28(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void NetworkingModule::~NetworkingModule(NetworkingModule *this)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;

  *(_QWORD *)this = off_1E791C8C8;
  *((_QWORD *)this + 6) = &unk_1E791C938;
  v2 = (const void *)*((_QWORD *)this + 23);
  if (v2)
    CFRelease(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((_QWORD *)this + 6) = off_1E791CAE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v9 = *((_QWORD *)this + 18);
  if (v9)
    dispatch_release(v9);
  v10 = *((_QWORD *)this + 17);
  if (v10)
    dispatch_release(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  *(_QWORD *)this = off_1E79228B8;
  v12 = *((_QWORD *)this + 3);
  if (v12)
  {
    v13 = *((_QWORD *)this + 4);
    v14 = (void *)*((_QWORD *)this + 3);
    if (v13 != v12)
    {
      do
      {
        if (*(char *)(v13 - 1) < 0)
          operator delete(*(void **)(v13 - 24));
        v13 -= 24;
      }
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v12;
    operator delete(v14);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
}

{
  void *v1;

  NetworkingModule::~NetworkingModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'NetworkingModule::~NetworkingModule(NetworkingModule *this)
{
  NetworkingModule::~NetworkingModule((NetworkingModule *)((char *)this - 48));
}

{
  void *v1;

  NetworkingModule::~NetworkingModule((NetworkingModule *)((char *)this - 48));
  operator delete(v1);
}

void NetworkingModule::shutdown(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[16];
  if (!v4 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(8uLL);
  *v8 = v3;
  v9 = a1[17];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::shutdown(dispatch::group_session)::$_0>(NetworkingModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void NetworkingModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  unint64_t *v19;
  NSObject *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  NSObject *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;

  v3 = (std::__shared_weak_count *)a1[16];
  if (!v3 || (v5 = a1[15], (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v13);
  }
  v14 = (std::__shared_weak_count *)a1[16];
  if (!v14 || (v15 = a1[15], (v16 = std::__shared_weak_count::lock(v14)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v17 = v16;
  v18 = operator new(0x20uLL);
  *v18 = a1;
  v18[1] = v5;
  v18[2] = v7;
  v18[3] = v13;
  v19 = (unint64_t *)&v17->__shared_owners_;
  v20 = a1[17];
  do
    v21 = __ldxr(v19);
  while (__stxr(v21 + 1, v19));
  v22 = operator new(0x18uLL);
  *v22 = v18;
  v22[1] = v15;
  v22[2] = v17;
  dispatch_async_f(v20, v22, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_0>(NetworkingModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v23 = __ldaxr(v19);
  while (__stlxr(v23 - 1, v19));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  v24 = (std::__shared_weak_count *)a1[16];
  if (!v24 || (v25 = a1[15], (v26 = std::__shared_weak_count::lock(v24)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = operator new(8uLL);
  *v28 = a1;
  v29 = a1[17];
  v30 = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(v30);
  while (__stxr(v31 + 1, v30));
  v32 = operator new(0x18uLL);
  *v32 = v28;
  v32[1] = v25;
  v32[2] = v27;
  dispatch_async_f(v29, v32, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_1>(NetworkingModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke);
  do
    v33 = __ldaxr(v30);
  while (__stlxr(v33 - 1, v30));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void NetworkingModule::finishInitialization_sync(NetworkingModule *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  config::hw *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  const char *v10;
  size_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  CFTypeRef v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  __int128 v42;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v2 || (v3 = *((_QWORD *)this + 15), (v4 = (config::hw *)std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = (std::__shared_weak_count *)v4;
  v6 = (unint64_t *)((char *)v4 + 16);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  v8 = (unint64_t *)((char *)v4 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    (*(void (**)(config::hw *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  if (config::hw::watch(v4))
  {
    v10 = (const char *)(*(uint64_t (**)(NetworkingModule *))(*(_QWORD *)this + 16))(this);
    v11 = strlen(v10);
    if (v11 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v12 = (void *)v11;
    if (v11 >= 0x17)
    {
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v14 = v11 | 7;
      v15 = v14 + 1;
      v13 = (void **)operator new(v14 + 1);
      __dst[1] = v12;
      v41 = v15 | 0x8000000000000000;
      __dst[0] = v13;
    }
    else
    {
      HIBYTE(v41) = v11;
      v13 = __dst;
      if (!v11)
        goto LABEL_18;
    }
    memmove(v13, v10, (size_t)v12);
LABEL_18:
    *((_BYTE *)v12 + (_QWORD)v13) = 0;
    cf = 0;
    AppleBasebandManager::create();
    v16 = v42;
    v42 = 0uLL;
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
    *(_OWORD *)((char *)this + 152) = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (!*((_QWORD *)&v42 + 1))
      goto LABEL_27;
    v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
      v23 = cf;
      if (!cf)
      {
LABEL_29:
        if (SHIBYTE(v41) < 0)
          operator delete(__dst[0]);
        v24 = (const void *)*MEMORY[0x1E0CFBD68];
        v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
        if (v25 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v26 = (void *)v25;
        if (v25 >= 0x17)
        {
          v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v25 | 7) != 0x17)
            v28 = v25 | 7;
          v29 = v28 + 1;
          v27 = operator new(v28 + 1);
          __p[1] = v26;
          v38 = v29 | 0x8000000000000000;
          __p[0] = v27;
        }
        else
        {
          HIBYTE(v38) = v25;
          v27 = __p;
          if (!v25)
          {
LABEL_39:
            *((_BYTE *)v26 + (_QWORD)v27) = 0;
            v33[0] = MEMORY[0x1E0C809B0];
            v33[1] = 3321888768;
            v33[2] = ___ZN16NetworkingModule25finishInitialization_syncEv_block_invoke;
            v33[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e70_v24__0_shared_ptr_abm::client::Event____Event_____shared_weak_count__8l;
            v33[4] = this;
            v33[5] = v3;
            v34 = v5;
            do
              v30 = __ldxr(v6);
            while (__stxr(v30 + 1, v6));
            v31 = _Block_copy(v33);
            v32 = *((_QWORD *)this + 17);
            if (v32)
              dispatch_retain(*((dispatch_object_t *)this + 17));
            aBlock = v31;
            object = v32;
            AppleBasebandManager::setEventHandler();
            if (object)
              dispatch_release(object);
            if (aBlock)
              _Block_release(aBlock);
            if (SHIBYTE(v38) < 0)
              operator delete(__p[0]);
            AppleBasebandManager::eventsOn(*((AppleBasebandManager **)this + 19));
            if (v34)
              std::__shared_weak_count::__release_weak(v34);
            goto LABEL_51;
          }
        }
        memmove(v27, v24, (size_t)v26);
        goto LABEL_39;
      }
    }
    else
    {
LABEL_27:
      v23 = cf;
      if (!cf)
        goto LABEL_29;
    }
    CFRelease(v23);
    goto LABEL_29;
  }
LABEL_51:
  NetworkingModule::applyLQMAbortPolicy_sync(this);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF68E714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    std::__shared_weak_count::__release_weak(v30);
    _Unwind_Resume(a1);
  }
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN16NetworkingModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  NetworkingModule *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFTypeRef v8;
  char v9;
  size_t v10;
  void **v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15[3];
  _QWORD v16[2];
  CFTypeRef cf;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (NetworkingModule *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v19 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v16[0] = 0xAAAAAAAAAAAAAAAALL;
          v16[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v16, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          memset(v15, 170, sizeof(v15));
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v20, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8B878](&v20);
          v9 = HIBYTE(v15[2]);
          if (SHIBYTE(v15[2]) >= 0)
            v10 = HIBYTE(v15[2]);
          else
            v10 = (size_t)v15[1];
          if (v10 == strlen((const char *)*MEMORY[0x1E0CFB980]))
          {
            if (SHIBYTE(v15[2]) >= 0)
              v11 = v15;
            else
              v11 = (void **)v15[0];
            v12 = memcmp(v11, (const void *)*MEMORY[0x1E0CFB980], v10);
            *((_BYTE *)v5 + 193) = v12 == 0;
            if (!v12)
            {
              NetworkingModule::applyBreadMode_sync(v5);
              v9 = HIBYTE(v15[2]);
            }
          }
          else
          {
            *((_BYTE *)v5 + 193) = 0;
          }
          if (v9 < 0)
            operator delete(v15[0]);
          MEMORY[0x1C3B8B8B4](v16);
          v8 = cf;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BF68E980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,const void *a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8B8B4](&a21);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void sub_1BF68E9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void NetworkingModule::applyBreadMode_sync(NetworkingModule *this)
{
  CommandDriverFactory *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  __int128 v23;

  v21 = 0xAAAAAAAAAAAAAAAALL;
  v22 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v2 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v3 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v2);
    v4 = v23;
    v23 = 0uLL;
    v5 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (*((_QWORD *)&v23 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v23 + 1) + 16))(*((_QWORD *)&v23 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v23 + 1));
      }
    }
    v3 = off_1ED70F4D0;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 16))(&v19, v3);
  v21 = 0;
  v22 = 0;
  if (v20)
  {
    v22 = std::__shared_weak_count::lock(v20);
    if (v22)
      v21 = v19;
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
  }
  if (!v10)
    goto LABEL_25;
  v13 = (unint64_t *)&v10->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_25:
    v15 = v21;
    if (!v21)
      goto LABEL_27;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
  std::__shared_weak_count::__release_weak(v10);
  v15 = v21;
  if (v21)
LABEL_26:
    (*(void (**)(unint64_t, _QWORD))(*(_QWORD *)v15 + 328))(v15, *((unsigned __int8 *)this + 192));
LABEL_27:
  v16 = v22;
  if (v22)
  {
    v17 = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1BF68EBDC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF68EBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF68EC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void NetworkingModule::applyLQMAbortPolicy_sync(NetworkingModule *this)
{
  size_t v1;
  size_t v2;
  _BYTE *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFArray *v7;
  uint64_t (*v8)(uint64_t);
  _QWORD *v9;
  CFIndex v10;
  unint64_t v11;
  void *v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  NSObject *v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  _BOOL4 v34;
  std::string *p_p;
  std::string::size_type v36;
  int v37;
  std::string *v38;
  std::string::size_type v39;
  int v40;
  NSObject *v41;
  std::string *v42;
  NSObject *v43;
  const char *v44;
  uint32_t v45;
  NSObject *v46;
  NSObject *v47;
  NSObject *v48;
  int v49;
  const __CFArray *v50;
  NSObject *v51;
  const char *v52;
  NSObject *v53;
  uint32_t v54;
  NSObject *v55;
  NSObject *v56;
  const char *v57;
  void *__src;
  uint64_t Count;
  CFIndex v61;
  char v62;
  uint64_t v63;
  id obj;
  void *v65;
  const __CFArray *theArray;
  CFTypeRef cf;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  std::string v72;
  std::string __p;
  xpc_object_t object;
  _QWORD v75[2];
  _BYTE buf[120];
  uint64_t v77;
  _BYTE applier[24];
  void *v79;
  std::string *v80;
  std::string v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 21))
  {
    cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    __src = (void *)*MEMORY[0x1E0CFC070];
    v1 = strlen((const char *)*MEMORY[0x1E0CFC070]);
    if (v1 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v2 = v1;
    if (v1 >= 0x17)
    {
      v5 = (v1 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v1 | 7) != 0x17)
        v5 = v1 | 7;
      v6 = v5 + 1;
      v3 = operator new(v5 + 1);
      *(_QWORD *)&buf[8] = v2;
      *(_QWORD *)&buf[16] = v6 | 0x8000000000000000;
      *(_QWORD *)buf = v3;
    }
    else
    {
      buf[23] = v1;
      v3 = buf;
      if (!v1)
      {
LABEL_12:
        v3[v2] = 0;
        NetworkingModule::getBundleIDList_sync((uint64_t)this, (uint64_t)buf, &cf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        v7 = (const __CFArray *)cf;
        v8 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
        if (!cf)
          v8 = 0;
        if (v8)
        {
          v63 = *((_QWORD *)this + 21);
          theArray = (const __CFArray *)cf;
          if (cf)
            CFRetain(cf);
          v9 = &loc_1BF73A000;
          Count = CFArrayGetCount(v7);
          if (Count)
          {
            v10 = 0;
            v62 = 0;
            v11 = 0x1E0CD0000uLL;
            while (1)
            {
              memset(&__p, 170, sizeof(__p));
              CFArrayGetValueAtIndex(theArray, v10);
              memset(&v81, 0, sizeof(v81));
              ctu::cf::assign();
              __p = v81;
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v72, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              else
                v72 = __p;
              v12 = (void *)NEHelperCacheCopyAppUUIDMapping();
              v13 = v12;
              if (v12)
              {
                object = v12;
              }
              else
              {
                v13 = xpc_null_create();
                object = v13;
                if (!v13)
                {
                  v14 = xpc_null_create();
                  v13 = 0;
                  goto LABEL_32;
                }
              }
              if (MEMORY[0x1C3B8CD78](v13) == MEMORY[0x1E0C812C8])
              {
                xpc_retain(v13);
                goto LABEL_33;
              }
              v14 = xpc_null_create();
LABEL_32:
              object = v14;
LABEL_33:
              xpc_release(v13);
              v15 = object;
              if (object)
              {
                xpc_retain(object);
                v16 = v15;
              }
              else
              {
                v16 = xpc_null_create();
              }
              if (MEMORY[0x1C3B8CD78](v16) == MEMORY[0x1E0C812C8])
              {
                v81.__r_.__value_.__r.__words[0] = 0;
                v81.__r_.__value_.__l.__size_ = (std::string::size_type)&v81;
                v81.__r_.__value_.__r.__words[2] = 0x3052000000;
                *(_QWORD *)&v82 = __Block_byref_object_copy__4;
                *((_QWORD *)&v82 + 1) = __Block_byref_object_dispose__4;
                v83 = 0;
                *(_QWORD *)applier = MEMORY[0x1E0C809B0];
                *(_QWORD *)&applier[8] = 3221225472;
                *(_QWORD *)&applier[16] = ___ZN20NetworkPolicyManager10uuidBridgeEN3xpc5arrayE_block_invoke;
                v79 = &unk_1E791CB18;
                v80 = &v81;
                xpc_array_apply(v16, applier);
                obj = *(id *)(v81.__r_.__value_.__l.__size_ + 40);
                _Block_object_dispose(&v81, 8);
              }
              else
              {
                obj = 0;
              }
              xpc_release(v16);
              v17 = *(NSObject **)(v63 + 40);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                v18 = SHIBYTE(v72.__r_.__value_.__r.__words[2]);
                v19 = v72.__r_.__value_.__r.__words[0];
                xpc::object::to_string((xpc::object *)&object);
                v20 = &v72;
                if (v18 < 0)
                  v20 = (std::string *)v19;
                v21 = &v81;
                if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v21 = (std::string *)v81.__r_.__value_.__r.__words[0];
                *(_DWORD *)applier = 136315394;
                *(_QWORD *)&applier[4] = v20;
                *(_WORD *)&applier[12] = 2080;
                *(_QWORD *)&applier[14] = v21;
                _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I UUIDs for bundleID:%s => %s", applier, 0x16u);
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v81.__r_.__value_.__l.__data_);
                v15 = object;
              }
              xpc_release(v15);
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v72.__r_.__value_.__l.__data_);
                v61 = v10;
                if (obj)
                {
LABEL_49:
                  v22 = objc_msgSend(*(id *)(v11 + 2120), "allInterfaces");
                  if (v22)
                  {
                    v23 = objc_msgSend(MEMORY[0x1E0CD0858], "routeRuleWithAction:forType:", 4, 2);
                    if (v23)
                    {
                      v77 = v23;
                      v65 = (void *)objc_msgSend(MEMORY[0x1E0CD0850], "routeRules:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v77, 1));
                      if (v65)
                      {
                        v70 = 0u;
                        v71 = 0u;
                        v68 = 0u;
                        v69 = 0u;
                        v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, buf, 16);
                        if (v24)
                        {
                          v25 = *(_QWORD *)v69;
                          do
                          {
                            for (i = 0; i != v24; ++i)
                            {
                              if (*(_QWORD *)v69 != v25)
                                objc_enumerationMutation(obj);
                              v27 = *(void **)(*((_QWORD *)&v68 + 1) + 8 * i);
                              v28 = objc_msgSend(*(id *)(v11 + 2120), "effectiveApplication:", v27);
                              if (v28)
                              {
                                v29 = objc_alloc(MEMORY[0x1E0CD0840]);
                                v75[0] = v28;
                                v75[1] = v22;
                                v30 = (void *)objc_msgSend(v29, "initWithOrder:result:conditions:", 0, v65, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v75, 2));
                                if (v30)
                                {
                                  v31 = v11;
                                  v32 = objc_msgSend(*(id *)(v63 + 72), "addPolicy:", v30);
                                  v33 = *(NSObject **)(v63 + 40);
                                  v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
                                  if (v32)
                                  {
                                    if (v34)
                                    {
                                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                        p_p = &__p;
                                      else
                                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                                      v36 = objc_msgSend((id)objc_msgSend(v27, "UUIDString"), "UTF8String");
                                      v37 = objc_msgSend(v65, "resultType");
                                      LODWORD(v81.__r_.__value_.__l.__data_) = 136315906;
                                      *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
                                      WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                                      *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = v36;
                                      HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                                      LODWORD(v82) = v37;
                                      WORD2(v82) = 1024;
                                      *(_DWORD *)((char *)&v82 + 6) = v32;
                                      _os_log_impl(&dword_1BF566000, v33, OS_LOG_TYPE_DEFAULT, "#I Valid policy; bundle-id:%s UUID:%s result:%u policy-id:%u",
                                        (uint8_t *)&v81,
                                        0x22u);
                                    }
                                    v62 = 1;
                                  }
                                  else if (v34)
                                  {
                                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                      v38 = &__p;
                                    else
                                      v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
                                    v39 = objc_msgSend((id)objc_msgSend(v27, "UUIDString"), "UTF8String");
                                    v40 = objc_msgSend(v65, "resultType");
                                    LODWORD(v81.__r_.__value_.__l.__data_) = 136315650;
                                    *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
                                    WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                                    *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = v39;
                                    HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                                    LODWORD(v82) = v40;
                                    _os_log_impl(&dword_1BF566000, v33, OS_LOG_TYPE_DEFAULT, "#I Invalid policy; bundle-id:%s UUID:%s result:%u ",
                                      (uint8_t *)&v81,
                                      0x1Cu);
                                  }
                                  v11 = v31;

                                }
                              }
                            }
                            v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v68, buf, 16);
                          }
                          while (v24);
                        }
                        goto LABEL_88;
                      }
                      v48 = *(NSObject **)(v63 + 40);
                      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                      {
                        LOWORD(v81.__r_.__value_.__l.__data_) = 0;
                        v43 = v48;
                        v44 = "#I Result creation failed";
LABEL_86:
                        v45 = 2;
LABEL_87:
                        _os_log_impl(&dword_1BF566000, v43, OS_LOG_TYPE_DEFAULT, v44, (uint8_t *)&v81, v45);
                        goto LABEL_88;
                      }
                    }
                    else
                    {
                      v47 = *(NSObject **)(v63 + 40);
                      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                      {
                        LOWORD(v81.__r_.__value_.__l.__data_) = 0;
                        v43 = v47;
                        v44 = "#I Route rule creation failed";
                        goto LABEL_86;
                      }
                    }
                  }
                  else
                  {
                    v46 = *(NSObject **)(v63 + 40);
                    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                    {
                      LOWORD(v81.__r_.__value_.__l.__data_) = 0;
                      v43 = v46;
                      v44 = "#I Interface condition creation failed";
                      goto LABEL_86;
                    }
                  }
                  goto LABEL_88;
                }
              }
              else
              {
                v61 = v10;
                if (obj)
                  goto LABEL_49;
              }
              v41 = *(NSObject **)(v63 + 40);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                v42 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
                LODWORD(v81.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
                v43 = v41;
                v44 = "#I No UUIDs available for bundle-id:%s";
                v45 = 12;
                goto LABEL_87;
              }
LABEL_88:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                v10 = v61 + 1;
                if (v61 + 1 == Count)
                {
LABEL_90:
                  if ((v62 & 1) != 0)
                  {
                    v9 = (_QWORD *)&loc_1BF73A000;
                    v49 = objc_msgSend(*(id *)(v63 + 72), "apply");
                    v50 = theArray;
                    if (!theArray)
                      goto LABEL_102;
                    goto LABEL_101;
                  }
                  v49 = 0;
                  v9 = (_QWORD *)&loc_1BF73A000;
                  v50 = theArray;
                  if (theArray)
                    goto LABEL_101;
                  goto LABEL_102;
                }
              }
              else
              {
                v10 = v61 + 1;
                if (v61 + 1 == Count)
                  goto LABEL_90;
              }
            }
          }
          v55 = *(NSObject **)(v63 + 40);
          if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            v49 = 1;
            v50 = theArray;
            if (!theArray)
              goto LABEL_102;
            goto LABEL_101;
          }
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v55, OS_LOG_TYPE_DEFAULT, "#I Empty bundle-id list; nothing to apply", buf, 2u);
          v49 = 1;
          v50 = theArray;
          if (theArray)
LABEL_101:
            CFRelease(v50);
LABEL_102:
          v56 = *((_QWORD *)this + 11);
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            goto LABEL_107;
          v57 = "failed";
          if (v49)
            v57 = "successful";
          *(_DWORD *)buf = v9[251];
          *(_QWORD *)&buf[4] = __src;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v57;
          v52 = "#I Applying network policy for '%s' %s ";
          v53 = v56;
          v54 = 22;
        }
        else
        {
          v51 = *((_QWORD *)this + 11);
          if (!os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            goto LABEL_107;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = __src;
          v52 = "#I No network policy to apply for action: %s";
          v53 = v51;
          v54 = 12;
        }
        _os_log_impl(&dword_1BF566000, v53, OS_LOG_TYPE_DEFAULT, v52, buf, v54);
LABEL_107:
        if (cf)
          CFRelease(cf);
        return;
      }
    }
    memmove(v3, __src, v2);
    goto LABEL_12;
  }
  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Network policy update is not supported", buf, 2u);
  }
}

void sub_1BF68F608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,xpc_object_t object,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF68F730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a27);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(&a28);
  _Unwind_Resume(a1);
}

void NetworkingModule::sendVisitInfo_sync(NetworkingModule *this, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  CommandDriverFactory *v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  uint8_t buf[16];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a2;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Visit info: Arrival=%u Departure=%u", buf, 0xEu);
  }
  v26 = 0xAAAAAAAAAAAAAAAALL;
  v27 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v7 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v6);
    v8 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v9 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v7 = off_1ED70F4D0;
  }
  v15 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v16 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 16))(&v24, v7);
  v26 = 0;
  v27 = 0;
  if (v25)
  {
    v27 = std::__shared_weak_count::lock(v25);
    if (v27)
      v26 = v24;
    if (v25)
      std::__shared_weak_count::__release_weak(v25);
  }
  if (!v15)
    goto LABEL_27;
  v18 = (unint64_t *)&v15->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_27:
    v20 = v26;
    if (!v26)
      goto LABEL_29;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
  std::__shared_weak_count::__release_weak(v15);
  v20 = v26;
  if (v26)
LABEL_28:
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 368))(v20, a2, a3);
LABEL_29:
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BF68F9B4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void NetworkingModule::getBundleIDList_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X8>)
{
  std::string *v5;
  std::string *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count_vtbl *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  CFTypeRef v16;
  NSObject *v17;
  const void *v18;
  size_t v19;
  std::__shared_weak_count *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  int v25;
  void *v26;
  const char *v27;
  int v28;
  int v29;
  const void *v30;
  CFTypeID v31;
  CFTypeRef v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  int64_t v35;
  CFTypeRef cf;
  std::string v37;

  memset(&v37, 170, sizeof(v37));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v37 = *(std::string *)a2;
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = (std::string *)((char *)&v37 + HIBYTE(v37.__r_.__value_.__r.__words[2]));
  else
    v5 = (std::string *)(v37.__r_.__value_.__r.__words[0] + v37.__r_.__value_.__l.__size_);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v37;
  else
    v6 = (std::string *)v37.__r_.__value_.__r.__words[0];
  for (; v6 != v5; v6 = (std::string *)((char *)v6 + 1))
    v6->__r_.__value_.__s.__data_[0] = __toupper(v6->__r_.__value_.__s.__data_[0]);
  cf = 0;
  if (!TelephonyUtilIsInternalBuild())
    goto LABEL_28;
  pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
  if (qword_1EF57DAD0)
  {
LABEL_14:
    v8 = (std::__shared_weak_count_vtbl *)qword_1EF57DAD0;
    v7 = (std::__shared_weak_count *)off_1EF57DAD8;
    v33 = qword_1EF57DAD0;
    v34 = (std::__shared_weak_count *)off_1EF57DAD8;
    if (!off_1EF57DAD8)
      goto LABEL_24;
    goto LABEL_22;
  }
  v8 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v8, CFSTR("com.apple.AppleBasebandManager.NetworkPolicy"), *MEMORY[0x1E0C9B260]);
  v7 = (std::__shared_weak_count *)operator new(0x20uLL);
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1E791CCD8;
  v7->__shared_owners_ = 0;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v8;
  v9 = (std::__shared_weak_count *)off_1EF57DAD8;
  qword_1EF57DAD0 = (uint64_t)v8;
  off_1EF57DAD8 = v7;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_14;
  }
  v33 = (uint64_t)v8;
  v34 = v7;
LABEL_22:
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
LABEL_24:
  pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
  Preferences::getPreference<__CFArray const*>(v8, (const char *)&v37, &cf);
  if (v34)
  {
    v14 = &v34->__shared_owners_;
    do
      v15 = __ldaxr((unint64_t *)v14);
    while (__stlxr(v15 - 1, (unint64_t *)v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
      v16 = cf;
      *a3 = cf;
      if (!v16)
        goto LABEL_34;
      goto LABEL_29;
    }
  }
LABEL_28:
  v16 = cf;
  *a3 = cf;
  if (!v16)
    goto LABEL_34;
LABEL_29:
  CFRetain(v16);
  if (ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get
    && CFArrayGetCount((CFArrayRef)v16))
  {
    goto LABEL_61;
  }
LABEL_34:
  v17 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v33) = 0;
    _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I getBundleIDList_sync count zero", (uint8_t *)&v33, 2u);
  }
  v18 = (const void *)*MEMORY[0x1E0CFC070];
  v19 = strlen((const char *)*MEMORY[0x1E0CFC070]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = (std::__shared_weak_count *)v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = (uint64_t *)operator new(v22 + 1);
    v34 = v20;
    v35 = v23 | 0x8000000000000000;
    v33 = (uint64_t)v21;
    goto LABEL_43;
  }
  HIBYTE(v35) = v19;
  v21 = &v33;
  if (v19)
LABEL_43:
    memmove(v21, v18, (size_t)v20);
  *((_BYTE *)&v20->__vftable + (_QWORD)v21) = 0;
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = &v37;
  else
    v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
  v25 = SHIBYTE(v35);
  v26 = (void *)v33;
  if (v35 >= 0)
    v27 = (const char *)&v33;
  else
    v27 = (const char *)v33;
  v28 = strcasecmp((const char *)v24, v27);
  v29 = v28;
  if (v25 < 0)
  {
    operator delete(v26);
    if (v29)
      goto LABEL_61;
  }
  else if (v28)
  {
    goto LABEL_61;
  }
  v30 = *(const void **)(a1 + 184);
  if (v30)
  {
    v31 = CFGetTypeID(v30);
    if (v31 != CFArrayGetTypeID())
    {
      v32 = *a3;
      *a3 = 0;
      if (!v32)
        goto LABEL_61;
      goto LABEL_60;
    }
    CFRetain(v30);
  }
  v32 = *a3;
  *a3 = v30;
  if (v32)
LABEL_60:
    CFRelease(v32);
LABEL_61:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
}

const char *NetworkingModule::getName(NetworkingModule *this)
{
  return "net.mod";
}

void GlobalService::getShutdownStages(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

size_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const char *v3;
  size_t result;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 48) + 16))(a1 - 48);
  result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    a2[1] = v5;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((_BYTE *)a2 + 23) = result;
    if (!result)
    {
      *(_BYTE *)a2 = 0;
      return result;
    }
  }
  result = (size_t)memmove(a2, v3, v5);
  *((_BYTE *)a2 + v5) = 0;
  return result;
}

uint64_t ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

_QWORD *ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791CAE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791CAE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

uint64_t ___ZN20NetworkPolicyManager10uuidBridgeEN3xpc5arrayE_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;

  if (a3 && MEMORY[0x1C3B8CD78](a3) == MEMORY[0x1E0C813A0])
  {
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDBytes:", xpc_uuid_get_bytes(a3));
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v5);

  }
  return 1;
}

void ctu::Loggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF69021C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF690238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<NetworkingModule>::shared_ptr[abi:ne180100]<NetworkingModule,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E791CB48;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 128);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 120) = a2;
    *(_QWORD *)(a2 + 128) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF690354(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[17], v1, (dispatch_function_t)std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF690374(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 136), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<NetworkingModule *,std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule *)#1},std::allocator<NetworkingModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_p"
                                "trIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI16NetworkingModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<NetworkingModule> ctu::SharedSynchronizable<NetworkingModule>::make_shared_ptr<NetworkingModule>(NetworkingModule*)::{lambda(NetworkingModule*)#1}::operator() const(NetworkingModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedLoggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791CAE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<NetworkingModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E791CAE0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::init(void)::$_0>(NetworkingModule::init(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::init(void)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::init(void)::$_0>>)::{lambda(void *)#1}::__invoke(capabilities::abs *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned __int8 v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  CFMutableArrayRef Mutable;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 __p;
  void (*v24)(uint64_t);
  void *v25;
  uint64_t *v26;

  v2 = *(_QWORD **)a1;
  v3 = **(_QWORD ***)a1;
  if (!capabilities::abs::supportsNetworkPolicy(a1))
    goto LABEL_25;
  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = off_1E791CBD8;
  v4[3] = off_1E791CC28;
  v5 = v4 + 3;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&__p = MEMORY[0x1E0C809B0];
  *((_QWORD *)&__p + 1) = 0x40000000;
  v24 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v25 = &__block_descriptor_tmp_13_8;
  v26 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v8 = GetABMLogServer(void)::sLogServer;
    v7 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_5;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &__p);
    v8 = GetABMLogServer(void)::sLogServer;
    v7 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_5:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  v4[3] = off_1E791CC98;
  HIBYTE(v24) = 10;
  strcpy((char *)&__p, "net.policy");
  ctu::LoggerCommonBase::LoggerCommonBase();
  v4[4] = &unk_1E7911E48;
  v4[10] = v8;
  v4[11] = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (SHIBYTE(v24) < 0)
    operator delete((void *)__p);
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *v5 = off_1E791CC28;
  v4[12] = objc_alloc_init(MEMORY[0x1E0CD0860]);
  v15 = (std::__shared_weak_count *)v3[22];
  v3[21] = v5;
  v3[22] = v4;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v19 = (const void *)v3[23];
    v3[23] = Mutable;
    if (v19)
      CFRelease(v19);
  }
LABEL_25:
  operator delete(v2);
  v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(a1);
}

void sub_1BF6907B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;
  void *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;

  *v20 = v21;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  std::__shared_weak_count::~__shared_weak_count(v19);
  operator delete(v23);
  operator delete(v18);
  v24 = (std::__shared_weak_count *)v17[2];
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<NetworkPolicyManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E791CBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<NetworkPolicyManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E791CBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<NetworkPolicyManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void NetworkPolicyManager::~NetworkPolicyManager(NetworkPolicyManager *this)
{
  void *v2;

  *(_QWORD *)this = off_1E791CC28;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {

    *((_QWORD *)this + 9) = 0;
  }
  *(_QWORD *)this = off_1E791CC98;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  void *v2;

  *(_QWORD *)this = off_1E791CC28;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {

    *((_QWORD *)this + 9) = 0;
  }
  *(_QWORD *)this = off_1E791CC98;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 10;
  strcpy(a1, "net.policy");
}

uint64_t ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791CC98;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<NetworkPolicyManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E791CC98;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::shutdown(dispatch::group_session)::$_0>(NetworkingModule::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(dispatch_group_t **__p)
{
  dispatch_group_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *__p;
  if (*__p)
  {
    if (*v2)
    {
      dispatch_group_leave(*v2);
      if (*v2)
        dispatch_release(*v2);
    }
    operator delete(v2);
  }
  v3 = (std::__shared_weak_count *)__p[2];
  if (!v3)
    goto LABEL_10;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(__p);
  }
  else
  {
LABEL_10:
    operator delete(__p);
  }
}

void std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x1C3B8B8CC]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<ABMNetworkPolicy *,std::shared_ptr<ABMNetworkPolicy>::__shared_ptr_default_delete<ABMNetworkPolicy,ABMNetworkPolicy>,std::allocator<ABMNetworkPolicy>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF742DE1)
    return a1 + 24;
  if (((v3 & 0x80000001BF742DE1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF742DE1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF742DE1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_0>(NetworkingModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  size_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  void *v14;
  const void *v15;
  size_t v16;
  size_t v17;
  void *p_p;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  const void *v25;
  size_t v26;
  size_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void *v34;
  const void *v35;
  size_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  NSObject *v45;
  NSObject *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  const void *v58;
  void *v59[2];
  unint64_t v60;
  void *__p;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  const void *v68;
  void **__dst;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  const void *v76;
  _QWORD aBlock[6];
  std::__shared_weak_count *v78;
  const void *v79;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = (const void *)*MEMORY[0x1E0CFB860];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB860]);
  if (v5 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v70 = v6;
    v71 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v71) = v5;
  p_dst = (void **)&__dst;
  if (v5)
LABEL_8:
    memmove(p_dst, v4, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v10 = (void **)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  aBlock[4] = v3;
  aBlock[5] = v2[1];
  v11 = (std::__shared_weak_count *)v2[2];
  v78 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = _Block_copy(aBlock);
  v79 = v14;
  Service::registerCommandHandler(v3, (uint64_t)&__dst, &v79);
  if (v14)
    _Block_release(v14);
  if (SHIBYTE(v71) < 0)
    operator delete(__dst);
  v15 = (const void *)*MEMORY[0x1E0CFBBA0];
  v16 = strlen((const char *)*MEMORY[0x1E0CFBBA0]);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = v16;
  if (v16 >= 0x17)
  {
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    v62 = v17;
    v63 = v20 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_23;
  }
  HIBYTE(v63) = v16;
  p_p = &__p;
  if (v16)
LABEL_23:
    memmove(p_p, v15, v17);
  *((_BYTE *)p_p + v17) = 0;
  __dst = v10;
  v70 = 3321888768;
  v71 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_22;
  v72 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v73 = v3;
  v74 = v2[1];
  v21 = (std::__shared_weak_count *)v2[2];
  v75 = v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = _Block_copy(&__dst);
  v76 = v24;
  Service::registerCommandHandler(v3, (uint64_t)&__p, &v76);
  if (v24)
    _Block_release(v24);
  if (SHIBYTE(v63) < 0)
    operator delete(__p);
  v25 = (const void *)*MEMORY[0x1E0CFB878];
  v26 = strlen((const char *)*MEMORY[0x1E0CFB878]);
  if (v26 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v27 = v26;
  if (v26 >= 0x17)
  {
    v29 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v29 = v26 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    v52 = v27;
    v53 = v30 | 0x8000000000000000;
    v51 = v28;
    goto LABEL_38;
  }
  HIBYTE(v53) = v26;
  v28 = &v51;
  if (v26)
LABEL_38:
    memmove(v28, v25, v27);
  *((_BYTE *)v28 + v27) = 0;
  __p = v10;
  v62 = 3321888768;
  v63 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  v64 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v65 = v3;
  v66 = v2[1];
  v31 = (std::__shared_weak_count *)v2[2];
  v67 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = _Block_copy(&__p);
  v68 = v34;
  Service::registerCommandHandler(v3, (uint64_t)&v51, &v68);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v53) < 0)
    operator delete(v51);
  v35 = (const void *)*MEMORY[0x1E0CFBBA8];
  v36 = strlen((const char *)*MEMORY[0x1E0CFBBA8]);
  if (v36 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v37 = (void *)v36;
  if (v36 >= 0x17)
  {
    v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17)
      v39 = v36 | 7;
    v40 = v39 + 1;
    v38 = operator new(v39 + 1);
    v59[1] = v37;
    v60 = v40 | 0x8000000000000000;
    v59[0] = v38;
    goto LABEL_53;
  }
  HIBYTE(v60) = v36;
  v38 = v59;
  if (v36)
LABEL_53:
    memmove(v38, v35, (size_t)v37);
  *((_BYTE *)v37 + (_QWORD)v38) = 0;
  v51 = v10;
  v52 = 3321888768;
  v53 = (unint64_t)___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3;
  v54 = &__block_descriptor_56_e8_40c41_ZTSNSt3__18weak_ptrI16NetworkingModuleEE_e63_v24__0_dict__object__v__8_block_void_____int__xpc::dict______16l;
  v55 = v3;
  v56 = v2[1];
  v41 = (std::__shared_weak_count *)v2[2];
  v57 = v41;
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  v44 = _Block_copy(&v51);
  v58 = v44;
  Service::registerCommandHandler(v3, (uint64_t)v59, &v58);
  if (v44)
    _Block_release(v44);
  if (SHIBYTE(v60) < 0)
    operator delete(v59[0]);
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  if (v67)
    std::__shared_weak_count::__release_weak(v67);
  if (v75)
    std::__shared_weak_count::__release_weak(v75);
  if (v78)
    std::__shared_weak_count::__release_weak(v78);
  v45 = v2[3];
  if (v45)
  {
    dispatch_group_leave(v45);
    v46 = v2[3];
    if (v46)
      dispatch_release(v46);
  }
  v47 = (std::__shared_weak_count *)v2[2];
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  operator delete(v2);
  v48 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(p_shared_owners);
    while (__stlxr(v50 - 1, p_shared_owners));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  operator delete(a1);
}

void sub_1BF69104C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46)
{
  _QWORD *v46;
  _QWORD *v47;
  const void *v48;
  uint64_t v49;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  NSObject *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;

  if (v48)
    _Block_release(v48);
  if (a18)
  {
    std::__shared_weak_count::__release_weak(a18);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_5:
      v51 = a35;
      if (!a35)
      {
LABEL_10:
        if (a46)
          std::__shared_weak_count::__release_weak(a46);
        v52 = *(std::__shared_weak_count **)(v49 - 120);
        if (v52)
          std::__shared_weak_count::__release_weak(v52);
        v53 = v47[3];
        if (v53)
        {
          dispatch_group_leave(v53);
          v54 = v47[3];
          if (v54)
            dispatch_release(v54);
        }
        v55 = (std::__shared_weak_count *)v47[2];
        if (v55)
          std::__shared_weak_count::__release_weak(v55);
        operator delete(v47);
        v56 = (std::__shared_weak_count *)v46[2];
        if (v56)
        {
          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldaxr(p_shared_owners);
          while (__stlxr(v58 - 1, p_shared_owners));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        operator delete(v46);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v51);
      goto LABEL_10;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(__p);
  v51 = a35;
  if (!a35)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a2;
      if (v13)
      {
        xpc_retain(v13);
        v14 = *a3;
        if (*a3)
          goto LABEL_8;
      }
      else
      {
        v13 = xpc_null_create();
        v14 = *a3;
        if (*a3)
        {
LABEL_8:
          v15 = _Block_copy(v14);
          v16 = (std::__shared_weak_count *)v7[16];
          if (!v16)
LABEL_25:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_12;
        }
      }
      v15 = 0;
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
        goto LABEL_25;
LABEL_12:
      v17 = v7[15];
      v18 = std::__shared_weak_count::lock(v16);
      if (!v18)
        goto LABEL_25;
      v19 = v18;
      v20 = operator new(0x28uLL);
      *v20 = v7;
      v20[1] = v10;
      v20[2] = v9;
      v20[3] = v13;
      v21 = xpc_null_create();
      v20[4] = v15;
      v22 = v7[17];
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = operator new(0x18uLL);
      *v25 = v20;
      v25[1] = v17;
      v25[2] = v19;
      dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      xpc_release(v21);
      goto LABEL_20;
    }
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_22(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a2;
      if (v13)
      {
        xpc_retain(v13);
        v14 = *a3;
        if (*a3)
          goto LABEL_8;
      }
      else
      {
        v13 = xpc_null_create();
        v14 = *a3;
        if (*a3)
        {
LABEL_8:
          v15 = _Block_copy(v14);
          v16 = (std::__shared_weak_count *)v7[16];
          if (!v16)
LABEL_25:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_12;
        }
      }
      v15 = 0;
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
        goto LABEL_25;
LABEL_12:
      v17 = v7[15];
      v18 = std::__shared_weak_count::lock(v16);
      if (!v18)
        goto LABEL_25;
      v19 = v18;
      v20 = operator new(0x28uLL);
      *v20 = v7;
      v20[1] = v10;
      v20[2] = v9;
      v20[3] = v13;
      v21 = xpc_null_create();
      v20[4] = v15;
      v22 = v7[17];
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = operator new(0x18uLL);
      *v25 = v20;
      v25[1] = v17;
      v25[2] = v19;
      dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      xpc_release(v21);
      goto LABEL_20;
    }
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *a2;
      if (v13)
      {
        xpc_retain(v13);
        v14 = *a3;
        if (*a3)
          goto LABEL_8;
      }
      else
      {
        v13 = xpc_null_create();
        v14 = *a3;
        if (*a3)
        {
LABEL_8:
          v15 = _Block_copy(v14);
          v16 = (std::__shared_weak_count *)v7[16];
          if (!v16)
LABEL_25:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_12;
        }
      }
      v15 = 0;
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
        goto LABEL_25;
LABEL_12:
      v17 = v7[15];
      v18 = std::__shared_weak_count::lock(v16);
      if (!v18)
        goto LABEL_25;
      v19 = v18;
      v20 = operator new(0x28uLL);
      *v20 = v7;
      v20[1] = v10;
      v20[2] = v9;
      v20[3] = v13;
      v21 = xpc_null_create();
      v20[4] = v15;
      v22 = v7[17];
      v23 = (unint64_t *)&v19->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = operator new(0x18uLL);
      *v25 = v20;
      v25[1] = v17;
      v25[2] = v19;
      dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      xpc_release(v21);
      goto LABEL_20;
    }
  }
}

void ___ZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_3(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v7;
      v21[1] = v10;
      v21[2] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  std::string *v5;
  xpc_object_t v6;
  NSObject *v7;
  xpc_object_t v8;
  uint64_t v9;
  xpc_object_t v10;
  uint8_t *v11;
  uint8_t *v12;
  const void *v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_p;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  int v20;
  void *v21;
  std::string *v22;
  int v23;
  int v24;
  NSObject *v25;
  uint8_t *v26;
  xpc_object_t v27;
  uint64_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  std::string::size_type size;
  uint64_t (*v32)(uint64_t);
  uint64_t Count;
  const __CFArray *v34;
  NSObject *v35;
  xpc_object_t v36;
  uint64_t v37;
  xpc_object_t v38;
  NSObject *v39;
  xpc_object_t v40;
  uint64_t v41;
  xpc_object_t v42;
  const __CFAllocator *v43;
  unsigned int v44;
  const void *v45;
  int v46;
  NSObject *v47;
  xpc_object_t v48;
  uint64_t v49;
  xpc_object_t v50;
  const void *v51;
  __CFArray *Mutable;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v55;
  xpc_object_t v56;
  NSObject *v57;
  _BOOL4 v58;
  uint8_t *v59;
  std::string *p_object;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint8_t *v70;
  BOOL v71;
  unint64_t *v72;
  unint64_t v73;
  xpc_object_t v74;
  uint64_t v75;
  xpc_object_t v76;
  NSObject *v77;
  xpc_object_t v78;
  uint64_t v79;
  xpc_object_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  std::string v85;
  CFArrayRef theArray;
  std::string object;
  xpc_object_t value;
  std::string __p;
  __CFArray *v90;
  uint8_t buf[24];
  uint64_t v92;
  CFRange v93;

  v92 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v84 = v2;
  v3 = *v2;
  v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)(v2 + 3));
    v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Add network policy: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Modifying network policy not supported in this build variant", (uint8_t *)&__p, 2u);
    }
    v8 = xpc_null_create();
    v9 = v2[4];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v9 + 16))(v9, 3760250884, &__p);
    xpc_release(__p.__r_.__value_.__l.__data_);
    xpc_release(v10);
    goto LABEL_134;
  }
  memset(buf, 170, sizeof(buf));
  v6 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBBF0]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  if (v6)
    xpc_retain(v6);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(object.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80u) == 0)
    v11 = &buf[buf[23]];
  else
    v11 = (uint8_t *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]);
  if ((buf[23] & 0x80u) == 0)
    v12 = buf;
  else
    v12 = *(uint8_t **)buf;
  for (; v12 != v11; ++v12)
    *v12 = __toupper((char)*v12);
  v13 = (const void *)*MEMORY[0x1E0CFC070];
  v14 = strlen((const char *)*MEMORY[0x1E0CFC070]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_p = (std::string *)operator new(v17 + 1);
    __p.__r_.__value_.__l.__size_ = v15;
    __p.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_31;
  }
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = v14;
  p_p = &__p;
  if (v14)
LABEL_31:
    memmove(p_p, v13, v15);
  p_p->__r_.__value_.__s.__data_[v15] = 0;
  if ((buf[23] & 0x80u) == 0)
    v19 = buf;
  else
    v19 = *(uint8_t **)buf;
  v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v21 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  v23 = strcasecmp((const char *)v19, (const char *)v22);
  v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24)
      goto LABEL_40;
LABEL_46:
    memset(&object, 170, sizeof(object));
    v30 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBA28]);
    value = v30;
    if (v30)
      xpc_retain(v30);
    else
      value = xpc_null_create();
    memset(&__p, 0, sizeof(__p));
    xpc::dyn_cast_or_default();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    xpc_release(value);
    size = HIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = object.__r_.__value_.__l.__size_;
    if (!size)
    {
      v35 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF566000, v35, OS_LOG_TYPE_DEFAULT, "#I Empty network policy bundle-id", (uint8_t *)&__p, 2u);
      }
      v36 = xpc_null_create();
      v37 = v2[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      v38 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v37 + 16))(v37, 3760250882, &__p);
      xpc_release(__p.__r_.__value_.__l.__data_);
      xpc_release(v38);
LABEL_131:
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(object.__r_.__value_.__l.__data_);
        if (((char)buf[23] & 0x80000000) == 0)
          goto LABEL_134;
        goto LABEL_133;
      }
      goto LABEL_132;
    }
    theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
    NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&theArray);
    v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    if (!theArray)
      v32 = 0;
    if (!v32)
    {
      v39 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF566000, v39, OS_LOG_TYPE_DEFAULT, "#I BUG: We should never receive a null reference for bundle-id list", (uint8_t *)&__p, 2u);
      }
      v40 = xpc_null_create();
      v41 = v2[4];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
      v42 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, std::string *))(v41 + 16))(v41, 3760250880, &__p);
      xpc_release(__p.__r_.__value_.__l.__data_);
      xpc_release(v42);
      goto LABEL_129;
    }
    Count = CFArrayGetCount(theArray);
    if (Count)
    {
      v34 = theArray;
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v85, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
      else
        v85 = object;
      v44 = CFArrayGetCount(v34);
      v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      __p.__r_.__value_.__r.__words[0] = 0;
      ctu::cf::convert_copy();
      v45 = (const void *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0])
      {
        v93.length = v44;
        v93.location = 0;
        v46 = CFArrayContainsValue(v34, v93, __p.__r_.__value_.__l.__data_);
        CFRelease(v45);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v85.__r_.__value_.__l.__data_);
        if (v46)
        {
          v47 = *(NSObject **)(v3 + 88);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_1BF566000, v47, OS_LOG_TYPE_DEFAULT, "#I Policy for bundle-id already exists", (uint8_t *)&__p, 2u);
          }
          v48 = xpc_null_create();
          v49 = v2[4];
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
          v50 = xpc_null_create();
          (*(void (**)(uint64_t, _QWORD, std::string *))(v49 + 16))(v49, 0, &__p);
          xpc_release(__p.__r_.__value_.__l.__data_);
          xpc_release(v50);
LABEL_129:
          if (theArray)
            CFRelease(theArray);
          goto LABEL_131;
        }
      }
      else if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    if (ctu::cf::convert_copy())
      v51 = (const void *)__p.__r_.__value_.__r.__words[0];
    else
      v51 = 0;
    Mutable = CFArrayCreateMutable(v43, 0, MEMORY[0x1E0C9B378]);
    if (Count)
    {
      for (i = 0; i != Count; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        v55 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          CFArrayAppendValue(Mutable, v55);
          CFRelease(v55);
        }
      }
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
    else
      __p = object;
    value = 0;
    ctu::cf::convert_copy();
    v56 = value;
    if (value)
    {
      CFArrayAppendValue(Mutable, value);
      CFRelease(v56);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v57 = *(NSObject **)(v3 + 88);
    v58 = os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
    if (v56)
    {
      if (v58)
      {
        v59 = buf;
        if ((buf[23] & 0x80u) != 0)
          v59 = *(uint8_t **)buf;
        p_object = &object;
        if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_object = (std::string *)object.__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_object;
        HIWORD(__p.__r_.__value_.__r.__words[2]) = 2112;
        v90 = Mutable;
        _os_log_impl(&dword_1BF566000, v57, OS_LOG_TYPE_DEFAULT, "#I Add policy for action=%s bundleid=%s array=%@", (uint8_t *)&__p, 0x20u);
      }
      pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
      v61 = qword_1EF57DAD0;
      if (!qword_1EF57DAD0)
      {
        v62 = operator new(0x18uLL);
        MEMORY[0x1C3B8B8C0](v62, CFSTR("com.apple.AppleBasebandManager.NetworkPolicy"), *MEMORY[0x1E0C9B260]);
        v63 = operator new(0x20uLL);
        *v63 = off_1E791CCD8;
        v63[1] = 0;
        v63[2] = 0;
        v63[3] = v62;
        v64 = (std::__shared_weak_count *)off_1EF57DAD8;
        qword_1EF57DAD0 = (uint64_t)v62;
        off_1EF57DAD8 = v63;
        if (v64)
        {
          p_shared_owners = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(p_shared_owners);
          while (__stlxr(v66 - 1, p_shared_owners));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v61 = qword_1EF57DAD0;
      }
      v67 = (std::__shared_weak_count *)off_1EF57DAD8;
      if (off_1EF57DAD8)
      {
        v68 = (unint64_t *)((char *)off_1EF57DAD8 + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
      if ((buf[23] & 0x80u) == 0)
        v70 = buf;
      else
        v70 = *(uint8_t **)buf;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, (const char *)v70);
      v71 = ctu::cf::plist_adapter::set<__CFArray *>(v61, Mutable, (const __CFString *)__p.__r_.__value_.__l.__data_, 1);
      MEMORY[0x1C3B8B878](&__p);
      if (v67)
      {
        v72 = (unint64_t *)&v67->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      if (v71)
      {
        v74 = xpc_null_create();
        v75 = v2[4];
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
        v76 = xpc_null_create();
        (*(void (**)(uint64_t, _QWORD, std::string *))(v75 + 16))(v75, 0, &__p);
        xpc_release(__p.__r_.__value_.__l.__data_);
        xpc_release(v76);
LABEL_125:
        if (Mutable)
          CFRelease(Mutable);
        if (v51)
          CFRelease(v51);
        goto LABEL_129;
      }
      v77 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1BF566000, v77, OS_LOG_TYPE_DEFAULT, "#I Policy addition failed with preferences update error", (uint8_t *)&__p, 2u);
      }
    }
    else if (v58)
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF566000, v57, OS_LOG_TYPE_DEFAULT, "#I Policy addition failed with some error", (uint8_t *)&__p, 2u);
    }
    v78 = xpc_null_create();
    v79 = v2[4];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
    v80 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, std::string *))(v79 + 16))(v79, 3760250880, &__p);
    xpc_release(__p.__r_.__value_.__l.__data_);
    xpc_release(v80);
    goto LABEL_125;
  }
  if (!v23)
    goto LABEL_46;
LABEL_40:
  v25 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = buf;
    if ((buf[23] & 0x80u) != 0)
      v26 = *(uint8_t **)buf;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_1BF566000, v25, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)&__p, 0xCu);
  }
  v27 = xpc_null_create();
  v28 = v2[4];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  v29 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, std::string *))(v28 + 16))(v28, 3760250882, &__p);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_release(v29);
LABEL_132:
  if ((char)buf[23] < 0)
LABEL_133:
    operator delete(*(void **)buf);
LABEL_134:
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v84);
  v81 = (std::__shared_weak_count *)a1[2];
  if (v81)
  {
    v82 = (unint64_t *)&v81->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  operator delete(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  void **v5;
  xpc_object_t value;
  NSObject *v7;
  xpc_object_t v8;
  uint64_t v9;
  xpc_object_t v10;
  uint8_t *v11;
  uint8_t *v12;
  const void *v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  int v20;
  void *v21;
  void **v22;
  int v23;
  int v24;
  NSObject *v25;
  uint8_t *v26;
  xpc_object_t v27;
  uint64_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  std::string::size_type size;
  uint64_t (*v32)(uint64_t);
  uint64_t Count;
  const __CFArray *v34;
  NSObject *v35;
  xpc_object_t v36;
  uint64_t v37;
  xpc_object_t v38;
  NSObject *v39;
  xpc_object_t v40;
  uint64_t v41;
  xpc_object_t v42;
  unsigned int v43;
  const __CFAllocator *v44;
  const void *v45;
  int v46;
  int v47;
  void *v48;
  __CFArray *Mutable;
  CFIndex v50;
  const void *ValueAtIndex;
  const void *v52;
  CFTypeID v53;
  std::string::size_type v54;
  xpc_object_t v55;
  int v56;
  xpc_object_t *v57;
  uint64_t v58;
  std::string *p_object;
  int v60;
  int v61;
  int v62;
  int v63;
  BOOL v65;
  BOOL v66;
  NSObject *v67;
  uint8_t *v68;
  std::string *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count_vtbl *v71;
  NSObject *v72;
  xpc_object_t v73;
  uint64_t v74;
  xpc_object_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  uint8_t *v84;
  BOOL v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  xpc_object_t v88;
  uint64_t v89;
  xpc_object_t v90;
  void (*v91)(uint64_t, _QWORD, void **);
  uint64_t v92;
  const void *v93;
  NSObject *v94;
  xpc_object_t v95;
  uint64_t v96;
  xpc_object_t v97;
  void (*v98)(uint64_t, uint64_t, void **);
  uint64_t v99;
  const void *v100;
  uint64_t *v101;
  xpc_object_t v102[2];
  void *v103;
  std::string v104;
  CFArrayRef theArray;
  std::string object;
  void *__p[4];
  uint8_t buf[32];
  uint64_t v109;
  CFRange v110;

  v109 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v101 = v2;
  v3 = *v2;
  v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)(v2 + 3));
    v5 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Remove network policy: %s", buf, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
  }
  if ((TelephonyUtilIsInternalBuild() & 1) == 0)
  {
    v7 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Modifying network policy not supported in this build variant", (uint8_t *)__p, 2u);
    }
    v8 = xpc_null_create();
    v9 = v2[4];
    __p[0] = v8;
    v10 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, void **))(v9 + 16))(v9, 3760250884, __p);
    xpc_release(__p[0]);
    xpc_release(v10);
    goto LABEL_128;
  }
  memset(buf, 170, 24);
  value = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBBF0]);
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  xpc_release(object.__r_.__value_.__l.__data_);
  if ((buf[23] & 0x80u) == 0)
    v11 = &buf[buf[23]];
  else
    v11 = (uint8_t *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]);
  if ((buf[23] & 0x80u) == 0)
    v12 = buf;
  else
    v12 = *(uint8_t **)buf;
  for (; v12 != v11; ++v12)
    *v12 = __toupper((char)*v12);
  v13 = (const void *)*MEMORY[0x1E0CFC070];
  v14 = strlen((const char *)*MEMORY[0x1E0CFC070]);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = (void *)v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = operator new(v17 + 1);
    __p[1] = v15;
    __p[2] = (void *)(v18 | 0x8000000000000000);
    __p[0] = v16;
    goto LABEL_31;
  }
  HIBYTE(__p[2]) = v14;
  v16 = __p;
  if (v14)
LABEL_31:
    memmove(v16, v13, (size_t)v15);
  *((_BYTE *)v15 + (_QWORD)v16) = 0;
  if ((buf[23] & 0x80u) == 0)
    v19 = buf;
  else
    v19 = *(uint8_t **)buf;
  v20 = SHIBYTE(__p[2]);
  v21 = __p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  v23 = strcasecmp((const char *)v19, (const char *)v22);
  v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24)
      goto LABEL_40;
LABEL_46:
    memset(&object, 170, sizeof(object));
    v30 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBA28]);
    v102[0] = v30;
    if (v30)
      xpc_retain(v30);
    else
      v102[0] = xpc_null_create();
    memset(__p, 0, 24);
    xpc::dyn_cast_or_default();
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    xpc_release(v102[0]);
    size = HIBYTE(object.__r_.__value_.__r.__words[2]);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = object.__r_.__value_.__l.__size_;
    if (size)
    {
      theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
      NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&theArray);
      v32 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
      if (!theArray)
        v32 = 0;
      if (v32)
      {
        Count = CFArrayGetCount(theArray);
        if (Count)
        {
          v34 = theArray;
          if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v104, object.__r_.__value_.__l.__data_, object.__r_.__value_.__l.__size_);
          else
            v104 = object;
          v43 = CFArrayGetCount(v34);
          v44 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          __p[0] = 0;
          ctu::cf::convert_copy();
          v45 = __p[0];
          if (__p[0])
          {
            v110.length = v43;
            v110.location = 0;
            v46 = CFArrayContainsValue(v34, v110, __p[0]);
            CFRelease(v45);
            if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v104.__r_.__value_.__l.__data_);
            if (v46)
            {
              __p[0] = 0;
              v47 = ctu::cf::convert_copy();
              v48 = __p[0];
              if (!v47)
                v48 = 0;
              v100 = v48;
              Mutable = CFArrayCreateMutable(v44, 0, MEMORY[0x1E0C9B378]);
              v50 = 0;
              while (1)
              {
                ValueAtIndex = CFArrayGetValueAtIndex(theArray, v50);
                v52 = ValueAtIndex;
                if (ValueAtIndex)
                {
                  v53 = CFGetTypeID(ValueAtIndex);
                  if (v53 == CFStringGetTypeID())
                    CFRetain(v52);
                  else
                    v52 = 0;
                }
                memset(__p, 0, 24);
                ctu::cf::assign();
                v103 = __p[2];
                *(_OWORD *)v102 = *(_OWORD *)__p;
                if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v54 = HIBYTE(object.__r_.__value_.__r.__words[2]);
                else
                  v54 = object.__r_.__value_.__l.__size_;
                v55 = (xpc_object_t)HIBYTE(v103);
                v56 = SHIBYTE(v103);
                if (SHIBYTE(v103) < 0)
                  v55 = v102[1];
                if ((xpc_object_t)v54 != v55)
                {
                  v66 = 0;
                  if ((SHIBYTE(v103) & 0x80000000) == 0)
                    goto LABEL_103;
                  goto LABEL_106;
                }
                v57 = SHIBYTE(v103) >= 0 ? v102 : (xpc_object_t *)v102[0];
                if ((*((_BYTE *)&object.__r_.__value_.__s + 23) & 0x80) != 0)
                  break;
                if (*((_BYTE *)&object.__r_.__value_.__s + 23))
                {
                  v58 = HIBYTE(object.__r_.__value_.__r.__words[2]) - 1;
                  p_object = &object;
                  do
                  {
                    v61 = p_object->__r_.__value_.__s.__data_[0];
                    p_object = (std::string *)((char *)p_object + 1);
                    v60 = v61;
                    v63 = *(unsigned __int8 *)v57;
                    v57 = (xpc_object_t *)((char *)v57 + 1);
                    v62 = v63;
                    v65 = v58-- != 0;
                    v66 = v60 == v62;
                  }
                  while (v60 == v62 && v65);
LABEL_102:
                  if ((v56 & 0x80000000) == 0)
                    goto LABEL_103;
                  goto LABEL_106;
                }
                v66 = 1;
                if ((SHIBYTE(v103) & 0x80000000) == 0)
                {
LABEL_103:
                  if (!v66)
                    goto LABEL_107;
                  goto LABEL_74;
                }
LABEL_106:
                operator delete(v102[0]);
                if (!v66)
                {
LABEL_107:
                  if (!v52)
                    goto LABEL_76;
                  CFRetain(v52);
                  CFArrayAppendValue(Mutable, v52);
                  CFRelease(v52);
LABEL_75:
                  CFRelease(v52);
                  goto LABEL_76;
                }
LABEL_74:
                if (v52)
                  goto LABEL_75;
LABEL_76:
                if (++v50 == Count)
                {
                  v67 = *(NSObject **)(v3 + 88);
                  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                  {
                    v68 = buf;
                    if ((buf[23] & 0x80u) != 0)
                      v68 = *(uint8_t **)buf;
                    v69 = &object;
                    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v69 = (std::string *)object.__r_.__value_.__r.__words[0];
                    LODWORD(__p[0]) = 136315650;
                    *(void **)((char *)__p + 4) = v68;
                    WORD2(__p[1]) = 2080;
                    *(void **)((char *)&__p[1] + 6) = v69;
                    HIWORD(__p[2]) = 2112;
                    __p[3] = Mutable;
                    _os_log_impl(&dword_1BF566000, v67, OS_LOG_TYPE_DEFAULT, "#I Remove policy for action=%s bundleid=%s array=%@", (uint8_t *)__p, 0x20u);
                  }
                  pthread_mutex_lock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
                  if (qword_1EF57DAD0)
                  {
LABEL_116:
                    v71 = (std::__shared_weak_count_vtbl *)qword_1EF57DAD0;
                    v70 = (std::__shared_weak_count *)off_1EF57DAD8;
                    if (!off_1EF57DAD8)
                    {
LABEL_143:
                      pthread_mutex_unlock(&ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance);
                      if ((buf[23] & 0x80u) == 0)
                        v84 = buf;
                      else
                        v84 = *(uint8_t **)buf;
                      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)__p, (const char *)v84);
                      v85 = ctu::cf::plist_adapter::set<__CFArray *>((uint64_t)v71, Mutable, (const __CFString *)__p[0], 1);
                      MEMORY[0x1C3B8B878](__p);
                      if (v70)
                      {
                        p_shared_owners = (unint64_t *)&v70->__shared_owners_;
                        do
                          v87 = __ldaxr(p_shared_owners);
                        while (__stlxr(v87 - 1, p_shared_owners));
                        if (!v87)
                        {
                          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                          std::__shared_weak_count::__release_weak(v70);
                        }
                      }
                      if (v85)
                      {
                        v88 = xpc_null_create();
                        v89 = v2[4];
                        __p[0] = v88;
                        v90 = xpc_null_create();
                        v91 = *(void (**)(uint64_t, _QWORD, void **))(v89 + 16);
                        v92 = v89;
                        v93 = v100;
                        v91(v92, 0, __p);
                        xpc_release(__p[0]);
                        xpc_release(v90);
                      }
                      else
                      {
                        v94 = *(NSObject **)(v3 + 88);
                        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__p[0]) = 0;
                          _os_log_impl(&dword_1BF566000, v94, OS_LOG_TYPE_DEFAULT, "#I Policy removal failed with preferences update error", (uint8_t *)__p, 2u);
                        }
                        v95 = xpc_null_create();
                        v96 = v2[4];
                        __p[0] = v95;
                        v97 = xpc_null_create();
                        v98 = *(void (**)(uint64_t, uint64_t, void **))(v96 + 16);
                        v99 = v96;
                        v93 = v100;
                        v98(v99, 3760250880, __p);
                        xpc_release(__p[0]);
                        xpc_release(v97);
                      }
                      if (Mutable)
                        CFRelease(Mutable);
                      if (v93)
                        CFRelease(v93);
                      goto LABEL_123;
                    }
                  }
                  else
                  {
                    v71 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
                    MEMORY[0x1C3B8B8C0](v71, CFSTR("com.apple.AppleBasebandManager.NetworkPolicy"), *MEMORY[0x1E0C9B260]);
                    v70 = (std::__shared_weak_count *)operator new(0x20uLL);
                    v70->__vftable = (std::__shared_weak_count_vtbl *)off_1E791CCD8;
                    v70->__shared_owners_ = 0;
                    v70->__shared_weak_owners_ = 0;
                    v70[1].__vftable = v71;
                    v79 = (std::__shared_weak_count *)off_1EF57DAD8;
                    qword_1EF57DAD0 = (uint64_t)v71;
                    off_1EF57DAD8 = v70;
                    if (v79)
                    {
                      v80 = (unint64_t *)&v79->__shared_owners_;
                      do
                        v81 = __ldaxr(v80);
                      while (__stlxr(v81 - 1, v80));
                      if (!v81)
                      {
                        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                        std::__shared_weak_count::__release_weak(v79);
                      }
                      goto LABEL_116;
                    }
                  }
                  v82 = (unint64_t *)&v70->__shared_owners_;
                  do
                    v83 = __ldxr(v82);
                  while (__stxr(v83 + 1, v82));
                  goto LABEL_143;
                }
              }
              v66 = memcmp(object.__r_.__value_.__l.__data_, v57, object.__r_.__value_.__l.__size_) == 0;
              goto LABEL_102;
            }
          }
          else if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v104.__r_.__value_.__l.__data_);
          }
        }
        v72 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1BF566000, v72, OS_LOG_TYPE_DEFAULT, "#I Policy for bundle-id doesn't exist", (uint8_t *)__p, 2u);
        }
        v73 = xpc_null_create();
        v74 = v2[4];
        __p[0] = v73;
        v75 = xpc_null_create();
        (*(void (**)(uint64_t, _QWORD, void **))(v74 + 16))(v74, 0, __p);
        xpc_release(__p[0]);
        xpc_release(v75);
      }
      else
      {
        v39 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl(&dword_1BF566000, v39, OS_LOG_TYPE_DEFAULT, "#I BUG: We should never receive a null reference for bundle-id list", (uint8_t *)__p, 2u);
        }
        v40 = xpc_null_create();
        v41 = v2[4];
        __p[0] = v40;
        v42 = xpc_null_create();
        (*(void (**)(uint64_t, uint64_t, void **))(v41 + 16))(v41, 3760250880, __p);
        xpc_release(__p[0]);
        xpc_release(v42);
      }
LABEL_123:
      if (theArray)
        CFRelease(theArray);
    }
    else
    {
      v35 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_1BF566000, v35, OS_LOG_TYPE_DEFAULT, "#I Empty network policy bundle-id", (uint8_t *)__p, 2u);
      }
      v36 = xpc_null_create();
      v37 = v2[4];
      __p[0] = v36;
      v38 = xpc_null_create();
      (*(void (**)(uint64_t, uint64_t, void **))(v37 + 16))(v37, 3760250882, __p);
      xpc_release(__p[0]);
      xpc_release(v38);
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(object.__r_.__value_.__l.__data_);
      if (((char)buf[23] & 0x80000000) == 0)
        goto LABEL_128;
      goto LABEL_127;
    }
    goto LABEL_126;
  }
  if (!v23)
    goto LABEL_46;
LABEL_40:
  v25 = *(NSObject **)(v3 + 88);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v26 = buf;
    if ((buf[23] & 0x80u) != 0)
      v26 = *(uint8_t **)buf;
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v26;
    _os_log_impl(&dword_1BF566000, v25, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)__p, 0xCu);
  }
  v27 = xpc_null_create();
  v28 = v2[4];
  __p[0] = v27;
  v29 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v28 + 16))(v28, 3760250882, __p);
  xpc_release(__p[0]);
  xpc_release(v29);
LABEL_126:
  if ((char)buf[23] < 0)
LABEL_127:
    operator delete(*(void **)buf);
LABEL_128:
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb0_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v101);
  v76 = (std::__shared_weak_count *)a1[2];
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  operator delete(a1);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb0_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb1_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  __int128 *v5;
  xpc_object_t v6;
  uint8_t *v7;
  uint8_t *v8;
  const void *v9;
  size_t v10;
  size_t v11;
  __int128 *p_p;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  int v16;
  void *v17;
  const char *v18;
  int v19;
  int v20;
  NSObject *v21;
  uint8_t *v22;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  uint64_t (*v26)(uint64_t);
  xpc_object_t v27;
  xpc_object_t v28;
  NSObject *v29;
  uint8_t *v30;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const void *v35;
  uint8_t *v36;
  xpc_object_t v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t *v41;
  unsigned int v42;
  xpc_object_t value;
  xpc_object_t object;
  uint8_t buf[32];
  __int128 __p;
  int64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v41 = v2;
  v3 = *v2;
  v4 = *(NSObject **)(*v2 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)(v2 + 3));
    v5 = v47 >= 0 ? &__p : (__int128 *)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Get network policy: %s", buf, 0xCu);
    if (SHIBYTE(v47) < 0)
      operator delete((void *)__p);
  }
  memset(buf, 170, 24);
  v6 = xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFBBF0]);
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  __p = 0uLL;
  v47 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v47) < 0)
    operator delete((void *)__p);
  xpc_release(object);
  if ((buf[23] & 0x80u) == 0)
    v7 = &buf[buf[23]];
  else
    v7 = (uint8_t *)(*(_QWORD *)buf + *(_QWORD *)&buf[8]);
  if ((buf[23] & 0x80u) == 0)
    v8 = buf;
  else
    v8 = *(uint8_t **)buf;
  for (; v8 != v7; ++v8)
    *v8 = __toupper((char)*v8);
  v9 = (const void *)*MEMORY[0x1E0CFC070];
  v10 = strlen((const char *)*MEMORY[0x1E0CFC070]);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_p = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&__p + 1) = v11;
    v47 = v14 | 0x8000000000000000;
    *(_QWORD *)&__p = p_p;
    goto LABEL_27;
  }
  HIBYTE(v47) = v10;
  p_p = &__p;
  if (v10)
LABEL_27:
    memmove(p_p, v9, v11);
  *((_BYTE *)p_p + v11) = 0;
  if ((buf[23] & 0x80u) == 0)
    v15 = buf;
  else
    v15 = *(uint8_t **)buf;
  v16 = SHIBYTE(v47);
  v17 = (void *)__p;
  if (v47 >= 0)
    v18 = (const char *)&__p;
  else
    v18 = (const char *)__p;
  v19 = strcasecmp((const char *)v15, v18);
  v20 = v19;
  if (v16 < 0)
  {
    operator delete(v17);
    if (v20)
      goto LABEL_36;
  }
  else if (v19)
  {
LABEL_36:
    v21 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = buf;
      if ((buf[23] & 0x80u) != 0)
        v22 = *(uint8_t **)buf;
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v22;
      _os_log_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEFAULT, "#I Invalid network policy action: %s", (uint8_t *)&__p, 0xCu);
    }
    v23 = xpc_null_create();
    v24 = v2[4];
    *(_QWORD *)&__p = v23;
    v25 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, __int128 *))(v24 + 16))(v24, 3760250882, &__p);
    xpc_release((xpc_object_t)__p);
    xpc_release(v25);
    goto LABEL_65;
  }
  object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  NetworkingModule::getBundleIDList_sync(v3, (uint64_t)buf, (CFTypeRef *)&object);
  v26 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  if (!object)
    v26 = 0;
  if (!v26 || !CFArrayGetCount((CFArrayRef)object))
  {
    v29 = *(NSObject **)(v3 + 88);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v30 = buf;
      if ((buf[23] & 0x80u) != 0)
        v30 = *(uint8_t **)buf;
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v30;
      _os_log_impl(&dword_1BF566000, v29, OS_LOG_TYPE_DEFAULT, "#I No network policy available for action: %s", (uint8_t *)&__p, 0xCu);
    }
    v31 = xpc_null_create();
    v32 = v2[4];
    *(_QWORD *)&__p = v31;
    v33 = xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, __int128 *))(v32 + 16))(v32, 0, &__p);
    xpc_release((xpc_object_t)__p);
    xpc_release(v33);
    goto LABEL_63;
  }
  *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAAALL;
  v27 = xpc_dictionary_create(0, 0, 0);
  v28 = v27;
  if (v27)
  {
    *(_QWORD *)&__p = v27;
  }
  else
  {
    v28 = xpc_null_create();
    *(_QWORD *)&__p = v28;
    if (!v28)
    {
      v34 = xpc_null_create();
      v28 = 0;
      goto LABEL_58;
    }
  }
  if (MEMORY[0x1C3B8CD78](v28) != MEMORY[0x1E0C812F8])
  {
    v34 = xpc_null_create();
LABEL_58:
    *(_QWORD *)&__p = v34;
    goto LABEL_59;
  }
  xpc_retain(v28);
LABEL_59:
  xpc_release(v28);
  ctu::cf_to_xpc((ctu *)object, v35);
  if ((buf[23] & 0x80u) == 0)
    v36 = buf;
  else
    v36 = *(uint8_t **)buf;
  xpc_dictionary_set_value((xpc_object_t)__p, (const char *)v36, value);
  v37 = value;
  value = xpc_null_create();
  xpc_release(v37);
  xpc_release(value);
  value = 0;
  v42 = 0;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 4, &v42, (void **)&__p);
  xpc_release((xpc_object_t)__p);
LABEL_63:
  if (object)
    CFRelease(object);
LABEL_65:
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  _ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb1_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev((uint64_t *)&v41);
  v38 = (std::__shared_weak_count *)a1[2];
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(a1);
}

void sub_1BF693CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t object,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *_ZNSt3__110unique_ptrIZZZN16NetworkingModule10initializeEN8dispatch13group_sessionEENK3__0clEvEUb1_EUlvE_NS_14default_deleteIS5_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2;
  const void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 32);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 24));
    *(_QWORD *)(v2 + 24) = 0;
    v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16NetworkingModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(config::hw *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  xpc_object_t value;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  uint64_t v16;
  xpc_object_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _BYTE object[24];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = 3760250880;
  if (config::hw::watch(a1))
  {
    v5 = (const char *)*MEMORY[0x1E0CFB220];
    if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFB220]))
    {
      value = xpc_dictionary_get_value((xpc_object_t)v2[3], v5);
      *(_QWORD *)object = value;
      if (value)
        xpc_retain(value);
      else
        *(_QWORD *)object = xpc_null_create();
      *(_BYTE *)(v3 + 192) = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(*(xpc_object_t *)object);
      v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (*(_BYTE *)(v3 + 192))
          v8 = "";
        else
          v8 = " not";
        *(_DWORD *)object = 136315138;
        *(_QWORD *)&object[4] = v8;
        _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Device is%s Bread paired", object, 0xCu);
      }
      if (*(_BYTE *)(v3 + 193))
        NetworkingModule::applyBreadMode_sync((NetworkingModule *)v3);
      v4 = 0;
    }
    if (*(_BYTE *)(v3 + 192))
    {
      if (*(_BYTE *)(v3 + 193))
      {
        v9 = (const char *)*MEMORY[0x1E0CFB180];
        if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFB180]))
        {
          v10 = (const char *)*MEMORY[0x1E0CFB2E0];
          if (xpc_dictionary_get_value((xpc_object_t)v2[3], (const char *)*MEMORY[0x1E0CFB2E0]))
          {
            v11 = xpc_dictionary_get_value((xpc_object_t)v2[3], v9);
            *(_QWORD *)object = v11;
            if (v11)
              xpc_retain(v11);
            else
              *(_QWORD *)object = xpc_null_create();
            v12 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(*(xpc_object_t *)object);
            v13 = xpc_dictionary_get_value((xpc_object_t)v2[3], v10);
            *(_QWORD *)object = v13;
            if (v13)
              xpc_retain(v13);
            else
              *(_QWORD *)object = xpc_null_create();
            v14 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(*(xpc_object_t *)object);
            NetworkingModule::sendVisitInfo_sync((NetworkingModule *)v3, v12, v14);
            v4 = 0;
          }
        }
      }
    }
  }
  else
  {
    v4 = 3760250884;
  }
  v15 = xpc_null_create();
  v16 = v2[4];
  *(_QWORD *)object = v15;
  v17 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, _BYTE *))(v16 + 16))(v16, v4, object);
  xpc_release(*(xpc_object_t *)object);
  xpc_release(v17);
  v18 = (const void *)v2[4];
  if (v18)
    _Block_release(v18);
  xpc_release((xpc_object_t)v2[3]);
  v2[3] = 0;
  v19 = (std::__shared_weak_count *)v2[2];
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  operator delete(v2);
  v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  operator delete(a1);
}

void sub_1BF694190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<NetworkingModule>::execute_wrapped<NetworkingModule::initialize(dispatch::group_session)::$_1>(NetworkingModule::initialize(dispatch::group_session)::$_1 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<NetworkingModule::initialize(dispatch::group_session)::$_1,dispatch_queue_s *::default_delete<NetworkingModule::initialize(dispatch::group_session)::$_1>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  NetworkingModule **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(NetworkingModule ***)a1;
  NetworkingModule::finishInitialization_sync(**(NetworkingModule ***)a1);
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF694338(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_7_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMNetworkPolicy,ABMNetworkPolicy,ctu::PthreadMutexGuardPolicy<ABMNetworkPolicy>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_8_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t awd::metrics::protobuf_ShutdownFile_CCMetricsABM_2eproto(awd::metrics *this)
{
  uint64_t result;

  if (awd::metrics::CommCenterBasebandBootTime::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterBasebandBootTime::default_instance_ + 8))(awd::metrics::CommCenterBasebandBootTime::default_instance_);
  if (awd::metrics::CrashReasonType::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CrashReasonType::default_instance_ + 8))(awd::metrics::CrashReasonType::default_instance_);
  if (awd::metrics::CommCenterBasebanCrash::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterBasebanCrash::default_instance_ + 8))(awd::metrics::CommCenterBasebanCrash::default_instance_);
  if (awd::metrics::CommCenterBasebandTrace::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterBasebandTrace::default_instance_ + 8))(awd::metrics::CommCenterBasebandTrace::default_instance_);
  if (awd::metrics::CommCenterNVMSync::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterNVMSync::default_instance_ + 8))(awd::metrics::CommCenterNVMSync::default_instance_);
  if (awd::metrics::CommCenterAccessoryInformation::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterAccessoryInformation::default_instance_ + 8))(awd::metrics::CommCenterAccessoryInformation::default_instance_);
  result = awd::metrics::MetricsCCBasebandReset::default_instance_;
  if (awd::metrics::MetricsCCBasebandReset::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)awd::metrics::MetricsCCBasebandReset::default_instance_ + 8))(awd::metrics::MetricsCCBasebandReset::default_instance_);
  return result;
}

void awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void (*v12)(void);

  if ((awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(void)::already_here & 1) == 0)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(void)::already_here = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Server/AWD/Generated/CCMetricsABM.pb.cc", a4);
    v4 = operator new(0x30uLL);
    v4[4] = 0;
    *((_DWORD *)v4 + 10) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = off_1E791CD58;
    *(_QWORD *)((char *)v4 + 21) = 0;
    awd::metrics::CommCenterBasebandBootTime::default_instance_ = (uint64_t)v4;
    v5 = operator new(0x28uLL);
    v6 = MEMORY[0x1E0DE8338];
    *v5 = off_1E791CDD0;
    v5[1] = v6;
    v5[3] = 0;
    v5[2] = v6;
    *((_DWORD *)v5 + 8) = 0;
    awd::metrics::CrashReasonType::default_instance_ = (uint64_t)v5;
    v7 = operator new(0x30uLL);
    v7[5] = 0;
    *v7 = off_1E791CE48;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    *((_DWORD *)v7 + 8) = 0;
    awd::metrics::CommCenterBasebanCrash::default_instance_ = (uint64_t)v7;
    v8 = operator new(0x28uLL);
    *v8 = off_1E791CEC0;
    v8[1] = 0;
    v8[2] = v6;
    v8[3] = v6;
    v8[4] = 0;
    awd::metrics::CommCenterBasebandTrace::default_instance_ = (uint64_t)v8;
    v9 = operator new(0x28uLL);
    v9[4] = 0;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = off_1E791CF38;
    *(_QWORD *)((char *)v9 + 22) = 0;
    awd::metrics::CommCenterNVMSync::default_instance_ = (uint64_t)v9;
    v10 = operator new(0x20uLL);
    *v10 = off_1E791CFB0;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = 0;
    awd::metrics::CommCenterAccessoryInformation::default_instance_ = (uint64_t)v10;
    v11 = operator new(0x48uLL);
    *v11 = off_1E791D028;
    v11[1] = v6;
    *((_WORD *)v11 + 20) = 0;
    v11[2] = 0;
    v11[3] = v6;
    v11[4] = v6;
    *((_DWORD *)v11 + 11) = 0;
    v11[6] = v6;
    v11[7] = 0;
    v11[8] = 0;
    awd::metrics::MetricsCCBasebandReset::default_instance_ = (uint64_t)v11;
    wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)awd::metrics::protobuf_ShutdownFile_CCMetricsABM_2eproto, v12);
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::CommCenterBasebandBootTime(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E791CD58;
  *(_QWORD *)(this + 21) = 0;
  return this;
}

{
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = off_1E791CD58;
  *(_QWORD *)(this + 21) = 0;
  return this;
}

uint64_t awd::metrics::CrashReasonType::CrashReasonType(uint64_t this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E791CDD0;
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E791CDD0;
  *(_QWORD *)(this + 8) = v1;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::CommCenterBasebanCrash(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)this = off_1E791CE48;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)this = off_1E791CE48;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterBasebandTrace::CommCenterBasebandTrace(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = off_1E791CEC0;
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = off_1E791CEC0;
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterNVMSync::CommCenterNVMSync(_QWORD *this)
{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = off_1E791CF38;
  *(_QWORD *)((char *)this + 22) = 0;
  return this;
}

{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *this = off_1E791CF38;
  *(_QWORD *)((char *)this + 22) = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterAccessoryInformation::CommCenterAccessoryInformation(_QWORD *this)
{
  *this = off_1E791CFB0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1E791CFB0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

double awd::metrics::MetricsCCBasebandReset::MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E791D028;
  *((_QWORD *)this + 1) = v1;
  *((_WORD *)this + 20) = 0;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v1;
  *((_QWORD *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return result;
}

{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E791D028;
  *((_QWORD *)this + 1) = v1;
  *((_WORD *)this + 20) = 0;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v1;
  *((_QWORD *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return result;
}

BOOL awd::metrics::CommCenterNVMSyncReason_IsValid(awd::metrics *this)
{
  return this < 6;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 21) = 0;
  return this;
}

awd::metrics::CommCenterBasebandBootTime *awd::metrics::CommCenterBasebandBootTime::CommCenterBasebandBootTime(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E791CD58;
  *(_QWORD *)((char *)this + 21) = 0;
  awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E791CD58;
  *(_QWORD *)((char *)this + 21) = 0;
  awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  return this;
}

void sub_1BF6947D0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandBootTime::MergeFrom(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 40);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 40) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 10) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 10);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*((_BYTE *)a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 10) |= 2u;
    *((_QWORD *)this + 2) = v7;
    v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v8 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 10) |= 4u;
    *((_DWORD *)this + 6) = v8;
    v4 = *((_DWORD *)a2 + 10);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v9 = *((_BYTE *)a2 + 28);
    *((_DWORD *)this + 10) |= 8u;
    *((_BYTE *)this + 28) = v9;
    if ((*((_DWORD *)a2 + 10) & 0x10) == 0)
      return;
LABEL_9:
    v5 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 10) |= 0x10u;
    *((_DWORD *)this + 8) = v5;
  }
}

void sub_1BF6948F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF694908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF69495C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandBootTime::~CommCenterBasebandBootTime(awd::metrics::CommCenterBasebandBootTime *this)
{
  *(_QWORD *)this = off_1E791CD58;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E791CD58;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E791CD58;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::default_instance(awd::metrics::CommCenterBasebandBootTime *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterBasebandBootTime::default_instance_;
  if (!awd::metrics::CommCenterBasebandBootTime::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebandBootTime::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterBasebandBootTime::New(awd::metrics::CommCenterBasebandBootTime *this)
{
  _QWORD *result;

  result = operator new(0x30uLL);
  result[4] = 0;
  *((_DWORD *)result + 10) = 0;
  result[1] = 0;
  result[2] = 0;
  *result = off_1E791CD58;
  *(_QWORD *)((char *)result + 21) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 40))
  {
    *(_DWORD *)(this + 32) = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 21) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::MergePartialFromCodedStream(awd::metrics::CommCenterBasebandBootTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unsigned int v26;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unint64_t *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 24);
  v7 = (unsigned int *)((char *)this + 32);
  while (1)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 < *((_QWORD *)a2 + 2) && (*v8 & 0x80000000) == 0)
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 10) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_36;
        goto LABEL_33;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_36;
LABEL_33:
        if (*v14 < 0)
        {
LABEL_36:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 10) |= 2u;
          if ((unint64_t)v18 >= v11)
            continue;
        }
        else
        {
          *v5 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 10) |= 2u;
          if ((unint64_t)v18 >= v11)
            continue;
        }
        if (*v18 != 24)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11)
          goto LABEL_43;
LABEL_40:
        if (*v15 < 0)
        {
LABEL_43:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 10) |= 4u;
          if ((unint64_t)v19 >= v11)
            continue;
        }
        else
        {
          *v6 = *v15;
          v19 = v15 + 1;
          *((_QWORD *)a2 + 1) = v19;
          *((_DWORD *)this + 10) |= 4u;
          if ((unint64_t)v19 >= v11)
            continue;
        }
        if (*v19 != 32)
          continue;
        v16 = v19 + 1;
        *((_QWORD *)a2 + 1) = v16;
        v26 = -1431655766;
        if ((unint64_t)v16 >= v11)
          goto LABEL_49;
LABEL_47:
        if (*v16 < 0)
        {
LABEL_49:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26);
          if (!(_DWORD)result)
            return result;
          v20 = v26;
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v20 = *v16;
          v21 = v16 + 1;
          *((_QWORD *)a2 + 1) = v21;
        }
        *((_BYTE *)this + 28) = v20 != 0;
        *((_DWORD *)this + 10) |= 8u;
        if ((unint64_t)v21 >= v11 || *v21 != 40)
          continue;
        v17 = v21 + 1;
        *((_QWORD *)a2 + 1) = v17;
        if ((unint64_t)v17 >= v11)
          goto LABEL_57;
LABEL_54:
        if (*v17 < 0)
        {
LABEL_57:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v24 = *((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 10) |= 0x10u;
          if (v24 != v23)
            continue;
        }
        else
        {
          *v7 = *v17;
          v22 = (unsigned __int8 *)(v17 + 1);
          *((_QWORD *)a2 + 1) = v22;
          *((_DWORD *)this + 10) |= 0x10u;
          if (v22 != (unsigned __int8 *)v11)
            continue;
        }
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_43;
        goto LABEL_40;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        v26 = -1431655766;
        if ((unint64_t)v16 >= v11)
          goto LABEL_49;
        goto LABEL_47;
      case 5u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v17 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 >= v11)
          goto LABEL_57;
        goto LABEL_54;
      default:
        v10 = TagFallback & 7;
LABEL_24:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 40);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 40) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::ByteSize(awd::metrics::CommCenterBasebandBootTime *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;

  LOBYTE(v2) = *((_BYTE *)this + 40);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    v2 = *((_DWORD *)this + 10);
    if ((v2 & 2) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  LODWORD(v3) = 0;
  if ((*((_BYTE *)this + 40) & 2) != 0)
  {
LABEL_8:
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 2))
                + 1;
    v2 = *((_DWORD *)this + 10);
  }
LABEL_9:
  if ((v2 & 4) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      v7 = *((_DWORD *)this + 10);
      LODWORD(v3) = v6 + 1 + v3;
      if ((v7 & 8) != 0)
        v3 = (v3 + 2);
      else
        v3 = v3;
      if ((v7 & 0x10) != 0)
        goto LABEL_25;
    }
    else
    {
      LODWORD(v3) = v3 + 2;
      if ((v2 & 8) != 0)
        v3 = (v3 + 2);
      else
        v3 = v3;
      if ((v2 & 0x10) != 0)
        goto LABEL_25;
    }
LABEL_6:
    *((_DWORD *)this + 9) = v3;
    return v3;
  }
  if ((v2 & 8) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 0x10) == 0)
    goto LABEL_6;
LABEL_25:
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v8 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
       + 1
       + v3;
  else
    v9 = (v3 + 2);
  *((_DWORD *)this + 9) = v9;
  return v9;
}

void awd::metrics::CommCenterBasebandBootTime::CopyFrom(awd::metrics::CommCenterBasebandBootTime *this, const awd::metrics::CommCenterBasebandBootTime *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebandBootTime *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterBasebandBootTime::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebandBootTime::IsInitialized(awd::metrics::CommCenterBasebandBootTime *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::Swap(uint64_t this, awd::metrics::CommCenterBasebandBootTime *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::metrics::CommCenterBasebandBootTime *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
    LOBYTE(v3) = *(_BYTE *)(this + 28);
    *(_BYTE *)(this + 28) = *((_BYTE *)a2 + 28);
    *((_BYTE *)a2 + 28) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
  }
  return this;
}

char *awd::metrics::CommCenterBasebandBootTime::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF742FE0;
  strcpy(result, "awd.metrics.CommCenterBasebandBootTime");
  return result;
}

uint64_t awd::metrics::CrashReasonType::SharedCtor(uint64_t this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 16) = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = v1;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

awd::metrics::CrashReasonType *awd::metrics::CrashReasonType::CrashReasonType(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E791CDD0;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CrashReasonType::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E791CDD0;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CrashReasonType::MergeFrom(this, a2);
  return this;
}

void sub_1BF695140(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CrashReasonType::MergeFrom(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  void **v4;
  void **v5;
  void **v6;
  char v7;
  __int128 v8;
  int v9;
  void *v10;
  size_t v11;
  int v12;
  void **v13;
  void **v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  char v19[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  if (*((_BYTE *)a2 + 32))
  {
    v4 = (void **)MEMORY[0x1E0DE8338];
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v5 = (void **)*((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      v6 = (void **)*((_QWORD *)this + 1);
      if (v6 == v4)
      {
        v6 = (void **)operator new(0x18uLL);
        v6[1] = 0;
        v6[2] = 0;
        *v6 = 0;
        *((_QWORD *)this + 1) = v6;
      }
      if (v6 != v5)
      {
        v7 = *((_BYTE *)v5 + 23);
        if ((*((char *)v6 + 23) & 0x80000000) == 0)
        {
          if ((*((_BYTE *)v5 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v6, *v5, (size_t)v5[1]);
            v9 = *((_DWORD *)a2 + 8);
            if ((v9 & 2) == 0)
            {
LABEL_21:
              if ((v9 & 4) != 0)
              {
                v13 = (void **)*((_QWORD *)a2 + 2);
                *((_DWORD *)this + 8) |= 4u;
                v14 = (void **)*((_QWORD *)this + 2);
                if (v14 == v4)
                {
                  v14 = (void **)operator new(0x18uLL);
                  v14[1] = 0;
                  v14[2] = 0;
                  *v14 = 0;
                  *((_QWORD *)this + 2) = v14;
                }
                if (v14 != v13)
                {
                  v15 = *((_BYTE *)v13 + 23);
                  if (*((char *)v14 + 23) < 0)
                  {
                    if (v15 >= 0)
                      v17 = v13;
                    else
                      v17 = *v13;
                    if (v15 >= 0)
                      v18 = *((unsigned __int8 *)v13 + 23);
                    else
                      v18 = (size_t)v13[1];
                    std::string::__assign_no_alias<false>(v14, v17, v18);
                  }
                  else if ((*((_BYTE *)v13 + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(v14, *v13, (size_t)v13[1]);
                  }
                  else
                  {
                    v16 = *(_OWORD *)v13;
                    v14[2] = v13[2];
                    *(_OWORD *)v14 = v16;
                  }
                }
              }
              return;
            }
          }
          else
          {
            v8 = *(_OWORD *)v5;
            v6[2] = v5[2];
            *(_OWORD *)v6 = v8;
            v9 = *((_DWORD *)a2 + 8);
            if ((v9 & 2) == 0)
              goto LABEL_21;
          }
LABEL_20:
          v12 = *((_DWORD *)a2 + 6);
          *((_DWORD *)this + 8) |= 2u;
          *((_DWORD *)this + 6) = v12;
          v9 = *((_DWORD *)a2 + 8);
          goto LABEL_21;
        }
        if (v7 >= 0)
          v10 = v5;
        else
          v10 = *v5;
        if (v7 >= 0)
          v11 = *((unsigned __int8 *)v5 + 23);
        else
          v11 = (size_t)v5[1];
        std::string::__assign_no_alias<false>(v6, v10, v11);
      }
    }
    v9 = *((_DWORD *)a2 + 8);
    if ((v9 & 2) == 0)
      goto LABEL_21;
    goto LABEL_20;
  }
}

void sub_1BF695330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF695344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF695398(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CrashReasonType::~CrashReasonType(awd::metrics::CrashReasonType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)this = off_1E791CDD0;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 2);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    return;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)this = off_1E791CDD0;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 2);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    return;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;

  *(_QWORD *)this = off_1E791CDD0;
  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 2);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    goto LABEL_12;
  }
  v5 = *((_QWORD *)this + 2);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
LABEL_12:
  operator delete(v7);
}

void awd::metrics::CrashReasonType::SharedDtor(awd::metrics::CrashReasonType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 == MEMORY[0x1E0DE8338] || v2 == 0)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5 != MEMORY[0x1E0DE8338] && v5 != 0)
    {
LABEL_18:
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      operator delete((void *)v5);
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 2);
    if (v5 != v3 && v5 != 0)
      goto LABEL_18;
  }
}

uint64_t awd::metrics::CrashReasonType::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t awd::metrics::CrashReasonType::default_instance(awd::metrics::CrashReasonType *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CrashReasonType::default_instance_;
  if (!awd::metrics::CrashReasonType::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CrashReasonType::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CrashReasonType::New(awd::metrics::CrashReasonType *this)
{
  _QWORD *result;
  uint64_t v2;

  result = operator new(0x28uLL);
  v2 = MEMORY[0x1E0DE8338];
  *result = off_1E791CDD0;
  result[1] = v2;
  result[2] = v2;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CrashReasonType::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(this + 32))
    goto LABEL_12;
  v1 = MEMORY[0x1E0DE8338];
  if ((*(_BYTE *)(this + 32) & 1) != 0)
  {
    v2 = *(_QWORD *)(this + 8);
    if (v2 != MEMORY[0x1E0DE8338])
    {
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        *(_DWORD *)(this + 24) = 0;
        if ((*(_BYTE *)(this + 32) & 4) == 0)
          goto LABEL_12;
        goto LABEL_7;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 24) = 0;
  if ((*(_BYTE *)(this + 32) & 4) == 0)
  {
LABEL_12:
    *(_DWORD *)(this + 32) = 0;
    return this;
  }
LABEL_7:
  v3 = *(_QWORD *)(this + 16);
  if (v3 == v1)
    goto LABEL_12;
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CrashReasonType::MergePartialFromCodedStream(awd::metrics::CrashReasonType *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  unsigned int v8;
  int v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;
  unint64_t v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  int v17;
  unint64_t v18;

  v4 = (unsigned int *)((char *)this + 24);
  v5 = MEMORY[0x1E0DE8338];
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            v6 = (char *)*((_QWORD *)a2 + 1);
            if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
            {
              TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
              *((_DWORD *)a2 + 8) = TagFallback;
              if (!(_DWORD)TagFallback)
                return 1;
            }
            else
            {
              TagFallback = *v6;
              *((_DWORD *)a2 + 8) = TagFallback;
              *((_QWORD *)a2 + 1) = v6 + 1;
              if (!(_DWORD)TagFallback)
                return 1;
            }
            v8 = TagFallback >> 3;
            if (TagFallback >> 3 != 1)
              break;
            v9 = TagFallback & 7;
            if (v9 != 2)
              goto LABEL_32;
            *((_DWORD *)this + 8) |= 1u;
            if (*((_QWORD *)this + 1) == v5)
            {
              v12 = operator new(0x18uLL);
              v12[1] = 0;
              v12[2] = 0;
              *v12 = 0;
              *((_QWORD *)this + 1) = v12;
            }
            result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
            if (!(_DWORD)result)
              return result;
            v14 = (_BYTE *)*((_QWORD *)a2 + 1);
            v13 = *((_QWORD *)a2 + 2);
            if ((unint64_t)v14 < v13 && *v14 == 16)
            {
              v15 = v14 + 1;
              *((_QWORD *)a2 + 1) = v15;
              goto LABEL_27;
            }
          }
          if (v8 == 2)
            break;
          if (v8 == 3)
          {
            v9 = TagFallback & 7;
            if (v9 == 2)
            {
              *((_DWORD *)this + 8) |= 4u;
              if (*((_QWORD *)this + 2) != v5)
                goto LABEL_13;
LABEL_12:
              v10 = operator new(0x18uLL);
              v10[1] = 0;
              v10[2] = 0;
              *v10 = 0;
              *((_QWORD *)this + 2) = v10;
              goto LABEL_13;
            }
          }
          else
          {
            v9 = TagFallback & 7;
          }
LABEL_32:
          if (v9 == 4)
            return 1;
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        }
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
LABEL_27:
        if ((unint64_t)v15 < v13 && ((char)*v15 & 0x80000000) == 0)
          break;
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!(_DWORD)result)
          return result;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        v17 = *((_DWORD *)this + 8) | 2;
        *((_DWORD *)this + 8) = v17;
        if ((unint64_t)v16 < v18)
          goto LABEL_37;
      }
      *v4 = *v15;
      v16 = v15 + 1;
      *((_QWORD *)a2 + 1) = v16;
      v17 = *((_DWORD *)this + 8) | 2;
      *((_DWORD *)this + 8) = v17;
    }
    while ((unint64_t)v16 >= v13);
LABEL_37:
    if (*v16 == 26)
    {
      *((_QWORD *)a2 + 1) = v16 + 1;
      *((_DWORD *)this + 8) = v17 | 4;
      if (*((_QWORD *)this + 2) == v5)
        goto LABEL_12;
LABEL_13:
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t awd::metrics::CrashReasonType::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::CrashReasonType::ByteSize(awd::metrics::CrashReasonType *this)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
LABEL_6:
    *((_DWORD *)this + 7) = v3;
    return v3;
  }
  if ((*((_BYTE *)this + 32) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_22;
    goto LABEL_18;
  }
  v5 = *((_QWORD *)this + 1);
  v6 = *(unsigned __int8 *)(v5 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(v5 + 23);
  else
    v7 = *(_QWORD *)(v5 + 8);
  if (v7 < 0x80)
  {
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(v5 + 8);
    v3 = (v6 + 2);
    if ((v2 & 2) == 0)
      goto LABEL_22;
LABEL_18:
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10) + 1;
      v2 = *((_DWORD *)this + 8);
    }
    else
    {
      v11 = 2;
    }
    v3 = (v11 + v3);
    goto LABEL_22;
  }
  v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v7);
  v9 = *(unsigned __int8 *)(v5 + 23);
  v2 = *((_DWORD *)this + 8);
  if (*(char *)(v5 + 23) < 0)
    v9 = *(_QWORD *)(v5 + 8);
  v3 = (v8 + 1 + v9);
  if ((v2 & 2) != 0)
    goto LABEL_18;
LABEL_22:
  if ((v2 & 4) == 0)
    goto LABEL_6;
  v12 = *((_QWORD *)this + 2);
  v13 = *(unsigned __int8 *)(v12 + 23);
  v14 = v13;
  v15 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = v15;
  if (v16 >= 0x80)
  {
    v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v16);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v15 = *(_QWORD *)(v12 + 8);
    v14 = *(_BYTE *)(v12 + 23);
  }
  else
  {
    v17 = 1;
  }
  if (v14 < 0)
    v13 = v15;
  v18 = v3 + v17 + v13;
  *((_DWORD *)this + 7) = v18 + 1;
  return (v18 + 1);
}

void awd::metrics::CrashReasonType::CopyFrom(awd::metrics::CrashReasonType *this, const awd::metrics::CrashReasonType *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CrashReasonType *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CrashReasonType::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CrashReasonType::IsInitialized(awd::metrics::CrashReasonType *this)
{
  return 1;
}

uint64_t awd::metrics::CrashReasonType::Swap(uint64_t this, awd::metrics::CrashReasonType *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::metrics::CrashReasonType *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
  }
  return this;
}

double awd::metrics::CrashReasonType::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF740C40;
  strcpy(v3, "awd.metrics.CrashReasonType");
  return *(double *)".CrashReasonType";
}

uint64_t awd::metrics::CommCenterBasebanCrash::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

uint64_t wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;

  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*(_QWORD *)a1 + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *(_DWORD *)(a1 + 12);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete[](*(void **)a1);
  return a1;
}

awd::metrics::CommCenterBasebanCrash *awd::metrics::CommCenterBasebanCrash::CommCenterBasebanCrash(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = off_1E791CE48;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = off_1E791CE48;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  return this;
}

void sub_1BF695D60(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebanCrash::MergeFrom(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  const awd::metrics::CrashReasonType *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterBasebanCrash *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    v4 = 0;
    v5 = MEMORY[0x1E0DE8338];
    do
    {
      while (1)
      {
        v9 = *(const awd::metrics::CrashReasonType **)(*((_QWORD *)a2 + 2) + 8 * v4);
        v10 = *((_DWORD *)this + 7);
        v11 = *((int *)this + 6);
        if ((int)v11 >= v10)
          break;
        v12 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v11 + 1;
        awd::metrics::CrashReasonType::MergeFrom(*(awd::metrics::CrashReasonType **)(v12 + 8 * v11), v9);
        if (++v4 >= *((int *)a2 + 6))
          goto LABEL_11;
      }
      if (v10 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterBasebanCrash *)((char *)this + 16));
        v10 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v10 + 1;
      v6 = operator new(0x28uLL);
      *v6 = off_1E791CDD0;
      v6[1] = v5;
      v6[2] = v5;
      v6[3] = 0;
      *((_DWORD *)v6 + 8) = 0;
      v7 = *((_QWORD *)this + 2);
      v8 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v8 + 1;
      *(_QWORD *)(v7 + 8 * v8) = v6;
      awd::metrics::CrashReasonType::MergeFrom((awd::metrics::CrashReasonType *)v6, v9);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  if ((*((_BYTE *)a2 + 44) & 1) != 0)
  {
    v13 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 11) |= 1u;
    *((_QWORD *)this + 1) = v13;
  }
}

void sub_1BF695F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF695F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF695F70(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;

  v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  v6 = *(void **)(v1 + 16);
  if (v6)
    operator delete[](v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebanCrash::~CommCenterBasebanCrash(awd::metrics::CommCenterBasebanCrash *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E791CE48;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E791CE48;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E791CE48;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v6);
}

uint64_t awd::metrics::CommCenterBasebanCrash::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::default_instance(awd::metrics::CommCenterBasebanCrash *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterBasebanCrash::default_instance_;
  if (!awd::metrics::CommCenterBasebanCrash::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebanCrash::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterBasebanCrash::New(awd::metrics::CommCenterBasebanCrash *this)
{
  _QWORD *result;

  result = operator new(0x30uLL);
  result[5] = 0;
  *result = off_1E791CE48;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebanCrash::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 44))
    *(_QWORD *)(this + 8) = 0;
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::MergePartialFromCodedStream(awd::metrics::CommCenterBasebanCrash *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v5;
  uint64_t v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  _BYTE *v27;
  unsigned int v28;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (awd::metrics::CommCenterBasebanCrash *)((char *)this + 16);
  v6 = MEMORY[0x1E0DE8338];
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v7;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v9 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_18;
      v14 = (char *)*((_QWORD *)a2 + 1);
      v15 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v14 >= v15 || *v14 < 0)
      {
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (!(_DWORD)result)
          return result;
        v16 = (_BYTE *)*((_QWORD *)a2 + 1);
        v18 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v16 < v18)
          goto LABEL_23;
      }
      else
      {
        *v4 = *v14;
        v16 = v14 + 1;
        *((_QWORD *)a2 + 1) = v16;
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v16 < v15)
        {
LABEL_23:
          if (*v16 == 18)
          {
            do
            {
              *((_QWORD *)a2 + 1) = v16 + 1;
              v10 = *((_DWORD *)this + 7);
              v11 = *((int *)this + 6);
              if ((int)v11 < v10)
                goto LABEL_11;
LABEL_25:
              if (v10 == *((_DWORD *)this + 8))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
                v10 = *((_DWORD *)this + 7);
              }
              *((_DWORD *)this + 7) = v10 + 1;
              v13 = operator new(0x28uLL);
              *v13 = off_1E791CDD0;
              v13[1] = v6;
              v13[2] = v6;
              v13[3] = 0;
              *((_DWORD *)v13 + 8) = 0;
              v19 = *((_QWORD *)this + 2);
              v20 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v20 + 1;
              *(_QWORD *)(v19 + 8 * v20) = v13;
LABEL_28:
              v28 = -1431655766;
              v21 = (char *)*((_QWORD *)a2 + 1);
              if ((unint64_t)v21 >= *((_QWORD *)a2 + 2) || *v21 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))return 0;
              }
              else
              {
                v28 = *v21;
                *((_QWORD *)a2 + 1) = v21 + 1;
              }
              v22 = *((_DWORD *)a2 + 14);
              v23 = *((_DWORD *)a2 + 15);
              *((_DWORD *)a2 + 14) = v22 + 1;
              if (v22 >= v23)
                return 0;
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
              if (!awd::metrics::CrashReasonType::MergePartialFromCodedStream((awd::metrics::CrashReasonType *)v13, a2)|| !*((_BYTE *)a2 + 36))
              {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              v24 = *((_DWORD *)a2 + 14);
              v25 = __OFSUB__(v24, 1);
              v26 = v24 - 1;
              if (v26 < 0 == v25)
                *((_DWORD *)a2 + 14) = v26;
              v16 = (_BYTE *)*((_QWORD *)a2 + 1);
              v27 = (_BYTE *)*((_QWORD *)a2 + 2);
            }
            while (v16 < v27 && *v16 == 18);
            if (v16 == v27 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              result = 1;
              *((_BYTE *)a2 + 36) = 1;
              return result;
            }
          }
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      v9 = TagFallback & 7;
      if (v9 == 2)
      {
        v10 = *((_DWORD *)this + 7);
        v11 = *((int *)this + 6);
        if ((int)v11 >= v10)
          goto LABEL_25;
LABEL_11:
        v12 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v11 + 1;
        v13 = *(_QWORD **)(v12 + 8 * v11);
        goto LABEL_28;
      }
    }
    else
    {
      v9 = TagFallback & 7;
    }
LABEL_18:
    if (v9 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::metrics::CommCenterBasebanCrash::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = this;
  if ((*(_BYTE *)(this + 44) & 1) != 0)
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
  if (*(int *)(v5 + 24) >= 1)
  {
    v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  return this;
}

uint64_t awd::metrics::CommCenterBasebanCrash::ByteSize(wireless_diagnostics::google::protobuf::io::CodedOutputStream **this)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;

  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this[1]);
    v5 = *((_DWORD *)this + 6);
    v3 = (v5 + v4 + 1);
    if (v5 < 1)
      goto LABEL_9;
  }
  else
  {
    v2 = *((_DWORD *)this + 6);
    v3 = v2;
    if (v2 < 1)
      goto LABEL_9;
  }
  v6 = 0;
  do
  {
    while (1)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::CrashReasonType::ByteSize(*((awd::metrics::CrashReasonType **)this[2] + v6));
      if (v7 < 0x80)
        break;
      v3 = (_DWORD)v7
         + (_DWORD)v3
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
      if (++v6 >= *((int *)this + 6))
        goto LABEL_9;
    }
    v3 = ((_DWORD)v7 + v3 + 1);
    ++v6;
  }
  while (v6 < *((int *)this + 6));
LABEL_9:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void awd::metrics::CommCenterBasebanCrash::CopyFrom(awd::metrics::CommCenterBasebanCrash *this, const awd::metrics::CommCenterBasebanCrash *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebanCrash *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterBasebanCrash::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebanCrash::IsInitialized(awd::metrics::CommCenterBasebanCrash *this)
{
  return 1;
}

awd::metrics::CommCenterBasebanCrash *awd::metrics::CommCenterBasebanCrash::Swap(awd::metrics::CommCenterBasebanCrash *this, awd::metrics::CommCenterBasebanCrash *a2)
{
  awd::metrics::CommCenterBasebanCrash *v3;
  uint64_t v4;
  int v5;
  int v6;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    this = (awd::metrics::CommCenterBasebanCrash *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v5 = *((_DWORD *)v3 + 11);
    *((_DWORD *)v3 + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v5;
    v6 = *((_DWORD *)v3 + 10);
    *((_DWORD *)v3 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v6;
  }
  return this;
}

char *awd::metrics::CommCenterBasebanCrash::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF73A760;
  strcpy(result, "awd.metrics.CommCenterBasebanCrash");
  return result;
}

_QWORD *awd::metrics::CommCenterBasebandTrace::SharedCtor(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  this[1] = 0;
  this[2] = v1;
  this[3] = v1;
  this[4] = 0;
  return this;
}

awd::metrics::CommCenterBasebandTrace *awd::metrics::CommCenterBasebandTrace::CommCenterBasebandTrace(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E791CEC0;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E791CEC0;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  return this;
}

void sub_1BF69678C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandTrace::MergeFrom(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  int v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  void *v11;
  size_t v12;
  void **v13;
  void **v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  char v19[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v19);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((_QWORD *)this + 1) = v5;
      v4 = *((_DWORD *)a2 + 9);
    }
    v6 = (void **)MEMORY[0x1E0DE8338];
    if ((v4 & 2) != 0)
    {
      v7 = (void **)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 9) |= 2u;
      v8 = (void **)*((_QWORD *)this + 2);
      if (v8 == v6)
      {
        v8 = (void **)operator new(0x18uLL);
        v8[1] = 0;
        v8[2] = 0;
        *v8 = 0;
        *((_QWORD *)this + 2) = v8;
      }
      if (v8 != v7)
      {
        v9 = *((_BYTE *)v7 + 23);
        if ((*((char *)v8 + 23) & 0x80000000) == 0)
        {
          if ((*((_BYTE *)v7 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v8, *v7, (size_t)v7[1]);
            if ((*((_BYTE *)a2 + 36) & 4) == 0)
              return;
          }
          else
          {
            v10 = *(_OWORD *)v7;
            v8[2] = v7[2];
            *(_OWORD *)v8 = v10;
            if ((*((_BYTE *)a2 + 36) & 4) == 0)
              return;
          }
          goto LABEL_22;
        }
        if (v9 >= 0)
          v11 = v7;
        else
          v11 = *v7;
        if (v9 >= 0)
          v12 = *((unsigned __int8 *)v7 + 23);
        else
          v12 = (size_t)v7[1];
        std::string::__assign_no_alias<false>(v8, v11, v12);
      }
    }
    if ((*((_BYTE *)a2 + 36) & 4) == 0)
      return;
LABEL_22:
    v13 = (void **)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    v14 = (void **)*((_QWORD *)this + 3);
    if (v14 == v6)
    {
      v14 = (void **)operator new(0x18uLL);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = 0;
      *((_QWORD *)this + 3) = v14;
    }
    if (v14 != v13)
    {
      v15 = *((_BYTE *)v13 + 23);
      if (*((char *)v14 + 23) < 0)
      {
        if (v15 >= 0)
          v17 = v13;
        else
          v17 = *v13;
        if (v15 >= 0)
          v18 = *((unsigned __int8 *)v13 + 23);
        else
          v18 = (size_t)v13[1];
        std::string::__assign_no_alias<false>(v14, v17, v18);
      }
      else if ((*((_BYTE *)v13 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v14, *v13, (size_t)v13[1]);
      }
      else
      {
        v16 = *(_OWORD *)v13;
        v14[2] = v13[2];
        *(_OWORD *)v14 = v16;
      }
    }
  }
}

void sub_1BF69697C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF696990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF6969E4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterBasebandTrace::~CommCenterBasebandTrace(awd::metrics::CommCenterBasebandTrace *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)this = off_1E791CEC0;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 3);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    return;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)this = off_1E791CEC0;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 3);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    return;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v7;

  *(_QWORD *)this = off_1E791CEC0;
  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 3);
    if (v5 != v3 && v5 != 0)
      goto LABEL_19;
LABEL_11:
    wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
    goto LABEL_12;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5 == MEMORY[0x1E0DE8338] || v5 == 0)
    goto LABEL_11;
LABEL_19:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
LABEL_12:
  operator delete(v7);
}

void awd::metrics::CommCenterBasebandTrace::SharedDtor(awd::metrics::CommCenterBasebandTrace *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 == MEMORY[0x1E0DE8338] || v2 == 0)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5 != MEMORY[0x1E0DE8338] && v5 != 0)
    {
LABEL_18:
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      operator delete((void *)v5);
    }
  }
  else
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
    v5 = *((_QWORD *)this + 3);
    if (v5 != v3 && v5 != 0)
      goto LABEL_18;
  }
}

uint64_t awd::metrics::CommCenterBasebandTrace::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::default_instance(awd::metrics::CommCenterBasebandTrace *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterBasebandTrace::default_instance_;
  if (!awd::metrics::CommCenterBasebandTrace::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterBasebandTrace::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterBasebandTrace::New(awd::metrics::CommCenterBasebandTrace *this)
{
  _QWORD *result;
  uint64_t v2;

  result = operator new(0x28uLL);
  v2 = MEMORY[0x1E0DE8338];
  *result = off_1E791CEC0;
  result[1] = 0;
  result[2] = v2;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandTrace::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_BYTE *)(this + 36);
  if (!v1)
    goto LABEL_12;
  *(_QWORD *)(this + 8) = 0;
  v2 = MEMORY[0x1E0DE8338];
  if ((v1 & 2) != 0)
  {
    v3 = *(_QWORD *)(this + 16);
    if (v3 != MEMORY[0x1E0DE8338])
    {
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        if ((*(_BYTE *)(this + 36) & 4) == 0)
          goto LABEL_12;
        goto LABEL_7;
      }
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  if ((*(_BYTE *)(this + 36) & 4) == 0)
  {
LABEL_12:
    *(_DWORD *)(this + 36) = 0;
    return this;
  }
LABEL_7:
  v4 = *(_QWORD *)(this + 24);
  if (v4 == v2)
    goto LABEL_12;
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::MergePartialFromCodedStream(awd::metrics::CommCenterBasebandTrace *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  uint64_t v5;
  char *v6;
  uint64_t TagFallback;
  unsigned int v8;
  int v9;
  uint64_t result;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  int v14;
  _QWORD *v15;
  _BYTE *v16;
  _QWORD *v17;
  unint64_t v18;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = MEMORY[0x1E0DE8338];
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        v8 = TagFallback >> 3;
        if (TagFallback >> 3 != 1)
          break;
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_32;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v18 = *((_QWORD *)a2 + 2);
          v14 = *((_DWORD *)this + 9) | 1;
          *((_DWORD *)this + 9) = v14;
          if ((unint64_t)v13 < v18)
            goto LABEL_37;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          v14 = *((_DWORD *)this + 9) | 1;
          *((_DWORD *)this + 9) = v14;
          if ((unint64_t)v13 < v11)
          {
LABEL_37:
            if (*v13 == 18)
            {
              *((_QWORD *)a2 + 1) = v13 + 1;
              *((_DWORD *)this + 9) = v14 | 2;
              if (*((_QWORD *)this + 2) != v5)
                goto LABEL_22;
LABEL_21:
              v15 = operator new(0x18uLL);
              v15[1] = 0;
              v15[2] = 0;
              *v15 = 0;
              *((_QWORD *)this + 2) = v15;
              goto LABEL_22;
            }
          }
        }
      }
      if (v8 == 2)
        break;
      if (v8 == 3)
      {
        v9 = TagFallback & 7;
        if (v9 == 2)
        {
          *((_DWORD *)this + 9) |= 4u;
          if (*((_QWORD *)this + 3) != v5)
            goto LABEL_12;
          goto LABEL_26;
        }
      }
      else
      {
        v9 = TagFallback & 7;
      }
LABEL_32:
      if (v9 == 4)
        return 1;
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
    }
    v9 = TagFallback & 7;
    if (v9 != 2)
      goto LABEL_32;
    *((_DWORD *)this + 9) |= 2u;
    if (*((_QWORD *)this + 2) == v5)
      goto LABEL_21;
LABEL_22:
    result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
    if (!(_DWORD)result)
      return result;
    v16 = (_BYTE *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v16 < *((_QWORD *)a2 + 2) && *v16 == 26)
    {
      *((_QWORD *)a2 + 1) = v16 + 1;
      *((_DWORD *)this + 9) |= 4u;
      if (*((_QWORD *)this + 3) != v5)
      {
LABEL_12:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        goto LABEL_27;
      }
LABEL_26:
      v17 = operator new(0x18uLL);
      v17[1] = 0;
      v17[2] = 0;
      *v17 = 0;
      *((_QWORD *)this + 3) = v17;
      result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
      if (!(_DWORD)result)
        return result;
LABEL_27:
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        break;
      }
    }
  }
  *((_DWORD *)a2 + 8) = 0;
  result = 1;
  *((_BYTE *)a2 + 36) = 1;
  return result;
}

uint64_t awd::metrics::CommCenterBasebandTrace::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v4;
  int v5;

  v4 = this;
  v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v5 = *(_DWORD *)(v4 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  if ((*(_DWORD *)(v4 + 36) & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::CommCenterBasebandTrace::ByteSize(awd::metrics::CommCenterBasebandTrace *this)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;

  LOBYTE(v2) = *((_BYTE *)this + 36);
  if (!(_BYTE)v2)
  {
    v3 = 0;
LABEL_6:
    *((_DWORD *)this + 8) = v3;
    return v3;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 9);
    if ((v2 & 2) == 0)
      goto LABEL_17;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_17;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v2 = *((_DWORD *)this + 9);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v3 = (v3 + v10 + v6 + 1);
LABEL_17:
  if ((v2 & 4) == 0)
    goto LABEL_6;
  v11 = *((_QWORD *)this + 3);
  v12 = *(unsigned __int8 *)(v11 + 23);
  v13 = v12;
  v14 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = v14;
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v15);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v14 = *(_QWORD *)(v11 + 8);
    v13 = *(_BYTE *)(v11 + 23);
  }
  else
  {
    v16 = 1;
  }
  if (v13 < 0)
    v12 = v14;
  v17 = v3 + v16 + v12;
  *((_DWORD *)this + 8) = v17 + 1;
  return (v17 + 1);
}

void awd::metrics::CommCenterBasebandTrace::CopyFrom(awd::metrics::CommCenterBasebandTrace *this, const awd::metrics::CommCenterBasebandTrace *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterBasebandTrace *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterBasebandTrace::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterBasebandTrace::IsInitialized(awd::metrics::CommCenterBasebandTrace *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterBasebandTrace::Swap(uint64_t this, awd::metrics::CommCenterBasebandTrace *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2 != (awd::metrics::CommCenterBasebandTrace *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    v3 = *(_QWORD *)(this + 16);
    v4 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(this + 16) = v4;
    *((_QWORD *)a2 + 1) = v2;
    *((_QWORD *)a2 + 2) = v3;
    v5 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
  }
  return this;
}

char *awd::metrics::CommCenterBasebandTrace::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF742FF0;
  strcpy(result, "awd.metrics.CommCenterBasebandTrace");
  return result;
}

_QWORD *awd::metrics::CommCenterNVMSync::SharedCtor(_QWORD *this)
{
  this[4] = 0;
  this[1] = 0;
  this[2] = 0;
  *(_QWORD *)((char *)this + 22) = 0;
  return this;
}

awd::metrics::CommCenterNVMSync *awd::metrics::CommCenterNVMSync::CommCenterNVMSync(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E791CF38;
  *(_QWORD *)((char *)this + 22) = 0;
  awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E791CF38;
  *(_QWORD *)((char *)this + 22) = 0;
  awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  return this;
}

void sub_1BF697334(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterNVMSync::MergeFrom(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  _BYTE v10[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_13;
      }
    }
    else if ((*((_BYTE *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 6) = v7;
    v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        goto LABEL_8;
      goto LABEL_14;
    }
LABEL_13:
    v8 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 9) |= 4u;
    *((_QWORD *)this + 2) = v8;
    v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0)
        return;
      goto LABEL_9;
    }
LABEL_14:
    v9 = *((_BYTE *)a2 + 28);
    *((_DWORD *)this + 9) |= 8u;
    *((_BYTE *)this + 28) = v9;
    if ((*((_DWORD *)a2 + 9) & 0x10) == 0)
      return;
LABEL_9:
    v5 = *((_BYTE *)a2 + 29);
    *((_DWORD *)this + 9) |= 0x10u;
    *((_BYTE *)this + 29) = v5;
  }
}

void sub_1BF697458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF69746C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF6974BC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::CommCenterNVMSync::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::default_instance(awd::metrics::CommCenterNVMSync *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterNVMSync::default_instance_;
  if (!awd::metrics::CommCenterNVMSync::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterNVMSync::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterNVMSync::New(awd::metrics::CommCenterNVMSync *this)
{
  _QWORD *result;

  result = operator new(0x28uLL);
  result[4] = 0;
  result[1] = 0;
  result[2] = 0;
  *result = off_1E791CF38;
  *(_QWORD *)((char *)result + 22) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterNVMSync::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 36))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_QWORD *)(this + 22) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterNVMSync::MergePartialFromCodedStream(awd::metrics::CommCenterNVMSync *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unint64_t *v6;
  char *v7;
  uint64_t TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t result;
  unsigned int v24;
  unsigned int v25;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 24);
  v6 = (unint64_t *)((char *)this + 16);
  while (1)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 < *((_QWORD *)a2 + 2) && (*v7 & 0x80000000) == 0)
    {
      TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v12 >= v10)
            continue;
        }
        else
        {
          *v4 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v12 >= v10)
            continue;
        }
        if (*v12 != 16)
          continue;
        v13 = v12 + 1;
        *((_QWORD *)a2 + 1) = v13;
        if ((unint64_t)v13 >= v10)
          goto LABEL_36;
        goto LABEL_33;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 >= v10)
          goto LABEL_36;
LABEL_33:
        if (*v13 < 0)
        {
LABEL_36:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v17 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v17 >= v10)
            continue;
        }
        else
        {
          *v5 = *v13;
          v17 = v13 + 1;
          *((_QWORD *)a2 + 1) = v17;
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v17 >= v10)
            continue;
        }
        if (*v17 != 24)
          continue;
        v14 = v17 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v10)
          goto LABEL_43;
LABEL_40:
        if (*v14 < 0)
        {
LABEL_43:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 4u;
          if ((unint64_t)v18 >= v10)
            continue;
        }
        else
        {
          *v6 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 9) |= 4u;
          if ((unint64_t)v18 >= v10)
            continue;
        }
        if (*v18 != 32)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)a2 + 1) = v15;
        v25 = -1431655766;
        if ((unint64_t)v15 >= v10)
          goto LABEL_49;
LABEL_47:
        if (*v15 < 0)
        {
LABEL_49:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25);
          if (!(_DWORD)result)
            return result;
          v19 = v25;
          v20 = (_BYTE *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v19 = *v15;
          v20 = v15 + 1;
          *((_QWORD *)a2 + 1) = v20;
        }
        *((_BYTE *)this + 28) = v19 != 0;
        *((_DWORD *)this + 9) |= 8u;
        if ((unint64_t)v20 >= v10 || *v20 != 40)
          continue;
        v16 = v20 + 1;
        *((_QWORD *)a2 + 1) = v16;
        v24 = -1431655766;
        if ((unint64_t)v16 >= v10)
          goto LABEL_56;
LABEL_54:
        if (*v16 < 0)
        {
LABEL_56:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!(_DWORD)result)
            return result;
          v21 = v24;
          v22 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v10 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v21 = *v16;
          v22 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)a2 + 1) = v22;
        }
        *((_BYTE *)this + 29) = v21 != 0;
        *((_DWORD *)this + 9) |= 0x10u;
        if (v22 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v10)
          goto LABEL_43;
        goto LABEL_40;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        v25 = -1431655766;
        if ((unint64_t)v15 >= v10)
          goto LABEL_49;
        goto LABEL_47;
      case 5u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_24;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v10 = *((_QWORD *)a2 + 2);
        v24 = -1431655766;
        if ((unint64_t)v16 >= v10)
          goto LABEL_56;
        goto LABEL_54;
      default:
        v9 = TagFallback & 7;
LABEL_24:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
  }
}

uint64_t awd::metrics::CommCenterNVMSync::ByteSize(awd::metrics::CommCenterNVMSync *this)
{
  int v2;
  unsigned int v3;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  unsigned int v7;

  LOBYTE(v2) = *((_BYTE *)this + 36);
  if (!(_BYTE)v2)
  {
    result = 0;
    *((_DWORD *)this + 8) = 0;
    return result;
  }
  if ((*((_BYTE *)this + 36) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_11;
LABEL_7:
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
    if (v5 >= 0x80)
    {
      v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 9);
    }
    else
    {
      v6 = 2;
    }
    v3 += v6;
    goto LABEL_11;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  v2 = *((_DWORD *)this + 9);
  if ((v2 & 2) != 0)
    goto LABEL_7;
LABEL_11:
  if ((v2 & 4) != 0)
  {
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 2))
        + 1;
    v2 = *((_DWORD *)this + 9);
  }
  v7 = v3 + 2;
  if ((v2 & 8) == 0)
    v7 = v3;
  if ((v2 & 0x10) != 0)
    result = v7 + 2;
  else
    result = v7;
  *((_DWORD *)this + 8) = result;
  return result;
}

void awd::metrics::CommCenterNVMSync::CopyFrom(awd::metrics::CommCenterNVMSync *this, const awd::metrics::CommCenterNVMSync *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterNVMSync *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterNVMSync::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterNVMSync::IsInitialized(awd::metrics::CommCenterNVMSync *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterNVMSync::Swap(uint64_t this, awd::metrics::CommCenterNVMSync *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::metrics::CommCenterNVMSync *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    v3 = *(_QWORD *)(this + 16);
    *(_QWORD *)(this + 16) = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v3;
    LOBYTE(v3) = *(_BYTE *)(this + 28);
    *(_BYTE *)(this + 28) = *((_BYTE *)a2 + 28);
    *((_BYTE *)a2 + 28) = v3;
    LOBYTE(v3) = *(_BYTE *)(this + 29);
    *(_BYTE *)(this + 29) = *((_BYTE *)a2 + 29);
    *((_BYTE *)a2 + 29) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

double awd::metrics::CommCenterNVMSync::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF743000;
  strcpy(v3, "awd.metrics.CommCenterNVMSync");
  return *(double *)"ommCenterNVMSync";
}

_QWORD *awd::metrics::CommCenterAccessoryInformation::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

awd::metrics::CommCenterAccessoryInformation *awd::metrics::CommCenterAccessoryInformation::CommCenterAccessoryInformation(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  *(_QWORD *)this = off_1E791CFB0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E791CFB0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  return this;
}

void sub_1BF697B44(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterAccessoryInformation::MergeFrom(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  _BYTE v8[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          return;
        goto LABEL_7;
      }
    }
    else if ((*((_BYTE *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 4) = v7;
    if ((*((_DWORD *)a2 + 7) & 4) == 0)
      return;
LABEL_7:
    v5 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 7) |= 4u;
    *((_DWORD *)this + 5) = v5;
  }
}

void sub_1BF697C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF697C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF697C84(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterAccessoryInformation::~CommCenterAccessoryInformation(awd::metrics::CommCenterAccessoryInformation *this)
{
  *(_QWORD *)this = off_1E791CFB0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E791CFB0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E791CFB0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::default_instance(awd::metrics::CommCenterAccessoryInformation *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterAccessoryInformation::default_instance_;
  if (!awd::metrics::CommCenterAccessoryInformation::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterAccessoryInformation::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterAccessoryInformation::New(awd::metrics::CommCenterAccessoryInformation *this)
{
  _QWORD *result;

  result = operator new(0x20uLL);
  *result = off_1E791CFB0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 28))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::MergePartialFromCodedStream(awd::metrics::CommCenterAccessoryInformation *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  char *v7;
  uint64_t TagFallback;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v7 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
          {
            TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          else
          {
            TagFallback = *v7;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((_QWORD *)a2 + 1) = v7 + 1;
            if (!(_DWORD)TagFallback)
              return 1;
          }
          v9 = TagFallback >> 3;
          if (TagFallback >> 3 != 1)
            break;
          v10 = TagFallback & 7;
          if ((TagFallback & 7) != 0)
            goto LABEL_22;
          v13 = (char *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v13 >= v11 || *v13 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
            if (!(_DWORD)result)
              return result;
            v14 = (_BYTE *)*((_QWORD *)a2 + 1);
            v11 = *((_QWORD *)a2 + 2);
            *((_DWORD *)this + 7) |= 1u;
            if ((unint64_t)v14 < v11)
              goto LABEL_27;
          }
          else
          {
            *v4 = *v13;
            v14 = v13 + 1;
            *((_QWORD *)a2 + 1) = v14;
            *((_DWORD *)this + 7) |= 1u;
            if ((unint64_t)v14 < v11)
            {
LABEL_27:
              if (*v14 == 16)
              {
                v15 = v14 + 1;
                *((_QWORD *)a2 + 1) = v15;
                if ((unint64_t)v15 < v11)
                  goto LABEL_29;
LABEL_32:
                result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
                if (!(_DWORD)result)
                  return result;
                v16 = (_BYTE *)*((_QWORD *)a2 + 1);
                v11 = *((_QWORD *)a2 + 2);
                *((_DWORD *)this + 7) |= 2u;
                if ((unint64_t)v16 < v11)
                  goto LABEL_34;
              }
            }
          }
        }
        if (v9 != 2)
          break;
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_22;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_32;
LABEL_29:
        if ((char)*v15 < 0)
          goto LABEL_32;
        *v5 = *v15;
        v16 = v15 + 1;
        *((_QWORD *)a2 + 1) = v16;
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v16 < v11)
        {
LABEL_34:
          if (*v16 == 24)
          {
            v12 = v16 + 1;
            *((_QWORD *)a2 + 1) = v12;
            if ((unint64_t)v12 < v11)
              goto LABEL_36;
LABEL_39:
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
            if (!(_DWORD)result)
              return result;
            v19 = *((_QWORD *)a2 + 1);
            v18 = *((_QWORD *)a2 + 2);
            *((_DWORD *)this + 7) |= 4u;
            if (v19 == v18)
              goto LABEL_41;
          }
        }
      }
      if (v9 != 3)
        break;
      v10 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_22;
      v12 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v12 >= v11)
        goto LABEL_39;
LABEL_36:
      if ((char)*v12 < 0)
        goto LABEL_39;
      *v6 = *v12;
      v17 = (char *)(v12 + 1);
      *((_QWORD *)a2 + 1) = v17;
      *((_DWORD *)this + 7) |= 4u;
      if (v17 == (char *)v11)
      {
LABEL_41:
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    v10 = TagFallback & 7;
LABEL_22:
    if (v10 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::metrics::CommCenterAccessoryInformation::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 28);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = v5[7];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return this;
      return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  if ((v5[7] & 4) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::ByteSize(awd::metrics::CommCenterAccessoryInformation *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  uint64_t v8;

  LOBYTE(v2) = *((_BYTE *)this + 28);
  if (!(_BYTE)v2)
  {
    v3 = 0;
LABEL_6:
    *((_DWORD *)this + 6) = v3;
    return v3;
  }
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 7);
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 7);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
    goto LABEL_6;
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
       + 1
       + v3;
  else
    v8 = (v3 + 2);
  *((_DWORD *)this + 6) = v8;
  return v8;
}

void awd::metrics::CommCenterAccessoryInformation::CopyFrom(awd::metrics::CommCenterAccessoryInformation *this, const awd::metrics::CommCenterAccessoryInformation *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterAccessoryInformation *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterAccessoryInformation::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterAccessoryInformation::IsInitialized(awd::metrics::CommCenterAccessoryInformation *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterAccessoryInformation::Swap(uint64_t this, awd::metrics::CommCenterAccessoryInformation *a2)
{
  uint64_t v2;

  if (a2 != (awd::metrics::CommCenterAccessoryInformation *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
  }
  return this;
}

double awd::metrics::CommCenterAccessoryInformation::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF743010;
  strcpy(v3, "awd.metrics.CommCenterAccessoryInformation");
  return *(double *)"ssoryInformation";
}

double awd::metrics::MetricsCCBasebandReset::SharedCtor(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v1;
  double result;

  v1 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 1) = MEMORY[0x1E0DE8338];
  *((_WORD *)this + 20) = 0;
  result = 0.0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v1;
  *((_QWORD *)this + 4) = v1;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v1;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return result;
}

awd::metrics::MetricsCCBasebandReset *awd::metrics::MetricsCCBasebandReset::MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E791D028;
  *((_QWORD *)this + 1) = v3;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = v3;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  v3 = MEMORY[0x1E0DE8338];
  *(_QWORD *)this = off_1E791D028;
  *((_QWORD *)this + 1) = v3;
  *((_WORD *)this + 20) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = v3;
  *((_DWORD *)this + 11) = 0;
  *((_QWORD *)this + 6) = v3;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  return this;
}

void sub_1BF6982CC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::MetricsCCBasebandReset::MergeFrom(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  int v4;
  void **v5;
  void **v6;
  void **v7;
  char v8;
  __int128 v9;
  int v10;
  void *v11;
  size_t v12;
  char v13;
  int v14;
  int v15;
  void **v16;
  void **v17;
  char v18;
  __int128 v19;
  void *v20;
  size_t v21;
  void **v22;
  void **v23;
  char v24;
  __int128 v25;
  void *v26;
  size_t v27;
  void **v28;
  void **v29;
  char v30;
  __int128 v31;
  void *v32;
  size_t v33;
  int v34;
  uint64_t v35;
  char v36;
  char v37[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v37);
  }
  v4 = *((_DWORD *)a2 + 17);
  if (!(_BYTE)v4)
    goto LABEL_76;
  v5 = (void **)MEMORY[0x1E0DE8338];
  if ((v4 & 1) == 0)
    goto LABEL_19;
  v6 = (void **)*((_QWORD *)a2 + 1);
  *((_DWORD *)this + 17) |= 1u;
  v7 = (void **)*((_QWORD *)this + 1);
  if (v7 == v5)
  {
    v7 = (void **)operator new(0x18uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = 0;
    *((_QWORD *)this + 1) = v7;
  }
  if (v7 == v6)
  {
LABEL_19:
    v10 = *((_DWORD *)a2 + 17);
    if ((v10 & 2) != 0)
      goto LABEL_25;
    goto LABEL_20;
  }
  v8 = *((_BYTE *)v6 + 23);
  if (*((char *)v7 + 23) < 0)
  {
    if (v8 >= 0)
      v11 = v6;
    else
      v11 = *v6;
    if (v8 >= 0)
      v12 = *((unsigned __int8 *)v6 + 23);
    else
      v12 = (size_t)v6[1];
    std::string::__assign_no_alias<false>(v7, v11, v12);
    goto LABEL_19;
  }
  if ((*((_BYTE *)v6 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v7, *v6, (size_t)v6[1]);
    v10 = *((_DWORD *)a2 + 17);
    if ((v10 & 2) != 0)
      goto LABEL_25;
LABEL_20:
    if ((v10 & 4) != 0)
      goto LABEL_26;
LABEL_21:
    if ((v10 & 8) != 0)
      goto LABEL_27;
    goto LABEL_22;
  }
  v9 = *(_OWORD *)v6;
  v7[2] = v6[2];
  *(_OWORD *)v7 = v9;
  v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 2) == 0)
    goto LABEL_20;
LABEL_25:
  v13 = *((_BYTE *)a2 + 40);
  *((_DWORD *)this + 17) |= 2u;
  *((_BYTE *)this + 40) = v13;
  v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 4) == 0)
    goto LABEL_21;
LABEL_26:
  v14 = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 17) |= 4u;
  *((_DWORD *)this + 4) = v14;
  v10 = *((_DWORD *)a2 + 17);
  if ((v10 & 8) != 0)
  {
LABEL_27:
    v15 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 17) |= 8u;
    *((_DWORD *)this + 5) = v15;
    if ((*((_DWORD *)a2 + 17) & 0x10) == 0)
      goto LABEL_42;
    goto LABEL_28;
  }
LABEL_22:
  if ((v10 & 0x10) == 0)
    goto LABEL_42;
LABEL_28:
  v16 = (void **)*((_QWORD *)a2 + 3);
  *((_DWORD *)this + 17) |= 0x10u;
  v17 = (void **)*((_QWORD *)this + 3);
  if (v17 == v5)
  {
    v17 = (void **)operator new(0x18uLL);
    v17[1] = 0;
    v17[2] = 0;
    *v17 = 0;
    *((_QWORD *)this + 3) = v17;
  }
  if (v17 == v16)
  {
LABEL_42:
    if ((*((_BYTE *)a2 + 68) & 0x20) == 0)
      goto LABEL_59;
    goto LABEL_43;
  }
  v18 = *((_BYTE *)v16 + 23);
  if (*((char *)v17 + 23) < 0)
  {
    if (v18 >= 0)
      v20 = v16;
    else
      v20 = *v16;
    if (v18 >= 0)
      v21 = *((unsigned __int8 *)v16 + 23);
    else
      v21 = (size_t)v16[1];
    std::string::__assign_no_alias<false>(v17, v20, v21);
    goto LABEL_42;
  }
  if ((*((_BYTE *)v16 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v17, *v16, (size_t)v16[1]);
    if ((*((_BYTE *)a2 + 68) & 0x20) == 0)
      goto LABEL_59;
  }
  else
  {
    v19 = *(_OWORD *)v16;
    v17[2] = v16[2];
    *(_OWORD *)v17 = v19;
    if ((*((_BYTE *)a2 + 68) & 0x20) == 0)
      goto LABEL_59;
  }
LABEL_43:
  v22 = (void **)*((_QWORD *)a2 + 4);
  *((_DWORD *)this + 17) |= 0x20u;
  v23 = (void **)*((_QWORD *)this + 4);
  if (v23 == v5)
  {
    v23 = (void **)operator new(0x18uLL);
    v23[1] = 0;
    v23[2] = 0;
    *v23 = 0;
    *((_QWORD *)this + 4) = v23;
  }
  if (v23 != v22)
  {
    v24 = *((_BYTE *)v22 + 23);
    if (*((char *)v23 + 23) < 0)
    {
      if (v24 >= 0)
        v26 = v22;
      else
        v26 = *v22;
      if (v24 >= 0)
        v27 = *((unsigned __int8 *)v22 + 23);
      else
        v27 = (size_t)v22[1];
      std::string::__assign_no_alias<false>(v23, v26, v27);
    }
    else if ((*((_BYTE *)v22 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v23, *v22, (size_t)v22[1]);
    }
    else
    {
      v25 = *(_OWORD *)v22;
      v23[2] = v22[2];
      *(_OWORD *)v23 = v25;
    }
  }
LABEL_59:
  if ((*((_BYTE *)a2 + 68) & 0x40) == 0)
    goto LABEL_74;
  v28 = (void **)*((_QWORD *)a2 + 6);
  *((_DWORD *)this + 17) |= 0x40u;
  v29 = (void **)*((_QWORD *)this + 6);
  if (v29 == v5)
  {
    v29 = (void **)operator new(0x18uLL);
    v29[1] = 0;
    v29[2] = 0;
    *v29 = 0;
    *((_QWORD *)this + 6) = v29;
  }
  if (v29 == v28)
  {
LABEL_74:
    v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x80) == 0)
      goto LABEL_76;
    goto LABEL_75;
  }
  v30 = *((_BYTE *)v28 + 23);
  if (*((char *)v29 + 23) < 0)
  {
    if (v30 >= 0)
      v32 = v28;
    else
      v32 = *v28;
    if (v30 >= 0)
      v33 = *((unsigned __int8 *)v28 + 23);
    else
      v33 = (size_t)v28[1];
    std::string::__assign_no_alias<false>(v29, v32, v33);
    goto LABEL_74;
  }
  if ((*((_BYTE *)v28 + 23) & 0x80) == 0)
  {
    v31 = *(_OWORD *)v28;
    v29[2] = v28[2];
    *(_OWORD *)v29 = v31;
    v4 = *((_DWORD *)a2 + 17);
    if ((v4 & 0x80) == 0)
      goto LABEL_76;
LABEL_75:
    v34 = *((_DWORD *)a2 + 11);
    *((_DWORD *)this + 17) |= 0x80u;
    *((_DWORD *)this + 11) = v34;
    v4 = *((_DWORD *)a2 + 17);
    goto LABEL_76;
  }
  std::string::__assign_no_alias<true>(v29, *v28, (size_t)v28[1]);
  v4 = *((_DWORD *)a2 + 17);
  if ((v4 & 0x80) != 0)
    goto LABEL_75;
LABEL_76:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      v35 = *((_QWORD *)a2 + 7);
      *((_DWORD *)this + 17) |= 0x100u;
      *((_QWORD *)this + 7) = v35;
      v4 = *((_DWORD *)a2 + 17);
    }
    if ((v4 & 0x200) != 0)
    {
      v36 = *((_BYTE *)a2 + 41);
      *((_DWORD *)this + 17) |= 0x200u;
      *((_BYTE *)this + 41) = v36;
    }
  }
}

void sub_1BF698670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF698684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF6986EC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::MetricsCCBasebandReset::~MetricsCCBasebandReset(awd::metrics::MetricsCCBasebandReset *this)
{
  *(_QWORD *)this = off_1E791D028;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E791D028;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E791D028;
  awd::metrics::MetricsCCBasebandReset::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v2);
}

void awd::metrics::MetricsCCBasebandReset::SharedDtor(awd::metrics::MetricsCCBasebandReset *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;

  v2 = *((_QWORD *)this + 1);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 == MEMORY[0x1E0DE8338] || v2 == 0)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5 != MEMORY[0x1E0DE8338] && v5 != 0)
      goto LABEL_28;
LABEL_11:
    v7 = *((_QWORD *)this + 4);
    if (v7 != v3 && v7 != 0)
      goto LABEL_34;
    goto LABEL_16;
  }
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  operator delete((void *)v2);
  v5 = *((_QWORD *)this + 3);
  if (v5 == v3 || v5 == 0)
    goto LABEL_11;
LABEL_28:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  v7 = *((_QWORD *)this + 4);
  if (v7 != v3 && v7 != 0)
  {
LABEL_34:
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    operator delete((void *)v7);
    v9 = *((_QWORD *)this + 6);
    if (v9 != v3 && v9 != 0)
      goto LABEL_40;
    return;
  }
LABEL_16:
  v9 = *((_QWORD *)this + 6);
  if (v9 != v3 && v9 != 0)
  {
LABEL_40:
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    operator delete((void *)v9);
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::default_instance(awd::metrics::MetricsCCBasebandReset *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::MetricsCCBasebandReset::default_instance_;
  if (!awd::metrics::MetricsCCBasebandReset::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABM_2eproto(0, a2, a3, a4);
    return awd::metrics::MetricsCCBasebandReset::default_instance_;
  }
  return result;
}

double awd::metrics::MetricsCCBasebandReset::New(awd::metrics::MetricsCCBasebandReset *this)
{
  _QWORD *v1;
  uint64_t v2;
  double result;

  v1 = operator new(0x48uLL);
  v2 = MEMORY[0x1E0DE8338];
  *v1 = off_1E791D028;
  v1[1] = v2;
  *((_WORD *)v1 + 20) = 0;
  result = 0.0;
  v1[2] = 0;
  v1[3] = v2;
  v1[4] = v2;
  *((_DWORD *)v1 + 11) = 0;
  v1[6] = v2;
  v1[7] = 0;
  v1[8] = 0;
  return result;
}

uint64_t awd::metrics::MetricsCCBasebandReset::Clear(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_DWORD *)(this + 68);
  if ((_BYTE)v1)
  {
    v2 = MEMORY[0x1E0DE8338];
    if ((v1 & 1) != 0)
    {
      v3 = *(_QWORD *)(this + 8);
      if (v3 != MEMORY[0x1E0DE8338])
      {
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
          *(_BYTE *)(this + 40) = 0;
          *(_QWORD *)(this + 16) = 0;
          if ((*(_BYTE *)(this + 68) & 0x10) == 0)
            goto LABEL_13;
LABEL_7:
          v4 = *(_QWORD *)(this + 24);
          if (v4 != v2)
          {
            if (*(char *)(v4 + 23) < 0)
            {
              **(_BYTE **)v4 = 0;
              *(_QWORD *)(v4 + 8) = 0;
            }
            else
            {
              *(_BYTE *)v4 = 0;
              *(_BYTE *)(v4 + 23) = 0;
            }
          }
LABEL_13:
          if ((*(_BYTE *)(this + 68) & 0x20) != 0)
          {
            v5 = *(_QWORD *)(this + 32);
            if (v5 != v2)
            {
              if (*(char *)(v5 + 23) < 0)
              {
                **(_BYTE **)v5 = 0;
                *(_QWORD *)(v5 + 8) = 0;
                if ((*(_BYTE *)(this + 68) & 0x40) != 0)
                {
LABEL_18:
                  v6 = *(_QWORD *)(this + 48);
                  if (v6 != v2)
                  {
                    if (*(char *)(v6 + 23) < 0)
                    {
                      **(_BYTE **)v6 = 0;
                      *(_QWORD *)(v6 + 8) = 0;
                    }
                    else
                    {
                      *(_BYTE *)v6 = 0;
                      *(_BYTE *)(v6 + 23) = 0;
                    }
                  }
                }
LABEL_24:
                *(_DWORD *)(this + 44) = 0;
                v1 = *(_DWORD *)(this + 68);
                goto LABEL_25;
              }
              *(_BYTE *)v5 = 0;
              *(_BYTE *)(v5 + 23) = 0;
            }
          }
          if ((*(_BYTE *)(this + 68) & 0x40) != 0)
            goto LABEL_18;
          goto LABEL_24;
        }
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
    }
    *(_BYTE *)(this + 40) = 0;
    *(_QWORD *)(this + 16) = 0;
    if ((*(_BYTE *)(this + 68) & 0x10) == 0)
      goto LABEL_13;
    goto LABEL_7;
  }
LABEL_25:
  if ((v1 & 0xFF00) != 0)
  {
    *(_QWORD *)(this + 56) = 0;
    *(_BYTE *)(this + 41) = 0;
  }
  *(_DWORD *)(this + 68) = 0;
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::MergePartialFromCodedStream(awd::metrics::MetricsCCBasebandReset *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  char *v9;
  uint64_t TagFallback;
  int v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  unsigned int v17;
  _BYTE *v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  _QWORD *v26;
  _BYTE *v27;
  _QWORD *v28;
  unint64_t v29;
  _BYTE *v30;
  char *v31;
  _BYTE *v32;
  char *v33;
  unsigned __int8 *v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  _BYTE *v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  unsigned int v44;

  v4 = (unsigned int *)((char *)this + 16);
  v5 = (unint64_t *)((char *)this + 56);
  v6 = (unsigned int *)((char *)this + 44);
  v7 = (unsigned int *)((char *)this + 20);
  v8 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_60;
        *((_DWORD *)this + 17) |= 1u;
        if (*((_QWORD *)this + 1) == v8)
        {
          v12 = operator new(0x18uLL);
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_QWORD *)this + 1) = v12;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if ((_DWORD)result)
        {
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          if ((unint64_t)v15 < v14 && *v15 == 16)
          {
            v16 = v15 + 1;
            *((_QWORD *)a2 + 1) = v16;
            goto LABEL_18;
          }
          continue;
        }
        return result;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
LABEL_18:
        v44 = -1431655766;
        if ((unint64_t)v16 < v14 && (*v16 & 0x80000000) == 0)
        {
          v17 = *v16;
          v18 = v16 + 1;
          *((_QWORD *)a2 + 1) = v18;
          goto LABEL_92;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v44);
        if ((_DWORD)result)
        {
          v17 = v44;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
LABEL_92:
          *((_BYTE *)this + 40) = v17 != 0;
          *((_DWORD *)this + 17) |= 2u;
          if ((unint64_t)v18 >= v14 || *v18 != 24)
            continue;
          v19 = v18 + 1;
          *((_QWORD *)a2 + 1) = v19;
          if ((unint64_t)v19 >= v14)
            goto LABEL_98;
          goto LABEL_95;
        }
        break;
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v19 = (char *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v19 >= v14)
          goto LABEL_98;
LABEL_95:
        if (*v19 < 0)
        {
LABEL_98:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v42 = *((_QWORD *)a2 + 2);
          v41 = *((_DWORD *)this + 17) | 4;
          *((_DWORD *)this + 17) = v41;
          if ((unint64_t)v40 >= v42)
            continue;
        }
        else
        {
          *v4 = *v19;
          v40 = v19 + 1;
          *((_QWORD *)a2 + 1) = v40;
          v41 = *((_DWORD *)this + 17) | 4;
          *((_DWORD *)this + 17) = v41;
          if ((unint64_t)v40 >= v14)
            continue;
        }
        if (*v40 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v40 + 1;
        *((_DWORD *)this + 17) = v41 | 0x10;
        if (*((_QWORD *)this + 3) == v8)
        {
LABEL_26:
          v20 = operator new(0x18uLL);
          v20[1] = 0;
          v20[2] = 0;
          *v20 = 0;
          *((_QWORD *)this + 3) = v20;
        }
LABEL_27:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v22 = (_BYTE *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v22 >= v21 || *v22 != 40)
          continue;
        v23 = v22 + 1;
        *((_QWORD *)a2 + 1) = v23;
        if ((unint64_t)v23 >= v21)
          goto LABEL_72;
LABEL_34:
        if (*v23 < 0)
        {
LABEL_72:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 17) |= 0x100u;
          if ((unint64_t)v24 >= v21)
            continue;
        }
        else
        {
          *v5 = *v23;
          v24 = v23 + 1;
          *((_QWORD *)a2 + 1) = v24;
          *((_DWORD *)this + 17) |= 0x100u;
          if ((unint64_t)v24 >= v21)
            continue;
        }
        if (*v24 != 48)
          continue;
        v25 = v24 + 1;
        *((_QWORD *)a2 + 1) = v25;
LABEL_76:
        v43 = -1431655766;
        if ((unint64_t)v25 >= v21 || *v25 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43);
          if (!(_DWORD)result)
            return result;
          v35 = v43;
          v36 = (_BYTE *)*((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v35 = *v25;
          v36 = v25 + 1;
          *((_QWORD *)a2 + 1) = v36;
        }
        *((_BYTE *)this + 41) = v35 != 0;
        v39 = *((_DWORD *)this + 17) | 0x200;
        *((_DWORD *)this + 17) = v39;
        if ((unint64_t)v36 >= v21 || *v36 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v36 + 1;
        *((_DWORD *)this + 17) = v39 | 0x20;
        if (*((_QWORD *)this + 4) == v8)
        {
LABEL_41:
          v26 = operator new(0x18uLL);
          v26[1] = 0;
          v26[2] = 0;
          *v26 = 0;
          *((_QWORD *)this + 4) = v26;
        }
LABEL_42:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v27 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v27 >= *((_QWORD *)a2 + 2) || *v27 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v27 + 1;
LABEL_47:
        *((_DWORD *)this + 17) |= 0x40u;
        if (*((_QWORD *)this + 6) == v8)
        {
          v28 = operator new(0x18uLL);
          v28[1] = 0;
          v28[2] = 0;
          *v28 = 0;
          *((_QWORD *)this + 6) = v28;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v30 = (_BYTE *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v30 >= v29 || *v30 != 72)
          continue;
        v31 = v30 + 1;
        *((_QWORD *)a2 + 1) = v31;
        if ((unint64_t)v31 >= v29)
          goto LABEL_64;
LABEL_56:
        if (*v31 < 0)
        {
LABEL_64:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v32 = (_BYTE *)*((_QWORD *)a2 + 1);
          v29 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 17) |= 0x80u;
          if ((unint64_t)v32 >= v29)
            continue;
        }
        else
        {
          *v6 = *v31;
          v32 = v31 + 1;
          *((_QWORD *)a2 + 1) = v32;
          *((_DWORD *)this + 17) |= 0x80u;
          if ((unint64_t)v32 >= v29)
            continue;
        }
        if (*v32 != 80)
          continue;
        v33 = v32 + 1;
        *((_QWORD *)a2 + 1) = v33;
LABEL_68:
        if ((unint64_t)v33 >= v29 || *v33 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v38 = *((_QWORD *)a2 + 1);
          v37 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 17) |= 8u;
          if (v38 != v37)
            continue;
        }
        else
        {
          *v7 = *v33;
          v34 = (unsigned __int8 *)(v33 + 1);
          *((_QWORD *)a2 + 1) = v34;
          *((_DWORD *)this + 17) |= 8u;
          if (v34 != (unsigned __int8 *)v29)
            continue;
        }
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        continue;
      case 4u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_60;
        *((_DWORD *)this + 17) |= 0x10u;
        if (*((_QWORD *)this + 3) == v8)
          goto LABEL_26;
        goto LABEL_27;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v23 = (char *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v23 < v21)
          goto LABEL_34;
        goto LABEL_72;
      case 6u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v25 = (char *)*((_QWORD *)a2 + 1);
        v21 = *((_QWORD *)a2 + 2);
        goto LABEL_76;
      case 7u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_60;
        *((_DWORD *)this + 17) |= 0x20u;
        if (*((_QWORD *)this + 4) == v8)
          goto LABEL_41;
        goto LABEL_42;
      case 8u:
        v11 = TagFallback & 7;
        if (v11 == 2)
          goto LABEL_47;
        goto LABEL_60;
      case 9u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v31 = (char *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v31 < v29)
          goto LABEL_56;
        goto LABEL_64;
      case 0xAu:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_60;
        v33 = (char *)*((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        goto LABEL_68;
      default:
        v11 = TagFallback & 7;
LABEL_60:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 68);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
    v6 = *(_DWORD *)(v5 + 68);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 40), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x10) == 0)
  {
LABEL_5:
    if ((v6 & 0x100) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x100) == 0)
  {
LABEL_6:
    if ((v6 & 0x200) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(_QWORD *)(v5 + 56), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x200) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 41), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x40) == 0)
  {
LABEL_9:
    if ((v6 & 0x80) == 0)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 68);
  if ((v6 & 0x80) == 0)
  {
LABEL_10:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 44), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 68) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::MetricsCCBasebandReset::ByteSize(awd::metrics::MetricsCCBasebandReset *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;

  v2 = *((_DWORD *)this + 17);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    if ((v2 & 0xFF00) == 0)
      goto LABEL_73;
    goto LABEL_68;
  }
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) != 0)
      v3 = 2;
    else
      v3 = 0;
    if ((v2 & 4) == 0)
      goto LABEL_26;
LABEL_22:
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v12 >= 0x80)
    {
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12) + 1;
      v2 = *((_DWORD *)this + 17);
    }
    else
    {
      v13 = 2;
    }
    v3 = (v13 + v3);
    goto LABEL_26;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v9 = v10 + 1;
    v2 = *((_DWORD *)this + 17);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 2;
  }
  if (v6 < 0)
    v5 = v7;
  v11 = v9 + v5;
  if ((v2 & 2) != 0)
    v3 = v11 + 2;
  else
    v3 = v11;
  if ((v2 & 4) != 0)
    goto LABEL_22;
LABEL_26:
  if ((v2 & 8) != 0)
  {
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v14 >= 0x80)
    {
      v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      v2 = *((_DWORD *)this + 17);
      v3 = (v15 + 1 + v3);
      if ((v2 & 0x10) != 0)
        goto LABEL_37;
    }
    else
    {
      v3 = (v3 + 2);
      if ((v2 & 0x10) != 0)
        goto LABEL_37;
    }
LABEL_28:
    if ((v2 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_46;
  }
  if ((v2 & 0x10) == 0)
    goto LABEL_28;
LABEL_37:
  v16 = *((_QWORD *)this + 3);
  v17 = *(unsigned __int8 *)(v16 + 23);
  v18 = v17;
  v19 = *(_QWORD *)(v16 + 8);
  if ((v17 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v16 + 23);
  else
    v20 = v19;
  if (v20 >= 0x80)
  {
    v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v20);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v19 = *(_QWORD *)(v16 + 8);
    v2 = *((_DWORD *)this + 17);
    v18 = *(_BYTE *)(v16 + 23);
  }
  else
  {
    v21 = 1;
  }
  if (v18 < 0)
    v17 = v19;
  v3 = (v3 + v21 + v17 + 1);
  if ((v2 & 0x20) == 0)
  {
LABEL_29:
    if ((v2 & 0x40) == 0)
      goto LABEL_30;
    goto LABEL_55;
  }
LABEL_46:
  v22 = *((_QWORD *)this + 4);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = v23;
  v25 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v26 = *(unsigned __int8 *)(v22 + 23);
  else
    v26 = v25;
  if (v26 >= 0x80)
  {
    v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v26);
    v23 = *(unsigned __int8 *)(v22 + 23);
    v25 = *(_QWORD *)(v22 + 8);
    v2 = *((_DWORD *)this + 17);
    v24 = *(_BYTE *)(v22 + 23);
  }
  else
  {
    v27 = 1;
  }
  if (v24 < 0)
    v23 = v25;
  v3 = (v3 + v27 + v23 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_30:
    if ((v2 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_55:
  v28 = *((_QWORD *)this + 6);
  v29 = *(unsigned __int8 *)(v28 + 23);
  v30 = v29;
  v31 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v32 = *(unsigned __int8 *)(v28 + 23);
  else
    v32 = v31;
  if (v32 >= 0x80)
  {
    v33 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v32);
    v29 = *(unsigned __int8 *)(v28 + 23);
    v31 = *(_QWORD *)(v28 + 8);
    v2 = *((_DWORD *)this + 17);
    v30 = *(_BYTE *)(v28 + 23);
  }
  else
  {
    v33 = 1;
  }
  if (v30 < 0)
    v29 = v31;
  v3 = (v3 + v33 + v29 + 1);
  if ((v2 & 0x80) == 0)
  {
LABEL_31:
    if ((v2 & 0xFF00) == 0)
      goto LABEL_73;
    goto LABEL_68;
  }
LABEL_64:
  v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 11);
  if (v34 >= 0x80)
  {
    v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34);
    v2 = *((_DWORD *)this + 17);
    v3 = (v35 + 1 + v3);
    if ((v2 & 0xFF00) == 0)
      goto LABEL_73;
  }
  else
  {
    v3 = (v3 + 2);
    if ((v2 & 0xFF00) == 0)
      goto LABEL_73;
  }
LABEL_68:
  if ((v2 & 0x100) != 0)
  {
    LODWORD(v3) = v3
                + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 7))
                + 1;
    v2 = *((_DWORD *)this + 17);
  }
  if ((v2 & 0x200) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
LABEL_73:
  *((_DWORD *)this + 16) = v3;
  return v3;
}

void awd::metrics::MetricsCCBasebandReset::CopyFrom(awd::metrics::MetricsCCBasebandReset *this, const awd::metrics::MetricsCCBasebandReset *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::MetricsCCBasebandReset *))(*(_QWORD *)this + 32))(this);
    awd::metrics::MetricsCCBasebandReset::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::MetricsCCBasebandReset::IsInitialized(awd::metrics::MetricsCCBasebandReset *this)
{
  return 1;
}

uint64_t awd::metrics::MetricsCCBasebandReset::Swap(uint64_t this, awd::metrics::MetricsCCBasebandReset *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 != (awd::metrics::MetricsCCBasebandReset *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LOBYTE(v2) = *(_BYTE *)(this + 40);
    *(_BYTE *)(this + 40) = *((_BYTE *)a2 + 40);
    *((_BYTE *)a2 + 40) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    v3 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v3;
    v4 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v4;
    v5 = *(_QWORD *)(this + 48);
    v6 = *(_QWORD *)(this + 56);
    v7 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(this + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(this + 56) = v7;
    *((_QWORD *)a2 + 6) = v5;
    *((_QWORD *)a2 + 7) = v6;
    LOBYTE(v5) = *(_BYTE *)(this + 41);
    *(_BYTE *)(this + 41) = *((_BYTE *)a2 + 41);
    *((_BYTE *)a2 + 41) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 68);
    *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v5;
  }
  return this;
}

char *awd::metrics::MetricsCCBasebandReset::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF73A760;
  strcpy(result, "awd.metrics.MetricsCCBasebandReset");
  return result;
}

uint64_t awd::metrics::CommCenterBasebandBootTime::GetCachedSize(awd::metrics::CommCenterBasebandBootTime *this)
{
  return *((unsigned int *)this + 9);
}

uint64_t awd::metrics::CrashReasonType::GetCachedSize(awd::metrics::CrashReasonType *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t awd::metrics::CommCenterBasebanCrash::GetCachedSize(awd::metrics::CommCenterBasebanCrash *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t awd::metrics::CommCenterBasebandTrace::GetCachedSize(awd::metrics::CommCenterBasebandTrace *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterNVMSync::GetCachedSize(awd::metrics::CommCenterNVMSync *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterAccessoryInformation::GetCachedSize(awd::metrics::CommCenterAccessoryInformation *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t awd::metrics::MetricsCCBasebandReset::GetCachedSize(awd::metrics::MetricsCCBasebandReset *this)
{
  return *((unsigned int *)this + 16);
}

void WiFiManager::create(WiFiManager *this@<X0>, WiFiManager **a2@<X8>)
{
  WiFiManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint8_t buf[8];

  v5 = (WiFiManager *)operator new(0x40uLL);
  WiFiManager::WiFiManager(v5, (const char *)this);
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1E791D178;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v21 = v6;
  *(_QWORD *)buf = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 2);
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  if (*(_QWORD *)buf)
    WiFiManager::~WiFiManager(*(WiFiManager **)buf);
  if (v5 && (WiFiManager::init(v5) & 1) != 0)
  {
    *a2 = v5;
    a2[1] = (WiFiManager *)v6;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v17 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_23;
LABEL_29:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Failed to create WiFi Manager!", buf, 2u);
    *a2 = 0;
    a2[1] = 0;
    v18 = v21;
    if (!v21)
      return;
    goto LABEL_24;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  v17 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
    goto LABEL_29;
LABEL_23:
  *a2 = 0;
  a2[1] = 0;
  v18 = v21;
  if (!v21)
    return;
LABEL_24:
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
  }
}

void sub_1BF699848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF69985C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_ptr<WiFiManager>::~unique_ptr[abi:ne180100]((WiFiManager **)va);
  _Unwind_Resume(a1);
}

void sub_1BF699870(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t WiFiManager::init(WiFiManager *this)
{
  id v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;

  *((_BYTE *)this + 24) = 1;
  v2 = objc_alloc_init(MEMORY[0x1E0D1BA50]);
  *((_QWORD *)this + 4) = v2;
  if (v2)
  {
    objc_msgSend(v2, "activate");
    v3 = *((_QWORD *)this + 1);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v4)
    {
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
    }
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3321888768;
    v13[2] = ___ZN11WiFiManager4initEv_block_invoke;
    v13[3] = &__block_descriptor_56_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE_e18_v16__0__CWFEvent_8l;
    v13[4] = this;
    v13[5] = v3;
    v14 = v4;
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    objc_msgSend(*((id *)this + 4), "setEventHandler:", v13);
    v12 = 0;
    v9 = objc_msgSend(*((id *)this + 4), "startMonitoringEventType:error:", 1, &v12);
    if (v14)
      std::__shared_weak_count::__release_weak(v14);
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    return v9;
  }
  else
  {
    v11 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Failed to create WiFiManager interface", (uint8_t *)&v12, 2u);
    }
    return 0;
  }
}

void sub_1BF6999E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!v16)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if (!v16)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(exception_object);
}

void WiFiManager::WiFiManager(WiFiManager *this, const char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string __dst;
  std::string v15;
  void *__p[2];
  int64_t v17;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::append(&__dst, ".", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "WiFiManager", 0xBuLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_15:
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
}

void sub_1BF699B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void WiFiManager::~WiFiManager(WiFiManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  const void *v10;
  std::__shared_weak_count *v11;

  v2 = *((_QWORD *)this + 5);
  for (i = *((_QWORD *)this + 6); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 6) = v2;
  objc_msgSend(*((id *)this + 4), "invalidate");
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = *((_QWORD *)this + 6);
    v8 = (void *)*((_QWORD *)this + 5);
    if (v7 != v6)
    {
      do
      {
        v9 = *(NSObject **)(v7 - 8);
        if (v9)
          dispatch_release(v9);
        v10 = *(const void **)(v7 - 16);
        if (v10)
          _Block_release(v10);
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 5);
    }
    *((_QWORD *)this + 6) = v6;
    operator delete(v8);
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  JUMPOUT(0x1C3B8B74CLL);
}

void ___ZN11WiFiManager4initEv_block_invoke(_QWORD *a1, void *a2)
{
  std::__shared_weak_count *v3;
  os_log_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  uint8_t v12[16];

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (os_log_t *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8 && objc_msgSend(a2, "type") == 1)
      {
        v11 = *v5;
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)v12 = 0;
          _os_log_debug_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEBUG, "#D WiFiManager Power Change Event", v12, 2u);
        }
        WiFiManager::notifyClients((id *)v5);
      }
    }
  }
}

void WiFiManager::notifyClients(id *this)
{
  int v2;
  NSObject *v3;
  const char *v4;
  char *v5;
  char *v6;
  void *v7;
  NSObject *v8;
  char v9;
  void *v10;
  const void *v11;
  void *v12;
  char v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(this[4], "powerOn");
  *((_BYTE *)this + 24) = v2;
  v3 = *this;
  if (os_log_type_enabled((os_log_t)*this, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "Off";
    if (v2)
      v4 = "On";
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Notifying WiFi Power: %s", (uint8_t *)&v14, 0xCu);
  }
  v5 = (char *)this[5];
  v6 = (char *)this[6];
  if (v5 != v6)
  {
    while (*(_QWORD *)v5)
    {
      v7 = _Block_copy(*(const void **)v5);
      v8 = *((_QWORD *)v5 + 1);
      if (v8)
        goto LABEL_10;
LABEL_11:
      v9 = *((_BYTE *)this + 24);
      if (v7)
      {
        v10 = _Block_copy(v7);
        v11 = v10;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
        v16 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
        if (v10)
        {
          v12 = _Block_copy(v10);
          v13 = 0;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v13 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2;
        v16 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      }
      aBlock = v12;
      v18 = v9;
      dispatch_async(v8, &v14);
      if (aBlock)
        _Block_release(aBlock);
      if ((v13 & 1) == 0)
        _Block_release(v11);
      if (v8)
        dispatch_release(v8);
      if (v7)
        _Block_release(v7);
      v5 += 16;
      if (v5 == v6)
        return;
    }
    v7 = 0;
    v8 = *((_QWORD *)v5 + 1);
    if (!v8)
      goto LABEL_11;
LABEL_10:
    dispatch_retain(v8);
    goto LABEL_11;
  }
}

void sub_1BF699FB0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11WiFiManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t WiFiManager::getWiFiState(WiFiManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

_QWORD *WiFiManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[6];
  if ((unint64_t)v4 >= a1[7])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 5, (uint64_t)a2);
    a1[6] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[6] = v4 + 2;
  }
  return result;
}

WiFiManager **std::unique_ptr<WiFiManager>::~unique_ptr[abi:ne180100](WiFiManager **a1)
{
  WiFiManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    WiFiManager::~WiFiManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

WiFiManager *std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::__on_zero_shared(uint64_t a1)
{
  WiFiManager *result;

  result = *(WiFiManager **)(a1 + 24);
  if (result)
    WiFiManager::~WiFiManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<WiFiManager *,std::shared_ptr<WiFiManager>::__shared_ptr_default_delete<WiFiManager,WiFiManager>,std::allocator<WiFiManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF74309CLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF74309CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF74309CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF74309CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

_QWORD *ABMServerRegistryBuilder::create@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = operator new(0x28uLL);
  result[1] = 0;
  result[2] = 0;
  *result = off_1E791D1C8;
  v6 = *a1;
  v5 = a1[1];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  result[3] = v6;
  result[4] = v5;
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

