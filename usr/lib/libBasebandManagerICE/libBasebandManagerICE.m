void ___ZN7antenna7Service8Internal14enablePPM_syncEb_block_invoke_2(_QWORD *a1, char a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  NSObject *v10;
  uint64_t *v11;
  xpc_object_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  char *v21;
  void **v22;
  void *v23;
  xpc_object_t object;
  void *__p[3];
  std::__shared_weak_count *v27;
  __int128 v28;
  uint8_t buf[4];
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    v27 = v8;
    if (v8)
    {
      v9 = v8;
      if (a1[5])
      {
        if ((a2 & 1) != 0)
        {
          v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            v21 = (char *)MEMORY[0x1C3B8CCDC](*a3);
            memset(__p, 170, sizeof(__p));
            std::string::basic_string[abi:ne180100]<0>(__p, v21);
            free(v21);
            v22 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            LODWORD(v28) = 136315138;
            *(_QWORD *)((char *)&v28 + 4) = v22;
            _os_log_debug_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEBUG, "#D PPM telemetry from BB: %s", (uint8_t *)&v28, 0xCu);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
          }
          v11 = *(uint64_t **)(v7 + 576);
          v12 = (xpc_object_t)*a3;
          v23 = v12;
          if (v12 && MEMORY[0x1C3B8CD78](v12) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v12);
          }
          else
          {
            v12 = xpc_null_create();
            v23 = v12;
          }
          PPMManager::reportTelemetry(v11, &v23);
          xpc_release(v12);
          v23 = 0;
        }
        else
        {
          v14 = (void *)a1[7];
          v13 = a1 + 7;
          v15 = *MEMORY[0x1E0DDFA68];
          if (xpc_dictionary_get_value(v14, (const char *)*MEMORY[0x1E0DDFA68]))
          {
            v16 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_QWORD *)&v28 = v13;
              *((_QWORD *)&v28 + 1) = v15;
              xpc::dict::object_proxy::operator xpc::object((uint64_t)&v28, &object);
              xpc::dyn_cast_or_default((xpc *)&object, (const object *)"None", v17);
              if (SHIBYTE(__p[2]) >= 0)
                v18 = __p;
              else
                v18 = (void **)__p[0];
              *(_DWORD *)buf = 136315138;
              v30 = v18;
              _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "Failed to run command driver: %s", buf, 0xCu);
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              xpc_release(object);
            }
          }
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF56BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ABMServerInternal::handleInternalMessage_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3)
{
  xpc_object_t value;
  int v7;
  size_t v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  xpc_object_t v13;
  const object *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  const object *v18;
  xpc_object_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  BOOL v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD *v29;
  xpc_object_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  NSObject *v38;
  const void *v39;
  CFTypeID v40;
  const void *v41;
  uint64_t (*v42)(uint64_t);
  xpc_object_t v43;
  int v44;
  const void *v45;
  CFTypeID v46;
  const void *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t (*v50)(uint64_t);
  xpc_object_t v51;
  xpc_object_t *v52;
  size_t v53;
  unint64_t *v54;
  unint64_t v55;
  xpc_object_t reply;
  xpc_object_t v57;
  xpc_object_t v58;
  xpc_object_t v59;
  NSObject *v60;
  xpc_object_t v61;
  xpc_object_t v62;
  xpc_object_t v63;
  size_t v64;
  void **v65;
  xpc_object_t v66;
  void **v67;
  xpc_object_t *v68;
  _QWORD v69[5];
  xpc_object_t v70;
  const void *v71;
  xpc_object_t v72;
  const void *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t object[3];
  void *__p[3];
  uint8_t buf[24];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  memset(__p, 170, sizeof(__p));
  value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v7 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v8 = HIBYTE(__p[2]);
  else
    v8 = (size_t)__p[1];
  if (v8 == strlen(kCommandCheckIn[0]))
  {
    v9 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
    if (!memcmp(v9, kCommandCheckIn[0], v8))
    {
      memset(object, 170, sizeof(object));
      v15 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
      v75 = v15;
      if (v15)
        xpc_retain(v15);
      else
        v75 = xpc_null_create();
      memset(buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
      xpc_release(v75);
      memset(buf, 170, 16);
      v19 = *a2;
      if (*a2)
      {
        xpc_retain(*a2);
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v20 = (_QWORD *)(a1 + 152);
        v21 = *(_QWORD **)(a1 + 152);
        if (!v21)
          goto LABEL_52;
      }
      else
      {
        v19 = xpc_null_create();
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = 0;
        v20 = (_QWORD *)(a1 + 152);
        v21 = *(_QWORD **)(a1 + 152);
        if (!v21)
          goto LABEL_52;
      }
      v22 = v20;
      do
      {
        v23 = v21[4];
        v24 = v23 >= (unint64_t)v19;
        if (v23 >= (unint64_t)v19)
          v25 = v21;
        else
          v25 = v21 + 1;
        if (v24)
          v22 = v21;
        v21 = (_QWORD *)*v25;
      }
      while (*v25);
      if (v22 != v20 && (unint64_t)v19 >= v22[4])
      {
        v27 = v22[5];
        v26 = (std::__shared_weak_count *)v22[6];
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v49 = __ldxr(p_shared_owners);
          while (__stxr(v49 + 1, p_shared_owners));
        }
        *(_QWORD *)buf = v27;
        *(_QWORD *)&buf[8] = v26;
        goto LABEL_53;
      }
LABEL_52:
      v26 = 0;
      v27 = 0;
LABEL_53:
      xpc_release(v19);
      if (v27)
      {
        if ((xpc_object_t *)v27 != object)
        {
          if (*(char *)(v27 + 23) < 0)
          {
            if (SHIBYTE(object[2]) >= 0)
              v52 = object;
            else
              v52 = (xpc_object_t *)object[0];
            if (SHIBYTE(object[2]) >= 0)
              v53 = HIBYTE(object[2]);
            else
              v53 = (size_t)object[1];
            std::string::__assign_no_alias<false>((void **)v27, v52, v53);
          }
          else if ((HIBYTE(object[2]) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)v27, object[0], (size_t)object[1]);
          }
          else
          {
            v28 = *(_OWORD *)object;
            *(xpc_object_t *)(v27 + 16) = object[2];
            *(_OWORD *)v27 = v28;
          }
        }
        *(_BYTE *)(v27 + 24) = 1;
      }
      if (v26)
      {
        v54 = (unint64_t *)&v26->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (SHIBYTE(object[2]) < 0)
        operator delete(object[0]);
      v44 = 0;
      goto LABEL_135;
    }
  }
  if (v8 != strlen(kCommandCheckOut)
    || (v7 >= 0 ? (v10 = __p) : (v10 = (void **)__p[0]), memcmp(v10, kCommandCheckOut, v8)))
  {
    if (v8 != strlen(kCommandEventsOn[0])
      || (v7 >= 0 ? (v11 = __p) : (v11 = (void **)__p[0]), memcmp(v11, kCommandEventsOn[0], v8)))
    {
      if (v8 != strlen(kCommandEventsOff[0]))
        goto LABEL_161;
      v12 = v7 >= 0 ? __p : (void **)__p[0];
      if (memcmp(v12, kCommandEventsOff[0], v8))
        goto LABEL_161;
      v13 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
      object[0] = v13;
      if (v13)
        xpc_retain(v13);
      else
        object[0] = xpc_null_create();
      xpc::bridge((xpc *)object, v14);
      v45 = *(const void **)buf;
      if (!*(_QWORD *)buf)
        goto LABEL_102;
      v46 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v46 == CFArrayGetTypeID())
      {
        CFRetain(v45);
        v47 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_102;
      }
      else
      {
        v45 = 0;
        v47 = *(const void **)buf;
        if (!*(_QWORD *)buf)
        {
LABEL_102:
          xpc_release(object[0]);
          v50 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
          if (!v45)
            v50 = 0;
          if (v50)
          {
            v51 = *a2;
            v72 = v51;
            if (v51)
            {
              xpc_retain(v51);
              v71 = v45;
              if (v45)
              {
LABEL_107:
                CFRetain(v45);
                ABMServerInternal::registerNotification(a1, &v72, 0, &v71);
                CFRelease(v45);
                v51 = v72;
                goto LABEL_123;
              }
            }
            else
            {
              v51 = xpc_null_create();
              v71 = v45;
              v72 = v51;
              if (v45)
                goto LABEL_107;
            }
            ABMServerInternal::registerNotification(a1, &v72, 0, &v71);
LABEL_123:
            xpc_release(v51);
            v44 = 0;
            v72 = 0;
            if (!v45)
              goto LABEL_135;
            goto LABEL_124;
          }
          v44 = -534716414;
          if (v45)
LABEL_124:
            CFRelease(v45);
LABEL_135:
          reply = xpc_dictionary_create_reply(*a3);
          if (reply || (reply = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8CD78](reply) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(reply);
              v57 = reply;
            }
            else
            {
              v57 = xpc_null_create();
            }
          }
          else
          {
            v57 = xpc_null_create();
            reply = 0;
          }
          xpc_release(reply);
          v58 = xpc_int64_create(v44);
          if (!v58)
            v58 = xpc_null_create();
          xpc_dictionary_set_value(v57, kKeyCommandResult[0], v58);
          v59 = xpc_null_create();
          xpc_release(v58);
          xpc_release(v59);
          v60 = *(NSObject **)(a1 + 112);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            v67 = __p;
            if (SHIBYTE(__p[2]) < 0)
              v67 = (void **)__p[0];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v67;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v44;
            _os_log_debug_impl(&dword_1BF566000, v60, OS_LOG_TYPE_DEBUG, "#D Replying to client's command: %s, with return code: 0x%x", buf, 0x12u);
          }
          xpc_connection_send_message((xpc_connection_t)*a2, v57);
          v61 = xpc_null_create();
          v62 = xpc_null_create();
          v63 = *a3;
          *a3 = v61;
          xpc_release(v63);
          xpc_release(v62);
          if (SHIBYTE(__p[2]) >= 0)
            v64 = HIBYTE(__p[2]);
          else
            v64 = (size_t)__p[1];
          if (v64 == strlen(kCommandEventsOn[0]))
          {
            v65 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
            if (!memcmp(v65, kCommandEventsOn[0], v64) && *(_DWORD *)(a1 + 192) == 1)
            {
              v69[0] = MEMORY[0x1E0C809B0];
              v69[1] = 1174405120;
              v69[2] = ___ZN17ABMServerInternal26handleInternalMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
              v69[3] = &__block_descriptor_tmp_18_1;
              v66 = *a2;
              v69[4] = a1;
              v70 = v66;
              if (v66)
                xpc_retain(v66);
              else
                v70 = xpc_null_create();
              ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v69);
              xpc_release(v70);
              v70 = 0;
            }
          }
          xpc_release(v57);
          goto LABEL_161;
        }
      }
      CFRelease(v47);
      goto LABEL_102;
    }
    v17 = xpc_dictionary_get_value(*a3, kKeyEventsList[0]);
    object[0] = v17;
    if (v17)
      xpc_retain(v17);
    else
      object[0] = xpc_null_create();
    xpc::bridge((xpc *)object, v18);
    v39 = *(const void **)buf;
    if (*(_QWORD *)buf)
    {
      v40 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v40 == CFArrayGetTypeID())
      {
        CFRetain(v39);
        v41 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_83;
      }
      else
      {
        v39 = 0;
        v41 = *(const void **)buf;
        if (!*(_QWORD *)buf)
          goto LABEL_83;
      }
      CFRelease(v41);
    }
LABEL_83:
    xpc_release(object[0]);
    v42 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    if (!v39)
      v42 = 0;
    if (!v42)
    {
      v44 = -534716414;
      if (!v39)
        goto LABEL_135;
LABEL_113:
      CFRelease(v39);
      goto LABEL_135;
    }
    v43 = *a2;
    v74 = v43;
    if (v43)
    {
      xpc_retain(v43);
      v73 = v39;
      if (v39)
      {
LABEL_88:
        CFRetain(v39);
        ABMServerInternal::registerNotification(a1, &v74, 1, &v73);
        CFRelease(v39);
        v43 = v74;
        goto LABEL_112;
      }
    }
    else
    {
      v43 = xpc_null_create();
      v73 = v39;
      v74 = v43;
      if (v39)
        goto LABEL_88;
    }
    ABMServerInternal::registerNotification(a1, &v74, 1, &v73);
LABEL_112:
    xpc_release(v43);
    v44 = 0;
    v74 = 0;
    if (!v39)
      goto LABEL_135;
    goto LABEL_113;
  }
  memset(object, 170, sizeof(object));
  v16 = xpc_dictionary_get_value(*a3, kKeyClientName[0]);
  v75 = v16;
  if (v16)
    xpc_retain(v16);
  else
    v75 = xpc_null_create();
  memset(buf, 0, sizeof(buf));
  xpc::dyn_cast_or_default();
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  xpc_release(v75);
  v29 = *(_QWORD **)(a1 + 152);
  if (v29)
  {
    v30 = *a2;
    v31 = a1 + 152;
    do
    {
      v32 = v29[4];
      v33 = v32 >= (unint64_t)v30;
      if (v32 >= (unint64_t)v30)
        v34 = v29;
      else
        v34 = v29 + 1;
      if (v33)
        v31 = (uint64_t)v29;
      v29 = (_QWORD *)*v34;
    }
    while (*v34);
    if (v31 != a1 + 152 && (unint64_t)v30 >= *(_QWORD *)(v31 + 32))
      std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase((_QWORD *)(a1 + 144), v31);
  }
  v35 = xpc_null_create();
  v36 = xpc_null_create();
  v37 = *a3;
  *a3 = v35;
  xpc_release(v37);
  xpc_release(v36);
  v38 = *(NSObject **)(a1 + 112);
  if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
  {
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
      goto LABEL_161;
    goto LABEL_75;
  }
  v68 = object;
  if (SHIBYTE(object[2]) < 0)
    v68 = (xpc_object_t *)object[0];
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v68;
  _os_log_debug_impl(&dword_1BF566000, v38, OS_LOG_TYPE_DEBUG, "#D Client '%s' checked out", buf, 0xCu);
  if (SHIBYTE(object[2]) < 0)
LABEL_75:
    operator delete(object[0]);
LABEL_161:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF56C754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  const void *v5;
  uint64_t v6;
  xpc_object_t v7;
  uint64_t v8;
  xpc_object_t v9;
  const void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  _QWORD *v15;
  _QWORD aBlock[4];
  void *v17;
  xpc_object_t object[5];
  void *v19;

  v2 = *a1;
  v3 = **a1;
  v4 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v3 + 120, (const void **)*a1 + 1);
  v5 = (const void *)v2[5];
  if ((uint64_t *)(v3 + 128) == v4)
  {
    if (!v5)
      goto LABEL_12;
    v7 = xpc_null_create();
    v8 = v2[5];
    object[0] = v7;
    v9 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v8 + 16))(v8, 3760250882, object);
    xpc_release(object[0]);
    xpc_release(v9);
  }
  else if (v5)
  {
    object[0] = 0;
    object[1] = object;
    object[2] = (xpc_object_t)0x3002000000;
    object[3] = __Block_byref_object_copy__7;
    object[4] = __Block_byref_object_dispose__7;
    v19 = (void *)0xAAAAAAAAAAAAAAAALL;
    v6 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_10;
    aBlock[3] = &__block_descriptor_tmp_11_10;
    v17 = _Block_copy(v5);
    v19 = _Block_copy(aBlock);
    v14[0] = v6;
    v14[1] = 0x40000000;
    v14[2] = ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_12;
    v14[3] = &unk_1E7922CC8;
    v14[4] = object;
    v15 = v14;
    dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(v4[7], (xpc_object_t)v2[4], (void **)&v15);
    _Block_object_dispose(object, 8);
    if (v19)
      _Block_release(v19);
    if (v17)
      _Block_release(v17);
  }
  else
  {
    object[0] = &__block_literal_global_7;
    dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(v4[7], (xpc_object_t)v2[4], object);
  }
  v10 = (const void *)v2[5];
  if (v10)
    _Block_release(v10);
LABEL_12:
  xpc_release((xpc_object_t)v2[4]);
  v2[4] = 0;
  if (*((char *)v2 + 31) < 0)
    operator delete((void *)v2[1]);
  operator delete(v2);
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF56CB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,xpc_object_t object,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock)
{
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;

  xpc_release(object);
  xpc_release(v27);
  std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&a9);
  v29 = (std::__shared_weak_count *)v26[2];
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v26);
  _Unwind_Resume(a1);
}

void ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke(uint64_t a1, void **a2, void **a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  xpc_object_t object;
  xpc_object_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  v8 = v5;
  if (!v5)
  {
    v8 = xpc_null_create();
    v6 = *a3;
    object = v6;
    if (v6)
      goto LABEL_3;
LABEL_5:
    object = xpc_null_create();
    goto LABEL_6;
  }
  xpc_retain(v5);
  v6 = *a3;
  object = v6;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  xpc_retain(v6);
LABEL_6:
  (*(void (**)(uint64_t, xpc_object_t *, xpc_object_t *))(*(_QWORD *)v4 + 40))(v4, &v8, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v8);
}

void sub_1BF56CCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10)
{
  xpc_release(object);
  xpc_release(a10);
  _Unwind_Resume(a1);
}

void ABMServerInternal::handleMessage_sync(uint64_t a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  __int128 *v13;
  NSObject *v14;
  _BOOL4 v15;
  xpc_object_t v16;
  uint64_t v17;
  uint64_t v18;
  xpc_object_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _xpc_connection_s *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string *v27;
  void **v28;
  __int128 v29;
  int v30;
  std::string::size_type v31;
  xpc_connection_t v32;
  xpc_object_t v33;
  void *__p[2];
  char v35;
  std::string v36;
  __int128 *v37;
  std::__shared_weak_count *v38;
  uint8_t buf[4];
  std::string *v40;
  __int16 v41;
  void **v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v37 = 0;
    v38 = 0;
    v7 = (_QWORD *)(a1 + 152);
    v8 = *(_QWORD **)(a1 + 152);
    if (!v8)
      goto LABEL_15;
  }
  else
  {
    v6 = xpc_null_create();
    v37 = 0;
    v38 = 0;
    v7 = (_QWORD *)(a1 + 152);
    v8 = *(_QWORD **)(a1 + 152);
    if (!v8)
    {
LABEL_15:
      v13 = 0;
      goto LABEL_16;
    }
  }
  v9 = v7;
  do
  {
    v10 = v8[4];
    v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6)
      v12 = v8;
    else
      v12 = v8 + 1;
    if (v11)
      v9 = v8;
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v7 || (unint64_t)v6 < v9[4])
    goto LABEL_15;
  v13 = (__int128 *)v9[5];
  v20 = (std::__shared_weak_count *)v9[6];
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v37 = v13;
  v38 = v20;
LABEL_16:
  xpc_release(v6);
  v14 = *(NSObject **)(a1 + 112);
  v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
  if (v13)
  {
    if (!v15)
      goto LABEL_21;
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v29 = *v13;
      v36.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v29;
    }
    v30 = SHIBYTE(v36.__r_.__value_.__r.__words[2]);
    v31 = v36.__r_.__value_.__r.__words[0];
    xpc::object::to_string(a3);
    v27 = &v36;
    if (v30 < 0)
      v27 = (std::string *)v31;
    if (v35 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
  }
  else
  {
    if (!v15)
      goto LABEL_21;
    xpc::object::to_string((xpc::object *)a2);
    xpc::object::to_string(a3);
    v27 = &v36;
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
    if (v35 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
  }
  *(_DWORD *)buf = 136315394;
  v40 = v27;
  v41 = 2080;
  v42 = v28;
  _os_log_debug_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEBUG, "#D Message from %s:\n%s", buf, 0x16u);
  if (v35 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_21:
  v16 = *(xpc_object_t *)a3;
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  if (v16)
  {
    xpc_retain(v16);
  }
  else
  {
    v16 = xpc_null_create();
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  }
  v17 = MEMORY[0x1C3B8CD78](v16);
  v18 = MEMORY[0x1E0C812F8];
  if (v17 == MEMORY[0x1E0C812F8])
  {
    v19 = *a2;
    v33 = v19;
    if (v19)
    {
      xpc_retain(v19);
    }
    else
    {
      v19 = xpc_null_create();
      v33 = v19;
    }
    ABMServerInternal::handleInternalMessage_sync(a1, &v33, (xpc_object_t *)&v36.__r_.__value_.__l.__data_);
    xpc_release(v19);
    v33 = 0;
    v16 = (xpc_object_t)v36.__r_.__value_.__r.__words[0];
  }
  if (MEMORY[0x1C3B8CD78](v16) == v18)
  {
    v23 = (_xpc_connection_s *)*a2;
    v32 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      v23 = (_xpc_connection_s *)xpc_null_create();
      v32 = v23;
    }
    ABMServerInternal::handlePublicMessage_sync(a1, &v32, (xpc_object_t *)&v36.__r_.__value_.__l.__data_);
    xpc_release(v23);
    v32 = 0;
  }
  xpc_release(v36.__r_.__value_.__l.__data_);
  v24 = v38;
  if (v38)
  {
    v25 = (unint64_t *)&v38->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1BF56D054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1BF56D074(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  void *v15;

  xpc_release(v15);
  xpc_release(object);
  JUMPOUT(0x1BF56D0F0);
}

void sub_1BF56D094(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  xpc_release(v15);
  xpc_release(a15);
  JUMPOUT(0x1BF56D0F0);
}

void sub_1BF56D100(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t Service::isServerDown(Service *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 1;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 80))(v5);
  else
    v6 = 1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
    return v6;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return v6;
}

void sub_1BF56D1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;
  std::__shared_weak_count *v3;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    _Block_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    _Block_release(v1);
}

void dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(uint64_t *a1, unsigned int *a2, void **a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  xpc_object_t object;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v3 + 16))(v3, v4, &object);
  xpc_release(object);
}

void sub_1BF56D3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2Mode_sync(_QWORD *a1, xpc_object_t *a2, unsigned int a3)
{
  __CFDictionary *value;
  uint64_t v7;
  __CFDictionary *v8;
  uint64_t v9;
  __CFDictionary *v10;
  unsigned int v11;
  __CFDictionary *v12;
  unsigned int v13;
  __CFDictionary *v14;
  unsigned int v15;
  __CFDictionary *v16;
  unsigned int v17;
  __CFDictionary *v18;
  unsigned int v19;
  __CFDictionary *v20;
  __CFDictionary *v21;
  const object *v22;
  double v23;
  double v24;
  __CFDictionary *v25;
  __CFDictionary *v26;
  __CFDictionary *v27;
  __CFDictionary *v28;
  __CFDictionary *v29;
  __CFDictionary *v30;
  __CFDictionary *v31;
  __CFDictionary *v32;
  __CFDictionary *v33;
  __CFDictionary *v34;
  __CFDictionary *v35;
  __CFDictionary *v36;
  __CFDictionary *v37;
  xpc_object_t v38;
  const object *v39;
  CFMutableDictionaryRef v40;
  CFTypeID v41;
  CFMutableDictionaryRef v42;
  xpc_object_t v43;
  const object *v44;
  CFTypeID v45;
  CFMutableDictionaryRef v46;
  xpc_object_t v47;
  const object *v48;
  CFTypeID v49;
  CFMutableDictionaryRef v50;
  xpc_object_t v51;
  const object *v52;
  CFTypeID v53;
  CFMutableDictionaryRef v54;
  xpc_object_t v55;
  const object *v56;
  CFTypeID v57;
  CFMutableDictionaryRef v58;
  xpc_object_t v59;
  const object *v60;
  CFTypeID v61;
  CFMutableDictionaryRef v62;
  xpc_object_t v63;
  const object *v64;
  CFTypeID v65;
  CFMutableDictionaryRef v66;
  unsigned int v67;
  const __CFAllocator *v68;
  __CFDictionary *Mutable;
  __CFDictionary *v70;
  uint64_t v71;
  CFDataRef v72;
  CFDataRef v73;
  uint64_t v74;
  void *v75;
  CFMutableDictionaryRef v76;
  __CFDictionary *v77;
  __CFDictionary *v78;
  __CFDictionary *v79;
  __CFDictionary *v80;
  __CFDictionary *v81;
  __CFDictionary *v82;
  __CFDictionary *v83;
  __CFDictionary *v84;
  __CFDictionary *v85;
  __CFDictionary *v86;
  __CFDictionary *v87;
  __CFDictionary *v88;
  __CFDictionary *v89;
  __CFDictionary *v90;
  __CFDictionary *v91;
  __CFDictionary *v92;
  __CFDictionary *v93;
  __CFDictionary *v94;
  __CFDictionary *v95;
  __CFDictionary *v96;
  __CFDictionary *v97;
  __CFDictionary *v98;
  __CFDictionary *v99;
  __CFDictionary *v100;
  __CFDictionary *v101;
  __CFDictionary *v102;
  __CFDictionary *v103;
  capabilities::abs *v104;
  __CFDictionary *v105;
  unsigned int v106;
  __CFDictionary *v107;
  __CFDictionary *v108;
  __CFDictionary *v109;
  __CFDictionary *v110;
  unsigned int v111;
  __CFDictionary *v112;
  uint64_t v113;
  __CFDictionary *v114;
  uint64_t v115;
  __CFDictionary *v116;
  __CFDictionary *v117;
  void *v118;
  void *v119;
  uint64_t (*v120)(uint64_t);
  CFTypeRef v121;
  CFTypeRef v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  CFMutableDictionaryRef v140;
  CFMutableDictionaryRef v141;
  CFMutableDictionaryRef v142;
  CFMutableDictionaryRef v143;
  CFMutableDictionaryRef v144;
  CFMutableDictionaryRef cf;
  uint64_t v146;
  unsigned int v147;
  CFDataRef v148;
  __CFDictionary *v149;
  CFMutableDictionaryRef v150;
  CFMutableDictionaryRef v151;
  CFMutableDictionaryRef v152;
  CFMutableDictionaryRef v153;
  CFMutableDictionaryRef v154;
  CFMutableDictionaryRef v155;
  CFMutableDictionaryRef v156;
  UInt8 bytes[8];
  xpc_object_t v158;
  CFMutableDictionaryRef v159[2];

  *(_QWORD *)bytes = 0xAAAAAAAAAAAAAAAALL;
  value = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Policy");
  v159[0] = value;
  if (value)
    xpc_retain(value);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v7 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  *(_QWORD *)bytes = v7;
  v8 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_PowerThreshold");
  v159[0] = v8;
  if (v8)
    xpc_retain(v8);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v9 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v10 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RB_Threshold");
  v159[0] = v10;
  if (v10)
    xpc_retain(v10);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v12 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_LTE_TxDenialThreshold");
  v159[0] = v12;
  if (v12)
    xpc_retain(v12);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v14 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_APTTable");
  v159[0] = v14;
  if (v14)
    xpc_retain(v14);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v15 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v16 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_ControllerTxPowerLimit");
  v159[0] = v16;
  if (v16)
    xpc_retain(v16);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v17 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v18 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_WCI2PowerLimit");
  v159[0] = v18;
  if (v18)
    xpc_retain(v18);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v19 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v20 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_LinkPathLossThreshold");
  v159[0] = v20;
  if (v20)
    xpc_retain(v20);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v138 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v21 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RBFilterAlpha");
  v159[0] = v21;
  if (v21)
    xpc_retain(v21);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)v159, v22, 0.0);
  v24 = v23;
  xpc_release(v159[0]);
  v25 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_FilterRBThreshold");
  v159[0] = v25;
  if (v25)
    xpc_retain(v25);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v137 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v26 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_ControllerTxPowerLimitTO");
  v159[0] = v26;
  if (v26)
    xpc_retain(v26);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v136 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v27 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_WCI2PowerLimitTO");
  v159[0] = v27;
  if (v27)
    xpc_retain(v27);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v135 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v28 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_MaxAllowedFrameDenials");
  v159[0] = v28;
  if (v28)
    xpc_retain(v28);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v146 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v29 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_FrameDenialWindow");
  v159[0] = v29;
  if (v29)
    xpc_retain(v29);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v139 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v30 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_TxPowerThresholdForAdvTxNotice");
  v159[0] = v30;
  if (v30)
    xpc_retain(v30);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v133 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v31 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_RbThresholdForAdvTxNotice");
  v159[0] = v31;
  if (v31)
    xpc_retain(v31);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v132 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v32 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Controller_RB_Threshold");
  v159[0] = v32;
  if (v32)
    xpc_retain(v32);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v131 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v33 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Harq_nack_ratio_Threshold");
  v159[0] = v33;
  if (v33)
    xpc_retain(v33);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v130 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v34 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Controller_PowerLimiting_Enable");
  v159[0] = v34;
  if (v34)
    xpc_retain(v34);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v129 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v35 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_enabled");
  v159[0] = v35;
  if (v35)
    xpc_retain(v35);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v128 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v36 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_critical_ul_ca_bitmap");
  v159[0] = v36;
  if (v36)
    xpc_retain(v36);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v127 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v37 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_tx_denial_ca_bitmap");
  v159[0] = v37;
  if (v37)
    xpc_retain(v37);
  else
    v159[0] = (CFMutableDictionaryRef)xpc_null_create();
  v126 = xpc::dyn_cast_or_default((xpc *)v159, 0);
  xpc_release(v159[0]);
  v38 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_ca_grp_bitmap");
  v158 = v38;
  if (v38)
    xpc_retain(v38);
  else
    v158 = xpc_null_create();
  v134 = v19;
  xpc::bridge((xpc *)&v158, v39);
  v40 = v159[0];
  if (!v159[0] || (v41 = CFGetTypeID(v159[0]), v41 != CFArrayGetTypeID()))
  {
    v156 = 0;
    v42 = v159[0];
    if (!v159[0])
      goto LABEL_76;
    goto LABEL_75;
  }
  v156 = v40;
  CFRetain(v40);
  v42 = v159[0];
  if (v159[0])
LABEL_75:
    CFRelease(v42);
LABEL_76:
  xpc_release(v158);
  v43 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_consecutive_denial_threshold");
  v158 = v43;
  if (v43)
    xpc_retain(v43);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v44);
  if (!v159[0] || (cf = v159[0], v45 = CFGetTypeID(v159[0]), v45 != CFArrayGetTypeID()))
  {
    cf = 0;
    v155 = 0;
    v46 = v159[0];
    if (!v159[0])
      goto LABEL_85;
    goto LABEL_84;
  }
  v155 = cf;
  CFRetain(cf);
  v46 = v159[0];
  if (v159[0])
LABEL_84:
    CFRelease(v46);
LABEL_85:
  xpc_release(v158);
  v47 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_duty_cycle_numerator_rx_prio_req");
  v158 = v47;
  if (v47)
    xpc_retain(v47);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v48);
  if (!v159[0] || (v144 = v159[0], v49 = CFGetTypeID(v159[0]), v49 != CFArrayGetTypeID()))
  {
    v144 = 0;
    v154 = 0;
    v50 = v159[0];
    if (!v159[0])
      goto LABEL_94;
    goto LABEL_93;
  }
  v154 = v144;
  CFRetain(v144);
  v50 = v159[0];
  if (v159[0])
LABEL_93:
    CFRelease(v50);
LABEL_94:
  xpc_release(v158);
  v51 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_power_threshold");
  v158 = v51;
  if (v51)
    xpc_retain(v51);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v52);
  if (!v159[0] || (v143 = v159[0], v53 = CFGetTypeID(v159[0]), v53 != CFArrayGetTypeID()))
  {
    v143 = 0;
    v153 = 0;
    v54 = v159[0];
    if (!v159[0])
      goto LABEL_103;
    goto LABEL_102;
  }
  v153 = v143;
  CFRetain(v143);
  v54 = v159[0];
  if (v159[0])
LABEL_102:
    CFRelease(v54);
LABEL_103:
  xpc_release(v158);
  v55 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_RB_threshold");
  v158 = v55;
  if (v55)
    xpc_retain(v55);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v56);
  if (!v159[0] || (v142 = v159[0], v57 = CFGetTypeID(v159[0]), v57 != CFArrayGetTypeID()))
  {
    v142 = 0;
    v152 = 0;
    v58 = v159[0];
    if (!v159[0])
      goto LABEL_112;
    goto LABEL_111;
  }
  v152 = v142;
  CFRetain(v142);
  v58 = v159[0];
  if (v159[0])
LABEL_111:
    CFRelease(v58);
LABEL_112:
  xpc_release(v158);
  v59 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_advance_notice_power_threshold");
  v158 = v59;
  if (v59)
    xpc_retain(v59);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v60);
  if (!v159[0] || (v141 = v159[0], v61 = CFGetTypeID(v159[0]), v61 != CFArrayGetTypeID()))
  {
    v141 = 0;
    v151 = 0;
    v62 = v159[0];
    if (!v159[0])
      goto LABEL_121;
    goto LABEL_120;
  }
  v151 = v141;
  CFRetain(v141);
  v62 = v159[0];
  if (v159[0])
LABEL_120:
    CFRelease(v62);
LABEL_121:
  xpc_release(v158);
  v63 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_Ext_power_limiting_RB_threshold");
  v158 = v63;
  if (v63)
    xpc_retain(v63);
  else
    v158 = xpc_null_create();
  xpc::bridge((xpc *)&v158, v64);
  if (!v159[0] || (v140 = v159[0], v65 = CFGetTypeID(v159[0]), v65 != CFArrayGetTypeID()))
  {
    v140 = 0;
    v150 = 0;
    v66 = v159[0];
    if (!v159[0])
      goto LABEL_130;
    goto LABEL_129;
  }
  v150 = v140;
  CFRetain(v140);
  v66 = v159[0];
  if (v159[0])
LABEL_129:
    CFRelease(v66);
LABEL_130:
  v123 = v17;
  v124 = v15;
  v125 = v13;
  v67 = v11;
  xpc_release(v158);
  v149 = 0;
  v68 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v70 = Mutable;
  if (Mutable)
    v149 = Mutable;
  v122 = (CFTypeRef)*MEMORY[0x1E0DDF2C0];
  ctu::cf::insert<__CFString const*,long long>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2C0], v146, v68);
  v121 = (CFTypeRef)*MEMORY[0x1E0DDF220];
  ctu::cf::insert<__CFString const*,long long>(v70, (CFTypeRef)*MEMORY[0x1E0DDF220], v139, v68);
  v71 = v9;
  v72 = CFDataCreate(v68, bytes, 8);
  v73 = v72;
  v147 = a3;
  if (a3)
    v74 = 20;
  else
    v74 = 18;
  v75 = (void *)a1[v74];
  v148 = v72;
  if (v75)
    CFRetain(v75);
  v159[0] = *(CFMutableDictionaryRef *)MEMORY[0x1E0DDF210];
  v76 = v159[0];
  if (v159[0])
    CFRetain(v159[0]);
  v158 = v73;
  if (v73)
  {
    CFRetain(v73);
    if (v76)
      CFDictionarySetValue((CFMutableDictionaryRef)v75, v76, v73);
    CFRelease(v73);
  }
  if (v76)
    CFRelease(v76);
  if (v75)
    CFRelease(v75);
  v77 = (__CFDictionary *)a1[v74];
  v159[0] = v77;
  if (v77)
    CFRetain(v77);
  ctu::cf::update<__CFString const*,long long>(v77, (CFTypeRef)*MEMORY[0x1E0DDF360], v71, v68);
  if (v77)
    CFRelease(v77);
  v78 = (__CFDictionary *)a1[v74];
  v159[0] = v78;
  if (v78)
    CFRetain(v78);
  ctu::cf::update<__CFString const*,unsigned int>(v78, (CFTypeRef)*MEMORY[0x1E0DDF2F0], v67, v68);
  if (v78)
    CFRelease(v78);
  v79 = (__CFDictionary *)a1[v74];
  v159[0] = v79;
  if (v79)
    CFRetain(v79);
  ctu::cf::update<__CFString const*,unsigned int>(v79, (CFTypeRef)*MEMORY[0x1E0DDF6E0], v125, v68);
  if (v79)
    CFRelease(v79);
  v80 = (__CFDictionary *)a1[v74];
  v159[0] = v80;
  if (v80)
    CFRetain(v80);
  ctu::cf::update<__CFString const*,unsigned int>(v80, (CFTypeRef)*MEMORY[0x1E0DDF238], v124, v68);
  if (v80)
    CFRelease(v80);
  v81 = (__CFDictionary *)a1[v74];
  v159[0] = v81;
  if (v81)
    CFRetain(v81);
  ctu::cf::update<__CFString const*,unsigned int>(v81, (CFTypeRef)*MEMORY[0x1E0DDF508], v123, v68);
  if (v81)
    CFRelease(v81);
  v82 = (__CFDictionary *)a1[v74];
  v159[0] = v82;
  if (v82)
    CFRetain(v82);
  ctu::cf::update<__CFString const*,unsigned int>(v82, (CFTypeRef)*MEMORY[0x1E0DDF3C8], v134, v68);
  if (v82)
    CFRelease(v82);
  v83 = (__CFDictionary *)a1[v74];
  v159[0] = v83;
  if (v83)
    CFRetain(v83);
  ctu::cf::update<__CFString const*,unsigned int>(v83, (CFTypeRef)*MEMORY[0x1E0DDF4E8], v138, v68);
  if (v83)
    CFRelease(v83);
  v84 = (__CFDictionary *)a1[v74];
  v159[0] = v84;
  if (v84)
    CFRetain(v84);
  ctu::cf::update<__CFString const*,double>(v84, (CFTypeRef)*MEMORY[0x1E0DDF340], v68, v24);
  if (v84)
    CFRelease(v84);
  v85 = (__CFDictionary *)a1[v74];
  v159[0] = v85;
  if (v85)
    CFRetain(v85);
  ctu::cf::update<__CFString const*,unsigned int>(v85, (CFTypeRef)*MEMORY[0x1E0DDF440], v137, v68);
  if (v85)
    CFRelease(v85);
  v86 = (__CFDictionary *)a1[v74];
  v159[0] = v86;
  if (v86)
    CFRetain(v86);
  ctu::cf::update<__CFString const*,unsigned int>(v86, (CFTypeRef)*MEMORY[0x1E0DDF680], v136, v68);
  if (v86)
    CFRelease(v86);
  v87 = (__CFDictionary *)a1[v74];
  v159[0] = v87;
  if (v87)
    CFRetain(v87);
  ctu::cf::update<__CFString const*,unsigned int>(v87, (CFTypeRef)*MEMORY[0x1E0DDF588], v135, v68);
  if (v87)
    CFRelease(v87);
  v88 = (__CFDictionary *)a1[v74];
  v159[0] = v88;
  if (v88)
    CFRetain(v88);
  ctu::cf::update<__CFString const*,__CFDictionary *>(v88, (CFTypeRef)*MEMORY[0x1E0DDF5B0], v70);
  if (v88)
    CFRelease(v88);
  v89 = (__CFDictionary *)a1[v74];
  v159[0] = v89;
  if (v89)
    CFRetain(v89);
  ctu::cf::update<__CFString const*,long long>(v89, (CFTypeRef)*MEMORY[0x1E0DDF6A8], v133, v68);
  if (v89)
    CFRelease(v89);
  v90 = (__CFDictionary *)a1[v74];
  v159[0] = v90;
  if (v90)
    CFRetain(v90);
  ctu::cf::update<__CFString const*,long long>(v90, (CFTypeRef)*MEMORY[0x1E0DDF5D8], v132, v68);
  if (v90)
    CFRelease(v90);
  v91 = (__CFDictionary *)a1[v74];
  v159[0] = v91;
  if (v91)
    CFRetain(v91);
  ctu::cf::update<__CFString const*,long long>(v91, (CFTypeRef)*MEMORY[0x1E0DDF4B0], v131, v68);
  if (v91)
    CFRelease(v91);
  v92 = (__CFDictionary *)a1[v74];
  v159[0] = v92;
  if (v92)
    CFRetain(v92);
  ctu::cf::update<__CFString const*,long long>(v92, (CFTypeRef)*MEMORY[0x1E0DDF510], v130, v68);
  if (v92)
    CFRelease(v92);
  v93 = (__CFDictionary *)a1[v74];
  v159[0] = v93;
  if (v93)
    CFRetain(v93);
  ctu::cf::update<__CFString const*,BOOL>(v93, (CFTypeRef)*MEMORY[0x1E0DDF678], v129);
  if (v93)
    CFRelease(v93);
  v94 = (__CFDictionary *)a1[v74];
  v159[0] = v94;
  if (v94)
    CFRetain(v94);
  ctu::cf::update<__CFString const*,BOOL>(v94, (CFTypeRef)*MEMORY[0x1E0DDF550], v128);
  if (v94)
    CFRelease(v94);
  v95 = (__CFDictionary *)a1[v74];
  v159[0] = v95;
  if (v95)
    CFRetain(v95);
  ctu::cf::update<__CFString const*,long long>(v95, (CFTypeRef)*MEMORY[0x1E0DDF4B8], v127, v68);
  if (v95)
    CFRelease(v95);
  v96 = (__CFDictionary *)a1[v74];
  v159[0] = v96;
  if (v96)
    CFRetain(v96);
  ctu::cf::update<__CFString const*,long long>(v96, (CFTypeRef)*MEMORY[0x1E0DDF438], v126, v68);
  if (v96)
    CFRelease(v96);
  v97 = (__CFDictionary *)a1[v74];
  v159[0] = v97;
  if (v97)
    CFRetain(v97);
  ctu::cf::update<__CFString const*,__CFArray const*>(v97, (CFTypeRef)*MEMORY[0x1E0DDF3B0], v156);
  if (v97)
    CFRelease(v97);
  v98 = (__CFDictionary *)a1[v74];
  v159[0] = v98;
  if (v98)
    CFRetain(v98);
  ctu::cf::update<__CFString const*,__CFArray const*>(v98, (CFTypeRef)*MEMORY[0x1E0DDF688], cf);
  if (v98)
    CFRelease(v98);
  v99 = (__CFDictionary *)a1[v74];
  v159[0] = v99;
  if (v99)
    CFRetain(v99);
  ctu::cf::update<__CFString const*,__CFArray const*>(v99, (CFTypeRef)*MEMORY[0x1E0DDF698], v144);
  if (v99)
    CFRelease(v99);
  v100 = (__CFDictionary *)a1[v74];
  v159[0] = v100;
  if (v100)
    CFRetain(v100);
  ctu::cf::update<__CFString const*,__CFArray const*>(v100, (CFTypeRef)*MEMORY[0x1E0DDF6A0], v143);
  if (v100)
    CFRelease(v100);
  v101 = (__CFDictionary *)a1[v74];
  v159[0] = v101;
  if (v101)
    CFRetain(v101);
  ctu::cf::update<__CFString const*,__CFArray const*>(v101, (CFTypeRef)*MEMORY[0x1E0DDF640], v142);
  if (v101)
    CFRelease(v101);
  v102 = (__CFDictionary *)a1[v74];
  v159[0] = v102;
  if (v102)
    CFRetain(v102);
  ctu::cf::update<__CFString const*,__CFArray const*>(v102, (CFTypeRef)*MEMORY[0x1E0DDF690], v141);
  if (v102)
    CFRelease(v102);
  v103 = (__CFDictionary *)a1[v74];
  v159[0] = v103;
  if (v103)
    CFRetain(v103);
  ctu::cf::update<__CFString const*,__CFArray const*>(v103, (CFTypeRef)*MEMORY[0x1E0DDF638], v140);
  if (v103)
    CFRelease(v103);
  if (capabilities::abs::supportsCoexEur5G(v104))
  {
    v105 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_CoexTech");
    v159[0] = v105;
    if (v105)
      xpc_retain(v105);
    else
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    v106 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v107 = (__CFDictionary *)a1[v74];
    v159[0] = v107;
    if (v107)
      CFRetain(v107);
    ctu::cf::update<__CFString const*,unsigned int>(v107, (CFTypeRef)*MEMORY[0x1E0DDF2E8], v147, v68);
    if (v107)
      CFRelease(v107);
    v108 = (__CFDictionary *)a1[v74];
    v159[0] = v108;
    if (v108)
      CFRetain(v108);
    ctu::cf::update<__CFString const*,unsigned int>(v108, (CFTypeRef)*MEMORY[0x1E0DDF320], v147, v68);
    if (v108)
      CFRelease(v108);
    v109 = (__CFDictionary *)a1[v74];
    v159[0] = v109;
    if (v109)
      CFRetain(v109);
    ctu::cf::update<__CFString const*,unsigned int>(v109, (CFTypeRef)*MEMORY[0x1E0DDF248], v106, v68);
    if (v109)
      CFRelease(v109);
    v110 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_TxDenialThresholdSlots");
    v159[0] = v110;
    if (v110)
      xpc_retain(v110);
    else
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    v111 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v112 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_MaxAllowedSlotDenials");
    v159[0] = v112;
    if (v112)
      xpc_retain(v112);
    else
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    v113 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v114 = (__CFDictionary *)xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Mode_NGC_SlotsDenialWindow");
    v159[0] = v114;
    if (v114)
      xpc_retain(v114);
    else
      v159[0] = (CFMutableDictionaryRef)xpc_null_create();
    v115 = xpc::dyn_cast_or_default((xpc *)v159, 0);
    xpc_release(v159[0]);
    v159[0] = 0;
    v116 = CFDictionaryCreateMutable(v68, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v117 = v116;
    if (v116)
      v159[0] = v116;
    ctu::cf::insert<__CFString const*,long long>(v116, v122, v113, v68);
    ctu::cf::insert<__CFString const*,long long>(v117, v121, v115, v68);
    v118 = (void *)a1[v74];
    v158 = v118;
    if (v118)
      CFRetain(v118);
    ctu::cf::update<__CFString const*,unsigned int>((__CFDictionary *)v118, (CFTypeRef)*MEMORY[0x1E0DDF6E8], v111, v68);
    if (v118)
      CFRelease(v118);
    v119 = (void *)a1[v74];
    v158 = v119;
    if (v119)
      CFRetain(v119);
    ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v119, (CFTypeRef)*MEMORY[0x1E0DDF648], v117);
    if (v119)
      CFRelease(v119);
    if (v117)
      CFRelease(v117);
  }
  v159[0] = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, 0, 0, v159);
  v120 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v159[0])
    v120 = 0;
  if (v120)
  {
    CFDictionaryRemoveValue(v159[0], (const void *)*MEMORY[0x1E0DDF580]);
    CFDictionaryRemoveValue(v159[0], (const void *)*MEMORY[0x1E0DDF458]);
  }
  coex::Module::State::setPolicy_sync(a1, v147);
  if (v159[0])
    CFRelease(v159[0]);
  if (v148)
    CFRelease(v148);
  if (v149)
    CFRelease(v149);
  if (v150)
    CFRelease(v150);
  if (v151)
    CFRelease(v151);
  if (v152)
    CFRelease(v152);
  if (v153)
    CFRelease(v153);
  if (v154)
    CFRelease(v154);
  if (v155)
    CFRelease(v155);
  if (v156)
    CFRelease(v156);
}

void sub_1BF56E8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,const void *a31,const void *a32,const void *a33)
{
  uint64_t v33;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v33 - 120));
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)(v33 - 112));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a31);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a32);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a33);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 184));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 176));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 168));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 160));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 152));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 144));
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)(v33 - 136));
  _Unwind_Resume(a1);
}

void sub_1BF56EF6C()
{
  JUMPOUT(0x1BF56EF24);
}

void ctu::cf::update<__CFString const*,void const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  CFRetain(a3);
  if (cf)
    CFDictionarySetValue(a1, cf, a3);
  CFRelease(a3);
  if (cf)
    CFRelease(cf);
}

void sub_1BF56EFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF56F010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::XpcClient::handleMessage_sync(uint64_t a1, xpc::object *a2)
{
  NSObject *v4;
  xpc_object_t value;
  xpc_object_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  NSObject *v15;
  uint8_t *v16;
  xpc_object_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  xpc_object_t v21;
  xpc_object_t object;
  _BYTE v23[12];
  __int16 v24;
  uint8_t *v25;
  uint8_t buf[8];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string(a2);
    v18 = v27 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v23 = 136315138;
    *(_QWORD *)&v23[4] = v18;
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Got Message:\n%s", v23, 0xCu);
    if (v27 < 0)
      operator delete(*(void **)buf);
  }
  value = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kMessageId");
  v6 = value;
  object = value;
  if (value)
  {
    xpc_retain(value);
  }
  else
  {
    v6 = xpc_null_create();
    object = v6;
  }
  if (MEMORY[0x1C3B8CD78](v6) == MEMORY[0x1E0C81350])
  {
    v15 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string(a2);
      v16 = v27 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v23 = 136315394;
      *(_QWORD *)&v23[4] = "kMessageId";
      v24 = 2080;
      v25 = v16;
      _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Message was missing key %s from: %s", v23, 0x16u);
      if (v27 < 0)
        operator delete(*(void **)buf);
    }
  }
  else
  {
    v7 = xpc::dyn_cast_or_default((xpc *)&object, 0);
    v8 = v7;
    v9 = *(_QWORD *)(a1 + 112);
    if (!v9)
      goto LABEL_16;
    v10 = a1 + 112;
    do
    {
      v11 = *(_DWORD *)(v9 + 32);
      v12 = v11 < v7;
      if (v11 >= v7)
        v13 = (uint64_t *)v9;
      else
        v13 = (uint64_t *)(v9 + 8);
      if (!v12)
        v10 = v9;
      v9 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 112 && *(_DWORD *)(v10 + 32) <= v7)
    {
      v17 = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kSubId");
      *(_QWORD *)v23 = v17;
      if (v17)
        xpc_retain(v17);
      else
        *(_QWORD *)v23 = xpc_null_create();
      v19 = xpc::dyn_cast_or_default((xpc *)v23, 0);
      v20 = *(_QWORD *)(v10 + 40);
      v21 = xpc_dictionary_get_value(*(xpc_object_t *)a2, "kMessageArgs");
      *(_QWORD *)buf = v21;
      if (v21)
        xpc_retain(v21);
      else
        *(_QWORD *)buf = xpc_null_create();
      (*(void (**)(uint64_t, uint8_t *, uint64_t))(v20 + 16))(v20, buf, v19);
      xpc_release(*(xpc_object_t *)buf);
      xpc_release(*(xpc_object_t *)v23);
    }
    else
    {
LABEL_16:
      v14 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v8;
        _os_log_error_impl(&dword_1BF566000, v14, OS_LOG_TYPE_ERROR, "Unrecognized command %d", buf, 8u);
      }
    }
  }
  xpc_release(object);
}

void sub_1BF56F300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  const void *v7;
  void *v8;
  void *aBlock;
  CFTypeRef cf;
  std::string v11;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v7 = *a3;
    cf = v7;
    if (!v7)
      goto LABEL_6;
    goto LABEL_5;
  }
  v11 = *(std::string *)a2;
  v7 = *a3;
  cf = v7;
  if (v7)
LABEL_5:
    CFRetain(v7);
LABEL_6:
  v8 = *a4;
  if (*a4)
    v8 = _Block_copy(v8);
  aBlock = v8;
  (*(void (**)(uint64_t, std::string *, CFTypeRef *, void **))(a1 + 16))(a1, &v11, &cf, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BF56F468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (aBlock)
    _Block_release(aBlock);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void coex::Module::State::setPolicy_sync(_QWORD *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  const void *v55;
  const void *v56;
  const void *v57;
  const void *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  const void *v63;
  const void *v64;
  const void *v65;
  const void *v66;
  const void *v67;
  const void *v68;
  const void *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  const void *v79;
  const void *v80;
  const void *v81;
  const void *v82;
  const void *v83;
  const void *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88;
  const void *v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  const void *v98;
  const void *v99;
  const void *v100;
  const void *v101;
  const void *v102;
  const void *v103;
  const void *v104;
  const void *v105;
  const void *v106;
  void *v107;
  const void *v108;
  int v109;
  CFMutableDictionaryRef v110;
  CFMutableDictionaryRef v111;
  uint64_t (*v112)(uint64_t);
  NSObject *v113;
  std::__shared_weak_count *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  std::__shared_weak_count *v117;
  uint64_t v118;
  CFTypeID v119;
  unint64_t *p_shared_owners;
  unint64_t v121;
  void *v122;
  NSObject *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  CFMutableDictionaryRef v130;
  NSObject *v131;
  _QWORD aBlock[6];
  std::__shared_weak_count *v133;
  _BYTE v134[16];
  void *v135;
  dispatch_object_t object;
  CFTypeRef cf;
  CFMutableDictionaryRef theDict;
  CFTypeRef v139;
  CFMutableDictionaryRef v140;
  CFMutableDictionaryRef v141;
  CFMutableDictionaryRef v142;
  CFMutableDictionaryRef v143;
  CFMutableDictionaryRef v144;
  CFMutableDictionaryRef v145;
  CFMutableDictionaryRef v146;
  CFMutableDictionaryRef v147;
  CFMutableDictionaryRef v148;
  CFMutableDictionaryRef v149;
  CFMutableDictionaryRef v150;
  CFMutableDictionaryRef v151;
  CFMutableDictionaryRef v152;
  CFMutableDictionaryRef v153;
  CFMutableDictionaryRef v154;
  CFMutableDictionaryRef v155;
  CFMutableDictionaryRef v156;
  CFMutableDictionaryRef v157;
  CFMutableDictionaryRef v158;
  CFMutableDictionaryRef v159;
  CFMutableDictionaryRef v160;
  CFMutableDictionaryRef v161;
  CFMutableDictionaryRef v162;
  CFMutableDictionaryRef v163;
  CFMutableDictionaryRef v164;
  CFMutableDictionaryRef v165;
  CFMutableDictionaryRef v166;
  CFMutableDictionaryRef v167;
  CFMutableDictionaryRef v168;
  CFMutableDictionaryRef v169;
  CFMutableDictionaryRef v170;
  CFMutableDictionaryRef v171;
  CFMutableDictionaryRef v172;
  uint8_t buf[24];
  CFMutableDictionaryRef v174;
  __int128 v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  if (a1[13])
  {
    v174 = 0;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v6 = Mutable;
    if (Mutable)
      v174 = Mutable;
    memset(buf, 170, 16);
    v7 = 20;
    if (!(_DWORD)a2)
      v7 = 18;
    v8 = (const void *)a1[v7];
    *(_QWORD *)&v175 = v8;
    if (v8)
      CFRetain(v8);
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, (const __CFDictionary *)v8);
    if (v8)
      CFRelease(v8);
    v172 = v6;
    if (v6)
      CFRetain(v6);
    v9 = (const void *)*MEMORY[0x1E0DDF360];
    v10 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF360]);
    v11 = v10;
    if (v10)
    {
      CFRelease(v10);
      ctu::cf::update<__CFString const*,void const*>(v6, v9, v11);
    }
    if (v6)
    {
      CFRelease(v6);
      v171 = v6;
      CFRetain(v6);
    }
    else
    {
      v171 = 0;
    }
    v13 = (const void *)*MEMORY[0x1E0DDF3C8];
    v14 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF3C8]);
    v15 = v14;
    if (v14)
    {
      CFRelease(v14);
      ctu::cf::update<__CFString const*,void const*>(v6, v13, v15);
    }
    if (v6)
    {
      CFRelease(v6);
      v170 = v6;
      CFRetain(v6);
    }
    else
    {
      v170 = 0;
    }
    v16 = (const void *)*MEMORY[0x1E0DDF508];
    v17 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF508]);
    v18 = v17;
    if (v17)
    {
      CFRelease(v17);
      ctu::cf::update<__CFString const*,void const*>(v6, v16, v18);
    }
    if (v6)
    {
      CFRelease(v6);
      v169 = v6;
      CFRetain(v6);
    }
    else
    {
      v169 = 0;
    }
    v19 = (const void *)*MEMORY[0x1E0DDF210];
    v20 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF210]);
    v21 = v20;
    if (v20)
    {
      CFRelease(v20);
      ctu::cf::update<__CFString const*,void const*>(v6, v19, v21);
    }
    if (v6)
    {
      CFRelease(v6);
      v168 = v6;
      CFRetain(v6);
    }
    else
    {
      v168 = 0;
    }
    v22 = (const void *)*MEMORY[0x1E0DDF2F0];
    v23 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF2F0]);
    v24 = v23;
    if (v23)
    {
      CFRelease(v23);
      ctu::cf::update<__CFString const*,void const*>(v6, v22, v24);
    }
    if (v6)
    {
      CFRelease(v6);
      v167 = v6;
      CFRetain(v6);
    }
    else
    {
      v167 = 0;
    }
    v25 = (const void *)*MEMORY[0x1E0DDF6E0];
    v26 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF6E0]);
    v27 = v26;
    if (v26)
    {
      CFRelease(v26);
      ctu::cf::update<__CFString const*,void const*>(v6, v25, v27);
    }
    if (v6)
    {
      CFRelease(v6);
      v166 = v6;
      CFRetain(v6);
    }
    else
    {
      v166 = 0;
    }
    v28 = (const void *)*MEMORY[0x1E0DDF238];
    v29 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF238]);
    v30 = v29;
    if (v29)
    {
      CFRelease(v29);
      ctu::cf::update<__CFString const*,void const*>(v6, v28, v30);
    }
    if (v6)
    {
      CFRelease(v6);
      v165 = v6;
      CFRetain(v6);
    }
    else
    {
      v165 = 0;
    }
    v31 = (const void *)*MEMORY[0x1E0DDF4E8];
    v32 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF4E8]);
    v33 = v32;
    if (v32)
    {
      CFRelease(v32);
      ctu::cf::update<__CFString const*,void const*>(v6, v31, v33);
    }
    if (v6)
    {
      CFRelease(v6);
      v164 = v6;
      CFRetain(v6);
    }
    else
    {
      v164 = 0;
    }
    v34 = (const void *)*MEMORY[0x1E0DDF340];
    v35 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF340]);
    v36 = v35;
    if (v35)
    {
      CFRelease(v35);
      ctu::cf::update<__CFString const*,void const*>(v6, v34, v36);
    }
    if (v6)
    {
      CFRelease(v6);
      v163 = v6;
      CFRetain(v6);
    }
    else
    {
      v163 = 0;
    }
    v37 = (const void *)*MEMORY[0x1E0DDF440];
    v38 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF440]);
    v39 = v38;
    if (v38)
    {
      CFRelease(v38);
      ctu::cf::update<__CFString const*,void const*>(v6, v37, v39);
    }
    if (v6)
    {
      CFRelease(v6);
      v162 = v6;
      CFRetain(v6);
    }
    else
    {
      v162 = 0;
    }
    v40 = (const void *)*MEMORY[0x1E0DDF680];
    v41 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF680]);
    v42 = v41;
    if (v41)
    {
      CFRelease(v41);
      ctu::cf::update<__CFString const*,void const*>(v6, v40, v42);
    }
    if (v6)
    {
      CFRelease(v6);
      v161 = v6;
      CFRetain(v6);
    }
    else
    {
      v161 = 0;
    }
    v43 = (const void *)*MEMORY[0x1E0DDF588];
    v44 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF588]);
    v45 = v44;
    if (v44)
    {
      CFRelease(v44);
      ctu::cf::update<__CFString const*,void const*>(v6, v43, v45);
    }
    if (v6)
    {
      CFRelease(v6);
      v160 = v6;
      CFRetain(v6);
    }
    else
    {
      v160 = 0;
    }
    v46 = (const void *)*MEMORY[0x1E0DDF5B0];
    v47 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF5B0]);
    v48 = v47;
    if (v47)
    {
      CFRelease(v47);
      ctu::cf::update<__CFString const*,void const*>(v6, v46, v48);
    }
    if (v6)
    {
      CFRelease(v6);
      v159 = v6;
      CFRetain(v6);
    }
    else
    {
      v159 = 0;
    }
    v49 = (const void *)*MEMORY[0x1E0DDF6A8];
    v50 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF6A8]);
    v51 = v50;
    if (v50)
    {
      CFRelease(v50);
      ctu::cf::update<__CFString const*,void const*>(v6, v49, v51);
    }
    if (v6)
    {
      CFRelease(v6);
      v158 = v6;
      CFRetain(v6);
    }
    else
    {
      v158 = 0;
    }
    v52 = (const void *)*MEMORY[0x1E0DDF5D8];
    v53 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF5D8]);
    v54 = v53;
    if (v53)
    {
      CFRelease(v53);
      ctu::cf::update<__CFString const*,void const*>(v6, v52, v54);
    }
    if (v6)
    {
      CFRelease(v6);
      v157 = v6;
      CFRetain(v6);
    }
    else
    {
      v157 = 0;
    }
    v55 = (const void *)*MEMORY[0x1E0DDF4B0];
    v56 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF4B0]);
    v57 = v56;
    if (v56)
    {
      CFRelease(v56);
      ctu::cf::update<__CFString const*,void const*>(v6, v55, v57);
    }
    if (v6)
    {
      CFRelease(v6);
      v156 = v6;
      CFRetain(v6);
    }
    else
    {
      v156 = 0;
    }
    v58 = (const void *)*MEMORY[0x1E0DDF510];
    v59 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF510]);
    v60 = v59;
    if (v59)
    {
      CFRelease(v59);
      ctu::cf::update<__CFString const*,void const*>(v6, v58, v60);
    }
    if (v6)
    {
      CFRelease(v6);
      v155 = v6;
      CFRetain(v6);
    }
    else
    {
      v155 = 0;
    }
    v61 = (const void *)*MEMORY[0x1E0DDF678];
    v62 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF678]);
    v63 = v62;
    if (v62)
    {
      CFRelease(v62);
      ctu::cf::update<__CFString const*,void const*>(v6, v61, v63);
    }
    if (v6)
    {
      CFRelease(v6);
      v154 = v6;
      CFRetain(v6);
    }
    else
    {
      v154 = 0;
    }
    v64 = (const void *)*MEMORY[0x1E0DDF550];
    v65 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF550]);
    v66 = v65;
    if (v65)
    {
      CFRelease(v65);
      ctu::cf::update<__CFString const*,void const*>(v6, v64, v66);
    }
    if (v6)
    {
      CFRelease(v6);
      v153 = v6;
      CFRetain(v6);
    }
    else
    {
      v153 = 0;
    }
    v67 = (const void *)*MEMORY[0x1E0DDF4B8];
    v68 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF4B8]);
    v69 = v68;
    if (v68)
    {
      CFRelease(v68);
      ctu::cf::update<__CFString const*,void const*>(v6, v67, v69);
    }
    if (v6)
    {
      CFRelease(v6);
      v152 = v6;
      CFRetain(v6);
    }
    else
    {
      v152 = 0;
    }
    v70 = (const void *)*MEMORY[0x1E0DDF438];
    v71 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF438]);
    v72 = v71;
    if (v71)
    {
      CFRelease(v71);
      ctu::cf::update<__CFString const*,void const*>(v6, v70, v72);
    }
    if (v6)
    {
      CFRelease(v6);
      v151 = v6;
      CFRetain(v6);
    }
    else
    {
      v151 = 0;
    }
    v73 = (const void *)*MEMORY[0x1E0DDF3B0];
    v74 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF3B0]);
    v75 = v74;
    if (v74)
    {
      CFRelease(v74);
      ctu::cf::update<__CFString const*,void const*>(v6, v73, v75);
    }
    if (v6)
    {
      CFRelease(v6);
      v150 = v6;
      CFRetain(v6);
    }
    else
    {
      v150 = 0;
    }
    v76 = (const void *)*MEMORY[0x1E0DDF688];
    v77 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF688]);
    v78 = v77;
    if (v77)
    {
      CFRelease(v77);
      ctu::cf::update<__CFString const*,void const*>(v6, v76, v78);
    }
    if (v6)
    {
      CFRelease(v6);
      v149 = v6;
      CFRetain(v6);
    }
    else
    {
      v149 = 0;
    }
    v79 = (const void *)*MEMORY[0x1E0DDF698];
    v80 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF698]);
    v81 = v80;
    if (v80)
    {
      CFRelease(v80);
      ctu::cf::update<__CFString const*,void const*>(v6, v79, v81);
    }
    if (v6)
    {
      CFRelease(v6);
      v148 = v6;
      CFRetain(v6);
    }
    else
    {
      v148 = 0;
    }
    v82 = (const void *)*MEMORY[0x1E0DDF6A0];
    v83 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF6A0]);
    v84 = v83;
    if (v83)
    {
      CFRelease(v83);
      ctu::cf::update<__CFString const*,void const*>(v6, v82, v84);
    }
    if (v6)
    {
      CFRelease(v6);
      v147 = v6;
      CFRetain(v6);
    }
    else
    {
      v147 = 0;
    }
    v85 = (const void *)*MEMORY[0x1E0DDF640];
    v86 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF640]);
    v87 = v86;
    if (v86)
    {
      CFRelease(v86);
      ctu::cf::update<__CFString const*,void const*>(v6, v85, v87);
    }
    if (v6)
    {
      CFRelease(v6);
      v146 = v6;
      CFRetain(v6);
    }
    else
    {
      v146 = 0;
    }
    v88 = (const void *)*MEMORY[0x1E0DDF690];
    v89 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF690]);
    v90 = v89;
    if (v89)
    {
      CFRelease(v89);
      ctu::cf::update<__CFString const*,void const*>(v6, v88, v90);
    }
    if (v6)
    {
      CFRelease(v6);
      v145 = v6;
      CFRetain(v6);
    }
    else
    {
      v145 = 0;
    }
    v91 = (const void *)*MEMORY[0x1E0DDF638];
    v92 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF638]);
    v93 = v92;
    if (v92)
    {
      CFRelease(v92);
      ctu::cf::update<__CFString const*,void const*>(v6, v91, v93);
    }
    if (v6)
    {
      CFRelease(v6);
      v144 = v6;
      CFRetain(v6);
    }
    else
    {
      v144 = 0;
    }
    v94 = (const void *)*MEMORY[0x1E0DDF2E8];
    v95 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF2E8]);
    v96 = v95;
    if (v95)
    {
      CFRelease(v95);
      ctu::cf::update<__CFString const*,void const*>(v6, v94, v96);
    }
    if (v6)
    {
      CFRelease(v6);
      v143 = v6;
      CFRetain(v6);
    }
    else
    {
      v143 = 0;
    }
    v97 = (const void *)*MEMORY[0x1E0DDF320];
    v98 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF320]);
    v99 = v98;
    if (v98)
    {
      CFRelease(v98);
      ctu::cf::update<__CFString const*,void const*>(v6, v97, v99);
    }
    if (v6)
    {
      CFRelease(v6);
      v142 = v6;
      CFRetain(v6);
    }
    else
    {
      v142 = 0;
    }
    v100 = (const void *)*MEMORY[0x1E0DDF248];
    v101 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF248]);
    v102 = v101;
    if (v101)
    {
      CFRelease(v101);
      ctu::cf::update<__CFString const*,void const*>(v6, v100, v102);
    }
    if (v6)
    {
      CFRelease(v6);
      v141 = v6;
      CFRetain(v6);
    }
    else
    {
      v141 = 0;
    }
    v103 = (const void *)*MEMORY[0x1E0DDF6E8];
    v104 = (const void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF6E8]);
    v105 = v104;
    if (v104)
    {
      CFRelease(v104);
      ctu::cf::update<__CFString const*,void const*>(v6, v103, v105);
    }
    if (v6)
    {
      CFRelease(v6);
      v140 = v6;
      CFRetain(v6);
    }
    else
    {
      v140 = 0;
    }
    v106 = (const void *)*MEMORY[0x1E0DDF648];
    v107 = (void *)(**(uint64_t (***)(uint8_t *, _QWORD))buf)(buf, *MEMORY[0x1E0DDF648]);
    v108 = v107;
    if (v107)
    {
      CFRelease(v107);
      ctu::cf::update<__CFString const*,void const*>(v6, v106, v108);
    }
    if (v6)
      CFRelease(v6);
    v109 = capabilities::abs::supportsCoexGPSReporting((capabilities::abs *)v107);
    ctu::cf::update<__CFString const*,BOOL>(v6, (CFTypeRef)*MEMORY[0x1E0DDF608], v109);
    if (!CFDictionaryGetCount(v6))
    {
      v131 = a1[5];
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v175) = 0;
        _os_log_impl(&dword_1BF566000, v131, OS_LOG_TYPE_DEFAULT, "#I Nothing in policy yet, bail\n", (uint8_t *)&v175, 2u);
      }
      goto LABEL_225;
    }
    v139 = 0;
    v110 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v111 = v110;
    if (v110)
      v139 = v110;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v110, (CFTypeRef)*MEMORY[0x1E0DDF298], v6);
    theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
    coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, 0, 0, &theDict);
    v112 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
    if (!theDict)
      v112 = 0;
    if (v112)
      CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF6B8]);
    v113 = a1[5];
    if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v175) = 138412290;
      *(_QWORD *)((char *)&v175 + 4) = v111;
      _os_log_impl(&dword_1BF566000, v113, OS_LOG_TYPE_DEFAULT, "#I Setting policy with: %@", (uint8_t *)&v175, 0xCu);
    }
    v115 = a1[9];
    v114 = (std::__shared_weak_count *)a1[10];
    *(_QWORD *)&v175 = v115;
    if (!v114 || (v116 = std::__shared_weak_count::lock(v114), (*((_QWORD *)&v175 + 1) = v116) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v117 = v116;
    v118 = a1[13];
    if (v111 && (v119 = CFGetTypeID(v111), v119 == CFDictionaryGetTypeID()))
    {
      cf = v111;
      CFRetain(v111);
    }
    else
    {
      cf = 0;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_238;
    aBlock[4] = a1;
    aBlock[5] = v115;
    v133 = v117;
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v121 = __ldxr(p_shared_owners);
    while (__stxr(v121 + 1, p_shared_owners));
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v134, (const ctu::cf::dict_adapter *)buf);
    v122 = _Block_copy(aBlock);
    v123 = a1[11];
    if (v123)
      dispatch_retain(v123);
    if (v122)
    {
      v135 = _Block_copy(v122);
      object = v123;
      if (!v123)
        goto LABEL_200;
    }
    else
    {
      v135 = 0;
      object = v123;
      if (!v123)
      {
LABEL_200:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v118 + 48))(v118, &cf, a2, &v135);
        if (object)
          dispatch_release(object);
        if (v135)
          _Block_release(v135);
        if (v123)
          dispatch_release(v123);
        if (v122)
          _Block_release(v122);
        if (cf)
          CFRelease(cf);
        MEMORY[0x1C3B8B8B4](v134);
        v124 = v133;
        if (!v133)
          goto LABEL_214;
        v125 = (unint64_t *)&v133->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
          v127 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
          if (!*((_QWORD *)&v175 + 1))
            goto LABEL_218;
        }
        else
        {
LABEL_214:
          v127 = (std::__shared_weak_count *)*((_QWORD *)&v175 + 1);
          if (!*((_QWORD *)&v175 + 1))
            goto LABEL_218;
        }
        v128 = (unint64_t *)&v127->__shared_owners_;
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        if (!v129)
        {
          ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
          std::__shared_weak_count::__release_weak(v127);
          v130 = theDict;
          if (!theDict)
            goto LABEL_220;
          goto LABEL_219;
        }
LABEL_218:
        v130 = theDict;
        if (!theDict)
        {
LABEL_220:
          if (v139)
            CFRelease(v139);
          v6 = v174;
LABEL_225:
          MEMORY[0x1C3B8B8B4](buf);
          if (v6)
            CFRelease(v6);
          return;
        }
LABEL_219:
        CFRelease(v130);
        goto LABEL_220;
      }
    }
    dispatch_retain(v123);
    goto LABEL_200;
  }
  v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Invalid driver", buf, 2u);
  }
}

void sub_1BF57058C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void coex::XpcClient::sendMessage(uint64_t a1, int a2, void **a3, int a4)
{
  void *v6;
  _QWORD v7[5];
  xpc_object_t object;
  int v9;
  int v10;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
  v7[3] = &__block_descriptor_tmp_7;
  v9 = a2;
  v6 = *a3;
  v7[4] = a1;
  object = v6;
  if (v6)
    xpc_retain(v6);
  else
    object = xpc_null_create();
  v10 = a4;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v7);
  xpc_release(object);
}

uint64_t coex::Module::State::getSubProperty@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, CFMutableDictionaryRef *a5@<X8>)
{
  uint64_t v8;
  const void *v9;
  __CFDictionary *v10;
  CFMutableDictionaryRef Mutable;
  CFTypeID v12;
  CFTypeID TypeID;
  _QWORD v15[2];

  v15[0] = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = 152;
  if (!a3)
    v8 = 136;
  v9 = *(const void **)(a1 + v8);
  if (v9)
    CFRetain(v9);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v15, (const __CFDictionary *)v9);
  if (v9)
    CFRelease(v9);
  v10 = (__CFDictionary *)(*(uint64_t (**)(_QWORD *, uint64_t))v15[0])(v15, a2);
  Mutable = v10;
  if (v10)
  {
    v12 = CFGetTypeID(v10);
    TypeID = CFDictionaryGetTypeID();
    CFRelease(Mutable);
    *a5 = 0;
    if (v12 == TypeID)
    {
      CFRetain(Mutable);
LABEL_13:
      *a5 = Mutable;
      return MEMORY[0x1C3B8B8B4](v15);
    }
  }
  else
  {
    *a5 = 0;
  }
  if (a4)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
      goto LABEL_13;
  }
  return MEMORY[0x1C3B8B8B4](v15);
}

void sub_1BF570AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void **v3;
  va_list va;

  va_start(va, a3);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(v3);
  MEMORY[0x1C3B8B8B4](va);
  _Unwind_Resume(a1);
}

void sub_1BF570AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL defaults::get(char *a1, char *a2, std::string *a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  uint64_t *v10;
  int v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  uint64_t *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB088])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC200])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01AA8])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01A80]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB090]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC248]) && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB118]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB240]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB248]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB198]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAFC0]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB190]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB048]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB0A0]))
                        goto LABEL_16;
                      return defaults::tailspin::get(a2, (uint64_t)a3);
                    }
                    return defaults::profile::get(a2, (uint64_t)a3);
                  }
                  return defaults::systemlogs::get(a2, (uint64_t)a3);
                }
                return defaults::logfilter::get(a2, (uint64_t)a3);
              }
              return defaults::ttr::get(a2, (uint64_t)a3);
            }
            return defaults::compression::get(a2, (uint64_t)a3);
          }
          return defaults::bbipc::get(a2, (uint64_t)a3);
        }
        return defaults::ipc::get(a2, (uint64_t)a3);
      }
      return defaults::coredump::get(a2, (uint64_t)a3);
    }
    return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB088])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC200])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01AA8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01A80]))
  {
    return defaults::bbtrace::get(a2, (std::string::size_type *)a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB090]))
    return defaults::coredump::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC248]) || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB118]))
    return defaults::ipc::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB240]))
    return defaults::bbipc::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB248]))
    return defaults::compression::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB198]))
    return defaults::ttr::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFAFC0]))
    return defaults::logfilter::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB190]))
    return defaults::systemlogs::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB048]))
    return defaults::profile::get(a2, (uint64_t)a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB0A0]))
    return defaults::tailspin::get(a2, (uint64_t)a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB098]))
    return defaults::tracesettings::get(a2, a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = (uint64_t *)a2;
    else
      v10 = *(uint64_t **)a2;
    v11 = 136315650;
    v12 = "prop.default";
    v13 = 2080;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid domain; domain='%s' key='%s'",
      (uint8_t *)&v11,
      0x20u);
  }
  return 0;
}

void *__copy_helper_block_e8_40c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE48c36_ZTSNSt3__18weak_ptrI11RadioModuleEE(_QWORD *a1, _QWORD *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = (void *)a2[5];
  if (result)
    result = _Block_copy(result);
  v6 = a2[6];
  v5 = a2[7];
  a1[5] = result;
  a1[6] = v6;
  a1[7] = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

BOOL prop::get_from_file(char *a1, char *a2, uint64_t a3)
{
  _BOOL8 v6;
  std::string v8;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v6 = defaults::get(a1, a2, &__p);
  if (v6)
  {
    prop::file::get<std::string>((const void **)a1, (uint64_t)a2, (uint64_t)&__p, &v8);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(std::string *)a3 = v8;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BF571218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, uint64_t a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[5];
  void *aBlock;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = a1[5];
      if (!v9)
      {
LABEL_14:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        return;
      }
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 1174405120;
      v18[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v18[3] = &__block_descriptor_tmp_11_3;
      v18[4] = v6;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = a1[5];
        v12 = (uint64_t *)(v6 + 120);
        aBlock = v10;
        v20 = v11;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
          goto LABEL_10;
      }
      else
      {
        v12 = (uint64_t *)(v6 + 120);
        aBlock = 0;
        v20 = v9;
        v13 = (std::__shared_weak_count *)a1[6];
        v21 = v13;
        if (!v13)
        {
LABEL_10:
          ctu::SharedSynchronizable<RadioModule>::execute_wrapped(v12, (uint64_t)v18);
          if (v21)
            std::__shared_weak_count::__release_weak(v21);
          if (aBlock)
            _Block_release(aBlock);
          goto LABEL_14;
        }
      }
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        v15 = __ldxr(p_shared_weak_owners);
      while (__stxr(v15 + 1, p_shared_weak_owners));
      goto LABEL_10;
    }
  }
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 48);
  if (v2)
    _Block_release(v2);
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79160B0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke(uint64_t a1, const void **a2)
{
  uint64_t v4;
  const void *v5;
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  const void *v8;
  int *v9;
  int *v10;
  CFTypeID v11;
  const __CFNumber *v12;
  int v13;
  _QWORD v14[2];
  void (*v15)(uint64_t, int);
  void *v16;
  uint64_t v17;
  CFTypeRef cf;
  _QWORD v19[2];
  uint8_t buf[4];
  const void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v6 = 0;
  if (v6)
  {
    v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v5;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Failed to set policy: %@", buf, 0xCu);
    }
  }
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v19, (const ctu::cf::dict_adapter *)(a1 + 56));
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v15 = ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke_235;
  v16 = &__block_descriptor_tmp_237;
  v8 = *a2;
  v17 = v4;
  cf = v8;
  if (v8)
    CFRetain(v8);
  v9 = (int *)(*(uint64_t (**)(_QWORD *, _QWORD))v19[0])(v19, *MEMORY[0x1E0DDF508]);
  v10 = v9;
  if (v9)
  {
    v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
    {
      *(_DWORD *)buf = -1431655766;
      v13 = ctu::cf::assign((ctu::cf *)buf, v10, v12);
      CFRelease(v10);
      if (v13)
        v15((uint64_t)v14, *(unsigned int *)buf);
    }
    else
    {
      CFRelease(v10);
    }
  }
  MEMORY[0x1C3B8B8B4](v19);
  if (cf)
    CFRelease(cf);
}

void sub_1BF571680(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF5716A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  const void **v7;
  va_list va;

  va_start(va, a7);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v7);
  MEMORY[0x1C3B8B8B4](va);
  _Unwind_Resume(a1);
}

uint64_t sValidateConnection(void *a1)
{
  xpc_object_t v1;
  xpc_object_t v2;
  xpc_object_t v3;
  _xpc_connection_s *remote_connection;
  pid_t pid;
  uint64_t v6;
  xpc_object_t xdict;

  if (a1)
  {
    v1 = a1;
    xpc_retain(a1);
    xdict = v1;
  }
  else
  {
    v1 = xpc_null_create();
    xdict = v1;
    if (!v1)
    {
      v2 = xpc_null_create();
      v1 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v1) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v1);
    goto LABEL_9;
  }
  v2 = xpc_null_create();
LABEL_8:
  xdict = v2;
LABEL_9:
  xpc_release(v1);
  v3 = xdict;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  pid = xpc_connection_get_pid(remote_connection);
  if (getpid() == pid)
  {
    v6 = 1;
  }
  else
  {
    v6 = hasBasebandEntitlement(&xdict, 0);
    v3 = xdict;
  }
  xpc_release(v3);
  return v6;
}

void sub_1BF571788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

BOOL defaults::coredump::get(const char *a1, uint64_t a2)
{
  uint64_t *v3;
  capabilities::trace *v4;
  int v5;
  unsigned __int8 v6;
  NSObject *v7;
  std::string::size_type v8;
  uint64_t *v9;
  int v10;
  std::string::size_type v11;
  char v12;
  uint64_t v13;
  std::string v15;
  uint64_t *v16;
  _QWORD v17[3];

  v3 = (uint64_t *)a1;
  v17[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v4 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]);
  v5 = (int)v4;
  if ((_DWORD)v4)
  {
    {
      GetOsLogContext(void)::sOsLogContext = 0;
      qword_1ED70F6F8 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
    }
    if (GetOsLogContext(void)::onceToken == -1)
    {
      v7 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return v5 == 0;
    }
    else
    {
      dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
      v7 = qword_1ED70F6F8;
      if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
        return v5 == 0;
    }
    v8 = *MEMORY[0x1E0CFB090];
    if (*((char *)v3 + 23) >= 0)
      v9 = v3;
    else
      v9 = (uint64_t *)*v3;
    LODWORD(v15.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v15.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 6) = v8;
    HIWORD(v15.__r_.__value_.__r.__words[2]) = 2080;
    v16 = v9;
    _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v15,
      0x20u);
  }
  else
  {
    v10 = capabilities::trace::allowed(v4);
    v17[0] = 0;
    *(_QWORD *)((char *)v17 + 7) = 0;
    std::to_string(&v15, v10);
    v17[0] = v15.__r_.__value_.__l.__size_;
    v11 = v15.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v15.__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v13 = v17[0];
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v17 + 7);
    *(_BYTE *)(a2 + 23) = v12;
  }
  return v5 == 0;
}

void sub_1BF5719AC(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF5718E8);
    JUMPOUT(0x1BF5718F0);
  }
  _Unwind_Resume(a1);
}

BOOL prop::coredump::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFB090];
  v5 = strlen((const char *)*MEMORY[0x1E0CFB090]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF571AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL prop::ipc::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFC248];
  v5 = strlen((const char *)*MEMORY[0x1E0CFC248]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF571BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL defaults::bbtrace::get(char *a1, std::string::size_type *a2)
{
  int v4;
  capabilities::trace *v5;
  capabilities::trace *v6;
  capabilities::trace *v7;
  capabilities::trace *v8;
  const char *v9;
  capabilities::radio *v10;
  const char *v11;
  const char *v12;
  capabilities::radio *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  std::string::size_type v18;
  char v19;
  std::string::size_type v20;
  _BOOL8 result;
  uint64_t v22;
  const char *v23;
  capabilities::radio *v24;
  const char *v25;
  capabilities::radio *v26;
  const char *v27;
  capabilities::radio *v28;
  const char *v29;
  const char *v30;
  capabilities::radio *v31;
  uint64_t v32;
  capabilities::radio *v33;
  const char *v34;
  capabilities::radio *v35;
  const std::string::value_type *v36;
  const char *v37;
  const char *v38;
  capabilities::radio *v39;
  capabilities::trace *v40;
  const char *v41;
  capabilities::radio *v42;
  unsigned int v43;
  const char *v44;
  const char *v45;
  const char *v46;
  capabilities::radio *v47;
  uint64_t v48;
  int v49;
  const char *v50;
  const char *v51;
  capabilities::radio *v52;
  uint64_t v53;
  const char *v54;
  capabilities::radio *v55;
  const char *v56;
  capabilities::radio *v57;
  const char *v58;
  capabilities::radio *v59;
  const char *v60;
  capabilities::radio *v61;
  const char *v62;
  capabilities::radio *v63;
  capabilities::trace *v64;
  capabilities::radio *v65;
  defaults::bbtrace *v66;
  const char *v67;
  NSObject *v68;
  std::string::size_type v69;
  char *v70;
  unsigned int count;
  unsigned int v72;
  capabilities::abs *v73;
  unsigned int v74;
  std::string v75;
  char *v76;
  _QWORD v77[3];

  v77[2] = *MEMORY[0x1E0C80C00];
  v4 = a1[23];
  if ((v4 & 0x80000000) == 0)
  {
    v5 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]);
    if ((_DWORD)v5)
    {
      v6 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB230]);
      if ((_DWORD)v6)
      {
        v7 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB460]);
        if ((_DWORD)v7)
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB028]))
          {
            if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB338]))
              goto LABEL_182;
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB2D8]))
            {
              v8 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]);
              v9 = a1;
              if ((_DWORD)v8)
                goto LABEL_9;
              goto LABEL_23;
            }
          }
LABEL_27:
          *(_QWORD *)((char *)v77 + 7) = 0;
          v77[0] = 0;
          std::to_string(&v75, 0);
          goto LABEL_28;
        }
LABEL_26:
        v17 = capabilities::trace::supportsDataLoggingByDefault(v7);
        v77[0] = 0;
        *(_QWORD *)((char *)v77 + 7) = 0;
        std::to_string(&v75, v17);
        goto LABEL_28;
      }
LABEL_25:
      v16 = capabilities::trace::supportsHighTPutByDefault(v6);
      v77[0] = 0;
      *(_QWORD *)((char *)v77 + 7) = 0;
      std::to_string(&v75, v16);
      goto LABEL_28;
    }
LABEL_24:
    v15 = capabilities::trace::enabledByDefault(v5);
    v77[0] = 0;
    *(_QWORD *)((char *)v77 + 7) = 0;
    std::to_string(&v75, v15);
    goto LABEL_28;
  }
  v9 = *(const char **)a1;
  v5 = (capabilities::trace *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]);
  if (!(_DWORD)v5)
    goto LABEL_24;
  v6 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB230]);
  if (!(_DWORD)v6)
    goto LABEL_25;
  v7 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB460]);
  if (!(_DWORD)v7)
    goto LABEL_26;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB028]))
    goto LABEL_27;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB338]))
    goto LABEL_182;
  if (!strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB2D8]))
    goto LABEL_27;
  v8 = (capabilities::trace *)strcasecmp(v9, (const char *)*MEMORY[0x1E0CFB178]);
  if (!(_DWORD)v8)
  {
LABEL_23:
    v14 = capabilities::trace::defaultHistorySizeMB(v8);
    v77[0] = 0;
    *(_QWORD *)((char *)v77 + 7) = 0;
    std::to_string(&v75, v14);
LABEL_28:
    v77[0] = v75.__r_.__value_.__l.__size_;
    v18 = v75.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v77 + 7) = *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 7);
    v19 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    if (*((char *)a2 + 23) < 0)
      operator delete((void *)*a2);
    v20 = v77[0];
    *a2 = v18;
    a2[1] = v20;
    *(std::string::size_type *)((char *)a2 + 15) = *(_QWORD *)((char *)v77 + 7);
    *((_BYTE *)a2 + 23) = v19;
    return 1;
  }
LABEL_9:
  v10 = (capabilities::radio *)strcasecmp(v9, (const char *)*MEMORY[0x1E0CF1210]);
  if (!(_DWORD)v10)
  {
    v22 = capabilities::radio::maverick(v10);
    if ((v22 & 1) != 0 || (capabilities::radio::ice((capabilities::radio *)v22) & 1) != 0)
    {
      util::to_str<diag::config::DuringAPSleep>(&v75);
LABEL_71:
      if (*((char *)a2 + 23) < 0)
        operator delete((void *)*a2);
      *(std::string *)a2 = v75;
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  v11 = *(const char **)a1;
  if ((v4 & 0x80u) == 0)
    v12 = a1;
  else
    v12 = *(const char **)a1;
  v13 = (capabilities::radio *)strcasecmp(v12, (const char *)*MEMORY[0x1E0CF1200]);
  if (!(_DWORD)v13)
  {
    if ((capabilities::radio::maverick(v13) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v23 = a1;
  else
    v23 = v11;
  v24 = (capabilities::radio *)strcasecmp(v23, (const char *)*MEMORY[0x1E0CF11F8]);
  if (!(_DWORD)v24)
  {
    if ((capabilities::radio::maverick(v24) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v25 = a1;
  else
    v25 = v11;
  v26 = (capabilities::radio *)strcasecmp(v25, (const char *)*MEMORY[0x1E0CF1218]);
  if (!(_DWORD)v26)
  {
    if ((capabilities::radio::maverick(v26) & 1) != 0)
    {
      util::to_str<unsigned int>(&v75, 3u);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
    v11 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v27 = a1;
  else
    v27 = v11;
  v28 = (capabilities::radio *)strcasecmp(v27, (const char *)*MEMORY[0x1E0CF1220]);
  if (!(_DWORD)v28)
  {
    if ((capabilities::radio::maverick(v28) & 1) != 0)
    {
      util::to_str<diag::config::Recovery>(&v75);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v29 = a1;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CF1208]))
      goto LABEL_60;
LABEL_70:
    util::to_str<BOOL>(&v75, 0);
    goto LABEL_71;
  }
  v29 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CF1208]))
    goto LABEL_70;
LABEL_60:
  v30 = (const char *)*MEMORY[0x1E0CFBB60];
  v31 = (capabilities::radio *)strcasecmp(v29, (const char *)*MEMORY[0x1E0CFBB60]);
  if (!(_DWORD)v31)
  {
    v32 = capabilities::radio::maverick(v31);
    if ((v32 & 1) != 0)
      goto LABEL_76;
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    v33 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBD20]);
    v34 = a1;
    if ((_DWORD)v33)
      goto LABEL_65;
    goto LABEL_75;
  }
  v34 = *(const char **)a1;
  v33 = (capabilities::radio *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFBD20]);
  if (!(_DWORD)v33)
  {
LABEL_75:
    v32 = capabilities::radio::ice(v33);
    if (!(_DWORD)v32)
    {
      v36 = "None";
LABEL_80:
      std::string::__assign_external((std::string *)a2, v36);
      return 1;
    }
LABEL_76:
    if (config::hw::watch((config::hw *)v32))
      v36 = "Lite";
    else
      v36 = "Default";
    goto LABEL_80;
  }
LABEL_65:
  v35 = (capabilities::radio *)strcasecmp(v34, (const char *)*MEMORY[0x1E0CF11F0]);
  if (!(_DWORD)v35)
  {
    if ((capabilities::radio::maverick(v35) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 4;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 4;
      }
      strcpy((char *)a2, "None");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80u) == 0)
    v37 = a1;
  else
    v37 = *(const char **)a1;
  v38 = (const char *)*MEMORY[0x1E0CFB940];
  v39 = (capabilities::radio *)strcasecmp(v37, (const char *)*MEMORY[0x1E0CFB940]);
  if (!(_DWORD)v39)
  {
    if ((capabilities::radio::maverick(v39) & 1) != 0)
    {
LABEL_87:
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 5;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 5;
      }
      strcpy((char *)a2, "Sleep");
      return 1;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB378]))
    {
      v40 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFBC00]);
      v41 = a1;
      if ((_DWORD)v40)
        goto LABEL_93;
LABEL_98:
      v43 = capabilities::trace::defaultMemoryFileMaxCount(v40);
      util::to_str<unsigned int>(&v75, v43);
      goto LABEL_71;
    }
LABEL_99:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 17;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 17;
    }
    strcpy((char *)a2, "/usr/lib/bbmasks/");
    return 1;
  }
  v41 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB378]))
    goto LABEL_99;
  v40 = (capabilities::trace *)strcasecmp(v41, (const char *)*MEMORY[0x1E0CFBC00]);
  if (!(_DWORD)v40)
    goto LABEL_98;
LABEL_93:
  v42 = (capabilities::radio *)strcasecmp(v41, (const char *)*MEMORY[0x1E0D01AD8]);
  if (!(_DWORD)v42)
  {
    if ((capabilities::radio::ice(v42) & 1) != 0)
      goto LABEL_70;
    LOBYTE(v4) = a1[23];
  }
  v44 = *(const char **)a1;
  if ((v4 & 0x80u) == 0)
    v45 = a1;
  else
    v45 = *(const char **)a1;
  v46 = (const char *)*MEMORY[0x1E0D01AC8];
  v47 = (capabilities::radio *)strcasecmp(v45, (const char *)*MEMORY[0x1E0D01AC8]);
  if (!(_DWORD)v47)
  {
    v48 = capabilities::radio::ice(v47);
    if ((v48 & 1) != 0)
    {
      if (capabilities::radio::ice((capabilities::radio *)v48))
        v49 = 80;
      else
        v49 = -1;
LABEL_116:
      util::to_str<int>(v49, &v75);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
    v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v50 = a1;
  else
    v50 = v44;
  v51 = (const char *)*MEMORY[0x1E0D01AC0];
  v52 = (capabilities::radio *)strcasecmp(v50, (const char *)*MEMORY[0x1E0D01AC0]);
  if (!(_DWORD)v52)
  {
    v53 = capabilities::radio::ice(v52);
    if ((v53 & 1) != 0)
    {
      if (capabilities::radio::ice((capabilities::radio *)v53))
        v49 = 1;
      else
        v49 = -1;
      goto LABEL_116;
    }
    LOBYTE(v4) = a1[23];
    v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v54 = a1;
  else
    v54 = v44;
  v55 = (capabilities::radio *)strcasecmp(v54, (const char *)*MEMORY[0x1E0D01AB8]);
  if (!(_DWORD)v55)
  {
    if ((capabilities::radio::ice(v55) & 1) != 0)
    {
      v36 = (const std::string::value_type *)*MEMORY[0x1E0D01AD0];
      goto LABEL_80;
    }
    LOBYTE(v4) = a1[23];
    v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v56 = a1;
  else
    v56 = v44;
  v57 = (capabilities::radio *)strcasecmp(v56, v30);
  if (!(_DWORD)v57)
  {
    if ((capabilities::radio::ice(v57) & 1) != 0)
    {
      if (*((char *)a2 + 23) < 0)
      {
        a2[1] = 7;
        a2 = (std::string::size_type *)*a2;
      }
      else
      {
        *((_BYTE *)a2 + 23) = 7;
      }
      strcpy((char *)a2, "Default");
      return 1;
    }
    LOBYTE(v4) = a1[23];
    v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v58 = a1;
  else
    v58 = v44;
  v59 = (capabilities::radio *)strcasecmp(v58, v38);
  if (!(_DWORD)v59)
  {
    if ((capabilities::radio::ice(v59) & 1) != 0)
      goto LABEL_87;
    LOBYTE(v4) = a1[23];
    v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v60 = a1;
  else
    v60 = v44;
  v61 = (capabilities::radio *)strcasecmp(v60, v46);
  if (!(_DWORD)v61)
  {
    if ((capabilities::radio::ice(v61) & 1) != 0)
    {
      util::to_str<int>(80, &v75);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
    v44 = *(const char **)a1;
  }
  if ((v4 & 0x80u) == 0)
    v62 = a1;
  else
    v62 = v44;
  v63 = (capabilities::radio *)strcasecmp(v62, v51);
  if (!(_DWORD)v63)
  {
    if ((capabilities::radio::ice(v63) & 1) != 0)
    {
      util::to_str<int>(1, &v75);
      goto LABEL_71;
    }
    LOBYTE(v4) = a1[23];
  }
  if ((v4 & 0x80) == 0)
  {
    if (!strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC0A0]))
      goto LABEL_70;
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC058]) && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC060]))
    {
      v64 = (capabilities::trace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB228]);
      if ((_DWORD)v64)
      {
        v65 = (capabilities::radio *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB7D8]);
        if ((_DWORD)v65)
        {
          v66 = (defaults::bbtrace *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB950]);
          v67 = a1;
          if ((_DWORD)v66)
            goto LABEL_169;
LABEL_181:
          count = defaults::bbtrace::transport_read_count(v66);
          util::to_str<unsigned int>(&v75, count);
          goto LABEL_71;
        }
LABEL_190:
        v73 = (capabilities::abs *)capabilities::radio::vendor(v65);
        if (capabilities::abs::shouldUseMinBasebandTransportIOReadSize(v73))
          v74 = 0x4000;
        else
          v74 = 0x8000;
        util::to_str<unsigned int>(&v75, v74);
        goto LABEL_71;
      }
LABEL_189:
      v72 = capabilities::trace::defaultFileSizeBytes(v64);
      util::to_str<unsigned int>(&v75, v72);
      goto LABEL_71;
    }
LABEL_182:
    if (*((char *)a2 + 23) < 0)
    {
      a2[1] = 0;
      a2 = (std::string::size_type *)*a2;
    }
    else
    {
      *((_BYTE *)a2 + 23) = 0;
    }
    *(_BYTE *)a2 = 0;
    return 1;
  }
  v67 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFC0A0]))
    goto LABEL_70;
  if (!strcasecmp(v67, (const char *)*MEMORY[0x1E0CFC058]) || !strcasecmp(v67, (const char *)*MEMORY[0x1E0CFC060]))
    goto LABEL_182;
  v64 = (capabilities::trace *)strcasecmp(v67, (const char *)*MEMORY[0x1E0CFB228]);
  if (!(_DWORD)v64)
    goto LABEL_189;
  v65 = (capabilities::radio *)strcasecmp(v67, (const char *)*MEMORY[0x1E0CFB7D8]);
  if (!(_DWORD)v65)
    goto LABEL_190;
  v66 = (defaults::bbtrace *)strcasecmp(v67, (const char *)*MEMORY[0x1E0CFB950]);
  if (!(_DWORD)v66)
    goto LABEL_181;
LABEL_169:
  if (!strcasecmp(v67, (const char *)*MEMORY[0x1E0CFBD18]))
  {
    util::to_str<BOOL>(&v75, 1);
    goto LABEL_71;
  }
  v68 = GetOsLogContext()[1];
  result = os_log_type_enabled(v68, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v69 = *MEMORY[0x1E0CFC200];
    if (a1[23] >= 0)
      v70 = a1;
    else
      v70 = *(char **)a1;
    LODWORD(v75.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
    WORD2(v75.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v75.__r_.__value_.__r.__words[1] + 6) = v69;
    HIWORD(v75.__r_.__value_.__r.__words[2]) = 2080;
    v76 = v70;
    _os_log_error_impl(&dword_1BF566000, v68, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
      (uint8_t *)&v75,
      0x20u);
    return 0;
  }
  return result;
}

void sub_1BF572688(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF571E68);
    JUMPOUT(0x1BF571E70);
  }
  _Unwind_Resume(a1);
}

void abm::debug::handleDebugPrint(uint64_t a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;
  ctu::Clock *v14;
  std::string *v15;
  const char *v16;
  size_t v17;
  void *v18;
  void **v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::string *v24;
  int v25;
  size_t size;
  std::string *data;
  _BYTE *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  char *v31;
  int v32;
  char *v33;
  std::string::size_type v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  std::string::__raw *v41;
  std::string::size_type v42;
  std::string::pointer v43;
  NSObject *v44;
  std::string::__raw *v45;
  std::string::__raw *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  std::string::pointer v52;
  std::__shared_weak_count *v53;
  void *__dst[2];
  unint64_t v55;
  std::string *v56;
  std::__shared_weak_count *v57;
  _OWORD v58[3];
  unint64_t v59;
  std::__shared_weak_count *v61;
  uint8_t buf[4];
  std::string::__raw *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)_MergedGlobals_0;
  if (!_MergedGlobals_0)
    return;
  v6 = *(std::__shared_weak_count **)(_MergedGlobals_0 + 8);
  if (!v6)
    return;
  v11 = std::__shared_weak_count::lock(v6);
  v61 = v11;
  if (!v11)
    return;
  if (!*v5)
  {
    v20 = v11;
LABEL_73:
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    return;
  }
  v59 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v58[1] = v12;
  v58[2] = v12;
  v58[0] = v12;
  ctu::LogMessageBuffer::LogMessageBuffer((ctu::LogMessageBuffer *)v58);
  if (a3 && *a3)
  {
    v13 = MEMORY[0x1C3B8BC74](v58, a3);
    MEMORY[0x1C3B8BC74](v13, ": ");
  }
  MEMORY[0x1C3B8B7E8](&v56, a4, a5);
  ctu::operator<<();
  v14 = (ctu::Clock *)MEMORY[0x1C3B8B800](&v56);
  ctu::Clock::now_in_nanoseconds(v14);
  v15 = (std::string *)operator new(0x60uLL);
  v16 = abm::debug::kLogDomainMap[a2];
  v17 = strlen(v16);
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v18 = (void *)v17;
  if (v17 >= 0x17)
  {
    v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v21 = v17 | 7;
    v22 = v21 + 1;
    v19 = (void **)operator new(v21 + 1);
    __dst[1] = v18;
    v55 = v22 | 0x8000000000000000;
    __dst[0] = v19;
    goto LABEL_16;
  }
  HIBYTE(v55) = v17;
  v19 = __dst;
  if (v17)
LABEL_16:
    memmove(v19, v16, (size_t)v18);
  *((_BYTE *)v18 + (_QWORD)v19) = 0;
  MEMORY[0x1C3B8B7D0](v58);
  ctu::LogMessageBuffer::takeMetadata((ctu::LogMessageBuffer *)v58);
  ctu::LogMessage::LogMessage();
  v56 = v15;
  v23 = (std::__shared_weak_count *)operator new(0x20uLL);
  v23->__vftable = (std::__shared_weak_count_vtbl *)off_1E7915EE0;
  v23->__shared_owners_ = 0;
  v23->__shared_weak_owners_ = 0;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  v57 = v23;
  if (SHIBYTE(v55) < 0)
  {
    operator delete(__dst[0]);
    v24 = v15 + 2;
    v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_19;
  }
  else
  {
    v24 = v15 + 2;
    v25 = SHIBYTE(v15[2].__r_.__value_.__r.__words[2]);
    if ((v25 & 0x80000000) == 0)
    {
LABEL_19:
      size = v25;
      data = v24;
      goto LABEL_22;
    }
  }
  data = (std::string *)v15[2].__r_.__value_.__l.__data_;
  size = v15[2].__r_.__value_.__l.__size_;
LABEL_22:
  v28 = memchr(data, 10, size);
  if (v28)
    v29 = (unint64_t)v28;
  else
    v29 = (unint64_t)data + size;
  if (v29 - (_QWORD)data != size)
  {
    v30 = (unsigned __int8 *)(v29 + 1);
    if ((std::string *)(v29 + 1) != (std::string *)((char *)data + size))
    {
      v31 = (char *)data + size + ~v29;
      do
      {
        v32 = *v30;
        if (v32 != 10)
          *(_BYTE *)v29++ = v32;
        ++v30;
        --v31;
      }
      while (v31);
      LOBYTE(v25) = *((_BYTE *)&v15[2].__r_.__value_.__s + 23);
    }
  }
  if ((v25 & 0x80) == 0)
  {
    v33 = (char *)v24 + v25;
    v34 = v29 - (_QWORD)v24;
    if (v25 >= v29 - (unint64_t)v24)
      goto LABEL_34;
LABEL_52:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  v43 = v15[2].__r_.__value_.__l.__data_;
  v42 = v15[2].__r_.__value_.__l.__size_;
  v33 = &v43[v42];
  v34 = v29 - (_QWORD)v43;
  if (v42 < v29 - (unint64_t)v43)
    goto LABEL_52;
LABEL_34:
  if (&v33[-v29] == (char *)-1)
  {
    if ((v25 & 0x80) != 0)
    {
      v52 = v15[2].__r_.__value_.__l.__data_;
      v15[2].__r_.__value_.__l.__size_ = v34;
      v52[v34] = 0;
      v35 = v57;
      v53 = v57;
      if (!v57)
        goto LABEL_38;
    }
    else
    {
      *((_BYTE *)&v15[2].__r_.__value_.__s + 23) = v34 & 0x7F;
      v24->__r_.__value_.__s.__data_[v34] = 0;
      v35 = v57;
      v53 = v57;
      if (!v57)
        goto LABEL_38;
    }
  }
  else
  {
    std::string::__erase_external_with_move(v24, v34, (std::string::size_type)&v33[-v29]);
    v35 = v57;
    v53 = v57;
    if (!v57)
      goto LABEL_38;
  }
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
LABEL_38:
  ctu::LogServer::log();
  if (v53)
  {
    v38 = (unint64_t *)&v53->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  if (a2)
  {
    if (a2 == 2)
    {
      v44 = qword_1ED70F770;
      if (qword_1ED70F770 && os_log_type_enabled((os_log_t)qword_1ED70F770, OS_LOG_TYPE_DEBUG))
      {
        v45 = (std::string::__raw *)&v56[2];
        if (SHIBYTE(v56[2].__r_.__value_.__r.__words[2]) < 0)
          v45 = (std::string::__raw *)v45->__words[0];
        *(_DWORD *)buf = 136315138;
        v63 = v45;
        _os_log_debug_impl(&dword_1BF566000, v44, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
      }
    }
    else if (a2 == 3)
    {
      v40 = qword_1ED70F778;
      if (qword_1ED70F778)
      {
        if (os_log_type_enabled((os_log_t)qword_1ED70F778, OS_LOG_TYPE_DEFAULT))
        {
          v41 = (std::string::__raw *)&v56[2];
          if (SHIBYTE(v56[2].__r_.__value_.__r.__words[2]) < 0)
            v41 = (std::string::__raw *)v41->__words[0];
          *(_DWORD *)buf = 136315138;
          v63 = v41;
LABEL_66:
          _os_log_impl(&dword_1BF566000, v40, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
      }
    }
  }
  else
  {
    v40 = qword_1ED70F768;
    if (qword_1ED70F768 && os_log_type_enabled((os_log_t)qword_1ED70F768, OS_LOG_TYPE_DEFAULT))
    {
      v46 = (std::string::__raw *)&v56[2];
      if (SHIBYTE(v56[2].__r_.__value_.__r.__words[2]) < 0)
        v46 = (std::string::__raw *)v46->__words[0];
      *(_DWORD *)buf = 136315138;
      v63 = v46;
      goto LABEL_66;
    }
  }
  v47 = v57;
  if (v57)
  {
    v48 = (unint64_t *)&v57->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  MEMORY[0x1C3B8B800](v58);
  v20 = v61;
  if (v61)
    goto LABEL_73;
}

void sub_1BF572C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  MEMORY[0x1C3B8B800](&a24);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v24 - 128);
  _Unwind_Resume(a1);
}

void sub_1BF572CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v1 - 128);
  _Unwind_Resume(a1);
}

void sub_1BF572CFC()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1BF572D44);
}

void sub_1BF572D28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v16);
  JUMPOUT(0x1BF572D44);
}

void ABMServerInternal::broadcast_sync(uint64_t a1, uint64_t a2, ctu **a3, void **a4)
{
  xpc_object_t v7;
  xpc_object_t v8;
  const void *v9;
  uint64_t (*v10)(uint64_t);
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  const char *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  _QWORD *v24;
  xpc_object_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t SystemTime;
  NSObject *v33;
  const void *v34;
  __int128 v35;
  std::string *v36;
  NSObject *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  NSObject *v54;
  unint64_t v55;
  void *v56;
  xpc_object_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  NSObject *group;
  _QWORD *v62;
  _QWORD block[6];
  std::__shared_weak_count *v64;
  std::string v65;
  void *aBlock;
  _QWORD handler[6];
  std::__shared_weak_count *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  std::string __p;
  uint64_t v72;
  NSObject *v73;
  std::string v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  xpc_object_t v77;
  unint64_t v78;
  unint64_t v79;
  xpc_object_t v80;
  uint8_t buf[4];
  const void *v82;
  __int16 v83;
  std::string *v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (v7 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v7) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v7);
      v8 = v7;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    v7 = 0;
  }
  xpc_release(v7);
  v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a3)
    v10 = 0;
  v57 = v8;
  if (v10)
  {
    ctu::cf_to_xpc(*a3, v9);
    xpc_dictionary_set_value(v8, kKeyEventData[0], v80);
    v11 = v80;
    v80 = xpc_null_create();
    xpc_release(v11);
    xpc_release(v80);
    v80 = 0;
  }
  v12 = xpc_string_create(kCommandSignalNotification[0]);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(v8, kKeyCommand[0], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v14 = *(const char **)a2;
  v15 = xpc_string_create(v14);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v8, kKeyEvent[0], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  group = dispatch_group_create();
  v17 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v17 || (v58 = *(_QWORD *)(a1 + 8), (v18 = std::__shared_weak_count::lock(v17)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  v62 = (_QWORD *)a1;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v59 = v19;
  v24 = (_QWORD *)v62[18];
  if (v24 != v62 + 19)
  {
    do
    {
      v78 = 0xAAAAAAAAAAAAAAAALL;
      v79 = 0xAAAAAAAAAAAAAAAALL;
      v25 = (xpc_object_t)v24[4];
      v77 = v25;
      if (v25)
      {
        xpc_retain(v25);
        v27 = v24[5];
        v26 = v24[6];
        v78 = v27;
        v79 = v26;
        if (!v26)
          goto LABEL_34;
      }
      else
      {
        v25 = xpc_null_create();
        v77 = v25;
        v27 = v24[5];
        v26 = v24[6];
        v78 = v27;
        v79 = v26;
        if (!v26)
          goto LABEL_34;
      }
      v28 = (unint64_t *)(v26 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
LABEL_34:
      if (v25)
      {
        xpc_retain(v25);
        v75 = v27;
        v76 = (std::__shared_weak_count *)v26;
        if (!v26)
          goto LABEL_40;
      }
      else
      {
        v25 = xpc_null_create();
        v75 = v27;
        v76 = (std::__shared_weak_count *)v26;
        if (!v26)
          goto LABEL_40;
      }
      v30 = (unint64_t *)(v26 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
LABEL_40:
      if ((uint64_t *)(v27 + 40) == std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(v27 + 32, (const void **)a2))goto LABEL_71;
      SystemTime = TelephonyUtilGetSystemTime();
      v33 = v62[14];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = (const void *)a2;
        if (*(char *)(a2 + 23) < 0)
        {
          v34 = *(const void **)a2;
          if (*(char *)(v27 + 23) < 0)
            goto LABEL_46;
LABEL_44:
          v35 = *(_OWORD *)v27;
          v74.__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 16);
          *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v35;
        }
        else
        {
          if ((*(char *)(v27 + 23) & 0x80000000) == 0)
            goto LABEL_44;
LABEL_46:
          std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v27, *(_QWORD *)(v27 + 8));
        }
        v36 = &v74;
        if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v74.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        v82 = v34;
        v83 = 2080;
        v84 = v36;
        v85 = 2048;
        v86 = SystemTime;
        _os_log_impl(&dword_1BF566000, v33, OS_LOG_TYPE_DEFAULT, "#I Sending %s to %s at %llu", buf, 0x20u);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        v8 = v57;
      }
      if (!*a4)
      {
        xpc_connection_send_message((xpc_connection_t)v25, v8);
        goto LABEL_71;
      }
      dispatch_group_enter(group);
      v37 = v62[3];
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 1174405120;
      handler[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
      handler[3] = &__block_descriptor_tmp_25_3;
      handler[4] = v62;
      handler[5] = v58;
      v68 = v59;
      do
        v38 = __ldxr(p_shared_weak_owners);
      while (__stxr(v38 + 1, p_shared_weak_owners));
      v69 = v27;
      v70 = (std::__shared_weak_count *)v26;
      if (v26)
      {
        v39 = (unint64_t *)(v26 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      v72 = SystemTime;
      v73 = group;
      xpc_connection_send_message_with_reply((xpc_connection_t)v25, v8, v37, handler);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v41 = v70;
        if (!v70)
          goto LABEL_69;
      }
      else
      {
        v41 = v70;
        if (!v70)
          goto LABEL_69;
      }
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
      {
LABEL_69:
        v44 = v68;
        if (!v68)
          goto LABEL_71;
LABEL_70:
        std::__shared_weak_count::__release_weak(v44);
        goto LABEL_71;
      }
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
      v44 = v68;
      if (v68)
        goto LABEL_70;
LABEL_71:
      v45 = v76;
      if (v76)
      {
        v46 = (unint64_t *)&v76->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      xpc_release(v25);
      v48 = (std::__shared_weak_count *)v79;
      if (v79)
      {
        v49 = (unint64_t *)(v79 + 8);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      xpc_release(v77);
      v51 = (_QWORD *)v24[1];
      if (v51)
      {
        do
        {
          v52 = v51;
          v51 = (_QWORD *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          v52 = (_QWORD *)v24[2];
          v53 = *v52 == (_QWORD)v24;
          v24 = v52;
        }
        while (!v53);
      }
      v24 = v52;
    }
    while (v52 != v62 + 19);
  }
  if (*a4)
  {
    v54 = v62[3];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN17ABMServerInternal14broadcast_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke_26;
    block[3] = &__block_descriptor_tmp_27_4;
    block[4] = v62;
    block[5] = v58;
    v64 = v59;
    do
      v55 = __ldxr(p_shared_weak_owners);
    while (__stxr(v55 + 1, p_shared_weak_owners));
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v65 = *(std::string *)a2;
    v56 = *a4;
    if (*a4)
      v56 = _Block_copy(v56);
    aBlock = v56;
    dispatch_group_notify(group, v54, block);
    if (aBlock)
      _Block_release(aBlock);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if (v64)
      std::__shared_weak_count::__release_weak(v64);
  }
  dispatch_release(group);
  std::__shared_weak_count::__release_weak(v59);
  xpc_release(v8);
}

void sub_1BF573480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a28)
    std::__shared_weak_count::__release_weak(a28);
  std::__shared_weak_count::__release_weak(a17);
  xpc_release(object);
  _Unwind_Resume(a1);
}

BOOL prop::bbtrace::get(char *a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  void *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  void *__dst[2];
  unint64_t v13;

  v4 = (const void *)*MEMORY[0x1E0CFC200];
  v5 = strlen((const char *)*MEMORY[0x1E0CFC200]);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (void *)v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = v6;
    v13 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v13) = v5;
  v7 = __dst;
  if (v5)
LABEL_8:
    memmove(v7, v4, (size_t)v6);
  *((_BYTE *)v6 + (_QWORD)v7) = 0;
  v10 = prop::get_from_file((char *)__dst, a1, a2);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  return v10;
}

void sub_1BF57367C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL LogTracker::isInternalProperty_sync(uint64_t a1, xpc_object_t *a2, xpc_object_t *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  std::string *p_string;
  xpc_object_t value;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  NSObject *v17;
  char **v18;
  void **v19;
  std::string *v20;
  char *v22;
  const char *v23;
  const char *v24;
  void **v25;
  TapToRadar *v26;
  _BOOL8 v27;
  int Mode;
  xpc_object_t object;
  xpc_object_t objecta;
  xpc_object_t objectb;
  std::string v32;
  std::string string;
  void *v34[2];
  int64_t v35;
  char *v36[2];
  int64_t v37;
  std::string __p;
  void **v39;
  __int16 v40;
  std::string *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v36[0] = 0;
  v36[1] = 0;
  v37 = 0;
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  memset(&string, 0, sizeof(string));
  v8 = MEMORY[0x1C3B8CD78](*a2);
  v9 = MEMORY[0x1E0C812F8];
  if (v8 != MEMORY[0x1E0C812F8])
  {
    v10 = 0;
    goto LABEL_3;
  }
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB030]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  *(_OWORD *)v36 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v37 = v32.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(object);
  v13 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB550]);
  objecta = v13;
  if (v13)
    xpc_retain(v13);
  else
    objecta = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
  *(_OWORD *)v34 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
  v35 = v32.__r_.__value_.__r.__words[2];
  *((_BYTE *)&v32.__r_.__value_.__s + 23) = 0;
  v32.__r_.__value_.__s.__data_[0] = 0;
  xpc_release(objecta);
  v14 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB6A8]);
  objectb = v14;
  if (v14)
    xpc_retain(v14);
  else
    objectb = xpc_null_create();
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
    operator delete(string.__r_.__value_.__l.__data_);
  string = v32;
  xpc_release(objectb);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB248]))
    {
      if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB198]))
      {
        if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB190]))
        {
          v22 = (char *)*MEMORY[0x1E0CFB048];
          if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB048]))
          {
            v22 = (char *)*MEMORY[0x1E0CFB0A0];
            if (strcasecmp((const char *)v36, (const char *)*MEMORY[0x1E0CFB0A0]))
            {
              v22 = (char *)*MEMORY[0x1E0CFB098];
              v23 = (const char *)v36;
              v24 = (const char *)v36;
LABEL_56:
              if (strcasecmp(v24, v22))
              {
                v22 = (char *)*MEMORY[0x1E0CFAFC0];
                if (strcasecmp(v23, (const char *)*MEMORY[0x1E0CFAFC0]))
                {
                  v10 = 0;
                  goto LABEL_3;
                }
              }
              goto LABEL_74;
            }
          }
          goto LABEL_74;
        }
LABEL_64:
        v27 = prop::systemlogs::get((char *)v34, (uint64_t)&string);
        goto LABEL_69;
      }
      goto LABEL_60;
    }
LABEL_59:
    v27 = prop::compression::get((char *)v34, (uint64_t)&string);
LABEL_69:
    v10 = v27;
    goto LABEL_3;
  }
  v23 = v36[0];
  if (!strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB248]))
    goto LABEL_59;
  if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB198]))
  {
    if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB190]))
    {
      v22 = (char *)*MEMORY[0x1E0CFB048];
      if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB048]))
      {
        v22 = (char *)*MEMORY[0x1E0CFB0A0];
        if (strcasecmp(v36[0], (const char *)*MEMORY[0x1E0CFB0A0]))
        {
          v22 = (char *)*MEMORY[0x1E0CFB098];
          v24 = v36[0];
          goto LABEL_56;
        }
      }
LABEL_74:
      std::string::basic_string[abi:ne180100]<0>(&__p, v22);
      v10 = prop::get((char *)&__p, (char *)v34, (uint64_t)&string);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_3;
    }
    goto LABEL_64;
  }
LABEL_60:
  if (v35 >= 0)
    v25 = v34;
  else
    v25 = (void **)v34[0];
  v26 = (TapToRadar *)strcasecmp((const char *)v25, (const char *)*MEMORY[0x1E0CFB028]);
  if ((_DWORD)v26)
  {
    v27 = prop::ttr::get((char *)v34, (uint64_t)&string);
    goto LABEL_69;
  }
  Mode = TapToRadar::getMode(v26);
  util::to_str<int>(Mode, &__p);
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
    operator delete(string.__r_.__value_.__l.__data_);
  string = __p;
  v10 = 1;
LABEL_3:
  if (MEMORY[0x1C3B8CD78](*a3) != v9)
    goto LABEL_22;
  if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!string.__r_.__value_.__l.__size_)
      goto LABEL_22;
    p_string = (std::string *)string.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&string.__r_.__value_.__s + 23))
      goto LABEL_22;
    p_string = &string;
  }
  v15 = xpc_string_create((const char *)p_string);
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFB6A8], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
LABEL_22:
  if (!v10)
  {
    *a4 = -534716416;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
LABEL_33:
    if (SHIBYTE(v35) < 0)
      goto LABEL_38;
    goto LABEL_34;
  }
  v17 = *(NSObject **)(a1 + 88);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *a4 = 0;
    if (SHIBYTE(string.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_37;
    goto LABEL_33;
  }
  v18 = v36;
  if (v37 < 0)
    v18 = (char **)v36[0];
  v19 = v34;
  if (v35 < 0)
    v19 = (void **)v34[0];
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315906;
  v20 = &string;
  if ((string.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = (std::string *)string.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"get";
  WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
  HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
  v39 = v19;
  v40 = 2080;
  v41 = v20;
  _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I Internal %s trace property: %s, %s = %s", (uint8_t *)&__p, 0x2Au);
  *a4 = 0;
  if ((SHIBYTE(string.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_33;
LABEL_37:
  operator delete(string.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
  {
LABEL_38:
    operator delete(v34[0]);
    if (SHIBYTE(v37) < 0)
      goto LABEL_39;
    return v10;
  }
LABEL_34:
  if (SHIBYTE(v37) < 0)
LABEL_39:
    operator delete(v36[0]);
  return v10;
}

void sub_1BF573ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a32 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(a20);
  if ((a32 & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(a1);
LABEL_6:
  operator delete(a27);
  goto LABEL_7;
}

std::string **ServerClientState::ServerClientState(std::string **a1, uint64_t a2)
{
  std::string *v4;
  std::string *v5;
  std::string *v6;

  v4 = (std::string *)operator new(0x38uLL);
  v5 = v4;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5[1].__r_.__value_.__s.__data_[0] = 0;
  v5[2].__r_.__value_.__r.__words[0] = 0;
  v5[1].__r_.__value_.__r.__words[2] = 0;
  v5[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v5[1].__r_.__value_.__r.__words[2];
  *a1 = v5;
  v6 = (std::string *)operator new(0x20uLL);
  v6->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7920080;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  a1[1] = v6;
  return a1;
}

void sub_1BF5740C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5740D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  operator delete((void *)v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v29[6];
  void *aBlock;
  uint64_t v31;
  void *v32;
  uint64_t v33[2];
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  xpc_object_t v38;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v34 = 0;
  v35 = &v34;
  v36 = 0x2000000000;
  v37 = -534716414;
  if (MEMORY[0x1C3B8CD78](*(_QWORD *)(v2 + 24)) == MEMORY[0x1E0C812F8])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFC210]);
    v38 = value;
    if (value)
      xpc_retain(value);
    else
      v38 = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v38, (const object *)0xFFFFFFFFLL);
    xpc_release(v38);
    if (v15 != 1)
    {
      if (v15)
      {
        if (v15 - 2 > 3)
          goto LABEL_2;
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    v17 = *(_QWORD *)(v3 + 176);
    if (v17)
    {
      v18 = v3 + 176;
      do
      {
        v19 = *(unsigned __int8 *)(v17 + 32);
        v20 = v19 >= v15;
        if (v19 >= v15)
          v21 = (uint64_t *)v17;
        else
          v21 = (uint64_t *)(v17 + 8);
        if (v20)
          v18 = v17;
        v17 = *v21;
      }
      while (*v21);
      if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
      {
        *((_DWORD *)v35 + 6) = -534716416;
        v22 = *(std::__shared_weak_count **)(v18 + 48);
        v33[0] = *(_QWORD *)(v18 + 40);
        v33[1] = (uint64_t)v22;
        if (v22)
        {
          p_shared_owners = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldxr(p_shared_owners);
          while (__stxr(v24 + 1, p_shared_owners));
        }
        v29[0] = MEMORY[0x1E0C809B0];
        v29[1] = 1174405120;
        v29[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke;
        v29[3] = &unk_1E7917940;
        v29[5] = v3;
        v25 = *(void **)(v2 + 32);
        if (v25)
          v25 = _Block_copy(v25);
        aBlock = v25;
        v31 = v18;
        v29[4] = &v34;
        v26 = _Block_copy(v29);
        v32 = v26;
        AWDModule::clearConfiguration_sync(v3, v33, (uint64_t)&v32);
        if (v26)
          _Block_release(v26);
        if (v22)
        {
          v27 = (unint64_t *)&v22->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        if (aBlock)
          _Block_release(aBlock);
      }
    }
  }
LABEL_2:
  v4 = v35;
  if (*((_DWORD *)v35 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v38 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &v38);
    xpc_release(v38);
    xpc_release(v8);
    _Block_object_dispose(&v34, 8);
  }
  else
  {
    _Block_object_dispose(&v34, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF5743E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  _QWORD *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  const void *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  const void *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;

  if (v23)
    _Block_release(v23);
  if (aBlock)
    _Block_release(aBlock);
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _Block_object_dispose(&a20, 8);
  v27 = *(const void **)(v21 + 32);
  if (v27)
    _Block_release(v27);
  xpc_release(*(xpc_object_t *)(v21 + 24));
  *(_QWORD *)(v21 + 24) = 0;
  v28 = *(std::__shared_weak_count **)(v21 + 8);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  operator delete((void *)v21);
  v29 = (std::__shared_weak_count *)v20[2];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  operator delete(v20);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator xpc::array(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) != MEMORY[0x1E0C812C8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

uint64_t std::__function::__func<BOOL (*)(void *),std::allocator<BOOL (*)(void *)>,BOOL ()(void *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

BOOL prop::get(char *a1, char *a2, uint64_t a3)
{
  const char *v6;
  NSObject *v7;
  char *v9;
  char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((a1[23] & 0x80000000) == 0)
  {
    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB088])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC200])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01AA8])
      && strcasecmp(a1, (const char *)*MEMORY[0x1E0D01A80]))
    {
      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB090]))
      {
        if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFC248]) && strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB118]))
        {
          if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB240]))
          {
            if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB248]))
            {
              if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB198]))
              {
                if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFAFC0]))
                {
                  if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB190]))
                  {
                    if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB048]))
                    {
                      v6 = a1;
                      if (strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB0A0]))
                        goto LABEL_16;
                      return prop::tailspin::get(a2, a3);
                    }
                    return prop::profile::get(a2, a3);
                  }
                  return prop::systemlogs::get(a2, a3);
                }
                return prop::logfilter::get(a2, a3);
              }
              return prop::ttr::get(a2, a3);
            }
            return prop::compression::get(a2, a3);
          }
          return prop::bbipc::get(a2, a3);
        }
        return prop::ipc::get(a2, a3);
      }
      return prop::coredump::get(a2, a3);
    }
    return prop::bbtrace::get(a2, a3);
  }
  v6 = *(const char **)a1;
  if (!strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB088])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC200])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01AA8])
    || !strcasecmp(v6, (const char *)*MEMORY[0x1E0D01A80]))
  {
    return prop::bbtrace::get(a2, a3);
  }
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB090]))
    return prop::coredump::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFC248]) || !strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB118]))
    return prop::ipc::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB240]))
    return prop::bbipc::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB248]))
    return prop::compression::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB198]))
    return prop::ttr::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFAFC0]))
    return prop::logfilter::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB190]))
    return prop::systemlogs::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB048]))
    return prop::profile::get(a2, a3);
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB0A0]))
    return prop::tailspin::get(a2, a3);
LABEL_16:
  if (!strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB098]))
    return prop::tracesettings::get(a2, a3);
  v7 = GetOsLogContext()[1];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    if (a1[23] >= 0)
      v9 = a1;
    else
      v9 = *(char **)a1;
    if (a2[23] >= 0)
      v10 = a2;
    else
      v10 = *(char **)a2;
    v11 = 136315650;
    v12 = "prop";
    v13 = 2080;
    v14 = v9;
    v15 = 2080;
    v16 = v10;
    _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "%s: get: Invalid domain; domain='%s' key='%s'",
      (uint8_t *)&v11,
      0x20u);
  }
  return 0;
}

uint64_t ___ZN9AWDModule16sendPayload_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_11PayloadTypeERKNS0_6vectorIhNS0_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ABMServerInternal::registerNotification(uint64_t a1, void **a2, char a3, const void **a4)
{
  void *v7;
  const void *v8;
  _QWORD v9[5];
  xpc_object_t object;
  CFTypeRef cf;
  char v12;

  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1174405120;
  v9[2] = ___ZN17ABMServerInternal20registerNotificationEN3xpc10connectionEbN3ctu2cf11CFSharedRefIK9__CFArrayEE_block_invoke;
  v9[3] = &__block_descriptor_tmp_22_4;
  v7 = *a2;
  v9[4] = a1;
  object = v7;
  if (!v7)
  {
    object = xpc_null_create();
    v12 = a3;
    v8 = *a4;
    cf = v8;
    if (!v8)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v7);
  v12 = a3;
  v8 = *a4;
  cf = v8;
  if (v8)
LABEL_5:
    CFRetain(v8);
LABEL_6:
  ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped((uint64_t *)(a1 + 8), (uint64_t)v9);
  if (cf)
    CFRelease(cf);
  xpc_release(object);
}

void prop::file::get<std::string>(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v5;
  size_t v6;
  unint64_t v7;
  void **p_dst;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const char *v29;
  const void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  void **__dst;
  std::__shared_weak_count *v35;
  _QWORD v36[4];
  uint64_t v37;

  memset(v36, 170, sizeof(v36));
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = v6 + 1;
  __dst = (void **)0xAAAAAAAAAAAAAAAALL;
  v35 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    p_dst = (void **)operator new(v12 + 1);
    v35 = (std::__shared_weak_count *)(v6 + 1);
    v36[0] = v13 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    v35 = 0;
    v36[0] = 0;
    __dst = 0;
    p_dst = (void **)&__dst;
    HIBYTE(v36[0]) = v6 + 1;
    if (!v6)
      goto LABEL_15;
  }
  if (v5 >= 0)
    v14 = a1;
  else
    v14 = *a1;
  memmove(p_dst, v14, v6);
LABEL_15:
  *(_WORD *)((char *)p_dst + v6) = 46;
  v15 = *(char *)(a2 + 23);
  if (v15 >= 0)
    v16 = (const std::string::value_type *)a2;
  else
    v16 = *(const std::string::value_type **)a2;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a2 + 23);
  else
    v17 = *(_QWORD *)(a2 + 8);
  v18 = std::string::append((std::string *)&__dst, v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v36[3] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)&v36[1] = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v36[0]) < 0)
    operator delete(__dst);
  if (v36[3] >= 0)
    v20 = (char *)&v36[1] + HIBYTE(v36[3]);
  else
    v20 = (char *)(v36[1] + v36[2]);
  if (v36[3] >= 0)
    v21 = (char *)&v36[1];
  else
    v21 = (char *)v36[1];
  for (; v21 != v20; ++v21)
    *v21 = __tolower(*v21);
  memset(a4, 170, sizeof(std::string));
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70F248)
  {
    v23 = (void **)operator new(0x18uLL);
    MEMORY[0x1C3B8B8C0](v23, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v22 = operator new(0x20uLL);
    *v22 = &unk_1E7919E70;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v23;
    v24 = (std::__shared_weak_count *)off_1ED70F250;
    qword_1ED70F248 = (uint64_t)v23;
    off_1ED70F250 = v22;
    if (!v24)
    {
      __dst = v23;
      v35 = (std::__shared_weak_count *)v22;
LABEL_43:
      v27 = v22 + 1;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      goto LABEL_45;
    }
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v23 = (void **)qword_1ED70F248;
  v22 = off_1ED70F250;
  __dst = (void **)qword_1ED70F248;
  v35 = (std::__shared_weak_count *)off_1ED70F250;
  if (off_1ED70F250)
    goto LABEL_43;
LABEL_45:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (v36[3] >= 0)
    v29 = (const char *)&v36[1];
  else
    v29 = (const char *)v36[1];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v37, v29);
  v30 = (const void *)(*(uint64_t (**)(void **, uint64_t))*v23)(v23, v37);
  if (v30)
  {
    ctu::cf::assign();
    CFRelease(v30);
  }
  MEMORY[0x1C3B8B878](&v37);
  v31 = v35;
  if (!v35)
    goto LABEL_54;
  v32 = (unint64_t *)&v35->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_54:
    if ((SHIBYTE(v36[3]) & 0x80000000) == 0)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if (SHIBYTE(v36[3]) < 0)
LABEL_55:
    operator delete((void *)v36[1]);
}

void ___ZN9AWDModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  xpc_object_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  xpc_object_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = (_QWORD *)a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      if (!v10)
      {
LABEL_25:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(p_shared_owners);
        while (__stlxr(v32 - 1, p_shared_owners));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v11 = (std::__shared_weak_count *)a1[6];
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v13 = __ldxr(p_shared_weak_owners);
        while (__stxr(v13 + 1, p_shared_weak_owners));
      }
      v14 = *a2;
      if (v14)
      {
        xpc_retain(v14);
        v15 = *a3;
        if (*a3)
          goto LABEL_9;
      }
      else
      {
        v14 = xpc_null_create();
        v15 = *a3;
        if (*a3)
        {
LABEL_9:
          v16 = _Block_copy(v15);
          v17 = (std::__shared_weak_count *)v7[16];
          if (!v17)
LABEL_30:
            std::__throw_bad_weak_ptr[abi:ne180100]();
          goto LABEL_13;
        }
      }
      v16 = 0;
      v17 = (std::__shared_weak_count *)v7[16];
      if (!v17)
        goto LABEL_30;
LABEL_13:
      v18 = v7[15];
      v19 = std::__shared_weak_count::lock(v17);
      if (!v19)
        goto LABEL_30;
      v20 = v19;
      v21 = operator new(0x28uLL);
      v22 = v21;
      *v21 = v10;
      v21[1] = v11;
      if (v11)
      {
        v23 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v21[2] = v7;
      v21[3] = v14;
      v25 = xpc_null_create();
      v22[4] = v16;
      v26 = v7[17];
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      v29 = operator new(0x18uLL);
      *v29 = v22;
      v29[1] = v18;
      v29[2] = v20;
      dispatch_async_f(v26, v29, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
      do
        v30 = __ldaxr(v27);
      while (__stlxr(v30 - 1, v27));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      xpc_release(v25);
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      goto LABEL_25;
    }
  }
}

uint64_t ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void ABMServerInternal::handleNewClient_sync(uint64_t a1@<X0>, xpc::object *a2@<X1>, const void **a3@<X8>)
{
  NSObject *v6;
  char *v7;
  size_t v8;
  void *v9;
  void *v10;
  std::string *v11;
  std::string *v12;
  _QWORD *v13;
  NSObject *v14;
  char *v15;
  size_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void **v22;
  char *v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t *v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t **v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  void *v44;
  const void *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _QWORD v49[5];
  void *__p[3];
  _BYTE buf[22];
  uint8_t v52[4];
  void **v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if ((*(_DWORD *)(a1 + 192) & 0xFFFFFFFE) == 4)
  {
    v6 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      return;
    v7 = (char *)MEMORY[0x1C3B8CCDC](*(_QWORD *)a2);
    memset(__p, 170, sizeof(__p));
    v8 = strlen(v7);
    if (v8 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v9 = (void *)v8;
    if (v8 >= 0x17)
    {
      v19 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v19 = v8 | 7;
      v20 = v19 + 1;
      v10 = operator new(v19 + 1);
      __p[1] = v9;
      __p[2] = (void *)(v20 | 0x8000000000000000);
      __p[0] = v10;
    }
    else
    {
      HIBYTE(__p[2]) = v8;
      v10 = __p;
      if (!v8)
        goto LABEL_22;
    }
    memcpy(v10, v7, (size_t)v9);
LABEL_22:
    *((_BYTE *)v9 + (_QWORD)v10) = 0;
    free(v7);
    v21 = SHIBYTE(__p[2]);
    v22 = (void **)__p[0];
    v23 = to_string(*(_DWORD *)(a1 + 192));
    v24 = __p;
    if (v21 < 0)
      v24 = v22;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v23;
    _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Rejecting new client %s because server state is '%s'", buf, 0x16u);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    return;
  }
  xpc::object::to_string(a2);
  v11 = (std::string *)operator new(0x38uLL);
  v12 = v11;
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v11->__r_.__value_.__r.__words[2] = (std::string::size_type)__p[2];
  }
  v12[1].__r_.__value_.__s.__data_[0] = 0;
  v12[2].__r_.__value_.__r.__words[0] = 0;
  v12[1].__r_.__value_.__r.__words[2] = 0;
  v12[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v12[1].__r_.__value_.__r.__words[2];
  *(_QWORD *)buf = v12;
  v13 = operator new(0x20uLL);
  *v13 = off_1E7920080;
  v13[1] = 0;
  v13[2] = 0;
  v13[3] = v12;
  *(_QWORD *)&buf[8] = v13;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  else
  {
    v14 = *(NSObject **)(a1 + 112);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      goto LABEL_33;
  }
  v15 = (char *)MEMORY[0x1C3B8CCDC](*(_QWORD *)a2);
  memset(__p, 170, sizeof(__p));
  v16 = strlen(v15);
  if (v16 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v17 = (void *)v16;
  if (v16 >= 0x17)
  {
    v25 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v25 = v16 | 7;
    v26 = v25 + 1;
    v18 = operator new(v25 + 1);
    __p[1] = v17;
    __p[2] = (void *)(v26 | 0x8000000000000000);
    __p[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(__p[2]) = v16;
  v18 = __p;
  if (v16)
LABEL_29:
    memcpy(v18, v15, (size_t)v17);
  *((_BYTE *)v17 + (_QWORD)v18) = 0;
  free(v15);
  v27 = __p;
  if (SHIBYTE(__p[2]) < 0)
    v27 = (void **)__p[0];
  *(_DWORD *)v52 = 136315138;
  v53 = v27;
  _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I New client: %s", v52, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v29 = (uint64_t **)(a1 + 152);
    v28 = *(uint64_t **)(a1 + 152);
    if (v28)
      goto LABEL_34;
    goto LABEL_43;
  }
LABEL_33:
  v29 = (uint64_t **)(a1 + 152);
  v28 = *(uint64_t **)(a1 + 152);
  if (v28)
  {
LABEL_34:
    v30 = *(_QWORD *)a2;
    while (1)
    {
      while (1)
      {
        v31 = (uint64_t **)v28;
        v32 = v28[4];
        if (v30 >= v32)
          break;
        v28 = *v31;
        v29 = v31;
        if (!*v31)
          goto LABEL_44;
      }
      if (v32 >= v30)
        break;
      v28 = v31[1];
      if (!v28)
      {
        v29 = v31 + 1;
        goto LABEL_44;
      }
    }
    v33 = (uint64_t *)v31;
    v35 = *(_QWORD *)buf;
    v34 = *(_QWORD *)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_52;
    goto LABEL_50;
  }
LABEL_43:
  v31 = v29;
LABEL_44:
  v33 = (uint64_t *)operator new(0x38uLL);
  v36 = *(void **)a2;
  v33[4] = *(_QWORD *)a2;
  if (v36)
    xpc_retain(v36);
  else
    v33[4] = (uint64_t)xpc_null_create();
  v33[5] = 0;
  v33[6] = 0;
  *v33 = 0;
  v33[1] = 0;
  v33[2] = (uint64_t)v31;
  *v29 = v33;
  v37 = **(_QWORD **)(a1 + 144);
  v38 = v33;
  if (v37)
  {
    *(_QWORD *)(a1 + 144) = v37;
    v38 = *v29;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 152), v38);
  ++*(_QWORD *)(a1 + 160);
  v35 = *(_QWORD *)buf;
  v34 = *(_QWORD *)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_52;
LABEL_50:
  v39 = (unint64_t *)(v34 + 8);
  do
    v40 = __ldxr(v39);
  while (__stxr(v40 + 1, v39));
LABEL_52:
  v41 = (std::__shared_weak_count *)v33[6];
  v33[5] = v35;
  v33[6] = v34;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 0x40000000;
  v49[2] = ___ZN17ABMServerInternal20handleNewClient_syncEN3xpc10connectionE_block_invoke;
  v49[3] = &__block_descriptor_tmp_15_2;
  v49[4] = a1;
  v44 = _Block_copy(v49);
  v45 = *a3;
  *a3 = v44;
  if (v45)
    _Block_release(v45);
  v46 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1BF575780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  const void **v20;
  void *v21;

  operator delete(v21);
  if (a19 < 0)
    operator delete(__p);
  if (*v20)
    _Block_release(*v20);
  _Unwind_Resume(a1);
}

uint64_t awd::metrics::CommCenterNVMSync::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  }
LABEL_10:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 28), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 36) & 0x10) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 29), (uint64_t)a2, a4);
  return this;
}

void StatsModule::reportAWD_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  _QWORD *v4;
  xpc_object_t v5;
  NSObject *v6;
  xpc_object_t v7;
  uint8_t buf[4];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 200);
  if (v4)
  {
    v5 = *a3;
    v7 = v5;
    if (v5)
    {
      xpc_retain(v5);
    }
    else
    {
      v5 = xpc_null_create();
      v7 = v5;
    }
    StatsAWD::submit(v4, a2, &v7);
    xpc_release(v5);
  }
  else
  {
    v6 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = a2;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "AWD object has not created yet. 0x%x metric ID cannot be submitted", buf, 8u);
    }
  }
}

void sub_1BF5759AC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t hasBasebandEntitlement(xpc_object_t *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  xpc_connection_t remote_connection;
  xpc_object_t v8;
  __int128 v9;
  void *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t v17;
  void *v18;
  xpc_object_t v19;
  size_t count;
  size_t v21;
  size_t v22;
  xpc_object_t v23;
  int v24;
  xpc_object_t v25;
  xpc_object_t *v26;
  int v27;
  size_t v28;
  BOOL v29;
  xpc_object_t value;
  xpc_object_t v31;
  size_t v32;
  size_t v33;
  xpc_object_t v34;
  int v35;
  xpc_object_t v36;
  xpc_object_t *v37;
  int v38;
  size_t v39;
  xpc_object_t v41;
  char v42;
  xpc_object_t v43;
  xpc_object_t object[3];
  xpc_object_t v45;
  xpc_object_t xdict;
  __int128 v47;
  __int128 v48;
  void *__p;
  uint64_t v50;
  uint64_t v51;

  v4 = MEMORY[0x1C3B8CD78](*a1);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 == MEMORY[0x1E0C812F8])
  {
    remote_connection = xpc_dictionary_get_remote_connection(*a1);
    if (remote_connection)
    {
      v8 = remote_connection;
      xpc_retain(remote_connection);
    }
    else
    {
      v8 = xpc_null_create();
    }
    if (MEMORY[0x1C3B8CD78](v8) != MEMORY[0x1E0C812E0])
    {
      v6 = 0;
LABEL_94:
      xpc_release(v8);
      return v6;
    }
    *(_QWORD *)&v9 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v47 = v9;
    v48 = v9;
    xpc_connection_get_audit_token();
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v10 = (void *)xpc_copy_entitlement_for_token();
    v11 = v10;
    if (v10)
    {
      xdict = v10;
    }
    else
    {
      v11 = xpc_null_create();
      xdict = v11;
      if (!v11)
      {
        v12 = xpc_null_create();
        v11 = 0;
        goto LABEL_15;
      }
    }
    if (MEMORY[0x1C3B8CD78](v11) == v5)
    {
      xpc_retain(v11);
      goto LABEL_16;
    }
    v12 = xpc_null_create();
LABEL_15:
    xdict = v12;
LABEL_16:
    xpc_release(v11);
    v13 = xpc_null_create();
    if (MEMORY[0x1C3B8CD78](xdict) == v5)
    {
      __p = &xdict;
      v50 = kKeyEntitlementFineGrained;
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&__p, object);
      v14 = object[0];
      object[0] = xpc_null_create();
      xpc_release(v13);
      xpc_release(object[0]);
      v13 = v14;
    }
    v15 = MEMORY[0x1C3B8CD78](v13);
    v16 = MEMORY[0x1E0C812C8];
    if (v15 != MEMORY[0x1E0C812C8])
    {
      v6 = 0;
LABEL_36:
      if ((a2 & 1) == 0)
      {
        if (MEMORY[0x1C3B8CD78](xdict) == v5)
        {
          value = xpc_dictionary_get_value(xdict, (const char *)kKeyEntitlementBasebanddAllow);
          v31 = value;
          __p = value;
          if (value)
          {
            xpc_retain(value);
          }
          else
          {
            v31 = xpc_null_create();
            __p = v31;
          }
          if (MEMORY[0x1C3B8CD78](v31) == MEMORY[0x1E0C81350])
          {
            v6 = 0;
          }
          else
          {
            v6 = xpc::dyn_cast_or_default((xpc *)&__p, 0);
            v31 = __p;
          }
          xpc_release(v31);
        }
        else
        {
          v6 = 0;
        }
      }
LABEL_93:
      xpc_release(v13);
      xpc_release(xdict);
      goto LABEL_94;
    }
    if (v13)
    {
      xpc_retain(v13);
      v17 = v13;
    }
    else
    {
      v17 = xpc_null_create();
      if (!v17)
      {
        v17 = xpc_null_create();
        v18 = 0;
LABEL_24:
        xpc_release(v18);
        if (v13)
        {
          xpc_retain(v13);
          v19 = v13;
        }
        else
        {
          v19 = xpc_null_create();
        }
        v41 = v13;
        if (MEMORY[0x1C3B8CD78](v13) == v16)
        {
          count = xpc_array_get_count(v13);
          if (v19)
            goto LABEL_29;
        }
        else
        {
          count = 0;
          if (v19)
          {
LABEL_29:
            xpc_retain(v19);
            v43 = v19;
            goto LABEL_32;
          }
        }
        v43 = xpc_null_create();
LABEL_32:
        xpc_release(v19);
        if (!count && v17 == v43)
        {
          v42 = 0;
LABEL_35:
          xpc_release(v43);
          xpc_release(v17);
          v13 = v41;
          v6 = v42 & 1;
          if ((v42 & 1) != 0)
            goto LABEL_93;
          goto LABEL_36;
        }
        if ((a2 & 1) != 0)
        {
          v42 = 0;
          v21 = 0;
          v22 = count - 1;
          while (1)
          {
            v45 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
            v23 = xpc_array_get_value(v17, v21);
            v45 = v23;
            if (v23)
              xpc_retain(v23);
            else
              v45 = xpc_null_create();
            memset(object, 170, sizeof(object));
            __p = 0;
            v50 = 0;
            v51 = 0;
            xpc::dyn_cast_or_default();
            if (SHIBYTE(v51) < 0)
              operator delete(__p);
            v24 = SHIBYTE(object[2]);
            v25 = SHIBYTE(object[2]) >= 0 ? (xpc_object_t)HIBYTE(object[2]) : object[1];
            if (v25 != (xpc_object_t)strlen((const char *)kBasebandXpcRestricted))
              break;
            v26 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
            if (memcmp(v26, (const void *)kBasebandXpcRestricted, (size_t)v25))
              break;
            v27 = 0;
            v42 = 1;
            if (v24 < 0)
              goto LABEL_55;
LABEL_56:
            xpc_release(v45);
            if (v27)
            {
              v28 = v21 + 1;
              v29 = v22 == v21++;
              if (!v29)
                continue;
              v21 = v28;
              if (v17 != v43)
                continue;
            }
            goto LABEL_35;
          }
          v27 = 1;
          if ((v24 & 0x80000000) == 0)
            goto LABEL_56;
LABEL_55:
          operator delete(object[0]);
          goto LABEL_56;
        }
        v42 = 0;
        v32 = 0;
        v33 = count - 1;
        while (1)
        {
          v45 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          v34 = xpc_array_get_value(v17, v32);
          v45 = v34;
          if (v34)
            xpc_retain(v34);
          else
            v45 = xpc_null_create();
          memset(object, 170, sizeof(object));
          __p = 0;
          v50 = 0;
          v51 = 0;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v51) < 0)
            operator delete(__p);
          v35 = SHIBYTE(object[2]);
          v36 = SHIBYTE(object[2]) >= 0 ? (xpc_object_t)HIBYTE(object[2]) : object[1];
          if (v36 != (xpc_object_t)strlen((const char *)kBasebandXpc))
            break;
          v37 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
          if (memcmp(v37, (const void *)kBasebandXpc, (size_t)v36))
            break;
          v38 = 0;
          v42 = 1;
          if (v35 < 0)
            goto LABEL_80;
LABEL_81:
          xpc_release(v45);
          if (v38)
          {
            v39 = v32 + 1;
            v29 = v33 == v32++;
            if (!v29)
              continue;
            v32 = v39;
            if (v17 != v43)
              continue;
          }
          goto LABEL_35;
        }
        v38 = 1;
        if ((v35 & 0x80000000) == 0)
          goto LABEL_81;
LABEL_80:
        operator delete(object[0]);
        goto LABEL_81;
      }
    }
    xpc_retain(v17);
    v18 = v17;
    goto LABEL_24;
  }
  return 0;
}

void sub_1BF575EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, xpc_object_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  void *v28;

  xpc_release(object);
  xpc_release(v28);
  xpc_release(a16);
  xpc_release(v27);
  _Unwind_Resume(a1);
}

void PowerManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::string *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  std::string v14;
  _QWORD *v15;
  std::string __p;

  v2 = *(_QWORD **)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v15 = v2;
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    std::string::__init_copy_ctor_external(&__p, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    goto LABEL_6;
  }
  v14 = *(std::string *)a2;
  v15 = v2;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_5;
LABEL_3:
  __p = v14;
LABEL_6:
  v3 = (std::__shared_weak_count *)v2[10];
  if (!v3 || (v4 = v2[9], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = operator new(0x20uLL);
  *v7 = v15;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v9 = v2[11];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v7;
  v12[1] = v4;
  v12[2] = v6;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<PowerManager::State>::execute_wrapped<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>(PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1},std::default_delete<PowerManager::State::releasePowerAssertion(std::string)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_21:
      operator delete(v14.__r_.__value_.__l.__data_);
      return;
    }
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_21;
}

void sub_1BF5761D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ctu::SharedSynchronizable<FSModuleICE>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11FSModuleICEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7918838;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void awd::metrics::CommCenterNVMSync::~CommCenterNVMSync(awd::metrics::CommCenterNVMSync *this)
{
  void *v1;

  *(_QWORD *)this = off_1E791CF38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

{
  *(_QWORD *)this = off_1E791CF38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E791CF38;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void FSModuleICE::requestFSSync_sync(FSModuleICE *this, unsigned int a2, int a3)
{
  int v3;
  NSObject *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  void *v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  void *v32;
  char *v33;
  char *v34;
  void *v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  BOOL v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  std::string::size_type v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_weak_owners;
  unint64_t v54;
  unint64_t *p_shared_owners;
  unint64_t v56;
  unint64_t v57;
  dispatch_object_t v58;
  NSObject *v59;
  NSObject *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  unint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  int64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  char *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  __int128 *v98;
  _OWORD *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  __int128 *v116;
  _OWORD *v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  int64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  __int128 *v136;
  _OWORD *v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  unsigned int v141;
  int v142;
  std::string buf;
  dispatch_object_t v144;
  uint64_t v145;
  std::string v146;
  dispatch_object_t object;
  unint64_t v148;
  unint64_t v149;

  v3 = a3;
  if (*((_BYTE *)this + 962) || *((_BYTE *)this + 963))
  {
    v6 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Deferred to invoke FS Sync due to low power mode", (uint8_t *)&buf, 2u);
    }
    v7 = (char *)*((_QWORD *)this + 124);
    v8 = (char *)*((_QWORD *)this + 123);
    v9 = v7 - v8;
    if (v7 == v8)
      v10 = 0;
    else
      v10 = ((v7 - v8) << 6) - 1;
    v11 = *((_QWORD *)this + 126);
    v12 = *((_QWORD *)this + 127) + v11;
    if (v10 != v12)
      goto LABEL_133;
    if (v11 >= 0x200)
    {
      *((_QWORD *)this + 126) = v11 - 512;
      v13 = v8 + 8;
      v14 = *(_QWORD *)v8;
      *((_QWORD *)this + 123) = v8 + 8;
      if (v7 != *((char **)this + 125))
      {
LABEL_130:
        *(_QWORD *)v7 = v14;
        goto LABEL_131;
      }
      v15 = (char *)*((_QWORD *)this + 122);
      if (v13 > v15)
      {
        v16 = (v13 - v15) >> 3;
        if (v16 >= -1)
          v17 = v16 + 1;
        else
          v17 = v16 + 2;
        v18 = v17 >> 1;
        v19 = -v18;
        v20 = &v13[-8 * v18];
        v21 = v7 - v13;
        if (v7 != v13)
        {
          memmove(&v13[-8 * v18], v13, v7 - v13);
          v7 = (char *)*((_QWORD *)this + 123);
        }
        v22 = &v7[8 * v19];
        v7 = &v20[v21];
        *((_QWORD *)this + 124) = &v20[v21];
        *((_QWORD *)this + 123) = v22;
        goto LABEL_130;
      }
      v38 = (v7 - v15) >> 2;
      if (v7 == v15)
        v38 = 1;
      if (!(v38 >> 61))
      {
        v39 = v38 >> 2;
        v40 = 8 * v38;
        v41 = (char *)operator new(8 * v38);
        v42 = &v41[8 * v39];
        v44 = v7 - v13;
        v43 = v7 == v13;
        v7 = v42;
        if (v43)
          goto LABEL_128;
        v7 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = v44 - 8;
        if ((unint64_t)(v44 - 8) >= 0x38)
        {
          v113 = &v41[8 * v39];
          v46 = v113;
          if ((unint64_t)(v113 - v13) >= 0x20)
          {
            v114 = (v45 >> 3) + 1;
            v115 = 8 * (v114 & 0x3FFFFFFFFFFFFFFCLL);
            v46 = &v42[v115];
            v13 += v115;
            v116 = (__int128 *)(v8 + 24);
            v117 = v113 + 16;
            v118 = v114 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v119 = *v116;
              *(v117 - 1) = *(v116 - 1);
              *v117 = v119;
              v116 += 2;
              v117 += 2;
              v118 -= 4;
            }
            while (v118);
            if (v114 == (v114 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_128:
              *((_QWORD *)this + 122) = v41;
              *((_QWORD *)this + 123) = v42;
              *((_QWORD *)this + 124) = v7;
              *((_QWORD *)this + 125) = &v41[v40];
              if (v15)
              {
                operator delete(v15);
                v7 = (char *)*((_QWORD *)this + 124);
              }
              goto LABEL_130;
            }
          }
        }
        else
        {
          v46 = &v41[8 * v39];
        }
        do
        {
          v120 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v46 = v120;
          v46 += 8;
        }
        while (v46 != v7);
        goto LABEL_128;
      }
LABEL_152:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v142 = v3;
    v23 = v9 >> 3;
    v24 = (char *)*((_QWORD *)this + 125);
    v25 = (char *)*((_QWORD *)this + 122);
    if (v9 >> 3 < (unint64_t)((v24 - v25) >> 3))
    {
      v26 = operator new(0x1000uLL);
      v27 = v26;
      if (v24 != v7)
      {
        *(_QWORD *)v7 = v26;
        *((_QWORD *)this + 124) += 8;
        v3 = v142;
LABEL_132:
        v8 = (char *)*((_QWORD *)this + 123);
        v12 = *((_QWORD *)this + 127) + *((_QWORD *)this + 126);
LABEL_133:
        v121 = *(_QWORD *)&v8[(v12 >> 6) & 0x3FFFFFFFFFFFFF8];
        v122 = v12 & 0x1FF;
        v123 = 0xAAAAAA0000000000;
        if (v3)
          v123 = 0xAAAAAA0100000000;
        *(_QWORD *)(v121 + 8 * v122) = v123 | a2;
        ++*((_QWORD *)this + 127);
        return;
      }
      if (v8 == v25)
      {
        v88 = (v24 - v8) >> 2;
        if (v7 == v8)
          v88 = 1;
        if (v88 >> 61)
          goto LABEL_152;
        v89 = (v88 + 3) >> 2;
        v90 = 8 * v88;
        v91 = (char *)operator new(8 * v88);
        v47 = &v91[8 * v89];
        v92 = v47;
        if (v7 != v8)
        {
          v92 = &v47[8 * v23];
          v93 = &v91[8 * v89];
          v94 = v8;
          if ((unint64_t)(v9 - 8) < 0x38)
            goto LABEL_156;
          v95 = &v91[8 * v89];
          v93 = v95;
          v94 = v8;
          if ((unint64_t)(v95 - v8) < 0x20)
            goto LABEL_156;
          v96 = ((unint64_t)(v9 - 8) >> 3) + 1;
          v97 = 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL);
          v93 = &v47[v97];
          v94 = &v8[v97];
          v98 = (__int128 *)(v8 + 16);
          v99 = v95 + 16;
          v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v101 = *v98;
            *(v99 - 1) = *(v98 - 1);
            *v99 = v101;
            v98 += 2;
            v99 += 2;
            v100 -= 4;
          }
          while (v100);
          if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_156:
            do
            {
              v102 = *(_QWORD *)v94;
              v94 += 8;
              *(_QWORD *)v93 = v102;
              v93 += 8;
            }
            while (v93 != v92);
          }
        }
        *((_QWORD *)this + 122) = v91;
        *((_QWORD *)this + 123) = v47;
        *((_QWORD *)this + 124) = v92;
        *((_QWORD *)this + 125) = &v91[v90];
        if (v8)
        {
          operator delete(v8);
          v47 = (char *)*((_QWORD *)this + 123);
        }
      }
      else
      {
        v47 = v8;
      }
      *((_QWORD *)v47 - 1) = v27;
      v103 = (char *)*((_QWORD *)this + 123);
      *((_QWORD *)this + 123) = v103 - 8;
      v104 = *((_QWORD *)v103 - 1);
      *((_QWORD *)this + 123) = v103;
      v105 = (char *)*((_QWORD *)this + 124);
      v3 = v142;
      if (v105 != *((char **)this + 125))
      {
LABEL_115:
        *(_QWORD *)v105 = v104;
LABEL_131:
        *((_QWORD *)this + 124) += 8;
        goto LABEL_132;
      }
      v106 = (char *)*((_QWORD *)this + 122);
      if (v103 > v106)
      {
        v107 = (v103 - v106) >> 3;
        if (v107 >= -1)
          v108 = v107 + 1;
        else
          v108 = v107 + 2;
        v109 = v108 >> 1;
        v110 = -v109;
        v111 = &v103[-8 * v109];
        v112 = v105 - v103;
        if (v105 != v103)
        {
          memmove(&v103[-8 * v109], v103, v105 - v103);
          v103 = (char *)*((_QWORD *)this + 123);
        }
        *((_QWORD *)this + 124) = &v111[v112];
        *((_QWORD *)this + 123) = &v103[8 * v110];
        *(_QWORD *)&v111[v112] = v104;
        goto LABEL_131;
      }
      v124 = (v105 - v106) >> 2;
      if (v105 == v106)
        v124 = 1;
      if (v124 >> 61)
        goto LABEL_152;
      v125 = v124 >> 2;
      v126 = 8 * v124;
      v127 = (char *)operator new(8 * v124);
      v128 = &v127[8 * v125];
      v129 = v105 - v103;
      v43 = v105 == v103;
      v105 = v128;
      if (!v43)
      {
        v105 = &v128[v129 & 0xFFFFFFFFFFFFFFF8];
        v130 = v129 - 8;
        if ((unint64_t)(v129 - 8) < 0x38)
        {
          v131 = &v127[8 * v125];
          do
          {
LABEL_147:
            v140 = *(_QWORD *)v103;
            v103 += 8;
            *(_QWORD *)v131 = v140;
            v131 += 8;
          }
          while (v131 != v105);
          goto LABEL_148;
        }
        v132 = &v127[8 * v125];
        v131 = v132;
        if ((unint64_t)(v132 - v103) < 0x20)
          goto LABEL_147;
        v133 = (v130 >> 3) + 1;
        v134 = 8 * (v133 & 0x3FFFFFFFFFFFFFFCLL);
        v131 = &v128[v134];
        v135 = &v103[v134];
        v136 = (__int128 *)(v103 + 16);
        v137 = v132 + 16;
        v138 = v133 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v139 = *v136;
          *(v137 - 1) = *(v136 - 1);
          *v137 = v139;
          v136 += 2;
          v137 += 2;
          v138 -= 4;
        }
        while (v138);
        v103 = v135;
        if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_147;
      }
LABEL_148:
      *((_QWORD *)this + 122) = v127;
      *((_QWORD *)this + 123) = v128;
      *((_QWORD *)this + 124) = v105;
      *((_QWORD *)this + 125) = &v127[v126];
      if (v106)
      {
        operator delete(v106);
        v105 = (char *)*((_QWORD *)this + 124);
      }
      goto LABEL_115;
    }
    if (v24 == v25)
      v30 = 1;
    else
      v30 = (v24 - v25) >> 2;
    if (v30 >> 61)
      goto LABEL_152;
    v141 = a2;
    v31 = (char *)operator new(8 * v30);
    v32 = operator new(0x1000uLL);
    v33 = &v31[8 * v23];
    v34 = &v31[8 * v30];
    if (v23 == v30)
    {
      v35 = v32;
      if (v9 < 1)
      {
        if (v7 == v8)
          v65 = 1;
        else
          v65 = v9 >> 2;
        if (v65 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v3 = v142;
        v33 = (char *)operator new(8 * v65);
        v34 = &v33[8 * v65];
        operator delete(v31);
        v7 = (char *)*((_QWORD *)this + 124);
        v8 = (char *)*((_QWORD *)this + 123);
        v31 = v33;
      }
      else
      {
        v36 = v23 + 2;
        if (v23 >= -1)
          v36 = v23 + 1;
        v33 -= 8 * (v36 >> 1);
        v3 = v142;
      }
      *(_QWORD *)v33 = v35;
      v37 = v33 + 8;
      if (v7 == v8)
        goto LABEL_78;
    }
    else
    {
      v3 = v142;
      *(_QWORD *)v33 = v32;
      v37 = v33 + 8;
      if (v7 == v8)
      {
LABEL_78:
        v66 = (void *)*((_QWORD *)this + 122);
        *((_QWORD *)this + 122) = v31;
        *((_QWORD *)this + 123) = v33;
        *((_QWORD *)this + 124) = v37;
        *((_QWORD *)this + 125) = v34;
        a2 = v141;
        if (v66)
          operator delete(v66);
        goto LABEL_132;
      }
    }
    do
    {
      if (v33 == v31)
      {
        if (v37 >= v34)
        {
          if (v34 == v31)
            v72 = 1;
          else
            v72 = (v34 - v31) >> 2;
          if (v72 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v73 = (char *)operator new(8 * v72);
          v74 = v73;
          v75 = (v72 + 3) >> 2;
          v33 = &v73[8 * v75];
          v76 = v37 - v31;
          v43 = v37 == v31;
          v37 = v33;
          if (!v43)
          {
            v37 = &v33[v76 & 0xFFFFFFFFFFFFFFF8];
            v77 = v76 - 8;
            v78 = &v73[8 * v75];
            v79 = v31;
            if (v77 < 0x38)
              goto LABEL_157;
            v80 = 8 * v75;
            v78 = &v73[8 * v75];
            v79 = v31;
            if ((unint64_t)(v78 - v31) < 0x20)
              goto LABEL_157;
            v81 = (v77 >> 3) + 1;
            v82 = 8 * (v81 & 0x3FFFFFFFFFFFFFFCLL);
            v78 = &v33[v82];
            v79 = &v31[v82];
            v83 = (__int128 *)(v31 + 16);
            v84 = &v73[v80 + 16];
            v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v86 = *v83;
              *((_OWORD *)v84 - 1) = *(v83 - 1);
              *(_OWORD *)v84 = v86;
              v83 += 2;
              v84 += 32;
              v85 -= 4;
            }
            while (v85);
            if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_157:
              do
              {
                v87 = *(_QWORD *)v79;
                v79 += 8;
                *(_QWORD *)v78 = v87;
                v78 += 8;
              }
              while (v78 != v37);
            }
          }
          v34 = &v73[8 * v72];
          operator delete(v31);
          v31 = v74;
        }
        else
        {
          v68 = (v34 - v37) >> 3;
          if (v68 >= -1)
            v69 = v68 + 1;
          else
            v69 = v68 + 2;
          v70 = v69 >> 1;
          v33 = &v31[8 * (v69 >> 1)];
          v71 = v31;
          if (v37 != v31)
          {
            memmove(v33, v31, v37 - v31);
            v71 = v37;
          }
          v37 = (char *)v71 + 8 * v70;
        }
      }
      v67 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v33 - 1) = v67;
      v33 -= 8;
    }
    while (v7 != *((char **)this + 123));
    goto LABEL_78;
  }
  v28 = a3;
  v148 = 0xAAAAAAAAAAAAAAAALL;
  v149 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, FSModuleICE *))(*(_QWORD *)this + 80))(&v148, this);
  v29 = v148;
  if (!v148)
    goto LABEL_67;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  if (*((char *)this + 1071) < 0)
    std::string::__init_copy_ctor_external(&v146, *((const std::string::value_type **)this + 131), *((_QWORD *)this + 132));
  else
    v146 = *(std::string *)((char *)this + 1048);
  v48 = *(_QWORD *)(v29 + 104);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&buf, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
  else
    buf = v146;
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)v48 + 24))(&object, v48, &buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_49:
      v49 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
      if (!v49)
LABEL_151:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_53;
    }
  }
  else if ((SHIBYTE(v146.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_49;
  }
  operator delete(v146.__r_.__value_.__l.__data_);
  v49 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (!v49)
    goto LABEL_151;
LABEL_53:
  v50 = *((_QWORD *)this + 15);
  v51 = std::__shared_weak_count::lock(v49);
  if (!v51)
    goto LABEL_151;
  v52 = v51;
  p_shared_weak_owners = (unint64_t *)&v51->__shared_weak_owners_;
  do
    v54 = __ldxr(p_shared_weak_owners);
  while (__stxr(v54 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v51->__shared_owners_;
  do
    v56 = __ldaxr(p_shared_owners);
  while (__stlxr(v56 - 1, p_shared_owners));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v52);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  buf.__r_.__value_.__l.__size_ = v50;
  buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v52;
  do
    v57 = __ldxr(p_shared_weak_owners);
  while (__stxr(v57 + 1, p_shared_weak_owners));
  v58 = object;
  v144 = object;
  if (object)
  {
    dispatch_retain(object);
    v59 = object;
  }
  else
  {
    v59 = 0;
  }
  LOBYTE(v145) = v28;
  HIDWORD(v145) = a2;
  v60 = *((_QWORD *)this + 17);
  v61 = operator new(0x28uLL);
  *v61 = this;
  v61[1] = v50;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
  v61[2] = v52;
  v61[3] = v58;
  v144 = 0;
  v61[4] = v145;
  dispatch_group_notify_f(v59, v60, v61, (dispatch_function_t)dispatch::detail::group_notify<FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0>(dispatch_group_s *,dispatch_queue_s *,FSModuleICE::requestFSSync_sync(unsigned int,BOOL)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  std::__shared_weak_count::__release_weak(v52);
  if (object)
    dispatch_release(object);
LABEL_67:
  v62 = (std::__shared_weak_count *)v149;
  if (v149)
  {
    v63 = (unint64_t *)(v149 + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_1BF576CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,dispatch_object_t object,char a27)
{
  if (a25 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_1BF576D78()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1BF576D84);
  JUMPOUT(0x1BF576D8CLL);
}

void ___ZN11FSModuleICE21restartSyncTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *(NSObject **)(v3 + 88);
        if (*(_BYTE *)(v3 + 960))
        {
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v9 = 0;
            _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I scheduled filesystem flush", v9, 2u);
          }
          FSModuleICE::requestFSSync_sync((FSModuleICE *)v3, 4u, 0);
        }
        else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)v9 = 0;
          _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Skipping scheduled FS sync as baseband is not ready", v9, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF576EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ABMServerInternal::handleClientError_sync(_QWORD *a1, xpc_object_t *a2, xpc::object *a3)
{
  xpc_object_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  __int128 *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  _BOOL4 v23;
  void **v24;
  std::string *v25;
  NSObject *v26;
  void **v27;
  _QWORD *v28;
  xpc_object_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  _QWORD *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  void **v36;
  const char *v37;
  unint64_t *v38;
  unint64_t v39;
  void **v40;
  void *__p[4];
  __int128 *v42;
  std::__shared_weak_count *v43;
  std::string v44;
  std::string v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v42 = 0;
    v43 = 0;
    v8 = a1 + 19;
    v7 = (_QWORD *)a1[19];
    if (!v7)
      goto LABEL_15;
  }
  else
  {
    v6 = xpc_null_create();
    v42 = 0;
    v43 = 0;
    v8 = a1 + 19;
    v7 = (_QWORD *)a1[19];
    if (!v7)
    {
LABEL_15:
      v13 = 0;
      v14 = 0;
      goto LABEL_16;
    }
  }
  v9 = v8;
  do
  {
    v10 = v7[4];
    v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6)
      v12 = v7;
    else
      v12 = v7 + 1;
    if (v11)
      v9 = v7;
    v7 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v9 == v8 || (unint64_t)v6 < v9[4])
    goto LABEL_15;
  v14 = (__int128 *)v9[5];
  v13 = (std::__shared_weak_count *)v9[6];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v35 = __ldxr(p_shared_owners);
    while (__stxr(v35 + 1, p_shared_owners));
  }
  v42 = v14;
  v43 = v13;
LABEL_16:
  xpc_release(v6);
  if (!v14)
    goto LABEL_63;
  memset(__p, 170, 24);
  if (*((char *)v14 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
  }
  else
  {
    v15 = *v14;
    v44.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  }
  v16 = std::string::insert(&v44, 0, "Client '", 8uLL);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v45, "'", 1uLL);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  __p[2] = (void *)v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_22:
      v20 = *(_QWORD *)a3;
      if (*(_QWORD *)a3 != MEMORY[0x1E0C81260])
        goto LABEL_23;
LABEL_36:
      v26 = a1[14];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v27 = (void **)__p[0];
        LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        _os_log_impl(&dword_1BF566000, v26, OS_LOG_TYPE_DEFAULT, "#I %s disappeared", (uint8_t *)&v45, 0xCu);
      }
      v28 = (_QWORD *)a1[19];
      if (v28)
      {
        v29 = *a2;
        v30 = (uint64_t)v8;
        do
        {
          v31 = v28[4];
          v32 = v31 >= (unint64_t)v29;
          if (v31 >= (unint64_t)v29)
            v33 = v28;
          else
            v33 = v28 + 1;
          if (v32)
            v30 = (uint64_t)v28;
          v28 = (_QWORD *)*v33;
        }
        while (*v33);
        if ((_QWORD *)v30 != v8 && (unint64_t)v29 >= *(_QWORD *)(v30 + 32))
          std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(a1 + 18, v30);
      }
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v44.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(v44.__r_.__value_.__l.__data_);
  v20 = *(_QWORD *)a3;
  if (*(_QWORD *)a3 == MEMORY[0x1E0C81260])
    goto LABEL_36;
LABEL_23:
  if (v20 == MEMORY[0x1E0C81258])
  {
    v22 = a1[14];
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      goto LABEL_61;
    v36 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v36 = (void **)__p[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
    v37 = "#D %s connection interrupted";
  }
  else
  {
    v21 = MEMORY[0x1E0C81288];
    v22 = a1[14];
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
    if (v20 != v21)
    {
      if (v23)
      {
        xpc::object::to_string(a3);
        v24 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v24 = (void **)__p[0];
        v25 = (v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v45
            : (std::string *)v45.__r_.__value_.__r.__words[0];
        LODWORD(v44.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
        WORD2(v44.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v44.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v25;
        _os_log_debug_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEBUG, "#D %s %s", (uint8_t *)&v44, 0x16u);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v45.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
            goto LABEL_63;
          goto LABEL_62;
        }
      }
LABEL_61:
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        goto LABEL_63;
      goto LABEL_62;
    }
    if (!v23)
      goto LABEL_61;
    v40 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v40 = (void **)__p[0];
    LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
    v37 = "#D %s will be terminated";
  }
  _os_log_debug_impl(&dword_1BF566000, v22, OS_LOG_TYPE_DEBUG, v37, (uint8_t *)&v45, 0xCu);
  if (SHIBYTE(__p[2]) < 0)
LABEL_62:
    operator delete(__p[0]);
LABEL_63:
  if (v13)
  {
    v38 = (unint64_t *)&v13->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BF57731C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1BF577378(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void FSModuleICE::singleFlushOperation_sync(FSModuleICE *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  unsigned int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string __p;
  unint64_t v22;
  unint64_t v23;
  std::string buf;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = "false";
    v6 = *((_DWORD *)this + 256);
    if (a2)
      v5 = "true";
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109378;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v6;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v5;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Requesting flush(%u) forShutdown=%s", (uint8_t *)&buf, 0x12u);
  }
  if ((BBUFSServerStart() & 1) != 0)
  {
    if ((BBUFSServerSetConfig() & 1) != 0)
    {
      v7 = BBUFSServerFlush();
      goto LABEL_11;
    }
  }
  else
  {
    v8 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "failed starting file server", (uint8_t *)&buf, 2u);
      v9 = *((_QWORD *)this + 11);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        goto LABEL_10;
LABEL_45:
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF566000, v9, OS_LOG_TYPE_ERROR, "failed to set shutdown flag for NVM sync with BBU", (uint8_t *)&buf, 2u);
      goto LABEL_10;
    }
  }
  v9 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    goto LABEL_45;
LABEL_10:
  v7 = 0;
LABEL_11:
  v22 = 0xAAAAAAAAAAAAAAAALL;
  v23 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, FSModuleICE *))(*(_QWORD *)this + 80))(&v22, this);
  v10 = v22;
  if (!v22)
    goto LABEL_20;
  if (*((char *)this + 1071) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 131), *((_QWORD *)this + 132));
  else
    __p = *(std::string *)((char *)this + 1048);
  v11 = *(_QWORD *)(v10 + 104);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    buf = __p;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 32))(v11, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_20:
      v12 = *((_QWORD *)this + 11);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        goto LABEL_22;
      goto LABEL_21;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  v12 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
LABEL_21:
    v13 = *((unsigned __int8 *)this + 520);
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v7;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v13;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Flush completed with success: %u, running: %u", (uint8_t *)&buf, 0xEu);
  }
LABEL_22:
  *((_BYTE *)this + 1152) = *((_BYTE *)this + 552);
  if (v7)
    *((_BYTE *)this + 964) = 0;
  FSModuleICE::submitMetric_sync(this, v7);
  if (*((_BYTE *)this + 520))
  {
    if (v7)
    {
      BBUFSServerStop();
      v14 = *((_DWORD *)this + 257) + 1;
      *((_DWORD *)this + 257) = v14;
      v15 = *((_QWORD *)this + 11);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *((_DWORD *)this + 256);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109376;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v14;
        LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v16;
        _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Checking response fSyncsCompleted=%u fSyncsRequested=%u", (uint8_t *)&buf, 0xEu);
        v14 = *((_DWORD *)this + 257);
      }
      if (v14 >= *((_DWORD *)this + 256))
        FSModuleICE::execPendingResponses_sync(this, 1);
    }
    else if (*((_BYTE *)this + 960))
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x40uLL);
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1BF73FC90;
      strcpy(buf.__r_.__value_.__l.__data_, "filesystem flush operation failed -- check ARI and BB state --");
      FSModuleICE::resetBaseband_sync(this, (uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v17 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I file server has stopped", (uint8_t *)&buf, 2u);
    }
  }
  v18 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v19 = (unint64_t *)(v23 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1BF5777F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
  {
    operator delete(__p);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
    _Unwind_Resume(a1);
  }
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ServiceCtrl::handleCommand(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  void *v7;
  void *v8;
  uint64_t v9;
  std::string __p;
  xpc_object_t object;
  void *aBlock;

  v9 = a1;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    __p = *(std::string *)a2;
    v7 = *a3;
    object = v7;
    if (v7)
      goto LABEL_3;
LABEL_6:
    object = xpc_null_create();
    v8 = *a4;
    if (!*a4)
      goto LABEL_8;
    goto LABEL_7;
  }
  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  v7 = *a3;
  object = v7;
  if (!v7)
    goto LABEL_6;
LABEL_3:
  xpc_retain(v7);
  v8 = *a4;
  if (*a4)
LABEL_7:
    v8 = _Block_copy(v8);
LABEL_8:
  aBlock = v8;
  ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>((uint64_t *)(a1 + 72), (uint64_t)&v9);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void Service::runCommand(uint64_t a1, uint64_t a2, xpc_object_t *a3, const void **a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  xpc_object_t v12;
  const void *v13;
  void *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  void *v18[3];

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v18[2] = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *(void **)(a1 + 8);
      v18[1] = v11;
      if (!v11)
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      v12 = *a3;
      v18[0] = v12;
      if (v12)
      {
        xpc_retain(v12);
        v13 = *a4;
        if (*a4)
        {
LABEL_6:
          v14 = _Block_copy(v13);
LABEL_9:
          v17 = v14;
          ServiceManager::runCommand((uint64_t)v11, a2, v18, &v17);
          if (v14)
            _Block_release(v14);
          xpc_release(v12);
          v18[0] = 0;
          goto LABEL_12;
        }
      }
      else
      {
        v12 = xpc_null_create();
        v18[0] = v12;
        v13 = *a4;
        if (*a4)
          goto LABEL_6;
      }
      v14 = 0;
      goto LABEL_9;
    }
  }
}

void sub_1BF577A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  const void *v12;

  if (v12)
    _Block_release(v12);
  xpc_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>::operator()<xpc::dict const&,void({block_pointer})(int,xpc::dict)>(uint64_t a1, xpc_object_t object, void **a3)
{
  void *v5;
  void *aBlock;
  xpc_object_t objecta;

  objecta = object;
  if (!object)
  {
    objecta = xpc_null_create();
    v5 = *a3;
    if (!*a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(object);
  v5 = *a3;
  if (*a3)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  (*(void (**)(uint64_t, xpc_object_t *, void **))(a1 + 16))(a1, &objecta, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(objecta);
}

void sub_1BF577B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object)
{
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ServiceManager::runCommand(uint64_t a1, uint64_t a2, void **a3, void **a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *aBlock;
  xpc_object_t object;

  v6 = *(_QWORD *)(a1 + 168);
  v7 = *a3;
  object = v7;
  if (!v7)
  {
    object = xpc_null_create();
    v8 = *a4;
    if (!*a4)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v7);
  v8 = *a4;
  if (*a4)
LABEL_5:
    v8 = _Block_copy(v8);
LABEL_6:
  aBlock = v8;
  ServiceCtrl::handleCommand(v6, a2, &object, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
}

void sub_1BF577C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, xpc_object_t object)
{
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t abm::debug::handleDebugPrintBBU(abm::debug *this, void *a2, const char *a3, const char *a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  abm::debug *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void **v20;
  uint64_t v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *__dst[3];
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *__p[2];
  __int128 v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  v45 = v5;
  v44 = v5;
  v43 = v5;
  v42 = v5;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  *(_OWORD *)__p = v5;
  v34 = v5;
  v31 = v5;
  v32 = v5;
  v29 = v5;
  v30 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v36 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v28 + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v10, &v29);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v28 = v6 + 24;
  v36 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v29 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v34 = 0u;
  LODWORD(v35) = 16;
  v12 = (_QWORD *)std::ostream::operator<<();
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
  v14 = strlen(a3);
  v15 = (abm::debug *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
  memset(__dst, 170, sizeof(__dst));
  if ((v35 & 0x10) != 0)
  {
    v21 = *((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1) < (unint64_t)v32)
    {
      *((_QWORD *)&v34 + 1) = v32;
      v21 = v32;
    }
    v22 = (const void *)*((_QWORD *)&v31 + 1);
    v19 = v21 - *((_QWORD *)&v31 + 1);
    if ((unint64_t)(v21 - *((_QWORD *)&v31 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      v19 = 0;
      HIBYTE(__dst[2]) = 0;
      v20 = __dst;
      goto LABEL_14;
    }
    v22 = (const void *)v30;
    v19 = v31 - v30;
    if ((_QWORD)v31 - (_QWORD)v30 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_22:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v23 = v19 | 7;
    v24 = v23 + 1;
    v20 = (void **)operator new(v23 + 1);
    __dst[1] = (void *)v19;
    __dst[2] = (void *)(v24 | 0x8000000000000000);
    __dst[0] = v20;
    goto LABEL_13;
  }
  HIBYTE(__dst[2]) = v19;
  v20 = __dst;
  if (v19)
LABEL_13:
    v15 = (abm::debug *)memmove(v20, v22, v19);
LABEL_14:
  *((_BYTE *)v20 + v19) = 0;
  v25 = __dst;
  if (SHIBYTE(__dst[2]) < 0)
    v25 = (void **)__dst[0];
  abm::debug::handleDebugPrintBBUHelper(v15, v16, v17, v18, v25);
  if (SHIBYTE(__dst[2]) < 0)
    operator delete(__dst[0]);
  v28 = *v8;
  *(uint64_t *)((char *)&v28 + *(_QWORD *)(v28 - 24)) = v8[3];
  *(_QWORD *)&v29 = v11 + 16;
  if (SBYTE7(v34) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8C364](&v36);
}

void sub_1BF577EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    std::ostringstream::~ostringstream((uint64_t)&a17);
    _Unwind_Resume(a1);
  }
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<RadioModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7919808;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_3(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  void *v11;
  void *v12;
  NSObject *v13;
  CommandDriverFactory *v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  std::string *v36;
  __int128 v37;
  NSObject *v38;
  uint64_t *v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  void *v47;
  void **v48;
  xpc_object_t v49;
  xpc_object_t v50;
  void *v51;
  dispatch_object_t object;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  void *v61;
  void *__p[4];
  std::string __dst;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFB720];
    v4 = strlen((const char *)*MEMORY[0x1E0CFB720]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v33 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v33 = v4 | 7;
      v34 = v33 + 1;
      p_dst = (std::string *)operator new(v33 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_63:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v35 = (char *)operator new(0x28uLL);
        strcpy(v35, " rejected; ABM is shutting down ");
        v36 = std::string::append(&__dst, v35, 0x20uLL);
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        __p[2] = (void *)v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        operator delete(v35);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
LABEL_65:
            v40 = a1[5];
            v39 = a1 + 5;
            if (!v40)
            {
LABEL_89:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_71:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v43 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v43 = __p[1];
            if (v43)
            {
              v44 = xpc_dictionary_create(0, 0, 0);
              if (v44 || (v44 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v44) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v44);
                  v45 = v44;
                }
                else
                {
                  v45 = xpc_null_create();
                }
              }
              else
              {
                v45 = xpc_null_create();
                v44 = 0;
              }
              xpc_release(v44);
              v46 = xpc_null_create();
              v47 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
              xpc_release(v47);
              xpc_release(v46);
              if (SHIBYTE(__p[2]) >= 0)
                v48 = __p;
              else
                v48 = (void **)__p[0];
              v49 = xpc_string_create((const char *)v48);
              if (!v49)
                v49 = xpc_null_create();
              xpc_dictionary_set_value(v45, (const char *)*MEMORY[0x1E0CFB0D0], v49);
              v50 = xpc_null_create();
              xpc_release(v49);
              xpc_release(v50);
            }
            LODWORD(v57) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v39, (unsigned int *)&v57, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_89;
          }
        }
        else
        {
          v38 = v2[11];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            goto LABEL_65;
        }
        v41 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v41 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v41;
        _os_log_impl(&dword_1BF566000, v38, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v42 = a1[5];
        v39 = a1 + 5;
        if (!v42)
          goto LABEL_89;
        goto LABEL_71;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_63;
  }
  __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
  __dst.__r_.__value_.__l.__size_ = 0xAAAAAAAAAAAAAAAALL;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[2] = ___ZN11RadioModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  aBlock[3] = &__block_descriptor_tmp_10_1;
  v8 = a1[6];
  v7 = (std::__shared_weak_count *)a1[7];
  aBlock[4] = v2;
  aBlock[5] = v8;
  aBlock[1] = 1174405120;
  v60 = v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = (void *)a1[5];
  if (v11)
    v11 = _Block_copy(v11);
  v61 = v11;
  v12 = _Block_copy(aBlock);
  v13 = v2[17];
  if (v13)
    dispatch_retain(v13);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  v57 = 0xAAAAAAAAAAAAAAAALL;
  v58 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v14 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v15 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v14);
    v16 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v17 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v21 = (unint64_t *)((char *)__p[1] + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v15 = off_1ED70F4D0;
  }
  v23 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  v53 = v15;
  v54 = *(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v24 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v55, v15);
  v57 = 0;
  v58 = 0;
  if (v56)
  {
    v58 = std::__shared_weak_count::lock(v56);
    if (v58)
      v57 = v55;
    if (v56)
      std::__shared_weak_count::__release_weak(v56);
  }
  if (!v23)
    goto LABEL_37;
  v26 = (unint64_t *)&v23->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v28 = v57;
    if (v57)
      goto LABEL_38;
  }
  else
  {
LABEL_37:
    v28 = v57;
    if (v57)
    {
LABEL_38:
      v29 = (void *)__dst.__r_.__value_.__r.__words[0];
      if (__dst.__r_.__value_.__r.__words[0])
        v29 = _Block_copy(__dst.__r_.__value_.__l.__data_);
      v51 = v29;
      object = (dispatch_object_t)__dst.__r_.__value_.__l.__size_;
      if (__dst.__r_.__value_.__l.__size_)
        dispatch_retain((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
      (*(void (**)(unint64_t, void **))(*(_QWORD *)v28 + 96))(v28, &v51);
      if (object)
        dispatch_release(object);
      if (v51)
        _Block_release(v51);
    }
  }
  v30 = v58;
  if (v58)
  {
    v31 = (unint64_t *)&v58->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (__dst.__r_.__value_.__l.__size_)
    dispatch_release((dispatch_object_t)__dst.__r_.__value_.__l.__size_);
  if (__dst.__r_.__value_.__r.__words[0])
    _Block_release(__dst.__r_.__value_.__l.__data_);
  if (v61)
    _Block_release(v61);
  if (v60)
    std::__shared_weak_count::__release_weak(v60);
}

void sub_1BF578654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,void *aBlock,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void TraceManager::runOnHelper_sync(_QWORD *a1, const char *a2, uint64_t a3, unsigned int a4, char a5, xpc_object_t *a6, NSObject **a7, void **a8)
{
  int v13;
  const char *v15;
  const char *v16;
  NSObject *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *p_shared_owners;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  void *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_weak_owners;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  NSObject *v53;
  unint64_t *v54;
  unint64_t v55;
  const void *v56;
  NSObject *object;
  xpc_object_t v58;
  _QWORD aBlock[6];
  std::__shared_weak_count *v60;
  dispatch_group_t group;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  int v65;
  void *v66;
  dispatch_object_t v67;
  xpc_object_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t v71;
  unint64_t v72;
  _BYTE buf[24];
  void *v74;
  uint64_t *v75;
  uint64_t v76;

  v13 = (int)a2;
  v76 = *MEMORY[0x1E0C80C00];
  if ((a5 & 1) == 0
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], a2)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v15)
    && !prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v16))
  {
    return;
  }
  v17 = a1[11];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = abm::helper::asString();
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = a3;
    _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I Running helper action: %s:%s", buf, 0x16u);
  }
  v71 = 0xAAAAAAAAAAAAAAAALL;
  v72 = 0xAAAAAAAAAAAAAAAALL;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  v19 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v74 = &__block_descriptor_tmp_13_8;
  v75 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v20 = unk_1ED70F6A0;
    v69 = GetABMLogServer(void)::sLogServer;
    v70 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, buf);
    v20 = unk_1ED70F6A0;
    v69 = GetABMLogServer(void)::sLogServer;
    v70 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_12;
  }
  v21 = (unint64_t *)(v20 + 8);
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
LABEL_12:
  abm::HelperClient::create();
  if (v70)
  {
    p_shared_owners = &v70->__shared_owners_;
    do
      v24 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v24 - 1, (unint64_t *)p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v25 = MEMORY[0x1C3B8CD78](*a6);
  v26 = MEMORY[0x1E0C812F8];
  if (v25 != MEMORY[0x1E0C812F8])
  {
    v27 = xpc_dictionary_create(0, 0, 0);
    if (v27 || (v27 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v27) == v26)
      {
        xpc_retain(v27);
        v28 = v27;
      }
      else
      {
        v28 = xpc_null_create();
      }
    }
    else
    {
      v28 = xpc_null_create();
      v27 = 0;
    }
    xpc_release(v27);
    v29 = xpc_null_create();
    v30 = *a6;
    *a6 = v28;
    xpc_release(v30);
    xpc_release(v29);
  }
  if (a4)
  {
    v31 = xpc_int64_create(a4);
    if (!v31)
      v31 = xpc_null_create();
    xpc_dictionary_set_value(*a6, (const char *)*MEMORY[0x1E0CF1008], v31);
    v32 = xpc_null_create();
    xpc_release(v31);
    xpc_release(v32);
  }
  if (!*a8 || !a8[1])
  {
    v35 = (std::__shared_weak_count *)a1[16];
    if (!v35 || (v36 = a1[15], (v37 = std::__shared_weak_count::lock(v35)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v38 = v37;
    p_shared_weak_owners = (unint64_t *)&v37->__shared_weak_owners_;
    do
      v40 = __ldxr(p_shared_weak_owners);
    while (__stxr(v40 + 1, p_shared_weak_owners));
    v41 = (unint64_t *)&v37->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v38);
    }
    memset(buf, 170, 16);
    aBlock[0] = v19;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN12TraceManager16runOnHelper_syncEN3abm6helper6TaskIDEPKcjbN3xpc4dictEN8dispatch13group_sessionENS7_8callbackIU13block_pointerFvN12TelephonyXPC6ResultES6_EEE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_70_0;
    aBlock[4] = a1;
    aBlock[5] = v36;
    v60 = v38;
    do
      v43 = __ldxr(p_shared_weak_owners);
    while (__stxr(v43 + 1, p_shared_weak_owners));
    v44 = *a7;
    group = v44;
    if (v44)
    {
      dispatch_retain(v44);
      dispatch_group_enter(group);
    }
    v62 = v71;
    v63 = (std::__shared_weak_count *)v72;
    if (v72)
    {
      v45 = (unint64_t *)(v72 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v65 = v13;
    v64 = a3;
    v47 = _Block_copy(aBlock);
    v48 = a1[17];
    if (v48)
      dispatch_retain(v48);
    *(_QWORD *)buf = v47;
    *(_QWORD *)&buf[8] = v48;
    v58 = *a6;
    if (*a6)
    {
      xpc_retain(*a6);
      if (v47)
        goto LABEL_53;
    }
    else
    {
      v58 = xpc_null_create();
      if (v47)
      {
LABEL_53:
        v56 = _Block_copy(v47);
        object = v48;
        if (!v48)
          goto LABEL_55;
        goto LABEL_54;
      }
    }
    v56 = 0;
    object = v48;
    if (!v48)
    {
LABEL_55:
      abm::HelperClient::perform();
      if (object)
        dispatch_release(object);
      if (v56)
        _Block_release(v56);
      xpc_release(v58);
      if (v48)
        dispatch_release(v48);
      if (v47)
        _Block_release(v47);
      v49 = v63;
      if (v63)
      {
        v50 = (unint64_t *)&v63->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v60)
        std::__shared_weak_count::__release_weak(v60);
      std::__shared_weak_count::__release_weak(v38);
      v52 = (std::__shared_weak_count *)v72;
      if (v72)
        goto LABEL_87;
      return;
    }
LABEL_54:
    dispatch_retain(v48);
    goto LABEL_55;
  }
  v33 = *a6;
  v68 = v33;
  if (!v33)
  {
    v68 = xpc_null_create();
    v34 = *a8;
    if (!*a8)
      goto LABEL_80;
    goto LABEL_79;
  }
  xpc_retain(v33);
  v34 = *a8;
  if (*a8)
LABEL_79:
    v34 = _Block_copy(v34);
LABEL_80:
  v53 = a8[1];
  v66 = v34;
  v67 = v53;
  if (v53)
    dispatch_retain(v53);
  abm::HelperClient::perform();
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  xpc_release(v68);
  v68 = 0;
  v52 = (std::__shared_weak_count *)v72;
  if (v72)
  {
LABEL_87:
    v54 = (unint64_t *)&v52->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1BF578DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, dispatch_group_t group, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,xpc_object_t object,char a27,uint64_t a28,char a29)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF578EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  xpc_object_t result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    v5 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v5;
    if (v5)
      return xpc_retain(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = xpc_null_create();
    v5 = *(void **)(a2 + 48);
    *(_QWORD *)(a1 + 48) = v5;
    if (v5)
      return xpc_retain(v5);
  }
  result = xpc_null_create();
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void ___ZN12TraceManager20initTraceHelper_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  const char *v10;
  int v11;
  size_t v12;
  const void *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  uint64_t v22;
  void *v23[2];
  NSObject *v24;
  xpc_object_t object;
  uint8_t buf[16];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v9 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Wireless helper server has started", buf, 2u);
      }
      v10 = (const char *)*MEMORY[0x1E0CFB980];
      v11 = *(char *)(v3 + 215);
      if (v11 >= 0)
        v12 = *(unsigned __int8 *)(v3 + 215);
      else
        v12 = *(_QWORD *)(v3 + 200);
      if (v12 == strlen((const char *)*MEMORY[0x1E0CFB980])
        && (v11 >= 0 ? (v13 = (const void *)(v3 + 192)) : (v13 = *(const void **)(v3 + 192)),
            !memcmp(v13, v10, v12)
         && (prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB088], v14)
          || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFC248], v16)
          || prop::tracesettings::enabled((prop::tracesettings *)*MEMORY[0x1E0CFB118], v17))))
      {
        v18 = xpc_dictionary_create(0, 0, 0);
        if (v18 || (v18 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v18) == MEMORY[0x1E0C812F8])
          {
            xpc_retain(v18);
            v19 = v18;
          }
          else
          {
            v19 = xpc_null_create();
          }
        }
        else
        {
          v19 = xpc_null_create();
          v18 = 0;
        }
        xpc_release(v18);
        v20 = xpc_string_create(v10);
        if (!v20)
          v20 = xpc_null_create();
        xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB530], v20);
        v21 = xpc_null_create();
        xpc_release(v20);
        xpc_release(v21);
        object = v19;
        if (v19)
          xpc_retain(v19);
        else
          object = xpc_null_create();
        v22 = *MEMORY[0x1E0CF10A0];
        v23[1] = 0;
        v24 = 0;
        v23[0] = 0;
        TraceManager::runOnHelper_sync((_QWORD *)v3, (const char *)9, v22, 0x1388u, 0, &object, &v24, v23);
        xpc_release(object);
        object = 0;
        xpc_release(v19);
      }
      else
      {
        v15 = *(NSObject **)(v3 + 88);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Skipping trace start", buf, 2u);
        }
      }
    }
  }
}

void sub_1BF579228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  void *v12;

  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a9);
  xpc_release(object);
  object = 0;
  xpc_release(v12);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb5_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetWCI2Mode_sync(v4, &v8, *((_DWORD *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF579374(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

xpc_object_t __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__2(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[2].n128_u32[2] = a2[2].n128_u32[2];
  result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

__n128 __Block_byref_object_copy__3(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

__n128 __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

__n128 __Block_byref_object_copy__6(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

uint64_t __Block_byref_object_copy__7(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void AntennaModule::setProperty_sync(AntennaModule *this, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  xpc_object_t value;
  const char *v8;
  std::string::size_type size;
  const void *v10;
  size_t v11;
  size_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  size_t v15;
  size_t v16;
  std::string::size_type v17;
  xpc_object_t v18;
  const char *v19;
  size_t v20;
  std::string::size_type v21;
  std::string *p_buf;
  std::string::size_type v23;
  size_t v24;
  xpc_object_t v25;
  const char *v26;
  size_t v27;
  std::string::size_type v28;
  std::string *v29;
  std::string::size_type v30;
  size_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  const char *v34;
  size_t v35;
  std::string::size_type v36;
  std::string *v37;
  void *v38;
  size_t v39;
  std::string::size_type v40;
  std::string::size_type v41;
  const char *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  const char *v45;
  char *v46;
  const char *v47;
  char *v48;
  const char *v49;
  std::string::size_type v50;
  const char *v51;
  std::string::size_type v52;
  const char *v53;
  std::string::size_type v54;
  const char *v55;
  std::string::size_type v56;
  const char *v57;
  std::string::size_type v58;
  const char *v59;
  std::string::size_type v60;
  const char *v61;
  char v62;
  std::string *v63;
  size_t v64;
  const char *v65;
  int v66;
  const char *v67;
  int v68;
  const char *v69;
  int v70;
  const char *v71;
  int v72;
  std::string *v73;
  size_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  std::string::size_type v79;
  xpc_object_t v80;
  void *v81;
  std::string::size_type v82;
  const char *v83;
  std::string::size_type v84;
  unsigned int v85;
  std::string::size_type v86;
  unsigned int v87;
  std::string::size_type v88;
  unsigned int v89;
  void *__p;
  char v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;
  xpc_object_t object;
  const char *v102;
  char v103;
  std::string xdict;
  std::string v105;
  std::string v106;
  std::string v107;
  xpc_object_t v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string buf;

  v4 = MEMORY[0x1C3B8CD78](*a2);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = *((_QWORD *)this + 11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Failed to get input!", (uint8_t *)&buf, 2u);
    }
    return;
  }
  memset(&buf, 170, sizeof(buf));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB718]);
  v111.__r_.__value_.__r.__words[0] = (std::string::size_type)value;
  if (value)
    xpc_retain(value);
  else
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&v111, (const object *)"", v8);
  xpc_release(v111.__r_.__value_.__l.__data_);
  size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = buf.__r_.__value_.__l.__size_;
  if (!size || MEMORY[0x1C3B8CD78](*a2) != v5)
    goto LABEL_73;
  v10 = (const void *)*MEMORY[0x1E0CFB990];
  v11 = strlen((const char *)*MEMORY[0x1E0CFB990]);
  v12 = v11;
  v13 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v11 != -1)
    {
      v14 = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_ >= v11)
        v16 = v11;
      else
        v16 = buf.__r_.__value_.__l.__size_;
      if (memcmp(buf.__r_.__value_.__l.__data_, v10, v16))
        goto LABEL_27;
      goto LABEL_23;
    }
LABEL_212:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v11 == -1)
    goto LABEL_212;
  v14 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (HIBYTE(buf.__r_.__value_.__r.__words[2]) >= v11)
    v15 = v11;
  else
    v15 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  if (memcmp(&buf, v10, v15))
    goto LABEL_27;
LABEL_23:
  if (v14 == v12)
  {
    xdict.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    v17 = *MEMORY[0x1E0CFB4D0];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v17;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &xdict);
    if (MEMORY[0x1C3B8CD78](xdict.__r_.__value_.__r.__words[0]) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      v18 = xpc_dictionary_get_value(xdict.__r_.__value_.__l.__data_, (const char *)*MEMORY[0x1E0CFC0E8]);
      object = v18;
      if (v18)
        xpc_retain(v18);
      else
        object = xpc_null_create();
      xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v19);
      xpc_release(object);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v110, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v110 = v111;
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v110);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
    }
    xpc_release(xdict.__r_.__value_.__l.__data_);
    goto LABEL_73;
  }
LABEL_27:
  v20 = strlen((const char *)*MEMORY[0x1E0CFB3B0]);
  v21 = v20;
  if ((v13 & 0x80) == 0)
  {
    if (v20 != -1)
    {
      p_buf = &buf;
      v23 = v13;
      goto LABEL_32;
    }
LABEL_213:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v20 == -1)
    goto LABEL_213;
  v23 = buf.__r_.__value_.__l.__size_;
  p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_32:
  if (v23 >= v21)
    v24 = v21;
  else
    v24 = v23;
  if (!memcmp(p_buf, (const void *)*MEMORY[0x1E0CFB3B0], v24) && v23 == v21)
  {
    memset(&v111, 170, sizeof(v111));
    v25 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB4D0]);
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25)
      xpc_retain(v25);
    else
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&xdict, (const object *)"", v26);
    xpc_release(xdict.__r_.__value_.__l.__data_);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v109, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v109 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v109);
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v109.__r_.__value_.__r.__words[0];
LABEL_61:
      operator delete(v38);
    }
LABEL_62:
    if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_73;
    goto LABEL_63;
  }
  v27 = strlen((const char *)*MEMORY[0x1E0CFB5B8]);
  v28 = v27;
  if ((v13 & 0x80) == 0)
  {
    if (v27 != -1)
    {
      v29 = &buf;
      v30 = v13;
      goto LABEL_44;
    }
LABEL_214:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v27 == -1)
    goto LABEL_214;
  v30 = buf.__r_.__value_.__l.__size_;
  v29 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_44:
  if (v30 >= v28)
    v31 = v28;
  else
    v31 = v30;
  if (!memcmp(v29, (const void *)*MEMORY[0x1E0CFB5B8], v31) && v30 == v28)
  {
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v32 = *MEMORY[0x1E0CFB4D0];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v32;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C3B8CD78](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      v33 = *MEMORY[0x1E0CFBF30];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v33;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v34);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v107, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v107 = v111;
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v107);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v107.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
    }
LABEL_143:
    xpc_release(object);
    goto LABEL_73;
  }
  v35 = strlen((const char *)*MEMORY[0x1E0CFB708]);
  v36 = v35;
  if ((v13 & 0x80) == 0)
  {
    if (v35 != -1)
    {
      v37 = &buf;
      goto LABEL_78;
    }
LABEL_215:
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  if (v35 == -1)
    goto LABEL_215;
  v13 = buf.__r_.__value_.__l.__size_;
  v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
LABEL_78:
  if (v13 >= v36)
    v39 = v36;
  else
    v39 = v13;
  if (!memcmp(v37, (const void *)*MEMORY[0x1E0CFB708], v39) && v13 == v36)
  {
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v40 = *MEMORY[0x1E0CFB4D0];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v40;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C3B8CD78](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      v41 = *MEMORY[0x1E0CFBFA8];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v41;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v42);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v106, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v106 = v111;
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v106);
      if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v106.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
    }
    goto LABEL_143;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE18]))
  {
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v43 = *MEMORY[0x1E0CFB4D0];
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v111.__r_.__value_.__l.__size_ = v43;
    xpc::dict::object_proxy::operator xpc::dict((uint64_t)&v111, &object);
    if (MEMORY[0x1C3B8CD78](object) == v5)
    {
      memset(&v111, 170, sizeof(v111));
      v44 = *MEMORY[0x1E0CFC0C8];
      xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      xdict.__r_.__value_.__l.__size_ = v44;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
      xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v45);
      xpc_release(v108);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v105, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
      else
        v105 = v111;
      AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v105);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v105.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
    }
    goto LABEL_143;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE40]))
  {
    memset(&v111, 170, sizeof(v111));
    v46 = (char *)*MEMORY[0x1E0CFB1B8];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v47);
    xpc_release(object);
    memset(&xdict, 170, sizeof(xdict));
    v48 = (char *)*MEMORY[0x1E0CFB398];
    object = a2;
    v102 = v48;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
    xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v49);
    xpc_release(v108);
    std::string::basic_string[abi:ne180100]<0>(&object, v46);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v100, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v100 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&object, (uint64_t)&v100);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (v103 < 0)
      operator delete(object);
    std::string::basic_string[abi:ne180100]<0>(&object, v48);
    if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v99, xdict.__r_.__value_.__l.__data_, xdict.__r_.__value_.__l.__size_);
    else
      v99 = xdict;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&object, (uint64_t)&v99);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v99.__r_.__value_.__l.__data_);
      if ((v103 & 0x80000000) == 0)
      {
LABEL_128:
        if ((SHIBYTE(xdict.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_62;
        goto LABEL_132;
      }
    }
    else if ((v103 & 0x80000000) == 0)
    {
      goto LABEL_128;
    }
    operator delete(object);
    if ((SHIBYTE(xdict.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_62;
LABEL_132:
    v38 = (void *)xdict.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFB6B0]))
  {
    memset(&v111, 170, sizeof(v111));
    v50 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v50;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v51);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v98, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v98 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v98);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v98.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE10]))
  {
    memset(&v111, 170, sizeof(v111));
    v52 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v52;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v53);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v97, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v97 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v97);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v97.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE00]))
  {
    memset(&v111, 170, sizeof(v111));
    v54 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v54;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v55);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v96, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v96 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v96);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v96.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFB6B8]))
  {
    memset(&v111, 170, sizeof(v111));
    v56 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v56;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v57);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v95, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v95 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v95);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    {
      v38 = (void *)v95.__r_.__value_.__r.__words[0];
      goto LABEL_61;
    }
    goto LABEL_62;
  }
  if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFBE88]))
  {
    memset(&v111, 170, sizeof(v111));
    v58 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v58;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v59);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v94, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v94 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v94);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v111;
    else
      v63 = (std::string *)v111.__r_.__value_.__r.__words[0];
    v64 = strlen((const char *)*MEMORY[0x1E0CFC120]);
    if (strncasecmp((const char *)v63, (const char *)*MEMORY[0x1E0CFC120], v64))
    {
      v65 = (const char *)*MEMORY[0x1E0CFC0D0];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E0CFC0D0]);
      object = a2;
      v102 = v65;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v66 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v66);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      v67 = (const char *)*MEMORY[0x1E0CFC088];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E0CFC088]);
      object = a2;
      v102 = v67;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v68 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v68);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      v69 = (const char *)*MEMORY[0x1E0CFBEF0];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E0CFBEF0]);
      object = a2;
      v102 = v69;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v70 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v70);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      v71 = (const char *)*MEMORY[0x1E0CFBEE8];
      std::string::basic_string[abi:ne180100]<0>(&xdict, (char *)*MEMORY[0x1E0CFBEE8]);
      object = a2;
      v102 = v71;
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v72 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v72);
      xpc_release(v108);
      goto LABEL_187;
    }
  }
  else
  {
    if (std::string::compare(&buf, "kSetWorkoutInfo"))
    {
      if (!std::string::compare(&buf, (const std::string::value_type *)*MEMORY[0x1E0CFAF90]))
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v92, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        else
          v92 = buf;
        AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v92);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        v79 = *MEMORY[0x1E0CFB4D0];
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        v111.__r_.__value_.__l.__size_ = v79;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&v111, &xdict);
        v80 = xpc_null_create();
        v81 = (void *)xdict.__r_.__value_.__r.__words[0];
        object = (xpc_object_t)xdict.__r_.__value_.__r.__words[0];
        if (xdict.__r_.__value_.__r.__words[0] && MEMORY[0x1C3B8CD78](xdict.__r_.__value_.__r.__words[0]) == v5)
          xpc_retain(v81);
        else
          object = xpc_null_create();
        if (MEMORY[0x1C3B8CD78]() != v5)
          xpc::dict::operator=(&object, v80);
        xpc_release(v80);
        xpc_release(xdict.__r_.__value_.__l.__data_);
        v82 = *MEMORY[0x1E0CFBB48];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E0CFBB48]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v82;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        xpc::dyn_cast_or_default((xpc *)&v108, (const object *)"", v83);
        AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, (uint64_t)&__p);
        if (v91 < 0)
          operator delete(__p);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v84 = *MEMORY[0x1E0CFB308];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E0CFB308]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v84;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        v85 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v85);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v86 = *MEMORY[0x1E0CFB4C8];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E0CFB4C8]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v86;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        v87 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v87);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        v88 = *MEMORY[0x1E0CFB120];
        std::string::basic_string[abi:ne180100]<0>(&v111, (char *)*MEMORY[0x1E0CFB120]);
        xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        xdict.__r_.__value_.__l.__size_ = v88;
        xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &v108);
        v89 = xpc::dyn_cast_or_default((xpc *)&v108, (const object *)0x7FFF);
        AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&v111.__r_.__value_.__l.__data_, v89);
        xpc_release(v108);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        xpc_release(object);
      }
      goto LABEL_73;
    }
    memset(&v111, 170, sizeof(v111));
    v60 = *MEMORY[0x1E0CFB4D0];
    xdict.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    xdict.__r_.__value_.__l.__size_ = v60;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)&xdict, &object);
    xpc::dyn_cast_or_default((xpc *)&object, (const object *)"", v61);
    xpc_release(object);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v93, v111.__r_.__value_.__l.__data_, v111.__r_.__value_.__l.__size_);
    else
      v93 = v111;
    AntennaModule::setPreference_sync<std::string>((uint64_t)this, (const void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v93);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = &v111;
    else
      v73 = (std::string *)v111.__r_.__value_.__r.__words[0];
    v74 = strlen((const char *)*MEMORY[0x1E0CFC120]);
    if (strncasecmp((const char *)v73, (const char *)*MEMORY[0x1E0CFC120], v74))
    {
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutType");
      object = a2;
      v102 = "kKeyWorkoutType";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v75 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v75);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutState");
      object = a2;
      v102 = "kKeyWorkoutState";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v76 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v76);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeyWorkoutLocation");
      object = a2;
      v102 = "kKeyWorkoutLocation";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v77 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v77);
      xpc_release(v108);
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&xdict, "kKeySwimLocation");
      object = a2;
      v102 = "kKeySwimLocation";
      xpc::dict::object_proxy::operator xpc::object((uint64_t)&object, &v108);
      v78 = xpc::dyn_cast_or_default((xpc *)&v108, 0);
      AntennaModule::setPreference_sync<unsigned int>((uint64_t)this, (const void **)&xdict.__r_.__value_.__l.__data_, v78);
      xpc_release(v108);
LABEL_187:
      if (SHIBYTE(xdict.__r_.__value_.__r.__words[2]) < 0)
        operator delete(xdict.__r_.__value_.__l.__data_);
      v62 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
    }
  }
  if (v62 < 0)
LABEL_63:
    operator delete(v111.__r_.__value_.__l.__data_);
LABEL_73:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
}

void sub_1BF57A73C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  if (*(char *)(v1 - 89) < 0)
  {
    operator delete(*(void **)(v1 - 112));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI11RadioModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void antenna::Service::Internal::antennaSetProperty(antenna::Service::Internal *this, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v4)
LABEL_16:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v3 = xpc_null_create();
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v4)
      goto LABEL_16;
  }
  v5 = *((_QWORD *)this + 9);
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    goto LABEL_16;
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = this;
  v8[1] = v3;
  if (v3)
    xpc_retain(v3);
  else
    v8[1] = xpc_null_create();
  v9 = *((_QWORD *)this + 11);
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>(antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::antennaSetProperty(xpc::dict const&)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v3);
}

void ctu::cf::update<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  const void **v6;
  const void *v7;

  if (cf)
    CFRetain(cf);
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v6 = (const void **)MEMORY[0x1E0C9AE40];
  v7 = *v6;
  if (cf && v7)
  {
    CFDictionarySetValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf)
    CFRelease(cf);
}

void sub_1BF57AF74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(AntennaModule ***a1)
{
  AntennaModule **v2;
  AntennaModule *v3;
  xpc_object_t *v4;
  uint64_t v5;
  antenna::Service::Internal **v6;
  AntennaModule *v7;
  AntennaModule *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  xpc_object_t object;

  v2 = *a1;
  v3 = **a1;
  v4 = (xpc_object_t *)(*a1 + 1);
  v5 = 3760250880;
  if (MEMORY[0x1C3B8CD78](*v4) == MEMORY[0x1E0C812F8])
  {
    v6 = (antenna::Service::Internal **)*((_QWORD *)v3 + 22);
    if (v6)
    {
      if (*v6)
        antenna::Service::Internal::antennaSetProperty(*v6, v4);
      AntennaModule::setProperty_sync(v3, v4);
      v5 = 0;
    }
  }
  v7 = v2[2];
  object = xpc_null_create();
  (*((void (**)(AntennaModule *, uint64_t, xpc_object_t *))v7 + 2))(v7, v5, &object);
  xpc_release(object);
  v8 = v2[2];
  if (v8)
    _Block_release(v8);
  xpc_release(*v4);
  operator delete(v2);
  v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(a1);
}

void sub_1BF57B0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  _QWORD *v11;
  xpc_object_t *v12;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;

  xpc_release(object);
  v14 = (const void *)v11[2];
  if (v14)
    _Block_release(v14);
  xpc_release(*v12);
  operator delete(v11);
  v15 = (std::__shared_weak_count *)v10[2];
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  xpc_object_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)v8 = *(_QWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v8 + 3) = v9;
  *((_QWORD *)v8 + 4) = v10;
  v11 = xpc_null_create();
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = v11;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = a1[2];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v8;
  v15[1] = v5;
  v15[2] = v7;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceCtrl>::execute_wrapped<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>(ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_64(_QWORD *a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  void *aBlock;
  NSObject *object;
  xpc_object_t v7;

  v2 = (void *)a1[6];
  v7 = v2;
  if (!v2)
  {
    v7 = xpc_null_create();
    v3 = (void *)a1[7];
    if (!v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  xpc_retain(v2);
  v3 = (void *)a1[7];
  if (v3)
LABEL_5:
    v3 = _Block_copy(v3);
LABEL_6:
  v4 = a1[8];
  aBlock = v3;
  object = v4;
  if (v4)
    dispatch_retain(v4);
  abm::HelperClient::perform();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  xpc_release(v7);
}

void sub_1BF57B30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object)
{
  dispatch::callback<void({block_pointer})(TelephonyXPC::Result,xpc::dict)>::~callback((uint64_t)&a10);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void StatsAWD::submit(_QWORD *a1, int a2, xpc_object_t *a3)
{
  xpc_object_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _DWORD *v10;
  xpc_object_t v11;
  NSObject *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v5 = *a3;
  if (*a3)
  {
    xpc_retain(*a3);
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
LABEL_13:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v5 = xpc_null_create();
    v6 = (std::__shared_weak_count *)a1[10];
    if (!v6)
      goto LABEL_13;
  }
  v7 = a1[9];
  v8 = std::__shared_weak_count::lock(v6);
  if (!v8)
    goto LABEL_13;
  v9 = v8;
  v10 = operator new(0x18uLL);
  *(_QWORD *)v10 = a1;
  v10[2] = a2;
  *((_QWORD *)v10 + 2) = v5;
  v11 = xpc_null_create();
  v12 = a1[11];
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = operator new(0x18uLL);
  *v15 = v10;
  v15[1] = v7;
  v15[2] = v9;
  dispatch_async_f(v12, v15, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<StatsAWD>::execute_wrapped<StatsAWD::submit(unsigned int,xpc::object)::$_0>(StatsAWD::submit(unsigned int,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<StatsAWD::submit(unsigned int,xpc::object)::$_0,dispatch_queue_s *::default_delete<StatsAWD::submit(unsigned int,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  xpc_release(v11);
}

void __destroy_helper_block_e8_40c15_ZTSN3xpc4dictE48c22_ZTSN3xpc10connectionE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(_QWORD *)(a1 + 48) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void *__copy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void GetABMLogServer(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD block[5];

  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = unk_1ED70F6A0;
    *a1 = GetABMLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = unk_1ED70F6A0;
    *a1 = GetABMLogServer(void)::sLogServer;
    a1[1] = v3;
    if (!v3)
      return;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return v7;
    return v2;
  }
  else
  {
    if (v6 < v15)
      return v2;
    return v7;
  }
}

void __destroy_helper_block_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void ___ZN13AntennaModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, xpc_object_t *a2, const void **a3)
{
  std::__shared_weak_count *v4;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  xpc_object_t v13;
  const void *v14;
  void *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  _QWORD *v20;
  xpc_object_t v21;
  NSObject *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return;
  v7 = (_QWORD *)a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return;
  v9 = v8;
  v10 = a1[5];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      return;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      return;
  }
  v13 = *a2;
  if (v13)
  {
    xpc_retain(v13);
    v14 = *a3;
    if (*a3)
      goto LABEL_11;
  }
  else
  {
    v13 = xpc_null_create();
    v14 = *a3;
    if (*a3)
    {
LABEL_11:
      v15 = _Block_copy(v14);
      v16 = (std::__shared_weak_count *)v7[16];
      if (!v16)
LABEL_24:
        std::__throw_bad_weak_ptr[abi:ne180100]();
      goto LABEL_15;
    }
  }
  v15 = 0;
  v16 = (std::__shared_weak_count *)v7[16];
  if (!v16)
    goto LABEL_24;
LABEL_15:
  v17 = v7[15];
  v18 = std::__shared_weak_count::lock(v16);
  if (!v18)
    goto LABEL_24;
  v19 = v18;
  v20 = operator new(0x18uLL);
  *v20 = v7;
  v20[1] = v13;
  v21 = xpc_null_create();
  v20[2] = v15;
  v22 = v7[17];
  v23 = (unint64_t *)&v19->__shared_owners_;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v25 = operator new(0x18uLL);
  *v25 = v20;
  v25[1] = v17;
  v25[2] = v19;
  dispatch_async_f(v22, v25, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_);
  do
    v26 = __ldaxr(v23);
  while (__stlxr(v26 - 1, v23));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  xpc_release(v21);
}

void antenna::Service::setAudioState(_QWORD **a1, xpc_object_t *a2)
{
  _QWORD *v2;
  xpc_object_t v3;
  xpc_object_t v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = *a2;
    v4 = v3;
    if (v3)
    {
      xpc_retain(v3);
    }
    else
    {
      v3 = xpc_null_create();
      v4 = v3;
    }
    antenna::Service::Internal::setAudioState(v2, &v4);
    xpc_release(v3);
  }
}

void antenna::Service::Internal::setAudioState(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  xpc_object_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;

  v3 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v4 = (std::__shared_weak_count *)a1[10];
    if (!v4)
LABEL_13:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v3 = xpc_null_create();
    v4 = (std::__shared_weak_count *)a1[10];
    if (!v4)
      goto LABEL_13;
  }
  v5 = a1[9];
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    goto LABEL_13;
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  v9 = xpc_null_create();
  v10 = a1[11];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<antenna::Service::Internal>::execute_wrapped<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>(antenna::Service::Internal::setAudioState(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<antenna::Service::Internal::setAudioState(xpc::dict)::$_0,dispatch_queue_s *::default_delete<antenna::Service::Internal::setAudioState(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

void ABMServerInternal::handlePublicMessage_sync(uint64_t a1, xpc_connection_t *a2, xpc_object_t *a3)
{
  xpc_object_t reply;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t value;
  uint64_t v14;
  xpc_object_t v15;
  xpc_connection_t v16;
  void *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  _QWORD v25[5];
  xpc_object_t v26;
  xpc_object_t v27;
  void *v28;
  xpc_object_t v29;
  xpc_object_t object;
  void *__p[6];

  reply = xpc_dictionary_create_reply(*a3);
  v7 = MEMORY[0x1E0C812F8];
  if (reply || (reply = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](reply) == v7)
    {
      xpc_retain(reply);
      v8 = reply;
    }
    else
    {
      v8 = xpc_null_create();
    }
  }
  else
  {
    v8 = xpc_null_create();
    reply = 0;
  }
  xpc_release(reply);
  if (*(_DWORD *)(a1 + 192) == 5)
  {
    if (MEMORY[0x1C3B8CD78](v8) == v7)
    {
      v9 = xpc_int64_create(-534716415);
      if (!v9)
        v9 = xpc_null_create();
      xpc_dictionary_set_value(v8, kKeyCommandResult[0], v9);
      v10 = xpc_null_create();
      xpc_release(v9);
      xpc_release(v10);
      v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v11) == v7)
        {
          xpc_retain(v11);
          v12 = v11;
        }
        else
        {
          v12 = xpc_null_create();
        }
      }
      else
      {
        v12 = xpc_null_create();
        v11 = 0;
      }
      xpc_release(v11);
      v18 = xpc_string_create("Server not available");
      if (!v18)
        v18 = xpc_null_create();
      xpc_dictionary_set_value(v12, (const char *)*MEMORY[0x1E0CFB0D0], v18);
      v19 = xpc_null_create();
      xpc_release(v18);
      xpc_release(v19);
      if (v12)
      {
        xpc_retain(v12);
        v20 = v12;
      }
      else
      {
        v20 = xpc_null_create();
      }
      xpc_dictionary_set_value(v8, kKeyCommandData[0], v20);
      v21 = xpc_null_create();
      xpc_release(v20);
      xpc_release(v21);
      xpc_connection_send_message(*a2, v8);
      xpc_release(v12);
    }
    goto LABEL_38;
  }
  memset(__p, 170, 24);
  value = xpc_dictionary_get_value(*a3, kKeyCommand[0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&__p[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v14 = *(_QWORD *)(a1 + 288);
  v15 = *a3;
  v29 = v15;
  if (v15)
    xpc_retain(v15);
  else
    v29 = xpc_null_create();
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 1174405120;
  v25[2] = ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke;
  v25[3] = &__block_descriptor_tmp_21_3;
  v25[4] = a1;
  v26 = v8;
  if (!v8)
  {
    v26 = xpc_null_create();
    v16 = *a2;
    v27 = v16;
    if (v16)
      goto LABEL_23;
LABEL_25:
    v27 = xpc_null_create();
    goto LABEL_26;
  }
  xpc_retain(v8);
  v16 = *a2;
  v27 = v16;
  if (!v16)
    goto LABEL_25;
LABEL_23:
  xpc_retain(v16);
LABEL_26:
  v17 = _Block_copy(v25);
  v28 = v17;
  ServiceManager::runCommand(v14, (uint64_t)__p, &v29, &v28);
  if (v17)
    _Block_release(v17);
  xpc_release(v29);
  v29 = 0;
  xpc_release(v27);
  v27 = 0;
  xpc_release(v26);
  v26 = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
LABEL_38:
  v22 = xpc_null_create();
  v23 = xpc_null_create();
  v24 = *a3;
  *a3 = v22;
  xpc_release(v24);
  xpc_release(v23);
  xpc_release(v8);
}

void sub_1BF57BD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t object, uint64_t a16, xpc_object_t a17, xpc_object_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  xpc_release(v25);
  xpc_release(v24);
  _Unwind_Resume(a1);
}

void xpc::dict::object_proxy::operator xpc::dict(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI13AntennaModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  xpc::object *v4;
  uint64_t v5;
  _QWORD **v6;
  NSObject *v7;
  xpc_object_t v8;
  _QWORD *v9;
  void **v10;
  xpc_object_t v11;
  uint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *__p[2];
  char v18;
  uint8_t buf[4];
  void **v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = (xpc::object *)(*a1 + 1);
  v5 = 3760250880;
  if (MEMORY[0x1C3B8CD78](*(_QWORD *)v4) == MEMORY[0x1E0C812F8])
  {
    v6 = *(_QWORD ***)(v3 + 176);
    if (v6)
    {
      v7 = *(NSObject **)(v3 + 88);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        xpc::object::to_string(v4);
        if (v18 >= 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        *(_DWORD *)buf = 136315138;
        v20 = v10;
        _os_log_debug_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEBUG, "#D Received Audio State: %s", buf, 0xCu);
        if (v18 < 0)
          operator delete(__p[0]);
        v6 = *(_QWORD ***)(v3 + 176);
        v8 = *(xpc_object_t *)v4;
        if (*(_QWORD *)v4)
        {
LABEL_5:
          xpc_retain(v8);
          v9 = *v6;
          if (!*v6)
            goto LABEL_18;
          goto LABEL_14;
        }
      }
      else
      {
        v8 = *(xpc_object_t *)v4;
        if (*(_QWORD *)v4)
          goto LABEL_5;
      }
      v8 = xpc_null_create();
      v9 = *v6;
      if (!*v6)
      {
LABEL_18:
        xpc_release(v8);
        v5 = 0;
        goto LABEL_19;
      }
LABEL_14:
      __p[0] = v8;
      if (v8)
      {
        xpc_retain(v8);
        v11 = v8;
      }
      else
      {
        v11 = xpc_null_create();
        __p[0] = v11;
      }
      antenna::Service::Internal::setAudioState(v9, __p);
      xpc_release(v11);
      goto LABEL_18;
    }
  }
LABEL_19:
  v12 = v2[2];
  __p[0] = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v12 + 16))(v12, v5, __p);
  xpc_release(__p[0]);
  v13 = (const void *)v2[2];
  if (v13)
    _Block_release(v13);
  xpc_release(*(xpc_object_t *)v4);
  operator delete(v2);
  v14 = (std::__shared_weak_count *)a1[2];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  operator delete(a1);
}

void sub_1BF57C178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t Preferences::getPreference<BOOL>(uint64_t (***a1)(_QWORD, uint64_t), const char *a2, ctu::cf *a3)
{
  BOOL *v5;
  BOOL *v6;
  CFTypeID v7;
  const __CFBoolean *v8;
  uint64_t v9;
  uint64_t v11;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v11, a2);
  v5 = (BOOL *)(**a1)(a1, v11);
  v6 = v5;
  if (v5)
  {
    v7 = CFGetTypeID(v5);
    if (v7 == CFBooleanGetTypeID())
      v9 = ctu::cf::assign(a3, v6, v8);
    else
      v9 = 0;
    CFRelease(v6);
  }
  else
  {
    v9 = 0;
  }
  MEMORY[0x1C3B8B878](&v11);
  return v9;
}

uint64_t Capabilities::isCMHandDetectionSupported(Capabilities *this)
{
  capabilities::abs::supportsCMHandDetection(this);
  return objc_msgSend(MEMORY[0x1E0CA5600], "isCallHandednessAvailable");
}

void ___ZN17ABMServerInternal24handlePublicMessage_syncEN3xpc10connectionERNS0_4dictE_block_invoke(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = MEMORY[0x1C3B8CD78](*(_QWORD *)(a1 + 40));
  v8 = MEMORY[0x1E0C812F8];
  if (v7 == MEMORY[0x1E0C812F8])
  {
    if (a2 == -534716414)
    {
      if (*(_DWORD *)(v6 + 192) == 3)
      {
        v9 = xpc_dictionary_create(0, 0, 0);
        if (v9 || (v9 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v9) == v8)
          {
            xpc_retain(v9);
            v10 = v9;
          }
          else
          {
            v10 = xpc_null_create();
          }
        }
        else
        {
          v10 = xpc_null_create();
          v9 = 0;
        }
        xpc_release(v9);
        v15 = xpc_int64_create(-534716415);
        if (!v15)
          v15 = xpc_null_create();
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v15);
        v16 = xpc_null_create();
        xpc_release(v15);
        xpc_release(v16);
        v17 = xpc_string_create("Server not available");
        if (!v17)
          v17 = xpc_null_create();
        xpc_dictionary_set_value(v10, (const char *)*MEMORY[0x1E0CFB0D0], v17);
        v18 = xpc_null_create();
        xpc_release(v17);
        xpc_release(v18);
        if (v10)
        {
          xpc_retain(v10);
          v19 = v10;
        }
        else
        {
          v19 = xpc_null_create();
        }
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v19);
        v20 = xpc_null_create();
        xpc_release(v19);
        xpc_release(v20);
        xpc_release(v10);
LABEL_27:
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 48), *(xpc_object_t *)(a1 + 40));
        return;
      }
      v11 = xpc_int64_create(-534716414);
      if (v11)
      {
LABEL_12:
        xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandResult[0], v11);
        v12 = xpc_null_create();
        xpc_release(v11);
        xpc_release(v12);
        if (MEMORY[0x1C3B8CD78](*a3) == v8)
        {
          v13 = (xpc_object_t)*a3;
          if (v13)
            xpc_retain(v13);
          else
            v13 = xpc_null_create();
          xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), kKeyCommandData[0], v13);
          v14 = xpc_null_create();
          xpc_release(v13);
          xpc_release(v14);
        }
        goto LABEL_27;
      }
    }
    else
    {
      v11 = xpc_int64_create(a2);
      if (v11)
        goto LABEL_12;
    }
    v11 = xpc_null_create();
    goto LABEL_12;
  }
}

void *__copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11RadioModuleEE56c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *result;

  v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = (void *)a2[7];
  if (result)
    result = _Block_copy(result);
  a1[7] = result;
  return result;
}

uint64_t util::convert<int>(const std::string *a1, _DWORD *a2, int a3)
{
  uint64_t v6;
  const char *v7;
  std::string::size_type size;
  size_t __idx;

  if ((SHIBYTE(a1->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    LODWORD(v6) = strcasecmp((const char *)a1, "false");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "off");
    if (!(_DWORD)v6)
      goto LABEL_29;
    LODWORD(v6) = strcasecmp((const char *)a1, "no");
    if (!(_DWORD)v6)
      goto LABEL_29;
    if (strcasecmp((const char *)a1, "true")
      && strcasecmp((const char *)a1, "on")
      && strcasecmp((const char *)a1, "yes")
      && strcasecmp((const char *)a1, "full")
      && strcasecmp((const char *)a1, "streaming"))
    {
      v7 = (const char *)a1;
      if (!strcasecmp((const char *)a1, "lite"))
        goto LABEL_30;
      goto LABEL_21;
    }
LABEL_28:
    LODWORD(v6) = 1;
    goto LABEL_29;
  }
  v7 = (const char *)a1->__r_.__value_.__r.__words[0];
  LODWORD(v6) = strcasecmp(a1->__r_.__value_.__l.__data_, "false");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "off");
  if (!(_DWORD)v6)
    goto LABEL_29;
  LODWORD(v6) = strcasecmp(v7, "no");
  if (!(_DWORD)v6)
    goto LABEL_29;
  if (!strcasecmp(v7, "true")
    || !strcasecmp(v7, "on")
    || !strcasecmp(v7, "yes")
    || !strcasecmp(v7, "full")
    || !strcasecmp(v7, "streaming"))
  {
    goto LABEL_28;
  }
  if (!strcasecmp(v7, "lite"))
  {
LABEL_30:
    LODWORD(v6) = 2;
    goto LABEL_29;
  }
LABEL_21:
  if (!strcasecmp(v7, "background"))
    goto LABEL_30;
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v6 = std::stol(a1, &__idx, a3);
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx != size || v6 < (uint64_t)0xFFFFFFFF80000000 || v6 > 0x7FFFFFFF)
    return 0;
LABEL_29:
  *a2 = v6;
  return 1;
}

uint64_t sub_1BF57C8C0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE56c27_ZTSN3ctu2cf12dict_adapterE(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 7), (const ctu::cf::dict_adapter *)(a2 + 7));
}

void sub_1BF57C928(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Service::broadcastEvent(uint64_t a1, uint64_t a2, const void **a3, const void **a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  const void *v12;
  void *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  const void *v18;
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v21 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      v20 = v11;
      if (!v11)
      {
LABEL_20:
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
        return;
      }
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v19 = *(std::string *)a2;
      v12 = *a3;
      v18 = v12;
      if (v12)
        CFRetain(v12);
      if (*a4)
      {
        v13 = _Block_copy(*a4);
        v17 = v13;
        v14 = *(_QWORD *)(v11 + 184);
        if (!v14)
          goto LABEL_14;
      }
      else
      {
        v13 = 0;
        v17 = 0;
        v14 = *(_QWORD *)(v11 + 184);
        if (!v14)
        {
LABEL_14:
          if (v13)
            _Block_release(v13);
          if (v12)
            CFRelease(v12);
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v19.__r_.__value_.__l.__data_);
          goto LABEL_20;
        }
      }
      dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v14, (uint64_t)&v19, &v18, &v17);
      goto LABEL_14;
    }
  }
}

void sub_1BF57CA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF57CAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  const void *v18;

  if (v18)
    _Block_release(v18);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t ServiceManager::isServerDown(ServiceManager *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 192);
  return v1 & 1;
}

xpc_object_t __copy_helper_block_e8_40c17_ZTSN3xpc6objectE(uint64_t a1, uint64_t a2)
{
  void *v3;
  xpc_object_t result;

  v3 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
    return xpc_retain(v3);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void ctu::cf::insert<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF57CBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF57CBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI10LogTrackerE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEENK3__0clEvEUb5_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t **a1)
{
  uint64_t *v2;
  _QWORD *v3;
  xpc_object_t value;
  xpc_object_t v5;
  char isSupported;
  char v7;
  xpc_object_t v8;
  xpc_object_t v9;
  NSObject *v10;
  std::string *v11;
  xpc_object_t v12;
  _QWORD *v13;
  xpc_object_t v14;
  xpc_object_t v15;
  _QWORD *v16;
  _BOOL4 isInternalProperty_sync;
  _BOOL4 v18;
  _QWORD *v19;
  const void *v20;
  size_t v21;
  void *v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  const char *p_buf;
  xpc_object_t v28;
  xpc_object_t v29;
  int v30;
  _QWORD *v31;
  void *v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  const void *v37;
  xpc_object_t v38;
  void *__dst[2];
  unint64_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  unsigned int v43;
  std::string __p;
  xpc_object_t object[3];
  std::string v46;
  __int128 buf;
  void (*v48)(uint64_t, unsigned int, void **);
  void *v49;
  const void *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (_QWORD *)**a1;
  memset(&v46, 170, sizeof(v46));
  value = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB030]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  buf = 0uLL;
  v48 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v5 = xpc_dictionary_get_value((xpc_object_t)v2[1], (const char *)*MEMORY[0x1E0CFB550]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  if (v5)
    xpc_retain(v5);
  else
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  buf = 0uLL;
  v48 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
  else
    __p = v46;
  isSupported = abm::trace::isSupported();
  v7 = isSupported;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 1) != 0)
    {
LABEL_12:
      v43 = -534716416;
      v42 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v8 = xpc_dictionary_create(0, 0, 0);
      v9 = v8;
      if (v8)
      {
        v42 = v8;
      }
      else
      {
        v9 = xpc_null_create();
        v42 = v9;
        if (!v9)
        {
          v15 = xpc_null_create();
          v9 = 0;
          goto LABEL_25;
        }
      }
      if (MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v9);
        goto LABEL_26;
      }
      v15 = xpc_null_create();
LABEL_25:
      v42 = v15;
LABEL_26:
      xpc_release(v9);
      v16 = (_QWORD *)v2[1];
      v41 = v16;
      if (v16)
      {
        xpc_retain(v16);
      }
      else
      {
        v16 = xpc_null_create();
        v41 = v16;
      }
      isInternalProperty_sync = LogTracker::isInternalProperty_sync((uint64_t)v3, &v41, &v42, &v43);
      xpc_release(v16);
      v41 = 0;
      if (isInternalProperty_sync)
      {
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v2 + 2, &v43, &v42);
LABEL_64:
        xpc_release(v42);
        goto LABEL_65;
      }
      if ((*(unsigned int (**)(_QWORD *))(*v3 + 88))(v3))
      {
        buf = 0uLL;
        v48 = 0;
        v18 = prop::get((char *)&v46, (char *)object, (uint64_t)&buf);
        v19 = (_QWORD *)v2[1];
        __dst[0] = v19;
        if (v19)
        {
          xpc_retain(v19);
        }
        else
        {
          v19 = xpc_null_create();
          __dst[0] = v19;
        }
        if (SHIBYTE(v48) >= 0)
          p_buf = (const char *)&buf;
        else
          p_buf = (const char *)buf;
        v28 = xpc_string_create(p_buf);
        if (!v28)
          v28 = xpc_null_create();
        xpc_dictionary_set_value(v19, (const char *)*MEMORY[0x1E0CFB6A8], v28);
        v29 = xpc_null_create();
        xpc_release(v28);
        xpc_release(v29);
        if (v18)
          v30 = 0;
        else
          v30 = -534716416;
        LODWORD(v38) = v30;
        dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v2 + 2, (unsigned int *)&v38, __dst);
        xpc_release(__dst[0]);
        if (SHIBYTE(v48) < 0)
          operator delete((void *)buf);
        goto LABEL_64;
      }
      v20 = (const void *)*MEMORY[0x1E0CFBED0];
      v21 = strlen((const char *)*MEMORY[0x1E0CFBED0]);
      if (v21 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v22 = (void *)v21;
      if (v21 >= 0x17)
      {
        v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17)
          v24 = v21 | 7;
        v25 = v24 + 1;
        v23 = (void **)operator new(v24 + 1);
        __dst[1] = v22;
        v40 = v25 | 0x8000000000000000;
        __dst[0] = v23;
      }
      else
      {
        HIBYTE(v40) = v21;
        v23 = __dst;
        if (!v21)
          goto LABEL_42;
      }
      memmove(v23, v20, (size_t)v22);
LABEL_42:
      *((_BYTE *)v22 + (_QWORD)v23) = 0;
      v26 = (_QWORD *)v2[1];
      v38 = v26;
      if (v26)
      {
        xpc_retain(v26);
      }
      else
      {
        v26 = xpc_null_create();
        v38 = v26;
      }
      *(_QWORD *)&buf = MEMORY[0x1E0C809B0];
      *((_QWORD *)&buf + 1) = 3321888768;
      v48 = ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke;
      v49 = &__block_descriptor_40_e8_32c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE_e28_v20__0i8_dict__object__v__12l;
      v31 = (_QWORD *)v2[2];
      if (v31)
        v31 = _Block_copy(v31);
      v50 = v31;
      v32 = _Block_copy(&buf);
      v37 = v32;
      Service::runCommand((uint64_t)v3, (uint64_t)__dst, &v38, &v37);
      if (v32)
        _Block_release(v32);
      xpc_release(v26);
      v38 = 0;
      if (SHIBYTE(v40) < 0)
        operator delete(__dst[0]);
      if (v50)
        _Block_release(v50);
      goto LABEL_64;
    }
  }
  else if ((isSupported & 1) != 0)
  {
    goto LABEL_12;
  }
  v10 = v3[11];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = &v46;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)v46.__r_.__value_.__r.__words[0];
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I The property (%s) not supported in getting", (uint8_t *)&buf, 0xCu);
  }
  v12 = xpc_null_create();
  v13 = (_QWORD *)v2[2];
  *(_QWORD *)&buf = v12;
  v14 = xpc_null_create();
  ((void (*)(_QWORD *, uint64_t, __int128 *))v13[2])(v13, 3760250884, &buf);
  xpc_release((xpc_object_t)buf);
  xpc_release(v14);
LABEL_65:
  if (SHIBYTE(object[2]) < 0)
  {
    operator delete(object[0]);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_67:
      v33 = (_QWORD *)v2[2];
      if (!v33)
        goto LABEL_72;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_67;
  }
  operator delete(v46.__r_.__value_.__l.__data_);
  v33 = (_QWORD *)v2[2];
  if (v33)
LABEL_71:
    _Block_release(v33);
LABEL_72:
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v34 = (std::__shared_weak_count *)a1[2];
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  operator delete(a1);
}

void sub_1BF57D1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZZZN10LogTracker10initializeEN8dispatch13group_sessionEENK3__0clEvEUb5_ENKUlvE_clEv_block_invoke(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3;

  v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

void ctu::SharedSynchronizable<TraceManager>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI12TraceManagerE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7915C08;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void std::__tree<std::__value_type<xpc::connection,ServerClientState>,std::__map_value_compare<xpc::connection,std::__value_type<xpc::connection,ServerClientState>,std::less<xpc::connection>,true>,std::allocator<std::__value_type<xpc::connection,ServerClientState>>>::erase(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  v8 = *(std::__shared_weak_count **)(a2 + 48);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  xpc_release(*(xpc_object_t *)(a2 + 32));
  operator delete((void *)a2);
}

void std::__shared_ptr_pointer<ServerClientState::State *,std::shared_ptr<ServerClientState::State>::__shared_ptr_default_delete<ServerClientState::State,ServerClientState::State>,std::allocator<ServerClientState::State>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    std::__tree<std::string>::destroy(v1 + 32, *(char **)(v1 + 40));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete((void *)v1);
  }
}

uint64_t **std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  size_t v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  const void *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t *v22;
  uint64_t *v23;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *a2;
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = (const void *)v5[4];
      v11 = v5 + 4;
      v12 = v13;
      v14 = *((char *)v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = v12;
      if (v14 >= 0)
        v16 = *((unsigned __int8 *)v11 + 23);
      else
        v16 = v11[1];
      if (v16 >= v9)
        v17 = v9;
      else
        v17 = v16;
      v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0)
          goto LABEL_8;
LABEL_22:
        v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0)
            return v10;
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        v5 = v10[1];
        if (!v5)
        {
          v6 = v10 + 1;
LABEL_28:
          v20 = operator new(0x38uLL);
          v21 = (std::string *)(v20 + 4);
          if (*(char *)(a3 + 23) < 0)
            goto LABEL_31;
LABEL_29:
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v21->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
          goto LABEL_32;
        }
      }
      else
      {
        if (v9 >= v16)
          goto LABEL_22;
LABEL_8:
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_28;
      }
    }
  }
  v10 = a1 + 1;
  v20 = operator new(0x38uLL);
  v21 = (std::string *)(v20 + 4);
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_31:
  std::string::__init_copy_ctor_external(v21, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
LABEL_32:
  *v20 = 0;
  v20[1] = 0;
  v20[2] = v10;
  *v6 = v20;
  v22 = (uint64_t *)**a1;
  v23 = v20;
  if (v22)
  {
    *a1 = v22;
    v23 = *v6;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_1BF57D814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ctu::SharedSynchronizable<ctu::XpcServer>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableINS_9XpcServerEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E791ACB8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke(_QWORD *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t v15;
  _QWORD aBlock[5];
  void *v17;
  char v18;
  void *v19;
  uint64_t v20[2];
  xpc_object_t v21;

  if ((a2 & 1) != 0)
  {
    v3 = a1[5];
    v4 = a1[7];
    v5 = *(std::__shared_weak_count **)(v4 + 48);
    v20[0] = *(_QWORD *)(v4 + 40);
    v20[1] = (uint64_t)v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb1_ENK3__2clEv_block_invoke_2;
    aBlock[3] = &unk_1E7917908;
    aBlock[4] = a1[4];
    v18 = 1;
    v8 = (void *)a1[6];
    if (v8)
      v8 = _Block_copy(v8);
    v17 = v8;
    v9 = _Block_copy(aBlock);
    v19 = v9;
    AWDModule::enableMetricSubmission_sync(v3, v20, 0, (uint64_t)&v19);
    if (v9)
      _Block_release(v9);
    if (!v5)
      goto LABEL_13;
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      v12 = v17;
      if (v17)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      v12 = v17;
      if (v17)
LABEL_14:
        _Block_release(v12);
    }
  }
  else
  {
    v13 = xpc_null_create();
    v14 = a1[6];
    v21 = v13;
    v15 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v14 + 16))(v14, 3760250880, &v21);
    xpc_release(v21);
    xpc_release(v15);
  }
}

void sub_1BF57DABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  void *v15;
  uint64_t v16;

  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void AWDModule::queryMetric_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  NSObject *v17;
  _QWORD v18[4];
  void *v19;
  void *aBlock;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint8_t buf[16];

  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
  {
    v9 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v18[2] = ___ZN9AWDModule16queryMetric_syncENSt3__110shared_ptrIN3awd10AppContextEEENS2_10MetricInfoENS2_11TriggerInfoEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v18[3] = &__block_descriptor_tmp_18;
    v12 = *(void **)a5;
    if (*(_QWORD *)a5)
      v12 = _Block_copy(v12);
    v19 = v12;
    aBlock = _Block_copy(v18);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(_QWORD *)v6 + 88))(v6, &v21, a3, a4, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v13 = v22;
    if (!v22)
      goto LABEL_13;
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      v16 = v19;
      if (!v19)
        return;
    }
    else
    {
LABEL_13:
      v16 = v19;
      if (!v19)
        return;
    }
    _Block_release(v16);
  }
  else
  {
    v17 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Cannot query metric because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a5 + 16))();
  }
}

void sub_1BF57DCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

BOOL prop::tracesettings::enabled(prop::tracesettings *this, const char *a2)
{
  size_t v3;
  size_t v4;
  void **v5;
  size_t v6;
  size_t v7;
  void **p_dst;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  void *v28;
  size_t v29;
  unint64_t v30;
  void **__dst;
  size_t v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  std::string __p;

  v34 = 0;
  if ((prop::tracesettings *)*MEMORY[0x1E0CFB190] == this)
  {
    v6 = strlen((const char *)this);
    if (v6 > 0x7FFFFFFFFFFFFFF7)
LABEL_59:
      std::string::__throw_length_error[abi:ne180100]();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v17 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v17 = v6 | 7;
      v18 = v17 + 1;
      p_dst = (void **)operator new(v17 + 1);
      v32 = v7;
      v33 = v18 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v6;
      p_dst = (void **)&__dst;
      if (!v6)
      {
LABEL_35:
        *((_BYTE *)p_dst + v7) = 0;
        v19 = (const void *)*MEMORY[0x1E0CFB028];
        v20 = strlen((const char *)*MEMORY[0x1E0CFB028]);
        if (v20 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v21 = v20;
        if (v20 >= 0x17)
        {
          v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v20 | 7) != 0x17)
            v23 = v20 | 7;
          v24 = v23 + 1;
          v22 = operator new(v23 + 1);
          v29 = v21;
          v30 = v24 | 0x8000000000000000;
          v28 = v22;
        }
        else
        {
          HIBYTE(v30) = v20;
          v22 = &v28;
          if (!v20)
          {
LABEL_43:
            *((_BYTE *)v22 + v21) = 0;
            memset(&__p, 0, sizeof(__p));
            v25 = -1431655766;
            if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
            {
              v35 = -1431655766;
              v26 = util::convert<int>(&__p, &v35, 0);
              if (v26)
                v25 = v35;
              else
                v25 = -1431655766;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
LABEL_51:
                if (SHIBYTE(v30) < 0)
                {
                  operator delete(v28);
                  if ((SHIBYTE(v33) & 0x80000000) == 0)
                  {
LABEL_53:
                    if (!v26)
                      return v34;
                    return v25 != 0;
                  }
                }
                else if ((SHIBYTE(v33) & 0x80000000) == 0)
                {
                  goto LABEL_53;
                }
                operator delete(__dst);
                if (!v26)
                  return v34;
                return v25 != 0;
              }
            }
            else
            {
              v26 = 0;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_51;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_51;
          }
        }
        memmove(v22, v19, v21);
        goto LABEL_43;
      }
    }
    memcpy(p_dst, this, v7);
    goto LABEL_35;
  }
  v3 = strlen((const char *)this);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_59;
  v4 = v3;
  if (v3 >= 0x17)
  {
    v9 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v9 = v3 | 7;
    v10 = v9 + 1;
    v5 = (void **)operator new(v9 + 1);
    v32 = v4;
    v33 = v10 | 0x8000000000000000;
    __dst = v5;
    goto LABEL_13;
  }
  HIBYTE(v33) = v3;
  v5 = (void **)&__dst;
  if (v3)
LABEL_13:
    memcpy(v5, this, v4);
  *((_BYTE *)v5 + v4) = 0;
  v11 = (const void *)*MEMORY[0x1E0CFB170];
  v12 = strlen((const char *)*MEMORY[0x1E0CFB170]);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    v14 = operator new(v15 + 1);
    v29 = v13;
    v30 = v16 | 0x8000000000000000;
    v28 = v14;
    goto LABEL_21;
  }
  HIBYTE(v30) = v12;
  v14 = &v28;
  if (v12)
LABEL_21:
    memmove(v14, v11, v13);
  *((_BYTE *)v14 + v13) = 0;
  memset(&__p, 0, sizeof(__p));
  if (prop::get((char *)&__dst, (char *)&v28, (uint64_t)&__p))
    util::convert<BOOL>(&__p, &v34, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
    {
LABEL_26:
      if (SHIBYTE(v33) < 0)
        goto LABEL_30;
      return v34;
    }
  }
  else if ((SHIBYTE(v30) & 0x80000000) == 0)
  {
    goto LABEL_26;
  }
  operator delete(v28);
  if (SHIBYTE(v33) < 0)
LABEL_30:
    operator delete(__dst);
  return v34;
}

void sub_1BF57E0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a20 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a20 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL defaults::ipc::get(char *a1, uint64_t a2)
{
  capabilities::ipc *v4;
  capabilities::ipc *v5;
  const char *v6;
  capabilities::ipc *v7;
  int v8;
  capabilities::trace *v9;
  std::string::size_type v10;
  char v11;
  uint64_t v12;
  _BOOL8 result;
  unsigned __int8 v14;
  NSObject *v15;
  std::string::size_type v16;
  char *v17;
  std::string v18;
  char *v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x1E0C80C00];
  if (a1[23] < 0)
  {
    v6 = *(const char **)a1;
    v4 = (capabilities::ipc *)strcasecmp(*(const char **)a1, (const char *)*MEMORY[0x1E0CFB170]);
    if ((_DWORD)v4)
    {
      v5 = (capabilities::ipc *)strcasecmp(v6, (const char *)*MEMORY[0x1E0CFB178]);
      if ((_DWORD)v5)
        goto LABEL_4;
LABEL_9:
      v8 = capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(v5);
      memset(v20, 0, 15);
      std::to_string(&v18, v8);
      goto LABEL_13;
    }
LABEL_10:
    v9 = (capabilities::trace *)capabilities::ipc::supportsPCI(v4);
    if ((_DWORD)v9)
      LODWORD(v9) = capabilities::trace::enabledByDefault(v9);
    memset(v20, 0, 15);
    std::to_string(&v18, (int)v9);
    goto LABEL_13;
  }
  v4 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB170]);
  if (!(_DWORD)v4)
    goto LABEL_10;
  v5 = (capabilities::ipc *)strcasecmp(a1, (const char *)*MEMORY[0x1E0CFB178]);
  v6 = a1;
  if (!(_DWORD)v5)
    goto LABEL_9;
LABEL_4:
  v7 = (capabilities::ipc *)strcasecmp(v6, "BufferCount");
  if (!(_DWORD)v7 && capabilities::ipc::supportsPCI(v7))
  {
    memset(v20, 0, 15);
    std::to_string(&v18, 4uLL);
LABEL_13:
    v20[0] = v18.__r_.__value_.__l.__size_;
    v10 = v18.__r_.__value_.__r.__words[0];
    *(_QWORD *)((char *)v20 + 7) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
    v11 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v12 = v20[0];
    *(_QWORD *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v20 + 7);
    *(_BYTE *)(a2 + 23) = v11;
    return 1;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v15 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  else
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v15 = qword_1ED70F6F8;
    result = os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
  }
  v16 = *MEMORY[0x1E0CFC248];
  if (a1[23] >= 0)
    v17 = a1;
  else
    v17 = *(char **)a1;
  LODWORD(v18.__r_.__value_.__l.__data_) = 136315650;
  *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)"prop.default";
  WORD2(v18.__r_.__value_.__r.__words[1]) = 2080;
  *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = v16;
  HIWORD(v18.__r_.__value_.__r.__words[2]) = 2080;
  v19 = v17;
  _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "%s: Invalid key; domain='%s' key='%s'",
    (uint8_t *)&v18,
    0x20u);
  return 0;
}

void sub_1BF57E3D4(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    if (*(char *)(v2 + 23) < 0)
      JUMPOUT(0x1BF57E23CLL);
    JUMPOUT(0x1BF57E244);
  }
  _Unwind_Resume(a1);
}

void ServerClientState::registerNotification_sync(void **a1, int a2, const void **a3)
{
  void *v4;
  const void *v5;
  CFRange v6;
  void (__cdecl *v7)(const void *, void *);

  v4 = *a1;
  v5 = *a3;
  if (*a3)
    CFRetain(v5);
  v6.length = CFArrayGetCount((CFArrayRef)v5);
  if (a2)
    v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::registerNotificationApplier;
  else
    v7 = (void (__cdecl *)(const void *, void *))ServerClientState::State::unregisterNotificationApplier;
  v6.location = 0;
  CFArrayApplyFunction((CFArrayRef)v5, v6, v7, v4);
  if (v5)
    CFRelease(v5);
}

void sub_1BF57E4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  xpc_object_t value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  int v24;
  xpc_object_t v25;
  int v26;
  xpc_object_t v27;
  int v28;
  xpc_object_t v29;
  int v30;
  xpc_object_t v31;
  int v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  _QWORD aBlock[5];
  void *v43;
  void *v44;
  _DWORD v45[4];
  uint64_t v46;
  _DWORD v47[7];
  uint64_t v48[2];
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  xpc_object_t v53[2];

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v49 = 0;
  v50 = &v49;
  v51 = 0x2000000000;
  v52 = -534716414;
  if (MEMORY[0x1C3B8CD78](*(_QWORD *)(v2 + 24)) == MEMORY[0x1E0C812F8])
  {
    value = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFC210]);
    v53[0] = value;
    if (value)
      xpc_retain(value);
    else
      v53[0] = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)v53, (const object *)0xFFFFFFFFLL);
    xpc_release(v53[0]);
    if (v15 <= 5u
      && (((1 << v15) & 0x36) != 0
       || !v15 && capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16)))
    {
      v17 = *(_QWORD *)(v3 + 176);
      if (v17)
      {
        v18 = v3 + 176;
        do
        {
          v19 = *(unsigned __int8 *)(v17 + 32);
          v20 = v19 >= v15;
          if (v19 >= v15)
            v21 = (uint64_t *)v17;
          else
            v21 = (uint64_t *)(v17 + 8);
          if (v20)
            v18 = v17;
          v17 = *v21;
        }
        while (*v21);
        if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
        {
          *((_DWORD *)v50 + 6) = -534716416;
          v22 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB080]);
          v53[0] = v22;
          if (v22)
            xpc_retain(v22);
          else
            v53[0] = xpc_null_create();
          v41 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v23 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB108]);
          v53[0] = v23;
          if (v23)
            xpc_retain(v23);
          else
            v53[0] = xpc_null_create();
          v24 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v25 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB038]);
          v53[0] = v25;
          if (v25)
            xpc_retain(v25);
          else
            v53[0] = xpc_null_create();
          v26 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v27 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB008]);
          v53[0] = v27;
          if (v27)
            xpc_retain(v27);
          else
            v53[0] = xpc_null_create();
          v28 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v29 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFAFB8]);
          v53[0] = v29;
          if (v29)
            xpc_retain(v29);
          else
            v53[0] = xpc_null_create();
          v30 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v31 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB168]);
          v53[0] = v31;
          if (v31)
            xpc_retain(v31);
          else
            v53[0] = xpc_null_create();
          v32 = xpc::dyn_cast_or_default((xpc *)v53, 0);
          xpc_release(v53[0]);
          v33 = *(_QWORD *)(v18 + 40);
          v34 = *(std::__shared_weak_count **)(v18 + 48);
          v48[0] = v33;
          v48[1] = (uint64_t)v34;
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldxr(p_shared_owners);
            while (__stxr(v36 + 1, p_shared_owners));
          }
          v47[0] = v28;
          v47[1] = v30;
          v47[2] = 0;
          v47[3] = v32;
          v47[4] = -1431699456;
          v47[5] = -1431655936;
          v47[6] = -1431655936;
          v45[0] = v26;
          v45[1] = v41;
          v45[2] = v24;
          v45[3] = -1431655766;
          v46 = 0;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 1174405120;
          aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke;
          aBlock[3] = &unk_1E7917978;
          aBlock[4] = &v49;
          v37 = *(void **)(v2 + 32);
          if (v37)
            v37 = _Block_copy(v37);
          v43 = v37;
          v38 = _Block_copy(aBlock);
          v44 = v38;
          AWDModule::queryMetric_sync(v3, v48, (uint64_t)v47, (uint64_t)v45, (uint64_t)&v44);
          if (v38)
            _Block_release(v38);
          if (v34)
          {
            v39 = (unint64_t *)&v34->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          if (v43)
            _Block_release(v43);
        }
      }
    }
  }
  v4 = v50;
  if (*((_DWORD *)v50 + 6) == -534716414)
  {
    v5 = xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v53[0] = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, v53);
    xpc_release(v53[0]);
    xpc_release(v8);
    _Block_object_dispose(&v49, 8);
  }
  else
  {
    _Block_object_dispose(&v49, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF57E998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  _QWORD *v16;
  uint64_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *p_shared_owners;
  unint64_t v23;
  const void *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;

  if (v18)
    _Block_release(v18);
  if (aBlock)
    _Block_release(aBlock);
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  _Block_object_dispose((const void *)(v20 - 128), 8);
  v24 = *(const void **)(v17 + 32);
  if (v24)
    _Block_release(v24);
  xpc_release(*(xpc_object_t *)(v17 + 24));
  *(_QWORD *)(v17 + 24) = 0;
  v25 = *(std::__shared_weak_count **)(v17 + 8);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  operator delete((void *)v17);
  v26 = (std::__shared_weak_count *)v16[2];
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t util::convert<BOOL>(const std::string *a1, BOOL *a2, int a3)
{
  const char *v6;
  unint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  size_t __idx;

  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = (const char *)a1->__r_.__value_.__r.__words[0];
    if (strcasecmp(a1->__r_.__value_.__l.__data_, "false") && strcasecmp(v6, "off") && strcasecmp(v6, "no"))
    {
      if (!strcasecmp(v6, "true")
        || !strcasecmp(v6, "on")
        || !strcasecmp(v6, "yes")
        || !strcasecmp(v6, "full")
        || !strcasecmp(v6, "streaming")
        || !strcasecmp(v6, "lite"))
      {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
LABEL_27:
    v7 = 0;
LABEL_29:
    *a2 = v7 != 0;
    return 1;
  }
  if (!strcasecmp((const char *)a1, "false")
    || !strcasecmp((const char *)a1, "off")
    || !strcasecmp((const char *)a1, "no"))
  {
    goto LABEL_27;
  }
  if (!strcasecmp((const char *)a1, "true"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "on"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "yes"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "full"))
    goto LABEL_28;
  if (!strcasecmp((const char *)a1, "streaming"))
    goto LABEL_28;
  v6 = (const char *)a1;
  if (!strcasecmp((const char *)a1, "lite"))
    goto LABEL_28;
LABEL_21:
  if (!strcasecmp(v6, "background"))
  {
LABEL_28:
    v7 = 1;
    goto LABEL_29;
  }
  __idx = 0xAAAAAAAAAAAAAAAALL;
  v7 = std::stol(a1, &__idx, a3);
  v8 = 0;
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (__idx == size && v7 < 2)
    goto LABEL_29;
  return v8;
}

uint64_t sub_1BF57EDCC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  return 0;
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke(_QWORD *a1, char a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  _QWORD aBlock[5];
  void *v16;
  char v17;
  void *v18;
  uint64_t v19[2];
  xpc_object_t v20;

  if ((a2 & 1) != 0)
  {
    v3 = a1[5];
    v4 = (std::__shared_weak_count *)a1[8];
    v19[0] = a1[7];
    v19[1] = (uint64_t)v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke_2;
    aBlock[3] = &unk_1E7917898;
    aBlock[4] = a1[4];
    v17 = 1;
    v7 = (void *)a1[6];
    if (v7)
      v7 = _Block_copy(v7);
    v16 = v7;
    v8 = _Block_copy(aBlock);
    v18 = v8;
    AWDModule::enableMetricSubmission_sync(v3, v19, 1, (uint64_t)&v18);
    if (v8)
      _Block_release(v8);
    if (!v4)
      goto LABEL_13;
    v9 = (unint64_t *)&v4->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      v11 = v16;
      if (v16)
        goto LABEL_14;
    }
    else
    {
LABEL_13:
      v11 = v16;
      if (v16)
LABEL_14:
        _Block_release(v11);
    }
  }
  else
  {
    v12 = xpc_null_create();
    v13 = a1[6];
    v20 = v12;
    v14 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v13 + 16))(v13, 3760250880, &v20);
    xpc_release(v20);
    xpc_release(v14);
  }
}

void sub_1BF57EF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock)
{
  void *v15;
  uint64_t v16;

  xpc_release(*(xpc_object_t *)(v16 - 40));
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI9AWDModuleE15execute_wrappedIZZZNS3_10initializeENS_13group_sessionEEUb_EUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS8_NSD_14default_deleteIS8_EEEEENUlPvE_8__invokeESI_(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  const void *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *value;
  unsigned __int8 v15;
  capabilities::abs *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  char *v23;
  char *v24;
  unsigned __int8 v25;
  xpc_object_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  _QWORD aBlock[6];
  void *v44;
  char *v45;
  std::__shared_weak_count *v46;
  void *v47;
  uint64_t v48[2];
  xpc_object_t object;
  void *__p[3];
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  v51 = 0;
  v52 = &v51;
  v53 = 0x2000000000;
  v54 = -534716414;
  if (MEMORY[0x1C3B8CD78](*(_QWORD *)(v2 + 24)) == MEMORY[0x1E0C812F8])
  {
    value = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFC210]);
    v55 = value;
    if (value)
      xpc_retain(value);
    else
      v55 = (char *)xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&v55, (const object *)0xFFFFFFFFLL);
    xpc_release(v55);
    if (v15 != 1)
    {
      if (v15)
      {
        if ((v15 - 2) > 3u)
          goto LABEL_2;
      }
      else if ((capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(v16) & 1) == 0)
      {
        goto LABEL_2;
      }
    }
    v17 = *(_QWORD *)(v3 + 176);
    if (!v17)
      goto LABEL_35;
    v18 = v3 + 176;
    do
    {
      v19 = *(unsigned __int8 *)(v17 + 32);
      v20 = v19 >= v15;
      if (v19 >= v15)
        v21 = (uint64_t *)v17;
      else
        v21 = (uint64_t *)(v17 + 8);
      if (v20)
        v18 = v17;
      v17 = *v21;
    }
    while (*v21);
    if (v18 != v3 + 176 && *(unsigned __int8 *)(v18 + 32) <= v15)
    {
      v23 = *(char **)(v18 + 40);
      v22 = *(std::__shared_weak_count **)(v18 + 48);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v42 = __ldxr(p_shared_owners);
        while (__stxr(v42 + 1, p_shared_owners));
      }
    }
    else
    {
LABEL_35:
      AWDModule::appCheckIn_sync(v3, v15, &v55);
      v23 = v55;
      v22 = (std::__shared_weak_count *)v56;
    }
    if (v23)
    {
      *((_DWORD *)v52 + 6) = -534716416;
      v24 = (char *)xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFB0D8]);
      v55 = v24;
      if (v24)
        xpc_retain(v24);
      else
        v55 = (char *)xpc_null_create();
      v25 = xpc::dyn_cast_or_default((xpc *)&v55, (const object *)0xFFFFFFFFLL);
      xpc_release(v55);
      memset(__p, 170, sizeof(__p));
      v26 = xpc_dictionary_get_value(*(xpc_object_t *)(v2 + 24), (const char *)*MEMORY[0x1E0CFAF78]);
      object = v26;
      if (v26)
        xpc_retain(v26);
      else
        object = xpc_null_create();
      v55 = 0;
      v56 = 0;
      v57 = 0;
      xpc::dyn_cast_or_default();
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
      xpc_release(object);
      v27 = __p[0];
      if (__p[1] != __p[0] && v25 <= 2u)
      {
        v48[0] = (uint64_t)v23;
        v48[1] = (uint64_t)v22;
        if (v22)
        {
          v28 = (unint64_t *)&v22->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1174405120;
        aBlock[2] = ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb0_ENK3__1clEv_block_invoke;
        aBlock[3] = &unk_1E79178D0;
        aBlock[5] = v3;
        v30 = *(void **)(v2 + 32);
        if (v30)
          v30 = _Block_copy(v30);
        v44 = v30;
        v45 = v23;
        v46 = v22;
        if (v22)
        {
          v31 = (unint64_t *)&v22->__shared_owners_;
          do
            v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }
        aBlock[4] = &v51;
        v33 = _Block_copy(aBlock);
        v47 = v33;
        AWDModule::sendPayload_sync(v3, v48, v25, (uint64_t)__p, (uint64_t)&v47);
        if (v33)
          _Block_release(v33);
        if (v22)
        {
          v34 = (unint64_t *)&v22->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v36 = v46;
        if (v46)
        {
          v37 = (unint64_t *)&v46->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        if (v44)
          _Block_release(v44);
        v27 = __p[0];
      }
      if (v27)
      {
        __p[1] = v27;
        operator delete(v27);
      }
    }
    if (v22)
    {
      v39 = (unint64_t *)&v22->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
LABEL_2:
  v4 = v52;
  if (*((_DWORD *)v52 + 6) == -534716414)
  {
    v5 = (char *)xpc_null_create();
    v6 = *(_QWORD *)(v2 + 32);
    v7 = *((unsigned int *)v4 + 6);
    v55 = v5;
    v8 = xpc_null_create();
    (*(void (**)(uint64_t, uint64_t, char **))(v6 + 16))(v6, v7, &v55);
    xpc_release(v55);
    xpc_release(v8);
    _Block_object_dispose(&v51, 8);
  }
  else
  {
    _Block_object_dispose(&v51, 8);
    if (!v2)
      goto LABEL_10;
  }
  v9 = *(const void **)(v2 + 32);
  if (v9)
    _Block_release(v9);
  xpc_release(*(xpc_object_t *)(v2 + 24));
  *(_QWORD *)(v2 + 24) = 0;
  v10 = *(std::__shared_weak_count **)(v2 + 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  operator delete((void *)v2);
LABEL_10:
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  operator delete(a1);
}

void sub_1BF57F44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,xpc_object_t object,void *__p,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  const void *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const void *v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;

  if (v27)
    _Block_release(v27);
  if (a18)
  {
    p_shared_owners = (unint64_t *)&a18->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))a18->__on_zero_shared)(a18);
      std::__shared_weak_count::__release_weak(a18);
    }
  }
  if (aBlock)
    _Block_release(aBlock);
  if (a21)
  {
    v32 = (unint64_t *)&a21->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  if (__p)
    operator delete(__p);
  if (v26)
  {
    v34 = (unint64_t *)&v26->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  _Block_object_dispose((const void *)(v28 - 120), 8);
  v36 = *(const void **)(v25 + 32);
  if (v36)
    _Block_release(v36);
  xpc_release(*(xpc_object_t *)(v25 + 24));
  *(_QWORD *)(v25 + 24) = 0;
  v37 = *(std::__shared_weak_count **)(v25 + 8);
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  operator delete((void *)v25);
  v38 = (std::__shared_weak_count *)v24[2];
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  operator delete(v24);
  _Unwind_Resume(a1);
}

void AWDModule::enableMetricSubmission_sync(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  NSObject *v15;
  _QWORD v16[4];
  void *v17;
  void *aBlock;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint8_t buf[16];

  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
  {
    v7 = (std::__shared_weak_count *)a2[1];
    v19 = *a2;
    v20 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 1174405120;
    v16[2] = ___ZN9AWDModule27enableMetricSubmission_syncENSt3__110shared_ptrIN3awd10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
    v16[3] = &__block_descriptor_tmp_15_0;
    v10 = *(void **)a4;
    if (*(_QWORD *)a4)
      v10 = _Block_copy(v10);
    v17 = v10;
    aBlock = _Block_copy(v16);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v5 + 48))(v5, &v19, a3, &aBlock);
    if (aBlock)
      _Block_release(aBlock);
    v11 = v20;
    if (!v20)
      goto LABEL_13;
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v14 = v17;
      if (!v17)
        return;
    }
    else
    {
LABEL_13:
      v14 = v17;
      if (!v17)
        return;
    }
    _Block_release(v14);
  }
  else
  {
    v15 = *(NSObject **)(a1 + 88);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Cannot enable metric submission because driver is unavailable", buf, 2u);
    }
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  }
}

void sub_1BF57F80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *aBlock, char a15)
{
  if (aBlock)
    _Block_release(aBlock);
  if (a13)
    _Block_release(a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_40c22_ZTSN3xpc10connectionE48c39_ZTSN3ctu2cf11CFSharedRefIK9__CFArrayEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  CFTypeRef result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (!v4)
  {
    *(_QWORD *)(a1 + 40) = xpc_null_create();
    result = *(CFTypeRef *)(a2 + 48);
    *(_QWORD *)(a1 + 48) = result;
    if (!result)
      return result;
    return CFRetain(result);
  }
  xpc_retain(v4);
  result = *(CFTypeRef *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void ___ZZZZN9AWDModule10initializeEN8dispatch13group_sessionEEUb_EUb2_ENK3__3clEv_block_invoke(uint64_t a1, int a2)
{
  int v3;
  uint64_t v4;
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  xpc_object_t v8;
  xpc_object_t object;

  if (a2)
    v3 = 0;
  else
    v3 = -534716416;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v3;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = xpc_null_create();
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned int *)(v4 + 24);
  object = v5;
  v8 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, xpc_object_t *))(v6 + 16))(v6, v7, &object);
  xpc_release(object);
  xpc_release(v8);
}

void sub_1BF57F938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  void *v10;

  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

void *__copy_helper_block_e8_40c15_ZTSN3xpc4dictE48c54_ZTSN8dispatch5blockIU13block_pointerFviN3xpc4dictEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *result;

  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  if (v4)
  {
    xpc_retain(v4);
    result = *(void **)(a2 + 48);
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 40) = xpc_null_create();
  result = *(void **)(a2 + 48);
  if (result)
LABEL_5:
    result = _Block_copy(result);
LABEL_6:
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void Timestamp::Timestamp(Timestamp *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  int *v10;
  char *v11;
  unsigned __int128 v12;
  uint8_t buf[4];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  v2 = (_QWORD *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  v12 = 0uLL;
  if ((gettimeofday((timeval *)&v12, 0) & 0x80000000) == 0
    || !os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = *v2;
    v4 = v2;
    if (*v2)
      goto LABEL_4;
LABEL_10:
    v7 = (char *)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v4;
    *v2 = v7;
    v8 = **(_QWORD **)this;
    v9 = (uint64_t *)v7;
    if (v8)
    {
      *(_QWORD *)this = v8;
      v9 = (uint64_t *)*v2;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 1), v9);
    ++*((_QWORD *)this + 2);
    goto LABEL_13;
  }
  v10 = __error();
  v11 = strerror(*v10);
  *(_DWORD *)buf = 136315138;
  v14 = v11;
  _os_log_error_impl(&dword_1BF566000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to get current time. Error: %s\n", buf, 0xCu);
  v3 = *v2;
  v4 = v2;
  if (!*v2)
    goto LABEL_10;
LABEL_4:
  v5 = v3;
  while (1)
  {
    while (1)
    {
      v4 = (_QWORD *)v5;
      v6 = *(_DWORD *)(v5 + 32);
      if (v6 < 1)
        break;
      v5 = *v4;
      v2 = v4;
      if (!*v4)
        goto LABEL_10;
    }
    if ((v6 & 0x80000000) == 0)
      break;
    v5 = v4[1];
    if (!v5)
    {
      v2 = v4 + 1;
      goto LABEL_10;
    }
  }
  v7 = (char *)v4;
LABEL_13:
  *(_OWORD *)(v7 + 40) = v12;
}

void sub_1BF57FB6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD **v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1BF57FB88(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, v2);
  _Unwind_Resume(a1);
}

void Timestamp::Timestamp(Timestamp *this, const Timestamp *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>((uint64_t *)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_1BF57FBE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1BF57FC34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, _OWORD *a2, int a3)
{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

{
  _QWORD *v6;
  char *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = (char *)operator new(0x38uLL);
  *((_DWORD *)v7 + 8) = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  v7[24] = 1;
  a1[2] = 1;
  *(_OWORD *)(v7 + 40) = *a2;
  return a1;
}

__n128 Timestamp::set(uint64_t **a1, __n128 *a2, int a3)
{
  char *v6;
  uint64_t **v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  __n128 result;

  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v9 <= a3)
          break;
        v6 = *(char **)v8;
        v7 = (uint64_t **)v8;
        if (!*(_QWORD *)v8)
          goto LABEL_8;
      }
      if (v9 >= a3)
        break;
      v6 = (char *)*((_QWORD *)v8 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 8);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = (char *)(a1 + 1);
LABEL_8:
    v10 = v8;
    v8 = (char *)operator new(0x38uLL);
    *((_DWORD *)v8 + 8) = a3;
    *((_QWORD *)v8 + 5) = 0;
    *((_QWORD *)v8 + 6) = 0;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = v10;
    *v7 = (uint64_t *)v8;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v8;
    if (v11)
    {
      *a1 = v11;
      v12 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  result = *a2;
  *(__n128 *)(v8 + 40) = *a2;
  return result;
}

_QWORD *Timestamp::Timestamp(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

{
  _QWORD *v6;
  _DWORD *v7;

  a1[2] = 0;
  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = a1 + 1;
  v7 = operator new(0x38uLL);
  v7[8] = a3;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = v6;
  *v6 = v7;
  *a1 = v7;
  *((_BYTE *)v7 + 24) = 1;
  a1[2] = 1;
  *((_QWORD *)v7 + 5) = a2;
  *((_QWORD *)v7 + 6) = 0xAAAAAAAAAAAAAAAALL;
  return a1;
}

uint64_t **Timestamp::Timestamp(uint64_t **a1, char *a2, char a3, int a4)
{
  const char *v5;
  uint64_t **v7;
  int *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  uint64_t *v12;
  uint64_t **v13;
  int v14;
  char *v15;
  uint64_t *v16;
  uint64_t *v17;
  int *v19;
  char *v20;
  int *v21;
  char *v22;
  unsigned __int128 v23;
  tm v24;
  void *__p[4];
  uint8_t buf[4];
  char *v27;
  uint64_t v28;

  v5 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v7 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  __p[2] = (void *)0x11AAAAAAAAAA0053;
  *(_OWORD *)__p = *(_OWORD *)"%Y-%m-%d-%H-%M-%S";
  if ((a3 & 0x10) != 0)
  {
    HIBYTE(__p[2]) = 19;
    strcpy((char *)__p, "%Y.%m.%d_%H-%M-%S%z");
  }
  *((_QWORD *)&v23 + 1) = 0xAAAAAAAA00000000;
  memset(&v24, 0, sizeof(v24));
  if (a2[23] < 0)
    v5 = *(const char **)a2;
  if (strptime(v5, (const char *)__p, &v24))
  {
    v24.tm_isdst = -1;
    *(_QWORD *)&v23 = mktime(&v24);
    if ((_QWORD)v23 != -1)
      goto LABEL_15;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v19 = __error();
      v20 = strerror(*v19);
      *(_DWORD *)buf = 136315138;
      v27 = v20;
      _os_log_error_impl(&dword_1BF566000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Failed to convert to absolute time. Error: %s\n", buf, 0xCu);
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    else
    {
      v23 = 0uLL;
      if ((gettimeofday((timeval *)&v23, 0) & 0x80000000) == 0)
        goto LABEL_15;
    }
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v8 = __error();
    v9 = strerror(*v8);
    *(_DWORD *)buf = 136315138;
    v27 = v9;
    v10 = MEMORY[0x1E0C81028];
    v11 = "Failed to get current time after absolute time conversion failed. Error: %s\n";
    goto LABEL_32;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to convert time from string format\n", buf, 2u);
  }
  v23 = 0uLL;
  if (gettimeofday((timeval *)&v23, 0) < 0 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v21 = __error();
    v22 = strerror(*v21);
    *(_DWORD *)buf = 136315138;
    v27 = v22;
    v10 = MEMORY[0x1E0C81028];
    v11 = "Failed to get current time after conversion failure. Error: %s\n";
LABEL_32:
    _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0xCu);
  }
LABEL_15:
  v12 = *v7;
  v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        v13 = (uint64_t **)v12;
        v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a4)
          break;
        v12 = *v13;
        v7 = v13;
        if (!*v13)
          goto LABEL_22;
      }
      if (v14 >= a4)
        break;
      v12 = v13[1];
      if (!v12)
      {
        v7 = v13 + 1;
        goto LABEL_22;
      }
    }
    *(_OWORD *)(v13 + 5) = v23;
    if (SHIBYTE(__p[2]) < 0)
      goto LABEL_25;
  }
  else
  {
LABEL_22:
    v15 = (char *)operator new(0x38uLL);
    *((_DWORD *)v15 + 8) = a4;
    *((_QWORD *)v15 + 5) = 0;
    *((_QWORD *)v15 + 6) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v13;
    *v7 = (uint64_t *)v15;
    v16 = (uint64_t *)**a1;
    v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      v17 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    *(_OWORD *)(v15 + 40) = v23;
    if (SHIBYTE(__p[2]) < 0)
LABEL_25:
      operator delete(__p[0]);
  }
  return a1;
}

void sub_1BF580238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v24, *(_QWORD **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t Timestamp::get(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;

  *a2 = 0;
  a2[1] = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a3;
    if (v7 >= a3)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3 || *(_DWORD *)(v6 + 32) > a3)
    return 0;
  *(_OWORD *)a2 = *(_OWORD *)(v6 + 40);
  return 1;
}

uint64_t Timestamp::now(timeval *this, timeval *a2)
{
  return gettimeofday(this, 0);
}

uint64_t Timestamp::asString@<X0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, _BYTE *a4@<X8>)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  uint64_t *v15;
  time_t v16;
  __int128 v17;
  const char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  const std::locale::facet *v22;
  size_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  tm v31;
  time_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *__p[2];
  __int128 v39;
  __int128 v40;
  _OWORD v41[9];
  unint64_t v42;
  std::locale v43;
  char __s[16];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v42 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v41[7] = v8;
  v41[8] = v8;
  v41[5] = v8;
  v41[6] = v8;
  v41[3] = v8;
  v41[4] = v8;
  v41[1] = v8;
  v41[2] = v8;
  v40 = v8;
  v41[0] = v8;
  *(_OWORD *)__p = v8;
  v39 = v8;
  v36 = v8;
  v37 = v8;
  v34 = v8;
  v35 = v8;
  v33 = v8;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = a1 + 8;
  v9 = v11;
  if (!v11)
    goto LABEL_11;
  v12 = v10;
  do
  {
    v13 = *(_DWORD *)(v9 + 32);
    v14 = v13 < a2;
    if (v13 >= a2)
      v15 = (uint64_t *)v9;
    else
      v15 = (uint64_t *)(v9 + 8);
    if (!v14)
      v12 = v9;
    v9 = *v15;
  }
  while (*v15);
  if (v12 != v10 && *(_DWORD *)(v12 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v12 + 40);
    if ((a3 & 0x11) != 0)
    {
LABEL_12:
      v31.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
      v32 = v16;
      *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)&v31.tm_mon = v17;
      *(_OWORD *)&v31.tm_isdst = v17;
      *(_OWORD *)&v31.tm_sec = v17;
      localtime_r(&v32, &v31);
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)__s = 0u;
      v45 = 0u;
      if ((a3 & 0x10) != 0)
        v18 = "%Y.%m.%d_%H-%M-%S%z";
      else
        v18 = "%Y-%m-%d-%H-%M-%S";
      strftime(__s, 0x40uLL, v18, &v31);
      v19 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)__s, v19);
      if ((a3 & 8) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"-", 1);
        v20 = v34;
        v21 = (char *)&v34 + *(_QWORD *)(v34 - 24);
        if (*((_DWORD *)v21 + 36) == -1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)&v34 + *(_QWORD *)(v34 - 24)));
          v22 = std::locale::use_facet(&v43, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 32);
          std::locale::~locale(&v43);
          v20 = v34;
        }
        *((_DWORD *)v21 + 36) = 48;
        *(_QWORD *)((char *)&v35 + *(_QWORD *)(v20 - 24) + 8) = 3;
        std::ostream::operator<<();
      }
      goto LABEL_23;
    }
  }
  else
  {
LABEL_11:
    v16 = 0;
    if ((a3 & 0x11) != 0)
      goto LABEL_12;
  }
  std::ostream::operator<<();
  if ((a3 & 4) != 0 || (a3 & 8) != 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)".", 1);
    std::ostream::operator<<();
  }
LABEL_23:
  if ((BYTE8(v40) & 0x10) != 0)
  {
    v24 = v40;
    if ((unint64_t)v40 < *((_QWORD *)&v37 + 1))
    {
      *(_QWORD *)&v40 = *((_QWORD *)&v37 + 1);
      v24 = *((_QWORD *)&v37 + 1);
    }
    v25 = (const void *)v37;
    v23 = v24 - v37;
    if ((unint64_t)(v24 - v37) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_40;
  }
  else
  {
    if ((BYTE8(v40) & 8) == 0)
    {
      v23 = 0;
      a4[23] = 0;
      goto LABEL_36;
    }
    v25 = (const void *)*((_QWORD *)&v35 + 1);
    v23 = *((_QWORD *)&v36 + 1) - *((_QWORD *)&v35 + 1);
    if (*((_QWORD *)&v36 + 1) - *((_QWORD *)&v35 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_40:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v23 >= 0x17)
  {
    v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    *((_QWORD *)a4 + 1) = v23;
    *((_QWORD *)a4 + 2) = v27 | 0x8000000000000000;
    *(_QWORD *)a4 = v28;
    a4 = v28;
    goto LABEL_35;
  }
  a4[23] = v23;
  if (v23)
LABEL_35:
    memmove(a4, v25, v23);
LABEL_36:
  a4[v23] = 0;
  *(_QWORD *)&v33 = *MEMORY[0x1E0DE4F50];
  v29 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v33 + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v34 = v29;
  *((_QWORD *)&v34 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v39) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8C364](v41);
}

void sub_1BF580680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF580694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::locale::~locale((std::locale *)(v9 - 136));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5806B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5806C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5806DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1BF5807F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8C364](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8C364](a1 + 128);
  return a1;
}

uint64_t *Timestamp::convert(uint64_t a1)
{
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  uint64_t *v8;
  std::string __p;
  uint64_t *v11[3];

  memset(v11, 170, sizeof(v11));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  Timestamp::Timestamp(v11, (char *)&__p, 9, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v1 = v11[1];
    if (!v11[1])
    {
LABEL_18:
      v8 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v1 = v11[1];
    if (!v11[1])
      goto LABEL_18;
  }
  v2 = &v11[1];
  v3 = v1;
  do
  {
    v4 = (uint64_t **)v3;
    v5 = v2;
    v6 = *((_DWORD *)v3 + 8);
    if (v6 >= 0)
      v2 = (uint64_t **)v3;
    else
      ++v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v2 == &v11[1])
    goto LABEL_18;
  v7 = v6 >= 0 ? v4 : v5;
  if (*((int *)v7 + 8) > 0)
    goto LABEL_18;
  if (v6 < 0)
    v4 = v5;
  v8 = v4[5];
LABEL_19:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)v11, v1);
  return v8;
}

void sub_1BF5809AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7911228, (void (*)(void *))MEMORY[0x1E0DE42D0]);
}

void sub_1BF580A18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 == result)
    return result;
  while (1)
  {
    v2 = a2[2];
    if (*(_BYTE *)(v2 + 24))
      return result;
    v3 = *(uint64_t **)(v2 + 16);
    v4 = *v3;
    if (*v3 != v2)
      break;
    v7 = v3[1];
    if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
    {
      if (*(uint64_t **)v2 == a2)
      {
        *(_BYTE *)(v2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
          goto LABEL_15;
      }
      else
      {
        v9 = *(uint64_t **)(v2 + 8);
        v10 = *v9;
        *(_QWORD *)(v2 + 8) = *v9;
        if (v10)
        {
          *(_QWORD *)(v10 + 16) = v2;
          v3 = *(uint64_t **)(v2 + 16);
        }
        v9[2] = (uint64_t)v3;
        *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = v9;
        *v9 = v2;
        *(_QWORD *)(v2 + 16) = v9;
        v3 = (uint64_t *)v9[2];
        v2 = *v3;
        *((_BYTE *)v9 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v11 = *(_QWORD *)(v2 + 8);
        *v3 = v11;
        if (v11)
LABEL_15:
          *(_QWORD *)(v11 + 16) = v3;
      }
      *(_QWORD *)(v2 + 16) = v3[2];
      *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
      *(_QWORD *)(v2 + 8) = v3;
      v3[2] = v2;
      return result;
    }
LABEL_3:
    *(_BYTE *)(v2 + 24) = 1;
    a2 = v3;
    *((_BYTE *)v3 + 24) = v3 == result;
    *v5 = 1;
    if (v3 == result)
      return result;
  }
  if (v4)
  {
    v6 = *(unsigned __int8 *)(v4 + 24);
    v5 = (_BYTE *)(v4 + 24);
    if (!v6)
      goto LABEL_3;
  }
  if (*(uint64_t **)v2 == a2)
  {
    v12 = a2[1];
    *(_QWORD *)v2 = v12;
    if (v12)
    {
      *(_QWORD *)(v12 + 16) = v2;
      v3 = *(uint64_t **)(v2 + 16);
    }
    a2[2] = (uint64_t)v3;
    *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8 * (**(_QWORD **)(v2 + 16) != v2)) = a2;
    a2[1] = v2;
    *(_QWORD *)(v2 + 16) = a2;
    v3 = (uint64_t *)a2[2];
  }
  else
  {
    a2 = (uint64_t *)a2[2];
  }
  *((_BYTE *)a2 + 24) = 1;
  *((_BYTE *)v3 + 24) = 0;
  v13 = (uint64_t *)v3[1];
  v14 = *v13;
  v3[1] = *v13;
  if (v14)
    *(_QWORD *)(v14 + 16) = v3;
  v13[2] = v3[2];
  *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v13;
  *v13 = (uint64_t)v3;
  v3[2] = (uint64_t)v13;
  return result;
}

uint64_t *std::map<Timestamp::TimeDomain,timeval>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<Timestamp::TimeDomain,timeval>,std::__tree_node<std::__value_type<Timestamp::TimeDomain,timeval>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t **v13;
  uint64_t **v14;
  int v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = *((_DWORD *)v4 + 8);
      v8 = (uint64_t *)v5[1];
      v9 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v10 = v5[1];
      v11 = v6;
      if (v8)
      {
        do
        {
          v9 = (uint64_t *)v10;
          v10 = *(_QWORD *)(v10 + 8);
        }
        while (v10);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v11[2];
          v12 = *v9 == (_QWORD)v11;
          v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 8) < v7)
      {
LABEL_10:
        if (v8)
          v13 = (uint64_t **)v9;
        else
          v13 = (uint64_t **)v6;
        if (v8)
          v14 = (uint64_t **)(v9 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v8)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v8;
              v15 = *((_DWORD *)v8 + 8);
              if (v15 <= v7)
                break;
              v8 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v7)
              goto LABEL_29;
            v8 = v13[1];
            if (!v8)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = operator new(0x38uLL);
      v17 = v4[6];
      v16[2] = *((_OWORD *)v4 + 2);
      *((_QWORD *)v16 + 6) = v17;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v13;
      *v14 = (uint64_t *)v16;
      v18 = *(_QWORD *)*v5;
      if (v18)
      {
        *v5 = v18;
        v19 = *v14;
      }
      else
      {
        v19 = (uint64_t *)v16;
      }
      result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v19);
      ++v5[2];
LABEL_29:
      v20 = (_QWORD *)v4[1];
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = (_QWORD *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (_QWORD *)v4[2];
          v12 = *v21 == (_QWORD)v4;
          v4 = v21;
        }
        while (!v12);
      }
      v4 = v21;
    }
    while (v21 != a3);
  }
  return result;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0xAAAAAAAAAAAAAAAALL;
  v13[1] = 0xAAAAAAAAAAAAAAAALL;
  MEMORY[0x1C3B8C1FC](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1C3B8C208](v13);
  return a1;
}

void sub_1BF580F78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1C3B8C208](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1BF580F58);
}

void sub_1BF580FC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__b[3];

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if ((uint64_t)v12 >= 1)
    {
      memset(__b, 170, sizeof(__b));
      if (v12 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v12 >= 0x17)
      {
        v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17)
          v14 = v12 | 7;
        v15 = v14 + 1;
        v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        __b[2] = (void *)(v15 | 0x8000000000000000);
        __b[0] = v13;
      }
      else
      {
        HIBYTE(__b[2]) = v12;
        v13 = __b;
      }
      memset(v13, __c, v12);
      *((_BYTE *)v13 + v12) = 0;
      if (SHIBYTE(__b[2]) >= 0)
        v16 = __b;
      else
        v16 = (void **)__b[0];
      v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 96))(v6, v16, v12);
      v18 = v17;
      if (SHIBYTE(__b[2]) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12)
          return 0;
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(_QWORD *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_1BF581168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *ABMGetRootVersionString@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF73A760;
  strcpy(result, "AppleBasebandServices_Manager-1180");
  return result;
}

void ABMServerFactory::create(uint64_t *a1@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a1);
}

void ABMServerFactory::ABMServerFactory(ABMServerFactory *this)
{
  _QWORD *v1;

  Factory::Factory(this);
  *v1 = &off_1E7911AC0;
}

{
  _QWORD *v1;

  Factory::Factory(this);
  *v1 = &off_1E7911AC0;
}

void ABMServerFactory::~ABMServerFactory(ABMServerFactory *this)
{
  void *v1;

  Factory::~Factory(this);
  operator delete(v1);
}

void ABMServerFactory::createServiceManager(uint64_t *a1@<X1>, _OWORD *a2@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __n128 v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  v2 = (std::__shared_weak_count *)a1[1];
  v8[0] = *a1;
  v8[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5.n128_f64[0] = ABMServiceManager::create(v8, a2);
  if (v2)
  {
    v6 = (unint64_t *)&v2->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v2->__on_zero_shared)(v2, v5);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF5812D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void ABMServerFactory::createBBServerConnection(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void ABMServerFactory::createRouterServer(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void _ZNSt3__115allocate_sharedB8ne180100I16ABMServerFactoryNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(uint64_t *a1@<X8>)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  uint64_t v4;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  v2 = (std::__shared_weak_count *)operator new(0x30uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)off_1E7911B10;
  Factory::Factory((Factory *)&v2[1]);
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E7911AC0;
  *a1 = v4;
  a1[1] = (uint64_t)v2;
  shared_weak_owners = (std::__shared_weak_count *)v2[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v2[1].__shared_owners_ = v4;
    v2[1].__shared_weak_owners_ = (uint64_t)v2;
  }
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BF581468(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7911B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ABMServerFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7911B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<ABMServerFactory>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

void OBDManager::create(char *a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, OBDManager **a5@<X8>)
{
  OBDManager *v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  OBDManager *v34;
  unint64_t v35;
  unsigned __int8 v36;
  NSObject *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  std::__shared_weak_count *v43;
  dispatch_object_t object;
  OBDManager *v45;
  unint64_t v46;
  uint8_t buf[8];

  v45 = (OBDManager *)0xAAAAAAAAAAAAAAAALL;
  v46 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (OBDManager *)operator new(0x80uLL);
  v11 = *a2;
  object = v11;
  if (v11)
    dispatch_retain(v11);
  v12 = a3[1];
  v42 = *a3;
  v43 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *a4;
  v16 = (std::__shared_weak_count *)a4[1];
  v41[0] = v15;
  v41[1] = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  OBDManager::OBDManager((uint64_t)v10, a1, &object, &v42, v41);
  v45 = v10;
  *(_QWORD *)buf = v10;
  v19 = (std::__shared_weak_count *)operator new(0x20uLL);
  v19->__shared_owners_ = 0;
  v20 = (unint64_t *)&v19->__shared_owners_;
  v19->__vftable = (std::__shared_weak_count_vtbl *)off_1E7911BF0;
  v19->__shared_weak_owners_ = 0;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v46 = (unint64_t)v19;
  *(_QWORD *)buf = 0;
  v21 = (std::__shared_weak_count *)*((_QWORD *)v10 + 2);
  if (v21)
  {
    if (v21->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v22 = __ldxr(v20);
    while (__stxr(v22 + 1, v20));
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v24 = __ldxr(p_shared_weak_owners);
    while (__stxr(v24 + 1, p_shared_weak_owners));
    *((_QWORD *)v10 + 1) = v10;
    *((_QWORD *)v10 + 2) = v19;
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    do
      v25 = __ldxr(v20);
    while (__stxr(v25 + 1, v20));
    v26 = (unint64_t *)&v19->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    *((_QWORD *)v10 + 1) = v10;
    *((_QWORD *)v10 + 2) = v19;
  }
  do
    v28 = __ldaxr(v20);
  while (__stlxr(v28 - 1, v20));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_22:
  if (*(_QWORD *)buf)
    OBDManager::~OBDManager(*(OBDManager **)buf);
  if (v16)
  {
    v29 = (unint64_t *)&v16->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v31 = v43;
  if (v43)
  {
    v32 = (unint64_t *)&v43->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (object)
    dispatch_release(object);
  v34 = v45;
  if (v45 && OBDManager::init(v45))
  {
    v35 = v46;
    *a5 = v34;
    a5[1] = (OBDManager *)v35;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v37 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
LABEL_49:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v37, OS_LOG_TYPE_ERROR, "Failed to create OBD Manager!", buf, 2u);
    *a5 = 0;
    a5[1] = 0;
    v38 = (std::__shared_weak_count *)v46;
    if (!v46)
      return;
    goto LABEL_43;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  v37 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
    goto LABEL_49;
LABEL_42:
  *a5 = 0;
  a5[1] = 0;
  v38 = (std::__shared_weak_count *)v46;
  if (!v46)
    return;
LABEL_43:
  v39 = (unint64_t *)&v38->__shared_owners_;
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
  }
}

void sub_1BF581838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF58184C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  std::unique_ptr<OBDManager>::~unique_ptr[abi:ne180100]((OBDManager **)va2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v2)
    dispatch_release(v2);
  _Unwind_Resume(a1);
}

BOOL OBDManager::init(OBDManager *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  void **v12;
  NSObject *v13;
  const char *v14;
  _QWORD *v16;
  _QWORD aBlock[6];
  std::__shared_weak_count *v18;
  void *v19;
  NSObject *v20;
  uint8_t buf[16];

  v2 = *((_QWORD *)this + 13);
  if (!v2)
  {
    v13 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      return v2 != 0;
    *(_WORD *)buf = 0;
    v14 = "Audio Manager is null pointer!";
LABEL_33:
    _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, v14, buf, 2u);
    return v2 != 0;
  }
  v3 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v3)
  {
    v13 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      return v2 != 0;
    *(_WORD *)buf = 0;
    v14 = "On-Body handler is not created";
    goto LABEL_33;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v3 = (_QWORD *)*((_QWORD *)this + 8);
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3321888768;
  aBlock[2] = ___ZN10OBDManager4initEv_block_invoke;
  aBlock[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e11_v16__0i8i12l;
  aBlock[4] = this;
  aBlock[5] = v4;
  v18 = v5;
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = _Block_copy(aBlock);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    dispatch_retain(v11);
  v19 = v10;
  v20 = v11;
  v12 = (void **)v3[4];
  if ((unint64_t)v12 >= v3[5])
  {
    v16 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v3 + 3, (uint64_t)&v19);
    v11 = v20;
    v3[4] = v16;
    if (!v11)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v10)
  {
    *v12 = _Block_copy(v10);
    v12[1] = v11;
    if (!v11)
      goto LABEL_16;
    goto LABEL_15;
  }
  *v12 = 0;
  v12[1] = v11;
  if (v11)
LABEL_15:
    dispatch_retain(v11);
LABEL_16:
  v3[4] = v12 + 2;
  if (v11)
LABEL_17:
    dispatch_release(v11);
LABEL_18:
  if (v19)
    _Block_release(v19);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  return v2 != 0;
}

void sub_1BF581A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17)
{
  std::__shared_weak_count *v17;

  dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback((uint64_t)&a17);
  if (a16)
  {
    std::__shared_weak_count::__release_weak(a16);
    if (!v17)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

uint64_t OBDManager::OBDManager(uint64_t a1, char *__s, NSObject **a3, uint64_t *a4, _QWORD *a5)
{
  size_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  void **v19;
  queue v20;
  NSObject *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  dispatch_object_t object;
  std::string __dst;
  std::string v47;
  void *__p[2];
  int64_t v49;

  v10 = strlen(__s);
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = v10;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v10;
  p_dst = &__dst;
  if (v10)
LABEL_8:
    memcpy(p_dst, __s, v11);
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  v15 = std::string::append(&__dst, ".", 1uLL);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v47.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v47, "OBDManager", 0xAuLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v49 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v49 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", (const char *)v19);
  if (SHIBYTE(v49) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_43;
    }
  }
  else if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v47.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_15:
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    v21 = *a3;
    *(_QWORD *)(a1 + 24) = *a3;
    if (!v21)
      goto LABEL_17;
    goto LABEL_16;
  }
LABEL_43:
  operator delete(__dst.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v21 = *a3;
  *(_QWORD *)(a1 + 24) = *a3;
  if (v21)
LABEL_16:
    dispatch_retain(v21);
LABEL_17:
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = *a5;
  *(_WORD *)(a1 + 32) = 257;
  v22 = a5[1];
  *(_QWORD *)(a1 + 72) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = *a4;
  *(_QWORD *)(a1 + 104) = *a4;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  v26 = a4[1];
  *(_QWORD *)(a1 + 112) = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
    v25 = *(_QWORD *)(a1 + 104);
  }
  if (!v25)
  {
    v21 = AudioManager::create((AudioManager *)__s, (AudioManager **)__p);
    v38 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v39 = *(std::__shared_weak_count **)(a1 + 112);
    *(_OWORD *)(a1 + 104) = v38;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v43 = (unint64_t *)((char *)__p[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  if (!*(_QWORD *)(a1 + 64))
  {
    v29 = *(NSObject **)(a1 + 24);
    object = v29;
    if (v29)
      dispatch_retain(v29);
    CMOnBodyDelegate::create(&object, v20, __p);
    v30 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v31 = *(std::__shared_weak_count **)(a1 + 72);
    *(_OWORD *)(a1 + 64) = v30;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v35 = (unint64_t *)((char *)__p[1] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v21 = object;
    if (object)
      dispatch_release(object);
  }
  *(_DWORD *)(a1 + 120) = capabilities::txpower::supportedControlInput((capabilities::txpower *)v21);
  return a1;
}

void sub_1BF581E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;

  if (object)
  {
    dispatch_release(object);
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
    v14 = v9[12];
    if (!v14)
    {
LABEL_3:
      v15 = v9[10];
      if (!v15)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else
  {
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
    v14 = v9[12];
    if (!v14)
      goto LABEL_3;
  }
  dispatch_release(v14);
  v15 = v9[10];
  if (!v15)
  {
LABEL_4:
    std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::~vector[abi:ne180100](v10);
    v16 = v9[3];
    if (!v16)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  dispatch_release(v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::~vector[abi:ne180100](v10);
  v16 = v9[3];
  if (!v16)
  {
LABEL_5:
    v17 = (std::__shared_weak_count *)v9[2];
    if (!v17)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_11:
  dispatch_release(v16);
  v17 = (std::__shared_weak_count *)v9[2];
  if (!v17)
  {
LABEL_7:
    MEMORY[0x1C3B8B74C](v9);
    _Unwind_Resume(a1);
  }
LABEL_6:
  std::__shared_weak_count::__release_weak(v17);
  goto LABEL_7;
}

void sub_1BF581EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(a23);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if (a15 < 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if (a15 < 0)
  {
LABEL_4:
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
LABEL_7:
  _Unwind_Resume(exception_object);
}

void **std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  NSObject *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          dispatch_release(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          _Block_release(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void OBDManager::~OBDManager(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t i;
  NSObject *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  NSObject *v29;
  const void *v30;
  NSObject *v31;
  std::__shared_weak_count *v32;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
  if (*((_QWORD *)this + 8))
  {
    v5 = *((_QWORD *)this + 10);
    if (v5)
    {
      dispatch_source_cancel(v5);
      v6 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (v6)
      {
        dispatch_release(v6);
        v7 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = 0;
        if (v7)
          dispatch_release(v7);
      }
    }
    CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
  v8 = *((_QWORD *)this + 5);
  for (i = *((_QWORD *)this + 6); i != v8; i -= 16)
  {
    v10 = *(NSObject **)(i - 8);
    if (v10)
      dispatch_release(v10);
    v11 = *(const void **)(i - 16);
    if (v11)
      _Block_release(v11);
  }
  *((_QWORD *)this + 6) = v8;
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = *((_QWORD *)this + 12);
  if (v21)
    dispatch_release(v21);
  v22 = *((_QWORD *)this + 10);
  if (v22)
    dispatch_release(v22);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (!v23)
    goto LABEL_41;
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    v26 = (char *)*((_QWORD *)this + 5);
    if (!v26)
      goto LABEL_51;
  }
  else
  {
LABEL_41:
    v26 = (char *)*((_QWORD *)this + 5);
    if (!v26)
      goto LABEL_51;
  }
  v27 = (char *)*((_QWORD *)this + 6);
  v28 = v26;
  if (v27 != v26)
  {
    do
    {
      v29 = *((_QWORD *)v27 - 1);
      if (v29)
        dispatch_release(v29);
      v30 = (const void *)*((_QWORD *)v27 - 2);
      if (v30)
        _Block_release(v30);
      v27 -= 16;
    }
    while (v27 != v26);
    v28 = (char *)*((_QWORD *)this + 5);
  }
  *((_QWORD *)this + 6) = v26;
  operator delete(v28);
LABEL_51:
  v31 = *((_QWORD *)this + 3);
  if (v31)
    dispatch_release(v31);
  v32 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  JUMPOUT(0x1C3B8B74CLL);
}

void OBDManager::stopOBDTimer(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
}

void OBDManager::stopCoreMotionCallbackWatchdog(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
}

void ___ZN10OBDManager4initEv_block_invoke(_QWORD *a1, unsigned int a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10)
      {
        v13 = *(NSObject **)v7;
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2)
            v14 = "Unknown";
          else
            v14 = off_1E7911C80[a2];
          v15 = "Confidence Level Unknown";
          if (a3 == 1)
            v15 = "Confidence Level High";
          if (!a3)
            v15 = "Confidence Level Low";
          v17 = 136315394;
          v18 = v14;
          v19 = 2080;
          v20 = v15;
          _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I On Body Callback: OnBody: %s, confidence: %s", (uint8_t *)&v17, 0x16u);
        }
        *(_DWORD *)(v7 + 88) = a2;
        if (*(_QWORD *)(v7 + 96))
        {
          OBDManager::startCoreMotionCallbackWatchdog((OBDManager *)v7);
        }
        else
        {
          v16 = *(NSObject **)v7;
          if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v17) = 0;
            _os_log_error_impl(&dword_1BF566000, v16, OS_LOG_TYPE_ERROR, "OBD has not started yet!", (uint8_t *)&v17, 2u);
          }
        }
      }
    }
  }
}

void OBDManager::startCoreMotionCallbackWatchdog(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  dispatch_time_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  NSObject *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD handler[6];
  std::__shared_weak_count *v16;

  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
  v5 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 3));
  v6 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = v5;
  if (v6)
  {
    dispatch_release(v6);
    v5 = *((_QWORD *)this + 10);
  }
  v7 = dispatch_time(0, 5120000000);
  dispatch_source_set_timer(v5, v7, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v8 = *((_QWORD *)this + 1);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *((_QWORD *)this + 10);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3321888768;
  handler[2] = ___ZN10OBDManager31startCoreMotionCallbackWatchdogEv_block_invoke;
  handler[3] = &__block_descriptor_56_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e5_v8__0l;
  handler[4] = this;
  handler[5] = v8;
  v16 = v9;
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  dispatch_source_set_event_handler(v12, handler);
  dispatch_activate(*((dispatch_object_t *)this + 10));
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

uint64_t dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t OBDManager::getOBDState(OBDManager *this)
{
  return *((unsigned __int8 *)this + 32);
}

_QWORD *OBDManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[6];
  if ((unint64_t)v4 >= a1[7])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)> const&>(a1 + 5, (uint64_t)a2);
    a1[6] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[6] = v4 + 2;
  }
  return result;
}

void OBDManager::start(OBDManager *this, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 12))
  {
    v4 = *(NSObject **)this;
    if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I WARNING - OBD Manager has started already!", (uint8_t *)&v6, 2u);
    }
  }
  if (*((_QWORD *)this + 8))
  {
    OBDManager::startCoreMotionCallbackWatchdog(this);
    CMOnBodyDelegate::startMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
  OBDManager::startOBDTimer((uint64_t)this, a2);
  v5 = *(NSObject **)this;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = a2;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Core Motion OnBody Detection is starting with %lld msec", (uint8_t *)&v6, 0xCu);
  }
}

void OBDManager::startOBDTimer(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  dispatch_time_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v17[6];
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *(NSObject **)(a1 + 96);
  if (v4)
  {
    dispatch_source_cancel(v4);
    v5 = *(NSObject **)(a1 + 96);
    *(_QWORD *)(a1 + 96) = 0;
    if (v5)
    {
      dispatch_release(v5);
      v6 = *(NSObject **)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;
      if (v6)
        dispatch_release(v6);
    }
  }
  v7 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 24));
  v8 = *(NSObject **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v7;
  if (v8)
  {
    dispatch_release(v8);
    v7 = *(NSObject **)(a1 + 96);
  }
  v9 = dispatch_time(0, 1000000 * a2);
  dispatch_source_set_timer(v7, v9, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }
  v14 = *(NSObject **)(a1 + 96);
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3321888768;
  v17[2] = ___ZN10OBDManager13startOBDTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke;
  v17[3] = &__block_descriptor_64_e8_40c35_ZTSNSt3__18weak_ptrI10OBDManagerEE_e5_v8__0l;
  v17[4] = a1;
  v17[5] = v10;
  v18 = v11;
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v19 = a2;
  dispatch_source_set_event_handler(v14, v17);
  dispatch_activate(*(dispatch_object_t *)(a1 + 96));
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void OBDManager::stop(OBDManager *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;

  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (v3)
    {
      dispatch_release(v3);
      v4 = *((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = 0;
      if (v4)
        dispatch_release(v4);
    }
  }
  if (*((_QWORD *)this + 8))
  {
    v5 = *((_QWORD *)this + 10);
    if (v5)
    {
      dispatch_source_cancel(v5);
      v6 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      if (v6)
      {
        dispatch_release(v6);
        v7 = *((_QWORD *)this + 10);
        *((_QWORD *)this + 10) = 0;
        if (v7)
          dispatch_release(v7);
      }
    }
    CMOnBodyDelegate::stopMotionDetection(*((CMOnBodyDelegate **)this + 8));
  }
}

void ___ZN10OBDManager31startCoreMotionCallbackWatchdogEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  os_log_t *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (os_log_t *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      v6 = a1[5];
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v5);
      }
      if (v6)
      {
        v9 = *v3;
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
        {
          v10 = 134217984;
          v11 = 5120;
          _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I WARNING - Motion did not report the callback in %llu milli-seconds", (uint8_t *)&v10, 0xCu);
        }
      }
    }
  }
}

void ___ZN10OBDManager13startOBDTimerENSt3__16chrono8durationIxNS0_5ratioILl1ELl1000EEEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  config::hw *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  char v13;
  char v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  NSObject *v19;
  dispatch_time_t v20;
  _QWORD *v21;
  uint64_t block;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  void *aBlock;
  char v27;
  char v28;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = (config::hw *)std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = (std::__shared_weak_count *)v4;
      v6 = a1[5];
      v7 = (unint64_t *)((char *)v4 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (v8)
      {
        if (!v6)
          return;
      }
      else
      {
        (*(void (**)(config::hw *))(*(_QWORD *)v4 + 16))(v4);
        std::__shared_weak_count::__release_weak(v5);
        if (!v6)
          return;
      }
      v21 = a1;
      if (config::hw::iPad(v4))
      {
        OBDManager::updateOBDState_iPad((OBDManager *)v3);
        v9 = *(_QWORD *)(v3 + 40);
        v10 = *(_QWORD *)(v3 + 48);
        if (v9 != v10)
          goto LABEL_15;
        goto LABEL_33;
      }
      OBDManager::updateOBDState_iPhone((OBDManager *)v3);
      v9 = *(_QWORD *)(v3 + 40);
      v10 = *(_QWORD *)(v3 + 48);
      if (v9 == v10)
      {
LABEL_33:
        v19 = *(NSObject **)(v3 + 96);
        v20 = dispatch_time(0, 1000000 * v21[7]);
        dispatch_source_set_timer(v19, v20, 0xFFFFFFFFFFFFFFFFLL, 0xBEBC200uLL);
        return;
      }
LABEL_15:
      while (*(_QWORD *)v9)
      {
        v11 = _Block_copy(*(const void **)v9);
        v12 = *(NSObject **)(v9 + 8);
        if (v12)
          goto LABEL_17;
LABEL_18:
        v13 = *(_BYTE *)(v3 + 32);
        v14 = *(_BYTE *)(v3 + 33);
        if (v11)
        {
          v15 = _Block_copy(v11);
          v16 = v15;
          block = MEMORY[0x1E0C809B0];
          v23 = 3321888768;
          v24 = ___ZNK8dispatch8callbackIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke;
          v25 = &__block_descriptor_42_e8_32c82_ZTSN8dispatch5blockIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEE_e5_v8__0l;
          if (v15)
          {
            v17 = _Block_copy(v15);
            v18 = 0;
          }
          else
          {
            v17 = 0;
            v18 = 1;
          }
        }
        else
        {
          v16 = 0;
          v17 = 0;
          block = MEMORY[0x1E0C809B0];
          v23 = 3321888768;
          v18 = 1;
          v24 = ___ZNK8dispatch8callbackIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke;
          v25 = &__block_descriptor_42_e8_32c82_ZTSN8dispatch5blockIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEE_e5_v8__0l;
        }
        aBlock = v17;
        v27 = v13;
        v28 = v14;
        dispatch_async(v12, &block);
        if (aBlock)
          _Block_release(aBlock);
        if ((v18 & 1) == 0)
          _Block_release(v16);
        if (v12)
          dispatch_release(v12);
        if (v11)
          _Block_release(v11);
        v9 += 16;
        if (v9 == v10)
          goto LABEL_33;
      }
      v11 = 0;
      v12 = *(NSObject **)(v9 + 8);
      if (!v12)
        goto LABEL_18;
LABEL_17:
      dispatch_retain(v12);
      goto LABEL_18;
    }
  }
}

void OBDManager::updateOBDState(OBDManager *this)
{
  if (config::hw::iPad(this))
    OBDManager::updateOBDState_iPad(this);
  else
    OBDManager::updateOBDState_iPhone(this);
}

const char *OBDManager::toString(int a1)
{
  const char *v1;

  v1 = "Unknown";
  if (a1 == 1)
    v1 = "Body";
  if (a1)
    return v1;
  else
    return "Head";
}

{
  const char *v1;

  v1 = "Unknown";
  if (a1 == 1)
    v1 = "Non-Freespace";
  if (a1)
    return v1;
  else
    return "Freespace";
}

void OBDManager::setMotionParameter(uint64_t a1, ctu **a2)
{
  const void *v3;
  CFTypeID v4;
  const void *v5;
  CFTypeRef cf;

  if (*(_QWORD *)(a1 + 64))
  {
    ctu::xpc_to_cf(*a2, a2);
    v3 = cf;
    if (cf && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
    {
      CFRetain(cf);
      v5 = cf;
    }
    else
    {
      v3 = 0;
      v5 = cf;
      if (!cf)
        goto LABEL_7;
    }
    CFRelease(v5);
LABEL_7:
    CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(a1 + 64), v3);
    if (v3)
      CFRelease(v3);
  }
}

void sub_1BF582E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF582E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

const void **ctu::cf::CFSharedRef<void const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void OBDManager::updateOBDState_iPad(OBDManager *this)
{
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *((_WORD *)this + 16) = 257;
  if (capabilities::txpower::operator&() && !*((_DWORD *)this + 22))
  {
    *((_WORD *)this + 16) = 0;
    v2 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
      return;
  }
  else
  {
    v2 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
      return;
  }
  v3 = *((int *)this + 22);
  if (v3 > 2)
    v4 = "Unknown";
  else
    v4 = off_1E7911C80[v3];
  v5 = "Unknown";
  v6 = "Body";
  if (*((_BYTE *)this + 32) != 1)
    v6 = "Unknown";
  if (*((_BYTE *)this + 32))
    v7 = v6;
  else
    v7 = "Head";
  if (*((_BYTE *)this + 33) == 1)
    v5 = "Non-Freespace";
  if (*((_BYTE *)this + 33))
    v8 = v5;
  else
    v8 = "Freespace";
  v9 = capabilities::txpower::operator&();
  v10 = "YES";
  v11 = 136315906;
  v12 = v4;
  v13 = 2080;
  if (!v9)
    v10 = "NO";
  v14 = v7;
  v15 = 2080;
  v16 = v8;
  v17 = 2080;
  v18 = v10;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Motion Status: %s. Notifying OBD State: %s, Tuner State: %s, Motion Status as an input: %s", (uint8_t *)&v11, 0x2Au);
}

void OBDManager::updateOBDState_iPhone(OBDManager *this)
{
  OBDManager *v1;
  int v2;
  int v3;
  int v4;
  NSObject *v5;
  _BYTE *v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  int v15;
  const char *v16;
  int v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;

  v1 = this;
  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(*((_QWORD *)this + 13) + 56);
  *((_BYTE *)this + 32) = 1;
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = 0;
      *((_WORD *)this + 16) = 256;
      v4 = 1;
      v5 = *(NSObject **)this;
      if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEFAULT))
        return;
      goto LABEL_15;
    }
    this = (OBDManager *)capabilities::txpower::operator&();
    if ((_DWORD)this)
    {
      if (!*((_DWORD *)v1 + 22))
        goto LABEL_13;
    }
  }
  if (capabilities::txpower::supportsMotionAlways(this)
    && capabilities::txpower::operator&()
    && !*((_DWORD *)v1 + 22))
  {
LABEL_13:
    *((_BYTE *)v1 + 32) = 0;
    v6 = (char *)v1 + 33;
LABEL_14:
    v4 = 0;
    *v6 = 0;
    v3 = 1;
    v5 = *(NSObject **)v1;
    if (!os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT))
      return;
    goto LABEL_15;
  }
  v4 = 1;
  *((_BYTE *)v1 + 33) = 1;
  v6 = (char *)v1 + 33;
  if (!*((_DWORD *)v1 + 22))
    goto LABEL_14;
  v3 = 0;
  v5 = *(NSObject **)v1;
  if (!os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEFAULT))
    return;
LABEL_15:
  v7 = *(char *)(*((_QWORD *)v1 + 13) + 56);
  if (v7 > 3)
  {
    v8 = "Unknown Audio Output";
    v9 = *((int *)v1 + 22);
    if (v9 > 2)
      goto LABEL_17;
LABEL_19:
    v10 = off_1E7911C80[v9];
    goto LABEL_20;
  }
  v8 = off_1E7911C60[v7];
  v9 = *((int *)v1 + 22);
  if (v9 <= 2)
    goto LABEL_19;
LABEL_17:
  v10 = "Unknown";
LABEL_20:
  v11 = "Unknown";
  v12 = "Body";
  if (*((_BYTE *)v1 + 32) != 1)
    v12 = "Unknown";
  if (*((_BYTE *)v1 + 32))
    v13 = v12;
  else
    v13 = "Head";
  if (v4)
    v11 = "Non-Freespace";
  if (v3)
    v14 = "Freespace";
  else
    v14 = v11;
  v15 = capabilities::txpower::operator&();
  v17 = 136316162;
  v16 = "YES";
  v18 = v8;
  v19 = 2080;
  if (!v15)
    v16 = "NO";
  v20 = v10;
  v21 = 2080;
  v22 = v13;
  v23 = 2080;
  v24 = v14;
  v25 = 2080;
  v26 = v16;
  _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Audio Output: %s, Motion Status: %s. Notifying OBD State: %s, Tuner State: %s, Motion Status as an input: %s", (uint8_t *)&v17, 0x34u);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

OBDManager **std::unique_ptr<OBDManager>::~unique_ptr[abi:ne180100](OBDManager **a1)
{
  OBDManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    OBDManager::~OBDManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

OBDManager *std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::__on_zero_shared(uint64_t a1)
{
  OBDManager *result;

  result = *(OBDManager **)(a1 + 24);
  if (result)
    OBDManager::~OBDManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<OBDManager *,std::shared_ptr<OBDManager>::__shared_ptr_default_delete<OBDManager,OBDManager>,std::allocator<OBDManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73A873)
    return a1 + 24;
  if (((v3 & 0x80000001BF73A873 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73A873))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73A873 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEclIJS2_S3_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void *__copy_helper_block_e8_32c82_ZTSN8dispatch5blockIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c82_ZTSN8dispatch5blockIU13block_pointerFvN10OBDManager8OBDStateENS1_10TunerStateEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t data::TransportService::ThrottlingConfig::asString@<X0>(data::TransportService::ThrottlingConfig *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  const char *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *__p[2];
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v31 = v4;
  v39 = v4;
  v38 = v4;
  v37 = v4;
  v36 = v4;
  v35 = v4;
  v34 = v4;
  v33 = v4;
  v32 = v4;
  *(_OWORD *)__p = v4;
  v28 = v4;
  v25 = v4;
  v26 = v4;
  v23 = v4;
  v24 = v4;
  v5 = MEMORY[0x1E0DE4FE0];
  v6 = MEMORY[0x1E0DE4FE0] + 64;
  v30 = MEMORY[0x1E0DE4FE0] + 64;
  v7 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v22 + *(_QWORD *)(v22 - 24));
  std::ios_base::init(v9, &v23);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v22 = v5 + 24;
  v30 = v6;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v23 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v28 = 0u;
  LODWORD(v29) = 16;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"enabled ", 8);
  v12 = "???";
  if (!*(_DWORD *)this)
    v12 = "Disabled";
  if (*(_DWORD *)this == 1)
    v13 = "Enabled";
  else
    v13 = v12;
  v14 = strlen(v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v13, v14);
  if (*(_DWORD *)this == 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)", timeout ", 10);
    std::ostream::operator<<();
  }
  if ((v29 & 0x10) != 0)
  {
    v16 = *((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1) < (unint64_t)v26)
    {
      *((_QWORD *)&v28 + 1) = v26;
      v16 = v26;
    }
    v17 = (const void *)*((_QWORD *)&v25 + 1);
    v15 = v16 - *((_QWORD *)&v25 + 1);
    if ((unint64_t)(v16 - *((_QWORD *)&v25 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v29 & 8) == 0)
    {
      v15 = 0;
      a2[23] = 0;
      goto LABEL_21;
    }
    v17 = (const void *)v24;
    v15 = v25 - v24;
    if ((_QWORD)v25 - (_QWORD)v24 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_25:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    *((_QWORD *)a2 + 1) = v15;
    *((_QWORD *)a2 + 2) = v19 | 0x8000000000000000;
    *(_QWORD *)a2 = v20;
    a2 = v20;
    goto LABEL_20;
  }
  a2[23] = v15;
  if (v15)
LABEL_20:
    memmove(a2, v17, v15);
LABEL_21:
  a2[v15] = 0;
  v22 = *v7;
  *(uint64_t *)((char *)&v22 + *(_QWORD *)(v22 - 24)) = v7[3];
  *(_QWORD *)&v23 = v10 + 16;
  if (SBYTE7(v28) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8C364](&v30);
}

void sub_1BF5838D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](a1 + 112);
  return a1;
}

_QWORD *data::TransportService::TransportService(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  return this;
}

uint64_t data::TransportService::TransportService(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  data::TransportService::State::create((capabilities::abs *)&v10, a1);
  v6 = v11;
  if (!v11)
    return a1;
  v7 = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = (std::__shared_weak_count *)a2[1];
  v10 = *a2;
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  data::TransportService::State::create((capabilities::abs *)&v10, a1);
  v6 = v11;
  if (!v11)
    return a1;
  v7 = (unint64_t *)&v11->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_1BF583A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void data::TransportService::State::create(capabilities::abs *a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (capabilities::abs::supportsDataTransportService(a1))
  {
    v4 = operator new(0xA8uLL);
    v5 = (uint64_t)v4;
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v13 = *(_QWORD *)a1;
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    data::TransportService::State::State((uint64_t)v4, &v13);
    *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<data::TransportService::State>::shared_ptr[abi:ne180100]<data::TransportService::State,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1},void>(&v15, v5);
    ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(v15);
    v9 = v15;
    v15 = 0uLL;
    *(_OWORD *)a2 = v9;
    v10 = v14;
    if (v14)
    {
      v11 = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    data::TransportService::State::init(*(data::TransportService::State **)a2);
  }
}

void sub_1BF583B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void sub_1BF583B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v10;
  void *v11;

  v11 = v10;
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void sub_1BF583B94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF583BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_1BF583CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void data::TransportService::enterLowPower(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_20;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

void data::TransportService::exitLowPower(data::TransportService *this)
{
  uint64_t v1;
  _QWORD v2[5];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke;
    v2[3] = &__block_descriptor_tmp_22;
    v2[4] = v1;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v1 + 72), (uint64_t)v2);
  }
}

void data::TransportService::setConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  v2 = *a1;
  if (*a1)
  {
    v3 = *a2;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 0x40000000;
    v4[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    v4[3] = &__block_descriptor_tmp_25;
    v4[4] = v2;
    v4[5] = v3;
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped((uint64_t *)(v2 + 72), (uint64_t)v4);
  }
}

void data::TransportService::dumpState(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZNK4data16TransportService5State9dumpStateEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_26;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

void data::TransportService::unblockThrottling(data::TransportService *this)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 0x40000000;
    v3[2] = ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke;
    v3[3] = &__block_descriptor_tmp_27;
    v3[4] = v1;
    v4 = v3;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS9__block_invoke;
    block[3] = &__block_descriptor_tmp_21;
    block[4] = v1 + 72;
    block[5] = &v4;
    v2 = *(NSObject **)(v1 + 88);
    if (*(_QWORD *)(v1 + 96))
      dispatch_async_and_wait(v2, block);
    else
      dispatch_sync(v2, block);
  }
}

uint64_t ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void data::TransportService::State::init(data::TransportService::State *this)
{
  NSObject *v2;
  uint64_t v3;
  sys::UIObserver *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  void (*v31)(uint8_t *, uint8_t *, uint64_t);
  void (*v32)(uint64_t, _WORD *, unsigned int);
  unint64_t *p_shared_weak_owners;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t **v43;
  __int128 v44;
  pthread_mutex_t *v45;
  unsigned int *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t *v49;
  int v50;
  uint64_t *v51;
  uint64_t **v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t *v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t *v71;
  uint64_t i;
  uint64_t v73;
  unsigned int v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  int *v78;
  int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  _QWORD *v84;
  uint64_t *v85;
  unsigned int *v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  BOOL v101;
  uint64_t *v102;
  int v103;
  uint64_t *v104;
  _QWORD *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  const void *v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  char *v120;
  char *v121;
  unsigned int *v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  void (*v129)(__int128 *, __int128 *, uint64_t);
  char *v130;
  _QWORD *v131;
  void *v132;
  char *v133;
  int v134;
  int v135;
  unsigned int *v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  unint64_t *v144;
  unint64_t v145;
  _OWORD *v146;
  uint64_t v147;
  ApplePDPHelperInterface *v148;
  ApplePDPHelperInterface *Instance;
  int v150;
  NSObject *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  void *v158;
  data::TransportService::State *v159;
  const void *v160;
  uint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  __int128 v164;
  std::__shared_weak_count *v165;
  _QWORD aBlock[7];
  dispatch_object_t v167;
  void *v168;
  void *v169[2];
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  dispatch_object_t v173;
  void *v174;
  uint64_t *v175;
  NSObject *v176;
  void *v177;
  dispatch_object_t object;
  void *v179;
  uint8_t buf[16];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  void *__p;
  uint64_t v192;
  pthread_mutex_t *v193;
  uint64_t v194;

  v194 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Inited", buf, 2u);
  }
  pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  v3 = xmmword_1ED70F5F8;
  if (!(_QWORD)xmmword_1ED70F5F8)
  {
    memset(buf, 170, sizeof(buf));
    v4 = (sys::UIObserver *)operator new(0x40uLL);
    sys::UIObserver::UIObserver(v4);
    std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v4);
    v5 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    v6 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F5F8 + 1);
    xmmword_1ED70F5F8 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v3 = xmmword_1ED70F5F8;
  }
  v165 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F5F8 + 1);
  if (*((_QWORD *)&xmmword_1ED70F5F8 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&xmmword_1ED70F5F8 + 1) + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
  aBlock[3] = &__block_descriptor_tmp;
  aBlock[4] = (char *)this + 72;
  aBlock[5] = data::TransportService::State::handleUILockStateChange_sync;
  aBlock[6] = 0;
  v14 = _Block_copy(aBlock);
  v161 = v3;
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v15 || (v16 = *((_QWORD *)this + 9), (v17 = std::__shared_weak_count::lock(v15)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v18 = v17;
  v19 = *((_QWORD *)this + 11);
  v167 = v19;
  v160 = v14;
  if (v14)
    v20 = _Block_copy(v14);
  else
    v20 = 0;
  v168 = v20;
  dispatch_retain(v19);
  *(_OWORD *)v169 = 0u;
  v170 = 0u;
  v173 = v19;
  if (v20)
    v20 = _Block_copy(v20);
  v174 = v20;
  dispatch_retain(v19);
  object = v19;
  v162 = v16;
  v163 = v18;
  v159 = this;
  if (!v20)
  {
    v179 = 0;
    dispatch_retain(v19);
    goto LABEL_34;
  }
  v21 = _Block_copy(v20);
  v179 = v21;
  dispatch_retain(v19);
  if (!v21)
  {
LABEL_34:
    dispatch_retain(v19);
    v175 = 0;
    goto LABEL_35;
  }
  v22 = _Block_copy(v21);
  dispatch_retain(v19);
  v175 = 0;
  if (!v22)
  {
LABEL_35:
    dispatch_retain(v19);
    v158 = 0;
    v27 = 1;
LABEL_36:
    dispatch_retain(v19);
    v23 = 0;
    v28 = 1;
LABEL_37:
    dispatch_retain(v19);
    v24 = 0;
    v29 = 1;
LABEL_38:
    dispatch_retain(v19);
    v25 = 0;
    v176 = v19;
    v30 = 1;
    goto LABEL_39;
  }
  v23 = _Block_copy(v22);
  dispatch_retain(v19);
  v158 = v22;
  if (!v23)
  {
    v27 = 0;
    goto LABEL_36;
  }
  v24 = _Block_copy(v23);
  dispatch_retain(v19);
  if (!v24)
  {
    v27 = 0;
    v28 = 0;
    goto LABEL_37;
  }
  v25 = _Block_copy(v24);
  dispatch_retain(v19);
  if (!v25)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_38;
  }
  v26 = _Block_copy(v25);
  dispatch_retain(v19);
  v176 = v19;
  if (v26)
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v177 = _Block_copy(v26);
    dispatch_retain(v19);
    dispatch_release(v19);
    _Block_release(v26);
    goto LABEL_40;
  }
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
LABEL_39:
  v177 = 0;
  dispatch_retain(v19);
  dispatch_release(v19);
LABEL_40:
  dispatch_release(v19);
  if ((v30 & 1) == 0)
    _Block_release(v25);
  dispatch_release(v19);
  if ((v29 & 1) == 0)
    _Block_release(v24);
  v175 = (uint64_t *)boost::function1<void,BOOL>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>)::stored_vtable;
  dispatch_release(v19);
  if ((v28 & 1) == 0)
    _Block_release(v23);
  dispatch_release(v19);
  if ((v27 & 1) == 0)
    _Block_release(v158);
  *(_QWORD *)&v181 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v181 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0xAAAAAAAAAAAAAAAALL;
  boost::function1<void,BOOL>::move_assign((uint64_t)buf, (uint64_t *)&v175);
  boost::function1<void,BOOL>::move_assign((uint64_t)&v175, (uint64_t *)&v170 + 1);
  boost::function1<void,BOOL>::move_assign((uint64_t)&v170 + 8, (uint64_t *)buf);
  if (*(_QWORD *)buf)
  {
    if ((buf[0] & 1) == 0)
    {
      v31 = *(void (**)(uint8_t *, uint8_t *, uint64_t))(*(_QWORD *)buf & 0xFFFFFFFFFFFFFFFELL);
      if (v31)
        v31(&buf[8], &buf[8], 2);
    }
  }
  if (v175)
  {
    if ((v175 & 1) == 0)
    {
      v32 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v175 & 0xFFFFFFFFFFFFFFFELL);
      if (v32)
        v32((uint64_t)&v176, &v176, 2u);
    }
    v175 = 0;
  }
  dispatch_release(object);
  if (v179)
    _Block_release(v179);
  dispatch_release(v173);
  if (v174)
    _Block_release(v174);
  p_shared_weak_owners = (unint64_t *)&v163->__shared_weak_owners_;
  do
    v34 = __ldxr(p_shared_weak_owners);
  while (__stxr(v34 + 1, p_shared_weak_owners));
  v35 = operator new(0x18uLL);
  *v35 = &off_1E7912070;
  v35[1] = v162;
  v35[2] = v163;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v37 = operator new(0x18uLL);
  v38 = v37;
  *v37 = &off_1E7912070;
  v37[1] = v162;
  v37[2] = v163;
  do
    v39 = __ldxr(p_shared_weak_owners);
  while (__stxr(v39 + 1, p_shared_weak_owners));
  *(_QWORD *)&buf[8] = v37;
  *(_DWORD *)buf = 2;
  v40 = v169[1];
  if (v169[1] < (void *)v170)
  {
    v41 = operator new(0x18uLL);
    *v41 = &off_1E7912070;
    v41[1] = v162;
    v41[2] = v163;
    do
      v42 = __ldxr(p_shared_weak_owners);
    while (__stxr(v42 + 1, p_shared_weak_owners));
    v40[1] = v41;
    *(_DWORD *)v40 = 2;
    v169[1] = v40 + 3;
LABEL_71:
    (*(void (**)(_QWORD *))(*v38 + 8))(v38);
    goto LABEL_72;
  }
  v78 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v169, (uint64_t)buf);
  v79 = *(_DWORD *)buf ^ (*(int *)buf >> 31);
  v169[1] = v78;
  if (v79 == 2)
  {
    v38 = *(_QWORD **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_72;
    goto LABEL_71;
  }
  if (v79 == 1)
  {
    v80 = v181;
    if ((_QWORD)v181)
    {
      v81 = (unsigned int *)(v181 + 12);
      do
      {
        v82 = __ldaxr(v81);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, v81));
      if (!v83)
LABEL_119:
        (*(void (**)(uint64_t))(*(_QWORD *)v80 + 24))(v80);
    }
  }
  else
  {
    v80 = v181;
    if ((_QWORD)v181)
    {
      v155 = (unsigned int *)(v181 + 12);
      do
      {
        v156 = __ldaxr(v155);
        v157 = v156 - 1;
      }
      while (__stlxr(v157, v155));
      if (!v157)
        goto LABEL_119;
    }
  }
LABEL_72:
  (*(void (**)(_QWORD *))(*v35 + 8))(v35);
  std::__shared_weak_count::__release_weak(v163);
  v43 = *(uint64_t ***)(v161 + 40);
  *(_QWORD *)&v44 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v44 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v188 = v44;
  v189 = v44;
  v186 = v44;
  v187 = v44;
  v184 = v44;
  v185 = v44;
  v182 = v44;
  v183 = v44;
  *(_OWORD *)buf = v44;
  v181 = v44;
  v45 = (pthread_mutex_t *)v43[3];
  v190 = 10;
  __p = buf;
  v192 = 0;
  v193 = v45;
  pthread_mutex_lock(v45);
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v179 = (void *)0xAAAAAAAAAAAAAAAALL;
  v46 = (unsigned int *)v43[1];
  if (v46 && (v47 = atomic_load(v46 + 2), v47 == 1))
  {
    v48 = **v43;
    v49 = v43[2];
    v50 = 2;
    if (v49 != (uint64_t *)v48)
    {
      v175 = v43[2];
      if ((uint64_t *)**v43 == v49)
        goto LABEL_110;
      goto LABEL_90;
    }
  }
  else
  {
    v51 = (uint64_t *)operator new(0x20uLL);
    v52 = (uint64_t **)*v43;
    v53 = **v43;
    v54 = operator new(0x40uLL);
    boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list((uint64_t)v54, v53);
    boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(v51, (uint64_t)v54);
    v51[2] = (uint64_t)v52[2];
    v55 = (uint64_t)v52[3];
    v51[3] = v55;
    if (v55)
    {
      v56 = (unsigned int *)(v55 + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>((uint64_t *)&v175, (uint64_t)v51);
    v58 = v175;
    v59 = (unsigned int *)v43[1];
    v175 = *v43;
    *v43 = v58;
    v43[1] = (uint64_t *)v176;
    v176 = v59;
    if (v59)
    {
      v60 = v59 + 2;
      do
      {
        v61 = __ldaxr(v60);
        v62 = v61 - 1;
      }
      while (__stlxr(v62, v60));
      if (!v62)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 16))(v59);
        v63 = v59 + 3;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
          (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 24))(v59);
      }
    }
    v50 = 0;
    v48 = **v43;
  }
  v49 = *(uint64_t **)(v48 + 8);
  v175 = v49;
  if ((uint64_t *)**v43 == v49)
    goto LABEL_110;
LABEL_90:
  v66 = 0;
  v67 = v50 - 1;
  do
  {
    v70 = v49[2];
    v71 = *(uint64_t **)(v70 + 32);
    if (v71)
    {
      for (i = *v71; i != v71[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
            goto LABEL_107;
        }
        else
        {
          v73 = *(_QWORD *)(i + 16);
          if (!v73 || (v74 = atomic_load((unsigned int *)(v73 + 8))) == 0)
          {
LABEL_107:
            if (*(_BYTE *)(v70 + 24))
            {
              *(_BYTE *)(v70 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v70, buf);
            }
            break;
          }
        }
      }
    }
    v68 = v175[2];
    if (*(_BYTE *)(v68 + 24))
      v49 = (uint64_t *)v175[1];
    else
      v49 = (uint64_t *)boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase((uint64_t *)**v43, (int *)(v68 + 64), &v175);
    v175 = v49;
    ++v66;
  }
  while (v49 != (uint64_t *)**v43 && v67 >= v66);
LABEL_110:
  v43[2] = v49;
  v75 = (char *)operator new(0x50uLL);
  *((_QWORD *)v75 + 1) = 0;
  *((_QWORD *)v75 + 2) = 0;
  v75[24] = 1;
  *((_DWORD *)v75 + 7) = 1;
  *(_QWORD *)v75 = off_1E7911EA8;
  v76 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v76, (uint64_t *)v169);
  v76[3] = 0;
  v77 = *((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v76[3] = *((_QWORD *)&v170 + 1);
    if ((v77 & 1) != 0)
    {
      *((_OWORD *)v76 + 2) = v171;
      v76[6] = v172;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v77 & 0xFFFFFFFFFFFFFFFELL))(&v171, v76 + 4, 0);
    }
  }
  *((_QWORD *)v75 + 4) = v76;
  *((_QWORD *)v75 + 5) = 0;
  v84 = operator new(0x18uLL);
  v84[1] = 0x100000001;
  *v84 = off_1E7911F50;
  v84[2] = v76;
  *((_QWORD *)v75 + 5) = v84;
  *((_QWORD *)v75 + 6) = v43[3];
  v85 = v43[4];
  *((_QWORD *)v75 + 7) = v85;
  if (v85)
  {
    v86 = (unsigned int *)(v85 + 1);
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  *((_DWORD *)v75 + 16) = 0;
  v75[68] = 0;
  object = (dispatch_object_t)v75;
  v179 = 0;
  v88 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v88 + 1) = 0x100000001;
  v89 = v88 + 2;
  *(_QWORD *)v88 = off_1E7911FB0;
  *((_QWORD *)v88 + 2) = v75;
  v179 = v88;
  v90 = **v43;
  v91 = operator new(0x20uLL);
  v92 = v91;
  v93 = (_QWORD *)(v90 + 32);
  v91[2] = v75;
  v91[3] = v88;
  do
    v94 = __ldxr(v89);
  while (__stxr(v94 + 1, v89));
  v95 = *(_QWORD *)v90;
  *(_QWORD *)(v95 + 8) = v91;
  *v91 = v95;
  *(_QWORD *)v90 = v91;
  v91[1] = v90;
  ++*(_QWORD *)(v90 + 16);
  v96 = *(uint64_t **)(v90 + 32);
  if (v96)
  {
    v97 = v90 + 32;
    v98 = *(_QWORD *)(v90 + 32);
    do
    {
      v99 = *(_DWORD *)(v98 + 32);
      v100 = v99 == 2;
      v101 = v99 < 2;
      if (v99 >= 2)
        v102 = (uint64_t *)v98;
      else
        v102 = (uint64_t *)(v98 + 8);
      if (!v101)
        v97 = v98;
      if (v100)
      {
        v102 = (uint64_t *)v98;
        v97 = v98;
      }
      v98 = *v102;
    }
    while (*v102);
    if ((_QWORD *)v97 == v93 || *(_DWORD *)(v97 + 32) != 2)
    {
      v103 = *((_DWORD *)v96 + 8);
      while (v103 != 2)
      {
        if (v103 < 3)
        {
          v104 = (uint64_t *)v96[1];
          if (!v104)
          {
            v93 = v96 + 1;
            goto LABEL_147;
          }
        }
        else
        {
          v104 = (uint64_t *)*v96;
          v93 = v96;
          if (!*v96)
            goto LABEL_147;
        }
        v103 = *((_DWORD *)v104 + 8);
        v96 = v104;
      }
    }
    *((_DWORD *)v75 + 16) = 2;
    *(_QWORD *)(v75 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_150:
    v107 = v88 + 3;
    do
      v108 = __ldxr(v107);
    while (__stxr(v108 + 1, v107));
    *(_QWORD *)&v164 = v75;
    *((_QWORD *)&v164 + 1) = v88;
    do
      v109 = __ldxr(v107);
    while (__stxr(v109 + 1, v107));
    do
    {
      v110 = __ldaxr(v107);
      v111 = v110 - 1;
    }
    while (__stlxr(v111, v107));
    if (!v111)
      (*(void (**)(unsigned int *))(*(_QWORD *)v88 + 24))(v88);
    v112 = (unsigned int *)v179;
    v113 = v160;
    if (!v179)
      goto LABEL_166;
    goto LABEL_158;
  }
  v96 = (uint64_t *)(v90 + 32);
LABEL_147:
  v105 = operator new(0x38uLL);
  v105[4] = 0xAAAAAA0000000002;
  *((_DWORD *)v105 + 10) = -1431655766;
  v105[6] = v92;
  *v105 = 0;
  v105[1] = 0;
  v105[2] = v96;
  *v93 = v105;
  v106 = **(_QWORD **)(v90 + 24);
  if (v106)
  {
    *(_QWORD *)(v90 + 24) = v106;
    v105 = (_QWORD *)*v93;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v90 + 32), v105);
  ++*(_QWORD *)(v90 + 40);
  v75 = (char *)object;
  v88 = (unsigned int *)v179;
  LODWORD(object[8].isa) = 2;
  *(_QWORD *)(v75 + 68) = 0xAAAAAAAAAAAAAA00;
  if (v88)
    goto LABEL_150;
  v164 = (unint64_t)v75;
  v112 = (unsigned int *)v179;
  v113 = v160;
  if (v179)
  {
LABEL_158:
    v114 = v112 + 2;
    do
    {
      v115 = __ldaxr(v114);
      v116 = v115 - 1;
    }
    while (__stlxr(v116, v114));
    if (!v116)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v112 + 16))(v112);
      v117 = v112 + 3;
      do
      {
        v118 = __ldaxr(v117);
        v119 = v118 - 1;
      }
      while (__stlxr(v119, v117));
      if (!v119)
        (*(void (**)(unsigned int *))(*(_QWORD *)v112 + 24))(v112);
    }
  }
LABEL_166:
  pthread_mutex_unlock(v193);
  v120 = (char *)__p;
  if (__p)
  {
    if (v192 - 1 >= 0)
    {
      v121 = (char *)__p + 16 * v192;
      do
      {
        v122 = (unsigned int *)*((_QWORD *)v121 - 1);
        if (v122)
        {
          v123 = v122 + 2;
          do
          {
            v124 = __ldaxr(v123);
            v125 = v124 - 1;
          }
          while (__stlxr(v125, v123));
          if (!v125)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 16))(v122);
            v126 = v122 + 3;
            do
            {
              v127 = __ldaxr(v126);
              v128 = v127 - 1;
            }
            while (__stlxr(v128, v126));
            if (!v128)
              (*(void (**)(unsigned int *))(*(_QWORD *)v122 + 24))(v122);
          }
        }
        v121 -= 16;
      }
      while (v121 > v120);
    }
    if (v190 >= 0xB)
      operator delete(__p);
  }
  if (*((_QWORD *)&v170 + 1))
  {
    if ((BYTE8(v170) & 1) == 0)
    {
      v129 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v170 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v129)
        v129(&v171, &v171, 2);
    }
    *((_QWORD *)&v170 + 1) = 0;
  }
  v130 = (char *)v169[0];
  if (!v169[0])
    goto LABEL_205;
  v131 = v169[1];
  v132 = v169[0];
  if (v169[1] == v169[0])
    goto LABEL_204;
  v133 = (char *)v169[1];
  do
  {
    v134 = *((_DWORD *)v133 - 6);
    v133 -= 24;
    v135 = v134 ^ (v134 >> 31);
    if (v135 == 2)
    {
      v140 = *(v131 - 2);
      if (v140)
        (*(void (**)(uint64_t))(*(_QWORD *)v140 + 8))(v140);
    }
    else if (v135 == 1)
    {
      v136 = (unsigned int *)*(v131 - 1);
      if (v136)
      {
        v137 = v136 + 3;
        do
        {
          v138 = __ldaxr(v137);
          v139 = v138 - 1;
        }
        while (__stlxr(v139, v137));
        if (!v139)
          goto LABEL_195;
      }
    }
    else
    {
      v136 = (unsigned int *)*(v131 - 1);
      if (v136)
      {
        v141 = v136 + 3;
        do
        {
          v142 = __ldaxr(v141);
          v143 = v142 - 1;
        }
        while (__stlxr(v143, v141));
        if (!v143)
LABEL_195:
          (*(void (**)(unsigned int *))(*(_QWORD *)v136 + 24))(v136);
      }
    }
    v131 = v133;
  }
  while (v133 != v130);
  v132 = v169[0];
LABEL_204:
  v169[1] = v130;
  operator delete(v132);
LABEL_205:
  dispatch_release(v167);
  if (v168)
    _Block_release(v168);
  v144 = (unint64_t *)&v163->__shared_owners_;
  do
    v145 = __ldaxr(v144);
  while (__stlxr(v145 - 1, v144));
  if (!v145)
  {
    ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
    std::__shared_weak_count::__release_weak(v163);
    if (!v113)
      goto LABEL_214;
    goto LABEL_213;
  }
  if (v113)
LABEL_213:
    _Block_release(v113);
LABEL_214:
  v146 = operator new(0x20uLL);
  v146[1] = v164;
  v147 = *((_QWORD *)v159 + 15);
  *(_QWORD *)v146 = v147;
  *((_QWORD *)v146 + 1) = (char *)v159 + 120;
  *(_QWORD *)(v147 + 8) = v146;
  *((_QWORD *)v159 + 15) = v146;
  ++*((_QWORD *)v159 + 17);
  v148 = (ApplePDPHelperInterface *)capabilities::ipc::supportsIPMetadataTrailer((capabilities::ipc *)v146);
  if (!(_DWORD)v148)
    goto LABEL_220;
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance(v148);
  v150 = ApplePDPHelperInterface::enableMetadataTrailer(Instance, 1, 0);
  v151 = *((_QWORD *)v159 + 5);
  if (!v150)
  {
    if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v151, OS_LOG_TYPE_ERROR, "Failed to enable IP metadata trailer appending", buf, 2u);
      v152 = v165;
      if (v165)
        goto LABEL_221;
      return;
    }
    goto LABEL_220;
  }
  if (!os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
  {
LABEL_220:
    v152 = v165;
    if (v165)
      goto LABEL_221;
    return;
  }
  *(_WORD *)buf = 0;
  _os_log_impl(&dword_1BF566000, v151, OS_LOG_TYPE_DEFAULT, "#I Enabled IP metadata trailer appending", buf, 2u);
  v152 = v165;
  if (!v165)
    return;
LABEL_221:
  v153 = (unint64_t *)&v152->__shared_owners_;
  do
    v154 = __ldaxr(v153);
  while (__stlxr(v154 - 1, v153));
  if (!v154)
  {
    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
    std::__shared_weak_count::__release_weak(v152);
  }
}

void sub_1BF584F98(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  void *v4;

  if (a2)
  {
    if (*(_QWORD *)v3)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v3, *(_QWORD *)v3);
      operator delete(*(void **)v3);
    }
    operator delete(v3);
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    operator delete(v4);
    JUMPOUT(0x1BF5853ECLL);
  }
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF584FC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;

  operator delete(v45);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF585054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF585068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF58507C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  boost::signals2::connection::~connection((boost::signals2::connection *)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1BF58509C(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF5850C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,unsigned int *a44)
{
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;

  if (a2)
  {
    __cxa_end_catch();
    if (a44)
    {
      v44 = a44 + 2;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)a44 + 16))(a44);
        v47 = a44 + 3;
        do
        {
          v48 = __ldaxr(v47);
          v49 = v48 - 1;
        }
        while (__stlxr(v49, v47));
        if (!v49)
          (*(void (**)(unsigned int *))(*(_QWORD *)a44 + 24))(a44);
      }
    }
    JUMPOUT(0x1BF5853ECLL);
  }
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF585134(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF58519C(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF585330);
  }
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF58520C(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF585214);
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF585220(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF585228);
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF585234(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a65;
  char *__p;
  uint64_t a67;
  char *v67;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;

  if (a2)
  {
    if (__p)
    {
      if (a67 - 1 >= 0)
      {
        v67 = &__p[16 * a67];
        do
        {
          v68 = (unsigned int *)*((_QWORD *)v67 - 1);
          if (v68)
          {
            v69 = v68 + 2;
            do
            {
              v70 = __ldaxr(v69);
              v71 = v70 - 1;
            }
            while (__stlxr(v71, v69));
            if (!v71)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 16))(v68);
              v72 = v68 + 3;
              do
              {
                v73 = __ldaxr(v72);
                v74 = v73 - 1;
              }
              while (__stlxr(v74, v72));
              if (!v74)
                (*(void (**)(unsigned int *))(*(_QWORD *)v68 + 24))(v68);
            }
          }
          v67 -= 16;
        }
        while (v67 > __p);
      }
      if (a65 >= 0xB)
        operator delete(__p);
    }
    JUMPOUT(0x1BF5853F4);
  }
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF5852DC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5852ECLL);
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF5852FC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF585304);
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF585324(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF58532CLL);
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF585338(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&a43);
    JUMPOUT(0x1BF5853ECLL);
  }
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF585354(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  void (*v45)(uint64_t *, uint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,BOOL>::~function1(&a45);
    boost::function<void ()(BOOL)>::~function(&a39);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a43);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot((uint64_t)&a37);
    if (a32)
    {
      if ((a32 & 1) == 0)
      {
        v45 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(a32 & 0xFFFFFFFFFFFFFFFELL);
        if (v45)
          v45(&a33, &a33, 2);
      }
      a32 = 0;
    }
    if (__p)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&__p, (uint64_t)__p);
      operator delete(__p);
    }
    JUMPOUT(0x1BF5853FCLL);
  }
  JUMPOUT(0x1BF5853E4);
}

void sub_1BF5853CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF585508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF585524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<data::TransportService::State>::shared_ptr[abi:ne180100]<data::TransportService::State,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7911CA8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF585640(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF585660(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<data::TransportService::State *,std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State *)#1},std::allocator<data::TransportService::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                     "_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3"
                                "__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<data::TransportService::State> ctu::SharedSynchronizable<data::TransportService::State>::make_shared_ptr<data::TransportService::State>(data::TransportService::State*)::{lambda(data::TransportService::State*)#1}::operator() const(data::TransportService::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t data::TransportService::State::State(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v11;
  _BYTE v12[16];
  char label[23];
  char v14;
  _BYTE v15[16];
  _BYTE v16[16];

  v14 = 12;
  strcpy(label, "ipc.svc.data");
  v11 = 12;
  strcpy((char *)__p, "ipc.svc.data");
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, "com.apple.telephony.abm", (const char *)__p);
  v4 = dispatch_queue_create(label, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E7911E08;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v16);
  *(_QWORD *)(a1 + 8) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 56) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v15);
  *(_QWORD *)a1 = off_1E7911DC8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    operator delete(*(void **)label);
    goto LABEL_9;
  }
  if (v14 < 0)
    goto LABEL_11;
LABEL_9:
  *(_QWORD *)a1 = off_1E7911CF8;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 104) = 0x2D00000000;
  return a1;
}

void sub_1BF5858FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;

  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v24 - 48));
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a23);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v23);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a15);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(a1);
}

void data::TransportService::State::~State(data::TransportService::State *this)
{
  void *v1;

  data::TransportService::State::~State(this);
  operator delete(v1);
}

{
  char *v2;
  char *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  NSObject *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;

  *(_QWORD *)this = off_1E7911CF8;
  v2 = (char *)this + 120;
  for (i = (char *)*((_QWORD *)this + 16); i != v2; i = (char *)*((_QWORD *)i + 1))
  {
    v4 = (unsigned int *)*((_QWORD *)i + 3);
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)*((_QWORD *)i + 2);
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (*((_QWORD *)this + 17))
  {
    v14 = *((_QWORD *)this + 15);
    v15 = (char *)*((_QWORD *)this + 16);
    v16 = *(_QWORD *)v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    *((_QWORD *)this + 17) = 0;
    if (v15 != v2)
    {
      do
      {
        v24 = (char *)*((_QWORD *)v15 + 1);
        v25 = (unsigned int *)*((_QWORD *)v15 + 3);
        if (v25)
        {
          v26 = v25 + 3;
          do
          {
            v27 = __ldaxr(v26);
            v28 = v27 - 1;
          }
          while (__stlxr(v28, v26));
          if (!v28)
            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 24))(v25);
        }
        operator delete(v15);
        v15 = v24;
      }
      while (v24 != v2);
    }
  }
  v17 = *((_QWORD *)this + 20);
  if (v17)
    dispatch_release(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v18)
    goto LABEL_27;
  p_shared_owners = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (!*((_QWORD *)this + 17))
      goto LABEL_43;
  }
  else
  {
LABEL_27:
    if (!*((_QWORD *)this + 17))
      goto LABEL_43;
  }
  v21 = *((_QWORD *)this + 15);
  v22 = (char *)*((_QWORD *)this + 16);
  v23 = *(_QWORD *)v22;
  *(_QWORD *)(v23 + 8) = *(_QWORD *)(v21 + 8);
  **(_QWORD **)(v21 + 8) = v23;
  *((_QWORD *)this + 17) = 0;
  if (v22 != v2)
  {
    do
    {
      v29 = (char *)*((_QWORD *)v22 + 1);
      v30 = (unsigned int *)*((_QWORD *)v22 + 3);
      if (v30)
      {
        v31 = v30 + 3;
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
          (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 24))(v30);
      }
      operator delete(v22);
      v22 = v29;
    }
    while (v29 != v2);
  }
LABEL_43:
  *(_QWORD *)this = off_1E7911E08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v34 = *((_QWORD *)this + 12);
  if (v34)
    dispatch_release(v34);
  v35 = *((_QWORD *)this + 11);
  if (v35)
    dispatch_release(v35);
  v36 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "ipc.svc.data");
}

uint64_t ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

_QWORD *ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7911E08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7911E08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7911E08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<data::TransportService::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7911E08;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void sub_1BF585D80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr((uint64_t)&a9);
  __clang_call_terminate(a1);
}

void boost::signals2::detail::connection_body_base::disconnect(boost::signals2::detail::connection_body_base *this)
{
  __int128 v2;
  char *v3;
  char *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _OWORD v12[10];
  unint64_t v13;
  void *__p;
  uint64_t v15;
  boost::signals2::detail::connection_body_base *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[8] = v2;
  v12[9] = v2;
  v12[6] = v2;
  v12[7] = v2;
  v12[4] = v2;
  v12[5] = v2;
  v12[2] = v2;
  v12[3] = v2;
  v12[0] = v2;
  v12[1] = v2;
  v13 = 10;
  __p = v12;
  v15 = 0;
  v16 = this;
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)this + 24))(this);
  if (*((_BYTE *)this + 24))
  {
    *((_BYTE *)this + 24) = 0;
    boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(this, v12);
  }
  (*(void (**)(boost::signals2::detail::connection_body_base *))(*(_QWORD *)v16 + 32))(v16);
  v3 = (char *)__p;
  if (__p)
  {
    if (v15 - 1 >= 0)
    {
      v4 = (char *)__p + 16 * v15;
      do
      {
        v5 = (unsigned int *)*((_QWORD *)v4 - 1);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v3);
    }
    if (v13 >= 0xB)
      operator delete(__p);
  }
}

void sub_1BF585EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF585F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body_base>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::detail::connection_body_base>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 32))(*(_QWORD *)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t boost::shared_ptr<void>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::detail::connection_body_base>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_1BF5862A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl(uint64_t a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = (_QWORD *)a1;
  if (a2 >= 0xB)
  {
    if (a2 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(16 * a2);
  }
  v6 = *(_QWORD **)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 176);
  if (v5)
  {
    v7 = &v6[2 * v5];
    v8 = v4;
    do
    {
      v9 = v6[1];
      *v8 = *v6;
      v8[1] = v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6 += 2;
      v8 += 2;
    }
    while (v6 != v7);
    v6 = *(_QWORD **)(a1 + 168);
  }
  if (v6)
  {
    v12 = *(_QWORD *)(a1 + 176);
    if (v12 - 1 >= 0)
    {
      v13 = &v6[2 * v12];
      do
      {
        v14 = (unsigned int *)*(v13 - 1);
        if (v14)
        {
          v15 = v14 + 2;
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
            v18 = v14 + 3;
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
              (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
          }
        }
        v13 -= 2;
      }
      while (v13 > v6);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  *(_QWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 168) = v4;
}

void boost::signals2::connection::~connection(boost::signals2::connection *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
}

void data::TransportService::State::handleUILockStateChange_sync(data::TransportService::State *this, int a2)
{
  NSObject *v4;
  const char *v5;
  int v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2 & 1) != 0)
      return;
LABEL_7:
    data::TransportService::State::unblockThrottling_sync(this);
    return;
  }
  v5 = "unlocked";
  if (a2)
    v5 = "locked";
  v6 = 136315138;
  v7 = v5;
  _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I UI has %s", (uint8_t *)&v6, 0xCu);
  if ((a2 & 1) == 0)
    goto LABEL_7;
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4data16TransportService5StateEE13connect_eventIN5boost8signals26signalIFvbENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEbEEENS7_5mutexEEES3_vJbEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 184));
  v2 = *(_QWORD *)(a1 + 168);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 176);
    if (v3 - 1 >= 0)
    {
      v4 = v2 + 16 * v3;
      do
      {
        v5 = *(unsigned int **)(v4 - 8);
        if (v5)
        {
          v6 = v5 + 2;
          do
          {
            v7 = __ldaxr(v6);
            v8 = v7 - 1;
          }
          while (__stlxr(v8, v6));
          if (!v8)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
            v9 = v5 + 3;
            do
            {
              v10 = __ldaxr(v9);
              v11 = v10 - 1;
            }
            while (__stlxr(v11, v9));
            if (!v11)
              (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 24))(v5);
          }
        }
        v4 -= 16;
      }
      while (v4 > v2);
    }
    if (*(_QWORD *)(a1 + 160) >= 0xBuLL)
      operator delete(*(void **)(a1 + 168));
  }
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::shared_ptr<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1BF5867D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &unk_1E79122B8;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1BF58688C(void *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  __cxa_begin_catch(a1);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1BF58695C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(BOOL),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(BOOL)>,boost::function<void ()(boost::signals2::connection const&,BOOL)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::shared_ptr<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(uint64_t *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;

  *a1 = a2;
  a1[1] = 0;
  boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(&v11, a2);
  v3 = (unsigned int *)a1[1];
  a1[1] = (uint64_t)v11;
  v11 = v3;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  return a1;
}

void sub_1BF586B28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *(unsigned int **)(v1 + 8);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
      v7 = v3 + 3;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::grouped_list(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list((_QWORD *)a1, (_QWORD *)a2);
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  *((_BYTE *)v4 + 48) = *(_BYTE *)(a2 + 48);
  v4[3] = v4 + 4;
  v5 = (_QWORD *)(a2 + 32);
  std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(v4 + 3, *(int **)(a2 + 24), (int *)(a2 + 32));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD **)(a2 + 24);
  if (v6 != (_QWORD *)(a2 + 32))
  {
    v7 = *(_QWORD **)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v7[6] = v8;
      v9 = a2;
      if (v6 != v5)
        v9 = v6[6];
      v10 = (_QWORD *)v6[1];
      v11 = v10;
      v12 = v6;
      if (v10)
      {
        do
        {
          v13 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v12[2];
          v14 = *v13 == (_QWORD)v12;
          v12 = v13;
        }
        while (!v14);
      }
      v15 = a2;
      if (v13 != v5)
        v15 = v13[6];
      while (v9 != v15)
      {
        v9 = *(_QWORD *)(v9 + 8);
        v8 = *(_QWORD *)(v8 + 8);
      }
      if (v10)
      {
        do
        {
          v16 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v6[2];
          v14 = *v16 == (_QWORD)v6;
          v6 = v16;
        }
        while (!v14);
      }
      v17 = (_QWORD *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v7[2];
          v14 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v14);
      }
      v6 = v16;
      v7 = v18;
    }
    while (v16 != v5);
  }
  return a1;
}

void sub_1BF586CE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v2, *(_QWORD **)(v1 + 32));
  std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list((uint64_t *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::list(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = (_QWORD *)a2[1];
  if (v3 != a2)
  {
    v5 = 0;
    v6 = a1;
    do
    {
      v7 = operator new(0x20uLL);
      v8 = v3[3];
      v7[2] = v3[2];
      v7[3] = v8;
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        v6 = (_QWORD *)*a1;
        v5 = a1[2];
      }
      *v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = ++v5;
      v3 = (_QWORD *)v3[1];
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1BF586DB4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  if (v2)
  {
    v5 = (uint64_t *)v1[1];
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v6;
    v1[2] = 0;
    if (v5 != v1)
    {
      do
      {
        v7 = (uint64_t *)v5[1];
        v8 = (unsigned int *)v5[3];
        if (v8)
        {
          v9 = v8 + 2;
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
            v12 = v8 + 3;
            do
            {
              v13 = __ldaxr(v12);
              v14 = v13 - 1;
            }
            while (__stlxr(v14, v12));
            if (!v14)
              (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
          }
        }
        operator delete(v5);
        v5 = v7;
      }
      while (v7 != v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

uint64_t *std::map<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>,boost::signals2::detail::group_key_less<int,std::less<int>>,std::allocator<std::pair<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__tree_node<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v6;
  uint64_t *v7;
  uint64_t *v8;
  int *v9;
  uint64_t *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t *v15;
  int *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t *v19[11];

  if (a2 != a3)
  {
    v19[9] = v3;
    v19[10] = v4;
    v6 = a2;
    v7 = result;
    v8 = result + 1;
    do
    {
      v18 = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      v19[0] = (uint64_t *)0xAAAAAAAAAAAAAAAALL;
      result = std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(v7, v8, v19, &v18, v6 + 8);
      if (*result)
      {
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
          goto LABEL_11;
      }
      else
      {
        v10 = result;
        v11 = operator new(0x38uLL);
        v12 = *((_QWORD *)v6 + 6);
        v11[2] = *((_OWORD *)v6 + 2);
        *((_QWORD *)v11 + 6) = v12;
        v13 = v19[0];
        *(_QWORD *)v11 = 0;
        *((_QWORD *)v11 + 1) = 0;
        *((_QWORD *)v11 + 2) = v13;
        *v10 = (uint64_t)v11;
        v14 = *(_QWORD **)*v7;
        if (v14)
        {
          *v7 = (uint64_t)v14;
          v15 = (uint64_t *)*v10;
        }
        else
        {
          v15 = (uint64_t *)v11;
        }
        result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[1], v15);
        ++v7[2];
        v9 = (int *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
LABEL_11:
            v16 = v9;
            v9 = *(int **)v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      do
      {
        v16 = (int *)*((_QWORD *)v6 + 2);
        v17 = *(_QWORD *)v16 == (_QWORD)v6;
        v6 = v16;
      }
      while (!v17);
LABEL_3:
      v6 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__find_equal<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  BOOL v18;
  int v19;
  int v20;
  _QWORD *v21;
  int v22;
  uint64_t *v23;
  int v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;

  v5 = a1 + 1;
  if (a1 + 1 == a2)
    goto LABEL_8;
  v6 = *a5;
  v7 = *((_DWORD *)a2 + 8);
  if (*a5 == v7)
  {
    if (v6 != 1)
    {
LABEL_6:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    v8 = a5[2];
    v9 = *((_DWORD *)a2 + 10);
    if (v8 >= v9)
    {
      if (v9 >= v8)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_8:
    v11 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v13 = a2;
    }
    else
    {
      if (v11)
      {
        v12 = (uint64_t *)*a2;
        do
        {
          v13 = v12;
          v12 = (uint64_t *)v12[1];
        }
        while (v12);
      }
      else
      {
        v17 = a2;
        do
        {
          v13 = (uint64_t *)v17[2];
          v18 = *v13 == (_QWORD)v17;
          v17 = v13;
        }
        while (v18);
      }
      v19 = *((_DWORD *)v13 + 8);
      v20 = *a5;
      if (v19 == *a5)
      {
        if (v19 != 1 || *((_DWORD *)v13 + 10) >= a5[2])
          goto LABEL_24;
      }
      else if (v19 >= v20)
      {
LABEL_24:
        v21 = (_QWORD *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        if (v20 != 1)
        {
          while (1)
          {
            v26 = *((_DWORD *)v21 + 8);
            v23 = v21;
            if (v20 == v26)
              break;
            if (v20 < v26)
            {
              v21 = (_QWORD *)*v21;
              v5 = v23;
              if (!*v23)
                break;
            }
            else
            {
              if (v26 >= v20)
                break;
              v5 = v21 + 1;
              v21 = (_QWORD *)v21[1];
              if (!v21)
                break;
            }
          }
LABEL_40:
          *a3 = v23;
          return v5;
        }
        v22 = a5[2];
        while (1)
        {
          v23 = v21;
          v24 = *((_DWORD *)v21 + 8);
          if (v24 == 1)
          {
            v25 = *((_DWORD *)v23 + 10);
            if (v22 >= v25)
            {
              if (v25 >= v22)
                goto LABEL_40;
              goto LABEL_33;
            }
LABEL_27:
            v21 = (_QWORD *)*v23;
            v5 = v23;
            if (!*v23)
              goto LABEL_40;
          }
          else
          {
            if (v24 > 1)
              goto LABEL_27;
LABEL_33:
            v5 = v23 + 1;
            v21 = (_QWORD *)v23[1];
            if (!v21)
              goto LABEL_40;
          }
        }
      }
    }
    if (v11)
    {
      *a3 = v13;
      return v13 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v6 < v7)
    goto LABEL_8;
  if (v7 >= v6)
    goto LABEL_6;
LABEL_15:
  v14 = a2[1];
  if (v14)
  {
    v15 = (uint64_t *)a2[1];
    do
    {
      v16 = v15;
      v15 = (uint64_t *)*v15;
    }
    while (v15);
  }
  else
  {
    v27 = a2;
    do
    {
      v16 = (uint64_t *)v27[2];
      v18 = *v16 == (_QWORD)v27;
      v27 = v16;
    }
    while (!v18);
  }
  if (v16 == v5)
    goto LABEL_56;
  v28 = *((_DWORD *)v16 + 8);
  if (v6 == v28)
  {
    if (v6 == 1)
    {
      v29 = a5[2];
      if (v29 >= *((_DWORD *)v16 + 10))
      {
        v30 = (_QWORD *)*v5;
        if (!*v5)
        {
          *a3 = v5;
          return a1 + 1;
        }
        goto LABEL_61;
      }
      goto LABEL_56;
    }
    goto LABEL_58;
  }
  if (v6 < v28)
  {
LABEL_56:
    if (v14)
    {
      *a3 = v16;
      return v16;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
LABEL_58:
  v30 = (_QWORD *)*v5;
  if (*v5)
  {
    if (v6 == 1)
    {
      v29 = a5[2];
LABEL_61:
      v31 = v30;
      while (1)
      {
        v30 = v31;
        v32 = *((_DWORD *)v31 + 8);
        if (v32 == 1)
        {
          v33 = *((_DWORD *)v30 + 10);
          if (v29 >= v33)
          {
            if (v33 >= v29)
              goto LABEL_72;
            goto LABEL_68;
          }
LABEL_62:
          v31 = (_QWORD *)*v30;
          v5 = v30;
          if (!*v30)
            goto LABEL_72;
        }
        else
        {
          if (v32 > 1)
            goto LABEL_62;
LABEL_68:
          v5 = v30 + 1;
          v31 = (_QWORD *)v30[1];
          if (!v31)
            goto LABEL_72;
        }
      }
    }
    v34 = *((_DWORD *)v30 + 8);
    while (v6 != v34)
    {
      if (v6 < v34)
      {
        v35 = *v30;
        v5 = v30;
        if (!*v30)
          break;
      }
      else
      {
        if (v34 >= v6)
          break;
        v5 = v30 + 1;
        v35 = v30[1];
        if (!v35)
          break;
      }
      v34 = *(_DWORD *)(v35 + 32);
      v30 = (_QWORD *)v35;
    }
  }
  else
  {
    v30 = a1 + 1;
  }
LABEL_72:
  *a3 = v30;
  return v5;
}

_QWORD *boost::detail::shared_count::shared_count<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = 0;
  v4 = operator new(0x18uLL);
  v4[1] = 0x100000001;
  *v4 = &unk_1E7912248;
  v4[2] = a2;
  *a1 = v4;
  return a1;
}

void sub_1BF587390(void *a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  __cxa_begin_catch(a1);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
  __cxa_rethrow();
}

void sub_1BF587458(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)(v1 + 3), (_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>>::erase(uint64_t *a1, int *a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t *v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  BOOL v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v45;

  v6 = a1 + 4;
  v5 = (uint64_t *)a1[4];
  if (!v5)
  {
    v23 = a1[10];
    if ((uint64_t *)v23 != *a3)
      goto LABEL_55;
    v19 = *(uint64_t **)(v23 + 8);
    v9 = v6;
    v24 = (uint64_t **)(v6 - 1);
    if (v19 != a1)
    {
LABEL_46:
      v45 = a2;
      std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(v24, a2, (uint64_t)&std::piecewise_construct, &v45)[6] = v19;
      goto LABEL_55;
    }
    goto LABEL_31;
  }
  v7 = *a2;
  v8 = a2[2];
  v9 = v6;
  v10 = v5;
  if (*a2 == 1)
  {
    do
    {
      while (1)
      {
        v16 = *((_DWORD *)v10 + 8);
        v17 = v16 < 1;
        if (v16 == 1)
          v17 = *((_DWORD *)v10 + 10) < v8;
        if (!v17)
          break;
        v10 = (uint64_t *)v10[1];
        if (!v10)
          goto LABEL_19;
      }
      v9 = v10;
      v10 = (uint64_t *)*v10;
    }
    while (v10);
  }
  else
  {
    do
    {
      v11 = *((_DWORD *)v10 + 8);
      v12 = v11 == v7;
      v13 = v11 < v7;
      if (v11 >= v7)
        v14 = (uint64_t **)v10;
      else
        v14 = (uint64_t **)(v10 + 1);
      if (v13)
        v15 = v9;
      else
        v15 = v10;
      if (v12)
      {
        v14 = (uint64_t **)v10;
        v9 = v10;
      }
      else
      {
        v9 = v15;
      }
      v10 = *v14;
    }
    while (*v14);
  }
LABEL_19:
  v18 = v9[6];
  if ((uint64_t *)v18 == *a3)
  {
    v19 = *(uint64_t **)(v18 + 8);
    v20 = v6;
    if (v7 == 1)
    {
      v21 = v5;
      while (1)
      {
        v22 = *((_DWORD *)v21 + 8);
        if (v22 == 1)
        {
          if (v8 < *((_DWORD *)v21 + 10))
            goto LABEL_27;
LABEL_22:
          v21 = (uint64_t *)v21[1];
          if (!v21)
            goto LABEL_44;
        }
        else
        {
          if (v22 <= 1)
            goto LABEL_22;
LABEL_27:
          v20 = v21;
          v21 = (uint64_t *)*v21;
          if (!v21)
            goto LABEL_44;
        }
      }
    }
    v27 = v5;
    do
    {
      v28 = *((_DWORD *)v27 + 8);
      v29 = (uint64_t **)(v27 + 1);
      v30 = v7 == v28;
      v31 = v7 < v28;
      if (v7 >= v28)
        v32 = (uint64_t **)(v27 + 1);
      else
        v32 = (uint64_t **)v27;
      if (!v31)
        v27 = v20;
      if (v30)
        v32 = v29;
      else
        v20 = v27;
      v27 = *v32;
    }
    while (*v32);
LABEL_44:
    if (v20 == v6)
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != a1)
        goto LABEL_46;
    }
    else
    {
      v24 = (uint64_t **)(v6 - 1);
      if (v19 != (uint64_t *)v20[6])
        goto LABEL_46;
    }
LABEL_31:
    v25 = (uint64_t *)v9[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      v33 = v9;
      do
      {
        v26 = (uint64_t *)v33[2];
        v12 = *v26 == (_QWORD)v33;
        v33 = v26;
      }
      while (!v12);
    }
    if (*v24 == v9)
      *v24 = v26;
    --a1[5];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, v9);
    operator delete(v9);
  }
LABEL_55:
  v34 = *a3;
  v35 = **a3;
  v36 = (*a3)[1];
  *(_QWORD *)(v35 + 8) = v36;
  *(_QWORD *)v34[1] = v35;
  --a1[2];
  v37 = (unsigned int *)v34[3];
  if (v37)
  {
    v38 = v37 + 2;
    do
    {
      v39 = __ldaxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 16))(v37);
      v41 = v37 + 3;
      do
      {
        v42 = __ldaxr(v41);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v41));
      if (!v43)
        (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 24))(v37);
    }
  }
  operator delete(v34);
  return v36;
}

void boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>(_DWORD *a1, _QWORD *a2)
{
  int v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;

  v2 = a1[7] - 1;
  a1[7] = v2;
  if (!v2)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 40))(&v16);
    v4 = a2[22];
    if (v4 == a2[20] && v4 != -1)
    {
      if (4 * v4 <= (unint64_t)(v4 + 1))
        v5 = v4 + 1;
      else
        v5 = 4 * v4;
      boost::signals2::detail::auto_buffer<boost::shared_ptr<void>,boost::signals2::detail::store_n_objects<10u>,boost::signals2::detail::default_grow_policy,std::allocator<boost::shared_ptr<void>>>::reserve_impl((uint64_t)a2, v5);
      v4 = a2[22];
    }
    v6 = *((_QWORD *)&v16 + 1);
    *(_OWORD *)(a2[21] + 16 * v4) = v16;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      v4 = a2[22];
    }
    a2[22] = v4 + 1;
    v9 = (unsigned int *)*((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v10 = (unsigned int *)(*((_QWORD *)&v16 + 1) + 8);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
  }
}

void sub_1BF587914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  boost::shared_ptr<void>::~shared_ptr((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>,void *>>>>::__emplace_unique_key_args<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::piecewise_construct_t const&,std::tuple<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>> const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t **v10;
  int v11;
  int v12;
  _QWORD *v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  int v18;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    if (*a2 != 1)
    {
      v18 = *((_DWORD *)v6 + 8);
      if (v8 == v18)
        return (uint64_t **)v6;
      v10 = (uint64_t **)a1[1];
      while (1)
      {
        if (v8 < v18)
        {
          v6 = *v10;
          v7 = v10;
          if (!*v10)
            goto LABEL_13;
        }
        else
        {
          if (v18 >= v8)
            return v10;
          v6 = v10[1];
          if (!v6)
          {
LABEL_11:
            v7 = v10 + 1;
            goto LABEL_13;
          }
        }
        v18 = *((_DWORD *)v6 + 8);
        v10 = (uint64_t **)v6;
        if (v8 == v18)
          return (uint64_t **)v6;
      }
    }
    v9 = a2[2];
    while (1)
    {
      v10 = (uint64_t **)v6;
      v11 = *((_DWORD *)v6 + 8);
      if (v11 == 1)
      {
        v12 = *((_DWORD *)v6 + 10);
        if (v9 >= v12)
        {
          if (v12 >= v9)
            return v10;
          goto LABEL_10;
        }
LABEL_4:
        v6 = (uint64_t *)*v6;
        v7 = v10;
        if (!*v10)
          goto LABEL_13;
      }
      else
      {
        if (v11 > 1)
          goto LABEL_4;
LABEL_10:
        v6 = (uint64_t *)v6[1];
        if (!v6)
          goto LABEL_11;
      }
    }
  }
  v10 = a1 + 1;
LABEL_13:
  v13 = operator new(0x38uLL);
  v14 = *((_DWORD *)*a4 + 2);
  v13[4] = **a4;
  *((_DWORD *)v13 + 10) = v14;
  v13[6] = 0;
  *v13 = 0;
  v13[1] = 0;
  v13[2] = v10;
  *v7 = v13;
  v15 = (uint64_t *)**a1;
  v16 = v13;
  if (v15)
  {
    *a1 = v15;
    v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v13;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_10;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (!v2)
  {
    v5 = 1;
    v6 = (uint64_t **)v3[2];
    v7 = *v6;
    if (*v6 == v3)
      goto LABEL_6;
LABEL_11:
    v6[1] = (uint64_t *)v2;
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
    goto LABEL_12;
  }
LABEL_10:
  v5 = 0;
  *(_QWORD *)(v2 + 16) = v3[2];
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 != v3)
    goto LABEL_11;
LABEL_6:
  *v6 = (uint64_t *)v2;
  if (v3 != result)
  {
    v7 = v6[1];
    v8 = *((unsigned __int8 *)v3 + 24);
    if (v3 == a2)
      goto LABEL_16;
LABEL_12:
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
    goto LABEL_16;
  }
  v7 = 0;
  result = (uint64_t *)v2;
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
    goto LABEL_12;
LABEL_16:
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v14 = (uint64_t **)v7[2];
    if (*v14 != v7)
      break;
    if (*((_BYTE *)v7 + 24))
    {
      v16 = (_QWORD *)*v7;
      if (*v7)
        goto LABEL_48;
    }
    else
    {
      *((_BYTE *)v7 + 24) = 1;
      *((_BYTE *)v14 + 24) = 0;
      v20 = (uint64_t *)v7[1];
      *v14 = v20;
      if (v20)
        v20[2] = (uint64_t)v14;
      v7[2] = (uint64_t)v14[2];
      v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v7;
      v7[1] = (uint64_t)v14;
      v14[2] = v7;
      if (result == (uint64_t *)v14)
        result = v7;
      v7 = *v14;
      v16 = (_QWORD *)**v14;
      if (v16)
      {
LABEL_48:
        if (!*((_BYTE *)v16 + 24))
          goto LABEL_71;
      }
    }
    v21 = (uint64_t *)v7[1];
    if (v21 && !*((_BYTE *)v21 + 24))
    {
      if (v16 && !*((_BYTE *)v16 + 24))
      {
LABEL_71:
        v21 = v7;
      }
      else
      {
        *((_BYTE *)v21 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = *v21;
        v7[1] = *v21;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v21[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v21;
        *v21 = (uint64_t)v7;
        v7[2] = (uint64_t)v21;
        v16 = v7;
      }
      v27 = (uint64_t *)v21[2];
      *((_BYTE *)v21 + 24) = *((_BYTE *)v27 + 24);
      *((_BYTE *)v27 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v28 = *v27;
      v29 = *(_QWORD *)(*v27 + 8);
      *v27 = v29;
      if (v29)
        *(_QWORD *)(v29 + 16) = v27;
      *(_QWORD *)(v28 + 16) = v27[2];
      *(_QWORD *)(v27[2] + 8 * (*(_QWORD *)v27[2] != (_QWORD)v27)) = v28;
      *(_QWORD *)(v28 + 8) = v27;
      v27[2] = v28;
      return result;
    }
    *((_BYTE *)v7 + 24) = 0;
    v12 = (uint64_t *)v7[2];
    if (*((_BYTE *)v12 + 24))
      v13 = v12 == result;
    else
      v13 = 1;
    if (v13)
      goto LABEL_61;
LABEL_24:
    v7 = *(uint64_t **)(v12[2] + 8 * (*(_QWORD *)v12[2] == (_QWORD)v12));
  }
  if (*((_BYTE *)v7 + 24))
  {
    v15 = (_QWORD *)*v7;
    if (!*v7)
    {
LABEL_38:
      v19 = (uint64_t *)v7[1];
      if (v19 && !*((_BYTE *)v19 + 24))
        goto LABEL_67;
      *((_BYTE *)v7 + 24) = 0;
      v12 = (uint64_t *)v7[2];
      if (v12 == result)
      {
        v12 = result;
LABEL_61:
        *((_BYTE *)v12 + 24) = 1;
        return result;
      }
      if (!*((_BYTE *)v12 + 24))
        goto LABEL_61;
      goto LABEL_24;
    }
  }
  else
  {
    *((_BYTE *)v7 + 24) = 1;
    *((_BYTE *)v14 + 24) = 0;
    v17 = v14[1];
    v18 = (uint64_t *)*v17;
    v14[1] = (uint64_t *)*v17;
    if (v18)
      v18[2] = (uint64_t)v14;
    v17[2] = (uint64_t)v14[2];
    v14[2][*v14[2] != (_QWORD)v14] = (uint64_t)v17;
    *v17 = (uint64_t)v14;
    v14[2] = v17;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
    v15 = (_QWORD *)*v7;
    if (!*v7)
      goto LABEL_38;
  }
  if (*((_BYTE *)v15 + 24))
    goto LABEL_38;
  v19 = (uint64_t *)v7[1];
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_67:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v23 = v15[1];
    *v7 = v23;
    if (v23)
      *(_QWORD *)(v23 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v19 = v7;
  }
  v24 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v24 + 24);
  *(_BYTE *)(v24 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v25 = *(uint64_t **)(v24 + 8);
  v26 = *v25;
  *(_QWORD *)(v24 + 8) = *v25;
  if (v26)
    *(_QWORD *)(v26 + 16) = v24;
  v25[2] = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(*(_QWORD *)(v24 + 16) + 8 * (**(_QWORD **)(v24 + 16) != v24)) = v25;
  *v25 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  return result;
}

void boost::signals2::detail::connection_body_base::~connection_body_base(boost::signals2::detail::connection_body_base *this)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *(_QWORD *)this = &unk_1E7911F10;
  v1 = (unsigned int *)*((_QWORD *)this + 2);
  if (v1)
  {
    v2 = v1 + 3;
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF58825C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

_QWORD *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;

  a1[2] = 0;
  v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[24 * v7];
    a1[1] = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_1BF5884EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  if (*(_QWORD *)v1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v17;

  v4 = a4;
  v17 = a4;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v9 = *(_DWORD *)v6 ^ (*(int *)v6 >> 31);
      if (v9 == 2)
      {
        *(_QWORD *)(v4 + 8) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 8) + 32))(*(_QWORD *)(v6 + 8));
        v7 = v17;
        goto LABEL_4;
      }
      if (v9 == 1)
      {
        *(_QWORD *)(v4 + 8) = *(_QWORD *)(v6 + 8);
        v10 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v4 + 16) = v10;
        v7 = v4;
        if (!v10)
          goto LABEL_4;
        v11 = (unsigned int *)(v10 + 12);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      else
      {
        *(_QWORD *)(v4 + 8) = *(_QWORD *)(v6 + 8);
        v13 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v4 + 16) = v13;
        v7 = v4;
        if (!v13)
          goto LABEL_4;
        v14 = (unsigned int *)(v13 + 12);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v7 = v4;
LABEL_4:
      v8 = *(_DWORD *)v6;
      v6 += 24;
      *(_DWORD *)v4 = v8 ^ (v8 >> 31);
      v4 = v7 + 24;
      v17 = v7 + 24;
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_1BF588630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD **std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>::operator()[abi:ne180100](_QWORD **result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v1 = *result[2];
  v2 = *result[1];
  if (v1 != v2)
  {
    v3 = *result[2];
    do
    {
      v4 = *(_DWORD *)(v3 - 24);
      v3 -= 24;
      v5 = v4 ^ (v4 >> 31);
      if (v5 == 2)
      {
        result = *(_QWORD ***)(v1 - 16);
        if (result)
          result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[1])(result);
        goto LABEL_3;
      }
      if (v5 == 1)
      {
        result = *(_QWORD ***)(v1 - 8);
        if (!result)
          goto LABEL_3;
        v6 = (unsigned int *)result + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (v8)
          goto LABEL_3;
      }
      else
      {
        result = *(_QWORD ***)(v1 - 8);
        if (!result)
          goto LABEL_3;
        v9 = (unsigned int *)result + 3;
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (v11)
          goto LABEL_3;
      }
      result = (_QWORD **)((uint64_t (*)(_QWORD **))(*result)[3])(result);
LABEL_3:
      v1 = v3;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>::~variant(uint64_t a1)
{
  int v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      v3 = *(unsigned int **)(a1 + 16);
      if (!v3)
        return a1;
      v4 = v3 + 3;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (v6)
        return a1;
    }
    else
    {
      v3 = *(unsigned int **)(a1 + 16);
      if (!v3)
        return a1;
      v9 = v3 + 3;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (v11)
        return a1;
    }
    (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
    return a1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

unsigned int *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (v4 != a2)
  {
    v5 = *((_QWORD *)result + 1);
    do
    {
      v6 = *(_DWORD *)(v5 - 24);
      v5 -= 24;
      v7 = v6 ^ (v6 >> 31);
      if (v7 == 2)
      {
        result = *(unsigned int **)(v4 - 16);
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        goto LABEL_3;
      }
      if (v7 == 1)
      {
        result = *(unsigned int **)(v4 - 8);
        if (!result)
          goto LABEL_3;
        v8 = result + 3;
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (v10)
          goto LABEL_3;
      }
      else
      {
        result = *(unsigned int **)(v4 - 8);
        if (!result)
          goto LABEL_3;
        v11 = result + 3;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (v13)
          goto LABEL_3;
      }
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
LABEL_3:
      v4 = v5;
    }
    while (v5 != a2);
  }
  *((_QWORD *)v3 + 1) = a2;
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E7911EA8;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E7911F10;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::variant<boost::shared_ptr<void>,boost::signals2::detail::foreign_void_shared_ptr>::~variant(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;

  if (*(_DWORD *)a1 == *(int *)a1 >> 31)
  {
    v2 = *(unsigned int **)(a1 + 16);
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    return a1;
  }
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
    return a1;
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(BOOL),boost::function<void ()(BOOL)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(BOOL)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF73AD7FLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF73AD7FLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(BOOL)>>,void,BOOL>::invoke(uint64_t a1, char a2)
{
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  _BYTE *v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v23[3];
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
LABEL_10:
    v18 = 1;
LABEL_11:
    v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  v18 = 0;
LABEL_21:
  v19 = operator new(1uLL);
  *v19 = a2;
  v20 = operator new(0x20uLL);
  *v20 = boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable;
  if (v17)
    v21 = _Block_copy(v17);
  else
    v21 = 0;
  v20[1] = v21;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke;
  block[3] = &__block_descriptor_tmp_13;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable)
  {
    if ((boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 1) == 0)
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function1<void,BOOL>::assign_to<dispatch::block<void({block_pointer})(BOOL)>>(dispatch::block<void({block_pointer})(BOOL)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
        v22(v23, v23, 2);
    }
  }
  if ((v18 & 1) == 0)
    _Block_release(v6);
}

void sub_1BF588EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  char v11;

  if (v10)
    _Block_release(v10);
  if ((v11 & 1) == 0)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvbEEEb_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned __int8 **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_1BF588FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::bad_function_call>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BF589044(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E7912410;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E7912398;
  *(_QWORD *)(a1 + 8) = &unk_1E79123C8;
  *(_QWORD *)(a1 + 24) = &unk_1E79123F0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E7912468;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

char *boost::wrapexcept<boost::bad_function_call>::clone(uint64_t a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &unk_1E7912410;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *((_QWORD *)v2 + 1) = &unk_1E7912440;
  *((_QWORD *)v2 + 3) = &unk_1E7912468;
  v3 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)v2 + 4) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E7912398;
  *((_QWORD *)v2 + 1) = &unk_1E79123C8;
  *((_QWORD *)v2 + 3) = &unk_1E79123F0;
  boost::exception_detail::copy_boost_exception((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_1BF5891D8(_Unwind_Exception *a1)
{
  void *v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5891F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::bad_function_call>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BF58924C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_function_call>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E7912468;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  operator delete((void *)a1);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1E7912468;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_1E7912468;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  operator delete(&this[-1].__imp_);
}

void `non-virtual thunk to'boost::wrapexcept<boost::bad_function_call>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E7912468;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E7912468;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  operator delete(&a1[-2].__imp_);
}

void boost::bad_function_call::~bad_function_call(std::runtime_error *this)
{
  void *v1;

  std::runtime_error::~runtime_error(this);
  operator delete(v1);
}

uint64_t boost::wrapexcept<boost::bad_function_call>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7912410;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E7912440;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E7912468;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E7912398;
  *(_QWORD *)(a1 + 8) = &unk_1E79123C8;
  *(_QWORD *)(a1 + 24) = &unk_1E79123F0;
  return a1;
}

void sub_1BF5894D8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = 0;
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    result = *(_QWORD *)(a1 + 8);
    if (!result)
      goto LABEL_9;
    goto LABEL_8;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
  v5 = v7;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
LABEL_8:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
LABEL_9:
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1BF5895D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(BOOL)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF73ADBDLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF73ADBDLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(BOOL)>,void,BOOL>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function1<void,BOOL>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF5897C0(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF5897D0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,BOOL>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

int *std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (int *)&v7[24 * v3];
  v9 = &v7[24 * v6];
  v10 = v8 + 2;
  v11 = (_QWORD *)(a2 + 8);
  v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v12 == 2)
  {
    *v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11);
    v12 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  }
  else
  {
    if (v12 != 1)
      v12 = 0;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    *v11 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  *v8 = v12;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>((uint64_t)(a1 + 2), a1[1], (int *)a1[1], *a1, (int *)*a1, (uint64_t)v8, (uint64_t)v8);
  v14 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v15;
  a1[1] = (uint64_t)(v8 + 6);
  a1[2] = (uint64_t)v9;
  if (v13 == v14)
  {
    if (v14)
      goto LABEL_18;
    return v8 + 6;
  }
  do
  {
    v26 = v13 - 24;
    v17 = *((_DWORD *)v13 - 6) ^ (*((int *)v13 - 6) >> 31);
    if (v17 == 2)
    {
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    else if (v17 == 1)
    {
      v18 = (unsigned int *)*((_QWORD *)v13 - 1);
      if (v18)
      {
        v19 = v18 + 3;
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
          goto LABEL_27;
      }
    }
    else
    {
      v18 = (unsigned int *)*((_QWORD *)v13 - 1);
      if (v18)
      {
        v23 = v18 + 3;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
LABEL_27:
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    v13 = v26;
  }
  while (v26 != v14);
  if (!v14)
    return v8 + 6;
LABEL_18:
  operator delete(v14);
  return v8 + 6;
}

void sub_1BF589A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;

  v7 = a7;
  v19 = a6;
  v20 = a7;
  if (a3 != a5)
  {
    v9 = a3;
    do
    {
      v10 = *(v9 - 6);
      v9 -= 6;
      v11 = v10 ^ (v10 >> 31);
      if (v11 == 2)
      {
        *(_QWORD *)(v7 - 16) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 - 2) + 32))(*((_QWORD *)a3 - 2));
      }
      else if (v11 == 1)
      {
        *(_QWORD *)(v7 - 16) = *((_QWORD *)a3 - 2);
        v12 = *((_QWORD *)a3 - 1);
        *(_QWORD *)(v7 - 8) = v12;
        if (v12)
        {
          v13 = (unsigned int *)(v12 + 12);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
      }
      else
      {
        *(_QWORD *)(v7 - 16) = *((_QWORD *)a3 - 2);
        v15 = *((_QWORD *)a3 - 1);
        *(_QWORD *)(v7 - 8) = v15;
        if (v15)
        {
          v16 = (unsigned int *)(v15 + 12);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
      }
      *(_DWORD *)(v7 - 24) = *v9 ^ (*v9 >> 31);
      v7 = v20 - 24;
      v20 -= 24;
      a3 = v9;
    }
    while (v9 != a5);
    return v19;
  }
  return a6;
}

void sub_1BF589BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>::operator()[abi:ne180100]((unsigned int *)a1);
  return a1;
}

unsigned int *std::_AllocatorDestroyRangeReverse<std::allocator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>,std::reverse_iterator<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>*>>::operator()[abi:ne180100](unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v1 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  v2 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  while (v1 != v2)
  {
    v3 = *(_DWORD *)v1 ^ (*(int *)v1 >> 31);
    if (v3 == 2)
    {
      result = *(unsigned int **)(v1 + 8);
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    else if (v3 == 1)
    {
      result = *(unsigned int **)(v1 + 16);
      if (result)
      {
        v4 = result + 3;
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          goto LABEL_10;
      }
    }
    else
    {
      result = *(unsigned int **)(v1 + 16);
      if (result)
      {
        v7 = result + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
LABEL_10:
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
      }
    }
    v1 += 24;
  }
  return result;
}

unsigned int *std::__split_buffer<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__destruct_at_end[abi:ne180100](unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *((_QWORD *)result + 2);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = *(_DWORD *)(v2 - 24);
      *((_QWORD *)v4 + 2) = v2 - 24;
      v6 = v5 ^ (v5 >> 31);
      if (v6 == 2)
      {
        result = *(unsigned int **)(v2 - 16);
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        goto LABEL_3;
      }
      if (v6 == 1)
      {
        result = *(unsigned int **)(v2 - 8);
        if (!result)
          goto LABEL_3;
        v7 = result + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (v9)
          goto LABEL_3;
      }
      else
      {
        result = *(unsigned int **)(v2 - 8);
        if (!result)
          goto LABEL_3;
        v10 = result + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (v12)
          goto LABEL_3;
      }
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 24))(result);
LABEL_3:
      v2 = *((_QWORD *)v4 + 2);
    }
    while (v2 != a2);
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E7912070;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E7912070;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E79120D0;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF589F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7912070;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E79120D0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E79120D0;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<data::TransportService::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E79120D0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void data::TransportService::State::unblockThrottling_sync(data::TransportService::State *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  ApplePDPHelperInterface *Instance;
  NSObject *v12;
  int v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Disabling throttling", (uint8_t *)&v13, 2u);
  }
  if (*((_QWORD *)this + 18))
  {
    v3 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Stop Listening for UI events", (uint8_t *)&v13, 2u);
    }
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  v7 = *((_QWORD *)this + 20);
  if (v7)
  {
    dispatch_source_cancel(v7);
    v8 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = 0;
    if (v8)
      dispatch_release(v8);
    v9 = *((_QWORD *)this + 5);
    v7 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v7)
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v13, 2u);
    }
  }
  if (*((_DWORD *)this + 26) == 1)
  {
    if (*((_DWORD *)this + 28) == 1)
    {
      v10 = *((_QWORD *)this + 5);
      v7 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v7)
      {
        v13 = 136315394;
        v14 = "Throttled";
        v15 = 2080;
        v16 = "Idle";
        _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v13, 0x16u);
      }
      *((_DWORD *)this + 28) = 0;
    }
    Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v7);
    if ((ApplePDPHelperInterface::activateLowPowerPDPThrottle(Instance) & 1) == 0)
    {
      v12 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v13) = 0;
        _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Failed to disable flow for throttling", (uint8_t *)&v13, 2u);
      }
    }
  }
}

void ___ZN4data16TransportService5State13enterLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 160);
  if (v2)
  {
    dispatch_source_cancel(v2);
    v3 = *(NSObject **)(v1 + 160);
    *(_QWORD *)(v1 + 160) = 0;
    if (v3)
      dispatch_release(v3);
    v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", (uint8_t *)&v9, 2u);
    }
  }
  v5 = *(_DWORD *)(v1 + 112);
  if (v5 >= 2)
  {
    if (v5 == 2)
      return;
  }
  else
  {
    v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = "???";
      if (!v5)
        v7 = "Idle";
      if (v5 == 1)
        v7 = "Throttled";
      v9 = 136315394;
      v10 = v7;
      v11 = 2080;
      v12 = "LowPower";
      _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", (uint8_t *)&v9, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 2;
  }
  v8 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Entered low power", (uint8_t *)&v9, 2u);
  }
}

void ___ZN4data16TransportService5State12exitLowPowerEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  NSObject *v6;
  sys::UIObserver *v7;
  sys::UIObserver *v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  _BYTE buf[22];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(v1 + 112);
  if ((v2 - 1) <= 1)
  {
    v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = "???";
      if (v2 == 1)
        v4 = "Throttled";
      if (v2 == 2)
        v4 = "LowPower";
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "Throttled";
      _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I State changing from %s to %s", buf, 0x16u);
    }
    *(_DWORD *)(v1 + 112) = 1;
    data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v1);
  }
  v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Exited Low Power", buf, 2u);
  }
  if (!*(_QWORD *)(v1 + 144))
  {
    v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Listening for UI events", buf, 2u);
    }
    pthread_mutex_lock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    v7 = (sys::UIObserver *)xmmword_1ED70F5F8;
    if (!(_QWORD)xmmword_1ED70F5F8)
    {
      memset(buf, 170, 16);
      v8 = (sys::UIObserver *)operator new(0x40uLL);
      sys::UIObserver::UIObserver(v8);
      std::shared_ptr<sys::UIObserver>::shared_ptr[abi:ne180100]<sys::UIObserver,void>((std::__shared_weak_count_vtbl **)buf, (std::__shared_weak_count_vtbl *)v8);
      v9 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v10 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F5F8 + 1);
      xmmword_1ED70F5F8 = v9;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v14 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v7 = (sys::UIObserver *)xmmword_1ED70F5F8;
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F5F8 + 1);
    if (*((_QWORD *)&xmmword_1ED70F5F8 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&xmmword_1ED70F5F8 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
    sys::UIObserver::observe(v7, 1, (std::__shared_weak_count_vtbl **)&v28);
    v19 = v28;
    v28 = 0uLL;
    v20 = *(std::__shared_weak_count **)(v1 + 152);
    *(_OWORD *)(v1 + 144) = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (*((_QWORD *)&v28 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v16)
    {
      v26 = (unint64_t *)&v16->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
}

void sub_1BF58A7D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  pthread_mutex_unlock(&ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance);
  _Unwind_Resume(a1);
}

void data::TransportService::State::startLimitTimer_sync(data::TransportService::State *this)
{
  dispatch_time_t v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  NSObject *v16;
  unint64_t v17;
  NSObject *v18;
  _QWORD handler[6];
  std::__shared_weak_count *v20;
  uint8_t buf[16];

  if (*((_DWORD *)this + 26) == 1)
  {
    v2 = dispatch_time(0, 1000000000 * *((unsigned int *)this + 27) + 500000000);
    v3 = *((_QWORD *)this + 20);
    if (v3)
    {
      dispatch_source_cancel(v3);
      v4 = *((_QWORD *)this + 20);
      *((_QWORD *)this + 20) = 0;
      if (v4)
        dispatch_release(v4);
      v5 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Limit timer stopped", buf, 2u);
      }
    }
    v6 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *((dispatch_queue_t *)this + 11));
    v7 = *((_QWORD *)this + 20);
    *((_QWORD *)this + 20) = v6;
    if (v7)
    {
      dispatch_release(v7);
      v6 = *((_QWORD *)this + 20);
    }
    dispatch_source_set_timer(v6, v2, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
    if (!v8 || (v9 = *((_QWORD *)this + 9), (v10 = std::__shared_weak_count::lock(v8)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v11 = v10;
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    v16 = *((_QWORD *)this + 20);
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke;
    handler[3] = &__block_descriptor_tmp_24;
    handler[4] = this;
    handler[5] = v9;
    v20 = v11;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    dispatch_source_set_event_handler(v16, handler);
    dispatch_activate(*((dispatch_object_t *)this + 20));
    v18 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I Limit timer started", buf, 2u);
    }
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v11);
  }
}

void ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7912178;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4data16TransportService5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSNSt3__110shared_ptrIKN4data16TransportService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ___ZN4data16TransportService5State20startLimitTimer_syncEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  data::TransportService::State *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint8_t v9[16];
  std::__shared_weak_count *v11;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = (data::TransportService::State *)a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v11 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        v6 = *((_QWORD *)v3 + 5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v9 = 0;
          _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Limit timer expired", v9, 2u);
        }
        data::TransportService::State::unblockThrottling_sync(v3);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BF58ACDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c54_ZTSNSt3__18weak_ptrIN4data16TransportService5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  void **v4;
  int v5;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  ApplePDPHelperInterface *Instance;
  NSObject *v10;
  int v11;
  void *__p[2];
  char v13;
  uint8_t buf[4];
  void **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)
    && ((data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(a1 + 40), __p),
         v13 >= 0)
      ? (v4 = __p)
      : (v4 = (void **)__p[0]),
        *(_DWORD *)buf = 136315138,
        v15 = v4,
        _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Config set to %s", buf, 0xCu),
        v13 < 0))
  {
    operator delete(__p[0]);
    v5 = *(_DWORD *)(v2 + 104);
    v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6)
      goto LABEL_13;
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 104);
    v6 = *(_DWORD *)(a1 + 40);
    if (v5 == v6)
      goto LABEL_13;
  }
  *(_DWORD *)(v2 + 104) = v6;
  v7 = *(NSObject **)(v2 + 40);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v6;
    _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Throttling %d", (uint8_t *)__p, 8u);
  }
  Instance = (ApplePDPHelperInterface *)ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v8);
  if ((ApplePDPHelperInterface::enableLowPowerPDPThrottle(Instance) & 1) == 0)
  {
    v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v6;
      _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Failed setting throttling to %d", (uint8_t *)__p, 8u);
    }
  }
  v5 = *(_DWORD *)(a1 + 40);
LABEL_13:
  if (v5 == 1)
  {
    v11 = *(_DWORD *)(a1 + 44);
    if (*(_DWORD *)(v2 + 108) != v11)
    {
      *(_DWORD *)(v2 + 108) = v11;
      if (*(_QWORD *)(v2 + 160))
        data::TransportService::State::startLimitTimer_sync((data::TransportService::State *)v2);
    }
  }
}

void ___ZNK4data16TransportService5State9dumpStateEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _BYTE *v3;
  _BOOL8 v4;
  uint64_t v5;
  const char *v6;
  int NumLowPowerPDPThrottleStats;
  NSObject *v8;
  _BYTE __p[14];
  __int16 v10;
  int v11;
  char v12;
  uint8_t buf[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    data::TransportService::ThrottlingConfig::asString((data::TransportService::ThrottlingConfig *)(v1 + 104), __p);
    if (v12 >= 0)
      v3 = __p;
    else
      v3 = *(_BYTE **)__p;
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Config: %s", buf, 0xCu);
    if (v12 < 0)
      operator delete(*(void **)__p);
    v2 = *(NSObject **)(v1 + 40);
  }
  v4 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    v5 = *(int *)(v1 + 112);
    if (v5 > 2)
      v6 = "???";
    else
      v6 = off_1E7912478[v5];
    *(_DWORD *)__p = 136315138;
    *(_QWORD *)&__p[4] = v6;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Low Power State %s", __p, 0xCu);
  }
  memset(buf, 0, 12);
  ApplePDPHelperInterface::getInstance((ApplePDPHelperInterface *)v4);
  NumLowPowerPDPThrottleStats = ApplePDPHelperInterface::getNumLowPowerPDPThrottleStats();
  v8 = *(NSObject **)(v1 + 40);
  if (NumLowPowerPDPThrottleStats)
  {
    if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__p = 67109632;
      *(_DWORD *)&__p[4] = *(_DWORD *)buf;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = *(_DWORD *)&buf[4];
      v10 = 1024;
      v11 = *(_DWORD *)&buf[8];
      _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Blocked outgoing packets: %u, non-baseband wakes: %u, incoming traffic deactivations: %u", __p, 0x14u);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v1 + 40), OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__p = 0;
    _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Failed to query throttle stats", __p, 2u);
  }
}

void ___ZN4data16TransportService5State17unblockThrottlingEv_block_invoke(uint64_t a1)
{
  data::TransportService::State *v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = *(data::TransportService::State **)(a1 + 32);
  v2 = *((_QWORD *)v1 + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Unblocking throttling", v3, 2u);
  }
  data::TransportService::State::unblockThrottling_sync(v1);
}

uint64_t __cxx_global_var_init_3()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<sys::UIObserver>::~PthreadMutexGuardPolicy, &ctu::Singleton<sys::UIObserver,sys::UIObserver,ctu::PthreadMutexGuardPolicy<sys::UIObserver>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void NetworkStatsInterface::create(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x68uLL);
  v5 = (uint64_t)v4;
  v6 = (std::__shared_weak_count *)a1[1];
  v12 = *a1;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  NetworkStatsInterface::NetworkStatsInterface(v4, &v12);
  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(a2, v5);
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF58B29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF58B2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF58B2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

_QWORD *NetworkStatsInterface::NetworkStatsInterface(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _BYTE v6[16];
  dispatch_object_t object;

  *a1 = off_1E79124A0;
  v4 = a1 + 9;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v6, "com.apple.telephony.abm", "net.stats");
  object = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(v4, "net.stats", QOS_CLASS_DEFAULT, &object);
  if (object)
    dispatch_release(object);
  ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(a1, (uint64_t)v6, a2);
  *a1 = off_1E7912610;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v6);
  *a1 = off_1E79124A0;
  return a1;
}

void sub_1BF58B3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1BF58B3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a10);
  _Unwind_Resume(a1);
}

const char *NetworkStatsInterface::getName(NetworkStatsInterface *this)
{
  return "net.stats";
}

void NetworkStatsInterface::query(NetworkStatsInterface *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  __n128 (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  std::__shared_weak_count_vtbl *v18;
  std::__shared_weak_count *v19;

  v13 = 0;
  v14 = &v13;
  v15 = 0x3802000000;
  v16 = __Block_byref_object_copy_;
  v17 = __Block_byref_object_dispose_;
  v18 = 0;
  v19 = 0;
  v4 = (std::__shared_weak_count_vtbl *)operator new(0x18uLL);
  v4->__on_zero_shared = 0;
  v4->~__shared_weak_count_0 = 0;
  v4->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v4->~__shared_weak_count_0;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_1E7912690;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  v18 = v4;
  v19 = v5;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZN21NetworkStatsInterface5queryEv_block_invoke;
  v12[3] = &unk_1E79124D8;
  v12[4] = &v13;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v12);
  v6 = v14[6];
  *a2 = v14[5];
  a2[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  _Block_object_dispose(&v13, 8);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BF58B538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  void *v14;
  uint64_t v15;

  operator delete(v14);
  _Block_object_dispose(&a14, 8);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15 + 40);
  _Unwind_Resume(a1);
}

void NetworkStatsInterface::applyInterfaces(uint64_t a1, uint64_t a2)
{
  int v3;
  int *v4;
  NSObject *v5;
  int v6;
  char *v7;
  ifaddrs *v8;
  sockaddr *ifa_addr;
  int sa_family;
  unsigned int ifa_flags;
  const char *ifa_name;
  size_t v13;
  _BYTE *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  _BYTE *v20;
  void **v21;
  void **v22;
  char *p_p;
  int64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  void **v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int64_t v32;
  _BYTE *v33;
  unint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  _BYTE *v39;
  _BYTE *v40;
  BOOL v41;
  uint64_t v42;
  const char *v43;
  unsigned int v44;
  void **v45;
  unsigned int v46;
  ifaddrs *v48;
  uint64_t v49;
  void *__dst[3];
  void *__p;
  unint64_t v53;
  uint64_t v54;
  ifaddrs *v55;
  char *__endptr;
  _BYTE buf[24];
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v55 = (ifaddrs *)0xAAAAAAAAAAAAAAAALL;
  v3 = getifaddrs(&v55);
  if (v3)
  {
    v4 = __error();
    v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *v4;
      v7 = strerror(v6);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v6;
      *(_WORD *)&buf[14] = 2080;
      *(_QWORD *)&buf[16] = v7;
      _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Failed to get data stats, error %d errno=%d(%s)", buf, 0x18u);
    }
    return;
  }
  v8 = v55;
  if (v55)
  {
    v49 = a2;
    while (1)
    {
      v53 = 0xAAAAAAAAAAAAAAAALL;
      v54 = 0x6AAAAAAAAAAAAAALL;
      __p = (void *)0xAA0070695F706470;
      ifa_addr = v8->ifa_addr;
      if (!ifa_addr)
      {
        v8 = v8->ifa_next;
        goto LABEL_7;
      }
      sa_family = ifa_addr->sa_family;
      ifa_flags = v8->ifa_flags;
      memset(__dst, 170, sizeof(__dst));
      ifa_name = v8->ifa_name;
      v13 = strlen(ifa_name);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = (_BYTE *)v13;
      if (v13 >= 0x17)
        break;
      HIBYTE(__dst[2]) = v13;
      v15 = __dst;
      if (v13)
        goto LABEL_16;
LABEL_17:
      v14[(_QWORD)v15] = 0;
      v18 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v45 = __dst;
        if (SHIBYTE(__dst[2]) < 0)
          v45 = (void **)__dst[0];
        v46 = v8->ifa_flags;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v45;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = sa_family;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v46;
        v58 = 1024;
        v59 = ifa_flags & 1;
        _os_log_debug_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEBUG, "#D Found interface %s, family %u, flags %u, up %d", buf, 0x1Eu);
        if (sa_family != 30 && sa_family != 18)
          goto LABEL_79;
      }
      else if (sa_family != 30 && sa_family != 18)
      {
        goto LABEL_79;
      }
      v20 = (_BYTE *)HIBYTE(__dst[2]);
      v21 = (void **)__dst[0];
      if (SHIBYTE(__dst[2]) >= 0)
        v22 = __dst;
      else
        v22 = (void **)__dst[0];
      if (v54 >= 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      if (v54 >= 0)
        v24 = HIBYTE(v54);
      else
        v24 = v53;
      if (!v24)
      {
        v32 = 0;
LABEL_44:
        v33 = (_BYTE *)(v32 + v24);
        if ((v20 & 0x80) != 0)
        {
          v20 = __dst[1];
          if (__dst[1] < v33)
LABEL_102:
            std::string::__throw_out_of_range[abi:ne180100]();
        }
        else
        {
          if (v33 > v20)
            goto LABEL_102;
          v21 = __dst;
        }
        v34 = v20 - v33;
        if ((unint64_t)(v20 - v33) > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v34 >= 0x17)
        {
          v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v36 = v34 | 7;
          v37 = v36 + 1;
          v35 = operator new(v36 + 1);
          *(_QWORD *)&buf[8] = v20 - v33;
          *(_QWORD *)&buf[16] = v37 | 0x8000000000000000;
          *(_QWORD *)buf = v35;
        }
        else
        {
          buf[23] = (_BYTE)v20 - (_BYTE)v33;
          v35 = buf;
          if (v20 == v33)
          {
LABEL_56:
            v35[v34] = 0;
            __endptr = 0;
            if (buf[23] >= 0)
              v38 = buf[23];
            else
              v38 = *(_QWORD *)&buf[8];
            if (v38
              && (buf[23] >= 0 ? (v39 = buf) : (v39 = *(_BYTE **)buf),
                  (v40 = memchr(v39, 45, v38)) != 0 && v40 - v39 != -1))
            {
              v41 = 0;
              v42 = 2863311530;
              if ((buf[23] & 0x80000000) != 0)
              {
LABEL_66:
                operator delete(*(void **)buf);
                if (!v41)
                  goto LABEL_79;
LABEL_78:
                (*(void (**)(uint64_t, ifaddrs *, uint64_t))(v49 + 16))(v49, v8, v42);
                goto LABEL_79;
              }
            }
            else
            {
              *__error() = 0;
              if (buf[23] >= 0)
                v43 = buf;
              else
                v43 = *(const char **)buf;
              v44 = strtoul(v43, &__endptr, 10);
              v41 = 0;
              if (*__error())
              {
                v42 = 2863311530;
                if ((buf[23] & 0x80000000) != 0)
                  goto LABEL_66;
              }
              else
              {
                v42 = 2863311530;
                if (__endptr)
                {
                  v41 = *__endptr == 0;
                  if (*__endptr)
                    v42 = 2863311530;
                  else
                    v42 = v44;
                }
                if ((buf[23] & 0x80000000) != 0)
                  goto LABEL_66;
              }
            }
            if (!v41)
              goto LABEL_79;
            goto LABEL_78;
          }
        }
        memmove(v35, &v33[(_QWORD)v21], v20 - v33);
        goto LABEL_56;
      }
      if (SHIBYTE(__dst[2]) >= 0)
        v25 = HIBYTE(__dst[2]);
      else
        v25 = (uint64_t)__dst[1];
      if (v25 >= v24)
      {
        v26 = (char *)v22 + v25;
        v27 = *p_p;
        v28 = v22;
        while (1)
        {
          v29 = v25 - v24;
          if (v29 == -1)
            goto LABEL_79;
          v30 = (char *)memchr(v28, v27, v29 + 1);
          if (!v30)
            goto LABEL_79;
          v31 = v30;
          if (!memcmp(v30, p_p, v24))
            break;
          v28 = (void **)(v31 + 1);
          v25 = v26 - (v31 + 1);
          if (v25 < v24)
            goto LABEL_79;
        }
        if (v31 != v26)
        {
          v32 = v31 - (char *)v22;
          if (v31 - (char *)v22 != -1)
            goto LABEL_44;
        }
      }
LABEL_79:
      if (SHIBYTE(__dst[2]) < 0)
      {
        operator delete(__dst[0]);
        v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0)
LABEL_83:
          operator delete(__p);
      }
      else
      {
        v8 = v8->ifa_next;
        if (SHIBYTE(v54) < 0)
          goto LABEL_83;
      }
LABEL_7:
      if (!v8)
      {
        v48 = v55;
        goto LABEL_98;
      }
    }
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    __dst[2] = (void *)(v17 | 0x8000000000000000);
    __dst[0] = v15;
LABEL_16:
    memmove(v15, ifa_name, (size_t)v14);
    goto LABEL_17;
  }
  v48 = 0;
LABEL_98:
  MEMORY[0x1C3B8C718](v48);
}

void sub_1BF58BAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((a24 & 0x80000000) == 0)
LABEL_7:
      _Unwind_Resume(a1);
  }
  else if ((a24 & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete(a19);
  goto LABEL_7;
}

void ___ZN21NetworkStatsInterface5queryEv_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  const char *v7;
  size_t v8;
  size_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  unsigned int v17;
  char *v18;
  uint64_t *v19;
  uint64_t *v20;
  void **v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  _BYTE __dst[24];

  v6 = *(_DWORD *)(a2 + 16);
  memset(__dst, 170, sizeof(__dst));
  v7 = *(const char **)(a2 + 8);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = operator new(v11 + 1);
    *(_QWORD *)&__dst[8] = v9;
    *(_QWORD *)&__dst[16] = v12 | 0x8000000000000000;
    *(_QWORD *)__dst = v10;
    goto LABEL_8;
  }
  __dst[23] = v8;
  v10 = __dst;
  if (v8)
LABEL_8:
    memmove(v10, v7, v9);
  v10[v9] = 0;
  v13 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v15 = v13 + 1;
  v14 = v13[1];
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        v16 = (uint64_t **)v14;
        v17 = *((_DWORD *)v14 + 8);
        if (v17 <= a3)
          break;
        v14 = *v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_16;
      }
      if (v17 >= a3)
        break;
      v14 = v16[1];
      if (!v14)
      {
        v15 = v16 + 1;
        goto LABEL_16;
      }
    }
    v18 = (char *)v16;
  }
  else
  {
    v16 = v13 + 1;
LABEL_16:
    v18 = (char *)operator new(0x50uLL);
    *((_DWORD *)v18 + 8) = a3;
    *(_OWORD *)(v18 + 40) = 0u;
    *(_OWORD *)(v18 + 56) = 0u;
    *((_QWORD *)v18 + 9) = 0;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = (uint64_t *)v18;
    v19 = (uint64_t *)**v13;
    v20 = (uint64_t *)v18;
    if (v19)
    {
      *v13 = v19;
      v20 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v13[1], v20);
    v13[2] = (uint64_t *)((char *)v13[2] + 1);
  }
  v18[48] |= v6 & 1;
  v21 = (void **)(v18 + 56);
  if (v18 + 56 != __dst)
  {
    if (v18[79] < 0)
    {
      if (__dst[23] >= 0)
        v22 = __dst;
      else
        v22 = *(_BYTE **)__dst;
      if (__dst[23] >= 0)
        v23 = __dst[23];
      else
        v23 = *(_QWORD *)&__dst[8];
      std::string::__assign_no_alias<false>(v21, v22, v23);
    }
    else if ((__dst[23] & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v21, *(void **)__dst, *(size_t *)&__dst[8]);
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)__dst;
      *((_QWORD *)v18 + 9) = *(_QWORD *)&__dst[16];
    }
  }
  v24 = *(_QWORD *)(a2 + 48);
  if (v24)
  {
    v25 = *((_DWORD *)v18 + 11);
    *((_DWORD *)v18 + 10) += *(_DWORD *)(v24 + 28);
    *((_DWORD *)v18 + 11) = v25 + *(_DWORD *)(v24 + 20);
  }
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
}

void sub_1BF58BD50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NetworkStatsInterface::getInterfaceList(NetworkStatsInterface *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __n128 (*v13)(_QWORD *, uint64_t);
  void (*v14)(uint64_t);
  void *__p;
  void *v16;
  uint64_t v17;

  v10 = 0;
  v11 = &v10;
  v12 = 0x4002000000;
  v13 = __Block_byref_object_copy__3;
  v14 = __Block_byref_object_dispose__4;
  v17 = 0;
  __p = 0;
  v16 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke;
  v9[3] = &unk_1E7912500;
  v9[4] = &v10;
  NetworkStatsInterface::applyInterfaces((uint64_t)this, (uint64_t)v9);
  v3 = v11;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = (_BYTE *)v3[5];
  v4 = (_BYTE *)v3[6];
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    *a2 = v7;
    v8 = &v7[4 * (v6 >> 2)];
    a2[2] = v8;
    memcpy(v7, v5, v6);
    a2[1] = v8;
  }
  _Block_object_dispose(&v10, 8);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void sub_1BF58BE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  _Block_object_dispose(&a15, 8);
  if (!__p)
    _Unwind_Resume(a1);
  a21 = (uint64_t)__p;
  operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZNK21NetworkStatsInterface16getInterfaceListEv_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  _DWORD *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v6 = (char *)v4[6];
  v5 = v4[7];
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *(_DWORD *)v6 = a3;
    v8 = (uint64_t)(v6 + 4);
    goto LABEL_22;
  }
  v9 = (char *)v4[5];
  v10 = (v6 - v9) >> 2;
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) >> 62)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v12 = v5 - (_QWORD)v9;
  if (v12 >> 1 > v11)
    v11 = v12 >> 1;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
    v13 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v13 = v11;
  if (v13)
  {
    if (v13 >> 62)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v14 = operator new(4 * v13);
    v15 = &v14[4 * v10];
    v16 = &v14[4 * v13];
    *v15 = a3;
    v8 = (uint64_t)(v15 + 1);
    v17 = v6 - v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v14 = 0;
  v15 = (_DWORD *)(4 * v10);
  v16 = 0;
  *(_DWORD *)(4 * v10) = a3;
  v8 = 4 * v10 + 4;
  v17 = v6 - v9;
  if (v6 != v9)
  {
LABEL_14:
    v18 = v17 - 4;
    if (v18 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)(v9 - v14) < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 2) + 1;
    v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
    v7 = &v6[-v20];
    v15 = (_DWORD *)((char *)v15 - v20);
    v21 = &v14[4 * v10 - 16];
    v22 = v6 - 16;
    v23 = v19 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v24 = *(_OWORD *)v22;
      *(v21 - 1) = *((_OWORD *)v22 - 1);
      *v21 = v24;
      v21 -= 2;
      v22 -= 32;
      v23 -= 8;
    }
    while (v23);
    if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v25 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *--v15 = v25;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  v4[5] = v15;
  v4[6] = v8;
  v4[7] = v16;
  if (v9)
    operator delete(v9);
LABEL_22:
  v4[6] = v8;
}

void NetworkStatsInterface::~NetworkStatsInterface(NetworkStatsInterface *this)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E7912650;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = off_1E7912650;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = *((_QWORD *)this + 12);
  if (v2)
    dispatch_release(v2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(this);
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stats");
}

uint64_t ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      std::string::__throw_length_error[abi:ne180100]();
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      v6 = __dst;
    }
  }
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void **std::string::__assign_no_alias<false>(void **a1, void *__src, size_t __len)
{
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v13;
  uint64_t v14;

  v6 = (unint64_t)a1[2];
  v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) > __len)
  {
    v8 = *a1;
    a1[1] = (void *)__len;
    if (__len)
      memmove(v8, __src, __len);
    goto LABEL_12;
  }
  v9 = 0x7FFFFFFFFFFFFFF7;
  if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1)
    std::string::__throw_length_error[abi:ne180100]();
  v10 = v7 - 1;
  v11 = a1;
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v10 > 0x3FFFFFFFFFFFFFF2)
      goto LABEL_7;
LABEL_14:
    v13 = 2 * v10;
    if (__len > 2 * v10)
      v13 = __len;
    v14 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v14 = v13 | 7;
    if (v13 >= 0x17)
      v9 = v14 + 1;
    else
      v9 = 23;
    v8 = operator new(v9);
    if (!__len)
      goto LABEL_9;
    goto LABEL_8;
  }
  v11 = *a1;
  if (v10 <= 0x3FFFFFFFFFFFFFF2)
    goto LABEL_14;
LABEL_7:
  v8 = operator new(0x7FFFFFFFFFFFFFF7uLL);
  if (__len)
LABEL_8:
    memcpy(v8, __src, __len);
LABEL_9:
  if (v10 != 22)
    operator delete(v11);
  a1[1] = (void *)__len;
  a1[2] = (void *)(v9 | 0x8000000000000000);
  *a1 = v8;
LABEL_12:
  *((_BYTE *)v8 + __len) = 0;
  return a1;
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7911230, MEMORY[0x1E0DE42E0]);
}

void sub_1BF58C3C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF58C4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF58C514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<NetworkStatsInterface>::shared_ptr[abi:ne180100]<NetworkStatsInterface,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79125C0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF58C630(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF58C650(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<NetworkStatsInterface *,std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface *)#1},std::allocator<NetworkStatsInterface>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21NetworkStatsInterfaceE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<NetworkStatsInterface> ctu::SharedSynchronizable<NetworkStatsInterface>::make_shared_ptr<NetworkStatsInterface>(NetworkStatsInterface*)::{lambda(NetworkStatsInterface*)#1}::operator() const(NetworkStatsInterface*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable(_QWORD *a1, const char *a2, dispatch_qos_class_t a3, dispatch_object_t *a4)
{
  NSObject *v8;
  NSObject *initially_inactive;
  NSObject *v10;
  NSObject *v11;

  v8 = *a4;
  if (*a4)
    dispatch_retain(*a4);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v10 = dispatch_queue_create_with_target_V2(a2, initially_inactive, v8);
  dispatch_set_qos_class_floor(v10, a3, 0);
  dispatch_activate(v10);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = v10;
  if (v10)
    dispatch_retain(v10);
  v11 = *a4;
  a1[3] = *a4;
  if (v11)
    dispatch_retain(v11);
  if (v10)
    dispatch_release(v10);
  if (v8)
    dispatch_release(v8);
  return a1;
}

_QWORD *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7912650;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF58C878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7912650;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7912650;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7912650;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<NetworkStatsInterface,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7912650;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__on_zero_shared(uint64_t a1)
{
  char **v1;

  v1 = *(char ***)(a1 + 24);
  if (v1)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(*(_QWORD *)(a1 + 24), v1[1]);
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<std::map<unsigned int,NetworkStat> *,std::shared_ptr<std::map<unsigned int,NetworkStat>>::__shared_ptr_default_delete<std::map<unsigned int,NetworkStat>,std::map<unsigned int,NetworkStat>>,std::allocator<std::map<unsigned int,NetworkStat>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73B496)
    return a1 + 24;
  if (((v3 & 0x80000001BF73B496 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73B496))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73B496 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<unsigned int,NetworkStat>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,NetworkStat>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,NetworkStat>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[79] < 0)
      operator delete(*((void **)a2 + 7));
    operator delete(a2);
  }
}

void BudgetData::BudgetData(BudgetData *this)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
}

void BudgetData::~BudgetData(BudgetData *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

void BudgetData::BudgetData(BudgetData *this, const BudgetData *a2)
{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (this != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

{
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = (char *)this + 8;
  if (this != a2)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>((uint64_t)this, *(_QWORD **)a2, (_QWORD *)a2 + 1);
}

void sub_1BF58CBB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1BF58CC10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *BudgetData::BudgetData(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = result + 1;
  v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[2])
    v3 = (_QWORD *)(result[1] + 16);
  else
    v3 = result;
  *v3 = result + 1;
  *(_QWORD *)a2 = a2 + 8;
  return result;
}

{
  uint64_t v2;
  _QWORD *v3;

  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  *result = *(_QWORD *)a2;
  *(_QWORD *)a2 = result + 1;
  v2 = result[1];
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = 0;
  if (result[2])
    v3 = (_QWORD *)(result[1] + 16);
  else
    v3 = result;
  *v3 = result + 1;
  *(_QWORD *)a2 = a2 + 8;
  return result;
}

uint64_t BudgetData::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
    std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

uint64_t BudgetData::get(uint64_t **a1, unsigned int a2)
{
  char v2;
  unsigned __int8 *v4;
  uint64_t **v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;

  v2 = a2;
  v5 = a1 + 1;
  v4 = (unsigned __int8 *)a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[28];
        if (v7 <= a2)
          break;
        v4 = (unsigned __int8 *)*v6;
        v5 = (uint64_t **)v6;
        if (!*v6)
          goto LABEL_8;
      }
      if (v7 >= a2)
        break;
      v4 = (unsigned __int8 *)v6[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v6 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_8:
    v8 = v6;
    v6 = operator new(0x28uLL);
    *((_BYTE *)v6 + 28) = v2;
    *((_BYTE *)v6 + 32) = 0;
    *((_BYTE *)v6 + 36) = 0;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = v6;
    v9 = (uint64_t *)**a1;
    v10 = v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6[4];
}

uint64_t *BudgetData::set(uint64_t *result, unsigned int a2, int a3)
{
  char v4;
  uint64_t *v5;
  unsigned __int8 *v6;
  uint64_t **v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;

  v4 = a2;
  v5 = result;
  v7 = (uint64_t **)(result + 1);
  v6 = (unsigned __int8 *)result[1];
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v8 = v6;
        v9 = v6[28];
        if (v9 <= a2)
          break;
        v6 = (unsigned __int8 *)*v8;
        v7 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_8;
      }
      if (v9 >= a2)
        break;
      v6 = (unsigned __int8 *)v8[1];
      if (!v6)
      {
        v7 = (uint64_t **)(v8 + 1);
        goto LABEL_8;
      }
    }
  }
  else
  {
    v8 = result + 1;
LABEL_8:
    v10 = v8;
    v8 = operator new(0x28uLL);
    *((_BYTE *)v8 + 28) = v4;
    *((_BYTE *)v8 + 32) = 0;
    *((_BYTE *)v8 + 36) = 0;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v10;
    *v7 = v8;
    v11 = *(_QWORD *)*v5;
    v12 = v8;
    if (v11)
    {
      *v5 = v11;
      v12 = *v7;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[1], v12);
    ++v5[2];
  }
  *((_DWORD *)v8 + 8) = a3;
  *((_BYTE *)v8 + 36) = 1;
  return result;
}

void BudgetData::clear(BudgetData *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 8);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 2) = 0;
  *v2 = 0;
}

_QWORD *BudgetData::for_each(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = result + 1;
  v3 = (_QWORD *)*result;
  if ((_QWORD *)*result != result + 1)
  {
    do
    {
      v5 = *(_QWORD *)(a2 + 24);
      if (!v5)
        std::__throw_bad_function_call[abi:ne180100]();
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v5 + 48))(v5, (uint64_t)v3 + 28, v3 + 4);
      if (!(_DWORD)result)
        break;
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void std::__tree<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__map_value_compare<abm::BasebandCPMSPowerBudgetScale,std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::less<abm::BasebandCPMSPowerBudgetScale>,true>,std::allocator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,std::__tree_node<std::__value_type<abm::BasebandCPMSPowerBudgetScale,std::optional<unsigned int>>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *i;
  uint64_t ***v25;
  uint64_t *v26;
  uint64_t *v27;
  int v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t *v35;

  v4 = a2;
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v9 = v6[1] ? (uint64_t *)v6[1] : v6;
    if (v9)
    {
      v10 = (uint64_t *)v9[2];
      if (v10)
      {
        v11 = (uint64_t *)*v10;
        if ((uint64_t *)*v10 == v9)
        {
          *v10 = 0;
          while (1)
          {
            v35 = (uint64_t *)v10[1];
            if (!v35)
              break;
            do
            {
              v10 = v35;
              v35 = (uint64_t *)*v35;
            }
            while (v35);
          }
        }
        else
        {
          for (v10[1] = 0; v11; v11 = (uint64_t *)v10[1])
          {
            do
            {
              v10 = v11;
              v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
        }
      }
      if (a2 != a3)
      {
        v12 = v9;
        v13 = v4;
        while (1)
        {
          v9 = v10;
          v14 = *((unsigned __int8 *)v13 + 28);
          *((_BYTE *)v12 + 28) = v14;
          v15 = *((_DWORD *)v13 + 8);
          *((_BYTE *)v12 + 36) = *((_BYTE *)v13 + 36);
          *((_DWORD *)v12 + 8) = v15;
          v16 = *v8;
          v17 = (uint64_t **)(a1 + 8);
          v18 = (uint64_t **)(a1 + 8);
          if (*v8)
            break;
LABEL_14:
          *v12 = 0;
          v12[1] = 0;
          v12[2] = (uint64_t)v17;
          *v18 = v12;
          v19 = **(_QWORD **)a1;
          if (v19)
            goto LABEL_15;
LABEL_16:
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v12);
          ++*(_QWORD *)(a1 + 16);
          if (v10)
          {
            v10 = (uint64_t *)v10[2];
            if (v10)
            {
              v22 = (uint64_t *)*v10;
              if ((uint64_t *)*v10 == v9)
              {
                *v10 = 0;
                while (1)
                {
                  v23 = (uint64_t *)v10[1];
                  if (!v23)
                    break;
                  do
                  {
                    v10 = v23;
                    v23 = (uint64_t *)*v23;
                  }
                  while (v23);
                }
              }
              else
              {
                for (v10[1] = 0; v22; v22 = (uint64_t *)v10[1])
                {
                  do
                  {
                    v10 = v22;
                    v22 = (uint64_t *)*v22;
                  }
                  while (v22);
                }
              }
            }
          }
          else
          {
            v10 = 0;
          }
          v20 = (_QWORD *)v13[1];
          if (v20)
          {
            do
            {
              v4 = v20;
              v20 = (_QWORD *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              v4 = (_QWORD *)v13[2];
              v21 = *v4 == (_QWORD)v13;
              v13 = v4;
            }
            while (!v21);
          }
          if (v9)
          {
            v12 = v9;
            v13 = v4;
            if (v4 != a3)
              continue;
          }
          goto LABEL_42;
        }
        do
        {
          while (1)
          {
            v17 = (uint64_t **)v16;
            if (v14 >= *((unsigned __int8 *)v16 + 28))
              break;
            v16 = (uint64_t *)*v16;
            v18 = v17;
            if (!*v17)
              goto LABEL_14;
          }
          v16 = (uint64_t *)v16[1];
        }
        while (v16);
        v18 = v17 + 1;
        *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v17;
        v17[1] = v12;
        v19 = **(_QWORD **)a1;
        if (!v19)
          goto LABEL_16;
LABEL_15:
        *(_QWORD *)a1 = v19;
        v12 = *v18;
        goto LABEL_16;
      }
LABEL_42:
      std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v9);
      if (v10)
      {
        for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
          v10 = i;
        std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(a1, v10);
      }
    }
  }
  if (v4 != a3)
  {
    v25 = (uint64_t ***)(a1 + 8);
    while (1)
    {
      v26 = (uint64_t *)operator new(0x28uLL);
      v27 = v26;
      v28 = *((_DWORD *)v4 + 9);
      *(uint64_t *)((char *)v26 + 28) = *(_QWORD *)((char *)v4 + 28);
      *((_DWORD *)v26 + 9) = v28;
      v29 = *v25;
      v30 = (uint64_t **)(a1 + 8);
      v31 = (uint64_t **)(a1 + 8);
      if (*v25)
        break;
LABEL_54:
      *v26 = 0;
      v26[1] = 0;
      v26[2] = (uint64_t)v30;
      *v31 = v26;
      v32 = **(_QWORD **)a1;
      if (v32)
        goto LABEL_55;
LABEL_56:
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v27);
      ++*(_QWORD *)(a1 + 16);
      v33 = (_QWORD *)v4[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (_QWORD *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (_QWORD *)v4[2];
          v21 = *v34 == (_QWORD)v4;
          v4 = v34;
        }
        while (!v21);
      }
      v4 = v34;
      if (v34 == a3)
        return;
    }
    do
    {
      while (1)
      {
        v30 = v29;
        if (*((unsigned __int8 *)v26 + 28) >= *((unsigned __int8 *)v29 + 28))
          break;
        v29 = (uint64_t **)*v29;
        v31 = v30;
        if (!*v30)
          goto LABEL_54;
      }
      v29 = (uint64_t **)v29[1];
    }
    while (v29);
    v31 = v30 + 1;
    *v26 = 0;
    v26[1] = 0;
    v26[2] = (uint64_t)v30;
    v30[1] = v26;
    v32 = **(_QWORD **)a1;
    if (!v32)
      goto LABEL_56;
LABEL_55:
    *(_QWORD *)a1 = v32;
    v27 = *v31;
    goto LABEL_56;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  void *v1;

  std::exception::~exception(this);
  operator delete(v1);
}

void coex::Module::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11[2];

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x40uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v11[0] = v6;
  v11[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  coex::Module::Module(v4, v11);
  *a2 = v5;
  v10 = operator new(0x20uLL);
  *v10 = off_1E7913460;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v5;
  a2[1] = v10;
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

void sub_1BF58D3A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  _Unwind_Resume(a1);
}

_QWORD *coex::Module::Module(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;
  _QWORD block[5];

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *a1 = off_1E79228B8;
    a1[1] = v4;
    a1[2] = v5;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    std::__shared_weak_count::__release_weak(v5);
    *a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    *((_OWORD *)a1 + 1) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *a1 = &unk_1E79133B0;
    a1[1] = v4;
  }
  *a1 = off_1E7912720;
  a1[6] = 0;
  a1[7] = 0;
  if (!capabilities::abs::supportsCoex((capabilities::abs *)a1))
    return a1;
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v11 = unk_1ED70F6A0;
    v31 = GetABMLogServer(void)::sLogServer;
    v32 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_15;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v11 = unk_1ED70F6A0;
    v31 = GetABMLogServer(void)::sLogServer;
    v32 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_15;
  }
  v12 = (unint64_t *)(v11 + 8);
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
LABEL_15:
  v14 = *a2;
  v15 = (std::__shared_weak_count *)a2[1];
  v29 = v14;
  v30 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  coex::Module::State::create(&v31, &v29, (coex::Module::State **)&v33);
  v18 = v33;
  v33 = 0uLL;
  v19 = (std::__shared_weak_count *)a1[7];
  *((_OWORD *)a1 + 3) = v18;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  v25 = v32;
  if (!v32)
    return a1;
  v26 = (unint64_t *)&v32->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
    return a1;
  ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
  std::__shared_weak_count::__release_weak(v25);
  return a1;
}

void sub_1BF58D6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  Service *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;

  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13);
  Service::~Service(v11);
  _Unwind_Resume(a1);
}

void sub_1BF58D6E4(_Unwind_Exception *a1)
{
  Service *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, coex::Module::State **a3@<X8>)
{
  CommandDriverFactory *v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count **v26;
  std::__shared_weak_count **v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  coex::Module::State *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD v67[2];
  _QWORD v68[2];
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t v73;
  unint64_t v74;
  __int128 block;
  void (*v76)(uint64_t);
  void *v77;
  uint64_t *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;

  v73 = 0xAAAAAAAAAAAAAAAALL;
  v74 = 0xAAAAAAAAAAAAAAAALL;
  v6 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v7 = off_1ED70F4D0;
  if (!off_1ED70F4D0)
  {
    CommandDriverFactory::create_default_global(v6);
    v8 = block;
    block = 0uLL;
    v9 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    off_1ED70F4D0 = v8;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (*((_QWORD *)&block + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&block + 1) + 16))(*((_QWORD *)&block + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&block + 1));
      }
    }
    v7 = off_1ED70F4D0;
  }
  v79 = v7;
  v80 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
  if (*(&off_1ED70F4D0 + 1))
  {
    v14 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  v76 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v77 = &__block_descriptor_tmp_13_8;
  v78 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v17 = unk_1ED70F6A0;
    v71 = GetABMLogServer(void)::sLogServer;
    v72 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_21;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v17 = unk_1ED70F6A0;
    v71 = GetABMLogServer(void)::sLogServer;
    v72 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_21;
  }
  v18 = (unint64_t *)(v17 + 8);
  do
    v19 = __ldxr(v18);
  while (__stxr(v19 + 1, v18));
LABEL_21:
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(&v73, v7, &v71);
  v20 = v72;
  if (v72)
  {
    v21 = (unint64_t *)&v72->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v80;
  if (v80)
  {
    v24 = (unint64_t *)&v80->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  *a3 = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  a3[1] = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  v26 = (std::__shared_weak_count **)operator new(0x118uLL);
  v27 = v26;
  v28 = (std::__shared_weak_count *)a1[1];
  v69 = *a1;
  v70 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = (std::__shared_weak_count *)v74;
  v68[0] = v73;
  v68[1] = v74;
  if (v74)
  {
    v32 = (unint64_t *)(v74 + 8);
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *a2;
  v35 = (std::__shared_weak_count *)a2[1];
  v67[0] = v34;
  v67[1] = v35;
  if (v35)
  {
    p_shared_weak_owners = (unint64_t *)&v35->__shared_weak_owners_;
    do
      v37 = __ldxr(p_shared_weak_owners);
    while (__stxr(v37 + 1, p_shared_weak_owners));
  }
  coex::Module::State::State((uint64_t)v26, &v69, v68, v67);
  *a3 = (coex::Module::State *)v27;
  a3[1] = (coex::Module::State *)0xAAAAAAAAAAAAAAAALL;
  v38 = (std::__shared_weak_count *)operator new(0x20uLL);
  v38->__shared_owners_ = 0;
  v39 = (unint64_t *)&v38->__shared_owners_;
  v38->__vftable = (std::__shared_weak_count_vtbl *)off_1E79134B0;
  v38->__shared_weak_owners_ = 0;
  v38[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
  a3[1] = (coex::Module::State *)v38;
  v40 = v27[10];
  if (v40)
  {
    if (v40->__shared_owners_ != -1)
      goto LABEL_52;
    do
      v41 = __ldxr(v39);
    while (__stxr(v41 + 1, v39));
    v42 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v27[9] = (std::__shared_weak_count *)v27;
    v27[10] = v38;
    std::__shared_weak_count::__release_weak(v40);
  }
  else
  {
    do
      v44 = __ldxr(v39);
    while (__stxr(v44 + 1, v39));
    v45 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v27[9] = (std::__shared_weak_count *)v27;
    v27[10] = v38;
  }
  do
    v47 = __ldaxr(v39);
  while (__stlxr(v47 - 1, v39));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    v48 = *a3;
    if (!*((_QWORD *)*a3 + 7))
      goto LABEL_66;
    goto LABEL_53;
  }
LABEL_52:
  v48 = *a3;
  if (!*((_QWORD *)*a3 + 7))
    goto LABEL_66;
LABEL_53:
  v49 = (std::__shared_weak_count *)*((_QWORD *)v48 + 10);
  if (!v49 || (v50 = *((_QWORD *)v48 + 9), (v51 = std::__shared_weak_count::lock(v49)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v52 = v51;
  *(_QWORD *)&block = v50;
  *((_QWORD *)&block + 1) = v51;
  ctu::LoggerCommonBase::getLogDomain((coex::Module::State *)((char *)v48 + 8));
  v79 = v50;
  v80 = v52;
  block = 0uLL;
  ctu::TrackedLogger::registerLoggerToServer();
  v53 = v80;
  if (v80)
  {
    v54 = (unint64_t *)&v80->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (*((_QWORD *)&block + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&block + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
LABEL_66:
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  if (v31)
  {
    v59 = (unint64_t *)&v31->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v61 = v70;
  if (v70)
  {
    v62 = (unint64_t *)&v70->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  coex::Module::State::init(*a3);
  v64 = (std::__shared_weak_count *)v74;
  if (v74)
  {
    v65 = (unint64_t *)(v74 + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
}

void sub_1BF58DC54(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF58DC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va2;
  uint64_t v17;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v15 = va_arg(va3, _QWORD);
  v17 = va_arg(va3, _QWORD);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5 - 80);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_1BF58DC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF58DCAC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State*)#1}::operator() const(coex::Module::State*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF58DCCC()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF58DD28);
}

void sub_1BF58DCDC()
{
  JUMPOUT(0x1BF58DD2CLL);
}

void sub_1BF58DCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF58DCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v7 - 80);
  _Unwind_Resume(a1);
}

void coex::Module::~Module(coex::Module *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_1E7912720;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)this = off_1E79228B8;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    *(_QWORD *)this = off_1E79228B8;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  v6 = (void **)*((_QWORD *)this + 4);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v5);
    v7 = (void **)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v5;
  operator delete(v7);
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_1E7912720;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)this = off_1E79228B8;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    *(_QWORD *)this = off_1E79228B8;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  v6 = (void **)*((_QWORD *)this + 4);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v5);
    v7 = (void **)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v5;
  operator delete(v7);
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = off_1E7912720;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    *(_QWORD *)this = off_1E79228B8;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
LABEL_5:
    *(_QWORD *)this = off_1E79228B8;
    v5 = (void **)*((_QWORD *)this + 3);
    if (!v5)
      goto LABEL_13;
  }
  v6 = (void **)*((_QWORD *)this + 4);
  v7 = v5;
  if (v6 != v5)
  {
    do
    {
      if (*((char *)v6 - 1) < 0)
        operator delete(*(v6 - 3));
      v6 -= 3;
    }
    while (v6 != v5);
    v7 = (void **)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v5;
  operator delete(v7);
LABEL_13:
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  operator delete(this);
}

const char *coex::Module::getName(coex::Module *this)
{
  return "coex.mod";
}

_BYTE *coex::Module::getShutdownStages@<X0>(_BYTE *this@<X0>, _QWORD *a2@<X8>)
{
  _BYTE *v3;

  if (*((_QWORD *)this + 6))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v3 = operator new(1uLL);
    *a2 = v3;
    *v3 = 3;
    this = v3 + 1;
    a2[1] = this;
    a2[2] = this;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

_BYTE *coex::Module::State::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void coex::Module::shutdown(uint64_t a1, char a2, dispatch_object_t *a3)
{
  uint64_t v3;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v5 = *a3;
    if (*a3)
    {
      dispatch_retain(*a3);
      dispatch_group_enter(v5);
    }
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 1174405120;
    v6[2] = ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
    v6[3] = &__block_descriptor_tmp_70;
    v6[4] = v3;
    group = v5;
    if (v5)
    {
      dispatch_retain(v5);
      dispatch_group_enter(v5);
    }
    v8 = a2;
    ctu::SharedSynchronizable<coex::Module::State>::execute_wrapped((uint64_t *)(v3 + 72), (uint64_t)v6);
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
  }
}

void coex::Module::State::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 72);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_70;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<coex::Module::State>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void coex::Module::State::init(coex::Module::State *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  coex::Module::State *v9;
  uint64_t *v10;
  unint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t *v15;
  unint64_t v16;
  void *v17;
  const void *v18;
  void *v19;
  uint64_t *v20;
  unint64_t v21;
  void *v22;
  const void *v23;
  void *v24;
  uint64_t *v25;
  unint64_t v26;
  void *v27;
  const void *v28;
  void *v29;
  uint64_t *v30;
  unint64_t v31;
  void *v32;
  const void *v33;
  void *v34;
  uint64_t *v35;
  unint64_t v36;
  void *v37;
  const void *v38;
  void *v39;
  uint64_t *v40;
  unint64_t v41;
  void *v42;
  const void *v43;
  void *v44;
  uint64_t *v45;
  unint64_t v46;
  void *v47;
  const void *v48;
  void *v49;
  uint64_t *v50;
  unint64_t v51;
  void *v52;
  const void *v53;
  void *v54;
  uint64_t *v55;
  unint64_t v56;
  void *v57;
  const void *v58;
  void *v59;
  uint64_t *v60;
  unint64_t v61;
  void *v62;
  const void *v63;
  void *v64;
  uint64_t *v65;
  unint64_t v66;
  void *v67;
  const void *v68;
  void *v69;
  uint64_t *v70;
  unint64_t v71;
  void *v72;
  const void *v73;
  void *v74;
  uint64_t *v75;
  unint64_t v76;
  void *v77;
  const void *v78;
  void *v79;
  uint64_t *v80;
  unint64_t v81;
  void *v82;
  const void *v83;
  void *v84;
  uint64_t *v85;
  unint64_t v86;
  void *v87;
  const void *v88;
  void *v89;
  uint64_t *v90;
  unint64_t v91;
  void *v92;
  const void *v93;
  void *v94;
  uint64_t *v95;
  unint64_t v96;
  void *v97;
  const void *v98;
  void *v99;
  uint64_t *v100;
  unint64_t v101;
  void *v102;
  const void *v103;
  void *v104;
  uint64_t *v105;
  unint64_t v106;
  void *v107;
  const void *v108;
  void *v109;
  uint64_t *v110;
  unint64_t v111;
  void *v112;
  const void *v113;
  void *v114;
  uint64_t *v115;
  unint64_t v116;
  void *v117;
  const void *v118;
  void *v119;
  uint64_t *v120;
  unint64_t v121;
  void *v122;
  const void *v123;
  void *v124;
  uint64_t *v125;
  unint64_t v126;
  void *v127;
  const void *v128;
  void *v129;
  uint64_t *v130;
  unint64_t v131;
  void *v132;
  const void *v133;
  void *v134;
  _QWORD *v135;
  NSObject *v136;
  _QWORD *v137;
  void *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  NSObject *v141;
  void *v142;
  void *v143;
  void *v144;
  void *v145;
  void *v146;
  void *v147;
  void *v148;
  char v149;
  char v150;
  char v151;
  char v152;
  void (*v153)(char *, char *, uint64_t);
  void (*v154)(uint64_t, _WORD *, unsigned int);
  unint64_t *v155;
  unint64_t v156;
  _QWORD *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  unint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t **v165;
  __int128 v166;
  pthread_mutex_t *v167;
  unsigned int *v168;
  unsigned int v169;
  uint64_t *v170;
  uint64_t *v171;
  int v172;
  uint64_t **v173;
  uint64_t *v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  unsigned int *v183;
  unsigned int v184;
  _QWORD **v185;
  _QWORD *v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  _BYTE *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _BYTE *v197;
  _QWORD *v198;
  _QWORD *v199;
  _QWORD *v200;
  int v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  int v206;
  int v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  int v211;
  int v212;
  int v213;
  _QWORD *v214;
  __int128 v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  unsigned int *v222;
  unsigned int v223;
  uint64_t **v224;
  unsigned int *v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  unsigned int *v229;
  unsigned int v230;
  unsigned int v231;
  int v232;
  uint64_t v233;
  BOOL v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t i;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t **v241;
  uint64_t v242;
  int v243;
  int v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  BOOL v249;
  BOOL v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t **v253;
  uint64_t **v254;
  int v255;
  uint64_t ***v256;
  BOOL v257;
  BOOL v258;
  uint64_t ***v259;
  int v260;
  BOOL v261;
  int v262;
  uint64_t *v263;
  uint64_t *v264;
  int v265;
  uint64_t **v266;
  int v267;
  int v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int *v278;
  unsigned int v279;
  unsigned int v280;
  unsigned int *v281;
  unsigned int v282;
  unsigned int v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  int *v287;
  int v288;
  uint64_t v289;
  unsigned int *v290;
  unsigned int v291;
  unsigned int v292;
  _QWORD *v293;
  uint64_t *v294;
  unsigned int *v295;
  unsigned int v296;
  unsigned int *v297;
  unsigned int *v298;
  uint64_t *v299;
  _QWORD *v300;
  _QWORD *v301;
  uint64_t *v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t *v306;
  uint64_t v307;
  int v308;
  BOOL v309;
  BOOL v310;
  uint64_t *v311;
  int v312;
  uint64_t *v313;
  _QWORD *v314;
  uint64_t v315;
  unsigned int *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int *v321;
  const void *v322;
  unsigned int *v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int *v326;
  unsigned int v327;
  unsigned int v328;
  char *v329;
  char *v330;
  unsigned int *v331;
  unsigned int *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int v337;
  void (*v338)(__int128 *, __int128 *, uint64_t);
  char *v339;
  _QWORD *v340;
  void *v341;
  char *v342;
  int v343;
  int v344;
  unsigned int *v345;
  unsigned int *v346;
  unsigned int v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int *v350;
  unsigned int v351;
  unsigned int v352;
  unint64_t *v353;
  unint64_t v354;
  _OWORD *v355;
  uint64_t v356;
  uint64_t v357;
  void *v358;
  std::__shared_weak_count *v359;
  uint64_t v360;
  NSObject *v361;
  void *v362;
  void *v363;
  void *v364;
  void *v365;
  void *v366;
  void *v367;
  void *v368;
  char v369;
  char v370;
  char v371;
  char v372;
  void (*v373)(char *, char *, uint64_t);
  void (*v374)(uint64_t, _WORD *, unsigned int);
  unint64_t *v375;
  unint64_t v376;
  _QWORD *v377;
  unint64_t v378;
  _QWORD *v379;
  _QWORD *v380;
  unint64_t v381;
  _QWORD *v382;
  _QWORD *v383;
  unint64_t v384;
  uint64_t **v385;
  __int128 v386;
  pthread_mutex_t *v387;
  unsigned int *v388;
  unsigned int v389;
  uint64_t *v390;
  uint64_t *v391;
  int v392;
  uint64_t **v393;
  uint64_t *v394;
  uint64_t v395;
  _QWORD *v396;
  _QWORD *v397;
  _QWORD *v398;
  uint64_t v399;
  _QWORD *v400;
  _QWORD *v401;
  uint64_t v402;
  unsigned int *v403;
  unsigned int v404;
  _QWORD **v405;
  _QWORD *v406;
  _QWORD *v407;
  _QWORD *v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  _BYTE *v412;
  _QWORD *v413;
  _QWORD *v414;
  _QWORD *v415;
  _QWORD *v416;
  _BYTE *v417;
  _QWORD *v418;
  _QWORD *v419;
  _QWORD *v420;
  int v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  _QWORD *v425;
  int v426;
  int v427;
  _QWORD *v428;
  _QWORD *v429;
  _QWORD *v430;
  int v431;
  int v432;
  int v433;
  _QWORD *v434;
  __int128 v435;
  _QWORD *v436;
  _QWORD *v437;
  _QWORD *v438;
  uint64_t v439;
  uint64_t *v440;
  uint64_t v441;
  unsigned int *v442;
  unsigned int v443;
  uint64_t **v444;
  unsigned int *v445;
  unsigned int *v446;
  unsigned int v447;
  unsigned int v448;
  unsigned int *v449;
  unsigned int v450;
  unsigned int v451;
  int v452;
  uint64_t v453;
  BOOL v454;
  uint64_t v455;
  uint64_t *v456;
  uint64_t j;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t **v462;
  int v463;
  int v464;
  uint64_t *v465;
  uint64_t v466;
  uint64_t v467;
  int v468;
  BOOL v469;
  BOOL v470;
  uint64_t *v471;
  uint64_t *v472;
  int v473;
  BOOL v474;
  uint64_t **v475;
  uint64_t **v476;
  int v477;
  uint64_t ***v478;
  BOOL v479;
  BOOL v480;
  uint64_t ***v481;
  int v482;
  uint64_t *v483;
  uint64_t *v484;
  int v485;
  uint64_t **v486;
  int v487;
  int v488;
  uint64_t *v489;
  uint64_t *v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  unsigned int *v497;
  unsigned int *v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int *v501;
  unsigned int v502;
  unsigned int v503;
  _QWORD *v504;
  _QWORD *v505;
  uint64_t v506;
  int *v507;
  int v508;
  uint64_t v509;
  unsigned int *v510;
  unsigned int v511;
  unsigned int v512;
  _QWORD *v513;
  uint64_t *v514;
  unsigned int *v515;
  unsigned int v516;
  unsigned int *v517;
  unsigned int *v518;
  uint64_t *v519;
  _QWORD *v520;
  _QWORD *v521;
  uint64_t *v522;
  unsigned int v523;
  uint64_t v524;
  uint64_t *v525;
  uint64_t *v526;
  uint64_t v527;
  int v528;
  BOOL v529;
  BOOL v530;
  uint64_t *v531;
  const void *v532;
  int v533;
  uint64_t *v534;
  _QWORD *v535;
  uint64_t v536;
  unsigned int *v537;
  unsigned int v538;
  unsigned int v539;
  unsigned int v540;
  unsigned int v541;
  unsigned int *v542;
  unsigned int *v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int *v546;
  unsigned int v547;
  unsigned int v548;
  char *v549;
  char *v550;
  unsigned int *v551;
  unsigned int *v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int *v555;
  unsigned int v556;
  unsigned int v557;
  void (*v558)(__int128 *, __int128 *, uint64_t);
  char *v559;
  _QWORD *v560;
  void *v561;
  char *v562;
  int v563;
  int v564;
  unsigned int *v565;
  unsigned int *v566;
  unsigned int v567;
  unsigned int v568;
  uint64_t v569;
  unsigned int *v570;
  unsigned int v571;
  unsigned int v572;
  unint64_t *v573;
  coex::Module::State *v574;
  unint64_t v575;
  _OWORD *v576;
  uint64_t v577;
  _QWORD *v578;
  void *v579;
  std::__shared_weak_count *v580;
  uint64_t v581;
  NSObject *v582;
  void *v583;
  void *v584;
  void *v585;
  void *v586;
  void *v587;
  void *v588;
  void *v589;
  char v590;
  char v591;
  char v592;
  char v593;
  void (*v594)(char *, char *, uint64_t);
  void (*v595)(uint64_t, _WORD *, unsigned int);
  unint64_t *v596;
  unint64_t v597;
  _QWORD *v598;
  unint64_t v599;
  _QWORD *v600;
  _QWORD *v601;
  unint64_t v602;
  _QWORD *v603;
  _QWORD *v604;
  unint64_t v605;
  uint64_t **v606;
  __int128 v607;
  pthread_mutex_t *v608;
  unsigned int *v609;
  unsigned int v610;
  uint64_t *v611;
  uint64_t *v612;
  int v613;
  uint64_t **v614;
  uint64_t *v615;
  uint64_t v616;
  _QWORD *v617;
  _QWORD *v618;
  _QWORD *v619;
  uint64_t v620;
  _QWORD *v621;
  _QWORD *v622;
  uint64_t v623;
  unsigned int *v624;
  unsigned int v625;
  _QWORD **v626;
  _QWORD *v627;
  _QWORD *v628;
  _QWORD *v629;
  _QWORD *v630;
  _QWORD *v631;
  uint64_t v632;
  _BYTE *v633;
  _QWORD *v634;
  _QWORD *v635;
  _QWORD *v636;
  _QWORD *v637;
  _BYTE *v638;
  _QWORD *v639;
  _QWORD *v640;
  _QWORD *v641;
  int v642;
  _QWORD *v643;
  _QWORD *v644;
  _QWORD *v645;
  _QWORD *v646;
  int v647;
  int v648;
  _QWORD *v649;
  _QWORD *v650;
  _QWORD *v651;
  int v652;
  int v653;
  int v654;
  _QWORD *v655;
  __int128 v656;
  _QWORD *v657;
  _QWORD *v658;
  _QWORD *v659;
  uint64_t v660;
  uint64_t *v661;
  uint64_t v662;
  unsigned int *v663;
  unsigned int v664;
  uint64_t **v665;
  unsigned int *v666;
  unsigned int *v667;
  unsigned int v668;
  unsigned int v669;
  unsigned int *v670;
  unsigned int v671;
  unsigned int v672;
  int v673;
  uint64_t v674;
  BOOL v675;
  uint64_t v676;
  uint64_t *v677;
  uint64_t k;
  uint64_t v679;
  unsigned int v680;
  uint64_t v681;
  char *v682;
  uint64_t **v683;
  int v684;
  int v685;
  uint64_t *v686;
  uint64_t v687;
  uint64_t v688;
  int v689;
  BOOL v690;
  BOOL v691;
  uint64_t *v692;
  uint64_t *v693;
  int v694;
  BOOL v695;
  uint64_t **v696;
  uint64_t **v697;
  int v698;
  uint64_t ***v699;
  BOOL v700;
  BOOL v701;
  uint64_t ***v702;
  int v703;
  uint64_t *v704;
  uint64_t *v705;
  int v706;
  uint64_t **v707;
  int v708;
  int v709;
  uint64_t *v710;
  uint64_t *v711;
  uint64_t *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t *v716;
  uint64_t v717;
  unsigned int *v718;
  unsigned int *v719;
  unsigned int v720;
  unsigned int v721;
  unsigned int *v722;
  unsigned int v723;
  unsigned int v724;
  _QWORD *v725;
  _QWORD *v726;
  uint64_t v727;
  int *v728;
  int v729;
  uint64_t v730;
  unsigned int *v731;
  unsigned int v732;
  unsigned int v733;
  _QWORD *v734;
  uint64_t *v735;
  unsigned int *v736;
  unsigned int v737;
  unsigned int *v738;
  unsigned int *v739;
  uint64_t *v740;
  _QWORD *v741;
  _QWORD *v742;
  uint64_t *v743;
  unsigned int v744;
  uint64_t v745;
  uint64_t *v746;
  uint64_t *v747;
  uint64_t v748;
  int v749;
  BOOL v750;
  BOOL v751;
  uint64_t *v752;
  const void *v753;
  int v754;
  uint64_t *v755;
  _QWORD *v756;
  uint64_t v757;
  unsigned int *v758;
  unsigned int v759;
  unsigned int v760;
  unsigned int v761;
  unsigned int v762;
  unsigned int *v763;
  unsigned int *v764;
  unsigned int v765;
  unsigned int v766;
  unsigned int *v767;
  unsigned int v768;
  unsigned int v769;
  unsigned int *v770;
  unsigned int v771;
  unsigned int v772;
  unsigned int *v773;
  unsigned int v774;
  unsigned int v775;
  char *v776;
  char *v777;
  unsigned int *v778;
  unsigned int *v779;
  unsigned int v780;
  unsigned int v781;
  unsigned int *v782;
  unsigned int v783;
  unsigned int v784;
  void (*v785)(__int128 *, __int128 *, uint64_t);
  char *v786;
  _QWORD *v787;
  void *v788;
  char *v789;
  int v790;
  int v791;
  unsigned int *v792;
  unsigned int *v793;
  unsigned int v794;
  unsigned int v795;
  uint64_t v796;
  unsigned int *v797;
  unsigned int v798;
  unsigned int v799;
  unint64_t *v800;
  unint64_t v801;
  _OWORD *v802;
  uint64_t v803;
  uint64_t v804;
  void *v805;
  std::__shared_weak_count *v806;
  uint64_t v807;
  NSObject *v808;
  void *v809;
  void *v810;
  void *v811;
  void *v812;
  void *v813;
  void *v814;
  void *v815;
  char v816;
  char v817;
  char v818;
  char v819;
  void (*v820)(char *, char *, uint64_t);
  void (*v821)(uint64_t, _WORD *, unsigned int);
  unint64_t *v822;
  unint64_t v823;
  _QWORD *v824;
  unint64_t v825;
  _QWORD *v826;
  _QWORD *v827;
  unint64_t v828;
  _QWORD *v829;
  _QWORD *v830;
  unint64_t v831;
  uint64_t **v832;
  __int128 v833;
  pthread_mutex_t *v834;
  unsigned int *v835;
  unsigned int v836;
  uint64_t *v837;
  uint64_t *v838;
  int v839;
  uint64_t **v840;
  uint64_t *v841;
  uint64_t v842;
  _QWORD *v843;
  _QWORD *v844;
  _QWORD *v845;
  uint64_t v846;
  _QWORD *v847;
  _QWORD *v848;
  uint64_t v849;
  unsigned int *v850;
  unsigned int v851;
  _QWORD **v852;
  _QWORD *v853;
  _QWORD *v854;
  _QWORD *v855;
  _QWORD *v856;
  _QWORD *v857;
  uint64_t v858;
  _BYTE *v859;
  _QWORD *v860;
  _QWORD *v861;
  _QWORD *v862;
  _QWORD *v863;
  _BYTE *v864;
  _QWORD *v865;
  _QWORD *v866;
  _QWORD *v867;
  int v868;
  _QWORD *v869;
  _QWORD *v870;
  _QWORD *v871;
  _QWORD *v872;
  int v873;
  int v874;
  _QWORD *v875;
  _QWORD *v876;
  _QWORD *v877;
  int v878;
  int v879;
  int v880;
  _QWORD *v881;
  __int128 v882;
  _QWORD *v883;
  _QWORD *v884;
  _QWORD *v885;
  uint64_t v886;
  uint64_t *v887;
  uint64_t v888;
  unsigned int *v889;
  unsigned int v890;
  uint64_t **v891;
  unsigned int *v892;
  unsigned int *v893;
  unsigned int v894;
  unsigned int v895;
  unsigned int *v896;
  unsigned int v897;
  unsigned int v898;
  int v899;
  uint64_t v900;
  BOOL v901;
  uint64_t v902;
  uint64_t *v903;
  uint64_t m;
  uint64_t v905;
  unsigned int v906;
  uint64_t v907;
  char *v908;
  uint64_t **v909;
  int v910;
  int v911;
  uint64_t *v912;
  uint64_t v913;
  uint64_t v914;
  int v915;
  BOOL v916;
  BOOL v917;
  uint64_t *v918;
  uint64_t *v919;
  int v920;
  BOOL v921;
  uint64_t **v922;
  uint64_t **v923;
  int v924;
  uint64_t ***v925;
  BOOL v926;
  BOOL v927;
  uint64_t ***v928;
  int v929;
  uint64_t *v930;
  uint64_t *v931;
  int v932;
  uint64_t **v933;
  int v934;
  int v935;
  uint64_t *v936;
  uint64_t *v937;
  uint64_t *v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t *v942;
  uint64_t v943;
  unsigned int *v944;
  unsigned int *v945;
  unsigned int v946;
  unsigned int v947;
  unsigned int *v948;
  unsigned int v949;
  unsigned int v950;
  _QWORD *v951;
  _QWORD *v952;
  uint64_t v953;
  int *v954;
  int v955;
  uint64_t v956;
  unsigned int *v957;
  unsigned int v958;
  unsigned int v959;
  _QWORD *v960;
  uint64_t *v961;
  unsigned int *v962;
  unsigned int v963;
  unsigned int *v964;
  unsigned int *v965;
  uint64_t *v966;
  _QWORD *v967;
  _QWORD *v968;
  uint64_t *v969;
  unsigned int v970;
  uint64_t v971;
  uint64_t *v972;
  uint64_t *v973;
  uint64_t v974;
  int v975;
  BOOL v976;
  BOOL v977;
  uint64_t *v978;
  const void *v979;
  int v980;
  uint64_t *v981;
  _QWORD *v982;
  uint64_t v983;
  unsigned int *v984;
  unsigned int v985;
  unsigned int v986;
  unsigned int v987;
  unsigned int v988;
  unsigned int *v989;
  unsigned int *v990;
  unsigned int v991;
  unsigned int v992;
  unsigned int *v993;
  unsigned int v994;
  unsigned int v995;
  char *v996;
  char *v997;
  unsigned int *v998;
  unsigned int *v999;
  unsigned int v1000;
  unsigned int v1001;
  unsigned int *v1002;
  unsigned int v1003;
  unsigned int v1004;
  void (*v1005)(__int128 *, __int128 *, uint64_t);
  char *v1006;
  _QWORD *v1007;
  void *v1008;
  char *v1009;
  int v1010;
  int v1011;
  unsigned int *v1012;
  unsigned int *v1013;
  unsigned int v1014;
  unsigned int v1015;
  uint64_t v1016;
  unsigned int *v1017;
  unsigned int v1018;
  unsigned int v1019;
  unint64_t *v1020;
  unint64_t v1021;
  _OWORD *v1022;
  uint64_t v1023;
  __int128 v1024;
  std::__shared_weak_count *v1025;
  unint64_t *v1026;
  unint64_t v1027;
  std::__shared_weak_count *v1028;
  unint64_t *v1029;
  unint64_t v1030;
  CFTypeRef v1031;
  const void *v1032;
  size_t v1033;
  void *v1034;
  void **v1035;
  std::__shared_weak_count *v1036;
  uint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  void *v1040;
  NSObject *v1041;
  const void *v1042;
  size_t v1043;
  void *v1044;
  void *v1045;
  coex::Module::State *v1046;
  uint64_t v1047;
  uint64_t v1048;
  unint64_t v1049;
  void *v1050;
  NSObject *v1051;
  unsigned int *v1052;
  unsigned int v1053;
  unsigned int v1054;
  unsigned int *v1055;
  unsigned int v1056;
  unsigned int v1057;
  uint64_t *v1058;
  void *v1059;
  uint64_t *v1060;
  void *v1061;
  uint64_t *v1062;
  void *v1063;
  _BYTE *v1064;
  void *v1065;
  _BYTE *v1066;
  void *v1067;
  void *v1068;
  uint64_t *v1069;
  void *v1070;
  void *v1071;
  _QWORD *v1072;
  _BYTE *v1073;
  void *v1074;
  _BYTE *v1075;
  std::__shared_weak_count *v1076;
  void *v1077;
  void *v1078;
  char *v1079;
  const void *v1080;
  std::__shared_weak_count *v1081;
  std::__shared_weak_count *v1082;
  std::__shared_weak_count *v1083;
  std::__shared_weak_count *v1084;
  _QWORD *v1085;
  uint64_t ***v1086;
  void *v1087;
  uint64_t ***v1088;
  void *v1089;
  uint64_t ***v1090;
  void *v1091;
  uint64_t ***v1092;
  uint64_t v1093;
  uint64_t **v1094;
  unsigned int v1095;
  uint64_t v1096;
  uint64_t **v1097;
  unsigned int v1098;
  uint64_t v1099;
  uint64_t **v1100;
  unsigned int v1101;
  uint64_t v1102;
  uint64_t **v1103;
  unsigned int v1104;
  uint64_t v1105;
  coex::Module::State *v1106;
  _QWORD v1107[6];
  std::__shared_weak_count *v1108;
  void *v1109;
  dispatch_object_t v1110;
  void *v1111[2];
  unint64_t v1112;
  _QWORD v1113[6];
  std::__shared_weak_count *v1114;
  void *v1115;
  dispatch_object_t v1116;
  void *__dst[2];
  unint64_t v1118;
  CFTypeRef cf;
  void *v1120[2];
  char v1121;
  __int128 v1122;
  _QWORD v1123[6];
  std::__shared_weak_count *v1124;
  _QWORD v1125[6];
  std::__shared_weak_count *v1126;
  _QWORD v1127[6];
  std::__shared_weak_count *v1128;
  _QWORD v1129[6];
  std::__shared_weak_count *v1130;
  _QWORD v1131[6];
  std::__shared_weak_count *v1132;
  _QWORD v1133[6];
  std::__shared_weak_count *v1134;
  _QWORD v1135[6];
  std::__shared_weak_count *v1136;
  _QWORD v1137[6];
  std::__shared_weak_count *v1138;
  _QWORD v1139[6];
  std::__shared_weak_count *v1140;
  _QWORD v1141[6];
  std::__shared_weak_count *v1142;
  _QWORD v1143[6];
  std::__shared_weak_count *v1144;
  _QWORD v1145[6];
  std::__shared_weak_count *v1146;
  _QWORD v1147[6];
  std::__shared_weak_count *v1148;
  _QWORD v1149[6];
  std::__shared_weak_count *v1150;
  _QWORD v1151[6];
  std::__shared_weak_count *v1152;
  _QWORD v1153[6];
  std::__shared_weak_count *v1154;
  _QWORD v1155[6];
  std::__shared_weak_count *v1156;
  _QWORD v1157[6];
  std::__shared_weak_count *v1158;
  _QWORD v1159[6];
  std::__shared_weak_count *v1160;
  _QWORD v1161[6];
  std::__shared_weak_count *v1162;
  _QWORD v1163[6];
  std::__shared_weak_count *v1164;
  _QWORD v1165[6];
  std::__shared_weak_count *v1166;
  _QWORD v1167[6];
  std::__shared_weak_count *v1168;
  _QWORD v1169[6];
  std::__shared_weak_count *v1170;
  _QWORD aBlock[6];
  std::__shared_weak_count *v1172;
  void **v1173;
  uint64_t v1174;
  void *v1175;
  void *v1176;
  char *v1177;
  uint64_t (*v1178)(coex::Module::State *__hidden);
  uint64_t v1179;
  dispatch_object_t v1180;
  void *v1181;
  void *v1182[2];
  __int128 v1183;
  __int128 v1184;
  uint64_t v1185;
  dispatch_object_t v1186;
  void *v1187;
  dispatch_object_t object;
  void *v1189;
  uint64_t (**v1190)();
  unint64_t v1191;
  void *v1192;
  __int128 block;
  __int128 v1194;
  void *v1195[2];
  __int128 v1196;
  __int128 v1197;
  __int128 v1198;
  __int128 v1199;
  __int128 v1200;
  __int128 v1201;
  __int128 v1202;
  unint64_t v1203;
  void *__p;
  uint64_t v1205;
  pthread_mutex_t *v1206;
  uint64_t v1207;

  v1207 = *MEMORY[0x1E0C80C00];
  v1105 = *((_QWORD *)this + 9);
  v1079 = (char *)this + 72;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  v9 = this;
  v10 = (uint64_t *)*((_QWORD *)this + 15);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State4initEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_1;
  v1106 = v9;
  aBlock[4] = v9;
  aBlock[5] = v1105;
  v1172 = v4;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  v12 = _Block_copy(aBlock);
  v13 = v12;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v10;
  LODWORD(v1196) = 1200;
  if (v12)
    v14 = _Block_copy(v12);
  else
    v14 = 0;
  v1195[1] = v14;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v10 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v13)
    _Block_release(v13);
  v15 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1169[0] = MEMORY[0x1E0C809B0];
  v1169[1] = 1174405120;
  v1169[2] = ___ZN4coex6Module5State4initEv_block_invoke_16;
  v1169[3] = &__block_descriptor_tmp_17;
  v1169[4] = v1106;
  v1169[5] = v1105;
  v1170 = v4;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(v1169);
  v18 = v17;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v15;
  LODWORD(v1196) = 1201;
  if (v17)
    v19 = _Block_copy(v17);
  else
    v19 = 0;
  v1195[1] = v19;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v15 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v18)
    _Block_release(v18);
  v20 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1167[0] = MEMORY[0x1E0C809B0];
  v1167[1] = 1174405120;
  v1167[2] = ___ZN4coex6Module5State4initEv_block_invoke_18;
  v1167[3] = &__block_descriptor_tmp_19;
  v1167[4] = v1106;
  v1167[5] = v1105;
  v1168 = v4;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = _Block_copy(v1167);
  v23 = v22;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v20;
  LODWORD(v1196) = 1202;
  if (v22)
    v24 = _Block_copy(v22);
  else
    v24 = 0;
  v1195[1] = v24;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v20 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v23)
    _Block_release(v23);
  v25 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1165[0] = MEMORY[0x1E0C809B0];
  v1165[1] = 1174405120;
  v1165[2] = ___ZN4coex6Module5State4initEv_block_invoke_20;
  v1165[3] = &__block_descriptor_tmp_21_0;
  v1165[4] = v1106;
  v1165[5] = v1105;
  v1166 = v4;
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  v27 = _Block_copy(v1165);
  v28 = v27;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v25;
  LODWORD(v1196) = 1203;
  if (v27)
    v29 = _Block_copy(v27);
  else
    v29 = 0;
  v1195[1] = v29;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v25 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v28)
    _Block_release(v28);
  v30 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1163[0] = MEMORY[0x1E0C809B0];
  v1163[1] = 1174405120;
  v1163[2] = ___ZN4coex6Module5State4initEv_block_invoke_22;
  v1163[3] = &__block_descriptor_tmp_23_0;
  v1163[4] = v1106;
  v1163[5] = v1105;
  v1164 = v4;
  do
    v31 = __ldxr(p_shared_weak_owners);
  while (__stxr(v31 + 1, p_shared_weak_owners));
  v32 = _Block_copy(v1163);
  v33 = v32;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v30;
  LODWORD(v1196) = 1206;
  if (v32)
    v34 = _Block_copy(v32);
  else
    v34 = 0;
  v1195[1] = v34;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v30 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v33)
    _Block_release(v33);
  v35 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1161[0] = MEMORY[0x1E0C809B0];
  v1161[1] = 1174405120;
  v1161[2] = ___ZN4coex6Module5State4initEv_block_invoke_24;
  v1161[3] = &__block_descriptor_tmp_25_0;
  v1161[4] = v1106;
  v1161[5] = v1105;
  v1162 = v4;
  do
    v36 = __ldxr(p_shared_weak_owners);
  while (__stxr(v36 + 1, p_shared_weak_owners));
  v37 = _Block_copy(v1161);
  v38 = v37;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v35;
  LODWORD(v1196) = 1204;
  if (v37)
    v39 = _Block_copy(v37);
  else
    v39 = 0;
  v1195[1] = v39;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v35 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v38)
    _Block_release(v38);
  v40 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1159[0] = MEMORY[0x1E0C809B0];
  v1159[1] = 1174405120;
  v1159[2] = ___ZN4coex6Module5State4initEv_block_invoke_26;
  v1159[3] = &__block_descriptor_tmp_27_0;
  v1159[4] = v1106;
  v1159[5] = v1105;
  v1160 = v4;
  do
    v41 = __ldxr(p_shared_weak_owners);
  while (__stxr(v41 + 1, p_shared_weak_owners));
  v42 = _Block_copy(v1159);
  v43 = v42;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v40;
  LODWORD(v1196) = 1205;
  if (v42)
    v44 = _Block_copy(v42);
  else
    v44 = 0;
  v1195[1] = v44;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v40 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v43)
    _Block_release(v43);
  v45 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1157[0] = MEMORY[0x1E0C809B0];
  v1157[1] = 1174405120;
  v1157[2] = ___ZN4coex6Module5State4initEv_block_invoke_28;
  v1157[3] = &__block_descriptor_tmp_29;
  v1157[4] = v1106;
  v1157[5] = v1105;
  v1158 = v4;
  do
    v46 = __ldxr(p_shared_weak_owners);
  while (__stxr(v46 + 1, p_shared_weak_owners));
  v47 = _Block_copy(v1157);
  v48 = v47;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v45;
  LODWORD(v1196) = 1207;
  if (v47)
    v49 = _Block_copy(v47);
  else
    v49 = 0;
  v1195[1] = v49;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v45 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v48)
    _Block_release(v48);
  v50 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1155[0] = MEMORY[0x1E0C809B0];
  v1155[1] = 1174405120;
  v1155[2] = ___ZN4coex6Module5State4initEv_block_invoke_30;
  v1155[3] = &__block_descriptor_tmp_31;
  v1155[4] = v1106;
  v1155[5] = v1105;
  v1156 = v4;
  do
    v51 = __ldxr(p_shared_weak_owners);
  while (__stxr(v51 + 1, p_shared_weak_owners));
  v52 = _Block_copy(v1155);
  v53 = v52;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v50;
  LODWORD(v1196) = 1208;
  if (v52)
    v54 = _Block_copy(v52);
  else
    v54 = 0;
  v1195[1] = v54;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v50 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v53)
    _Block_release(v53);
  v55 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1153[0] = MEMORY[0x1E0C809B0];
  v1153[1] = 1174405120;
  v1153[2] = ___ZN4coex6Module5State4initEv_block_invoke_32;
  v1153[3] = &__block_descriptor_tmp_33;
  v1153[4] = v1106;
  v1153[5] = v1105;
  v1154 = v4;
  do
    v56 = __ldxr(p_shared_weak_owners);
  while (__stxr(v56 + 1, p_shared_weak_owners));
  v57 = _Block_copy(v1153);
  v58 = v57;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v55;
  LODWORD(v1196) = 1209;
  if (v57)
    v59 = _Block_copy(v57);
  else
    v59 = 0;
  v1195[1] = v59;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v55 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v58)
    _Block_release(v58);
  v60 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1151[0] = MEMORY[0x1E0C809B0];
  v1151[1] = 1174405120;
  v1151[2] = ___ZN4coex6Module5State4initEv_block_invoke_34;
  v1151[3] = &__block_descriptor_tmp_35;
  v1151[4] = v1106;
  v1151[5] = v1105;
  v1152 = v4;
  do
    v61 = __ldxr(p_shared_weak_owners);
  while (__stxr(v61 + 1, p_shared_weak_owners));
  v62 = _Block_copy(v1151);
  v63 = v62;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v60;
  LODWORD(v1196) = 1210;
  if (v62)
    v64 = _Block_copy(v62);
  else
    v64 = 0;
  v1195[1] = v64;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v60 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v63)
    _Block_release(v63);
  v65 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1149[0] = MEMORY[0x1E0C809B0];
  v1149[1] = 1174405120;
  v1149[2] = ___ZN4coex6Module5State4initEv_block_invoke_36;
  v1149[3] = &__block_descriptor_tmp_37;
  v1149[4] = v1106;
  v1149[5] = v1105;
  v1150 = v4;
  do
    v66 = __ldxr(p_shared_weak_owners);
  while (__stxr(v66 + 1, p_shared_weak_owners));
  v67 = _Block_copy(v1149);
  v68 = v67;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v65;
  LODWORD(v1196) = 1211;
  if (v67)
    v69 = _Block_copy(v67);
  else
    v69 = 0;
  v1195[1] = v69;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v65 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v68)
    _Block_release(v68);
  v70 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1147[0] = MEMORY[0x1E0C809B0];
  v1147[1] = 1174405120;
  v1147[2] = ___ZN4coex6Module5State4initEv_block_invoke_38;
  v1147[3] = &__block_descriptor_tmp_39;
  v1147[4] = v1106;
  v1147[5] = v1105;
  v1148 = v4;
  do
    v71 = __ldxr(p_shared_weak_owners);
  while (__stxr(v71 + 1, p_shared_weak_owners));
  v72 = _Block_copy(v1147);
  v73 = v72;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v70;
  LODWORD(v1196) = 1212;
  if (v72)
    v74 = _Block_copy(v72);
  else
    v74 = 0;
  v1195[1] = v74;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v70 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v73)
    _Block_release(v73);
  v75 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1145[0] = MEMORY[0x1E0C809B0];
  v1145[1] = 1174405120;
  v1145[2] = ___ZN4coex6Module5State4initEv_block_invoke_40;
  v1145[3] = &__block_descriptor_tmp_41;
  v1145[4] = v1106;
  v1145[5] = v1105;
  v1146 = v4;
  do
    v76 = __ldxr(p_shared_weak_owners);
  while (__stxr(v76 + 1, p_shared_weak_owners));
  v77 = _Block_copy(v1145);
  v78 = v77;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v75;
  LODWORD(v1196) = 1213;
  if (v77)
    v79 = _Block_copy(v77);
  else
    v79 = 0;
  v1195[1] = v79;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v75 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v78)
    _Block_release(v78);
  v80 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1143[0] = MEMORY[0x1E0C809B0];
  v1143[1] = 1174405120;
  v1143[2] = ___ZN4coex6Module5State4initEv_block_invoke_42;
  v1143[3] = &__block_descriptor_tmp_43;
  v1143[4] = v1106;
  v1143[5] = v1105;
  v1144 = v4;
  do
    v81 = __ldxr(p_shared_weak_owners);
  while (__stxr(v81 + 1, p_shared_weak_owners));
  v82 = _Block_copy(v1143);
  v83 = v82;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v80;
  LODWORD(v1196) = 1214;
  if (v82)
    v84 = _Block_copy(v82);
  else
    v84 = 0;
  v1195[1] = v84;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v80 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v83)
    _Block_release(v83);
  v85 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1141[0] = MEMORY[0x1E0C809B0];
  v1141[1] = 1174405120;
  v1141[2] = ___ZN4coex6Module5State4initEv_block_invoke_44;
  v1141[3] = &__block_descriptor_tmp_45;
  v1141[4] = v1106;
  v1141[5] = v1105;
  v1142 = v4;
  do
    v86 = __ldxr(p_shared_weak_owners);
  while (__stxr(v86 + 1, p_shared_weak_owners));
  v87 = _Block_copy(v1141);
  v88 = v87;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v85;
  LODWORD(v1196) = 1215;
  if (v87)
    v89 = _Block_copy(v87);
  else
    v89 = 0;
  v1195[1] = v89;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v85 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v88)
    _Block_release(v88);
  v90 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1139[0] = MEMORY[0x1E0C809B0];
  v1139[1] = 1174405120;
  v1139[2] = ___ZN4coex6Module5State4initEv_block_invoke_46;
  v1139[3] = &__block_descriptor_tmp_47;
  v1139[4] = v1106;
  v1139[5] = v1105;
  v1140 = v4;
  do
    v91 = __ldxr(p_shared_weak_owners);
  while (__stxr(v91 + 1, p_shared_weak_owners));
  v92 = _Block_copy(v1139);
  v93 = v92;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v90;
  LODWORD(v1196) = 1216;
  if (v92)
    v94 = _Block_copy(v92);
  else
    v94 = 0;
  v1195[1] = v94;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v90 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v93)
    _Block_release(v93);
  v95 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1137[0] = MEMORY[0x1E0C809B0];
  v1137[1] = 1174405120;
  v1137[2] = ___ZN4coex6Module5State4initEv_block_invoke_48;
  v1137[3] = &__block_descriptor_tmp_49;
  v1137[4] = v1106;
  v1137[5] = v1105;
  v1138 = v4;
  do
    v96 = __ldxr(p_shared_weak_owners);
  while (__stxr(v96 + 1, p_shared_weak_owners));
  v97 = _Block_copy(v1137);
  v98 = v97;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v95;
  LODWORD(v1196) = 1221;
  if (v97)
    v99 = _Block_copy(v97);
  else
    v99 = 0;
  v1195[1] = v99;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v95 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v98)
    _Block_release(v98);
  v100 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1135[0] = MEMORY[0x1E0C809B0];
  v1135[1] = 1174405120;
  v1135[2] = ___ZN4coex6Module5State4initEv_block_invoke_50;
  v1135[3] = &__block_descriptor_tmp_51;
  v1135[4] = v1106;
  v1135[5] = v1105;
  v1136 = v4;
  do
    v101 = __ldxr(p_shared_weak_owners);
  while (__stxr(v101 + 1, p_shared_weak_owners));
  v102 = _Block_copy(v1135);
  v103 = v102;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v100;
  LODWORD(v1196) = 1224;
  if (v102)
    v104 = _Block_copy(v102);
  else
    v104 = 0;
  v1195[1] = v104;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v100 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v103)
    _Block_release(v103);
  v105 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1133[0] = MEMORY[0x1E0C809B0];
  v1133[1] = 1174405120;
  v1133[2] = ___ZN4coex6Module5State4initEv_block_invoke_52;
  v1133[3] = &__block_descriptor_tmp_53;
  v1133[4] = v1106;
  v1133[5] = v1105;
  v1134 = v4;
  do
    v106 = __ldxr(p_shared_weak_owners);
  while (__stxr(v106 + 1, p_shared_weak_owners));
  v107 = _Block_copy(v1133);
  v108 = v107;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v105;
  LODWORD(v1196) = 1222;
  if (v107)
    v109 = _Block_copy(v107);
  else
    v109 = 0;
  v1195[1] = v109;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v105 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v108)
    _Block_release(v108);
  v110 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1131[0] = MEMORY[0x1E0C809B0];
  v1131[1] = 1174405120;
  v1131[2] = ___ZN4coex6Module5State4initEv_block_invoke_54;
  v1131[3] = &__block_descriptor_tmp_55;
  v1131[4] = v1106;
  v1131[5] = v1105;
  v1132 = v4;
  do
    v111 = __ldxr(p_shared_weak_owners);
  while (__stxr(v111 + 1, p_shared_weak_owners));
  v112 = _Block_copy(v1131);
  v113 = v112;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v110;
  LODWORD(v1196) = 1217;
  if (v112)
    v114 = _Block_copy(v112);
  else
    v114 = 0;
  v1195[1] = v114;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v110 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v113)
    _Block_release(v113);
  v115 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1129[0] = MEMORY[0x1E0C809B0];
  v1129[1] = 1174405120;
  v1129[2] = ___ZN4coex6Module5State4initEv_block_invoke_56;
  v1129[3] = &__block_descriptor_tmp_57;
  v1129[4] = v1106;
  v1129[5] = v1105;
  v1130 = v4;
  do
    v116 = __ldxr(p_shared_weak_owners);
  while (__stxr(v116 + 1, p_shared_weak_owners));
  v117 = _Block_copy(v1129);
  v118 = v117;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v115;
  LODWORD(v1196) = 1218;
  if (v117)
    v119 = _Block_copy(v117);
  else
    v119 = 0;
  v1195[1] = v119;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v115 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v118)
    _Block_release(v118);
  v120 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1127[0] = MEMORY[0x1E0C809B0];
  v1127[1] = 1174405120;
  v1127[2] = ___ZN4coex6Module5State4initEv_block_invoke_58;
  v1127[3] = &__block_descriptor_tmp_59;
  v1127[4] = v1106;
  v1127[5] = v1105;
  v1128 = v4;
  do
    v121 = __ldxr(p_shared_weak_owners);
  while (__stxr(v121 + 1, p_shared_weak_owners));
  v122 = _Block_copy(v1127);
  v123 = v122;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v120;
  LODWORD(v1196) = 1219;
  if (v122)
    v124 = _Block_copy(v122);
  else
    v124 = 0;
  v1195[1] = v124;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v120 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v123)
    _Block_release(v123);
  v125 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1125[0] = MEMORY[0x1E0C809B0];
  v1125[1] = 1174405120;
  v1125[2] = ___ZN4coex6Module5State4initEv_block_invoke_60;
  v1125[3] = &__block_descriptor_tmp_61;
  v1125[4] = v1106;
  v1125[5] = v1105;
  v1126 = v4;
  do
    v126 = __ldxr(p_shared_weak_owners);
  while (__stxr(v126 + 1, p_shared_weak_owners));
  v127 = _Block_copy(v1125);
  v128 = v127;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v125;
  LODWORD(v1196) = 1220;
  if (v127)
    v129 = _Block_copy(v127);
  else
    v129 = 0;
  v1195[1] = v129;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v125 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v128)
    _Block_release(v128);
  v130 = (uint64_t *)*((_QWORD *)v1106 + 15);
  v1123[0] = MEMORY[0x1E0C809B0];
  v1123[1] = 1174405120;
  v1123[2] = ___ZN4coex6Module5State4initEv_block_invoke_62;
  v1123[3] = &__block_descriptor_tmp_63;
  v1123[4] = v1106;
  v1123[5] = v1105;
  v1124 = v4;
  do
    v131 = __ldxr(p_shared_weak_owners);
  while (__stxr(v131 + 1, p_shared_weak_owners));
  v132 = _Block_copy(v1123);
  v133 = v132;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 1174405120;
  *(_QWORD *)&v1194 = ___ZN4coex9XpcClient22registerCommandHandlerE16WCMSendMessageIdN8dispatch5blockIU13block_pointerFvN3xpc6objectENS_5SubIdEEEE_block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_5_1;
  v1195[0] = v130;
  LODWORD(v1196) = 1223;
  if (v132)
    v134 = _Block_copy(v132);
  else
    v134 = 0;
  v1195[1] = v134;
  ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped(v130 + 1, (uint64_t)&block);
  if (v1195[1])
    _Block_release(v1195[1]);
  if (v133)
    _Block_release(v133);
  v135 = (_QWORD *)*((_QWORD *)v1106 + 15);
  v1182[0] = (void *)MEMORY[0x1E0C809B0];
  v1182[1] = (void *)0x40000000;
  *(_QWORD *)&v1183 = ___ZN4coex9XpcClient5startEv_block_invoke;
  *((_QWORD *)&v1183 + 1) = &__block_descriptor_tmp_8;
  *(_QWORD *)&v1184 = v135;
  v1173 = v1182;
  *(_QWORD *)&block = MEMORY[0x1E0C809B0];
  *((_QWORD *)&block + 1) = 0x40000000;
  *(_QWORD *)&v1194 = ___ZNK3ctu20SharedSynchronizableINS_9XpcClientEE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *((_QWORD *)&v1194 + 1) = &__block_descriptor_tmp_11_1;
  v1195[0] = v135 + 1;
  v1195[1] = &v1173;
  v136 = v135[3];
  if (v135[4])
    dispatch_async_and_wait(v136, &block);
  else
    dispatch_sync(v136, &block);
  v137 = (_QWORD *)*((_QWORD *)v1106 + 13);
  v1173 = (void **)MEMORY[0x1E0C809B0];
  v1174 = 0x40000000;
  v1175 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvvENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEEEENS7_5mutexEEES3_vJEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke;
  v1176 = &__block_descriptor_tmp_251;
  v1177 = v1079;
  v1178 = coex::Module::State::handleCommandDriverStarted_sync;
  v1179 = 0;
  v138 = _Block_copy(&v1173);
  v1085 = v137;
  v139 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 10);
  if (!v139 || (v140 = *((_QWORD *)v1106 + 9), (v1081 = std::__shared_weak_count::lock(v139)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v141 = *((_QWORD *)v1106 + 11);
  v1180 = v141;
  v1070 = v138;
  if (v138)
    v142 = _Block_copy(v138);
  else
    v142 = 0;
  v1181 = v142;
  dispatch_retain(v141);
  v1183 = 0u;
  *(_OWORD *)v1182 = 0u;
  v1186 = v141;
  if (v142)
    v142 = _Block_copy(v142);
  v1187 = v142;
  dispatch_retain(v141);
  object = v141;
  v1076 = v4;
  v1093 = v140;
  if (!v142)
  {
    v1189 = 0;
    dispatch_retain(v141);
    goto LABEL_253;
  }
  v143 = _Block_copy(v142);
  v1189 = v143;
  dispatch_retain(v141);
  if (!v143)
  {
LABEL_253:
    dispatch_retain(v141);
    v1190 = 0;
    goto LABEL_254;
  }
  v144 = _Block_copy(v143);
  dispatch_retain(v141);
  v1190 = 0;
  if (!v144)
  {
LABEL_254:
    dispatch_retain(v141);
    v1063 = 0;
    v149 = 1;
LABEL_255:
    dispatch_retain(v141);
    v1077 = 0;
    v150 = 1;
LABEL_256:
    dispatch_retain(v141);
    v146 = 0;
    v151 = 1;
LABEL_257:
    dispatch_retain(v141);
    v147 = 0;
    v1191 = (unint64_t)v141;
    v152 = 1;
    goto LABEL_258;
  }
  v145 = _Block_copy(v144);
  dispatch_retain(v141);
  v1063 = v144;
  if (!v145)
  {
    v149 = 0;
    goto LABEL_255;
  }
  v146 = _Block_copy(v145);
  dispatch_retain(v141);
  v1077 = v145;
  if (!v146)
  {
    v149 = 0;
    v150 = 0;
    goto LABEL_256;
  }
  v147 = _Block_copy(v146);
  dispatch_retain(v141);
  if (!v147)
  {
    v149 = 0;
    v150 = 0;
    v151 = 0;
    goto LABEL_257;
  }
  v148 = _Block_copy(v147);
  dispatch_retain(v141);
  v1191 = (unint64_t)v141;
  if (v148)
  {
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v152 = 0;
    v1192 = _Block_copy(v148);
    dispatch_retain(v141);
    dispatch_release(v141);
    _Block_release(v148);
    goto LABEL_259;
  }
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
LABEL_258:
  v1192 = 0;
  dispatch_retain(v141);
  dispatch_release(v141);
LABEL_259:
  dispatch_release(v141);
  if ((v152 & 1) == 0)
    _Block_release(v147);
  dispatch_release(v141);
  if ((v151 & 1) == 0)
    _Block_release(v146);
  v1190 = boost::function0<void>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>)::stored_vtable;
  dispatch_release(v141);
  if ((v150 & 1) == 0)
    _Block_release(v1077);
  dispatch_release(v141);
  if ((v149 & 1) == 0)
    _Block_release(v1063);
  *((_QWORD *)&v1194 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v1194 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&block = 0;
  boost::function0<void>::move_assign((uint64_t)&block, (uint64_t *)&v1190);
  boost::function0<void>::move_assign((uint64_t)&v1190, (uint64_t *)&v1183 + 1);
  boost::function0<void>::move_assign((uint64_t)&v1183 + 8, (uint64_t *)&block);
  if ((_QWORD)block)
  {
    if ((block & 1) == 0)
    {
      v153 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
      if (v153)
        v153((char *)&block + 8, (char *)&block + 8, 2);
    }
  }
  if (v1190)
  {
    if ((v1190 & 1) == 0)
    {
      v154 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v1190 & 0xFFFFFFFFFFFFFFFELL);
      if (v154)
        v154((uint64_t)&v1191, &v1191, 2u);
    }
    v1190 = 0;
  }
  dispatch_release(object);
  if (v1189)
    _Block_release(v1189);
  dispatch_release(v1186);
  if (v1187)
    _Block_release(v1187);
  v1078 = (char *)v1106 + 224;
  v155 = (unint64_t *)&v1081->__shared_weak_owners_;
  do
    v156 = __ldxr(v155);
  while (__stxr(v156 + 1, v155));
  v157 = operator new(0x18uLL);
  *v157 = &off_1E7913798;
  v157[1] = v1093;
  v157[2] = v1081;
  do
    v158 = __ldxr(v155);
  while (__stxr(v158 + 1, v155));
  v159 = operator new(0x18uLL);
  v160 = v159;
  *v159 = &off_1E7913798;
  v159[1] = v1093;
  v159[2] = v1081;
  do
    v161 = __ldxr(v155);
  while (__stxr(v161 + 1, v155));
  *((_QWORD *)&block + 1) = v159;
  LODWORD(block) = 2;
  v162 = v1182[1];
  if (v1182[1] < (void *)v1183)
  {
    v163 = operator new(0x18uLL);
    *v163 = &off_1E7913798;
    v163[1] = v1093;
    v163[2] = v1081;
    do
      v164 = __ldxr(v155);
    while (__stxr(v164 + 1, v155));
    v162[1] = v163;
    *(_DWORD *)v162 = 2;
    v1182[1] = v162 + 3;
LABEL_290:
    (*(void (**)(_QWORD *))(*v160 + 8))(v160);
    goto LABEL_291;
  }
  v287 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v1182, (uint64_t)&block);
  v288 = block ^ ((int)block >> 31);
  v1182[1] = v287;
  if (v288 == 2)
  {
    v160 = (_QWORD *)*((_QWORD *)&block + 1);
    if (!*((_QWORD *)&block + 1))
      goto LABEL_291;
    goto LABEL_290;
  }
  if (v288 == 1)
  {
    v289 = v1194;
    if ((_QWORD)v1194)
    {
      v290 = (unsigned int *)(v1194 + 12);
      do
      {
        v291 = __ldaxr(v290);
        v292 = v291 - 1;
      }
      while (__stlxr(v292, v290));
      if (!v292)
LABEL_500:
        (*(void (**)(uint64_t))(*(_QWORD *)v289 + 24))(v289);
    }
  }
  else
  {
    v289 = v1194;
    if ((_QWORD)v1194)
    {
      v770 = (unsigned int *)(v1194 + 12);
      do
      {
        v771 = __ldaxr(v770);
        v772 = v771 - 1;
      }
      while (__stlxr(v772, v770));
      if (!v772)
        goto LABEL_500;
    }
  }
LABEL_291:
  (*(void (**)(_QWORD *))(*v157 + 8))(v157);
  std::__shared_weak_count::__release_weak(v1081);
  v165 = (uint64_t **)v1085[16];
  *(_QWORD *)&v166 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v166 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v1202 = v166;
  v1201 = v166;
  v1200 = v166;
  v1199 = v166;
  v1198 = v166;
  v1197 = v166;
  v1196 = v166;
  *(_OWORD *)v1195 = v166;
  v1194 = v166;
  block = v166;
  v167 = (pthread_mutex_t *)v165[3];
  v1203 = 10;
  __p = &block;
  v1205 = 0;
  v1206 = v167;
  pthread_mutex_lock(v167);
  v1191 = 0xAAAAAAAAAAAAAAAALL;
  v1190 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
  v168 = (unsigned int *)v165[1];
  v1086 = (uint64_t ***)v165;
  if (!v168 || (v169 = atomic_load(v168 + 2), v169 != 1))
  {
    v173 = (uint64_t **)operator new(0x20uLL);
    v174 = *v165;
    v175 = **v165;
    v1094 = v173;
    v176 = operator new(0x40uLL);
    v177 = v176;
    *v176 = v176;
    v176[1] = v176;
    v176[2] = 0;
    v178 = *(_QWORD **)(v175 + 8);
    if (v178 != (_QWORD *)v175)
    {
      v179 = 0;
      v180 = v176;
      do
      {
        v181 = operator new(0x20uLL);
        v181[2] = v178[2];
        v182 = v178[3];
        v181[3] = v182;
        if (v182)
        {
          v183 = (unsigned int *)(v182 + 8);
          do
            v184 = __ldxr(v183);
          while (__stxr(v184 + 1, v183));
          v180 = (_QWORD *)*v177;
          v179 = v177[2];
        }
        *v181 = v180;
        v181[1] = v177;
        v180[1] = v181;
        *v177 = v181;
        v177[2] = ++v179;
        v178 = (_QWORD *)v178[1];
        v180 = v181;
      }
      while (v178 != (_QWORD *)v175);
    }
    v1058 = v174;
    v1064 = (_BYTE *)v175;
    v177[3] = 0;
    v185 = (_QWORD **)(v177 + 3);
    v177[4] = 0;
    v186 = v177 + 4;
    v177[5] = 0;
    *((_BYTE *)v177 + 48) = *(_BYTE *)(v175 + 48);
    v177[3] = v177 + 4;
    v187 = *(_QWORD **)(v175 + 24);
    v188 = (_QWORD *)(v175 + 32);
    if (v187 == (_QWORD *)(v175 + 32))
    {
LABEL_303:
      *((_BYTE *)v177 + 56) = v1064[56];
      v189 = (_QWORD *)*((_QWORD *)v1064 + 3);
      if (v189 != v188)
      {
        v190 = (_QWORD *)v177[3];
        v191 = v177[1];
        do
        {
          v190[6] = v191;
          v192 = v1064;
          if (v189 != v188)
            v192 = (_BYTE *)v189[6];
          v193 = (_QWORD *)v189[1];
          v194 = v193;
          v195 = v189;
          if (v193)
          {
            do
            {
              v196 = v194;
              v194 = (_QWORD *)*v194;
            }
            while (v194);
          }
          else
          {
            do
            {
              v196 = (_QWORD *)v195[2];
              v249 = *v196 == (_QWORD)v195;
              v195 = v196;
            }
            while (!v249);
          }
          v197 = v1064;
          if (v196 != v188)
            v197 = (_BYTE *)v196[6];
          while (v192 != v197)
          {
            v192 = (_BYTE *)*((_QWORD *)v192 + 1);
            v191 = *(_QWORD *)(v191 + 8);
          }
          if (v193)
          {
            do
            {
              v198 = v193;
              v193 = (_QWORD *)*v193;
            }
            while (v193);
          }
          else
          {
            do
            {
              v198 = (_QWORD *)v189[2];
              v249 = *v198 == (_QWORD)v189;
              v189 = v198;
            }
            while (!v249);
          }
          v199 = (_QWORD *)v190[1];
          if (v199)
          {
            do
            {
              v200 = v199;
              v199 = (_QWORD *)*v199;
            }
            while (v199);
          }
          else
          {
            do
            {
              v200 = (_QWORD *)v190[2];
              v249 = *v200 == (_QWORD)v190;
              v190 = v200;
            }
            while (!v249);
          }
          v189 = v198;
          v190 = v200;
        }
        while (v198 != v188);
      }
      *v1094 = v177;
      v1094[1] = 0;
      v220 = (uint64_t *)operator new(0x18uLL);
      v165 = (uint64_t **)v1086;
      v220[1] = 0x100000001;
      *v220 = (uint64_t)off_1E79135C0;
      v220[2] = (uint64_t)v177;
      v1094[1] = v220;
      v1094[2] = (uint64_t *)v1058[2];
      v221 = v1058[3];
      v1094[3] = (uint64_t *)v221;
      if (v221)
      {
        v222 = (unsigned int *)(v221 + 8);
        do
          v223 = __ldxr(v222);
        while (__stxr(v223 + 1, v222));
      }
      v224 = (uint64_t **)operator new(0x18uLL);
      v224[1] = (uint64_t *)0x100000001;
      *v224 = (uint64_t *)off_1E7913560;
      v224[2] = (uint64_t *)v1094;
      v225 = (unsigned int *)v1086[1];
      *v1086 = v1094;
      v1086[1] = v224;
      if (v225)
      {
        v226 = v225 + 2;
        do
        {
          v227 = __ldaxr(v226);
          v228 = v227 - 1;
        }
        while (__stlxr(v228, v226));
        if (!v228)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v225 + 16))(v225);
          v229 = v225 + 3;
          do
          {
            v230 = __ldaxr(v229);
            v231 = v230 - 1;
          }
          while (__stlxr(v231, v229));
          if (!v231)
            (*(void (**)(unsigned int *))(*(_QWORD *)v225 + 24))(v225);
        }
      }
      v172 = 0;
      v170 = **v1086;
LABEL_387:
      v171 = (uint64_t *)v170[1];
      if (v170 == v171)
        goto LABEL_491;
      goto LABEL_388;
    }
    while (1)
    {
      v201 = *((_DWORD *)v187 + 8);
      v202 = (_QWORD *)*v186;
      v203 = v177 + 4;
      if (*v185 != v186)
      {
        v204 = (_QWORD *)*v186;
        v205 = v177 + 4;
        if (v202)
        {
          do
          {
            v203 = v204;
            v204 = (_QWORD *)v204[1];
          }
          while (v204);
        }
        else
        {
          do
          {
            v203 = (_QWORD *)v205[2];
            v249 = *v203 == (_QWORD)v205;
            v205 = v203;
          }
          while (v249);
        }
        v206 = *((_DWORD *)v187 + 10);
        v207 = *((_DWORD *)v203 + 8);
        if (v207 == v201)
        {
          if (v201 != 1)
            goto LABEL_348;
          if (*((_DWORD *)v203 + 10) >= v206)
          {
            v208 = (_QWORD *)*v186;
            v209 = v177 + 4;
            v210 = v177 + 4;
            if (v202)
              goto LABEL_352;
LABEL_359:
            v214 = operator new(0x38uLL);
            v215 = *((_OWORD *)v187 + 2);
            v214[6] = v187[6];
            *((_OWORD *)v214 + 2) = v215;
            *v214 = 0;
            v214[1] = 0;
            v214[2] = v210;
            *v209 = v214;
            v216 = (_QWORD *)**v185;
            if (v216)
            {
              *v185 = v216;
              v214 = (_QWORD *)*v209;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v177[4], v214);
            ++v177[5];
            goto LABEL_362;
          }
        }
        else if (v207 >= v201)
        {
LABEL_348:
          v209 = v177 + 4;
          v210 = v177 + 4;
          if (!v202)
            goto LABEL_359;
          v208 = (_QWORD *)*v186;
          if (v201 != 1)
          {
            v211 = *((_DWORD *)v202 + 8);
            v210 = (_QWORD *)*v186;
            while (v201 != v211)
            {
              if (v201 < v211)
              {
                v219 = *v210;
                v209 = v210;
                if (!*v210)
                  goto LABEL_359;
              }
              else
              {
                if (v211 >= v201)
                  goto LABEL_362;
                v219 = v210[1];
                if (!v219)
                  goto LABEL_358;
              }
              v211 = *(_DWORD *)(v219 + 32);
              v210 = (_QWORD *)v219;
            }
            goto LABEL_362;
          }
          while (1)
          {
LABEL_352:
            v210 = v208;
            v212 = *((_DWORD *)v208 + 8);
            if (v212 == 1)
            {
              v213 = *((_DWORD *)v208 + 10);
              if (v213 > v206)
                goto LABEL_351;
              if (v213 >= v206)
                goto LABEL_362;
            }
            else if (v212 > 1)
            {
LABEL_351:
              v208 = (_QWORD *)*v208;
              v209 = v210;
              if (!*v210)
                goto LABEL_359;
              continue;
            }
            v208 = (_QWORD *)v208[1];
            if (!v208)
            {
LABEL_358:
              v209 = v210 + 1;
              goto LABEL_359;
            }
          }
        }
      }
      if (v202)
        v210 = v203;
      else
        v210 = v177 + 4;
      if (v202)
        v209 = v203 + 1;
      else
        v209 = v177 + 4;
      if (!*v209)
        goto LABEL_359;
LABEL_362:
      v217 = (_QWORD *)v187[1];
      if (v217)
      {
        do
        {
          v218 = v217;
          v217 = (_QWORD *)*v217;
        }
        while (v217);
      }
      else
      {
        do
        {
          v218 = (_QWORD *)v187[2];
          v249 = *v218 == (_QWORD)v187;
          v187 = v218;
        }
        while (!v249);
      }
      v187 = v218;
      if (v218 == v188)
        goto LABEL_303;
    }
  }
  v170 = (uint64_t *)**v165;
  v171 = v165[2];
  v172 = 2;
  if (v171 == v170)
    goto LABEL_387;
LABEL_388:
  v232 = 0;
  v1095 = v172 - 1;
  do
  {
    v235 = v171[2];
    v236 = *(uint64_t **)(v235 + 32);
    if (v236)
    {
      for (i = *v236; i != v236[1]; i += 24)
      {
        if ((*(_DWORD *)i ^ (*(int *)i >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(i + 8) + 24))(*(_QWORD *)(i + 8)) & 1) != 0)
            goto LABEL_405;
        }
        else
        {
          v238 = *(_QWORD *)(i + 16);
          if (!v238 || (v239 = atomic_load((unsigned int *)(v238 + 8))) == 0)
          {
LABEL_405:
            if (*(_BYTE *)(v235 + 24))
            {
              *(_BYTE *)(v235 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v235, &block);
            }
            break;
          }
        }
      }
    }
    v233 = v171[2];
    if (*(_BYTE *)(v233 + 24))
    {
      v170 = (uint64_t *)v171[1];
      goto LABEL_391;
    }
    v240 = **v165;
    v241 = (uint64_t **)(v240 + 32);
    v242 = *(_QWORD *)(v240 + 32);
    if (!v242)
    {
      if (*(uint64_t **)(v240 + 80) != v171)
        goto LABEL_482;
      v264 = (uint64_t *)v171[1];
      v266 = (uint64_t **)(v240 + 32);
      v245 = (uint64_t *)(v240 + 32);
      if (v264 != (uint64_t *)v240)
        goto LABEL_478;
LABEL_460:
      v269 = (uint64_t *)v245[1];
      v270 = v245;
      if (v269)
      {
        do
        {
          v271 = v269;
          v269 = (uint64_t *)*v269;
        }
        while (v269);
      }
      else
      {
        do
        {
          v271 = (uint64_t *)v270[2];
          v249 = *v271 == (_QWORD)v270;
          v270 = v271;
        }
        while (!v249);
      }
      if (*(uint64_t **)(v240 + 24) == v245)
        *(_QWORD *)(v240 + 24) = v271;
      --*(_QWORD *)(v240 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v242, v245);
      operator delete(v245);
      goto LABEL_482;
    }
    v243 = *(_DWORD *)(v233 + 64);
    v244 = *(_DWORD *)(v233 + 72);
    v245 = (uint64_t *)(v240 + 32);
    v246 = *(_QWORD *)(v240 + 32);
    if (v243 == 1)
    {
      v245 = (uint64_t *)(v240 + 32);
      v247 = *(_QWORD *)(v240 + 32);
      do
      {
        while (1)
        {
          v260 = *(_DWORD *)(v247 + 32);
          v261 = v260 < 1;
          if (v260 == 1)
            v261 = *(_DWORD *)(v247 + 40) < v244;
          if (v261)
            break;
          v245 = (uint64_t *)v247;
          v247 = *(_QWORD *)v247;
          if (!v247)
            goto LABEL_420;
        }
        v247 = *(_QWORD *)(v247 + 8);
      }
      while (v247);
    }
    else
    {
      do
      {
        v248 = *(_DWORD *)(v246 + 32);
        v249 = v248 == v243;
        v250 = v248 < v243;
        if (v248 >= v243)
          v251 = (uint64_t *)v246;
        else
          v251 = (uint64_t *)(v246 + 8);
        if (v250)
          v252 = v245;
        else
          v252 = (uint64_t *)v246;
        if (v249)
        {
          v251 = (uint64_t *)v246;
          v245 = (uint64_t *)v246;
        }
        else
        {
          v245 = v252;
        }
        v246 = *v251;
      }
      while (*v251);
    }
LABEL_420:
    if ((uint64_t *)v245[6] != v171)
      goto LABEL_482;
    v253 = (uint64_t **)(v240 + 32);
    v254 = *(uint64_t ***)(v240 + 32);
    if (v243 == 1)
    {
      while (1)
      {
        v262 = *((_DWORD *)v254 + 8);
        if (v262 == 1)
        {
          if (v244 < *((_DWORD *)v254 + 10))
            goto LABEL_443;
LABEL_438:
          v254 = (uint64_t **)v254[1];
          if (!v254)
            goto LABEL_444;
        }
        else
        {
          if (v262 <= 1)
            goto LABEL_438;
LABEL_443:
          v253 = v254;
          v254 = (uint64_t **)*v254;
          if (!v254)
            goto LABEL_444;
        }
      }
    }
    do
    {
      v255 = *((_DWORD *)v254 + 8);
      v256 = (uint64_t ***)(v254 + 1);
      v257 = v243 == v255;
      v258 = v243 < v255;
      if (v243 >= v255)
        v259 = (uint64_t ***)(v254 + 1);
      else
        v259 = (uint64_t ***)v254;
      if (!v258)
        v254 = v253;
      if (v257)
        v259 = v256;
      else
        v253 = v254;
      v254 = *v259;
    }
    while (*v259);
LABEL_444:
    v263 = (uint64_t *)v240;
    if (v253 != v241)
      v263 = v253[6];
    v264 = (uint64_t *)v171[1];
    if (v264 == v263)
      goto LABEL_460;
    if (v243 == 1)
    {
      while (1)
      {
        while (1)
        {
          v266 = (uint64_t **)v242;
          v267 = *(_DWORD *)(v242 + 32);
          if (v267 == 1)
            break;
          if (v267 <= 1)
            goto LABEL_456;
LABEL_450:
          v242 = *(_QWORD *)v242;
          if (!*v266)
          {
            v241 = v266;
            goto LABEL_478;
          }
        }
        v268 = *(_DWORD *)(v242 + 40);
        if (v268 > v244)
          goto LABEL_450;
        if (v268 >= v244)
        {
          *(_QWORD *)(v242 + 48) = v264;
          goto LABEL_482;
        }
LABEL_456:
        v242 = *(_QWORD *)(v242 + 8);
        if (!v242)
        {
          v241 = v266 + 1;
          goto LABEL_478;
        }
      }
    }
    v265 = *(_DWORD *)(v242 + 32);
    if (v243 == v265)
      goto LABEL_481;
    while (v243 >= v265)
    {
      if (v265 >= v243)
        goto LABEL_481;
      v272 = *(_QWORD *)(v242 + 8);
      if (!v272)
      {
        v241 = (uint64_t **)(v242 + 8);
        goto LABEL_477;
      }
LABEL_469:
      v265 = *(_DWORD *)(v272 + 32);
      v242 = v272;
      if (v243 == v265)
      {
        *(_QWORD *)(v272 + 48) = v264;
        goto LABEL_482;
      }
    }
    v272 = *(_QWORD *)v242;
    if (*(_QWORD *)v242)
      goto LABEL_469;
    v241 = (uint64_t **)v242;
LABEL_477:
    v266 = (uint64_t **)v242;
LABEL_478:
    v242 = (uint64_t)operator new(0x38uLL);
    v273 = *(_QWORD *)(v233 + 64);
    *(_DWORD *)(v242 + 40) = *(_DWORD *)(v233 + 72);
    *(_QWORD *)(v242 + 32) = v273;
    *(_QWORD *)(v242 + 48) = 0;
    *(_QWORD *)v242 = 0;
    *(_QWORD *)(v242 + 8) = 0;
    *(_QWORD *)(v242 + 16) = v266;
    *v241 = (uint64_t *)v242;
    v274 = **(_QWORD **)(v240 + 24);
    v275 = (uint64_t *)v242;
    if (v274)
    {
      *(_QWORD *)(v240 + 24) = v274;
      v275 = *v241;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v240 + 32), v275);
    ++*(_QWORD *)(v240 + 40);
LABEL_481:
    *(_QWORD *)(v242 + 48) = v264;
LABEL_482:
    v276 = *v171;
    v170 = (uint64_t *)v171[1];
    *(_QWORD *)(v276 + 8) = v170;
    *(_QWORD *)v171[1] = v276;
    --*(_QWORD *)(v240 + 16);
    v277 = (unsigned int *)v171[3];
    v165 = (uint64_t **)v1086;
    if (v277)
    {
      v278 = v277 + 2;
      do
      {
        v279 = __ldaxr(v278);
        v280 = v279 - 1;
      }
      while (__stlxr(v280, v278));
      if (!v280)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v277 + 16))(v277);
        v281 = v277 + 3;
        do
        {
          v282 = __ldaxr(v281);
          v283 = v282 - 1;
        }
        while (__stlxr(v283, v281));
        if (!v283)
          (*(void (**)(unsigned int *))(*(_QWORD *)v277 + 24))(v277);
      }
    }
    operator delete(v171);
LABEL_391:
    v234 = v170 != (uint64_t *)**v165 && v1095 >= ++v232;
    v171 = v170;
  }
  while (v234);
LABEL_491:
  v165[2] = v170;
  v284 = operator new(0x50uLL);
  v284[1] = 0;
  v284[2] = 0;
  *((_BYTE *)v284 + 24) = 1;
  *((_DWORD *)v284 + 7) = 1;
  *v284 = off_1E7913620;
  v285 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v285, (uint64_t *)v1182);
  v285[3] = 0;
  v286 = *((_QWORD *)&v1183 + 1);
  if (*((_QWORD *)&v1183 + 1))
  {
    v285[3] = *((_QWORD *)&v1183 + 1);
    if ((v286 & 1) != 0)
    {
      *((_OWORD *)v285 + 2) = v1184;
      v285[6] = v1185;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v286 & 0xFFFFFFFFFFFFFFFELL))(&v1184, v285 + 4, 0);
    }
  }
  v284[4] = v285;
  v284[5] = 0;
  v293 = operator new(0x18uLL);
  v293[1] = 0x100000001;
  *v293 = off_1E7913678;
  v293[2] = v285;
  v284[5] = v293;
  v284[6] = v165[3];
  v294 = v165[4];
  v284[7] = v294;
  if (v294)
  {
    v295 = (unsigned int *)(v294 + 1);
    do
      v296 = __ldxr(v295);
    while (__stxr(v296 + 1, v295));
  }
  *((_DWORD *)v284 + 16) = 0;
  *((_BYTE *)v284 + 68) = 0;
  v1190 = (uint64_t (**)())v284;
  v297 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v297 + 1) = 0x100000001;
  v298 = v297 + 2;
  *(_QWORD *)v297 = off_1E79136D8;
  *((_QWORD *)v297 + 2) = v284;
  v1191 = (unint64_t)v297;
  v299 = (uint64_t *)**v165;
  v300 = operator new(0x20uLL);
  v301 = v300;
  v302 = v299 + 4;
  v300[2] = v284;
  v300[3] = v297;
  do
    v303 = __ldxr(v298);
  while (__stxr(v303 + 1, v298));
  v304 = *v299;
  *(_QWORD *)(v304 + 8) = v300;
  *v300 = v304;
  *v299 = (uint64_t)v300;
  v300[1] = v299;
  ++v299[2];
  v305 = (uint64_t *)v299[4];
  if (v305)
  {
    v306 = v299 + 4;
    v307 = v299[4];
    do
    {
      v308 = *(_DWORD *)(v307 + 32);
      v309 = v308 == 2;
      v310 = v308 < 2;
      if (v308 >= 2)
        v311 = (uint64_t *)v307;
      else
        v311 = (uint64_t *)(v307 + 8);
      if (!v310)
        v306 = (uint64_t *)v307;
      if (v309)
      {
        v311 = (uint64_t *)v307;
        v306 = (uint64_t *)v307;
      }
      v307 = *v311;
    }
    while (*v311);
    if (v306 == v302 || *((_DWORD *)v306 + 8) != 2)
    {
      v312 = *((_DWORD *)v305 + 8);
      while (v312 != 2)
      {
        if (v312 < 3)
        {
          v313 = (uint64_t *)v305[1];
          if (!v313)
          {
            v302 = v305 + 1;
            goto LABEL_528;
          }
        }
        else
        {
          v313 = (uint64_t *)*v305;
          v302 = v305;
          if (!*v305)
            goto LABEL_528;
        }
        v312 = *((_DWORD *)v313 + 8);
        v305 = v313;
      }
    }
    *((_DWORD *)v284 + 16) = 2;
    *(_QWORD *)((char *)v284 + 68) = 0xAAAAAAAAAAAAAA00;
LABEL_531:
    v316 = v297 + 3;
    do
      v317 = __ldxr(v316);
    while (__stxr(v317 + 1, v316));
    *(_QWORD *)&v1122 = v284;
    *((_QWORD *)&v1122 + 1) = v297;
    do
      v318 = __ldxr(v316);
    while (__stxr(v318 + 1, v316));
    do
    {
      v319 = __ldaxr(v316);
      v320 = v319 - 1;
    }
    while (__stlxr(v320, v316));
    if (!v320)
      (*(void (**)(unsigned int *))(*(_QWORD *)v297 + 24))(v297);
    v321 = (unsigned int *)v1191;
    v322 = v1070;
    if (v1191)
      goto LABEL_539;
  }
  else
  {
    v305 = v299 + 4;
LABEL_528:
    v314 = operator new(0x38uLL);
    v314[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v314 + 10) = -1431655766;
    v314[6] = v301;
    *v314 = 0;
    v314[1] = 0;
    v314[2] = v305;
    *v302 = (uint64_t)v314;
    v315 = *(_QWORD *)v299[3];
    if (v315)
    {
      v299[3] = v315;
      v314 = (_QWORD *)*v302;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v299[4], v314);
    ++v299[5];
    v284 = v1190;
    v297 = (unsigned int *)v1191;
    *((_DWORD *)v1190 + 16) = 2;
    *(_QWORD *)((char *)v284 + 68) = 0xAAAAAAAAAAAAAA00;
    if (v297)
      goto LABEL_531;
    v1122 = (unint64_t)v284;
    v321 = (unsigned int *)v1191;
    v322 = v1070;
    if (v1191)
    {
LABEL_539:
      v323 = v321 + 2;
      do
      {
        v324 = __ldaxr(v323);
        v325 = v324 - 1;
      }
      while (__stlxr(v325, v323));
      if (!v325)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v321 + 16))(v321);
        v326 = v321 + 3;
        do
        {
          v327 = __ldaxr(v326);
          v328 = v327 - 1;
        }
        while (__stlxr(v328, v326));
        if (!v328)
          (*(void (**)(unsigned int *))(*(_QWORD *)v321 + 24))(v321);
      }
    }
  }
  pthread_mutex_unlock(v1206);
  v329 = (char *)__p;
  if (__p)
  {
    if (v1205 - 1 >= 0)
    {
      v330 = (char *)__p + 16 * v1205;
      do
      {
        v331 = (unsigned int *)*((_QWORD *)v330 - 1);
        if (v331)
        {
          v332 = v331 + 2;
          do
          {
            v333 = __ldaxr(v332);
            v334 = v333 - 1;
          }
          while (__stlxr(v334, v332));
          if (!v334)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v331 + 16))(v331);
            v335 = v331 + 3;
            do
            {
              v336 = __ldaxr(v335);
              v337 = v336 - 1;
            }
            while (__stlxr(v337, v335));
            if (!v337)
              (*(void (**)(unsigned int *))(*(_QWORD *)v331 + 24))(v331);
          }
        }
        v330 -= 16;
      }
      while (v330 > v329);
    }
    if (v1203 >= 0xB)
      operator delete(__p);
  }
  if (*((_QWORD *)&v1183 + 1))
  {
    if ((BYTE8(v1183) & 1) == 0)
    {
      v338 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v1183 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v338)
        v338(&v1184, &v1184, 2);
    }
    *((_QWORD *)&v1183 + 1) = 0;
  }
  v339 = (char *)v1182[0];
  if (!v1182[0])
    goto LABEL_586;
  v340 = v1182[1];
  v341 = v1182[0];
  if (v1182[1] == v1182[0])
    goto LABEL_585;
  v342 = (char *)v1182[1];
  while (2)
  {
    v343 = *((_DWORD *)v342 - 6);
    v342 -= 24;
    v344 = v343 ^ (v343 >> 31);
    if (v344 == 2)
    {
      v349 = *(v340 - 2);
      if (v349)
        (*(void (**)(uint64_t))(*(_QWORD *)v349 + 8))(v349);
    }
    else if (v344 == 1)
    {
      v345 = (unsigned int *)*(v340 - 1);
      if (v345)
      {
        v346 = v345 + 3;
        do
        {
          v347 = __ldaxr(v346);
          v348 = v347 - 1;
        }
        while (__stlxr(v348, v346));
        if (!v348)
          goto LABEL_576;
      }
    }
    else
    {
      v345 = (unsigned int *)*(v340 - 1);
      if (v345)
      {
        v350 = v345 + 3;
        do
        {
          v351 = __ldaxr(v350);
          v352 = v351 - 1;
        }
        while (__stlxr(v352, v350));
        if (!v352)
LABEL_576:
          (*(void (**)(unsigned int *))(*(_QWORD *)v345 + 24))(v345);
      }
    }
    v340 = v342;
    if (v342 != v339)
      continue;
    break;
  }
  v341 = v1182[0];
LABEL_585:
  v1182[1] = v339;
  operator delete(v341);
LABEL_586:
  dispatch_release(v1180);
  if (v1181)
    _Block_release(v1181);
  v353 = (unint64_t *)&v1081->__shared_owners_;
  do
    v354 = __ldaxr(v353);
  while (__stlxr(v354 - 1, v353));
  if (v354)
  {
    if (!v322)
      goto LABEL_595;
LABEL_594:
    _Block_release(v322);
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1081->__on_zero_shared)(v1081);
    std::__shared_weak_count::__release_weak(v1081);
    if (v322)
      goto LABEL_594;
  }
LABEL_595:
  v355 = operator new(0x20uLL);
  v355[1] = v1122;
  v356 = *((_QWORD *)v1106 + 28);
  *(_QWORD *)v355 = v356;
  *((_QWORD *)v355 + 1) = v1078;
  *(_QWORD *)(v356 + 8) = v355;
  *((_QWORD *)v1106 + 28) = v355;
  ++*((_QWORD *)v1106 + 30);
  v357 = *((_QWORD *)v1106 + 13);
  v1173 = (void **)MEMORY[0x1E0C809B0];
  v1174 = 0x40000000;
  v1175 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISF_EENSL_IFvRKNS7_10connectionESD_SE_EEENS7_5mutexEEES3_vJSD_SE_EEEDTcl7connectfp_cvNSI_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke;
  v1176 = &__block_descriptor_tmp_255;
  v1177 = v1079;
  v1178 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleCommandDriverStateUpdate_sync;
  v1179 = 0;
  v358 = _Block_copy(&v1173);
  v1096 = v357;
  v359 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 10);
  if (!v359 || (v360 = *((_QWORD *)v1106 + 9), (v1082 = std::__shared_weak_count::lock(v359)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v361 = *((_QWORD *)v1106 + 11);
  v1180 = v361;
  if (v358)
    v362 = _Block_copy(v358);
  else
    v362 = 0;
  v1181 = v362;
  dispatch_retain(v361);
  v1183 = 0u;
  *(_OWORD *)v1182 = 0u;
  v1186 = v361;
  if (v362)
    v362 = _Block_copy(v362);
  v1187 = v362;
  dispatch_retain(v361);
  object = v361;
  v1071 = v358;
  if (!v362)
  {
    v1189 = 0;
    dispatch_retain(v361);
    goto LABEL_611;
  }
  v363 = _Block_copy(v362);
  v1189 = v363;
  dispatch_retain(v361);
  if (!v363)
  {
LABEL_611:
    dispatch_retain(v361);
    v1190 = 0;
    goto LABEL_612;
  }
  v364 = _Block_copy(v363);
  dispatch_retain(v361);
  v1190 = 0;
  if (!v364)
  {
LABEL_612:
    dispatch_retain(v361);
    v1059 = 0;
    v369 = 1;
LABEL_613:
    dispatch_retain(v361);
    v1065 = 0;
    v370 = 1;
LABEL_614:
    dispatch_retain(v361);
    v1087 = 0;
    v371 = 1;
LABEL_615:
    dispatch_retain(v361);
    v367 = 0;
    v1191 = (unint64_t)v361;
    v372 = 1;
    goto LABEL_616;
  }
  v365 = _Block_copy(v364);
  dispatch_retain(v361);
  v1059 = v364;
  if (!v365)
  {
    v369 = 0;
    goto LABEL_613;
  }
  v366 = _Block_copy(v365);
  dispatch_retain(v361);
  v1065 = v365;
  if (!v366)
  {
    v369 = 0;
    v370 = 0;
    goto LABEL_614;
  }
  v367 = _Block_copy(v366);
  dispatch_retain(v361);
  v1087 = v366;
  if (!v367)
  {
    v369 = 0;
    v370 = 0;
    v371 = 0;
    goto LABEL_615;
  }
  v368 = _Block_copy(v367);
  dispatch_retain(v361);
  v1191 = (unint64_t)v361;
  if (v368)
  {
    v369 = 0;
    v370 = 0;
    v371 = 0;
    v372 = 0;
    v1192 = _Block_copy(v368);
    dispatch_retain(v361);
    dispatch_release(v361);
    _Block_release(v368);
    goto LABEL_617;
  }
  v369 = 0;
  v370 = 0;
  v371 = 0;
  v372 = 0;
LABEL_616:
  v1192 = 0;
  dispatch_retain(v361);
  dispatch_release(v361);
LABEL_617:
  dispatch_release(v361);
  if ((v372 & 1) == 0)
    _Block_release(v367);
  dispatch_release(v361);
  if ((v371 & 1) == 0)
    _Block_release(v1087);
  v1190 = boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>)::stored_vtable;
  dispatch_release(v361);
  if ((v370 & 1) == 0)
    _Block_release(v1065);
  dispatch_release(v361);
  if ((v369 & 1) == 0)
    _Block_release(v1059);
  *((_QWORD *)&v1194 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v1194 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&block = 0;
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v1190);
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&v1190, (uint64_t *)&v1183 + 1);
  boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign((uint64_t)&v1183 + 8, (uint64_t *)&block);
  if ((_QWORD)block)
  {
    if ((block & 1) == 0)
    {
      v373 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
      if (v373)
        v373((char *)&block + 8, (char *)&block + 8, 2);
    }
  }
  if (v1190)
  {
    if ((v1190 & 1) == 0)
    {
      v374 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v1190 & 0xFFFFFFFFFFFFFFFELL);
      if (v374)
        v374((uint64_t)&v1191, &v1191, 2u);
    }
    v1190 = 0;
  }
  dispatch_release(object);
  if (v1189)
    _Block_release(v1189);
  dispatch_release(v1186);
  if (v1187)
    _Block_release(v1187);
  v375 = (unint64_t *)&v1082->__shared_weak_owners_;
  do
    v376 = __ldxr(v375);
  while (__stxr(v376 + 1, v375));
  v377 = operator new(0x18uLL);
  *v377 = &off_1E7913798;
  v377[1] = v360;
  v377[2] = v1082;
  do
    v378 = __ldxr(v375);
  while (__stxr(v378 + 1, v375));
  v379 = operator new(0x18uLL);
  v380 = v379;
  *v379 = &off_1E7913798;
  v379[1] = v360;
  v379[2] = v1082;
  do
    v381 = __ldxr(v375);
  while (__stxr(v381 + 1, v375));
  *((_QWORD *)&block + 1) = v379;
  LODWORD(block) = 2;
  v382 = v1182[1];
  if (v1182[1] >= (void *)v1183)
  {
    v507 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v1182, (uint64_t)&block);
    v508 = block ^ ((int)block >> 31);
    v1182[1] = v507;
    if (v508 != 2)
    {
      if (v508 == 1)
      {
        v509 = v1194;
        if (!(_QWORD)v1194)
          goto LABEL_649;
        v510 = (unsigned int *)(v1194 + 12);
        do
        {
          v511 = __ldaxr(v510);
          v512 = v511 - 1;
        }
        while (__stlxr(v512, v510));
        if (v512)
          goto LABEL_649;
      }
      else
      {
        v509 = v1194;
        if (!(_QWORD)v1194)
          goto LABEL_649;
        v773 = (unsigned int *)(v1194 + 12);
        do
        {
          v774 = __ldaxr(v773);
          v775 = v774 - 1;
        }
        while (__stlxr(v775, v773));
        if (v775)
          goto LABEL_649;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v509 + 24))(v509);
      goto LABEL_649;
    }
    v380 = (_QWORD *)*((_QWORD *)&block + 1);
    if (*((_QWORD *)&block + 1))
      goto LABEL_648;
  }
  else
  {
    v383 = operator new(0x18uLL);
    *v383 = &off_1E7913798;
    v383[1] = v360;
    v383[2] = v1082;
    do
      v384 = __ldxr(v375);
    while (__stxr(v384 + 1, v375));
    v382[1] = v383;
    *(_DWORD *)v382 = 2;
    v1182[1] = v382 + 3;
LABEL_648:
    (*(void (**)(_QWORD *))(*v380 + 8))(v380);
  }
LABEL_649:
  (*(void (**)(_QWORD *))(*v377 + 8))(v377);
  std::__shared_weak_count::__release_weak(v1082);
  v385 = *(uint64_t ***)(v1096 + 152);
  *(_QWORD *)&v386 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v386 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v1202 = v386;
  v1201 = v386;
  v1200 = v386;
  v1199 = v386;
  v1198 = v386;
  v1197 = v386;
  v1196 = v386;
  *(_OWORD *)v1195 = v386;
  v1194 = v386;
  block = v386;
  v387 = (pthread_mutex_t *)v385[3];
  v1203 = 10;
  __p = &block;
  v1205 = 0;
  v1206 = v387;
  pthread_mutex_lock(v387);
  v1191 = 0xAAAAAAAAAAAAAAAALL;
  v1190 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
  v388 = (unsigned int *)v385[1];
  v1088 = (uint64_t ***)v385;
  if (v388)
  {
    v389 = atomic_load(v388 + 2);
    if (v389 == 1)
    {
      v390 = (uint64_t *)**v385;
      v391 = v385[2];
      v392 = 2;
      if (v391 != v390)
        goto LABEL_746;
      goto LABEL_745;
    }
  }
  v393 = (uint64_t **)operator new(0x20uLL);
  v394 = *v385;
  v395 = **v385;
  v1097 = v393;
  v396 = operator new(0x40uLL);
  v397 = v396;
  *v396 = v396;
  v396[1] = v396;
  v396[2] = 0;
  v398 = *(_QWORD **)(v395 + 8);
  if (v398 != (_QWORD *)v395)
  {
    v399 = 0;
    v400 = v396;
    do
    {
      v401 = operator new(0x20uLL);
      v401[2] = v398[2];
      v402 = v398[3];
      v401[3] = v402;
      if (v402)
      {
        v403 = (unsigned int *)(v402 + 8);
        do
          v404 = __ldxr(v403);
        while (__stxr(v404 + 1, v403));
        v400 = (_QWORD *)*v397;
        v399 = v397[2];
      }
      *v401 = v400;
      v401[1] = v397;
      v400[1] = v401;
      *v397 = v401;
      v397[2] = ++v399;
      v398 = (_QWORD *)v398[1];
      v400 = v401;
    }
    while (v398 != (_QWORD *)v395);
  }
  v1060 = v394;
  v1066 = (_BYTE *)v395;
  v397[3] = 0;
  v405 = (_QWORD **)(v397 + 3);
  v397[4] = 0;
  v406 = v397 + 4;
  v397[5] = 0;
  *((_BYTE *)v397 + 48) = *(_BYTE *)(v395 + 48);
  v397[3] = v397 + 4;
  v407 = *(_QWORD **)(v395 + 24);
  v408 = (_QWORD *)(v395 + 32);
  if (v407 != (_QWORD *)(v395 + 32))
  {
    do
    {
      v421 = *((_DWORD *)v407 + 8);
      v422 = (_QWORD *)*v406;
      v423 = v397 + 4;
      if (*v405 != v406)
      {
        v424 = (_QWORD *)*v406;
        v425 = v397 + 4;
        if (v422)
        {
          do
          {
            v423 = v424;
            v424 = (_QWORD *)v424[1];
          }
          while (v424);
        }
        else
        {
          do
          {
            v423 = (_QWORD *)v425[2];
            v249 = *v423 == (_QWORD)v425;
            v425 = v423;
          }
          while (v249);
        }
        v426 = *((_DWORD *)v407 + 10);
        v427 = *((_DWORD *)v423 + 8);
        if (v427 == v421)
        {
          if (v421 != 1)
            goto LABEL_706;
          if (*((_DWORD *)v423 + 10) >= v426)
          {
            v428 = (_QWORD *)*v406;
            v429 = v397 + 4;
            v430 = v397 + 4;
            if (v422)
              goto LABEL_710;
LABEL_717:
            v434 = operator new(0x38uLL);
            v435 = *((_OWORD *)v407 + 2);
            v434[6] = v407[6];
            *((_OWORD *)v434 + 2) = v435;
            *v434 = 0;
            v434[1] = 0;
            v434[2] = v430;
            *v429 = v434;
            v436 = (_QWORD *)**v405;
            if (v436)
            {
              *v405 = v436;
              v434 = (_QWORD *)*v429;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v397[4], v434);
            ++v397[5];
            goto LABEL_720;
          }
        }
        else if (v427 >= v421)
        {
LABEL_706:
          v429 = v397 + 4;
          v430 = v397 + 4;
          if (!v422)
            goto LABEL_717;
          v428 = (_QWORD *)*v406;
          if (v421 != 1)
          {
            v431 = *((_DWORD *)v422 + 8);
            v430 = (_QWORD *)*v406;
            while (v421 != v431)
            {
              if (v421 < v431)
              {
                v439 = *v430;
                v429 = v430;
                if (!*v430)
                  goto LABEL_717;
              }
              else
              {
                if (v431 >= v421)
                  goto LABEL_720;
                v439 = v430[1];
                if (!v439)
                  goto LABEL_716;
              }
              v431 = *(_DWORD *)(v439 + 32);
              v430 = (_QWORD *)v439;
            }
            goto LABEL_720;
          }
          while (1)
          {
LABEL_710:
            v430 = v428;
            v432 = *((_DWORD *)v428 + 8);
            if (v432 == 1)
            {
              v433 = *((_DWORD *)v428 + 10);
              if (v433 > v426)
                goto LABEL_709;
              if (v433 >= v426)
                goto LABEL_720;
            }
            else if (v432 > 1)
            {
LABEL_709:
              v428 = (_QWORD *)*v428;
              v429 = v430;
              if (!*v430)
                goto LABEL_717;
              continue;
            }
            v428 = (_QWORD *)v428[1];
            if (!v428)
            {
LABEL_716:
              v429 = v430 + 1;
              goto LABEL_717;
            }
          }
        }
      }
      if (v422)
        v430 = v423;
      else
        v430 = v397 + 4;
      if (v422)
        v429 = v423 + 1;
      else
        v429 = v397 + 4;
      if (!*v429)
        goto LABEL_717;
LABEL_720:
      v437 = (_QWORD *)v407[1];
      if (v437)
      {
        do
        {
          v438 = v437;
          v437 = (_QWORD *)*v437;
        }
        while (v437);
      }
      else
      {
        do
        {
          v438 = (_QWORD *)v407[2];
          v249 = *v438 == (_QWORD)v407;
          v407 = v438;
        }
        while (!v249);
      }
      v407 = v438;
    }
    while (v438 != v408);
  }
  *((_BYTE *)v397 + 56) = v1066[56];
  v409 = (_QWORD *)*((_QWORD *)v1066 + 3);
  if (v409 != v408)
  {
    v410 = (_QWORD *)v397[3];
    v411 = v397[1];
    do
    {
      v410[6] = v411;
      v412 = v1066;
      if (v409 != v408)
        v412 = (_BYTE *)v409[6];
      v413 = (_QWORD *)v409[1];
      v414 = v413;
      v415 = v409;
      if (v413)
      {
        do
        {
          v416 = v414;
          v414 = (_QWORD *)*v414;
        }
        while (v414);
      }
      else
      {
        do
        {
          v416 = (_QWORD *)v415[2];
          v249 = *v416 == (_QWORD)v415;
          v415 = v416;
        }
        while (!v249);
      }
      v417 = v1066;
      if (v416 != v408)
        v417 = (_BYTE *)v416[6];
      while (v412 != v417)
      {
        v412 = (_BYTE *)*((_QWORD *)v412 + 1);
        v411 = *(_QWORD *)(v411 + 8);
      }
      if (v413)
      {
        do
        {
          v418 = v413;
          v413 = (_QWORD *)*v413;
        }
        while (v413);
      }
      else
      {
        do
        {
          v418 = (_QWORD *)v409[2];
          v249 = *v418 == (_QWORD)v409;
          v409 = v418;
        }
        while (!v249);
      }
      v419 = (_QWORD *)v410[1];
      if (v419)
      {
        do
        {
          v420 = v419;
          v419 = (_QWORD *)*v419;
        }
        while (v419);
      }
      else
      {
        do
        {
          v420 = (_QWORD *)v410[2];
          v249 = *v420 == (_QWORD)v410;
          v410 = v420;
        }
        while (!v249);
      }
      v409 = v418;
      v410 = v420;
    }
    while (v418 != v408);
  }
  *v1097 = v397;
  v1097[1] = 0;
  v440 = (uint64_t *)operator new(0x18uLL);
  v385 = (uint64_t **)v1088;
  v440[1] = 0x100000001;
  *v440 = (uint64_t)off_1E79138A8;
  v440[2] = (uint64_t)v397;
  v1097[1] = v440;
  v1097[2] = (uint64_t *)v1060[2];
  v441 = v1060[3];
  v1097[3] = (uint64_t *)v441;
  if (v441)
  {
    v442 = (unsigned int *)(v441 + 8);
    do
      v443 = __ldxr(v442);
    while (__stxr(v443 + 1, v442));
  }
  v444 = (uint64_t **)operator new(0x18uLL);
  v444[1] = (uint64_t *)0x100000001;
  *v444 = (uint64_t *)off_1E7913848;
  v444[2] = (uint64_t *)v1097;
  v445 = (unsigned int *)v1088[1];
  *v1088 = v1097;
  v1088[1] = v444;
  if (v445)
  {
    v446 = v445 + 2;
    do
    {
      v447 = __ldaxr(v446);
      v448 = v447 - 1;
    }
    while (__stlxr(v448, v446));
    if (!v448)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v445 + 16))(v445);
      v449 = v445 + 3;
      do
      {
        v450 = __ldaxr(v449);
        v451 = v450 - 1;
      }
      while (__stlxr(v451, v449));
      if (!v451)
        (*(void (**)(unsigned int *))(*(_QWORD *)v445 + 24))(v445);
    }
  }
  v392 = 0;
  v390 = **v1088;
LABEL_745:
  v391 = (uint64_t *)v390[1];
  if (v390 == v391)
    goto LABEL_849;
LABEL_746:
  v452 = 0;
  v1098 = v392 - 1;
  while (2)
  {
    v455 = v391[2];
    v456 = *(uint64_t **)(v455 + 32);
    if (v456)
    {
      for (j = *v456; j != v456[1]; j += 24)
      {
        if ((*(_DWORD *)j ^ (*(int *)j >> 31)) > 1)
        {
          if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(j + 8) + 24))(*(_QWORD *)(j + 8)) & 1) != 0)
            goto LABEL_763;
        }
        else
        {
          v458 = *(_QWORD *)(j + 16);
          if (!v458 || (v459 = atomic_load((unsigned int *)(v458 + 8))) == 0)
          {
LABEL_763:
            if (*(_BYTE *)(v455 + 24))
            {
              *(_BYTE *)(v455 + 24) = 0;
              boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v455, &block);
            }
            break;
          }
        }
      }
    }
    v453 = v391[2];
    if (*(_BYTE *)(v453 + 24))
    {
      v390 = (uint64_t *)v391[1];
      goto LABEL_749;
    }
    v460 = **v385;
    v462 = (uint64_t **)(v460 + 32);
    v461 = *(_QWORD *)(v460 + 32);
    if (!v461)
    {
      if (*(uint64_t **)(v460 + 80) != v391)
        goto LABEL_840;
      v484 = (uint64_t *)v391[1];
      v486 = (uint64_t **)(v460 + 32);
      v465 = (uint64_t *)(v460 + 32);
      if (v484 != (uint64_t *)v460)
        goto LABEL_836;
      goto LABEL_818;
    }
    v463 = *(_DWORD *)(v453 + 64);
    v464 = *(_DWORD *)(v453 + 72);
    v465 = (uint64_t *)(v460 + 32);
    v466 = *(_QWORD *)(v460 + 32);
    if (v463 == 1)
    {
      v465 = (uint64_t *)(v460 + 32);
      v467 = *(_QWORD *)(v460 + 32);
      do
      {
        while (1)
        {
          v473 = *(_DWORD *)(v467 + 32);
          v474 = v473 < 1;
          if (v473 == 1)
            v474 = *(_DWORD *)(v467 + 40) < v464;
          if (!v474)
            break;
          v467 = *(_QWORD *)(v467 + 8);
          if (!v467)
            goto LABEL_784;
        }
        v465 = (uint64_t *)v467;
        v467 = *(_QWORD *)v467;
      }
      while (v467);
    }
    else
    {
      do
      {
        v468 = *(_DWORD *)(v466 + 32);
        v469 = v468 == v463;
        v470 = v468 < v463;
        if (v468 >= v463)
          v471 = (uint64_t *)v466;
        else
          v471 = (uint64_t *)(v466 + 8);
        if (v470)
          v472 = v465;
        else
          v472 = (uint64_t *)v466;
        if (v469)
        {
          v471 = (uint64_t *)v466;
          v465 = (uint64_t *)v466;
        }
        else
        {
          v465 = v472;
        }
        v466 = *v471;
      }
      while (*v471);
    }
LABEL_784:
    if ((uint64_t *)v465[6] != v391)
      goto LABEL_840;
    v475 = (uint64_t **)(v460 + 32);
    v476 = *(uint64_t ***)(v460 + 32);
    if (v463 == 1)
    {
      while (1)
      {
        v482 = *((_DWORD *)v476 + 8);
        if (v482 == 1)
        {
          if (v464 < *((_DWORD *)v476 + 10))
            goto LABEL_801;
LABEL_796:
          v476 = (uint64_t **)v476[1];
          if (!v476)
            goto LABEL_802;
        }
        else
        {
          if (v482 <= 1)
            goto LABEL_796;
LABEL_801:
          v475 = v476;
          v476 = (uint64_t **)*v476;
          if (!v476)
            goto LABEL_802;
        }
      }
    }
    do
    {
      v477 = *((_DWORD *)v476 + 8);
      v478 = (uint64_t ***)(v476 + 1);
      v479 = v463 == v477;
      v480 = v463 < v477;
      if (v463 >= v477)
        v481 = (uint64_t ***)(v476 + 1);
      else
        v481 = (uint64_t ***)v476;
      if (!v480)
        v476 = v475;
      if (v479)
        v481 = v478;
      else
        v475 = v476;
      v476 = *v481;
    }
    while (*v481);
LABEL_802:
    v483 = (uint64_t *)v460;
    if (v475 != v462)
      v483 = v475[6];
    v484 = (uint64_t *)v391[1];
    if (v484 == v483)
    {
LABEL_818:
      v489 = (uint64_t *)v465[1];
      v490 = v465;
      if (v489)
      {
        do
        {
          v491 = v489;
          v489 = (uint64_t *)*v489;
        }
        while (v489);
      }
      else
      {
        do
        {
          v491 = (uint64_t *)v490[2];
          v249 = *v491 == (_QWORD)v490;
          v490 = v491;
        }
        while (!v249);
      }
      if (*(uint64_t **)(v460 + 24) == v465)
        *(_QWORD *)(v460 + 24) = v491;
      --*(_QWORD *)(v460 + 40);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v461, v465);
      operator delete(v465);
      goto LABEL_840;
    }
    if (v463 == 1)
    {
      while (1)
      {
        while (1)
        {
          v486 = (uint64_t **)v461;
          v487 = *(_DWORD *)(v461 + 32);
          if (v487 == 1)
            break;
          if (v487 <= 1)
            goto LABEL_814;
LABEL_808:
          v461 = *(_QWORD *)v461;
          if (!*v486)
          {
            v462 = v486;
            goto LABEL_836;
          }
        }
        v488 = *(_DWORD *)(v461 + 40);
        if (v488 > v464)
          goto LABEL_808;
        if (v488 >= v464)
        {
          *(_QWORD *)(v461 + 48) = v484;
          goto LABEL_840;
        }
LABEL_814:
        v461 = *(_QWORD *)(v461 + 8);
        if (!v461)
        {
          v462 = v486 + 1;
          goto LABEL_836;
        }
      }
    }
    v485 = *(_DWORD *)(v461 + 32);
    if (v463 == v485)
      goto LABEL_839;
    while (2)
    {
      if (v463 >= v485)
      {
        if (v485 >= v463)
          goto LABEL_839;
        v492 = *(_QWORD *)(v461 + 8);
        if (!v492)
        {
          v462 = (uint64_t **)(v461 + 8);
          goto LABEL_835;
        }
        goto LABEL_827;
      }
      v492 = *(_QWORD *)v461;
      if (*(_QWORD *)v461)
      {
LABEL_827:
        v485 = *(_DWORD *)(v492 + 32);
        v461 = v492;
        if (v463 == v485)
        {
          *(_QWORD *)(v492 + 48) = v484;
          goto LABEL_840;
        }
        continue;
      }
      break;
    }
    v462 = (uint64_t **)v461;
LABEL_835:
    v486 = (uint64_t **)v461;
LABEL_836:
    v461 = (uint64_t)operator new(0x38uLL);
    v493 = *(_QWORD *)(v453 + 64);
    *(_DWORD *)(v461 + 40) = *(_DWORD *)(v453 + 72);
    *(_QWORD *)(v461 + 32) = v493;
    *(_QWORD *)(v461 + 48) = 0;
    *(_QWORD *)v461 = 0;
    *(_QWORD *)(v461 + 8) = 0;
    *(_QWORD *)(v461 + 16) = v486;
    *v462 = (uint64_t *)v461;
    v494 = **(_QWORD **)(v460 + 24);
    v495 = (uint64_t *)v461;
    if (v494)
    {
      *(_QWORD *)(v460 + 24) = v494;
      v495 = *v462;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v460 + 32), v495);
    ++*(_QWORD *)(v460 + 40);
LABEL_839:
    *(_QWORD *)(v461 + 48) = v484;
LABEL_840:
    v496 = *v391;
    v390 = (uint64_t *)v391[1];
    *(_QWORD *)(v496 + 8) = v390;
    *(_QWORD *)v391[1] = v496;
    --*(_QWORD *)(v460 + 16);
    v497 = (unsigned int *)v391[3];
    v385 = (uint64_t **)v1088;
    if (v497)
    {
      v498 = v497 + 2;
      do
      {
        v499 = __ldaxr(v498);
        v500 = v499 - 1;
      }
      while (__stlxr(v500, v498));
      if (!v500)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v497 + 16))(v497);
        v501 = v497 + 3;
        do
        {
          v502 = __ldaxr(v501);
          v503 = v502 - 1;
        }
        while (__stlxr(v503, v501));
        if (!v503)
          (*(void (**)(unsigned int *))(*(_QWORD *)v497 + 24))(v497);
      }
    }
    operator delete(v391);
LABEL_749:
    v454 = v390 != (uint64_t *)**v385 && v1098 >= ++v452;
    v391 = v390;
    if (v454)
      continue;
    break;
  }
LABEL_849:
  v385[2] = v390;
  v504 = operator new(0x50uLL);
  v504[1] = 0;
  v504[2] = 0;
  *((_BYTE *)v504 + 24) = 1;
  *((_DWORD *)v504 + 7) = 1;
  *v504 = off_1E7913908;
  v505 = operator new(0x38uLL);
  std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v505, (uint64_t *)v1182);
  v505[3] = 0;
  v506 = *((_QWORD *)&v1183 + 1);
  if (*((_QWORD *)&v1183 + 1))
  {
    v505[3] = *((_QWORD *)&v1183 + 1);
    if ((v506 & 1) != 0)
    {
      *((_OWORD *)v505 + 2) = v1184;
      v505[6] = v1185;
    }
    else
    {
      (*(void (**)(__int128 *, _QWORD *, _QWORD))(v506 & 0xFFFFFFFFFFFFFFFELL))(&v1184, v505 + 4, 0);
    }
  }
  v504[4] = v505;
  v504[5] = 0;
  v513 = operator new(0x18uLL);
  v513[1] = 0x100000001;
  *v513 = off_1E7913960;
  v513[2] = v505;
  v504[5] = v513;
  v504[6] = v385[3];
  v514 = v385[4];
  v504[7] = v514;
  if (v514)
  {
    v515 = (unsigned int *)(v514 + 1);
    do
      v516 = __ldxr(v515);
    while (__stxr(v516 + 1, v515));
  }
  *((_DWORD *)v504 + 16) = 0;
  *((_BYTE *)v504 + 68) = 0;
  v1190 = (uint64_t (**)())v504;
  v517 = (unsigned int *)operator new(0x18uLL);
  *((_QWORD *)v517 + 1) = 0x100000001;
  v518 = v517 + 2;
  *(_QWORD *)v517 = off_1E79139C0;
  *((_QWORD *)v517 + 2) = v504;
  v1191 = (unint64_t)v517;
  v519 = (uint64_t *)**v385;
  v520 = operator new(0x20uLL);
  v521 = v520;
  v522 = v519 + 4;
  v520[2] = v504;
  v520[3] = v517;
  do
    v523 = __ldxr(v518);
  while (__stxr(v523 + 1, v518));
  v524 = *v519;
  *(_QWORD *)(v524 + 8) = v520;
  *v520 = v524;
  *v519 = (uint64_t)v520;
  v520[1] = v519;
  ++v519[2];
  v525 = (uint64_t *)v519[4];
  if (v525)
  {
    v526 = v519 + 4;
    v527 = v519[4];
    do
    {
      v528 = *(_DWORD *)(v527 + 32);
      v529 = v528 == 2;
      v530 = v528 < 2;
      if (v528 >= 2)
        v531 = (uint64_t *)v527;
      else
        v531 = (uint64_t *)(v527 + 8);
      if (!v530)
        v526 = (uint64_t *)v527;
      if (v529)
      {
        v531 = (uint64_t *)v527;
        v526 = (uint64_t *)v527;
      }
      v527 = *v531;
    }
    while (*v531);
    if (v526 == v522 || *((_DWORD *)v526 + 8) != 2)
    {
      v533 = *((_DWORD *)v525 + 8);
      while (v533 != 2)
      {
        if (v533 < 3)
        {
          v534 = (uint64_t *)v525[1];
          if (!v534)
          {
            v522 = v525 + 1;
            goto LABEL_886;
          }
        }
        else
        {
          v534 = (uint64_t *)*v525;
          v522 = v525;
          if (!*v525)
            goto LABEL_886;
        }
        v533 = *((_DWORD *)v534 + 8);
        v525 = v534;
      }
    }
    *((_DWORD *)v504 + 16) = 2;
    *(_QWORD *)((char *)v504 + 68) = 0xAAAAAAAAAAAAAA00;
    v532 = v1071;
LABEL_889:
    v537 = v517 + 3;
    do
      v538 = __ldxr(v537);
    while (__stxr(v538 + 1, v537));
    *(_QWORD *)&v1122 = v504;
    *((_QWORD *)&v1122 + 1) = v517;
    do
      v539 = __ldxr(v537);
    while (__stxr(v539 + 1, v537));
    do
    {
      v540 = __ldaxr(v537);
      v541 = v540 - 1;
    }
    while (__stlxr(v541, v537));
    if (!v541)
      (*(void (**)(unsigned int *))(*(_QWORD *)v517 + 24))(v517);
    v542 = (unsigned int *)v1191;
    if (v1191)
      goto LABEL_897;
  }
  else
  {
    v525 = v519 + 4;
LABEL_886:
    v535 = operator new(0x38uLL);
    v535[4] = 0xAAAAAA0000000002;
    *((_DWORD *)v535 + 10) = -1431655766;
    v535[6] = v521;
    *v535 = 0;
    v535[1] = 0;
    v535[2] = v525;
    *v522 = (uint64_t)v535;
    v536 = *(_QWORD *)v519[3];
    if (v536)
    {
      v519[3] = v536;
      v535 = (_QWORD *)*v522;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v519[4], v535);
    ++v519[5];
    v504 = v1190;
    v517 = (unsigned int *)v1191;
    *((_DWORD *)v1190 + 16) = 2;
    *(_QWORD *)((char *)v504 + 68) = 0xAAAAAAAAAAAAAA00;
    v532 = v1071;
    if (v517)
      goto LABEL_889;
    v1122 = (unint64_t)v504;
    v542 = (unsigned int *)v1191;
    if (v1191)
    {
LABEL_897:
      v543 = v542 + 2;
      do
      {
        v544 = __ldaxr(v543);
        v545 = v544 - 1;
      }
      while (__stlxr(v545, v543));
      if (!v545)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v542 + 16))(v542);
        v546 = v542 + 3;
        do
        {
          v547 = __ldaxr(v546);
          v548 = v547 - 1;
        }
        while (__stlxr(v548, v546));
        if (!v548)
          (*(void (**)(unsigned int *))(*(_QWORD *)v542 + 24))(v542);
      }
    }
  }
  pthread_mutex_unlock(v1206);
  v549 = (char *)__p;
  if (__p)
  {
    if (v1205 - 1 >= 0)
    {
      v550 = (char *)__p + 16 * v1205;
      do
      {
        v551 = (unsigned int *)*((_QWORD *)v550 - 1);
        if (v551)
        {
          v552 = v551 + 2;
          do
          {
            v553 = __ldaxr(v552);
            v554 = v553 - 1;
          }
          while (__stlxr(v554, v552));
          if (!v554)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v551 + 16))(v551);
            v555 = v551 + 3;
            do
            {
              v556 = __ldaxr(v555);
              v557 = v556 - 1;
            }
            while (__stlxr(v557, v555));
            if (!v557)
              (*(void (**)(unsigned int *))(*(_QWORD *)v551 + 24))(v551);
          }
        }
        v550 -= 16;
      }
      while (v550 > v549);
    }
    if (v1203 >= 0xB)
      operator delete(__p);
  }
  if (*((_QWORD *)&v1183 + 1))
  {
    if ((BYTE8(v1183) & 1) == 0)
    {
      v558 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v1183 + 1) & 0xFFFFFFFFFFFFFFFELL);
      if (v558)
        v558(&v1184, &v1184, 2);
    }
    *((_QWORD *)&v1183 + 1) = 0;
  }
  v559 = (char *)v1182[0];
  if (!v1182[0])
    goto LABEL_944;
  v560 = v1182[1];
  v561 = v1182[0];
  if (v1182[1] == v1182[0])
    goto LABEL_943;
  v562 = (char *)v1182[1];
  while (2)
  {
    v563 = *((_DWORD *)v562 - 6);
    v562 -= 24;
    v564 = v563 ^ (v563 >> 31);
    if (v564 == 2)
    {
      v569 = *(v560 - 2);
      if (v569)
        (*(void (**)(uint64_t))(*(_QWORD *)v569 + 8))(v569);
    }
    else if (v564 == 1)
    {
      v565 = (unsigned int *)*(v560 - 1);
      if (v565)
      {
        v566 = v565 + 3;
        do
        {
          v567 = __ldaxr(v566);
          v568 = v567 - 1;
        }
        while (__stlxr(v568, v566));
        if (!v568)
          goto LABEL_934;
      }
    }
    else
    {
      v565 = (unsigned int *)*(v560 - 1);
      if (v565)
      {
        v570 = v565 + 3;
        do
        {
          v571 = __ldaxr(v570);
          v572 = v571 - 1;
        }
        while (__stlxr(v572, v570));
        if (!v572)
LABEL_934:
          (*(void (**)(unsigned int *))(*(_QWORD *)v565 + 24))(v565);
      }
    }
    v560 = v562;
    if (v562 != v559)
      continue;
    break;
  }
  v561 = v1182[0];
LABEL_943:
  v1182[1] = v559;
  operator delete(v561);
LABEL_944:
  dispatch_release(v1180);
  if (v1181)
    _Block_release(v1181);
  v573 = (unint64_t *)&v1082->__shared_owners_;
  v574 = v1106;
  do
    v575 = __ldaxr(v573);
  while (__stlxr(v575 - 1, v573));
  if (!v575)
  {
    ((void (*)(std::__shared_weak_count *))v1082->__on_zero_shared)(v1082);
    std::__shared_weak_count::__release_weak(v1082);
    if (!v532)
      goto LABEL_953;
    goto LABEL_952;
  }
  if (v532)
LABEL_952:
    _Block_release(v532);
LABEL_953:
  v576 = operator new(0x20uLL);
  v576[1] = v1122;
  v577 = *((_QWORD *)v1106 + 28);
  *(_QWORD *)v576 = v577;
  *((_QWORD *)v576 + 1) = v1078;
  *(_QWORD *)(v577 + 8) = v576;
  *((_QWORD *)v1106 + 28) = v576;
  ++*((_QWORD *)v1106 + 30);
  v578 = (_QWORD *)*((_QWORD *)v1106 + 26);
  if (v578)
  {
    v1173 = (void **)MEMORY[0x1E0C809B0];
    v1174 = 0x40000000;
    v1175 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISA_EENSG_IFvRKNS7_10connectionES9_EEENS7_5mutexEEES3_vJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FST_SV_E_block_invoke;
    v1176 = &__block_descriptor_tmp_257;
    v1177 = v1079;
    v1178 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleDesenseCommandDriverStarted_sync;
    v1179 = 0;
    v579 = _Block_copy(&v1173);
    v1072 = v578;
    v580 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 10);
    if (!v580 || (v581 = *((_QWORD *)v1106 + 9), (v1083 = std::__shared_weak_count::lock(v580)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v582 = *((_QWORD *)v1106 + 11);
    v1180 = v582;
    if (v579)
      v583 = _Block_copy(v579);
    else
      v583 = 0;
    v1181 = v583;
    dispatch_retain(v582);
    v1183 = 0u;
    *(_OWORD *)v1182 = 0u;
    v1186 = v582;
    if (v583)
      v583 = _Block_copy(v583);
    v1187 = v583;
    dispatch_retain(v582);
    object = v582;
    v1067 = v579;
    v1099 = v581;
    if (v583)
    {
      v584 = _Block_copy(v583);
      v1189 = v584;
      dispatch_retain(v582);
      if (v584)
      {
        v585 = _Block_copy(v584);
        dispatch_retain(v582);
        v1190 = 0;
        if (v585)
        {
          v586 = _Block_copy(v585);
          dispatch_retain(v582);
          v1061 = v585;
          if (v586)
          {
            v587 = _Block_copy(v586);
            dispatch_retain(v582);
            if (v587)
            {
              v588 = _Block_copy(v587);
              dispatch_retain(v582);
              v1089 = v586;
              if (v588)
              {
                v589 = _Block_copy(v588);
                dispatch_retain(v582);
                v1191 = (unint64_t)v582;
                if (v589)
                {
                  v590 = 0;
                  v591 = 0;
                  v592 = 0;
                  v593 = 0;
                  v1192 = _Block_copy(v589);
                  dispatch_retain(v582);
                  dispatch_release(v582);
                  _Block_release(v589);
                  goto LABEL_976;
                }
                v590 = 0;
                v591 = 0;
                v592 = 0;
                v593 = 0;
LABEL_975:
                v1192 = 0;
                dispatch_retain(v582);
                dispatch_release(v582);
LABEL_976:
                dispatch_release(v582);
                if ((v593 & 1) == 0)
                  _Block_release(v588);
                dispatch_release(v582);
                if ((v592 & 1) == 0)
                  _Block_release(v587);
                v1190 = boost::function1<void,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>)::stored_vtable;
                dispatch_release(v582);
                if ((v591 & 1) == 0)
                  _Block_release(v1089);
                dispatch_release(v582);
                if ((v590 & 1) == 0)
                  _Block_release(v1061);
                *((_QWORD *)&v1194 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&v1194 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_QWORD *)&block = 0;
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v1190);
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&v1190, (uint64_t *)&v1183 + 1);
                boost::function1<void,coex::SubId>::move_assign((uint64_t)&v1183 + 8, (uint64_t *)&block);
                if ((_QWORD)block)
                {
                  if ((block & 1) == 0)
                  {
                    v594 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                    if (v594)
                      v594((char *)&block + 8, (char *)&block + 8, 2);
                  }
                }
                if (v1190)
                {
                  if ((v1190 & 1) == 0)
                  {
                    v595 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v1190 & 0xFFFFFFFFFFFFFFFELL);
                    if (v595)
                      v595((uint64_t)&v1191, &v1191, 2u);
                  }
                  v1190 = 0;
                }
                dispatch_release(object);
                if (v1189)
                  _Block_release(v1189);
                dispatch_release(v1186);
                if (v1187)
                  _Block_release(v1187);
                v596 = (unint64_t *)&v1083->__shared_weak_owners_;
                do
                  v597 = __ldxr(v596);
                while (__stxr(v597 + 1, v596));
                v598 = operator new(0x18uLL);
                *v598 = &off_1E7913798;
                v598[1] = v1099;
                v598[2] = v1083;
                do
                  v599 = __ldxr(v596);
                while (__stxr(v599 + 1, v596));
                v600 = operator new(0x18uLL);
                v601 = v600;
                *v600 = &off_1E7913798;
                v600[1] = v1099;
                v600[2] = v1083;
                do
                  v602 = __ldxr(v596);
                while (__stxr(v602 + 1, v596));
                *((_QWORD *)&block + 1) = v600;
                LODWORD(block) = 2;
                v603 = v1182[1];
                if (v1182[1] >= (void *)v1183)
                {
                  v728 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v1182, (uint64_t)&block);
                  v729 = block ^ ((int)block >> 31);
                  v1182[1] = v728;
                  if (v729 != 2)
                  {
                    if (v729 == 1)
                    {
                      v730 = v1194;
                      if (!(_QWORD)v1194)
                        goto LABEL_1008;
                      v731 = (unsigned int *)(v1194 + 12);
                      do
                      {
                        v732 = __ldaxr(v731);
                        v733 = v732 - 1;
                      }
                      while (__stlxr(v733, v731));
                      if (v733)
                        goto LABEL_1008;
                    }
                    else
                    {
                      v730 = v1194;
                      if (!(_QWORD)v1194)
                        goto LABEL_1008;
                      v1052 = (unsigned int *)(v1194 + 12);
                      do
                      {
                        v1053 = __ldaxr(v1052);
                        v1054 = v1053 - 1;
                      }
                      while (__stlxr(v1054, v1052));
                      if (v1054)
                        goto LABEL_1008;
                    }
                    (*(void (**)(uint64_t))(*(_QWORD *)v730 + 24))(v730);
                    goto LABEL_1008;
                  }
                  v601 = (_QWORD *)*((_QWORD *)&block + 1);
                  if (*((_QWORD *)&block + 1))
                    goto LABEL_1007;
                }
                else
                {
                  v604 = operator new(0x18uLL);
                  *v604 = &off_1E7913798;
                  v604[1] = v1099;
                  v604[2] = v1083;
                  do
                    v605 = __ldxr(v596);
                  while (__stxr(v605 + 1, v596));
                  v603[1] = v604;
                  *(_DWORD *)v603 = 2;
                  v1182[1] = v603 + 3;
LABEL_1007:
                  (*(void (**)(_QWORD *))(*v601 + 8))(v601);
                }
LABEL_1008:
                (*(void (**)(_QWORD *))(*v598 + 8))(v598);
                std::__shared_weak_count::__release_weak(v1083);
                v606 = (uint64_t **)v1072[14];
                *(_QWORD *)&v607 = 0xAAAAAAAAAAAAAAAALL;
                *((_QWORD *)&v607 + 1) = 0xAAAAAAAAAAAAAAAALL;
                v1202 = v607;
                v1201 = v607;
                v1200 = v607;
                v1199 = v607;
                v1198 = v607;
                v1197 = v607;
                v1196 = v607;
                *(_OWORD *)v1195 = v607;
                v1194 = v607;
                block = v607;
                v608 = (pthread_mutex_t *)v606[3];
                v1203 = 10;
                __p = &block;
                v1205 = 0;
                v1206 = v608;
                pthread_mutex_lock(v608);
                v1191 = 0xAAAAAAAAAAAAAAAALL;
                v1190 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                v609 = (unsigned int *)v606[1];
                v1090 = (uint64_t ***)v606;
                if (v609)
                {
                  v610 = atomic_load(v609 + 2);
                  if (v610 == 1)
                  {
                    v611 = (uint64_t *)**v606;
                    v612 = v606[2];
                    v613 = 2;
                    if (v612 != v611)
                      goto LABEL_1105;
                    goto LABEL_1104;
                  }
                }
                v614 = (uint64_t **)operator new(0x20uLL);
                v615 = *v606;
                v616 = **v606;
                v1100 = v614;
                v617 = operator new(0x40uLL);
                v618 = v617;
                *v617 = v617;
                v617[1] = v617;
                v617[2] = 0;
                v619 = *(_QWORD **)(v616 + 8);
                if (v619 != (_QWORD *)v616)
                {
                  v620 = 0;
                  v621 = v617;
                  do
                  {
                    v622 = operator new(0x20uLL);
                    v622[2] = v619[2];
                    v623 = v619[3];
                    v622[3] = v623;
                    if (v623)
                    {
                      v624 = (unsigned int *)(v623 + 8);
                      do
                        v625 = __ldxr(v624);
                      while (__stxr(v625 + 1, v624));
                      v621 = (_QWORD *)*v618;
                      v620 = v618[2];
                    }
                    *v622 = v621;
                    v622[1] = v618;
                    v621[1] = v622;
                    *v618 = v622;
                    v618[2] = ++v620;
                    v619 = (_QWORD *)v619[1];
                    v621 = v622;
                  }
                  while (v619 != (_QWORD *)v616);
                }
                v1062 = v615;
                v618[3] = 0;
                v626 = (_QWORD **)(v618 + 3);
                v618[4] = 0;
                v627 = v618 + 4;
                v618[5] = 0;
                *((_BYTE *)v618 + 48) = *(_BYTE *)(v616 + 48);
                v618[3] = v618 + 4;
                v628 = *(_QWORD **)(v616 + 24);
                v1073 = (_BYTE *)v616;
                v629 = (_QWORD *)(v616 + 32);
                if (v628 == (_QWORD *)(v616 + 32))
                {
LABEL_1020:
                  *((_BYTE *)v618 + 56) = v1073[56];
                  v630 = (_QWORD *)*((_QWORD *)v1073 + 3);
                  if (v630 != v629)
                  {
                    v631 = (_QWORD *)v618[3];
                    v632 = v618[1];
                    do
                    {
                      v631[6] = v632;
                      v633 = v1073;
                      if (v630 != v629)
                        v633 = (_BYTE *)v630[6];
                      v634 = (_QWORD *)v630[1];
                      v635 = v634;
                      v636 = v630;
                      if (v634)
                      {
                        do
                        {
                          v637 = v635;
                          v635 = (_QWORD *)*v635;
                        }
                        while (v635);
                      }
                      else
                      {
                        do
                        {
                          v637 = (_QWORD *)v636[2];
                          v249 = *v637 == (_QWORD)v636;
                          v636 = v637;
                        }
                        while (!v249);
                      }
                      v638 = v1073;
                      if (v637 != v629)
                        v638 = (_BYTE *)v637[6];
                      while (v633 != v638)
                      {
                        v633 = (_BYTE *)*((_QWORD *)v633 + 1);
                        v632 = *(_QWORD *)(v632 + 8);
                      }
                      if (v634)
                      {
                        do
                        {
                          v639 = v634;
                          v634 = (_QWORD *)*v634;
                        }
                        while (v634);
                      }
                      else
                      {
                        do
                        {
                          v639 = (_QWORD *)v630[2];
                          v249 = *v639 == (_QWORD)v630;
                          v630 = v639;
                        }
                        while (!v249);
                      }
                      v640 = (_QWORD *)v631[1];
                      if (v640)
                      {
                        do
                        {
                          v641 = v640;
                          v640 = (_QWORD *)*v640;
                        }
                        while (v640);
                      }
                      else
                      {
                        do
                        {
                          v641 = (_QWORD *)v631[2];
                          v249 = *v641 == (_QWORD)v631;
                          v631 = v641;
                        }
                        while (!v249);
                      }
                      v630 = v639;
                      v631 = v641;
                    }
                    while (v639 != v629);
                  }
                  *v1100 = v618;
                  v1100[1] = 0;
                  v661 = (uint64_t *)operator new(0x18uLL);
                  v606 = (uint64_t **)v1090;
                  v661[1] = 0x100000001;
                  *v661 = (uint64_t)off_1E7913B00;
                  v661[2] = (uint64_t)v618;
                  v1100[1] = v661;
                  v1100[2] = (uint64_t *)v1062[2];
                  v662 = v1062[3];
                  v1100[3] = (uint64_t *)v662;
                  if (v662)
                  {
                    v663 = (unsigned int *)(v662 + 8);
                    do
                      v664 = __ldxr(v663);
                    while (__stxr(v664 + 1, v663));
                  }
                  v665 = (uint64_t **)operator new(0x18uLL);
                  v665[1] = (uint64_t *)0x100000001;
                  *v665 = (uint64_t *)off_1E7913AA0;
                  v665[2] = (uint64_t *)v1100;
                  v666 = (unsigned int *)v1090[1];
                  *v1090 = v1100;
                  v1090[1] = v665;
                  if (v666)
                  {
                    v667 = v666 + 2;
                    do
                    {
                      v668 = __ldaxr(v667);
                      v669 = v668 - 1;
                    }
                    while (__stlxr(v669, v667));
                    if (!v669)
                    {
                      (*(void (**)(unsigned int *))(*(_QWORD *)v666 + 16))(v666);
                      v670 = v666 + 3;
                      do
                      {
                        v671 = __ldaxr(v670);
                        v672 = v671 - 1;
                      }
                      while (__stlxr(v672, v670));
                      if (!v672)
                        (*(void (**)(unsigned int *))(*(_QWORD *)v666 + 24))(v666);
                    }
                  }
                  v613 = 0;
                  v611 = **v1090;
LABEL_1104:
                  v612 = (uint64_t *)v611[1];
                  if (v611 == v612)
                    goto LABEL_1208;
LABEL_1105:
                  v673 = 0;
                  v1101 = v613 - 1;
LABEL_1113:
                  v676 = v612[2];
                  v677 = *(uint64_t **)(v676 + 32);
                  if (!v677)
                    goto LABEL_1106;
                  for (k = *v677; ; k += 24)
                  {
                    if (k == v677[1])
                      goto LABEL_1106;
                    if ((*(_DWORD *)k ^ (*(int *)k >> 31)) > 1)
                    {
                      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(k + 8) + 24))(*(_QWORD *)(k + 8)) & 1) != 0)
                        goto LABEL_1122;
                    }
                    else
                    {
                      v679 = *(_QWORD *)(k + 16);
                      if (!v679 || (v680 = atomic_load((unsigned int *)(v679 + 8))) == 0)
                      {
LABEL_1122:
                        if (*(_BYTE *)(v676 + 24))
                        {
                          *(_BYTE *)(v676 + 24) = 0;
                          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v676, &block);
                        }
LABEL_1106:
                        v674 = v612[2];
                        if (*(_BYTE *)(v674 + 24))
                        {
                          v611 = (uint64_t *)v612[1];
                          goto LABEL_1108;
                        }
                        v681 = **v606;
                        v683 = (uint64_t **)(v681 + 32);
                        v682 = *(char **)(v681 + 32);
                        if (!v682)
                        {
                          if (*(uint64_t **)(v681 + 80) != v612)
                            goto LABEL_1199;
                          v705 = (uint64_t *)v612[1];
                          v707 = (uint64_t **)(v681 + 32);
                          v686 = (uint64_t *)(v681 + 32);
                          if (v705 != (uint64_t *)v681)
                            goto LABEL_1195;
                          goto LABEL_1177;
                        }
                        v684 = *(_DWORD *)(v674 + 64);
                        v685 = *(_DWORD *)(v674 + 72);
                        v686 = (uint64_t *)(v681 + 32);
                        v687 = *(_QWORD *)(v681 + 32);
                        if (v684 == 1)
                        {
                          v686 = (uint64_t *)(v681 + 32);
                          v688 = *(_QWORD *)(v681 + 32);
                          do
                          {
                            while (1)
                            {
                              v694 = *(_DWORD *)(v688 + 32);
                              v695 = v694 < 1;
                              if (v694 == 1)
                                v695 = *(_DWORD *)(v688 + 40) < v685;
                              if (!v695)
                                break;
                              v688 = *(_QWORD *)(v688 + 8);
                              if (!v688)
                                goto LABEL_1143;
                            }
                            v686 = (uint64_t *)v688;
                            v688 = *(_QWORD *)v688;
                          }
                          while (v688);
                        }
                        else
                        {
                          do
                          {
                            v689 = *(_DWORD *)(v687 + 32);
                            v690 = v689 == v684;
                            v691 = v689 < v684;
                            if (v689 >= v684)
                              v692 = (uint64_t *)v687;
                            else
                              v692 = (uint64_t *)(v687 + 8);
                            if (v691)
                              v693 = v686;
                            else
                              v693 = (uint64_t *)v687;
                            if (v690)
                            {
                              v692 = (uint64_t *)v687;
                              v686 = (uint64_t *)v687;
                            }
                            else
                            {
                              v686 = v693;
                            }
                            v687 = *v692;
                          }
                          while (*v692);
                        }
LABEL_1143:
                        if ((uint64_t *)v686[6] == v612)
                        {
                          v696 = (uint64_t **)(v681 + 32);
                          v697 = *(uint64_t ***)(v681 + 32);
                          if (v684 != 1)
                          {
                            do
                            {
                              v698 = *((_DWORD *)v697 + 8);
                              v699 = (uint64_t ***)(v697 + 1);
                              v700 = v684 == v698;
                              v701 = v684 < v698;
                              if (v684 >= v698)
                                v702 = (uint64_t ***)(v697 + 1);
                              else
                                v702 = (uint64_t ***)v697;
                              if (!v701)
                                v697 = v696;
                              if (v700)
                                v702 = v699;
                              else
                                v696 = v697;
                              v697 = *v702;
                            }
                            while (*v702);
LABEL_1161:
                            v704 = (uint64_t *)v681;
                            if (v696 != v683)
                              v704 = v696[6];
                            v705 = (uint64_t *)v612[1];
                            if (v705 != v704)
                            {
                              if (v684 != 1)
                              {
                                v706 = *((_DWORD *)v682 + 8);
                                if (v684 == v706)
                                  goto LABEL_1198;
                                while (1)
                                {
                                  if (v684 < v706)
                                  {
                                    v713 = *(_QWORD *)v682;
                                    if (!*(_QWORD *)v682)
                                    {
                                      v683 = (uint64_t **)v682;
LABEL_1194:
                                      v707 = (uint64_t **)v682;
LABEL_1195:
                                      v682 = (char *)operator new(0x38uLL);
                                      v714 = *(_QWORD *)(v674 + 64);
                                      *((_DWORD *)v682 + 10) = *(_DWORD *)(v674 + 72);
                                      *((_QWORD *)v682 + 4) = v714;
                                      *((_QWORD *)v682 + 6) = 0;
                                      *(_QWORD *)v682 = 0;
                                      *((_QWORD *)v682 + 1) = 0;
                                      *((_QWORD *)v682 + 2) = v707;
                                      *v683 = (uint64_t *)v682;
                                      v715 = **(_QWORD **)(v681 + 24);
                                      v716 = (uint64_t *)v682;
                                      if (v715)
                                      {
                                        *(_QWORD *)(v681 + 24) = v715;
                                        v716 = *v683;
                                      }
                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v681 + 32), v716);
                                      ++*(_QWORD *)(v681 + 40);
LABEL_1198:
                                      *((_QWORD *)v682 + 6) = v705;
                                      goto LABEL_1199;
                                    }
                                  }
                                  else
                                  {
                                    if (v706 >= v684)
                                      goto LABEL_1198;
                                    v713 = *((_QWORD *)v682 + 1);
                                    if (!v713)
                                    {
                                      v683 = (uint64_t **)(v682 + 8);
                                      goto LABEL_1194;
                                    }
                                  }
                                  v706 = *(_DWORD *)(v713 + 32);
                                  v682 = (char *)v713;
                                  if (v684 == v706)
                                  {
                                    *(_QWORD *)(v713 + 48) = v705;
                                    goto LABEL_1199;
                                  }
                                }
                              }
                              while (1)
                              {
                                v707 = (uint64_t **)v682;
                                v708 = *((_DWORD *)v682 + 8);
                                if (v708 == 1)
                                {
                                  v709 = *((_DWORD *)v682 + 10);
                                  if (v709 <= v685)
                                  {
                                    if (v709 >= v685)
                                    {
                                      *((_QWORD *)v682 + 6) = v705;
                                      goto LABEL_1199;
                                    }
LABEL_1173:
                                    v682 = (char *)*((_QWORD *)v682 + 1);
                                    if (!v682)
                                    {
                                      v683 = v707 + 1;
                                      goto LABEL_1195;
                                    }
                                    continue;
                                  }
                                }
                                else if (v708 <= 1)
                                {
                                  goto LABEL_1173;
                                }
                                v682 = *(char **)v682;
                                if (!*v707)
                                {
                                  v683 = v707;
                                  goto LABEL_1195;
                                }
                              }
                            }
LABEL_1177:
                            v710 = (uint64_t *)v686[1];
                            v711 = v686;
                            if (v710)
                            {
                              do
                              {
                                v712 = v710;
                                v710 = (uint64_t *)*v710;
                              }
                              while (v710);
                            }
                            else
                            {
                              do
                              {
                                v712 = (uint64_t *)v711[2];
                                v249 = *v712 == (_QWORD)v711;
                                v711 = v712;
                              }
                              while (!v249);
                            }
                            if (*(uint64_t **)(v681 + 24) == v686)
                              *(_QWORD *)(v681 + 24) = v712;
                            --*(_QWORD *)(v681 + 40);
                            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v682, v686);
                            operator delete(v686);
                            goto LABEL_1199;
                          }
                          while (1)
                          {
                            v703 = *((_DWORD *)v697 + 8);
                            if (v703 == 1)
                            {
                              if (v685 >= *((_DWORD *)v697 + 10))
                                goto LABEL_1155;
                            }
                            else if (v703 <= 1)
                            {
LABEL_1155:
                              v697 = (uint64_t **)v697[1];
                              if (!v697)
                                goto LABEL_1161;
                              continue;
                            }
                            v696 = v697;
                            v697 = (uint64_t **)*v697;
                            if (!v697)
                              goto LABEL_1161;
                          }
                        }
LABEL_1199:
                        v717 = *v612;
                        v611 = (uint64_t *)v612[1];
                        *(_QWORD *)(v717 + 8) = v611;
                        *(_QWORD *)v612[1] = v717;
                        --*(_QWORD *)(v681 + 16);
                        v718 = (unsigned int *)v612[3];
                        v606 = (uint64_t **)v1090;
                        if (v718)
                        {
                          v719 = v718 + 2;
                          do
                          {
                            v720 = __ldaxr(v719);
                            v721 = v720 - 1;
                          }
                          while (__stlxr(v721, v719));
                          if (!v721)
                          {
                            (*(void (**)(unsigned int *))(*(_QWORD *)v718 + 16))(v718);
                            v722 = v718 + 3;
                            do
                            {
                              v723 = __ldaxr(v722);
                              v724 = v723 - 1;
                            }
                            while (__stlxr(v724, v722));
                            if (!v724)
                              (*(void (**)(unsigned int *))(*(_QWORD *)v718 + 24))(v718);
                          }
                        }
                        operator delete(v612);
LABEL_1108:
                        v675 = v611 != (uint64_t *)**v606 && v1101 >= ++v673;
                        v612 = v611;
                        if (!v675)
                        {
LABEL_1208:
                          v606[2] = v611;
                          v725 = operator new(0x50uLL);
                          v725[1] = 0;
                          v725[2] = 0;
                          *((_BYTE *)v725 + 24) = 1;
                          *((_DWORD *)v725 + 7) = 1;
                          *v725 = off_1E7913B60;
                          v726 = operator new(0x38uLL);
                          std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v726, (uint64_t *)v1182);
                          v726[3] = 0;
                          v727 = *((_QWORD *)&v1183 + 1);
                          if (*((_QWORD *)&v1183 + 1))
                          {
                            v726[3] = *((_QWORD *)&v1183 + 1);
                            if ((v727 & 1) != 0)
                            {
                              *((_OWORD *)v726 + 2) = v1184;
                              v726[6] = v1185;
                            }
                            else
                            {
                              (*(void (**)(__int128 *, _QWORD *, _QWORD))(v727 & 0xFFFFFFFFFFFFFFFELL))(&v1184, v726 + 4, 0);
                            }
                          }
                          v725[4] = v726;
                          v725[5] = 0;
                          v734 = operator new(0x18uLL);
                          v734[1] = 0x100000001;
                          *v734 = off_1E7913BB8;
                          v734[2] = v726;
                          v725[5] = v734;
                          v725[6] = v606[3];
                          v735 = v606[4];
                          v725[7] = v735;
                          if (v735)
                          {
                            v736 = (unsigned int *)(v735 + 1);
                            do
                              v737 = __ldxr(v736);
                            while (__stxr(v737 + 1, v736));
                          }
                          *((_DWORD *)v725 + 16) = 0;
                          *((_BYTE *)v725 + 68) = 0;
                          v1190 = (uint64_t (**)())v725;
                          v738 = (unsigned int *)operator new(0x18uLL);
                          *((_QWORD *)v738 + 1) = 0x100000001;
                          v739 = v738 + 2;
                          *(_QWORD *)v738 = off_1E7913C18;
                          *((_QWORD *)v738 + 2) = v725;
                          v1191 = (unint64_t)v738;
                          v740 = (uint64_t *)**v606;
                          v741 = operator new(0x20uLL);
                          v742 = v741;
                          v743 = v740 + 4;
                          v741[2] = v725;
                          v741[3] = v738;
                          do
                            v744 = __ldxr(v739);
                          while (__stxr(v744 + 1, v739));
                          v745 = *v740;
                          *(_QWORD *)(v745 + 8) = v741;
                          *v741 = v745;
                          *v740 = (uint64_t)v741;
                          v741[1] = v740;
                          ++v740[2];
                          v746 = (uint64_t *)v740[4];
                          if (!v746)
                          {
                            v746 = v740 + 4;
                            goto LABEL_1245;
                          }
                          v747 = v740 + 4;
                          v748 = v740[4];
                          do
                          {
                            v749 = *(_DWORD *)(v748 + 32);
                            v750 = v749 == 2;
                            v751 = v749 < 2;
                            if (v749 >= 2)
                              v752 = (uint64_t *)v748;
                            else
                              v752 = (uint64_t *)(v748 + 8);
                            if (!v751)
                              v747 = (uint64_t *)v748;
                            if (v750)
                            {
                              v752 = (uint64_t *)v748;
                              v747 = (uint64_t *)v748;
                            }
                            v748 = *v752;
                          }
                          while (*v752);
                          if (v747 != v743 && *((_DWORD *)v747 + 8) == 2)
                          {
LABEL_1236:
                            *((_DWORD *)v725 + 16) = 2;
                            *(_QWORD *)((char *)v725 + 68) = 0xAAAAAAAAAAAAAA00;
                            v753 = v1067;
                            goto LABEL_1248;
                          }
                          v754 = *((_DWORD *)v746 + 8);
                          while (1)
                          {
                            if (v754 == 2)
                              goto LABEL_1236;
                            if (v754 < 3)
                            {
                              v755 = (uint64_t *)v746[1];
                              if (!v755)
                              {
                                v743 = v746 + 1;
LABEL_1245:
                                v756 = operator new(0x38uLL);
                                v756[4] = 0xAAAAAA0000000002;
                                *((_DWORD *)v756 + 10) = -1431655766;
                                v756[6] = v742;
                                *v756 = 0;
                                v756[1] = 0;
                                v756[2] = v746;
                                *v743 = (uint64_t)v756;
                                v757 = *(_QWORD *)v740[3];
                                if (v757)
                                {
                                  v740[3] = v757;
                                  v756 = (_QWORD *)*v743;
                                }
                                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v740[4], v756);
                                ++v740[5];
                                v725 = v1190;
                                v738 = (unsigned int *)v1191;
                                *((_DWORD *)v1190 + 16) = 2;
                                *(_QWORD *)((char *)v725 + 68) = 0xAAAAAAAAAAAAAA00;
                                v753 = v1067;
                                if (v738)
                                {
LABEL_1248:
                                  v758 = v738 + 3;
                                  do
                                    v759 = __ldxr(v758);
                                  while (__stxr(v759 + 1, v758));
                                  *(_QWORD *)&v1122 = v725;
                                  *((_QWORD *)&v1122 + 1) = v738;
                                  do
                                    v760 = __ldxr(v758);
                                  while (__stxr(v760 + 1, v758));
                                  do
                                  {
                                    v761 = __ldaxr(v758);
                                    v762 = v761 - 1;
                                  }
                                  while (__stlxr(v762, v758));
                                  if (!v762)
                                    (*(void (**)(unsigned int *))(*(_QWORD *)v738 + 24))(v738);
                                  v763 = (unsigned int *)v1191;
                                  if (v1191)
                                  {
LABEL_1256:
                                    v764 = v763 + 2;
                                    do
                                    {
                                      v765 = __ldaxr(v764);
                                      v766 = v765 - 1;
                                    }
                                    while (__stlxr(v766, v764));
                                    if (!v766)
                                    {
                                      (*(void (**)(unsigned int *))(*(_QWORD *)v763 + 16))(v763);
                                      v767 = v763 + 3;
                                      do
                                      {
                                        v768 = __ldaxr(v767);
                                        v769 = v768 - 1;
                                      }
                                      while (__stlxr(v769, v767));
                                      if (!v769)
                                        (*(void (**)(unsigned int *))(*(_QWORD *)v763 + 24))(v763);
                                    }
                                  }
                                }
                                else
                                {
                                  v1122 = (unint64_t)v725;
                                  v763 = (unsigned int *)v1191;
                                  if (v1191)
                                    goto LABEL_1256;
                                }
                                pthread_mutex_unlock(v1206);
                                v776 = (char *)__p;
                                if (__p)
                                {
                                  if (v1205 - 1 >= 0)
                                  {
                                    v777 = (char *)__p + 16 * v1205;
                                    do
                                    {
                                      v778 = (unsigned int *)*((_QWORD *)v777 - 1);
                                      if (v778)
                                      {
                                        v779 = v778 + 2;
                                        do
                                        {
                                          v780 = __ldaxr(v779);
                                          v781 = v780 - 1;
                                        }
                                        while (__stlxr(v781, v779));
                                        if (!v781)
                                        {
                                          (*(void (**)(unsigned int *))(*(_QWORD *)v778 + 16))(v778);
                                          v782 = v778 + 3;
                                          do
                                          {
                                            v783 = __ldaxr(v782);
                                            v784 = v783 - 1;
                                          }
                                          while (__stlxr(v784, v782));
                                          if (!v784)
                                            (*(void (**)(unsigned int *))(*(_QWORD *)v778 + 24))(v778);
                                        }
                                      }
                                      v777 -= 16;
                                    }
                                    while (v777 > v776);
                                  }
                                  if (v1203 >= 0xB)
                                    operator delete(__p);
                                }
                                if (*((_QWORD *)&v1183 + 1))
                                {
                                  if ((BYTE8(v1183) & 1) == 0)
                                  {
                                    v785 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v1183 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                    if (v785)
                                      v785(&v1184, &v1184, 2);
                                  }
                                  *((_QWORD *)&v1183 + 1) = 0;
                                }
                                v786 = (char *)v1182[0];
                                if (!v1182[0])
                                  goto LABEL_1317;
                                v787 = v1182[1];
                                v788 = v1182[0];
                                if (v1182[1] == v1182[0])
                                  goto LABEL_1316;
                                v789 = (char *)v1182[1];
                                while (2)
                                {
                                  v790 = *((_DWORD *)v789 - 6);
                                  v789 -= 24;
                                  v791 = v790 ^ (v790 >> 31);
                                  if (v791 == 2)
                                  {
                                    v796 = *(v787 - 2);
                                    if (v796)
                                      (*(void (**)(uint64_t))(*(_QWORD *)v796 + 8))(v796);
                                  }
                                  else if (v791 == 1)
                                  {
                                    v792 = (unsigned int *)*(v787 - 1);
                                    if (v792)
                                    {
                                      v793 = v792 + 3;
                                      do
                                      {
                                        v794 = __ldaxr(v793);
                                        v795 = v794 - 1;
                                      }
                                      while (__stlxr(v795, v793));
                                      if (!v795)
                                        goto LABEL_1307;
                                    }
                                  }
                                  else
                                  {
                                    v792 = (unsigned int *)*(v787 - 1);
                                    if (v792)
                                    {
                                      v797 = v792 + 3;
                                      do
                                      {
                                        v798 = __ldaxr(v797);
                                        v799 = v798 - 1;
                                      }
                                      while (__stlxr(v799, v797));
                                      if (!v799)
LABEL_1307:
                                        (*(void (**)(unsigned int *))(*(_QWORD *)v792 + 24))(v792);
                                    }
                                  }
                                  v787 = v789;
                                  if (v789 == v786)
                                  {
                                    v788 = v1182[0];
LABEL_1316:
                                    v1182[1] = v786;
                                    operator delete(v788);
LABEL_1317:
                                    dispatch_release(v1180);
                                    if (v1181)
                                      _Block_release(v1181);
                                    v800 = (unint64_t *)&v1083->__shared_owners_;
                                    do
                                      v801 = __ldaxr(v800);
                                    while (__stlxr(v801 - 1, v800));
                                    if (v801)
                                    {
                                      if (!v753)
                                        goto LABEL_1326;
LABEL_1325:
                                      _Block_release(v753);
                                    }
                                    else
                                    {
                                      ((void (*)(std::__shared_weak_count *))v1083->__on_zero_shared)(v1083);
                                      std::__shared_weak_count::__release_weak(v1083);
                                      if (v753)
                                        goto LABEL_1325;
                                    }
LABEL_1326:
                                    v802 = operator new(0x20uLL);
                                    v802[1] = v1122;
                                    v803 = *((_QWORD *)v1106 + 28);
                                    *(_QWORD *)v802 = v803;
                                    *((_QWORD *)v802 + 1) = v1078;
                                    *(_QWORD *)(v803 + 8) = v802;
                                    *((_QWORD *)v1106 + 28) = v802;
                                    ++*((_QWORD *)v1106 + 30);
                                    v804 = *((_QWORD *)v1106 + 26);
                                    v1173 = (void **)MEMORY[0x1E0C809B0];
                                    v1174 = 0x40000000;
                                    v1175 = ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNSt3__13mapIPKcNS9_4listINS9_4pairIyjEENS9_9allocatorISF_EEEENS9_4lessISC_EENSG_INSE_IKSC_SI_EEEEEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSJ_IiEENS6_8functionISQ_EENSU_IFvRKNS7_10connectionESO_SP_EEENS7_5mutexEEES3_vJSO_SP_EEEDTcl7connectfp_cvNS9_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FS17_S19_E_block_invoke;
                                    v1176 = &__block_descriptor_tmp_260;
                                    v1177 = v1079;
                                    v1178 = (uint64_t (*)(coex::Module::State *__hidden))coex::Module::State::handleDesenseFrequencyReport_sync;
                                    v1179 = 0;
                                    v805 = _Block_copy(&v1173);
                                    v1102 = v804;
                                    v806 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 10);
                                    if (!v806
                                      || (v807 = *((_QWORD *)v1106 + 9),
                                          (v1084 = std::__shared_weak_count::lock(v806)) == 0))
                                    {
                                      std::__throw_bad_weak_ptr[abi:ne180100]();
                                    }
                                    v808 = *((_QWORD *)v1106 + 11);
                                    v1180 = v808;
                                    if (v805)
                                      v809 = _Block_copy(v805);
                                    else
                                      v809 = 0;
                                    v1181 = v809;
                                    dispatch_retain(v808);
                                    v1183 = 0u;
                                    *(_OWORD *)v1182 = 0u;
                                    v1186 = v808;
                                    if (v809)
                                      v809 = _Block_copy(v809);
                                    v1187 = v809;
                                    dispatch_retain(v808);
                                    object = v808;
                                    v1080 = v805;
                                    if (v809)
                                    {
                                      v810 = _Block_copy(v809);
                                      v1189 = v810;
                                      dispatch_retain(v808);
                                      if (v810)
                                      {
                                        v811 = _Block_copy(v810);
                                        dispatch_retain(v808);
                                        v1190 = 0;
                                        if (v811)
                                        {
                                          v812 = _Block_copy(v811);
                                          dispatch_retain(v808);
                                          v1068 = v811;
                                          if (v812)
                                          {
                                            v813 = _Block_copy(v812);
                                            dispatch_retain(v808);
                                            v1091 = v812;
                                            if (v813)
                                            {
                                              v814 = _Block_copy(v813);
                                              dispatch_retain(v808);
                                              v1074 = v813;
                                              if (v814)
                                              {
                                                v815 = _Block_copy(v814);
                                                dispatch_retain(v808);
                                                v1191 = (unint64_t)v808;
                                                if (v815)
                                                {
                                                  v816 = 0;
                                                  v817 = 0;
                                                  v818 = 0;
                                                  v819 = 0;
                                                  v1192 = _Block_copy(v815);
                                                  dispatch_retain(v808);
                                                  dispatch_release(v808);
                                                  _Block_release(v815);
                                                  goto LABEL_1348;
                                                }
                                                v816 = 0;
                                                v817 = 0;
                                                v818 = 0;
                                                v819 = 0;
LABEL_1347:
                                                v1192 = 0;
                                                dispatch_retain(v808);
                                                dispatch_release(v808);
LABEL_1348:
                                                dispatch_release(v808);
                                                if ((v819 & 1) == 0)
                                                  _Block_release(v814);
                                                dispatch_release(v808);
                                                if ((v818 & 1) == 0)
                                                  _Block_release(v1074);
                                                v1190 = boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>(ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>)::stored_vtable;
                                                dispatch_release(v808);
                                                if ((v817 & 1) == 0)
                                                  _Block_release(v1091);
                                                dispatch_release(v808);
                                                if ((v816 & 1) == 0)
                                                  _Block_release(v1068);
                                                *((_QWORD *)&v1194 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                *(_QWORD *)&v1194 = 0xAAAAAAAAAAAAAAAALL;
                                                *((_QWORD *)&block + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                *(_QWORD *)&block = 0;
                                                boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&block, (uint64_t *)&v1190);
                                                boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&v1190, (uint64_t *)&v1183 + 1);
                                                boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign((uint64_t)&v1183 + 8, (uint64_t *)&block);
                                                if ((_QWORD)block)
                                                {
                                                  if ((block & 1) == 0)
                                                  {
                                                    v820 = *(void (**)(char *, char *, uint64_t))(block & 0xFFFFFFFFFFFFFFFELL);
                                                    if (v820)
                                                      v820((char *)&block + 8, (char *)&block + 8, 2);
                                                  }
                                                }
                                                if (v1190)
                                                {
                                                  if ((v1190 & 1) == 0)
                                                  {
                                                    v821 = *(void (**)(uint64_t, _WORD *, unsigned int))((unint64_t)v1190 & 0xFFFFFFFFFFFFFFFELL);
                                                    if (v821)
                                                      v821((uint64_t)&v1191, &v1191, 2u);
                                                  }
                                                  v1190 = 0;
                                                }
                                                dispatch_release(object);
                                                if (v1189)
                                                  _Block_release(v1189);
                                                dispatch_release(v1186);
                                                if (v1187)
                                                  _Block_release(v1187);
                                                v822 = (unint64_t *)&v1084->__shared_weak_owners_;
                                                do
                                                  v823 = __ldxr(v822);
                                                while (__stxr(v823 + 1, v822));
                                                v824 = operator new(0x18uLL);
                                                *v824 = &off_1E7913798;
                                                v824[1] = v807;
                                                v824[2] = v1084;
                                                do
                                                  v825 = __ldxr(v822);
                                                while (__stxr(v825 + 1, v822));
                                                v826 = operator new(0x18uLL);
                                                v827 = v826;
                                                *v826 = &off_1E7913798;
                                                v826[1] = v807;
                                                v826[2] = v1084;
                                                do
                                                  v828 = __ldxr(v822);
                                                while (__stxr(v828 + 1, v822));
                                                *((_QWORD *)&block + 1) = v826;
                                                LODWORD(block) = 2;
                                                v829 = v1182[1];
                                                if (v1182[1] >= (void *)v1183)
                                                {
                                                  v954 = std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__push_back_slow_path<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>((uint64_t *)v1182, (uint64_t)&block);
                                                  v955 = block ^ ((int)block >> 31);
                                                  v1182[1] = v954;
                                                  if (v955 != 2)
                                                  {
                                                    if (v955 == 1)
                                                    {
                                                      v956 = v1194;
                                                      if (!(_QWORD)v1194)
                                                        goto LABEL_1380;
                                                      v957 = (unsigned int *)(v1194 + 12);
                                                      do
                                                      {
                                                        v958 = __ldaxr(v957);
                                                        v959 = v958 - 1;
                                                      }
                                                      while (__stlxr(v959, v957));
                                                      if (v959)
                                                        goto LABEL_1380;
                                                    }
                                                    else
                                                    {
                                                      v956 = v1194;
                                                      if (!(_QWORD)v1194)
                                                        goto LABEL_1380;
                                                      v1055 = (unsigned int *)(v1194 + 12);
                                                      do
                                                      {
                                                        v1056 = __ldaxr(v1055);
                                                        v1057 = v1056 - 1;
                                                      }
                                                      while (__stlxr(v1057, v1055));
                                                      if (v1057)
                                                        goto LABEL_1380;
                                                    }
                                                    (*(void (**)(uint64_t))(*(_QWORD *)v956 + 24))(v956);
                                                    goto LABEL_1380;
                                                  }
                                                  v827 = (_QWORD *)*((_QWORD *)&block + 1);
                                                  if (*((_QWORD *)&block + 1))
                                                    goto LABEL_1379;
                                                }
                                                else
                                                {
                                                  v830 = operator new(0x18uLL);
                                                  *v830 = &off_1E7913798;
                                                  v830[1] = v807;
                                                  v830[2] = v1084;
                                                  do
                                                    v831 = __ldxr(v822);
                                                  while (__stxr(v831 + 1, v822));
                                                  v829[1] = v830;
                                                  *(_DWORD *)v829 = 2;
                                                  v1182[1] = v829 + 3;
LABEL_1379:
                                                  (*(void (**)(_QWORD *))(*v827 + 8))(v827);
                                                }
LABEL_1380:
                                                (*(void (**)(_QWORD *))(*v824 + 8))(v824);
                                                std::__shared_weak_count::__release_weak(v1084);
                                                v832 = *(uint64_t ***)(v1102 + 136);
                                                *(_QWORD *)&v833 = 0xAAAAAAAAAAAAAAAALL;
                                                *((_QWORD *)&v833 + 1) = 0xAAAAAAAAAAAAAAAALL;
                                                v1202 = v833;
                                                v1201 = v833;
                                                v1200 = v833;
                                                v1199 = v833;
                                                v1198 = v833;
                                                v1197 = v833;
                                                v1196 = v833;
                                                *(_OWORD *)v1195 = v833;
                                                v1194 = v833;
                                                block = v833;
                                                v834 = (pthread_mutex_t *)v832[3];
                                                v1203 = 10;
                                                __p = &block;
                                                v1205 = 0;
                                                v1206 = v834;
                                                pthread_mutex_lock(v834);
                                                v1191 = 0xAAAAAAAAAAAAAAAALL;
                                                v1190 = (uint64_t (**)())0xAAAAAAAAAAAAAAAALL;
                                                v835 = (unsigned int *)v832[1];
                                                v1092 = (uint64_t ***)v832;
                                                if (v835)
                                                {
                                                  v836 = atomic_load(v835 + 2);
                                                  if (v836 == 1)
                                                  {
                                                    v837 = (uint64_t *)**v832;
                                                    v838 = v832[2];
                                                    v839 = 2;
                                                    if (v838 != v837)
                                                      goto LABEL_1477;
                                                    goto LABEL_1476;
                                                  }
                                                }
                                                v840 = (uint64_t **)operator new(0x20uLL);
                                                v841 = *v832;
                                                v842 = **v832;
                                                v1103 = v840;
                                                v843 = operator new(0x40uLL);
                                                v844 = v843;
                                                *v843 = v843;
                                                v843[1] = v843;
                                                v843[2] = 0;
                                                v845 = *(_QWORD **)(v842 + 8);
                                                if (v845 != (_QWORD *)v842)
                                                {
                                                  v846 = 0;
                                                  v847 = v843;
                                                  do
                                                  {
                                                    v848 = operator new(0x20uLL);
                                                    v848[2] = v845[2];
                                                    v849 = v845[3];
                                                    v848[3] = v849;
                                                    if (v849)
                                                    {
                                                      v850 = (unsigned int *)(v849 + 8);
                                                      do
                                                        v851 = __ldxr(v850);
                                                      while (__stxr(v851 + 1, v850));
                                                      v847 = (_QWORD *)*v844;
                                                      v846 = v844[2];
                                                    }
                                                    *v848 = v847;
                                                    v848[1] = v844;
                                                    v847[1] = v848;
                                                    *v844 = v848;
                                                    v844[2] = ++v846;
                                                    v845 = (_QWORD *)v845[1];
                                                    v847 = v848;
                                                  }
                                                  while (v845 != (_QWORD *)v842);
                                                }
                                                v1069 = v841;
                                                v1075 = (_BYTE *)v842;
                                                v844[3] = 0;
                                                v852 = (_QWORD **)(v844 + 3);
                                                v844[4] = 0;
                                                v853 = v844 + 4;
                                                v844[5] = 0;
                                                *((_BYTE *)v844 + 48) = *(_BYTE *)(v842 + 48);
                                                v844[3] = v844 + 4;
                                                v854 = *(_QWORD **)(v842 + 24);
                                                v855 = (_QWORD *)(v842 + 32);
                                                if (v854 == (_QWORD *)(v842 + 32))
                                                {
LABEL_1392:
                                                  *((_BYTE *)v844 + 56) = v1075[56];
                                                  v856 = (_QWORD *)*((_QWORD *)v1075 + 3);
                                                  if (v856 != v855)
                                                  {
                                                    v857 = (_QWORD *)v844[3];
                                                    v858 = v844[1];
                                                    do
                                                    {
                                                      v857[6] = v858;
                                                      v859 = v1075;
                                                      if (v856 != v855)
                                                        v859 = (_BYTE *)v856[6];
                                                      v860 = (_QWORD *)v856[1];
                                                      v861 = v860;
                                                      v862 = v856;
                                                      if (v860)
                                                      {
                                                        do
                                                        {
                                                          v863 = v861;
                                                          v861 = (_QWORD *)*v861;
                                                        }
                                                        while (v861);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v863 = (_QWORD *)v862[2];
                                                          v249 = *v863 == (_QWORD)v862;
                                                          v862 = v863;
                                                        }
                                                        while (!v249);
                                                      }
                                                      v864 = v1075;
                                                      if (v863 != v855)
                                                        v864 = (_BYTE *)v863[6];
                                                      while (v859 != v864)
                                                      {
                                                        v859 = (_BYTE *)*((_QWORD *)v859 + 1);
                                                        v858 = *(_QWORD *)(v858 + 8);
                                                      }
                                                      if (v860)
                                                      {
                                                        do
                                                        {
                                                          v865 = v860;
                                                          v860 = (_QWORD *)*v860;
                                                        }
                                                        while (v860);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v865 = (_QWORD *)v856[2];
                                                          v249 = *v865 == (_QWORD)v856;
                                                          v856 = v865;
                                                        }
                                                        while (!v249);
                                                      }
                                                      v866 = (_QWORD *)v857[1];
                                                      if (v866)
                                                      {
                                                        do
                                                        {
                                                          v867 = v866;
                                                          v866 = (_QWORD *)*v866;
                                                        }
                                                        while (v866);
                                                      }
                                                      else
                                                      {
                                                        do
                                                        {
                                                          v867 = (_QWORD *)v857[2];
                                                          v249 = *v867 == (_QWORD)v857;
                                                          v857 = v867;
                                                        }
                                                        while (!v249);
                                                      }
                                                      v856 = v865;
                                                      v857 = v867;
                                                    }
                                                    while (v865 != v855);
                                                  }
                                                  *v1103 = v844;
                                                  v1103[1] = 0;
                                                  v887 = (uint64_t *)operator new(0x18uLL);
                                                  v832 = (uint64_t **)v1092;
                                                  v887[1] = 0x100000001;
                                                  *v887 = (uint64_t)off_1E7913D58;
                                                  v887[2] = (uint64_t)v844;
                                                  v1103[1] = v887;
                                                  v1103[2] = (uint64_t *)v1069[2];
                                                  v888 = v1069[3];
                                                  v1103[3] = (uint64_t *)v888;
                                                  if (v888)
                                                  {
                                                    v889 = (unsigned int *)(v888 + 8);
                                                    do
                                                      v890 = __ldxr(v889);
                                                    while (__stxr(v890 + 1, v889));
                                                  }
                                                  v891 = (uint64_t **)operator new(0x18uLL);
                                                  v891[1] = (uint64_t *)0x100000001;
                                                  *v891 = (uint64_t *)off_1E7913CF8;
                                                  v891[2] = (uint64_t *)v1103;
                                                  v892 = (unsigned int *)v1092[1];
                                                  *v1092 = v1103;
                                                  v1092[1] = v891;
                                                  if (v892)
                                                  {
                                                    v893 = v892 + 2;
                                                    do
                                                    {
                                                      v894 = __ldaxr(v893);
                                                      v895 = v894 - 1;
                                                    }
                                                    while (__stlxr(v895, v893));
                                                    if (!v895)
                                                    {
                                                      (*(void (**)(unsigned int *))(*(_QWORD *)v892 + 16))(v892);
                                                      v896 = v892 + 3;
                                                      do
                                                      {
                                                        v897 = __ldaxr(v896);
                                                        v898 = v897 - 1;
                                                      }
                                                      while (__stlxr(v898, v896));
                                                      if (!v898)
                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v892 + 24))(v892);
                                                    }
                                                  }
                                                  v839 = 0;
                                                  v837 = **v1092;
LABEL_1476:
                                                  v838 = (uint64_t *)v837[1];
                                                  if (v837 == v838)
                                                    goto LABEL_1580;
LABEL_1477:
                                                  v899 = 0;
                                                  v1104 = v839 - 1;
LABEL_1485:
                                                  v902 = v838[2];
                                                  v903 = *(uint64_t **)(v902 + 32);
                                                  if (!v903)
                                                    goto LABEL_1478;
                                                  for (m = *v903; ; m += 24)
                                                  {
                                                    if (m == v903[1])
                                                      goto LABEL_1478;
                                                    if ((*(_DWORD *)m ^ (*(int *)m >> 31)) > 1)
                                                    {
                                                      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(m + 8)
                                                                                              + 24))(*(_QWORD *)(m + 8)) & 1) != 0)
                                                        goto LABEL_1494;
                                                    }
                                                    else
                                                    {
                                                      v905 = *(_QWORD *)(m + 16);
                                                      if (!v905
                                                        || (v906 = atomic_load((unsigned int *)(v905 + 8))) == 0)
                                                      {
LABEL_1494:
                                                        if (*(_BYTE *)(v902 + 24))
                                                        {
                                                          *(_BYTE *)(v902 + 24) = 0;
                                                          boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)v902, &block);
                                                        }
LABEL_1478:
                                                        v900 = v838[2];
                                                        if (*(_BYTE *)(v900 + 24))
                                                        {
                                                          v837 = (uint64_t *)v838[1];
                                                          goto LABEL_1480;
                                                        }
                                                        v907 = **v832;
                                                        v909 = (uint64_t **)(v907 + 32);
                                                        v908 = *(char **)(v907 + 32);
                                                        if (!v908)
                                                        {
                                                          if (*(uint64_t **)(v907 + 80) != v838)
                                                            goto LABEL_1571;
                                                          v931 = (uint64_t *)v838[1];
                                                          v933 = (uint64_t **)(v907 + 32);
                                                          v912 = (uint64_t *)(v907 + 32);
                                                          if (v931 != (uint64_t *)v907)
                                                            goto LABEL_1567;
                                                          goto LABEL_1549;
                                                        }
                                                        v910 = *(_DWORD *)(v900 + 64);
                                                        v911 = *(_DWORD *)(v900 + 72);
                                                        v912 = (uint64_t *)(v907 + 32);
                                                        v913 = *(_QWORD *)(v907 + 32);
                                                        if (v910 == 1)
                                                        {
                                                          v912 = (uint64_t *)(v907 + 32);
                                                          v914 = *(_QWORD *)(v907 + 32);
                                                          do
                                                          {
                                                            while (1)
                                                            {
                                                              v920 = *(_DWORD *)(v914 + 32);
                                                              v921 = v920 < 1;
                                                              if (v920 == 1)
                                                                v921 = *(_DWORD *)(v914 + 40) < v911;
                                                              if (!v921)
                                                                break;
                                                              v914 = *(_QWORD *)(v914 + 8);
                                                              if (!v914)
                                                                goto LABEL_1515;
                                                            }
                                                            v912 = (uint64_t *)v914;
                                                            v914 = *(_QWORD *)v914;
                                                          }
                                                          while (v914);
                                                        }
                                                        else
                                                        {
                                                          do
                                                          {
                                                            v915 = *(_DWORD *)(v913 + 32);
                                                            v916 = v915 == v910;
                                                            v917 = v915 < v910;
                                                            if (v915 >= v910)
                                                              v918 = (uint64_t *)v913;
                                                            else
                                                              v918 = (uint64_t *)(v913 + 8);
                                                            if (v917)
                                                              v919 = v912;
                                                            else
                                                              v919 = (uint64_t *)v913;
                                                            if (v916)
                                                            {
                                                              v918 = (uint64_t *)v913;
                                                              v912 = (uint64_t *)v913;
                                                            }
                                                            else
                                                            {
                                                              v912 = v919;
                                                            }
                                                            v913 = *v918;
                                                          }
                                                          while (*v918);
                                                        }
LABEL_1515:
                                                        if ((uint64_t *)v912[6] == v838)
                                                        {
                                                          v922 = (uint64_t **)(v907 + 32);
                                                          v923 = *(uint64_t ***)(v907 + 32);
                                                          if (v910 != 1)
                                                          {
                                                            do
                                                            {
                                                              v924 = *((_DWORD *)v923 + 8);
                                                              v925 = (uint64_t ***)(v923 + 1);
                                                              v926 = v910 == v924;
                                                              v927 = v910 < v924;
                                                              if (v910 >= v924)
                                                                v928 = (uint64_t ***)(v923 + 1);
                                                              else
                                                                v928 = (uint64_t ***)v923;
                                                              if (!v927)
                                                                v923 = v922;
                                                              if (v926)
                                                                v928 = v925;
                                                              else
                                                                v922 = v923;
                                                              v923 = *v928;
                                                            }
                                                            while (*v928);
LABEL_1533:
                                                            v930 = (uint64_t *)v907;
                                                            if (v922 != v909)
                                                              v930 = v922[6];
                                                            v931 = (uint64_t *)v838[1];
                                                            if (v931 != v930)
                                                            {
                                                              if (v910 != 1)
                                                              {
                                                                v932 = *((_DWORD *)v908 + 8);
                                                                if (v910 == v932)
                                                                  goto LABEL_1570;
                                                                while (1)
                                                                {
                                                                  if (v910 < v932)
                                                                  {
                                                                    v939 = *(_QWORD *)v908;
                                                                    if (!*(_QWORD *)v908)
                                                                    {
                                                                      v909 = (uint64_t **)v908;
LABEL_1566:
                                                                      v933 = (uint64_t **)v908;
LABEL_1567:
                                                                      v908 = (char *)operator new(0x38uLL);
                                                                      v940 = *(_QWORD *)(v900 + 64);
                                                                      *((_DWORD *)v908 + 10) = *(_DWORD *)(v900 + 72);
                                                                      *((_QWORD *)v908 + 4) = v940;
                                                                      *((_QWORD *)v908 + 6) = 0;
                                                                      *(_QWORD *)v908 = 0;
                                                                      *((_QWORD *)v908 + 1) = 0;
                                                                      *((_QWORD *)v908 + 2) = v933;
                                                                      *v909 = (uint64_t *)v908;
                                                                      v941 = **(_QWORD **)(v907 + 24);
                                                                      v942 = (uint64_t *)v908;
                                                                      if (v941)
                                                                      {
                                                                        *(_QWORD *)(v907 + 24) = v941;
                                                                        v942 = *v909;
                                                                      }
                                                                      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v907 + 32), v942);
                                                                      ++*(_QWORD *)(v907 + 40);
LABEL_1570:
                                                                      *((_QWORD *)v908 + 6) = v931;
                                                                      goto LABEL_1571;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    if (v932 >= v910)
                                                                      goto LABEL_1570;
                                                                    v939 = *((_QWORD *)v908 + 1);
                                                                    if (!v939)
                                                                    {
                                                                      v909 = (uint64_t **)(v908 + 8);
                                                                      goto LABEL_1566;
                                                                    }
                                                                  }
                                                                  v932 = *(_DWORD *)(v939 + 32);
                                                                  v908 = (char *)v939;
                                                                  if (v910 == v932)
                                                                  {
                                                                    *(_QWORD *)(v939 + 48) = v931;
                                                                    goto LABEL_1571;
                                                                  }
                                                                }
                                                              }
                                                              while (1)
                                                              {
                                                                v933 = (uint64_t **)v908;
                                                                v934 = *((_DWORD *)v908 + 8);
                                                                if (v934 == 1)
                                                                {
                                                                  v935 = *((_DWORD *)v908 + 10);
                                                                  if (v935 <= v911)
                                                                  {
                                                                    if (v935 >= v911)
                                                                    {
                                                                      *((_QWORD *)v908 + 6) = v931;
                                                                      goto LABEL_1571;
                                                                    }
LABEL_1545:
                                                                    v908 = (char *)*((_QWORD *)v908 + 1);
                                                                    if (!v908)
                                                                    {
                                                                      v909 = v933 + 1;
                                                                      goto LABEL_1567;
                                                                    }
                                                                    continue;
                                                                  }
                                                                }
                                                                else if (v934 <= 1)
                                                                {
                                                                  goto LABEL_1545;
                                                                }
                                                                v908 = *(char **)v908;
                                                                if (!*v933)
                                                                {
                                                                  v909 = v933;
                                                                  goto LABEL_1567;
                                                                }
                                                              }
                                                            }
LABEL_1549:
                                                            v936 = (uint64_t *)v912[1];
                                                            v937 = v912;
                                                            if (v936)
                                                            {
                                                              do
                                                              {
                                                                v938 = v936;
                                                                v936 = (uint64_t *)*v936;
                                                              }
                                                              while (v936);
                                                            }
                                                            else
                                                            {
                                                              do
                                                              {
                                                                v938 = (uint64_t *)v937[2];
                                                                v249 = *v938 == (_QWORD)v937;
                                                                v937 = v938;
                                                              }
                                                              while (!v249);
                                                            }
                                                            if (*(uint64_t **)(v907 + 24) == v912)
                                                              *(_QWORD *)(v907 + 24) = v938;
                                                            --*(_QWORD *)(v907 + 40);
                                                            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v908, v912);
                                                            operator delete(v912);
                                                            goto LABEL_1571;
                                                          }
                                                          while (1)
                                                          {
                                                            v929 = *((_DWORD *)v923 + 8);
                                                            if (v929 == 1)
                                                            {
                                                              if (v911 >= *((_DWORD *)v923 + 10))
                                                                goto LABEL_1527;
                                                            }
                                                            else if (v929 <= 1)
                                                            {
LABEL_1527:
                                                              v923 = (uint64_t **)v923[1];
                                                              if (!v923)
                                                                goto LABEL_1533;
                                                              continue;
                                                            }
                                                            v922 = v923;
                                                            v923 = (uint64_t **)*v923;
                                                            if (!v923)
                                                              goto LABEL_1533;
                                                          }
                                                        }
LABEL_1571:
                                                        v943 = *v838;
                                                        v837 = (uint64_t *)v838[1];
                                                        *(_QWORD *)(v943 + 8) = v837;
                                                        *(_QWORD *)v838[1] = v943;
                                                        --*(_QWORD *)(v907 + 16);
                                                        v944 = (unsigned int *)v838[3];
                                                        v832 = (uint64_t **)v1092;
                                                        if (v944)
                                                        {
                                                          v945 = v944 + 2;
                                                          do
                                                          {
                                                            v946 = __ldaxr(v945);
                                                            v947 = v946 - 1;
                                                          }
                                                          while (__stlxr(v947, v945));
                                                          if (!v947)
                                                          {
                                                            (*(void (**)(unsigned int *))(*(_QWORD *)v944 + 16))(v944);
                                                            v948 = v944 + 3;
                                                            do
                                                            {
                                                              v949 = __ldaxr(v948);
                                                              v950 = v949 - 1;
                                                            }
                                                            while (__stlxr(v950, v948));
                                                            if (!v950)
                                                              (*(void (**)(unsigned int *))(*(_QWORD *)v944 + 24))(v944);
                                                          }
                                                        }
                                                        operator delete(v838);
LABEL_1480:
                                                        v901 = v837 != (uint64_t *)**v832 && v1104 >= ++v899;
                                                        v838 = v837;
                                                        if (!v901)
                                                        {
LABEL_1580:
                                                          v832[2] = v837;
                                                          v951 = operator new(0x50uLL);
                                                          v951[1] = 0;
                                                          v951[2] = 0;
                                                          *((_BYTE *)v951 + 24) = 1;
                                                          *((_DWORD *)v951 + 7) = 1;
                                                          *v951 = off_1E7913DB8;
                                                          v952 = operator new(0x38uLL);
                                                          std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::vector(v952, (uint64_t *)v1182);
                                                          v952[3] = 0;
                                                          v953 = *((_QWORD *)&v1183 + 1);
                                                          if (*((_QWORD *)&v1183 + 1))
                                                          {
                                                            v952[3] = *((_QWORD *)&v1183 + 1);
                                                            if ((v953 & 1) != 0)
                                                            {
                                                              *((_OWORD *)v952 + 2) = v1184;
                                                              v952[6] = v1185;
                                                            }
                                                            else
                                                            {
                                                              (*(void (**)(__int128 *, _QWORD *, _QWORD))(v953 & 0xFFFFFFFFFFFFFFFELL))(&v1184, v952 + 4, 0);
                                                            }
                                                          }
                                                          v951[4] = v952;
                                                          v951[5] = 0;
                                                          v960 = operator new(0x18uLL);
                                                          v960[1] = 0x100000001;
                                                          *v960 = off_1E7913E10;
                                                          v960[2] = v952;
                                                          v951[5] = v960;
                                                          v951[6] = v832[3];
                                                          v961 = v832[4];
                                                          v951[7] = v961;
                                                          if (v961)
                                                          {
                                                            v962 = (unsigned int *)(v961 + 1);
                                                            do
                                                              v963 = __ldxr(v962);
                                                            while (__stxr(v963 + 1, v962));
                                                          }
                                                          *((_DWORD *)v951 + 16) = 0;
                                                          *((_BYTE *)v951 + 68) = 0;
                                                          v1190 = (uint64_t (**)())v951;
                                                          v964 = (unsigned int *)operator new(0x18uLL);
                                                          *((_QWORD *)v964 + 1) = 0x100000001;
                                                          v965 = v964 + 2;
                                                          *(_QWORD *)v964 = off_1E7913E70;
                                                          *((_QWORD *)v964 + 2) = v951;
                                                          v1191 = (unint64_t)v964;
                                                          v966 = (uint64_t *)**v832;
                                                          v967 = operator new(0x20uLL);
                                                          v968 = v967;
                                                          v969 = v966 + 4;
                                                          v967[2] = v951;
                                                          v967[3] = v964;
                                                          do
                                                            v970 = __ldxr(v965);
                                                          while (__stxr(v970 + 1, v965));
                                                          v971 = *v966;
                                                          *(_QWORD *)(v971 + 8) = v967;
                                                          *v967 = v971;
                                                          *v966 = (uint64_t)v967;
                                                          v967[1] = v966;
                                                          ++v966[2];
                                                          v972 = (uint64_t *)v966[4];
                                                          if (!v972)
                                                          {
                                                            v972 = v966 + 4;
                                                            goto LABEL_1617;
                                                          }
                                                          v973 = v966 + 4;
                                                          v974 = v966[4];
                                                          do
                                                          {
                                                            v975 = *(_DWORD *)(v974 + 32);
                                                            v976 = v975 == 2;
                                                            v977 = v975 < 2;
                                                            if (v975 >= 2)
                                                              v978 = (uint64_t *)v974;
                                                            else
                                                              v978 = (uint64_t *)(v974 + 8);
                                                            if (!v977)
                                                              v973 = (uint64_t *)v974;
                                                            if (v976)
                                                            {
                                                              v978 = (uint64_t *)v974;
                                                              v973 = (uint64_t *)v974;
                                                            }
                                                            v974 = *v978;
                                                          }
                                                          while (*v978);
                                                          if (v973 != v969 && *((_DWORD *)v973 + 8) == 2)
                                                          {
LABEL_1608:
                                                            *((_DWORD *)v951 + 16) = 2;
                                                            *(_QWORD *)((char *)v951 + 68) = 0xAAAAAAAAAAAAAA00;
                                                            v979 = v1080;
                                                            goto LABEL_1620;
                                                          }
                                                          v980 = *((_DWORD *)v972 + 8);
                                                          while (1)
                                                          {
                                                            if (v980 == 2)
                                                              goto LABEL_1608;
                                                            if (v980 < 3)
                                                            {
                                                              v981 = (uint64_t *)v972[1];
                                                              if (!v981)
                                                              {
                                                                v969 = v972 + 1;
LABEL_1617:
                                                                v982 = operator new(0x38uLL);
                                                                v982[4] = 0xAAAAAA0000000002;
                                                                *((_DWORD *)v982 + 10) = -1431655766;
                                                                v982[6] = v968;
                                                                *v982 = 0;
                                                                v982[1] = 0;
                                                                v982[2] = v972;
                                                                *v969 = (uint64_t)v982;
                                                                v983 = *(_QWORD *)v966[3];
                                                                if (v983)
                                                                {
                                                                  v966[3] = v983;
                                                                  v982 = (_QWORD *)*v969;
                                                                }
                                                                std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v966[4], v982);
                                                                ++v966[5];
                                                                v951 = v1190;
                                                                v964 = (unsigned int *)v1191;
                                                                *((_DWORD *)v1190 + 16) = 2;
                                                                *(_QWORD *)((char *)v951 + 68) = 0xAAAAAAAAAAAAAA00;
                                                                v979 = v1080;
                                                                if (v964)
                                                                {
LABEL_1620:
                                                                  v984 = v964 + 3;
                                                                  do
                                                                    v985 = __ldxr(v984);
                                                                  while (__stxr(v985 + 1, v984));
                                                                  *(_QWORD *)&v1122 = v951;
                                                                  *((_QWORD *)&v1122 + 1) = v964;
                                                                  do
                                                                    v986 = __ldxr(v984);
                                                                  while (__stxr(v986 + 1, v984));
                                                                  do
                                                                  {
                                                                    v987 = __ldaxr(v984);
                                                                    v988 = v987 - 1;
                                                                  }
                                                                  while (__stlxr(v988, v984));
                                                                  if (!v988)
                                                                    (*(void (**)(unsigned int *))(*(_QWORD *)v964 + 24))(v964);
                                                                  v989 = (unsigned int *)v1191;
                                                                  if (v1191)
                                                                  {
LABEL_1628:
                                                                    v990 = v989 + 2;
                                                                    do
                                                                    {
                                                                      v991 = __ldaxr(v990);
                                                                      v992 = v991 - 1;
                                                                    }
                                                                    while (__stlxr(v992, v990));
                                                                    if (!v992)
                                                                    {
                                                                      (*(void (**)(unsigned int *))(*(_QWORD *)v989 + 16))(v989);
                                                                      v993 = v989 + 3;
                                                                      do
                                                                      {
                                                                        v994 = __ldaxr(v993);
                                                                        v995 = v994 - 1;
                                                                      }
                                                                      while (__stlxr(v995, v993));
                                                                      if (!v995)
                                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v989 + 24))(v989);
                                                                    }
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  v1122 = (unint64_t)v951;
                                                                  v989 = (unsigned int *)v1191;
                                                                  if (v1191)
                                                                    goto LABEL_1628;
                                                                }
                                                                pthread_mutex_unlock(v1206);
                                                                v996 = (char *)__p;
                                                                if (__p)
                                                                {
                                                                  if (v1205 - 1 >= 0)
                                                                  {
                                                                    v997 = (char *)__p + 16 * v1205;
                                                                    do
                                                                    {
                                                                      v998 = (unsigned int *)*((_QWORD *)v997 - 1);
                                                                      if (v998)
                                                                      {
                                                                        v999 = v998 + 2;
                                                                        do
                                                                        {
                                                                          v1000 = __ldaxr(v999);
                                                                          v1001 = v1000 - 1;
                                                                        }
                                                                        while (__stlxr(v1001, v999));
                                                                        if (!v1001)
                                                                        {
                                                                          (*(void (**)(unsigned int *))(*(_QWORD *)v998 + 16))(v998);
                                                                          v1002 = v998 + 3;
                                                                          do
                                                                          {
                                                                            v1003 = __ldaxr(v1002);
                                                                            v1004 = v1003 - 1;
                                                                          }
                                                                          while (__stlxr(v1004, v1002));
                                                                          if (!v1004)
                                                                            (*(void (**)(unsigned int *))(*(_QWORD *)v998 + 24))(v998);
                                                                        }
                                                                      }
                                                                      v997 -= 16;
                                                                    }
                                                                    while (v997 > v996);
                                                                  }
                                                                  if (v1203 >= 0xB)
                                                                    operator delete(__p);
                                                                }
                                                                if (*((_QWORD *)&v1183 + 1))
                                                                {
                                                                  if ((BYTE8(v1183) & 1) == 0)
                                                                  {
                                                                    v1005 = *(void (**)(__int128 *, __int128 *, uint64_t))(*((_QWORD *)&v1183 + 1) & 0xFFFFFFFFFFFFFFFELL);
                                                                    if (v1005)
                                                                      v1005(&v1184, &v1184, 2);
                                                                  }
                                                                  *((_QWORD *)&v1183 + 1) = 0;
                                                                }
                                                                v1006 = (char *)v1182[0];
                                                                if (!v1182[0])
                                                                  goto LABEL_1675;
                                                                v1007 = v1182[1];
                                                                v1008 = v1182[0];
                                                                if (v1182[1] == v1182[0])
                                                                  goto LABEL_1674;
                                                                v1009 = (char *)v1182[1];
                                                                while (2)
                                                                {
                                                                  v1010 = *((_DWORD *)v1009 - 6);
                                                                  v1009 -= 24;
                                                                  v1011 = v1010 ^ (v1010 >> 31);
                                                                  if (v1011 == 2)
                                                                  {
                                                                    v1016 = *(v1007 - 2);
                                                                    if (v1016)
                                                                      (*(void (**)(uint64_t))(*(_QWORD *)v1016 + 8))(v1016);
                                                                  }
                                                                  else if (v1011 == 1)
                                                                  {
                                                                    v1012 = (unsigned int *)*(v1007 - 1);
                                                                    if (v1012)
                                                                    {
                                                                      v1013 = v1012 + 3;
                                                                      do
                                                                      {
                                                                        v1014 = __ldaxr(v1013);
                                                                        v1015 = v1014 - 1;
                                                                      }
                                                                      while (__stlxr(v1015, v1013));
                                                                      if (!v1015)
                                                                        goto LABEL_1665;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v1012 = (unsigned int *)*(v1007 - 1);
                                                                    if (v1012)
                                                                    {
                                                                      v1017 = v1012 + 3;
                                                                      do
                                                                      {
                                                                        v1018 = __ldaxr(v1017);
                                                                        v1019 = v1018 - 1;
                                                                      }
                                                                      while (__stlxr(v1019, v1017));
                                                                      if (!v1019)
LABEL_1665:
                                                                        (*(void (**)(unsigned int *))(*(_QWORD *)v1012 + 24))(v1012);
                                                                    }
                                                                  }
                                                                  v1007 = v1009;
                                                                  if (v1009 == v1006)
                                                                  {
                                                                    v1008 = v1182[0];
LABEL_1674:
                                                                    v1182[1] = v1006;
                                                                    operator delete(v1008);
LABEL_1675:
                                                                    dispatch_release(v1180);
                                                                    if (v1181)
                                                                      _Block_release(v1181);
                                                                    v1020 = (unint64_t *)&v1084->__shared_owners_;
                                                                    v574 = v1106;
                                                                    do
                                                                      v1021 = __ldaxr(v1020);
                                                                    while (__stlxr(v1021 - 1, v1020));
                                                                    if (v1021)
                                                                    {
                                                                      if (!v979)
                                                                      {
LABEL_1684:
                                                                        v1022 = operator new(0x20uLL);
                                                                        v1022[1] = v1122;
                                                                        v1023 = *((_QWORD *)v1106 + 28);
                                                                        *(_QWORD *)v1022 = v1023;
                                                                        *((_QWORD *)v1022 + 1) = v1078;
                                                                        *(_QWORD *)(v1023 + 8) = v1022;
                                                                        *((_QWORD *)v1106 + 28) = v1022;
                                                                        ++*((_QWORD *)v1106 + 30);
                                                                        goto LABEL_1685;
                                                                      }
                                                                    }
                                                                    else
                                                                    {
                                                                      ((void (*)(std::__shared_weak_count *))v1084->__on_zero_shared)(v1084);
                                                                      std::__shared_weak_count::__release_weak(v1084);
                                                                      if (!v979)
                                                                        goto LABEL_1684;
                                                                    }
                                                                    _Block_release(v979);
                                                                    goto LABEL_1684;
                                                                  }
                                                                  continue;
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              v981 = (uint64_t *)*v972;
                                                              v969 = v972;
                                                              if (!*v972)
                                                                goto LABEL_1617;
                                                            }
                                                            v980 = *((_DWORD *)v981 + 8);
                                                            v972 = v981;
                                                          }
                                                        }
                                                        goto LABEL_1485;
                                                      }
                                                    }
                                                  }
                                                }
                                                while (2)
                                                {
                                                  v868 = *((_DWORD *)v854 + 8);
                                                  v869 = (_QWORD *)*v853;
                                                  v870 = v844 + 4;
                                                  if (*v852 == v853)
                                                    goto LABEL_1429;
                                                  v871 = (_QWORD *)*v853;
                                                  v872 = v844 + 4;
                                                  if (v869)
                                                  {
                                                    do
                                                    {
                                                      v870 = v871;
                                                      v871 = (_QWORD *)v871[1];
                                                    }
                                                    while (v871);
                                                  }
                                                  else
                                                  {
                                                    do
                                                    {
                                                      v870 = (_QWORD *)v872[2];
                                                      v249 = *v870 == (_QWORD)v872;
                                                      v872 = v870;
                                                    }
                                                    while (v249);
                                                  }
                                                  v873 = *((_DWORD *)v854 + 10);
                                                  v874 = *((_DWORD *)v870 + 8);
                                                  if (v874 == v868)
                                                  {
                                                    if (v868 == 1)
                                                    {
                                                      if (*((_DWORD *)v870 + 10) >= v873)
                                                      {
                                                        v875 = (_QWORD *)*v853;
                                                        v876 = v844 + 4;
                                                        v877 = v844 + 4;
                                                        if (v869)
                                                          goto LABEL_1441;
LABEL_1448:
                                                        v881 = operator new(0x38uLL);
                                                        v882 = *((_OWORD *)v854 + 2);
                                                        v881[6] = v854[6];
                                                        *((_OWORD *)v881 + 2) = v882;
                                                        *v881 = 0;
                                                        v881[1] = 0;
                                                        v881[2] = v877;
                                                        *v876 = v881;
                                                        v883 = (_QWORD *)**v852;
                                                        if (v883)
                                                        {
                                                          *v852 = v883;
                                                          v881 = (_QWORD *)*v876;
                                                        }
                                                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v844[4], v881);
                                                        ++v844[5];
LABEL_1451:
                                                        v884 = (_QWORD *)v854[1];
                                                        if (v884)
                                                        {
                                                          do
                                                          {
                                                            v885 = v884;
                                                            v884 = (_QWORD *)*v884;
                                                          }
                                                          while (v884);
                                                        }
                                                        else
                                                        {
                                                          do
                                                          {
                                                            v885 = (_QWORD *)v854[2];
                                                            v249 = *v885 == (_QWORD)v854;
                                                            v854 = v885;
                                                          }
                                                          while (!v249);
                                                        }
                                                        v854 = v885;
                                                        if (v885 == v855)
                                                          goto LABEL_1392;
                                                        continue;
                                                      }
LABEL_1429:
                                                      if (v869)
                                                        v877 = v870;
                                                      else
                                                        v877 = v844 + 4;
                                                      if (v869)
                                                        v876 = v870 + 1;
                                                      else
                                                        v876 = v844 + 4;
                                                      if (!*v876)
                                                        goto LABEL_1448;
                                                      goto LABEL_1451;
                                                    }
                                                  }
                                                  else if (v874 < v868)
                                                  {
                                                    goto LABEL_1429;
                                                  }
                                                  break;
                                                }
                                                v876 = v844 + 4;
                                                v877 = v844 + 4;
                                                if (!v869)
                                                  goto LABEL_1448;
                                                v875 = (_QWORD *)*v853;
                                                if (v868 != 1)
                                                {
                                                  v878 = *((_DWORD *)v869 + 8);
                                                  v877 = (_QWORD *)*v853;
                                                  while (v868 != v878)
                                                  {
                                                    if (v868 < v878)
                                                    {
                                                      v886 = *v877;
                                                      v876 = v877;
                                                      if (!*v877)
                                                        goto LABEL_1448;
                                                    }
                                                    else
                                                    {
                                                      if (v878 >= v868)
                                                        goto LABEL_1451;
                                                      v886 = v877[1];
                                                      if (!v886)
                                                        goto LABEL_1447;
                                                    }
                                                    v878 = *(_DWORD *)(v886 + 32);
                                                    v877 = (_QWORD *)v886;
                                                  }
                                                  goto LABEL_1451;
                                                }
                                                while (1)
                                                {
LABEL_1441:
                                                  v877 = v875;
                                                  v879 = *((_DWORD *)v875 + 8);
                                                  if (v879 == 1)
                                                  {
                                                    v880 = *((_DWORD *)v875 + 10);
                                                    if (v880 > v873)
                                                      goto LABEL_1440;
                                                    if (v880 >= v873)
                                                      goto LABEL_1451;
                                                  }
                                                  else if (v879 > 1)
                                                  {
LABEL_1440:
                                                    v875 = (_QWORD *)*v875;
                                                    v876 = v877;
                                                    if (!*v877)
                                                      goto LABEL_1448;
                                                    continue;
                                                  }
                                                  v875 = (_QWORD *)v875[1];
                                                  if (!v875)
                                                  {
LABEL_1447:
                                                    v876 = v877 + 1;
                                                    goto LABEL_1448;
                                                  }
                                                }
                                              }
                                              v816 = 0;
                                              v817 = 0;
                                              v818 = 0;
LABEL_1346:
                                              dispatch_retain(v808);
                                              v814 = 0;
                                              v1191 = (unint64_t)v808;
                                              v819 = 1;
                                              goto LABEL_1347;
                                            }
                                            v816 = 0;
                                            v817 = 0;
LABEL_1345:
                                            dispatch_retain(v808);
                                            v1074 = 0;
                                            v818 = 1;
                                            goto LABEL_1346;
                                          }
                                          v816 = 0;
LABEL_1344:
                                          dispatch_retain(v808);
                                          v1091 = 0;
                                          v817 = 1;
                                          goto LABEL_1345;
                                        }
LABEL_1343:
                                        dispatch_retain(v808);
                                        v1068 = 0;
                                        v816 = 1;
                                        goto LABEL_1344;
                                      }
                                    }
                                    else
                                    {
                                      v1189 = 0;
                                      dispatch_retain(v808);
                                    }
                                    dispatch_retain(v808);
                                    v1190 = 0;
                                    goto LABEL_1343;
                                  }
                                  continue;
                                }
                              }
                            }
                            else
                            {
                              v755 = (uint64_t *)*v746;
                              v743 = v746;
                              if (!*v746)
                                goto LABEL_1245;
                            }
                            v754 = *((_DWORD *)v755 + 8);
                            v746 = v755;
                          }
                        }
                        goto LABEL_1113;
                      }
                    }
                  }
                }
                while (2)
                {
                  v642 = *((_DWORD *)v628 + 8);
                  v643 = (_QWORD *)*v627;
                  v644 = v618 + 4;
                  if (*v626 == v627)
                    goto LABEL_1057;
                  v645 = (_QWORD *)*v627;
                  v646 = v618 + 4;
                  if (v643)
                  {
                    do
                    {
                      v644 = v645;
                      v645 = (_QWORD *)v645[1];
                    }
                    while (v645);
                  }
                  else
                  {
                    do
                    {
                      v644 = (_QWORD *)v646[2];
                      v249 = *v644 == (_QWORD)v646;
                      v646 = v644;
                    }
                    while (v249);
                  }
                  v647 = *((_DWORD *)v628 + 10);
                  v648 = *((_DWORD *)v644 + 8);
                  if (v648 == v642)
                  {
                    if (v642 == 1)
                    {
                      if (*((_DWORD *)v644 + 10) >= v647)
                      {
                        v649 = (_QWORD *)*v627;
                        v650 = v618 + 4;
                        v651 = v618 + 4;
                        if (v643)
                          goto LABEL_1069;
LABEL_1076:
                        v655 = operator new(0x38uLL);
                        v656 = *((_OWORD *)v628 + 2);
                        v655[6] = v628[6];
                        *((_OWORD *)v655 + 2) = v656;
                        *v655 = 0;
                        v655[1] = 0;
                        v655[2] = v651;
                        *v650 = v655;
                        v657 = (_QWORD *)**v626;
                        if (v657)
                        {
                          *v626 = v657;
                          v655 = (_QWORD *)*v650;
                        }
                        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v618[4], v655);
                        ++v618[5];
LABEL_1079:
                        v658 = (_QWORD *)v628[1];
                        if (v658)
                        {
                          do
                          {
                            v659 = v658;
                            v658 = (_QWORD *)*v658;
                          }
                          while (v658);
                        }
                        else
                        {
                          do
                          {
                            v659 = (_QWORD *)v628[2];
                            v249 = *v659 == (_QWORD)v628;
                            v628 = v659;
                          }
                          while (!v249);
                        }
                        v628 = v659;
                        if (v659 == v629)
                          goto LABEL_1020;
                        continue;
                      }
LABEL_1057:
                      if (v643)
                        v651 = v644;
                      else
                        v651 = v618 + 4;
                      if (v643)
                        v650 = v644 + 1;
                      else
                        v650 = v618 + 4;
                      if (!*v650)
                        goto LABEL_1076;
                      goto LABEL_1079;
                    }
                  }
                  else if (v648 < v642)
                  {
                    goto LABEL_1057;
                  }
                  break;
                }
                v650 = v618 + 4;
                v651 = v618 + 4;
                if (!v643)
                  goto LABEL_1076;
                v649 = (_QWORD *)*v627;
                if (v642 != 1)
                {
                  v652 = *((_DWORD *)v643 + 8);
                  v651 = (_QWORD *)*v627;
                  while (v642 != v652)
                  {
                    if (v642 < v652)
                    {
                      v660 = *v651;
                      v650 = v651;
                      if (!*v651)
                        goto LABEL_1076;
                    }
                    else
                    {
                      if (v652 >= v642)
                        goto LABEL_1079;
                      v660 = v651[1];
                      if (!v660)
                        goto LABEL_1075;
                    }
                    v652 = *(_DWORD *)(v660 + 32);
                    v651 = (_QWORD *)v660;
                  }
                  goto LABEL_1079;
                }
                while (1)
                {
LABEL_1069:
                  v651 = v649;
                  v653 = *((_DWORD *)v649 + 8);
                  if (v653 == 1)
                  {
                    v654 = *((_DWORD *)v649 + 10);
                    if (v654 > v647)
                      goto LABEL_1068;
                    if (v654 >= v647)
                      goto LABEL_1079;
                  }
                  else if (v653 > 1)
                  {
LABEL_1068:
                    v649 = (_QWORD *)*v649;
                    v650 = v651;
                    if (!*v651)
                      goto LABEL_1076;
                    continue;
                  }
                  v649 = (_QWORD *)v649[1];
                  if (!v649)
                  {
LABEL_1075:
                    v650 = v651 + 1;
                    goto LABEL_1076;
                  }
                }
              }
              v590 = 0;
              v591 = 0;
              v592 = 0;
LABEL_974:
              dispatch_retain(v582);
              v588 = 0;
              v1191 = (unint64_t)v582;
              v593 = 1;
              goto LABEL_975;
            }
            v590 = 0;
            v591 = 0;
LABEL_973:
            v1089 = v586;
            dispatch_retain(v582);
            v587 = 0;
            v592 = 1;
            goto LABEL_974;
          }
          v590 = 0;
LABEL_972:
          dispatch_retain(v582);
          v586 = 0;
          v591 = 1;
          goto LABEL_973;
        }
LABEL_971:
        dispatch_retain(v582);
        v1061 = 0;
        v590 = 1;
        goto LABEL_972;
      }
    }
    else
    {
      v1189 = 0;
      dispatch_retain(v582);
    }
    dispatch_retain(v582);
    v1190 = 0;
    goto LABEL_971;
  }
LABEL_1685:
  coex::Module::State::setIndications_sync(v574);
  v1121 = 8;
  cf = 0;
  strcpy((char *)v1120, "coex.mod");
  AppleBasebandManager::create();
  v1024 = block;
  block = 0uLL;
  v1025 = (std::__shared_weak_count *)*((_QWORD *)v1106 + 32);
  *(_OWORD *)((char *)v1106 + 248) = v1024;
  if (v1025)
  {
    v1026 = (unint64_t *)&v1025->__shared_owners_;
    do
      v1027 = __ldaxr(v1026);
    while (__stlxr(v1027 - 1, v1026));
    if (!v1027)
    {
      ((void (*)(std::__shared_weak_count *))v1025->__on_zero_shared)(v1025);
      std::__shared_weak_count::__release_weak(v1025);
      v1028 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
      if (*((_QWORD *)&block + 1))
        goto LABEL_1690;
      goto LABEL_1693;
    }
  }
  v1028 = (std::__shared_weak_count *)*((_QWORD *)&block + 1);
  if (!*((_QWORD *)&block + 1))
    goto LABEL_1693;
LABEL_1690:
  v1029 = (unint64_t *)&v1028->__shared_owners_;
  do
    v1030 = __ldaxr(v1029);
  while (__stlxr(v1030 - 1, v1029));
  if (v1030)
  {
LABEL_1693:
    v1031 = cf;
    if (cf)
      goto LABEL_1694;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v1028->__on_zero_shared)(v1028);
    std::__shared_weak_count::__release_weak(v1028);
    v1031 = cf;
    if (cf)
LABEL_1694:
      CFRelease(v1031);
  }
  if (v1121 < 0)
    operator delete(v1120[0]);
  v1032 = (const void *)*MEMORY[0x1E0CFBF60];
  v1033 = strlen((const char *)*MEMORY[0x1E0CFBF60]);
  if (v1033 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v1034 = (void *)v1033;
  if (v1033 >= 0x17)
  {
    v1037 = (v1033 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1033 | 7) != 0x17)
      v1037 = v1033 | 7;
    v1038 = v1037 + 1;
    v1035 = (void **)operator new(v1037 + 1);
    __dst[1] = v1034;
    v1118 = v1038 | 0x8000000000000000;
    __dst[0] = v1035;
    v1036 = v1076;
  }
  else
  {
    HIBYTE(v1118) = v1033;
    v1035 = __dst;
    v1036 = v1076;
    if (!v1033)
      goto LABEL_1705;
  }
  memmove(v1035, v1032, (size_t)v1034);
LABEL_1705:
  *((_BYTE *)v1034 + (_QWORD)v1035) = 0;
  v1113[0] = MEMORY[0x1E0C809B0];
  v1113[1] = 1174405120;
  v1113[2] = ___ZN4coex6Module5State4initEv_block_invoke_64;
  v1113[3] = &__block_descriptor_tmp_66;
  v1113[4] = v1106;
  v1113[5] = v1105;
  v1114 = v1036;
  do
    v1039 = __ldxr(p_shared_weak_owners);
  while (__stxr(v1039 + 1, p_shared_weak_owners));
  v1040 = _Block_copy(v1113);
  v1041 = *((_QWORD *)v1106 + 11);
  if (v1041)
    dispatch_retain(*((dispatch_object_t *)v1106 + 11));
  v1115 = v1040;
  v1116 = v1041;
  AppleBasebandManager::setEventHandler();
  if (v1116)
    dispatch_release(v1116);
  if (v1115)
    _Block_release(v1115);
  if (SHIBYTE(v1118) < 0)
    operator delete(__dst[0]);
  v1042 = (const void *)*MEMORY[0x1E0CFBD68];
  v1043 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v1043 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v1044 = (void *)v1043;
  if (v1043 >= 0x17)
  {
    v1047 = (v1043 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1043 | 7) != 0x17)
      v1047 = v1043 | 7;
    v1048 = v1047 + 1;
    v1046 = v1106;
    v1045 = operator new(v1047 + 1);
    v1111[1] = v1044;
    v1112 = v1048 | 0x8000000000000000;
    v1111[0] = v1045;
    v1036 = v1076;
  }
  else
  {
    HIBYTE(v1112) = v1043;
    v1045 = v1111;
    v1046 = v1106;
    if (!v1043)
      goto LABEL_1723;
  }
  memmove(v1045, v1042, (size_t)v1044);
LABEL_1723:
  *((_BYTE *)v1044 + (_QWORD)v1045) = 0;
  v1107[0] = MEMORY[0x1E0C809B0];
  v1107[1] = 1174405120;
  v1107[2] = ___ZN4coex6Module5State4initEv_block_invoke_67;
  v1107[3] = &__block_descriptor_tmp_68;
  v1107[4] = v1046;
  v1107[5] = v1105;
  v1108 = v1036;
  do
    v1049 = __ldxr(p_shared_weak_owners);
  while (__stxr(v1049 + 1, p_shared_weak_owners));
  v1050 = _Block_copy(v1107);
  v1051 = *((_QWORD *)v1046 + 11);
  if (v1051)
    dispatch_retain(*((dispatch_object_t *)v1046 + 11));
  v1109 = v1050;
  v1110 = v1051;
  AppleBasebandManager::setEventHandler();
  if (v1110)
    dispatch_release(v1110);
  if (v1109)
    _Block_release(v1109);
  if (SHIBYTE(v1112) < 0)
    operator delete(v1111[0]);
  AppleBasebandManager::eventsOn(*((AppleBasebandManager **)v1046 + 31));
  if (v1108)
    std::__shared_weak_count::__release_weak(v1108);
  if (v1114)
    std::__shared_weak_count::__release_weak(v1114);
  if (v1124)
    std::__shared_weak_count::__release_weak(v1124);
  if (v1126)
    std::__shared_weak_count::__release_weak(v1126);
  if (v1128)
    std::__shared_weak_count::__release_weak(v1128);
  if (v1130)
    std::__shared_weak_count::__release_weak(v1130);
  if (v1132)
    std::__shared_weak_count::__release_weak(v1132);
  if (v1134)
    std::__shared_weak_count::__release_weak(v1134);
  if (v1136)
    std::__shared_weak_count::__release_weak(v1136);
  if (v1138)
    std::__shared_weak_count::__release_weak(v1138);
  if (v1140)
    std::__shared_weak_count::__release_weak(v1140);
  if (v1142)
    std::__shared_weak_count::__release_weak(v1142);
  if (v1144)
    std::__shared_weak_count::__release_weak(v1144);
  if (v1146)
    std::__shared_weak_count::__release_weak(v1146);
  if (v1148)
    std::__shared_weak_count::__release_weak(v1148);
  if (v1150)
    std::__shared_weak_count::__release_weak(v1150);
  if (v1152)
    std::__shared_weak_count::__release_weak(v1152);
  if (v1154)
    std::__shared_weak_count::__release_weak(v1154);
  if (v1156)
    std::__shared_weak_count::__release_weak(v1156);
  if (v1158)
    std::__shared_weak_count::__release_weak(v1158);
  if (v1160)
    std::__shared_weak_count::__release_weak(v1160);
  if (v1162)
    std::__shared_weak_count::__release_weak(v1162);
  if (v1164)
    std::__shared_weak_count::__release_weak(v1164);
  if (v1166)
    std::__shared_weak_count::__release_weak(v1166);
  if (v1168)
    std::__shared_weak_count::__release_weak(v1168);
  if (v1170)
    std::__shared_weak_count::__release_weak(v1170);
  if (v1172)
    std::__shared_weak_count::__release_weak(v1172);
  std::__shared_weak_count::__release_weak(v1036);
}

void sub_1BF594AC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF594AD4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594ADC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594AE4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594AEC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594AF4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594B00(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B0C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B18(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B24(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B30(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B3C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B48(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594B54(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B60(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594B78(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B84(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594B90(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594B98(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594BA0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594BA8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594BB0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594BB8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594BC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF594BCC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594BD8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF594BE4(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;

  if (a2)
  {
    if (*(_QWORD *)v3)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100](v3, *(_QWORD *)v3);
      operator delete(*(void **)v3);
    }
    operator delete(v3);
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF596D34);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5954C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5954CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5954D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5954DC(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x838];
    if (STACK[0x838])
    {
      if ((uint64_t)(STACK[0x840] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x840];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x830] >= 0xB)
        operator delete((void *)STACK[0x838]);
    }
    JUMPOUT(0x1BF597010);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF595580(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF595588(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF595598);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5955A8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5955B0);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5955BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5955C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5955D0(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF5955F0(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BF597030);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF595600(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF595608(_Unwind_Exception *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1BF595664(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF59566C(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF596DF4);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5956D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5956DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5956E4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5956ECLL);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5956F8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF595700);
  JUMPOUT(0x1BF597080);
}

void sub_1BF59570C(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x838];
    if (STACK[0x838])
    {
      if ((uint64_t)(STACK[0x840] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x840];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x830] >= 0xB)
        operator delete((void *)STACK[0x838]);
    }
    JUMPOUT(0x1BF597038);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5957B0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5957B8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5957C8);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5957D8(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5957E0);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5957F8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595804(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595810(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59581C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595828(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595834(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595840(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59584C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595858(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595864(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595870(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59587C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595888(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595894(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5958A0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5958AC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5958B8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5958C4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5958D0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5958DC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5958E8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5958F4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595900(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59590C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595918(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595924(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595930(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59593C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595948(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595954(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595960(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59596C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595978(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595984(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595990(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59599C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5959A8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5959B4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5959C0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5959CC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5959D8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5959E4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5959F0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5959FC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A08(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A14(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A20(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A2C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A38(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A44(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A50(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A5C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A68(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A74(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A80(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A8C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595A98(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595AA4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595AB0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595ABC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595AC8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595AD4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595AE0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595AEC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595AF8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B04(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B10(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B1C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B28(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B34(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B40(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B4C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B58(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B64(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B70(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B7C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B88(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595B94(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595BA0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595BAC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595BB8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595BC4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595BD0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595BDC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595BE8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595BF4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595C00(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595C0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *__p)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v18 = (unsigned int *)__p[3];
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        v22 = v18 + 3;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    v25 = (unsigned int *)__p[1];
    if (v25)
    {
      v26 = v25 + 2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
        v29 = v25 + 3;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 24))(v25);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF595CEC(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BF597058);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF595D00(void *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v2[4]);
    if (v2[2])
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t *)v2[1];
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v2 + 8);
      *(_QWORD *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (unsigned int *)v4[3];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF595DCC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a2)
  {
    __cxa_end_catch();
    v18 = *(unsigned int **)(a18 + 8);
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        v22 = v18 + 3;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    JUMPOUT(0x1BF596EB0);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF595E40(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596EB0);
}

void sub_1BF595E4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *__p)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;

  if (a2)
  {
    __cxa_begin_catch(a1);
    v18 = (unsigned int *)__p[3];
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        v22 = v18 + 3;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    v25 = (unsigned int *)__p[1];
    if (v25)
    {
      v26 = v25 + 2;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 16))(v25);
        v29 = v25 + 3;
        do
        {
          v30 = __ldaxr(v29);
          v31 = v30 - 1;
        }
        while (__stlxr(v31, v29));
        if (!v31)
          (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 24))(v25);
      }
    }
    operator delete(__p);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF595F24(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595F30(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595F3C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x790]);
    boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot((uint64_t)&STACK[0x710]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF595F4C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF595F58(void *a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a2)
  {
    __cxa_begin_catch(a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v2[4]);
    if (v2[2])
    {
      v3 = (_QWORD *)*v2;
      v4 = (uint64_t *)v2[1];
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = *(_QWORD *)(*v2 + 8);
      *(_QWORD *)v3[1] = v5;
      v2[2] = 0;
      if (v4 != v2)
      {
        do
        {
          v6 = (uint64_t *)v4[1];
          v7 = (unsigned int *)v4[3];
          if (v7)
          {
            v8 = v7 + 2;
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
              v11 = v7 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
            }
          }
          operator delete(v4);
          v4 = v6;
        }
        while (v6 != v2);
      }
    }
    operator delete(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596020(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59602C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a2)
  {
    __cxa_end_catch();
    v18 = *(unsigned int **)(a18 + 8);
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 16))(v18);
        v22 = v18 + 3;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 24))(v18);
      }
    }
    JUMPOUT(0x1BF596F74);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596098(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5960A4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5960B0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596F74);
}

void sub_1BF5960BC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5960C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5960CC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5960D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF5960DC(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x770]);
    JUMPOUT(0x1BF597008);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5960F0(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x770]);
    JUMPOUT(0x1BF597030);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a64;
  std::__shared_weak_count *a71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;

  if (a27)
    std::__shared_weak_count::__release_weak(a27);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  if (a57)
  {
    std::__shared_weak_count::__release_weak(a57);
    v72 = a64;
    if (!a64)
    {
LABEL_7:
      v73 = a71;
      if (!a71)
        goto LABEL_8;
      goto LABEL_34;
    }
  }
  else
  {
    v72 = a64;
    if (!a64)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v72);
  v73 = a71;
  if (!a71)
  {
LABEL_8:
    v74 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v73);
  v74 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_9:
    v75 = (std::__shared_weak_count *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_10:
    v76 = (std::__shared_weak_count *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_11:
    v77 = (std::__shared_weak_count *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x2D0];
  if (!STACK[0x2D0])
  {
LABEL_12:
    v78 = (std::__shared_weak_count *)STACK[0x308];
    if (!STACK[0x308])
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_13:
    v79 = (std::__shared_weak_count *)STACK[0x340];
    if (!STACK[0x340])
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x340];
  if (!STACK[0x340])
  {
LABEL_14:
    v80 = (std::__shared_weak_count *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_15:
    v81 = (std::__shared_weak_count *)STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_16:
    v82 = (std::__shared_weak_count *)STACK[0x3E8];
    if (!STACK[0x3E8])
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_17:
    v83 = (std::__shared_weak_count *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_18:
    v84 = (std::__shared_weak_count *)STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x458];
  if (!STACK[0x458])
  {
LABEL_19:
    v85 = (std::__shared_weak_count *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v84);
  v85 = (std::__shared_weak_count *)STACK[0x490];
  if (!STACK[0x490])
  {
LABEL_20:
    v86 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v85);
  v86 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_21:
    v87 = (std::__shared_weak_count *)STACK[0x500];
    if (!STACK[0x500])
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v86);
  v87 = (std::__shared_weak_count *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_22:
    v88 = (std::__shared_weak_count *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v87);
  v88 = (std::__shared_weak_count *)STACK[0x538];
  if (!STACK[0x538])
  {
LABEL_23:
    v89 = (std::__shared_weak_count *)STACK[0x570];
    if (!STACK[0x570])
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v88);
  v89 = (std::__shared_weak_count *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_24:
    v90 = (std::__shared_weak_count *)STACK[0x5A8];
    if (!STACK[0x5A8])
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v89);
  v90 = (std::__shared_weak_count *)STACK[0x5A8];
  if (!STACK[0x5A8])
  {
LABEL_25:
    v91 = (std::__shared_weak_count *)STACK[0x5E0];
    if (!STACK[0x5E0])
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v90);
  v91 = (std::__shared_weak_count *)STACK[0x5E0];
  if (!STACK[0x5E0])
  {
LABEL_26:
    v92 = (std::__shared_weak_count *)STACK[0x618];
    if (!STACK[0x618])
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v91);
  v92 = (std::__shared_weak_count *)STACK[0x618];
  if (!STACK[0x618])
  {
LABEL_27:
    v93 = (std::__shared_weak_count *)STACK[0x650];
    if (!STACK[0x650])
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v92);
  v93 = (std::__shared_weak_count *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_28:
    v94 = (std::__shared_weak_count *)STACK[0x688];
    if (!STACK[0x688])
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  std::__shared_weak_count::__release_weak(v93);
  v94 = (std::__shared_weak_count *)STACK[0x688];
  if (!STACK[0x688])
  {
LABEL_29:
    v95 = (std::__shared_weak_count *)STACK[0x6C0];
    if (!STACK[0x6C0])
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v94);
  v95 = (std::__shared_weak_count *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_31:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v95);
  goto LABEL_31;
}

void sub_1BF596118(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a28);
  if (a27)
    std::__shared_weak_count::__release_weak(a27);
  if (a35 < 0)
    operator delete(__p);
  if (a42)
    std::__shared_weak_count::__release_weak(a42);
  JUMPOUT(0x1BF596924);
}

void sub_1BF596144(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF59614C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a67;
  std::__shared_weak_count *a72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;

  dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback((uint64_t)&a40);
  if (a39)
    std::__shared_weak_count::__release_weak(a39);
  if (a47 < 0)
    operator delete(__p);
  if (a60)
  {
    std::__shared_weak_count::__release_weak(a60);
    v73 = a67;
    if (!a67)
    {
LABEL_7:
      v74 = a72;
      if (!a72)
        goto LABEL_8;
      goto LABEL_34;
    }
  }
  else
  {
    v73 = a67;
    if (!a67)
      goto LABEL_7;
  }
  std::__shared_weak_count::__release_weak(v73);
  v74 = a72;
  if (!a72)
  {
LABEL_8:
    v75 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_9:
    v76 = (std::__shared_weak_count *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_10:
    v77 = (std::__shared_weak_count *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_11:
    v78 = (std::__shared_weak_count *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x2D0];
  if (!STACK[0x2D0])
  {
LABEL_12:
    v79 = (std::__shared_weak_count *)STACK[0x308];
    if (!STACK[0x308])
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_13:
    v80 = (std::__shared_weak_count *)STACK[0x340];
    if (!STACK[0x340])
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x340];
  if (!STACK[0x340])
  {
LABEL_14:
    v81 = (std::__shared_weak_count *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_15:
    v82 = (std::__shared_weak_count *)STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_16:
    v83 = (std::__shared_weak_count *)STACK[0x3E8];
    if (!STACK[0x3E8])
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_17:
    v84 = (std::__shared_weak_count *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_18:
    v85 = (std::__shared_weak_count *)STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v84);
  v85 = (std::__shared_weak_count *)STACK[0x458];
  if (!STACK[0x458])
  {
LABEL_19:
    v86 = (std::__shared_weak_count *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v85);
  v86 = (std::__shared_weak_count *)STACK[0x490];
  if (!STACK[0x490])
  {
LABEL_20:
    v87 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v86);
  v87 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_21:
    v88 = (std::__shared_weak_count *)STACK[0x500];
    if (!STACK[0x500])
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v87);
  v88 = (std::__shared_weak_count *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_22:
    v89 = (std::__shared_weak_count *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v88);
  v89 = (std::__shared_weak_count *)STACK[0x538];
  if (!STACK[0x538])
  {
LABEL_23:
    v90 = (std::__shared_weak_count *)STACK[0x570];
    if (!STACK[0x570])
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v89);
  v90 = (std::__shared_weak_count *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_24:
    v91 = (std::__shared_weak_count *)STACK[0x5A8];
    if (!STACK[0x5A8])
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v90);
  v91 = (std::__shared_weak_count *)STACK[0x5A8];
  if (!STACK[0x5A8])
  {
LABEL_25:
    v92 = (std::__shared_weak_count *)STACK[0x5E0];
    if (!STACK[0x5E0])
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v91);
  v92 = (std::__shared_weak_count *)STACK[0x5E0];
  if (!STACK[0x5E0])
  {
LABEL_26:
    v93 = (std::__shared_weak_count *)STACK[0x618];
    if (!STACK[0x618])
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v92);
  v93 = (std::__shared_weak_count *)STACK[0x618];
  if (!STACK[0x618])
  {
LABEL_27:
    v94 = (std::__shared_weak_count *)STACK[0x650];
    if (!STACK[0x650])
      goto LABEL_28;
    goto LABEL_54;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v93);
  v94 = (std::__shared_weak_count *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_28:
    v95 = (std::__shared_weak_count *)STACK[0x688];
    if (!STACK[0x688])
      goto LABEL_29;
    goto LABEL_55;
  }
LABEL_54:
  std::__shared_weak_count::__release_weak(v94);
  v95 = (std::__shared_weak_count *)STACK[0x688];
  if (!STACK[0x688])
  {
LABEL_29:
    v96 = (std::__shared_weak_count *)STACK[0x6C0];
    if (!STACK[0x6C0])
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_55:
  std::__shared_weak_count::__release_weak(v95);
  v96 = (std::__shared_weak_count *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_31:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v96);
  goto LABEL_31;
}

void sub_1BF596178(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate();
  _Unwind_Resume(a1);
}

void sub_1BF596180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,const void *a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,std::__shared_weak_count *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a67;
  std::__shared_weak_count *a72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a45);
  if (a51 < 0)
    operator delete(__p);
  if (a60)
  {
    std::__shared_weak_count::__release_weak(a60);
    v73 = a67;
    if (!a67)
    {
LABEL_5:
      v74 = a72;
      if (!a72)
        goto LABEL_6;
      goto LABEL_32;
    }
  }
  else
  {
    v73 = a67;
    if (!a67)
      goto LABEL_5;
  }
  std::__shared_weak_count::__release_weak(v73);
  v74 = a72;
  if (!a72)
  {
LABEL_6:
    v75 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_7:
    v76 = (std::__shared_weak_count *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_8:
    v77 = (std::__shared_weak_count *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_9:
    v78 = (std::__shared_weak_count *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x2D0];
  if (!STACK[0x2D0])
  {
LABEL_10:
    v79 = (std::__shared_weak_count *)STACK[0x308];
    if (!STACK[0x308])
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_11:
    v80 = (std::__shared_weak_count *)STACK[0x340];
    if (!STACK[0x340])
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x340];
  if (!STACK[0x340])
  {
LABEL_12:
    v81 = (std::__shared_weak_count *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_13:
    v82 = (std::__shared_weak_count *)STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_14:
    v83 = (std::__shared_weak_count *)STACK[0x3E8];
    if (!STACK[0x3E8])
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_15:
    v84 = (std::__shared_weak_count *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_16:
    v85 = (std::__shared_weak_count *)STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v84);
  v85 = (std::__shared_weak_count *)STACK[0x458];
  if (!STACK[0x458])
  {
LABEL_17:
    v86 = (std::__shared_weak_count *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v85);
  v86 = (std::__shared_weak_count *)STACK[0x490];
  if (!STACK[0x490])
  {
LABEL_18:
    v87 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v86);
  v87 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_19:
    v88 = (std::__shared_weak_count *)STACK[0x500];
    if (!STACK[0x500])
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v87);
  v88 = (std::__shared_weak_count *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_20:
    v89 = (std::__shared_weak_count *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v88);
  v89 = (std::__shared_weak_count *)STACK[0x538];
  if (!STACK[0x538])
  {
LABEL_21:
    v90 = (std::__shared_weak_count *)STACK[0x570];
    if (!STACK[0x570])
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v89);
  v90 = (std::__shared_weak_count *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_22:
    v91 = (std::__shared_weak_count *)STACK[0x5A8];
    if (!STACK[0x5A8])
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v90);
  v91 = (std::__shared_weak_count *)STACK[0x5A8];
  if (!STACK[0x5A8])
  {
LABEL_23:
    v92 = (std::__shared_weak_count *)STACK[0x5E0];
    if (!STACK[0x5E0])
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v91);
  v92 = (std::__shared_weak_count *)STACK[0x5E0];
  if (!STACK[0x5E0])
  {
LABEL_24:
    v93 = (std::__shared_weak_count *)STACK[0x618];
    if (!STACK[0x618])
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v92);
  v93 = (std::__shared_weak_count *)STACK[0x618];
  if (!STACK[0x618])
  {
LABEL_25:
    v94 = (std::__shared_weak_count *)STACK[0x650];
    if (!STACK[0x650])
      goto LABEL_26;
    goto LABEL_52;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v93);
  v94 = (std::__shared_weak_count *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_26:
    v95 = (std::__shared_weak_count *)STACK[0x688];
    if (!STACK[0x688])
      goto LABEL_27;
    goto LABEL_53;
  }
LABEL_52:
  std::__shared_weak_count::__release_weak(v94);
  v95 = (std::__shared_weak_count *)STACK[0x688];
  if (!STACK[0x688])
  {
LABEL_27:
    v96 = (std::__shared_weak_count *)STACK[0x6C0];
    if (!STACK[0x6C0])
      goto LABEL_29;
    goto LABEL_28;
  }
LABEL_53:
  std::__shared_weak_count::__release_weak(v95);
  v96 = (std::__shared_weak_count *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_29:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_28:
  std::__shared_weak_count::__release_weak(v96);
  goto LABEL_29;
}

void sub_1BF5961A8(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5961D0(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BF597058);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5961E4(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF59624C(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    JUMPOUT(0x1BF596EB4);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5962BC(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5962C4);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5962D0(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5962D8);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5962E4(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x838];
    if (STACK[0x838])
    {
      if ((uint64_t)(STACK[0x840] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x840];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x830] >= 0xB)
        operator delete((void *)STACK[0x838]);
    }
    JUMPOUT(0x1BF597060);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596388(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596394(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5963A4);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5963B4(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF5963BCLL);
  JUMPOUT(0x1BF597080);
}

void sub_1BF5963C8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5963D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count *a64;
  std::__shared_weak_count *a71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  std::__shared_weak_count *v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  std::__shared_weak_count *v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;

  boost::signals2::connection::~connection((boost::signals2::connection *)&a49);
  if (a57)
  {
    std::__shared_weak_count::__release_weak(a57);
    v72 = a64;
    if (!a64)
    {
LABEL_3:
      v73 = a71;
      if (!a71)
        goto LABEL_4;
      goto LABEL_30;
    }
  }
  else
  {
    v72 = a64;
    if (!a64)
      goto LABEL_3;
  }
  std::__shared_weak_count::__release_weak(v72);
  v73 = a71;
  if (!a71)
  {
LABEL_4:
    v74 = (std::__shared_weak_count *)STACK[0x228];
    if (!STACK[0x228])
      goto LABEL_5;
    goto LABEL_31;
  }
LABEL_30:
  std::__shared_weak_count::__release_weak(v73);
  v74 = (std::__shared_weak_count *)STACK[0x228];
  if (!STACK[0x228])
  {
LABEL_5:
    v75 = (std::__shared_weak_count *)STACK[0x260];
    if (!STACK[0x260])
      goto LABEL_6;
    goto LABEL_32;
  }
LABEL_31:
  std::__shared_weak_count::__release_weak(v74);
  v75 = (std::__shared_weak_count *)STACK[0x260];
  if (!STACK[0x260])
  {
LABEL_6:
    v76 = (std::__shared_weak_count *)STACK[0x298];
    if (!STACK[0x298])
      goto LABEL_7;
    goto LABEL_33;
  }
LABEL_32:
  std::__shared_weak_count::__release_weak(v75);
  v76 = (std::__shared_weak_count *)STACK[0x298];
  if (!STACK[0x298])
  {
LABEL_7:
    v77 = (std::__shared_weak_count *)STACK[0x2D0];
    if (!STACK[0x2D0])
      goto LABEL_8;
    goto LABEL_34;
  }
LABEL_33:
  std::__shared_weak_count::__release_weak(v76);
  v77 = (std::__shared_weak_count *)STACK[0x2D0];
  if (!STACK[0x2D0])
  {
LABEL_8:
    v78 = (std::__shared_weak_count *)STACK[0x308];
    if (!STACK[0x308])
      goto LABEL_9;
    goto LABEL_35;
  }
LABEL_34:
  std::__shared_weak_count::__release_weak(v77);
  v78 = (std::__shared_weak_count *)STACK[0x308];
  if (!STACK[0x308])
  {
LABEL_9:
    v79 = (std::__shared_weak_count *)STACK[0x340];
    if (!STACK[0x340])
      goto LABEL_10;
    goto LABEL_36;
  }
LABEL_35:
  std::__shared_weak_count::__release_weak(v78);
  v79 = (std::__shared_weak_count *)STACK[0x340];
  if (!STACK[0x340])
  {
LABEL_10:
    v80 = (std::__shared_weak_count *)STACK[0x378];
    if (!STACK[0x378])
      goto LABEL_11;
    goto LABEL_37;
  }
LABEL_36:
  std::__shared_weak_count::__release_weak(v79);
  v80 = (std::__shared_weak_count *)STACK[0x378];
  if (!STACK[0x378])
  {
LABEL_11:
    v81 = (std::__shared_weak_count *)STACK[0x3B0];
    if (!STACK[0x3B0])
      goto LABEL_12;
    goto LABEL_38;
  }
LABEL_37:
  std::__shared_weak_count::__release_weak(v80);
  v81 = (std::__shared_weak_count *)STACK[0x3B0];
  if (!STACK[0x3B0])
  {
LABEL_12:
    v82 = (std::__shared_weak_count *)STACK[0x3E8];
    if (!STACK[0x3E8])
      goto LABEL_13;
    goto LABEL_39;
  }
LABEL_38:
  std::__shared_weak_count::__release_weak(v81);
  v82 = (std::__shared_weak_count *)STACK[0x3E8];
  if (!STACK[0x3E8])
  {
LABEL_13:
    v83 = (std::__shared_weak_count *)STACK[0x420];
    if (!STACK[0x420])
      goto LABEL_14;
    goto LABEL_40;
  }
LABEL_39:
  std::__shared_weak_count::__release_weak(v82);
  v83 = (std::__shared_weak_count *)STACK[0x420];
  if (!STACK[0x420])
  {
LABEL_14:
    v84 = (std::__shared_weak_count *)STACK[0x458];
    if (!STACK[0x458])
      goto LABEL_15;
    goto LABEL_41;
  }
LABEL_40:
  std::__shared_weak_count::__release_weak(v83);
  v84 = (std::__shared_weak_count *)STACK[0x458];
  if (!STACK[0x458])
  {
LABEL_15:
    v85 = (std::__shared_weak_count *)STACK[0x490];
    if (!STACK[0x490])
      goto LABEL_16;
    goto LABEL_42;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v84);
  v85 = (std::__shared_weak_count *)STACK[0x490];
  if (!STACK[0x490])
  {
LABEL_16:
    v86 = (std::__shared_weak_count *)STACK[0x4C8];
    if (!STACK[0x4C8])
      goto LABEL_17;
    goto LABEL_43;
  }
LABEL_42:
  std::__shared_weak_count::__release_weak(v85);
  v86 = (std::__shared_weak_count *)STACK[0x4C8];
  if (!STACK[0x4C8])
  {
LABEL_17:
    v87 = (std::__shared_weak_count *)STACK[0x500];
    if (!STACK[0x500])
      goto LABEL_18;
    goto LABEL_44;
  }
LABEL_43:
  std::__shared_weak_count::__release_weak(v86);
  v87 = (std::__shared_weak_count *)STACK[0x500];
  if (!STACK[0x500])
  {
LABEL_18:
    v88 = (std::__shared_weak_count *)STACK[0x538];
    if (!STACK[0x538])
      goto LABEL_19;
    goto LABEL_45;
  }
LABEL_44:
  std::__shared_weak_count::__release_weak(v87);
  v88 = (std::__shared_weak_count *)STACK[0x538];
  if (!STACK[0x538])
  {
LABEL_19:
    v89 = (std::__shared_weak_count *)STACK[0x570];
    if (!STACK[0x570])
      goto LABEL_20;
    goto LABEL_46;
  }
LABEL_45:
  std::__shared_weak_count::__release_weak(v88);
  v89 = (std::__shared_weak_count *)STACK[0x570];
  if (!STACK[0x570])
  {
LABEL_20:
    v90 = (std::__shared_weak_count *)STACK[0x5A8];
    if (!STACK[0x5A8])
      goto LABEL_21;
    goto LABEL_47;
  }
LABEL_46:
  std::__shared_weak_count::__release_weak(v89);
  v90 = (std::__shared_weak_count *)STACK[0x5A8];
  if (!STACK[0x5A8])
  {
LABEL_21:
    v91 = (std::__shared_weak_count *)STACK[0x5E0];
    if (!STACK[0x5E0])
      goto LABEL_22;
    goto LABEL_48;
  }
LABEL_47:
  std::__shared_weak_count::__release_weak(v90);
  v91 = (std::__shared_weak_count *)STACK[0x5E0];
  if (!STACK[0x5E0])
  {
LABEL_22:
    v92 = (std::__shared_weak_count *)STACK[0x618];
    if (!STACK[0x618])
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_48:
  std::__shared_weak_count::__release_weak(v91);
  v92 = (std::__shared_weak_count *)STACK[0x618];
  if (!STACK[0x618])
  {
LABEL_23:
    v93 = (std::__shared_weak_count *)STACK[0x650];
    if (!STACK[0x650])
      goto LABEL_24;
    goto LABEL_50;
  }
LABEL_49:
  std::__shared_weak_count::__release_weak(v92);
  v93 = (std::__shared_weak_count *)STACK[0x650];
  if (!STACK[0x650])
  {
LABEL_24:
    v94 = (std::__shared_weak_count *)STACK[0x688];
    if (!STACK[0x688])
      goto LABEL_25;
    goto LABEL_51;
  }
LABEL_50:
  std::__shared_weak_count::__release_weak(v93);
  v94 = (std::__shared_weak_count *)STACK[0x688];
  if (!STACK[0x688])
  {
LABEL_25:
    v95 = (std::__shared_weak_count *)STACK[0x6C0];
    if (!STACK[0x6C0])
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_51:
  std::__shared_weak_count::__release_weak(v94);
  v95 = (std::__shared_weak_count *)STACK[0x6C0];
  if (!STACK[0x6C0])
  {
LABEL_27:
    std::__shared_weak_count::__release_weak(a13);
    _Unwind_Resume(a1);
  }
LABEL_26:
  std::__shared_weak_count::__release_weak(v95);
  goto LABEL_27;
}

void sub_1BF5963E4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5963F0(void *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596418(void *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x790]);
    boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot((uint64_t)&STACK[0x710]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596428(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596434(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);

  if (a2)
  {
    __cxa_begin_catch(a1);
    v3 = *(_QWORD *)(v2 + 24);
    if (v3)
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(v2 + 32, v2 + 32, 2);
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    if (*(_QWORD *)v2)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v2, *(_QWORD *)v2);
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
    __cxa_rethrow();
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596498(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5964A4(uint64_t a1, int a2)
{
  boost::signals2::detail::connection_body_base *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;

  if (a2)
  {
    __cxa_end_catch();
    v3 = (unsigned int *)*((_QWORD *)v2 + 5);
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 16))(v3);
        v7 = v3 + 3;
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 24))(v3);
      }
    }
    boost::signals2::detail::connection_body_base::~connection_body_base(v2);
    operator delete(v10);
    JUMPOUT(0x1BF597088);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF59650C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596518(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596524(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF59652CLL);
  JUMPOUT(0x1BF597080);
}

void sub_1BF596538(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF596540);
  JUMPOUT(0x1BF597080);
}

void sub_1BF596550(uint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a2)
  {
    v2 = STACK[0x838];
    if (STACK[0x838])
    {
      if ((uint64_t)(STACK[0x840] - 1) >= 0)
      {
        v3 = v2 + 16 * STACK[0x840];
        do
        {
          v4 = *(unsigned int **)(v3 - 8);
          if (v4)
          {
            v5 = v4 + 2;
            do
            {
              v6 = __ldaxr(v5);
              v7 = v6 - 1;
            }
            while (__stlxr(v7, v5));
            if (!v7)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v8 = v4 + 3;
              do
              {
                v9 = __ldaxr(v8);
                v10 = v9 - 1;
              }
              while (__stlxr(v10, v8));
              if (!v10)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
          }
          v3 -= 16;
        }
        while (v3 > v2);
      }
      if (STACK[0x830] >= 0xB)
        operator delete((void *)STACK[0x838]);
    }
    JUMPOUT(0x1BF597090);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5965F4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596600(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF596610);
  JUMPOUT(0x1BF597080);
}

void sub_1BF596620(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF596628);
  JUMPOUT(0x1BF597080);
}

void sub_1BF596634(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596640(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59664C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596658(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596664(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596670(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59667C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596688(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596694(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5966A0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5966AC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5966B8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5966C4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5966D0(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5966DC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5966E8(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5966F4(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596700(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59670C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596718(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596724(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596730(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF59673C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596748(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596754(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596760(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596774(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF596CB8);
  JUMPOUT(0x1BF597080);
}

void sub_1BF59678C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596798(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF5967A4(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x770]);
    JUMPOUT(0x1BF597058);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5967B8(void *a1, int a2)
{
  if (a2)
  {
    boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::~shared_ptr((uint64_t)&STACK[0x770]);
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock((uint64_t)&STACK[0x790]);
    boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot((uint64_t)&STACK[0x710]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5967E4(uint64_t a1, int a2)
{
  if (a2)
  {
    boost::signals2::detail::garbage_collecting_lock<boost::signals2::mutex>::~garbage_collecting_lock(&STACK[0x790]);
    boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot(&STACK[0x710]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot(&STACK[0x700]);
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5967F0(void *a1, int a2)
{
  unint64_t v3;
  void (*v4)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::~function2((uint64_t *)&STACK[0x790]);
    boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function((uint64_t *)&STACK[0x770]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    v3 = STACK[0x728];
    if (STACK[0x728])
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(&STACK[0x730], &STACK[0x730], 2);
      }
      STACK[0x728] = 0;
    }
    if (STACK[0x710])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x710], STACK[0x710]);
      operator delete((void *)STACK[0x710]);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1BF597018);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596870(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF596878(void *a1, int a2)
{
  unint64_t v3;
  void (*v4)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function1<void,coex::SubId>::~function1((uint64_t *)&STACK[0x790]);
    boost::function<void ()(coex::SubId)>::~function((uint64_t *)&STACK[0x770]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    v3 = STACK[0x728];
    if (STACK[0x728])
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(&STACK[0x730], &STACK[0x730], 2);
      }
      STACK[0x728] = 0;
    }
    if (STACK[0x710])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x710], STACK[0x710]);
      operator delete((void *)STACK[0x710]);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1BF597040);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF5968F8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF596904(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596910(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF596918(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1BF596B2C(void *a1, int a2)
{
  unint64_t v3;
  void (*v4)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::~function2((uint64_t *)&STACK[0x790]);
    boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function((uint64_t *)&STACK[0x770]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    v3 = STACK[0x728];
    if (STACK[0x728])
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(&STACK[0x730], &STACK[0x730], 2);
      }
      STACK[0x728] = 0;
    }
    if (STACK[0x710])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x710], STACK[0x710]);
      operator delete((void *)STACK[0x710]);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1BF597068);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596BAC(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596BB8(void *a1, int a2)
{
  unint64_t v3;
  void (*v4)(unint64_t *, unint64_t *, uint64_t);

  if (a2)
  {
    boost::function0<void>::~function0((uint64_t *)&STACK[0x790]);
    boost::function<void ()(void)>::~function((uint64_t *)&STACK[0x770]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x760]);
    ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x750]);
    v3 = STACK[0x728];
    if (STACK[0x728])
    {
      if ((v3 & 1) == 0)
      {
        v4 = *(void (**)(unint64_t *, unint64_t *, uint64_t))(v3 & 0xFFFFFFFFFFFFFFFELL);
        if (v4)
          v4(&STACK[0x730], &STACK[0x730], 2);
      }
      STACK[0x728] = 0;
    }
    if (STACK[0x710])
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)&STACK[0x710], STACK[0x710]);
      operator delete((void *)STACK[0x710]);
      ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot((uint64_t)&STACK[0x700]);
      __clang_call_terminate(a1);
    }
    JUMPOUT(0x1BF597098);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596C38(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596C48(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF597080);
  JUMPOUT(0x1BF596CB8);
}

void sub_1BF596C54(_Unwind_Exception *a1, int a2)
{
  if (a2)
    JUMPOUT(0x1BF596C58);
  _Unwind_Resume(a1);
}

void sub_1BF596C5C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF596C60);
  __clang_call_terminate(a1);
}

void sub_1BF596C6C(uint64_t a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(v2);
    JUMPOUT(0x1BF596D28);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596C88(uint64_t a1, int a2)
{
  uint64_t *v2;
  _QWORD *v3;

  if (a2)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(v3);
    std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(v2);
    JUMPOUT(0x1BF596DE8);
  }
  JUMPOUT(0x1BF597080);
}

void sub_1BF596CA4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t coex::Module::State::State(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  NSObject *initially_inactive;
  NSObject *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  const void *v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  CommandDriverFactory *v25;
  uint64_t v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  const __CFAllocator *v46;
  CFMutableDictionaryRef Mutable;
  const void *v48;
  CFMutableDictionaryRef v49;
  const void *v50;
  __int128 v52;
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;

  *(_QWORD *)a1 = off_1E7912790;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v54, "com.apple.telephony.abm", "coex.mod");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v9 = dispatch_queue_create_with_target_V2("coex.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v9, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v9);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v9;
  if (v9)
  {
    dispatch_retain(v9);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v9);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E7913420;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v52);
  *(_QWORD *)(a1 + 8) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 56) = *a2;
  v10 = a2[1];
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v56);
  *(_QWORD *)a1 = off_1E7913500;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v54);
  *(_QWORD *)a1 = off_1E7912790;
  *(_QWORD *)(a1 + 104) = *a3;
  v13 = a3[1];
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v53 = 0;
  LOBYTE(v52) = 0;
  coex::XpcClient::create((uint64_t)&v52, (_QWORD *)(a1 + 120));
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 172) = 8;
  v16 = (void *)(a1 + 176);
  v17 = (const void *)*MEMORY[0x1E0CFB988];
  v18 = strlen((const char *)*MEMORY[0x1E0CFB988]);
  if (v18 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v20 = v18 | 7;
    v21 = v20 + 1;
    v16 = operator new(v20 + 1);
    *(_QWORD *)(a1 + 184) = v19;
    *(_QWORD *)(a1 + 192) = v21 | 0x8000000000000000;
    *(_QWORD *)(a1 + 176) = v16;
    goto LABEL_17;
  }
  *(_BYTE *)(a1 + 199) = v18;
  if (v18)
LABEL_17:
    v18 = (size_t)memmove(v16, v17, v19);
  *((_BYTE *)v16 + v19) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 200) = 2;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 224;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 232) = a1 + 224;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = *a4;
  v22 = a4[1];
  *(_QWORD *)(a1 + 272) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  if (capabilities::abs::supportsDesense((capabilities::abs *)v18))
  {
    v25 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v26 = off_1ED70F4D0;
    if (!off_1ED70F4D0)
    {
      CommandDriverFactory::create_default_global(v25);
      v27 = v52;
      v52 = 0uLL;
      v28 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
      off_1ED70F4D0 = v27;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v26 = off_1ED70F4D0;
    }
    v54 = v26;
    v55 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    if (*(&off_1ED70F4D0 + 1))
    {
      v34 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v26 + 144))(&v56, v26);
    v36 = v56;
    v56 = 0uLL;
    v37 = *(std::__shared_weak_count **)(a1 + 216);
    *(_OWORD *)(a1 + 208) = v36;
    if (v37)
    {
      v38 = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v43 = v55;
    if (v55)
    {
      v44 = (unint64_t *)&v55->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
  }
  ctu::LoggerCommonBase::setLogLevel();
  coex::CoexCache::initProperty((coex::CoexCache *)(a1 + 136));
  v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v48 = *(const void **)(a1 + 144);
    *(_QWORD *)(a1 + 144) = Mutable;
    if (v48)
      CFRelease(v48);
  }
  v49 = CFDictionaryCreateMutable(v46, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v49)
  {
    v50 = *(const void **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v49;
    if (v50)
      CFRelease(v50);
  }
  return a1;
}

void sub_1BF597578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  coex::CoexCache *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v18;

  pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
  v18 = *(std::__shared_weak_count **)(v10 + 272);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v16);
  std::list<boost::signals2::connection>::~list(v15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v14);
  if (*(char *)(v10 + 199) < 0)
    operator delete(*a10);
  coex::CoexCache::~CoexCache(v13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable((_QWORD *)v10);
  _Unwind_Resume(a1);
}

const char *coex::Module::State::getName(coex::Module::State *this)
{
  return "coex.mod";
}

void coex::CoexCache::initProperty(coex::CoexCache *this)
{
  const __CFAllocator *v2;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v4;
  const void *v5;
  CFMutableDictionaryRef v6;
  CFMutableDictionaryRef v7;
  const void *v8;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v4 = Mutable;
    v5 = *(const void **)this;
    *(_QWORD *)this = v4;
    if (v5)
      CFRelease(v5);
  }
  v6 = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (v6)
  {
    v7 = v6;
    v8 = (const void *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v7;
    if (v8)
      CFRelease(v8);
  }
}

uint64_t *std::list<boost::signals2::connection>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 3;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

_QWORD *ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7913420;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7913420;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void coex::Module::State::~State(coex::Module::State *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  coex::Module::State *v8;
  uint64_t v9;
  coex::Module::State *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  NSObject *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  uint8_t v27[16];

  *(_QWORD *)this = off_1E7912790;
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v27, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v4)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!*((_QWORD *)this + 30))
      goto LABEL_19;
  }
  else
  {
LABEL_9:
    if (!*((_QWORD *)this + 30))
      goto LABEL_19;
  }
  v7 = *((_QWORD *)this + 28);
  v8 = (coex::Module::State *)*((_QWORD *)this + 29);
  v9 = *(_QWORD *)v8;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v7 + 8);
  **(_QWORD **)(v7 + 8) = v9;
  *((_QWORD *)this + 30) = 0;
  if (v8 != (coex::Module::State *)((char *)this + 224))
  {
    do
    {
      v10 = (coex::Module::State *)*((_QWORD *)v8 + 1);
      v11 = (unsigned int *)*((_QWORD *)v8 + 3);
      if (v11)
      {
        v12 = v11 + 3;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 24))(v11);
      }
      operator delete(v8);
      v8 = v10;
    }
    while (v10 != (coex::Module::State *)((char *)this + 224));
  }
LABEL_19:
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((*((char *)this + 199) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_24;
    }
  }
  if (*((char *)this + 199) < 0)
LABEL_24:
    operator delete(*((void **)this + 22));
LABEL_25:
  coex::CoexCache::~CoexCache((coex::Module::State *)((char *)this + 136));
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_QWORD *)this = off_1E7913420;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v24 = *((_QWORD *)this + 12);
  if (v24)
    dispatch_release(v24);
  v25 = *((_QWORD *)this + 11);
  if (v25)
    dispatch_release(v25);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
}

{
  void *v1;

  coex::Module::State::~State(this);
  operator delete(v1);
}

void ___ZN4coex6Module5State4initEv_block_invoke(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v5 = a1[4];
  v26 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (v26 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = (_QWORD *)a1[5];
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v7 = 0;
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  v25 = std::__shared_weak_count::lock(v8);
  if (!v25)
    goto LABEL_22;
  v9 = *(_QWORD *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) & 1) == 0)
  {
    v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    v14 = operator new(0x10uLL);
    *(_QWORD *)v14 = v5;
    v14[2] = a3;
    v15 = v7[11];
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_18:
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v22 = v26;
      if (!v26)
        return;
      goto LABEL_23;
    }
  }
LABEL_22:
  v22 = v26;
  if (!v26)
    return;
LABEL_23:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1BF597C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__18weak_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_16(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v5 = a1[4];
  v26 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (v26 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = (_QWORD *)a1[5];
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v7 = 0;
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  v25 = std::__shared_weak_count::lock(v8);
  if (!v25)
    goto LABEL_22;
  v9 = *(_QWORD *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) & 1) == 0)
  {
    v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    v14 = operator new(0x10uLL);
    *(_QWORD *)v14 = v5;
    v14[2] = a3;
    v15 = v7[11];
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_18:
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v22 = v26;
      if (!v26)
        return;
      goto LABEL_23;
    }
  }
LABEL_22:
  v22 = v26;
  if (!v26)
    return;
LABEL_23:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1BF597E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_18(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF5980A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_20(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF5982EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_22(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF598530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_24(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb4_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF598774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_26(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb5_E3__6EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF5989B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_28(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb6_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF598BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_30(_QWORD *a1, xpc_object_t *a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  xpc_object_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  _QWORD *v18;
  xpc_object_t v19;
  NSObject *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;

  v6 = a1[4];
  v31 = 0;
  v7 = (std::__shared_weak_count *)a1[6];
  if (v7 && (v31 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (_QWORD *)a1[5];
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v8 = 0;
    v9 = *(std::__shared_weak_count **)(v6 + 272);
    if (!v9)
      goto LABEL_25;
  }
  v10 = std::__shared_weak_count::lock(v9);
  v30 = v10;
  if (!v10)
    goto LABEL_25;
  v11 = v10;
  v12 = *(_QWORD *)(v6 + 264);
  if (!v8 || !v12 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(v12) & 1) != 0)
    goto LABEL_22;
  v13 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
LABEL_33:
      std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  else
  {
    v13 = xpc_null_create();
    v14 = (std::__shared_weak_count *)v8[10];
    if (!v14)
      goto LABEL_33;
  }
  v15 = v8[9];
  v16 = std::__shared_weak_count::lock(v14);
  if (!v16)
    goto LABEL_33;
  v17 = v16;
  v18 = operator new(0x18uLL);
  *v18 = v6;
  v18[1] = v13;
  v19 = xpc_null_create();
  *((_DWORD *)v18 + 4) = a3;
  v20 = v8[11];
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v22 = __ldxr(p_shared_owners);
  while (__stxr(v22 + 1, p_shared_owners));
  v23 = operator new(0x18uLL);
  *v23 = v18;
  v23[1] = v15;
  v23[2] = v17;
  dispatch_async_f(v20, v23, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb7_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  xpc_release(v19);
  v11 = v30;
  if (v30)
  {
LABEL_22:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      v27 = v31;
      if (!v31)
        return;
      goto LABEL_26;
    }
  }
LABEL_25:
  v27 = v31;
  if (!v31)
    return;
LABEL_26:
  v28 = (unint64_t *)&v27->__shared_owners_;
  do
    v29 = __ldaxr(v28);
  while (__stlxr(v29 - 1, v28));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
}

void sub_1BF598E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_32(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _DWORD *v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  v5 = a1[4];
  v26 = 0;
  v6 = (std::__shared_weak_count *)a1[6];
  if (v6 && (v26 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = (_QWORD *)a1[5];
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  else
  {
    v7 = 0;
    v25 = 0;
    v8 = *(std::__shared_weak_count **)(v5 + 272);
    if (!v8)
      goto LABEL_18;
  }
  v25 = std::__shared_weak_count::lock(v8);
  if (!v25)
    goto LABEL_22;
  v9 = *(_QWORD *)(v5 + 264);
  if (v7 && v9 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 80))(v9) & 1) == 0)
  {
    v10 = (std::__shared_weak_count *)v7[10];
    if (!v10 || (v11 = v7[9], (v12 = std::__shared_weak_count::lock(v10)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    v14 = operator new(0x10uLL);
    *(_QWORD *)v14 = v5;
    v14[2] = a3;
    v15 = v7[11];
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = operator new(0x18uLL);
    *v18 = v14;
    v18[1] = v11;
    v18[2] = v13;
    dispatch_async_f(v15, v18, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb8_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_18:
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      v22 = v26;
      if (!v26)
        return;
      goto LABEL_23;
    }
  }
LABEL_22:
  v22 = v26;
  if (!v26)
    return;
LABEL_23:
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_1BF599038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_34(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb9_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_36(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb10_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_38(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb11_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_40(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb12_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_42(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb13_E4__14EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_44(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb14_E4__15EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_46(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb15_E4__16EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_48(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb16_E4__17EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_50(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb17_E4__18EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_52(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb18_E4__19EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_54(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb19_E4__20EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_56(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb20_E4__21EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_58(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb21_E4__22EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_60(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb22_E4__23EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void ___ZN4coex6Module5State4initEv_block_invoke_62(_QWORD *a1, xpc_object_t *a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  xpc_object_t v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = (_QWORD *)a1[5];
      if (v10)
      {
        v11 = *a2;
        if (*a2)
        {
          xpc_retain(*a2);
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
LABEL_21:
            std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        else
        {
          v11 = xpc_null_create();
          v12 = (std::__shared_weak_count *)v10[10];
          if (!v12)
            goto LABEL_21;
        }
        v13 = v10[9];
        v14 = std::__shared_weak_count::lock(v12);
        if (!v14)
          goto LABEL_21;
        v15 = v14;
        v16 = operator new(0x18uLL);
        *v16 = v7;
        v16[1] = v11;
        v17 = xpc_null_create();
        *((_DWORD *)v16 + 4) = a3;
        v18 = v10[11];
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        v21 = operator new(0x18uLL);
        *v21 = v16;
        v21[1] = v13;
        v21[2] = v15;
        dispatch_async_f(v18, v21, (dispatch_function_t)_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb23_E4__24EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_);
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        xpc_release(v17);
      }
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void coex::Module::State::handleCommandDriverStateUpdate_sync(uint64_t a1, const __CFDictionary **a2, uint64_t a3)
{
  const __CFDictionary *v4;
  uint64_t (*v5)(uint64_t);
  ctu::cf::map_adapter *v7;
  uint64_t v8;
  const void *v9;
  uint64_t (*v10)(uint64_t);
  const __CFDictionary *v11;
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  CFAllocatorRef *v14;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  const void *v39;
  const void *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  const void *v47;
  const void *v48;
  const void *v49;
  const void *v50;
  const void *v51;
  const void *v52;
  uint64_t v53;
  void *v54;
  const __CFDictionary *v55;
  uint64_t (*v56)(uint64_t);
  CFMutableDictionaryRef v57;
  __CFDictionary *v58;
  const void *v59;
  const void *v60;
  const void *v61;
  uint64_t v62;
  void *v63;
  const __CFString *v64;
  const __CFDictionary *v65;
  uint64_t (*v66)(uint64_t);
  const void **v67;
  CFMutableDictionaryRef v68;
  __CFDictionary *v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  const void *v74;
  const void *v75;
  const void *v76;
  const void *v77;
  const void *v78;
  uint64_t v79;
  void *v80;
  const __CFDictionary *v81;
  uint64_t (*v82)(uint64_t);
  CFMutableDictionaryRef v83;
  __CFDictionary *v84;
  const void *v85;
  const void *v86;
  const void *v87;
  const void *v88;
  const void *v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  const void *v95;
  const void *v96;
  const void *v97;
  const void *v98;
  const void *v99;
  uint64_t v100;
  void *v101;
  const __CFDictionary *v102;
  CFAllocatorRef *v103;
  uint64_t (*v104)(uint64_t);
  CFMutableDictionaryRef v105;
  __CFDictionary *v106;
  const void *v107;
  const void *v108;
  const void *v109;
  const void *v110;
  const void *v111;
  const void *v112;
  uint64_t v113;
  void *v114;
  const __CFDictionary *v115;
  uint64_t (*v116)(uint64_t);
  CFMutableDictionaryRef v117;
  __CFDictionary *v118;
  const void *v119;
  const void *v120;
  const void *v121;
  const void *v122;
  const void *v123;
  const void *v124;
  const void *v125;
  const void *v126;
  const void *v127;
  uint64_t v128;
  void *v129;
  const void *v130;
  uint64_t (*v131)(uint64_t);
  uint64_t v132;
  const void *v133;
  CFMutableDictionaryRef v134;
  __CFDictionary *v135;
  const void *v136;
  const void *v137;
  const void *v138;
  const void *v139;
  const void *v140;
  const void *v141;
  const void *v142;
  const void *v143;
  const void *v144;
  const void *v145;
  const void *v146;
  const void *v147;
  const void *v148;
  const void *v149;
  const void *v150;
  const void *v151;
  const void *v152;
  const void *v153;
  const void *v154;
  const void *v155;
  const void *v156;
  const void *v157;
  const void *v158;
  const void *v159;
  const void *v160;
  const void *v161;
  const void *v162;
  const void *v163;
  const void *v164;
  const void *v165;
  const void *v166;
  const void *v167;
  const void *v168;
  const void *v169;
  const void *v170;
  const void *v171;
  uint64_t (*v172)(uint64_t);
  uint64_t v173;
  void *v174;
  CFMutableDictionaryRef v175;
  __CFDictionary *v176;
  const void *v177;
  const void *v178;
  const void *v179;
  const void *v180;
  void *v181;
  uint64_t (*v182)(uint64_t);
  const __CFAllocator *allocator;
  _BOOL4 v184;
  uint64_t (**v185)(_QWORD, const void *);
  unint64_t v186;
  uint64_t v187;
  uint8_t buf[32];

  v4 = *a2;
  if (v4)
    v5 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  else
    v5 = 0;
  if (v5)
  {
    memset(buf, 170, 16);
    v7 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v4);
    v187 = 0;
    v8 = ctu::cf::map_adapter::copyCFDictionaryRef(v7, (const __CFString *)*MEMORY[0x1E0DDF338]);
    v9 = (const void *)v8;
    v187 = v8;
    if (v8)
      v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v10 = 0;
    if (v10)
    {
      v11 = (const __CFDictionary *)v8;
    }
    else
    {
      v11 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF3A0]);
      v187 = (uint64_t)v11;
      if (v9)
        CFRelease(v9);
    }
    if (v11)
      v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v13 = 0;
    v14 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    v182 = v13;
    if (v13)
    {
      v185 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v186 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v185, v11);
      Mutable = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v16 = Mutable;
      if (Mutable)
        CFRetain(Mutable);
      v17 = (const void *)*MEMORY[0x1E0DDF3F8];
      v18 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF3F8]);
      v19 = v18;
      if (v18)
      {
        CFRelease(v18);
        ctu::cf::update<__CFString const*,void const*>(v16, v17, v19);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v20 = (const void *)*MEMORY[0x1E0DDF3E0];
      v21 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF3E0]);
      v22 = v21;
      if (v21)
      {
        CFRelease(v21);
        ctu::cf::update<__CFString const*,void const*>(v16, v20, v22);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v23 = (const void *)*MEMORY[0x1E0DDF300];
      v24 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF300]);
      v25 = v24;
      if (v24)
      {
        CFRelease(v24);
        ctu::cf::update<__CFString const*,void const*>(v16, v23, v25);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v26 = (const void *)*MEMORY[0x1E0DDF4E0];
      v27 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF4E0]);
      v28 = v27;
      if (v27)
      {
        CFRelease(v27);
        ctu::cf::update<__CFString const*,void const*>(v16, v26, v28);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v29 = (const void *)*MEMORY[0x1E0DDF5E8];
      v30 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF5E8]);
      v31 = v30;
      if (v30)
      {
        CFRelease(v30);
        ctu::cf::update<__CFString const*,void const*>(v16, v29, v31);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v32 = (const void *)*MEMORY[0x1E0DDF4C0];
      v33 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF4C0]);
      v34 = v33;
      if (v33)
      {
        CFRelease(v33);
        ctu::cf::update<__CFString const*,void const*>(v16, v32, v34);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v35 = (const void *)*MEMORY[0x1E0DDF520];
      v36 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF520]);
      v37 = v36;
      if (v36)
      {
        CFRelease(v36);
        ctu::cf::update<__CFString const*,void const*>(v16, v35, v37);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v38 = (const void *)*MEMORY[0x1E0DDF4D0];
      v39 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF4D0]);
      v40 = v39;
      if (v39)
      {
        CFRelease(v39);
        ctu::cf::update<__CFString const*,void const*>(v16, v38, v40);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v41 = (const void *)*MEMORY[0x1E0DDF578];
      v42 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF578]);
      v43 = v42;
      if (v42)
      {
        CFRelease(v42);
        ctu::cf::update<__CFString const*,void const*>(v16, v41, v43);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v44 = (const void *)*MEMORY[0x1E0DDF598];
      v45 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF598]);
      v46 = v45;
      if (v45)
      {
        CFRelease(v45);
        ctu::cf::update<__CFString const*,void const*>(v16, v44, v46);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v47 = (const void *)*MEMORY[0x1E0DDF4F0];
      v48 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF4F0]);
      v49 = v48;
      if (v48)
      {
        CFRelease(v48);
        ctu::cf::update<__CFString const*,void const*>(v16, v47, v49);
      }
      if (v16)
      {
        CFRelease(v16);
        CFRetain(v16);
      }
      v50 = (const void *)*MEMORY[0x1E0DDF5A0];
      v51 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF5A0]);
      v52 = v51;
      if (v51)
      {
        CFRelease(v51);
        ctu::cf::update<__CFString const*,void const*>(v16, v50, v52);
      }
      if (v16)
        CFRelease(v16);
      v53 = 152;
      if (!(_DWORD)a3)
        v53 = 136;
      v54 = *(void **)(a1 + v53);
      if (v54)
        CFRetain(v54);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v54, (CFTypeRef)coex::kKeyWWANState, v16);
      if (v54)
        CFRelease(v54);
      if (v16)
        CFRelease(v16);
      MEMORY[0x1C3B8B8B4](&v185);
    }
    v55 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF390]);
    v187 = (uint64_t)v55;
    if (v11)
      CFRelease(v11);
    if (v55)
      v56 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v56 = 0;
    v184 = v56 != 0;
    if (v56)
    {
      v185 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v186 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v185, v55);
      v57 = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v58 = v57;
      if (v57)
        CFRetain(v57);
      v59 = (const void *)*MEMORY[0x1E0DDF6F8];
      v60 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF6F8]);
      v61 = v60;
      if (v60)
      {
        CFRelease(v60);
        ctu::cf::update<__CFString const*,void const*>(v58, v59, v61);
      }
      if (v58)
        CFRelease(v58);
      v62 = 152;
      if (!(_DWORD)a3)
        v62 = 136;
      v63 = *(void **)(a1 + v62);
      if (v63)
        CFRetain(v63);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v63, (CFTypeRef)coex::kKeyLinkQuality, v58);
      if (v63)
        CFRelease(v63);
      if (v58)
        CFRelease(v58);
      MEMORY[0x1C3B8B8B4](&v185);
    }
    v64 = (const __CFString *)*MEMORY[0x1E0DDF3E8];
    v65 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF3E8]);
    v187 = (uint64_t)v65;
    if (v55)
      CFRelease(v55);
    if (v65)
      v66 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v66 = 0;
    v67 = (const void **)MEMORY[0x1E0DDF328];
    if (v66)
    {
      v185 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v186 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v185, v65);
      v68 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v69 = v68;
      if (v68)
        CFRetain(v68);
      v70 = (const void *)*MEMORY[0x1E0DDF2D0];
      v71 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF2D0]);
      v72 = v71;
      if (v71)
      {
        CFRelease(v71);
        ctu::cf::update<__CFString const*,void const*>(v69, v70, v72);
      }
      if (v69)
      {
        CFRelease(v69);
        CFRetain(v69);
      }
      v73 = *v67;
      v74 = (const void *)(*v185)(&v185, *v67);
      v75 = v74;
      if (v74)
      {
        CFRelease(v74);
        ctu::cf::update<__CFString const*,void const*>(v69, v73, v75);
      }
      if (v69)
      {
        CFRelease(v69);
        CFRetain(v69);
      }
      v76 = (const void *)*MEMORY[0x1E0DDF358];
      v77 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF358]);
      v78 = v77;
      if (v77)
      {
        CFRelease(v77);
        ctu::cf::update<__CFString const*,void const*>(v69, v76, v78);
      }
      if (v69)
        CFRelease(v69);
      v79 = 152;
      if (!(_DWORD)a3)
        v79 = 136;
      v80 = *(void **)(a1 + v79);
      if (v80)
        CFRetain(v80);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v80, (CFTypeRef)coex::kKeyWLANScanState, v69);
      if (v80)
        CFRelease(v80);
      if (v69)
        CFRelease(v69);
      MEMORY[0x1C3B8B8B4](&v185);
    }
    v81 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, v64);
    v187 = (uint64_t)v81;
    if (v65)
      CFRelease(v65);
    if (v81)
      v82 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v82 = 0;
    if (v82)
    {
      v185 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v186 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v185, v81);
      v83 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v84 = v83;
      if (v83)
        CFRetain(v83);
      v85 = (const void *)*MEMORY[0x1E0DDF4A0];
      v86 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF4A0]);
      v87 = v86;
      if (v86)
      {
        CFRelease(v86);
        ctu::cf::update<__CFString const*,void const*>(v84, v85, v87);
      }
      if (v84)
      {
        CFRelease(v84);
        CFRetain(v84);
      }
      v88 = *v67;
      v89 = (const void *)(*v185)(&v185, *v67);
      v90 = v89;
      if (v89)
      {
        CFRelease(v89);
        ctu::cf::update<__CFString const*,void const*>(v84, v88, v90);
      }
      if (v84)
      {
        CFRelease(v84);
        CFRetain(v84);
      }
      v91 = (const void *)*MEMORY[0x1E0DDF468];
      v92 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF468]);
      v93 = v92;
      if (v92)
      {
        CFRelease(v92);
        ctu::cf::update<__CFString const*,void const*>(v84, v91, v93);
      }
      if (v84)
      {
        CFRelease(v84);
        CFRetain(v84);
      }
      v94 = (const void *)*MEMORY[0x1E0DDF470];
      v95 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF470]);
      v96 = v95;
      if (v95)
      {
        CFRelease(v95);
        ctu::cf::update<__CFString const*,void const*>(v84, v94, v96);
      }
      if (v84)
      {
        CFRelease(v84);
        CFRetain(v84);
      }
      v97 = (const void *)*MEMORY[0x1E0DDF420];
      v98 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF420]);
      v99 = v98;
      if (v98)
      {
        CFRelease(v98);
        ctu::cf::update<__CFString const*,void const*>(v84, v97, v99);
      }
      if (v84)
        CFRelease(v84);
      v100 = 152;
      if (!(_DWORD)a3)
        v100 = 136;
      v101 = *(void **)(a1 + v100);
      if (v101)
        CFRetain(v101);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v101, (CFTypeRef)coex::kKeyWLANConnState, v84);
      if (v101)
        CFRelease(v101);
      if (v84)
        CFRelease(v84);
      MEMORY[0x1C3B8B8B4](&v185);
    }
    v102 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF398]);
    v187 = (uint64_t)v102;
    v103 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (v81)
      CFRelease(v81);
    if (v102)
      v104 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v104 = 0;
    if (v104)
    {
      v185 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v186 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v185, v102);
      v105 = CFDictionaryCreateMutable(*v103, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v106 = v105;
      if (v105)
        CFRetain(v105);
      v107 = (const void *)*MEMORY[0x1E0DDF2A8];
      v108 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF2A8]);
      v109 = v108;
      if (v108)
      {
        CFRelease(v108);
        ctu::cf::update<__CFString const*,void const*>(v106, v107, v109);
      }
      if (v106)
      {
        CFRelease(v106);
        CFRetain(v106);
      }
      v110 = (const void *)*MEMORY[0x1E0DDF590];
      v111 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF590]);
      v112 = v111;
      if (v111)
      {
        CFRelease(v111);
        ctu::cf::update<__CFString const*,void const*>(v106, v110, v112);
      }
      if (v106)
        CFRelease(v106);
      v113 = 152;
      if (!(_DWORD)a3)
        v113 = 136;
      v114 = *(void **)(a1 + v113);
      if (v114)
        CFRetain(v114);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v114, (CFTypeRef)coex::kKeyLinkQuality, v106);
      if (v114)
        CFRelease(v114);
      if (v106)
        CFRelease(v106);
      MEMORY[0x1C3B8B8B4](&v185);
      v184 = 1;
    }
    v115 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF450]);
    v187 = (uint64_t)v115;
    if (v102)
      CFRelease(v102);
    if (v115)
      v116 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v116 = 0;
    if (v116)
    {
      v185 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v186 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v185, v115);
      v117 = CFDictionaryCreateMutable(*v103, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v118 = v117;
      if (v117)
        CFRetain(v117);
      v119 = (const void *)*MEMORY[0x1E0DDF6B8];
      v120 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF6B8]);
      v121 = v120;
      if (v120)
      {
        CFRelease(v120);
        ctu::cf::update<__CFString const*,void const*>(v118, v119, v121);
      }
      if (v118)
      {
        CFRelease(v118);
        CFRetain(v118);
      }
      v122 = (const void *)*MEMORY[0x1E0DDF528];
      v123 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF528]);
      v124 = v123;
      if (v123)
      {
        CFRelease(v123);
        ctu::cf::update<__CFString const*,void const*>(v118, v122, v124);
      }
      if (v118)
      {
        CFRelease(v118);
        CFRetain(v118);
      }
      v125 = (const void *)*MEMORY[0x1E0DDF580];
      v126 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF580]);
      v127 = v126;
      if (v126)
      {
        CFRelease(v126);
        ctu::cf::update<__CFString const*,void const*>(v118, v125, v127);
      }
      if (v118)
        CFRelease(v118);
      v128 = 152;
      if (!(_DWORD)a3)
        v128 = 136;
      v129 = *(void **)(a1 + v128);
      if (v129)
        CFRetain(v129);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v129, (CFTypeRef)coex::kKeyFailCondition, v118);
      if (v129)
        CFRelease(v129);
      if (v118)
        CFRelease(v118);
      MEMORY[0x1C3B8B8B4](&v185);
    }
    v130 = (const void *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF2C8]);
    v187 = (uint64_t)v130;
    if (v115)
      CFRelease(v115);
    if (v130)
      v131 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v131 = 0;
    if (v131)
    {
      v185 = (uint64_t (**)(_QWORD, const void *))0xAAAAAAAAAAAAAAAALL;
      v186 = 0xAAAAAAAAAAAAAAAALL;
      v132 = 160;
      if (!(_DWORD)a3)
        v132 = 144;
      v133 = *(const void **)(a1 + v132);
      if (v133)
        CFRetain(v133);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v185, (const __CFDictionary *)v133);
      if (v133)
        CFRelease(v133);
      allocator = *v103;
      v134 = CFDictionaryCreateMutable(*v103, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v135 = v134;
      if (v134)
        CFRetain(v134);
      v136 = (const void *)*MEMORY[0x1E0DDF210];
      v137 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF210]);
      v138 = v137;
      if (v137)
      {
        CFRelease(v137);
        ctu::cf::update<__CFString const*,void const*>(v135, v136, v138);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v139 = (const void *)*MEMORY[0x1E0DDF360];
      v140 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF360]);
      v141 = v140;
      if (v140)
      {
        CFRelease(v140);
        ctu::cf::update<__CFString const*,void const*>(v135, v139, v141);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v142 = (const void *)*MEMORY[0x1E0DDF6E0];
      v143 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF6E0]);
      v144 = v143;
      if (v143)
      {
        CFRelease(v143);
        ctu::cf::update<__CFString const*,void const*>(v135, v142, v144);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v145 = (const void *)*MEMORY[0x1E0DDF508];
      v146 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF508]);
      v147 = v146;
      if (v146)
      {
        CFRelease(v146);
        ctu::cf::update<__CFString const*,void const*>(v135, v145, v147);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v148 = (const void *)*MEMORY[0x1E0DDF5B0];
      v149 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF5B0]);
      v150 = v149;
      if (v149)
      {
        CFRelease(v149);
        ctu::cf::update<__CFString const*,void const*>(v135, v148, v150);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v151 = (const void *)*MEMORY[0x1E0DDF6A8];
      v152 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF6A8]);
      v153 = v152;
      if (v152)
      {
        CFRelease(v152);
        ctu::cf::update<__CFString const*,void const*>(v135, v151, v153);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v154 = (const void *)*MEMORY[0x1E0DDF5D8];
      v155 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF5D8]);
      v156 = v155;
      if (v155)
      {
        CFRelease(v155);
        ctu::cf::update<__CFString const*,void const*>(v135, v154, v156);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v157 = (const void *)*MEMORY[0x1E0DDF2E8];
      v158 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF2E8]);
      v159 = v158;
      if (v158)
      {
        CFRelease(v158);
        ctu::cf::update<__CFString const*,void const*>(v135, v157, v159);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v160 = (const void *)*MEMORY[0x1E0DDF320];
      v161 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF320]);
      v162 = v161;
      if (v161)
      {
        CFRelease(v161);
        ctu::cf::update<__CFString const*,void const*>(v135, v160, v162);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v163 = (const void *)*MEMORY[0x1E0DDF248];
      v164 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF248]);
      v165 = v164;
      if (v164)
      {
        CFRelease(v164);
        ctu::cf::update<__CFString const*,void const*>(v135, v163, v165);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v166 = (const void *)*MEMORY[0x1E0DDF6E8];
      v167 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF6E8]);
      v168 = v167;
      if (v167)
      {
        CFRelease(v167);
        ctu::cf::update<__CFString const*,void const*>(v135, v166, v168);
      }
      if (v135)
      {
        CFRelease(v135);
        CFRetain(v135);
      }
      v169 = (const void *)*MEMORY[0x1E0DDF648];
      v170 = (const void *)(*v185)(&v185, (const void *)*MEMORY[0x1E0DDF648]);
      v171 = v170;
      if (v170)
      {
        CFRelease(v170);
        ctu::cf::update<__CFString const*,void const*>(v135, v169, v171);
      }
      v172 = v116;
      if (v135)
        CFRelease(v135);
      if ((_DWORD)a3)
        v173 = 152;
      else
        v173 = 136;
      v174 = *(void **)(a1 + v173);
      if (v174)
        CFRetain(v174);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v174, (CFTypeRef)coex::kKeyPolicy, v135);
      if (v174)
        CFRelease(v174);
      v175 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v176 = v175;
      if (v175)
        CFRetain(v175);
      v177 = (const void *)(*v185)(&v185, v142);
      v178 = v177;
      if (v177)
      {
        CFRelease(v177);
        ctu::cf::update<__CFString const*,void const*>(v176, v142, v178);
      }
      if (v176)
      {
        CFRelease(v176);
        CFRetain(v176);
      }
      v179 = (const void *)(*v185)(&v185, v145);
      v180 = v179;
      if (v179)
      {
        CFRelease(v179);
        ctu::cf::update<__CFString const*,void const*>(v176, v145, v180);
      }
      if (v176)
        CFRelease(v176);
      v181 = *(void **)(a1 + v173);
      if (v181)
        CFRetain(v181);
      ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v181, (CFTypeRef)coex::kKeyFailCondition, v176);
      v116 = v172;
      if (v181)
        CFRelease(v181);
      if (v176)
        CFRelease(v176);
      if (v135)
        CFRelease(v135);
      MEMORY[0x1C3B8B8B4](&v185);
    }
    if (v182)
      coex::Module::State::sendWWANState_sync(a1, a3);
    if (v184)
      coex::Module::State::sendLinkQuality_sync(a1, a3);
    if (v116)
      coex::Module::State::sendFailCondition_sync(a1, a3);
    if (v130)
      CFRelease(v130);
    MEMORY[0x1C3B8B8B4](buf);
  }
  else
  {
    v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D Empty update passed; ignoring it", buf, 2u);
    }
  }
}

void sub_1BF59BDEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 120));
  MEMORY[0x1C3B8B8B4](v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t coex::Module::State::handleDesenseCommandDriverStarted_sync(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 208);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

void coex::Module::State::handleDesenseFrequencyReport_sync(uint64_t a1, _QWORD *a2, int a3)
{
  xpc_object_t v6;
  xpc_object_t v7;
  uint64_t v8;
  NSObject *v9;
  xpc_object_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  _QWORD *i;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  _QWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  const char *v29;
  size_t v30;
  size_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  size_t v35;
  size_t v36;
  __int128 *p_dst;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint8_t *v41;
  uint8_t *v42;
  int v43;
  void *v44;
  const char *v45;
  int v46;
  const char *v47;
  size_t v48;
  size_t v49;
  void *v50;
  void *v51;
  xpc_object_t v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  size_t v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint8_t *v61;
  uint8_t *v62;
  int v63;
  void *v64;
  const char *v65;
  int v66;
  const char *v67;
  size_t v68;
  size_t v69;
  void *v70;
  xpc_object_t v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  size_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint8_t *v80;
  uint8_t *v81;
  int v82;
  void *v83;
  const char *v84;
  int v85;
  const char *v86;
  size_t v87;
  size_t v88;
  void *v89;
  xpc_object_t v90;
  xpc_object_t v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  size_t v95;
  __int128 *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint8_t *v100;
  uint8_t *v101;
  int v102;
  void *v103;
  const char *v104;
  int v105;
  const char *v106;
  size_t v107;
  size_t v108;
  void *v109;
  xpc_object_t v110;
  xpc_object_t v111;
  uint64_t v112;
  uint64_t v113;
  size_t v114;
  size_t v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint8_t *v120;
  uint8_t *v121;
  int v122;
  void *v123;
  const char *v124;
  int v125;
  const char *v126;
  size_t v127;
  size_t v128;
  void *v129;
  xpc_object_t v130;
  xpc_object_t v131;
  uint64_t v132;
  uint64_t v133;
  size_t v134;
  size_t v135;
  __int128 *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint8_t *v140;
  uint8_t *v141;
  int v142;
  void *v143;
  const char *v144;
  int v145;
  xpc_object_t v146;
  xpc_object_t v147;
  xpc_object_t v148;
  xpc_object_t v149;
  _QWORD *v150;
  _QWORD *v151;
  BOOL v152;
  NSObject *v153;
  uint8_t *v154;
  uint64_t v155;
  xpc_object_t v156;
  int v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  char *v162;
  char *v163;
  char *__s;
  xpc_object_t object;
  _OWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  xpc_object_t xdict;
  uint8_t buf[8];
  uint64_t v171;
  int64_t v172;
  void *v173;
  uint64_t v174;
  xpc_object_t v175;
  int v176;
  int v177;
  __int128 __dst;
  int64_t v179;
  uint64_t v180;

  v180 = *MEMORY[0x1E0C80C00];
  if (a2[2])
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    v7 = v6;
    v8 = MEMORY[0x1E0C812F8];
    v158 = a1;
    if (v6)
    {
      xdict = v6;
    }
    else
    {
      v7 = xpc_null_create();
      xdict = v7;
      if (!v7)
      {
        v10 = xpc_null_create();
        v7 = 0;
        goto LABEL_11;
      }
    }
    if (MEMORY[0x1C3B8CD78](v7) == v8)
    {
      xpc_retain(v7);
      goto LABEL_12;
    }
    v10 = xpc_null_create();
LABEL_11:
    xdict = v10;
LABEL_12:
    v157 = a3;
    xpc_release(v7);
    v11 = (_QWORD *)*a2;
    if ((_QWORD *)*a2 != a2 + 1)
    {
      __s = (char *)*MEMORY[0x1E0DDFC38];
      v163 = (char *)*MEMORY[0x1E0DDFC30];
      v161 = (char *)*MEMORY[0x1E0DDFC50];
      v162 = (char *)*MEMORY[0x1E0DDFC40];
      v159 = (char *)*MEMORY[0x1E0DDFC48];
      v160 = (char *)*MEMORY[0x1E0DDFC28];
      while (1)
      {
        v166 = &v166;
        v167 = &v166;
        v168 = 0;
        v12 = v11[6];
        if ((_QWORD *)v12 != v11 + 5)
        {
          v13 = &v166;
          v14 = 1;
          do
          {
            v15 = operator new(0x20uLL);
            v15[1] = *(_OWORD *)(v12 + 16);
            *(_QWORD *)v15 = v13;
            *((_QWORD *)v15 + 1) = &v166;
            v13[1] = v15;
            v166 = v15;
            v168 = v14;
            v12 = *(_QWORD *)(v12 + 8);
            ++v14;
            v13 = v15;
          }
          while ((_QWORD *)v12 != v11 + 5);
        }
        v16 = xpc_array_create(0, 0);
        if (v16 || (v16 = xpc_null_create()) != 0)
        {
          if (MEMORY[0x1C3B8CD78](v16) == MEMORY[0x1E0C812C8])
          {
            xpc_retain(v16);
            v17 = v16;
          }
          else
          {
            v17 = xpc_null_create();
          }
        }
        else
        {
          v17 = xpc_null_create();
          v16 = 0;
        }
        xpc_release(v16);
        for (i = v167; i != &v166; i = (_QWORD *)i[1])
        {
          v19 = xpc_dictionary_create(0, 0, 0);
          if (v19 || (v19 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8CD78](v19) == v8)
            {
              xpc_retain(v19);
              v20 = v19;
            }
            else
            {
              v20 = xpc_null_create();
            }
          }
          else
          {
            v20 = xpc_null_create();
            v19 = 0;
          }
          xpc_release(v19);
          v21 = xpc_uint64_create(i[2]);
          if (!v21)
            v21 = xpc_null_create();
          xpc_dictionary_set_value(v20, "kWCMCellular_DesenseNetworkConfiguration_CenterFreq", v21);
          v22 = xpc_null_create();
          xpc_release(v21);
          xpc_release(v22);
          v23 = xpc_int64_create(*((unsigned int *)i + 6));
          if (!v23)
            v23 = xpc_null_create();
          xpc_dictionary_set_value(v20, "kWCMCellular_DesenseNetworkConfiguration_Bandwidth", v23);
          v24 = xpc_null_create();
          xpc_release(v23);
          xpc_release(v24);
          xpc_array_append_value(v17, v20);
          xpc_release(v20);
        }
        if (MEMORY[0x1C3B8CD78](v17) == MEMORY[0x1E0C812C8] && xpc_array_get_count(v17))
        {
          object = v17;
          v17 = xpc_null_create();
        }
        else
        {
          object = xpc_null_create();
        }
        xpc_release(v17);
        if (v168)
        {
          v26 = v166;
          v25 = v167;
          v27 = *v167;
          *(_QWORD *)(v27 + 8) = *((_QWORD *)v166 + 1);
          **((_QWORD **)v26 + 1) = v27;
          v168 = 0;
          if (v25 != &v166)
          {
            do
            {
              v28 = (_QWORD *)v25[1];
              operator delete(v25);
              v25 = v28;
            }
            while (v28 != &v166);
          }
        }
        v29 = (const char *)v11[4];
        v30 = strlen(v29);
        if (v30 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v31 = v30;
        if (v30 >= 0x17)
          break;
        HIBYTE(v172) = v30;
        v32 = buf;
        if (v30)
          goto LABEL_50;
LABEL_51:
        v32[v31] = 0;
        v35 = strlen(__s);
        if (v35 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v36 = v35;
        if (v35 >= 0x17)
        {
          v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v35 | 7) != 0x17)
            v38 = v35 | 7;
          v39 = v38 + 1;
          p_dst = (__int128 *)operator new(v38 + 1);
          *((_QWORD *)&__dst + 1) = v36;
          v179 = v39 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
LABEL_58:
          memmove(p_dst, __s, v36);
          goto LABEL_59;
        }
        HIBYTE(v179) = v35;
        p_dst = &__dst;
        if (v35)
          goto LABEL_58;
LABEL_59:
        *((_BYTE *)p_dst + v36) = 0;
        v40 = SHIBYTE(v172);
        v41 = *(uint8_t **)buf;
        if (v172 >= 0)
          v42 = buf;
        else
          v42 = *(uint8_t **)buf;
        v43 = SHIBYTE(v179);
        v44 = (void *)__dst;
        if (v179 >= 0)
          v45 = (const char *)&__dst;
        else
          v45 = (const char *)__dst;
        v46 = strcasecmp((const char *)v42, v45);
        if (v43 < 0)
        {
          operator delete(v44);
          if ((v40 & 0x80000000) == 0)
          {
LABEL_67:
            if (!v46)
              goto LABEL_74;
            goto LABEL_68;
          }
        }
        else if ((v40 & 0x80000000) == 0)
        {
          goto LABEL_67;
        }
        operator delete(v41);
        if (!v46)
        {
LABEL_74:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v52 = object;
          }
          else
          {
            v52 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_UplinkFrequency", v52);
          v91 = xpc_null_create();
          xpc_release(v52);
          xpc_release(v91);
          goto LABEL_230;
        }
LABEL_68:
        v47 = (const char *)v11[4];
        v48 = strlen(v47);
        if (v48 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v49 = v48;
        if (v48 >= 0x17)
        {
          v53 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17)
            v53 = v48 | 7;
          v54 = v53 + 1;
          v50 = operator new(v53 + 1);
          v171 = v49;
          v172 = v54 | 0x8000000000000000;
          *(_QWORD *)buf = v50;
LABEL_79:
          memmove(v50, v47, v49);
          goto LABEL_80;
        }
        HIBYTE(v172) = v48;
        v50 = buf;
        if (v48)
          goto LABEL_79;
LABEL_80:
        *((_BYTE *)v50 + v49) = 0;
        v55 = strlen(v163);
        if (v55 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v56 = v55;
        if (v55 >= 0x17)
        {
          v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v55 | 7) != 0x17)
            v58 = v55 | 7;
          v59 = v58 + 1;
          v57 = (__int128 *)operator new(v58 + 1);
          *((_QWORD *)&__dst + 1) = v56;
          v179 = v59 | 0x8000000000000000;
          *(_QWORD *)&__dst = v57;
LABEL_87:
          memmove(v57, v163, v56);
          goto LABEL_88;
        }
        HIBYTE(v179) = v55;
        v57 = &__dst;
        if (v55)
          goto LABEL_87;
LABEL_88:
        *((_BYTE *)v57 + v56) = 0;
        v60 = SHIBYTE(v172);
        v61 = *(uint8_t **)buf;
        if (v172 >= 0)
          v62 = buf;
        else
          v62 = *(uint8_t **)buf;
        v63 = SHIBYTE(v179);
        v64 = (void *)__dst;
        if (v179 >= 0)
          v65 = (const char *)&__dst;
        else
          v65 = (const char *)__dst;
        v66 = strcasecmp((const char *)v62, v65);
        if (v63 < 0)
        {
          operator delete(v64);
          if ((v60 & 0x80000000) == 0)
          {
LABEL_96:
            if (!v66)
              goto LABEL_103;
            goto LABEL_97;
          }
        }
        else if ((v60 & 0x80000000) == 0)
        {
          goto LABEL_96;
        }
        operator delete(v61);
        if (!v66)
        {
LABEL_103:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v71 = object;
          }
          else
          {
            v71 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_SearchFrequency", v71);
          v111 = xpc_null_create();
          xpc_release(v71);
          xpc_release(v111);
          goto LABEL_230;
        }
LABEL_97:
        v67 = (const char *)v11[4];
        v68 = strlen(v67);
        if (v68 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v69 = v68;
        if (v68 >= 0x17)
        {
          v72 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v68 | 7) != 0x17)
            v72 = v68 | 7;
          v73 = v72 + 1;
          v70 = operator new(v72 + 1);
          v171 = v69;
          v172 = v73 | 0x8000000000000000;
          *(_QWORD *)buf = v70;
LABEL_108:
          memmove(v70, v67, v69);
          goto LABEL_109;
        }
        HIBYTE(v172) = v68;
        v70 = buf;
        if (v68)
          goto LABEL_108;
LABEL_109:
        *((_BYTE *)v70 + v69) = 0;
        v74 = strlen(v162);
        if (v74 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v75 = v74;
        if (v74 >= 0x17)
        {
          v77 = (v74 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v74 | 7) != 0x17)
            v77 = v74 | 7;
          v78 = v77 + 1;
          v76 = (__int128 *)operator new(v77 + 1);
          *((_QWORD *)&__dst + 1) = v75;
          v179 = v78 | 0x8000000000000000;
          *(_QWORD *)&__dst = v76;
LABEL_116:
          memmove(v76, v162, v75);
          goto LABEL_117;
        }
        HIBYTE(v179) = v74;
        v76 = &__dst;
        if (v74)
          goto LABEL_116;
LABEL_117:
        *((_BYTE *)v76 + v75) = 0;
        v79 = SHIBYTE(v172);
        v80 = *(uint8_t **)buf;
        if (v172 >= 0)
          v81 = buf;
        else
          v81 = *(uint8_t **)buf;
        v82 = SHIBYTE(v179);
        v83 = (void *)__dst;
        if (v179 >= 0)
          v84 = (const char *)&__dst;
        else
          v84 = (const char *)__dst;
        v85 = strcasecmp((const char *)v81, v84);
        if (v82 < 0)
        {
          operator delete(v83);
          if ((v79 & 0x80000000) == 0)
          {
LABEL_125:
            if (!v85)
              goto LABEL_132;
            goto LABEL_126;
          }
        }
        else if ((v79 & 0x80000000) == 0)
        {
          goto LABEL_125;
        }
        operator delete(v80);
        if (!v85)
        {
LABEL_132:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v90 = object;
          }
          else
          {
            v90 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_HoppingFrequency", v90);
          v131 = xpc_null_create();
          xpc_release(v90);
          xpc_release(v131);
          goto LABEL_230;
        }
LABEL_126:
        v86 = (const char *)v11[4];
        v87 = strlen(v86);
        if (v87 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v88 = v87;
        if (v87 >= 0x17)
        {
          v92 = (v87 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v87 | 7) != 0x17)
            v92 = v87 | 7;
          v93 = v92 + 1;
          v89 = operator new(v92 + 1);
          v171 = v88;
          v172 = v93 | 0x8000000000000000;
          *(_QWORD *)buf = v89;
LABEL_139:
          memmove(v89, v86, v88);
          goto LABEL_140;
        }
        HIBYTE(v172) = v87;
        v89 = buf;
        if (v87)
          goto LABEL_139;
LABEL_140:
        *((_BYTE *)v89 + v88) = 0;
        v94 = strlen(v161);
        if (v94 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v95 = v94;
        if (v94 >= 0x17)
        {
          v97 = (v94 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v94 | 7) != 0x17)
            v97 = v94 | 7;
          v98 = v97 + 1;
          v96 = (__int128 *)operator new(v97 + 1);
          *((_QWORD *)&__dst + 1) = v95;
          v179 = v98 | 0x8000000000000000;
          *(_QWORD *)&__dst = v96;
LABEL_147:
          memmove(v96, v161, v95);
          goto LABEL_148;
        }
        HIBYTE(v179) = v94;
        v96 = &__dst;
        if (v94)
          goto LABEL_147;
LABEL_148:
        *((_BYTE *)v96 + v95) = 0;
        v99 = SHIBYTE(v172);
        v100 = *(uint8_t **)buf;
        if (v172 >= 0)
          v101 = buf;
        else
          v101 = *(uint8_t **)buf;
        v102 = SHIBYTE(v179);
        v103 = (void *)__dst;
        if (v179 >= 0)
          v104 = (const char *)&__dst;
        else
          v104 = (const char *)__dst;
        v105 = strcasecmp((const char *)v101, v104);
        if (v102 < 0)
        {
          operator delete(v103);
          if ((v99 & 0x80000000) == 0)
          {
LABEL_156:
            if (!v105)
              goto LABEL_163;
            goto LABEL_157;
          }
        }
        else if ((v99 & 0x80000000) == 0)
        {
          goto LABEL_156;
        }
        operator delete(v100);
        if (!v105)
        {
LABEL_163:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v110 = object;
          }
          else
          {
            v110 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_NeighborFrequency", v110);
          v147 = xpc_null_create();
          xpc_release(v110);
          xpc_release(v147);
          goto LABEL_230;
        }
LABEL_157:
        v106 = (const char *)v11[4];
        v107 = strlen(v106);
        if (v107 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v108 = v107;
        if (v107 >= 0x17)
        {
          v112 = (v107 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v107 | 7) != 0x17)
            v112 = v107 | 7;
          v113 = v112 + 1;
          v109 = operator new(v112 + 1);
          v171 = v108;
          v172 = v113 | 0x8000000000000000;
          *(_QWORD *)buf = v109;
LABEL_170:
          memmove(v109, v106, v108);
          goto LABEL_171;
        }
        HIBYTE(v172) = v107;
        v109 = buf;
        if (v107)
          goto LABEL_170;
LABEL_171:
        *((_BYTE *)v109 + v108) = 0;
        v114 = strlen(v160);
        if (v114 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v115 = v114;
        if (v114 >= 0x17)
        {
          v117 = (v114 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v114 | 7) != 0x17)
            v117 = v114 | 7;
          v118 = v117 + 1;
          v116 = (__int128 *)operator new(v117 + 1);
          *((_QWORD *)&__dst + 1) = v115;
          v179 = v118 | 0x8000000000000000;
          *(_QWORD *)&__dst = v116;
LABEL_178:
          memmove(v116, v160, v115);
          goto LABEL_179;
        }
        HIBYTE(v179) = v114;
        v116 = &__dst;
        if (v114)
          goto LABEL_178;
LABEL_179:
        *((_BYTE *)v116 + v115) = 0;
        v119 = SHIBYTE(v172);
        v120 = *(uint8_t **)buf;
        if (v172 >= 0)
          v121 = buf;
        else
          v121 = *(uint8_t **)buf;
        v122 = SHIBYTE(v179);
        v123 = (void *)__dst;
        if (v179 >= 0)
          v124 = (const char *)&__dst;
        else
          v124 = (const char *)__dst;
        v125 = strcasecmp((const char *)v121, v124);
        if (v122 < 0)
        {
          operator delete(v123);
          if ((v119 & 0x80000000) == 0)
          {
LABEL_187:
            if (!v125)
              goto LABEL_194;
            goto LABEL_188;
          }
        }
        else if ((v119 & 0x80000000) == 0)
        {
          goto LABEL_187;
        }
        operator delete(v120);
        if (!v125)
        {
LABEL_194:
          v51 = object;
          if (object)
          {
            xpc_retain(object);
            v130 = object;
          }
          else
          {
            v130 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_RplmnFrequency", v130);
          v148 = xpc_null_create();
          xpc_release(v130);
          xpc_release(v148);
          goto LABEL_230;
        }
LABEL_188:
        v126 = (const char *)v11[4];
        v127 = strlen(v126);
        if (v127 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v128 = v127;
        if (v127 >= 0x17)
        {
          v132 = (v127 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v127 | 7) != 0x17)
            v132 = v127 | 7;
          v133 = v132 + 1;
          v129 = operator new(v132 + 1);
          v171 = v128;
          v172 = v133 | 0x8000000000000000;
          *(_QWORD *)buf = v129;
LABEL_201:
          memmove(v129, v126, v128);
          goto LABEL_202;
        }
        HIBYTE(v172) = v127;
        v129 = buf;
        if (v127)
          goto LABEL_201;
LABEL_202:
        *((_BYTE *)v129 + v128) = 0;
        v134 = strlen(v159);
        if (v134 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v135 = v134;
        if (v134 >= 0x17)
        {
          v137 = (v134 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v134 | 7) != 0x17)
            v137 = v134 | 7;
          v138 = v137 + 1;
          v136 = (__int128 *)operator new(v137 + 1);
          *((_QWORD *)&__dst + 1) = v135;
          v179 = v138 | 0x8000000000000000;
          *(_QWORD *)&__dst = v136;
LABEL_209:
          memmove(v136, v159, v135);
          goto LABEL_210;
        }
        HIBYTE(v179) = v134;
        v136 = &__dst;
        if (v134)
          goto LABEL_209;
LABEL_210:
        *((_BYTE *)v136 + v135) = 0;
        v139 = SHIBYTE(v172);
        v140 = *(uint8_t **)buf;
        if (v172 >= 0)
          v141 = buf;
        else
          v141 = *(uint8_t **)buf;
        v142 = SHIBYTE(v179);
        v143 = (void *)__dst;
        if (v179 >= 0)
          v144 = (const char *)&__dst;
        else
          v144 = (const char *)__dst;
        v145 = strcasecmp((const char *)v141, v144);
        if (v142 < 0)
        {
          operator delete(v143);
          if ((v139 & 0x80000000) == 0)
          {
LABEL_218:
            v51 = object;
            if (!v145)
              goto LABEL_222;
            goto LABEL_230;
          }
        }
        else if ((v139 & 0x80000000) == 0)
        {
          goto LABEL_218;
        }
        operator delete(v140);
        v51 = object;
        if (!v145)
        {
LABEL_222:
          if (v51)
          {
            xpc_retain(v51);
            v146 = v51;
          }
          else
          {
            v146 = xpc_null_create();
          }
          xpc_dictionary_set_value(xdict, "kWCMCellular_DesenseFreqReport_DownlinkFrequency", v146);
          v149 = xpc_null_create();
          xpc_release(v146);
          xpc_release(v149);
        }
LABEL_230:
        xpc_release(v51);
        v150 = (_QWORD *)v11[1];
        if (v150)
        {
          do
          {
            v151 = v150;
            v150 = (_QWORD *)*v150;
          }
          while (v150);
        }
        else
        {
          do
          {
            v151 = (_QWORD *)v11[2];
            v152 = *v151 == (_QWORD)v11;
            v11 = v151;
          }
          while (!v152);
        }
        v11 = v151;
        if (v151 == a2 + 1)
          goto LABEL_236;
      }
      v33 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v33 = v30 | 7;
      v34 = v33 + 1;
      v32 = operator new(v33 + 1);
      v171 = v31;
      v172 = v34 | 0x8000000000000000;
      *(_QWORD *)buf = v32;
LABEL_50:
      memmove(v32, v29, v31);
      goto LABEL_51;
    }
LABEL_236:
    v153 = *(NSObject **)(v158 + 40);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT)
      && ((xpc::object::to_string((xpc::object *)&xdict), v172 >= 0) ? (v154 = buf) : (v154 = *(uint8_t **)buf),
          LODWORD(__dst) = 136315138,
          *(_QWORD *)((char *)&__dst + 4) = v154,
          _os_log_impl(&dword_1BF566000, v153, OS_LOG_TYPE_DEFAULT, "#I Desense frequency report -> %s", (uint8_t *)&__dst, 0xCu), SHIBYTE(v172) < 0))
    {
      operator delete(*(void **)buf);
      v155 = *(_QWORD *)(v158 + 120);
      if (v155)
        goto LABEL_242;
    }
    else
    {
      v155 = *(_QWORD *)(v158 + 120);
      if (v155)
      {
LABEL_242:
        v156 = xdict;
        if (xdict)
          xpc_retain(xdict);
        else
          v156 = xpc_null_create();
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v171 = 1174405120;
        v172 = (int64_t)___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
        v173 = &__block_descriptor_tmp_7;
        v176 = 399;
        v174 = v155;
        v175 = v156;
        if (v156)
          xpc_retain(v156);
        else
          v175 = xpc_null_create();
        v177 = v157;
        ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v155 + 8), (uint64_t)buf);
        xpc_release(v175);
        xpc_release(v156);
      }
    }
    xpc_release(xdict);
    return;
  }
  v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEBUG, "#D Empty report passed; ignoring it", buf, 2u);
  }
}

void sub_1BF59D254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18, char a19, void *a20,uint64_t a21,xpc_object_t object,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void coex::Module::State::setIndications_sync(coex::Module::State *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  const void *v12;
  capabilities::abs *v13;
  uint64_t v14;
  CFTypeID v15;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  _QWORD aBlock[6];
  std::__shared_weak_count *v20;
  void *v21;
  dispatch_object_t object;
  CFTypeRef cf;
  __CFDictionary *v24;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = *((_QWORD *)this + 9), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v24 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (Mutable)
    v24 = Mutable;
  v12 = (const void *)*MEMORY[0x1E0C9AE50];
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF3A0], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF398], v12);
  ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF450], v12);
  if (capabilities::abs::supportsCoexEur5G(v13))
  {
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF488], (CFTypeRef)*MEMORY[0x1E0C9AE40]);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF348], v12);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v11, (CFTypeRef)*MEMORY[0x1E0DDF400], v12);
  }
  v14 = *((_QWORD *)this + 13);
  if (v11 && (v15 = CFGetTypeID(v11), v15 == CFDictionaryGetTypeID()))
  {
    cf = v11;
    CFRetain(v11);
  }
  else
  {
    cf = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State19setIndications_syncEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_73;
  aBlock[4] = this;
  aBlock[5] = v3;
  v20 = v5;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v17 = _Block_copy(aBlock);
  v18 = *((_QWORD *)this + 11);
  if (v18)
    dispatch_retain(v18);
  if (v17)
  {
    v21 = _Block_copy(v17);
    object = v18;
    if (!v18)
      goto LABEL_24;
    goto LABEL_23;
  }
  v21 = 0;
  object = v18;
  if (v18)
LABEL_23:
    dispatch_retain(v18);
LABEL_24:
  (*(void (**)(uint64_t, CFTypeRef *, void **))(*(_QWORD *)v14 + 64))(v14, &cf, &v21);
  if (object)
    dispatch_release(object);
  if (v21)
    _Block_release(v21);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
  if (cf)
    CFRelease(cf);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  if (v11)
    CFRelease(v11);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF59D744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, const void *a19)
{
  std::__shared_weak_count *v19;
  NSObject *v20;
  const void *v21;
  uint64_t v22;

  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)&a17);
  if (v20)
    dispatch_release(v20);
  if (v21)
    _Block_release(v21);
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a19);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v22 - 72));
  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

void sub_1BF59D79C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;

  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v2 - 72));
  std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State4initEv_block_invoke_64(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  CFTypeRef v7;
  int v8;
  char Int;
  xpc_object_t v10;
  xpc_object_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  xpc_object_t v14;
  NSObject *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD v18[2];
  CFTypeRef cf;
  std::__shared_weak_count *v21;
  uint8_t buf[8];
  uint64_t v23;
  void (*v24)(uint64_t);
  void *v25;
  uint64_t v26;
  xpc_object_t object;
  int v28;
  int v29;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v21 = v6;
    if (v6)
    {
      if (!a1[5])
      {
        v12 = v6;
LABEL_28:
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        return;
      }
      cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      abm::client::Event::getData(*a2);
      v7 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      {
        v18[0] = 0xAAAAAAAAAAAAAAAALL;
        v18[1] = 0xAAAAAAAAAAAAAAAALL;
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v18, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
        v8 = *(unsigned __int8 *)(v5 + 172);
        ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, (const char *)*MEMORY[0x1E0CFB9E8]);
        Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v18, *(const __CFString **)buf);
        MEMORY[0x1C3B8B878](buf);
        *(_BYTE *)(v5 + 172) = Int;
        if (v8 && !Int && *(_QWORD *)(v5 + 120))
        {
          v10 = xpc_dictionary_create(0, 0, 0);
          if (v10 || (v10 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8CD78](v10) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v10);
              v11 = v10;
            }
            else
            {
              v11 = xpc_null_create();
            }
          }
          else
          {
            v11 = xpc_null_create();
            v10 = 0;
          }
          xpc_release(v10);
          v13 = *(_QWORD *)(v5 + 120);
          if (v11)
          {
            xpc_retain(v11);
            v14 = v11;
          }
          else
          {
            v14 = xpc_null_create();
          }
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          v23 = 1174405120;
          v24 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
          v25 = &__block_descriptor_tmp_7;
          v28 = 304;
          v26 = v13;
          object = v14;
          if (v14)
            xpc_retain(v14);
          else
            object = xpc_null_create();
          v29 = 0;
          ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)buf);
          xpc_release(object);
          xpc_release(v14);
          v15 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Notified CXM that Baseband is Ready", buf, 2u);
          }
          xpc_release(v11);
        }
        coex::Module::State::evaluateCurrentCoexBootState_sync((coex::Module::State *)v5);
        MEMORY[0x1C3B8B8B4](v18);
        v7 = cf;
      }
      if (v7)
        CFRelease(v7);
      v12 = v21;
      if (v21)
        goto LABEL_28;
    }
  }
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void coex::Module::State::evaluateCurrentCoexBootState_sync(coex::Module::State *this)
{
  uint64_t v2;
  _OWORD *v3;
  int v4;
  int v5;
  size_t v6;
  int v7;
  const void *v8;
  int v9;
  NSObject *v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  uint64_t v15;
  xpc_object_t v16;
  NSObject *v17;
  std::string __p;
  uint8_t buf[8];
  uint64_t v20;
  void (*v21)(uint64_t);
  void *v22;
  uint64_t v23;
  xpc_object_t object;
  int v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *((char *)this + 172);
  v3 = (_OWORD *)((char *)this + 176);
  memset(&__p, 170, sizeof(__p));
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v3;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
  }
  if (v2 > 7)
    v4 = 2;
  else
    v4 = dword_1BF73CC60[v2];
  v5 = *((char *)this + 199);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)this + 199);
  else
    v6 = *((_QWORD *)this + 23);
  v7 = 2;
  if (v6 == strlen((const char *)*MEMORY[0x1E0CFB980]))
  {
    if (v5 >= 0)
      v8 = v3;
    else
      v8 = *(const void **)v3;
    if (!memcmp(v8, (const void *)*MEMORY[0x1E0CFB980], v6))
      v7 = v4;
    else
      v7 = 2;
  }
  v9 = *((_DWORD *)this + 50);
  if (v7 != v9)
  {
    v10 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v9;
      LOWORD(v20) = 1024;
      *(_DWORD *)((char *)&v20 + 2) = v7;
      _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Coex boot state changing from %d -> %d", buf, 0xEu);
    }
    *((_DWORD *)this + 50) = v7;
    if (*((_QWORD *)this + 15))
    {
      v11 = xpc_dictionary_create(0, 0, 0);
      if (v11 || (v11 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v11) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v11);
          v12 = v11;
        }
        else
        {
          v12 = xpc_null_create();
        }
      }
      else
      {
        v12 = xpc_null_create();
        v11 = 0;
      }
      xpc_release(v11);
      v13 = xpc_int64_create(*((unsigned int *)this + 50));
      if (!v13)
        v13 = xpc_null_create();
      xpc_dictionary_set_value(v12, "kWCMCellular_BBState", v13);
      v14 = xpc_null_create();
      xpc_release(v13);
      xpc_release(v14);
      v15 = *((_QWORD *)this + 15);
      if (v12)
      {
        xpc_retain(v12);
        v16 = v12;
      }
      else
      {
        v16 = xpc_null_create();
      }
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v20 = 1174405120;
      v21 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
      v22 = &__block_descriptor_tmp_7;
      v25 = 388;
      v23 = v15;
      object = v16;
      if (v16)
        xpc_retain(v16);
      else
        object = xpc_null_create();
      v26 = 0;
      ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v15 + 8), (uint64_t)buf);
      xpc_release(object);
      xpc_release(v16);
      v17 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1BF566000, v17, OS_LOG_TYPE_DEFAULT, "#I Notified CXM with baseband state", buf, 2u);
      }
      xpc_release(v12);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF59DDF4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t dispatch::callback<void({block_pointer})(std::shared_ptr<abm::client::Event>)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN4coex6Module5State4initEv_block_invoke_67(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  CFTypeRef v7;
  const void *v8;
  size_t v9;
  void *v10;
  void *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  void **v16;
  int v17;
  size_t v18;
  const void *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p[2];
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[2];
  CFTypeRef cf;
  std::__shared_weak_count *v29;
  uint64_t v30;

  v3 = (std::__shared_weak_count *)a1[6];
  if (!v3)
    return;
  v5 = a1[4];
  v6 = std::__shared_weak_count::lock(v3);
  v29 = v6;
  if (!v6)
    return;
  if (!a1[5])
  {
    v12 = v6;
LABEL_31:
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return;
  }
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  abm::client::Event::getData(*a2);
  v7 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
  {
    v26[0] = 0xAAAAAAAAAAAAAAAALL;
    v26[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v26, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
    v8 = (const void *)*MEMORY[0x1E0CFB988];
    v9 = strlen((const char *)*MEMORY[0x1E0CFB988]);
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v10 = (void *)v9;
    if (v9 >= 0x17)
    {
      v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v13 = v9 | 7;
      v14 = v13 + 1;
      v11 = operator new(v13 + 1);
      __p[1] = v10;
      v23 = v14 | 0x8000000000000000;
      __p[0] = v11;
    }
    else
    {
      HIBYTE(v23) = v9;
      v11 = __p;
      if (!v9)
        goto LABEL_14;
    }
    memmove(v11, v8, (size_t)v10);
LABEL_14:
    v15 = (const char *)*MEMORY[0x1E0CFB530];
    *((_BYTE *)v10 + (_QWORD)v11) = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v30, v15);
    ctu::cf::map_adapter::getString();
    MEMORY[0x1C3B8B878](&v30);
    v16 = (void **)(v5 + 176);
    if (*(char *)(v5 + 199) < 0)
      operator delete(*v16);
    *(_OWORD *)v16 = v24;
    *(_QWORD *)(v5 + 192) = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    v17 = *(char *)(v5 + 199);
    if (v17 >= 0)
      v18 = *(unsigned __int8 *)(v5 + 199);
    else
      v18 = *(_QWORD *)(v5 + 184);
    if (v18 == strlen((const char *)*MEMORY[0x1E0CFBB68]))
    {
      v19 = v17 >= 0 ? (const void *)(v5 + 176) : *v16;
      if (!memcmp(v19, (const void *)*MEMORY[0x1E0CFBB68], v18))
        coex::CoexCache::initProperty((coex::CoexCache *)(v5 + 136));
    }
    coex::Module::State::evaluateCurrentCoexBootState_sync((coex::Module::State *)v5);
    MEMORY[0x1C3B8B8B4](v26);
    v7 = cf;
  }
  if (v7)
    CFRelease(v7);
  v12 = v29;
  if (v29)
    goto LABEL_31;
}

void ___ZN4coex6Module5State8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *i;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int j;
  unsigned int v7;
  boost::signals2::detail::connection_body_base *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1 + 28;
  for (i = (uint64_t *)v1[29]; i != v2; i = (uint64_t *)i[1])
  {
    v4 = (unsigned int *)i[3];
    if (v4)
    {
      v5 = v4 + 2;
      for (j = v4[2]; j; j = v7)
      {
        v7 = __ldxr(v5);
        if (v7 == j)
        {
          if (!__stxr(j + 1, v5))
          {
            v8 = (boost::signals2::detail::connection_body_base *)i[2];
            if (v8)
              boost::signals2::detail::connection_body_base::disconnect(v8);
            do
            {
              v9 = __ldaxr(v5);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v5));
            if (!v10)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 16))(v4);
              v11 = v4 + 3;
              do
              {
                v12 = __ldaxr(v11);
                v13 = v12 - 1;
              }
              while (__stlxr(v13, v11));
              if (!v13)
                (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 24))(v4);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
  }
  if (v1[30])
  {
    v14 = v1[28];
    v15 = (uint64_t *)v1[29];
    v16 = *v15;
    *(_QWORD *)(v16 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v16;
    v1[30] = 0;
    if (v15 != v2)
    {
      do
      {
        v26 = (uint64_t *)v15[1];
        v27 = (unsigned int *)v15[3];
        if (v27)
        {
          v28 = v27 + 3;
          do
          {
            v29 = __ldaxr(v28);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, v28));
          if (!v30)
            (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 24))(v27);
        }
        operator delete(v15);
        v15 = v26;
      }
      while (v26 != v2);
    }
  }
  v17 = (std::__shared_weak_count *)v1[16];
  v1[15] = 0;
  v1[16] = 0;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v1[14];
  v1[13] = 0;
  v1[14] = 0;
  if (!v20)
    goto LABEL_30;
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    v23 = (std::__shared_weak_count *)v1[32];
    v1[31] = 0;
    v1[32] = 0;
    if (!v23)
      return;
  }
  else
  {
LABEL_30:
    v23 = (std::__shared_weak_count *)v1[32];
    v1[31] = 0;
    v1[32] = 0;
    if (!v23)
      return;
  }
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1BF59E3B4(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  do
  {
    v4 = __ldaxr(v2);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, v2));
  if (!v5)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 16))(v1);
    v6 = v1 + 3;
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(unsigned int *))(*(_QWORD *)v1 + 24))(v1);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 40);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 40);
    if (v3)
      dispatch_release(v3);
  }
}

void ___ZN4coex6Module5State19setIndications_syncEv_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  _BOOL4 v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (!a1[5])
        goto LABEL_13;
      v8 = *a2;
      if (*a2)
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
      else
        v9 = 0;
      v10 = *(NSObject **)(v5 + 40);
      v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9)
      {
        if (!v11)
          goto LABEL_13;
        v17 = 138412290;
        v18 = v8;
        v12 = "#I Failed to  set indications:\n%@";
        v13 = v10;
        v14 = 12;
      }
      else
      {
        if (!v11)
          goto LABEL_13;
        LOWORD(v17) = 0;
        v12 = "#I Indications set successfully";
        v13 = v10;
        v14 = 2;
      }
      _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v17, v14);
LABEL_13:
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void coex::CommandDriver::Callback::~Callback(coex::CommandDriver::Callback *this)
{
  NSObject *v2;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)this)
    _Block_release(*(const void **)this);
}

const void **ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void coex::Module::State::handleSetNetworkConfigOfInterest_sync(uint64_t a1, xpc_object_t *a2, unsigned int a3)
{
  xpc_object_t *v4;
  NSObject *v6;
  const __CFAllocator *v7;
  const __CFArray *Mutable;
  xpc_object_t v9;
  xpc_object_t v10;
  size_t count;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  xpc_object_t value;
  const object *v16;
  const void *v17;
  CFTypeID v18;
  const void *v19;
  xpc_object_t v20;
  const object *v21;
  const void *v22;
  CFTypeID v23;
  const void *v24;
  xpc_object_t v25;
  const object *v26;
  const void *v27;
  CFTypeID v28;
  const void *v29;
  xpc_object_t v30;
  const object *v31;
  const void *v32;
  CFTypeID v33;
  const void *v34;
  xpc_object_t v35;
  unsigned __int8 v36;
  CFDictionaryRef v37;
  CFDictionaryRef v38;
  CFDictionaryRef v39;
  CFDictionaryRef v40;
  CFMutableDictionaryRef v41;
  __CFDictionary *v42;
  CFDataRef v43;
  const __CFAllocator *v44;
  __CFArray *v45;
  xpc_object_t v46;
  CFArrayRef v47;
  CFDictionaryRef v48;
  CFDictionaryRef v49;
  CFMutableDictionaryRef v50;
  CFMutableDictionaryRef v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  CFTypeID v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  void *v60;
  NSObject *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  const void *v68;
  NSObject *v69;
  uint8_t *v70;
  unsigned int v71;
  uint64_t v72;
  xpc_object_t *v73;
  CFTypeRef v74;
  CFTypeRef v75;
  uint64_t v76;
  uint64_t v77;
  CFTypeRef cf;
  _QWORD aBlock[6];
  std::__shared_weak_count *v80;
  void *v81;
  dispatch_object_t object;
  CFTypeRef v83[2];
  CFDictionaryRef v84;
  CFDictionaryRef v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  xpc_object_t xdict;
  CFArrayRef v91;
  uint8_t buf[23];
  char v93;
  UInt8 bytes[8];
  void *v95[2];
  void *values[2];
  __int128 keys;
  uint64_t v98;

  v4 = a2;
  v98 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812C8])
  {
    v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Invalid XPC array", buf, 2u);
    }
    return;
  }
  v72 = a1;
  v91 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
    v91 = Mutable;
  memset(buf, 170, 16);
  v9 = *v4;
  if (*v4)
  {
    xpc_retain(*v4);
    *(_QWORD *)buf = v9;
  }
  else
  {
    v9 = xpc_null_create();
    *(_QWORD *)buf = v9;
    if (!v9)
    {
      v9 = 0;
      *(_QWORD *)buf = xpc_null_create();
      goto LABEL_10;
    }
  }
  xpc_retain(v9);
LABEL_10:
  *(_QWORD *)&buf[8] = 0;
  xpc_release(v9);
  v71 = a3;
  v77 = *MEMORY[0x1E0DDF388];
  v75 = (CFTypeRef)*MEMORY[0x1E0DDF218];
  v76 = *MEMORY[0x1E0DDF268];
  v73 = v4;
  v74 = (CFTypeRef)*MEMORY[0x1E0DDF258];
  cf = (CFTypeRef)*MEMORY[0x1E0DDF240];
  while (1)
  {
    v10 = *v4;
    if (*v4)
      xpc_retain(*v4);
    else
      v10 = xpc_null_create();
    if (MEMORY[0x1C3B8CD78](*v4) == MEMORY[0x1E0C812C8])
    {
      count = xpc_array_get_count(*v4);
      if (!v10)
      {
LABEL_20:
        v12 = xpc_null_create();
        goto LABEL_21;
      }
    }
    else
    {
      count = 0;
      if (!v10)
        goto LABEL_20;
    }
    xpc_retain(v10);
    v12 = v10;
LABEL_21:
    xpc_release(v10);
    v13 = *(xpc_object_t *)buf;
    v14 = *(_QWORD *)&buf[8];
    xpc_release(v12);
    if (v14 == count && v13 == v12)
      break;
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&keys = buf;
    *((_QWORD *)&keys + 1) = *(_QWORD *)&buf[8];
    xpc::array::object_proxy::operator xpc::dict((uint64_t)&keys, &xdict);
    v89 = 0xAAAAAAAAAAAAAAAALL;
    value = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_ULCenterFreq");
    values[0] = value;
    if (value)
      xpc_retain(value);
    else
      values[0] = xpc_null_create();
    xpc::bridge((xpc *)values, v16);
    v17 = (const void *)keys;
    if (!(_QWORD)keys || (v18 = CFGetTypeID((CFTypeRef)keys), v18 != CFNumberGetTypeID()))
    {
      v17 = 0;
      v89 = 0;
      v19 = (const void *)keys;
      if (!(_QWORD)keys)
        goto LABEL_32;
LABEL_31:
      CFRelease(v19);
      goto LABEL_32;
    }
    v89 = (unint64_t)v17;
    CFRetain(v17);
    v19 = (const void *)keys;
    if ((_QWORD)keys)
      goto LABEL_31;
LABEL_32:
    xpc_release(values[0]);
    v88 = 0xAAAAAAAAAAAAAAAALL;
    v20 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_ULBandwidth");
    values[0] = v20;
    if (v20)
      xpc_retain(v20);
    else
      values[0] = xpc_null_create();
    xpc::bridge((xpc *)values, v21);
    v22 = (const void *)keys;
    if (!(_QWORD)keys || (v23 = CFGetTypeID((CFTypeRef)keys), v23 != CFNumberGetTypeID()))
    {
      v22 = 0;
      v88 = 0;
      v24 = (const void *)keys;
      if (!(_QWORD)keys)
        goto LABEL_41;
LABEL_40:
      CFRelease(v24);
      goto LABEL_41;
    }
    v88 = (unint64_t)v22;
    CFRetain(v22);
    v24 = (const void *)keys;
    if ((_QWORD)keys)
      goto LABEL_40;
LABEL_41:
    xpc_release(values[0]);
    v87 = 0xAAAAAAAAAAAAAAAALL;
    v25 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_DLCenterFreq");
    values[0] = v25;
    if (v25)
      xpc_retain(v25);
    else
      values[0] = xpc_null_create();
    xpc::bridge((xpc *)values, v26);
    v27 = (const void *)keys;
    if (!(_QWORD)keys || (v28 = CFGetTypeID((CFTypeRef)keys), v28 != CFNumberGetTypeID()))
    {
      v27 = 0;
      v87 = 0;
      v29 = (const void *)keys;
      if (!(_QWORD)keys)
        goto LABEL_50;
LABEL_49:
      CFRelease(v29);
      goto LABEL_50;
    }
    v87 = (unint64_t)v27;
    CFRetain(v27);
    v29 = (const void *)keys;
    if ((_QWORD)keys)
      goto LABEL_49;
LABEL_50:
    xpc_release(values[0]);
    v86 = 0xAAAAAAAAAAAAAAAALL;
    v30 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_DLBandwidth");
    values[0] = v30;
    if (v30)
      xpc_retain(v30);
    else
      values[0] = xpc_null_create();
    xpc::bridge((xpc *)values, v31);
    v32 = (const void *)keys;
    if (!(_QWORD)keys || (v33 = CFGetTypeID((CFTypeRef)keys), v33 != CFNumberGetTypeID()))
    {
      v32 = 0;
      v86 = 0;
      v34 = (const void *)keys;
      if (!(_QWORD)keys)
        goto LABEL_59;
LABEL_58:
      CFRelease(v34);
      goto LABEL_59;
    }
    v86 = (unint64_t)v32;
    CFRetain(v32);
    v34 = (const void *)keys;
    if ((_QWORD)keys)
      goto LABEL_58;
LABEL_59:
    xpc_release(values[0]);
    v35 = xpc_dictionary_get_value(xdict, "kWCMCellularSetNetworkConfigOfInterest_BandMask");
    *(_QWORD *)&keys = v35;
    if (v35)
      xpc_retain(v35);
    else
      *(_QWORD *)&keys = xpc_null_create();
    v36 = xpc::dyn_cast_or_default((xpc *)&keys, 0);
    xpc_release((xpc_object_t)keys);
    if (!v17 || !v22 || !v27)
    {
      if (v32)
        goto LABEL_91;
      goto LABEL_92;
    }
    if (v32)
    {
      v84 = 0;
      v85 = 0;
      *(_QWORD *)&keys = v77;
      *((_QWORD *)&keys + 1) = v76;
      values[0] = (void *)v17;
      values[1] = (void *)v22;
      v95[0] = (void *)v27;
      v95[1] = (void *)v32;
      v37 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v38 = v37;
      if (v37)
        v85 = v37;
      v39 = CFDictionaryCreate(v7, (const void **)&keys, (const void **)v95, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v40 = v39;
      if (v39)
        v84 = v39;
      v95[0] = 0;
      v41 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v42 = v41;
      if (v41)
        v95[0] = v41;
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v41, v75, v38);
      ctu::cf::insert<__CFString const*,__CFDictionary const*>(v42, v74, v40);
      *(_QWORD *)bytes = v36;
      v43 = CFDataCreate(v7, bytes, 8);
      v83[1] = v43;
      *(_QWORD *)&keys = cf;
      if (cf)
        CFRetain(cf);
      values[0] = v43;
      if (v43)
      {
        CFRetain(v43);
        if (cf)
          CFDictionaryAddValue(v42, cf, v43);
        CFRelease(v43);
      }
      v44 = v7;
      if (cf)
        CFRelease(cf);
      v45 = v91;
      *(_QWORD *)&keys = v42;
      if (v42)
      {
        CFRetain(v42);
        CFArrayAppendValue(v45, v42);
        CFRelease(v42);
      }
      if (v43)
        CFRelease(v43);
      v7 = v44;
      if (v42)
        CFRelease(v42);
      v4 = v73;
      if (v40)
        CFRelease(v40);
      if (v38)
        CFRelease(v38);
LABEL_91:
      CFRelease(v32);
LABEL_92:
      if (!v27)
        goto LABEL_94;
    }
    CFRelease(v27);
LABEL_94:
    if (v22)
      CFRelease(v22);
    if (v17)
      CFRelease(v17);
    xpc_release(xdict);
    v46 = *(xpc_object_t *)buf;
    if (*(_QWORD *)buf)
      xpc_retain(*(xpc_object_t *)buf);
    else
      v46 = xpc_null_create();
    ++*(_QWORD *)&buf[8];
    xpc_release(v46);
  }
  xpc_release(*(xpc_object_t *)buf);
  v47 = v91;
  if (!CFArrayGetCount(v91))
  {
    v69 = *(NSObject **)(v72 + 40);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((xpc::object *)v4);
      if (v93 >= 0)
        v70 = buf;
      else
        v70 = *(uint8_t **)buf;
      LODWORD(keys) = 136315138;
      *(_QWORD *)((char *)&keys + 4) = v70;
      _os_log_error_impl(&dword_1BF566000, v69, OS_LOG_TYPE_ERROR, "XPC array is: %s", (uint8_t *)&keys, 0xCu);
      if (v93 < 0)
        operator delete(*(void **)buf);
      v69 = *(NSObject **)(v72 + 40);
      if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
      {
LABEL_144:
        if (!v47)
          return;
        goto LABEL_145;
      }
    }
    else if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_144;
    }
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v47;
    _os_log_error_impl(&dword_1BF566000, v69, OS_LOG_TYPE_ERROR, "Band filter array is: %@", buf, 0xCu);
    if (!v47)
      return;
LABEL_145:
    CFRelease(v47);
    return;
  }
  *(_QWORD *)&keys = 0;
  *(_QWORD *)buf = *MEMORY[0x1E0DDF2D8];
  values[0] = v47;
  v48 = CFDictionaryCreate(v7, (const void **)buf, (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v49 = v48;
  if (v48)
    *(_QWORD *)&keys = v48;
  values[0] = 0;
  v50 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v51 = v50;
  if (v50)
    values[0] = v50;
  ctu::cf::insert<__CFString const*,__CFDictionary const*>(v50, (CFTypeRef)*MEMORY[0x1E0DDF370], v49);
  v53 = *(_QWORD *)(v72 + 72);
  v52 = *(std::__shared_weak_count **)(v72 + 80);
  *(_QWORD *)buf = v53;
  if (!v52 || (v54 = std::__shared_weak_count::lock(v52), (*(_QWORD *)&buf[8] = v54) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v55 = v54;
  v56 = *(_QWORD *)(v72 + 104);
  if (v51 && (v57 = CFGetTypeID(v51), v57 == CFDictionaryGetTypeID()))
  {
    v83[0] = v51;
    CFRetain(v51);
  }
  else
  {
    v83[0] = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State37handleSetNetworkConfigOfInterest_syncEN3xpc5arrayENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_79;
  aBlock[4] = v72;
  aBlock[5] = v53;
  v80 = v55;
  p_shared_owners = (unint64_t *)&v55->__shared_owners_;
  do
    v59 = __ldxr(p_shared_owners);
  while (__stxr(v59 + 1, p_shared_owners));
  v60 = _Block_copy(aBlock);
  v61 = *(NSObject **)(v72 + 88);
  if (v61)
    dispatch_retain(*(dispatch_object_t *)(v72 + 88));
  if (v60)
  {
    v81 = _Block_copy(v60);
    object = v61;
    if (v61)
      goto LABEL_117;
  }
  else
  {
    v81 = 0;
    object = v61;
    if (v61)
LABEL_117:
      dispatch_retain(v61);
  }
  (*(void (**)(uint64_t, CFTypeRef *, _QWORD, void **))(*(_QWORD *)v56 + 48))(v56, v83, v71, &v81);
  if (object)
    dispatch_release(object);
  if (v81)
    _Block_release(v81);
  if (v61)
    dispatch_release(v61);
  if (v60)
    _Block_release(v60);
  if (v83[0])
    CFRelease(v83[0]);
  v62 = v80;
  if (v80)
  {
    v63 = (unint64_t *)&v80->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
      v65 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
        goto LABEL_133;
      goto LABEL_136;
    }
  }
  v65 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_136;
LABEL_133:
  v66 = (unint64_t *)&v65->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (v67)
  {
LABEL_136:
    v68 = values[0];
    if (values[0])
      goto LABEL_137;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    v68 = values[0];
    if (values[0])
LABEL_137:
      CFRelease(v68);
  }
  if ((_QWORD)keys)
    CFRelease((CFTypeRef)keys);
  v47 = v91;
  if (v91)
    goto LABEL_145;
}

void sub_1BF59F0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void xpc::array::object_proxy::operator xpc::dict(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t v4;
  xpc_object_t v5;

  value = xpc_array_get_value(**(xpc_object_t **)a1, *(_QWORD *)(a1 + 8));
  if (value)
  {
    v4 = value;
    xpc_retain(value);
    *a2 = v4;
  }
  else
  {
    v4 = xpc_null_create();
    *a2 = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_8:
    *a2 = v5;
    goto LABEL_9;
  }
  xpc_retain(v4);
LABEL_9:
  xpc_release(v4);
}

uint64_t ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void ___ZN4coex6Module5State37handleSetNetworkConfigOfInterest_syncEN3xpc5arrayENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Failed to set: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

const void **ctu::cf::CFSharedRef<__CFArray>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void coex::Module::State::handleSetTxPowerLimit_sync(_QWORD *a1, xpc *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *v7;
  uint64_t (*v8)(uint64_t);
  CFMutableDictionaryRef theDict;

  v5 = xpc::dyn_cast_or_default(this, 0);
  v6 = 20;
  if (!(_DWORD)a3)
    v6 = 18;
  v7 = (__CFDictionary *)a1[v6];
  theDict = v7;
  if (v7)
    CFRetain(v7);
  ctu::cf::update<__CFString const*,long long>(v7, (CFTypeRef)*MEMORY[0x1E0DDF508], v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v7)
    CFRelease(v7);
  theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, a3, 0, &theDict);
  v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!theDict)
    v8 = 0;
  if (v8)
  {
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF528]);
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF458]);
  }
  coex::Module::State::setPolicy_sync(a1, a3);
  if (theDict)
    CFRelease(theDict);
}

void sub_1BF59F738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF59F74C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2TxPowerLimit_sync(_QWORD *a1, xpc *this, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __CFDictionary *v7;
  uint64_t (*v8)(uint64_t);
  CFMutableDictionaryRef theDict;

  v5 = xpc::dyn_cast_or_default(this, 0);
  v6 = 20;
  if (!(_DWORD)a3)
    v6 = 18;
  v7 = (__CFDictionary *)a1[v6];
  theDict = v7;
  if (v7)
    CFRetain(v7);
  ctu::cf::update<__CFString const*,long long>(v7, (CFTypeRef)*MEMORY[0x1E0DDF3C8], v5, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  if (v7)
    CFRelease(v7);
  theDict = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty((uint64_t)a1, coex::kKeyFailCondition, a3, 0, &theDict);
  v8 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!theDict)
    v8 = 0;
  if (v8)
  {
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF528]);
    CFDictionaryRemoveValue(theDict, (const void *)*MEMORY[0x1E0DDF458]);
  }
  coex::Module::State::setPolicy_sync(a1, a3);
  if (theDict)
    CFRelease(theDict);
}

void sub_1BF59F878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF59F88C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetWCI2CalibrationInfo_sync(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v2 = 0;
    _os_log_error_impl(&dword_1BF566000, v1, OS_LOG_TYPE_ERROR, "WCMCellularSetWCI2CalibrationInfo not supported", v2, 2u);
  }
}

uint64_t ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

const void **ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void coex::Module::State::handleSetLinkQualityMode_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  xpc_object_t value;
  uint64_t v7;
  xpc_object_t v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  const void *v13;
  const void *v14;
  CFAllocatorRef *v15;
  xpc_object_t v16;
  uint64_t v17;
  const __CFAllocator *v18;
  xpc_object_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  xpc_object_t v24;
  CFTypeRef cf;
  xpc_object_t object[2];

  object[1] = *(xpc_object_t *)MEMORY[0x1E0C80C00];
  value = xpc_dictionary_get_value(*a2, "kWCMBTSetLinkQuality_Mode");
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v8 = xpc_dictionary_get_value(*a2, "kWCMBTSetLinkQuality_EventType");
  object[0] = v8;
  if (v8)
    xpc_retain(v8);
  else
    object[0] = xpc_null_create();
  v9 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if (!v7)
    goto LABEL_15;
  if (v9 == 1)
  {
    v10 = 0;
    v11 = *(_DWORD *)(a1 + 168) ^ 1;
    if (!v11)
      return;
    goto LABEL_16;
  }
  if (v9 == 2)
  {
    v9 = 2;
    v10 = 1;
    v11 = *(_DWORD *)(a1 + 168) ^ 2;
    if (!v11)
      return;
    goto LABEL_16;
  }
  v12 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
LABEL_15:
    v10 = 0;
    v9 = 0;
    LOBYTE(v11) = *(_DWORD *)(a1 + 168);
    if (!*(_DWORD *)(a1 + 168))
      return;
    goto LABEL_16;
  }
  LODWORD(object[0]) = 67109120;
  HIDWORD(object[0]) = v9;
  _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Unrecognized event type: %d", (uint8_t *)object, 8u);
  v10 = 0;
  v9 = 0;
  LOBYTE(v11) = *(_DWORD *)(a1 + 168);
  if (!*(_DWORD *)(a1 + 168))
    return;
LABEL_16:
  object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v13 = (const void *)*MEMORY[0x1E0DDF318];
  coex::Module::State::getSubProperty(a1, *MEMORY[0x1E0DDF318], a3, 1, (CFMutableDictionaryRef *)object);
  cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  v14 = (const void *)*MEMORY[0x1E0DDF308];
  coex::Module::State::getSubProperty(a1, *MEMORY[0x1E0DDF308], a3, 1, (CFMutableDictionaryRef *)&cf);
  v15 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if ((v11 & 1) != 0)
  {
    ctu::cf::update<__CFString const*,BOOL>((CFMutableDictionaryRef)object[0], (CFTypeRef)*MEMORY[0x1E0DDF6F0], v9 & 1);
    if ((v9 & 1) != 0)
      ctu::cf::update<__CFString const*,double>((__CFDictionary *)object[0], (CFTypeRef)*MEMORY[0x1E0DDF700], *v15, 1.0);
  }
  if ((v11 & 2) != 0)
  {
    ctu::cf::update<__CFString const*,BOOL>((CFMutableDictionaryRef)cf, (CFTypeRef)*MEMORY[0x1E0DDF6F0], v10);
    if (v10)
    {
      v16 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLinkQuality_BLERBlockCount");
      v24 = v16;
      if (v16)
        xpc_retain(v16);
      else
        v24 = xpc_null_create();
      v17 = xpc::dyn_cast_or_default((xpc *)&v24, 0);
      v18 = *v15;
      ctu::cf::update<__CFString const*,long long>((__CFDictionary *)cf, (CFTypeRef)*MEMORY[0x1E0DDF2A8], v17, *v15);
      xpc_release(v24);
      v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLinkQuality_BLERThreshold");
      v24 = v19;
      if (v19)
        xpc_retain(v19);
      else
        v24 = xpc_null_create();
      v20 = xpc::dyn_cast_or_default((xpc *)&v24, 0);
      ctu::cf::update<__CFString const*,long long>((__CFDictionary *)cf, (CFTypeRef)*MEMORY[0x1E0DDF590], v20, v18);
      xpc_release(v24);
    }
  }
  if ((_DWORD)a3)
    v21 = 152;
  else
    v21 = 136;
  v22 = *(void **)(a1 + v21);
  v24 = v22;
  if (v22)
    CFRetain(v22);
  ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v22, v13, object[0]);
  if (v22)
    CFRelease(v22);
  v23 = *(void **)(a1 + v21);
  v24 = v23;
  if (v23)
    CFRetain(v23);
  ctu::cf::update<__CFString const*,__CFDictionary *>((__CFDictionary *)v23, v14, cf);
  if (v23)
    CFRelease(v23);
  coex::Module::State::setLinkQualityMode_sync(a1, v9, a3);
  if (cf)
    CFRelease(cf);
  if (object[0])
    CFRelease(object[0]);
}

void sub_1BF59FD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, xpc_object_t a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void coex::Module::State::setLinkQualityMode_sync(uint64_t a1, int a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v7;
  uint64_t v8;
  const void *v9;
  int v10;
  const void *v11;
  const void *v12;
  const void *v13;
  char v14;
  const void *v15;
  const void *v16;
  const void *v17;
  std::__shared_weak_count *v18;
  const void *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  CFTypeID v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;
  NSObject *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  CFMutableDictionaryRef v34;
  _QWORD aBlock[6];
  std::__shared_weak_count *v36;
  void *v37;
  dispatch_object_t object;
  CFTypeRef cf;
  const void *v40;
  std::__shared_weak_count *v41;
  CFMutableDictionaryRef v42;
  CFMutableDictionaryRef v43;
  _QWORD v44[2];
  CFMutableDictionaryRef v45;

  v45 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = Mutable;
  if (Mutable)
    v45 = Mutable;
  v44[0] = 0xAAAAAAAAAAAAAAAALL;
  v44[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = 152;
  if (!(_DWORD)a3)
    v8 = 136;
  v9 = *(const void **)(a1 + v8);
  v40 = v9;
  if (v9)
    CFRetain(v9);
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v44, (const __CFDictionary *)v9);
  if (v9)
    CFRelease(v9);
  v10 = *(_DWORD *)(a1 + 168) ^ a2;
  if ((v10 & 1) != 0)
  {
    v43 = v7;
    if (v7)
      CFRetain(v7);
    v11 = (const void *)*MEMORY[0x1E0DDF318];
    v12 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v44[0])(v44, *MEMORY[0x1E0DDF318]);
    v13 = v12;
    if (v12)
    {
      CFRelease(v12);
      ctu::cf::update<__CFString const*,void const*>(v7, v11, v13);
    }
    if (!v7)
    {
      if ((v10 & 2) == 0)
        goto LABEL_28;
      v42 = 0;
LABEL_23:
      v14 = 1;
      goto LABEL_24;
    }
    CFRelease(v7);
    if ((v10 & 2) == 0)
      goto LABEL_28;
    v42 = v7;
  }
  else
  {
    if ((v10 & 2) == 0)
      goto LABEL_28;
    v42 = v7;
    if (!v7)
      goto LABEL_23;
  }
  CFRetain(v7);
  v14 = 0;
LABEL_24:
  v15 = (const void *)*MEMORY[0x1E0DDF308];
  v16 = (const void *)(*(uint64_t (**)(_QWORD *, _QWORD))v44[0])(v44, *MEMORY[0x1E0DDF308]);
  v17 = v16;
  if (v16)
  {
    CFRelease(v16);
    ctu::cf::update<__CFString const*,void const*>(v7, v15, v17);
  }
  if ((v14 & 1) == 0)
    CFRelease(v7);
LABEL_28:
  v19 = *(const void **)(a1 + 72);
  v18 = *(std::__shared_weak_count **)(a1 + 80);
  v40 = v19;
  if (!v18 || (v20 = std::__shared_weak_count::lock(v18), (v41 = v20) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  v22 = *(_QWORD *)(a1 + 104);
  if (v7 && (v23 = CFGetTypeID(v7), v23 == CFDictionaryGetTypeID()))
  {
    cf = v7;
    CFRetain(v7);
  }
  else
  {
    cf = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State23setLinkQualityMode_syncEjNS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_239;
  aBlock[4] = a1;
  aBlock[5] = v19;
  v36 = v21;
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v25 = __ldxr(p_shared_owners);
  while (__stxr(v25 + 1, p_shared_owners));
  v26 = _Block_copy(aBlock);
  v27 = *(NSObject **)(a1 + 88);
  if (v27)
    dispatch_retain(v27);
  if (v26)
  {
    v37 = _Block_copy(v26);
    object = v27;
    if (!v27)
      goto LABEL_41;
    goto LABEL_40;
  }
  v37 = 0;
  object = v27;
  if (v27)
LABEL_40:
    dispatch_retain(v27);
LABEL_41:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v22 + 48))(v22, &cf, a3, &v37);
  if (object)
    dispatch_release(object);
  if (v37)
    _Block_release(v37);
  if (v27)
    dispatch_release(v27);
  if (v26)
    _Block_release(v26);
  if (cf)
    CFRelease(cf);
  v28 = v36;
  if (!v36)
    goto LABEL_55;
  v29 = (unint64_t *)&v36->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    v31 = v41;
    if (!v41)
      goto LABEL_59;
  }
  else
  {
LABEL_55:
    v31 = v41;
    if (!v41)
      goto LABEL_59;
  }
  v32 = (unint64_t *)&v31->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (v33)
  {
LABEL_59:
    MEMORY[0x1C3B8B8B4](v44);
    v34 = v45;
    if (!v45)
      return;
    goto LABEL_60;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  MEMORY[0x1C3B8B8B4](v44);
  v34 = v45;
  if (v45)
LABEL_60:
    CFRelease(v34);
}

void sub_1BF5A01D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  NSObject *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  const void *v17;
  va_list va1;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, const void *);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  if (v9)
    dispatch_release(v9);
  if (v10)
    _Block_release(v10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  MEMORY[0x1C3B8B8B4](v12 - 88);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v12 - 72));
  _Unwind_Resume(a1);
}

void coex::Module::State::handleSetScanFreqBandFilter_sync(uint64_t a1, xpc_object_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const __CFAllocator *v9;
  const __CFArray *Mutable;
  xpc_object_t v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  uint64_t v14;
  xpc_object_t v15;
  size_t count;
  xpc_object_t v17;
  uint64_t v18;
  xpc_object_t v19;
  CFMutableDictionaryRef v20;
  __CFDictionary *v21;
  xpc_object_t value;
  int v23;
  xpc_object_t v24;
  int v25;
  __CFArray *v26;
  xpc_object_t v27;
  CFArrayRef v28;
  __CFDictionary *v29;
  __CFDictionary *v30;
  CFMutableDictionaryRef v31;
  CFMutableDictionaryRef v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  CFTypeID v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  void *v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  CFTypeRef v49;
  NSObject *v50;
  uint8_t *v51;
  unsigned int v52;
  uint64_t v53;
  CFTypeRef v54;
  CFTypeRef v55;
  _QWORD aBlock[6];
  std::__shared_weak_count *v57;
  void *v58;
  dispatch_object_t object;
  CFTypeRef cf;
  xpc_object_t xdict;
  CFTypeRef v62;
  CFArrayRef theArray;
  uint8_t buf[23];
  char v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8CD78](*a2);
  v7 = MEMORY[0x1E0C812C8];
  if (v6 != MEMORY[0x1E0C812C8])
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Invalid XPC array", buf, 2u);
    }
    return;
  }
  v52 = a3;
  theArray = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
    theArray = Mutable;
  memset(buf, 170, 16);
  v11 = *a2;
  if (*a2)
  {
    xpc_retain(*a2);
    *(_QWORD *)buf = v11;
  }
  else
  {
    v11 = xpc_null_create();
    *(_QWORD *)buf = v11;
    if (!v11)
    {
      v11 = 0;
      *(_QWORD *)buf = xpc_null_create();
      goto LABEL_10;
    }
  }
  xpc_retain(v11);
LABEL_10:
  *(_QWORD *)&buf[8] = 0;
  xpc_release(v11);
  v53 = a1;
  v55 = (CFTypeRef)*MEMORY[0x1E0DDF388];
  v54 = (CFTypeRef)*MEMORY[0x1E0DDF268];
  v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v14 = MEMORY[0x1E0C812F8];
  while (1)
  {
    v15 = *a2;
    if (*a2)
      xpc_retain(*a2);
    else
      v15 = xpc_null_create();
    if (MEMORY[0x1C3B8CD78](*a2) == v7)
    {
      count = xpc_array_get_count(*a2);
      if (!v15)
      {
LABEL_20:
        v17 = xpc_null_create();
        goto LABEL_21;
      }
    }
    else
    {
      count = 0;
      if (!v15)
        goto LABEL_20;
    }
    xpc_retain(v15);
    v17 = v15;
LABEL_21:
    xpc_release(v15);
    v19 = *(xpc_object_t *)buf;
    v18 = *(_QWORD *)&buf[8];
    xpc_release(v17);
    if (v18 == count && v19 == v17)
      break;
    v62 = 0;
    v20 = CFDictionaryCreateMutable(v9, 0, v12, v13);
    v21 = v20;
    if (v20)
      v62 = v20;
    xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v66 = buf;
    *((_QWORD *)&v66 + 1) = *(_QWORD *)&buf[8];
    xpc::array::object_proxy::operator xpc::dict((uint64_t)&v66, &xdict);
    if (MEMORY[0x1C3B8CD78](xdict) == v14)
    {
      value = xpc_dictionary_get_value(xdict, "kWCMCellularScanFreqBandFilter_CenterFreq");
      *(_QWORD *)&v66 = value;
      if (value)
        xpc_retain(value);
      else
        *(_QWORD *)&v66 = xpc_null_create();
      v23 = xpc::dyn_cast_or_default((xpc *)&v66, 0);
      xpc_release((xpc_object_t)v66);
      v24 = xpc_dictionary_get_value(xdict, "kWCMCellularScanFreqBandFilter_Bandwidth");
      *(_QWORD *)&v66 = v24;
      if (v24)
        xpc_retain(v24);
      else
        *(_QWORD *)&v66 = xpc_null_create();
      v25 = xpc::dyn_cast_or_default((xpc *)&v66, 0);
      xpc_release((xpc_object_t)v66);
      ctu::cf::insert<__CFString const*,long long>(v21, v55, v23, v9);
      ctu::cf::insert<__CFString const*,long long>(v21, v54, v25, v9);
    }
    v26 = theArray;
    *(_QWORD *)&v66 = v21;
    if (v21)
    {
      CFRetain(v21);
      CFArrayAppendValue(v26, v21);
      CFRelease(v21);
    }
    xpc_release(xdict);
    if (v21)
      CFRelease(v21);
    v27 = *(xpc_object_t *)buf;
    if (*(_QWORD *)buf)
      xpc_retain(*(xpc_object_t *)buf);
    else
      v27 = xpc_null_create();
    ++*(_QWORD *)&buf[8];
    xpc_release(v27);
  }
  xpc_release(*(xpc_object_t *)buf);
  v28 = theArray;
  if (!CFArrayGetCount(theArray))
  {
    v50 = *(NSObject **)(v53 + 40);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      xpc::object::to_string((xpc::object *)a2);
      if (v65 >= 0)
        v51 = buf;
      else
        v51 = *(uint8_t **)buf;
      LODWORD(v66) = 136315138;
      *(_QWORD *)((char *)&v66 + 4) = v51;
      _os_log_error_impl(&dword_1BF566000, v50, OS_LOG_TYPE_ERROR, "XPC array is: %s", (uint8_t *)&v66, 0xCu);
      if (v65 < 0)
        operator delete(*(void **)buf);
      v50 = *(NSObject **)(v53 + 40);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
      {
LABEL_84:
        if (!v28)
          return;
        goto LABEL_85;
      }
    }
    else if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      goto LABEL_84;
    }
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v28;
    _os_log_error_impl(&dword_1BF566000, v50, OS_LOG_TYPE_ERROR, "Scan frequency band filter array is: %@", buf, 0xCu);
    if (!v28)
      return;
LABEL_85:
    CFRelease(v28);
    return;
  }
  *(_QWORD *)&v66 = 0;
  v29 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v30 = v29;
  if (v29)
    *(_QWORD *)&v66 = v29;
  ctu::cf::insert<__CFString const*,__CFArray *>(v29, (CFTypeRef)*MEMORY[0x1E0DDF408], v28);
  v62 = 0;
  v31 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v32 = v31;
  if (v31)
    v62 = v31;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v31, (CFTypeRef)*MEMORY[0x1E0DDF500], v30);
  v34 = *(_QWORD *)(v53 + 72);
  v33 = *(std::__shared_weak_count **)(v53 + 80);
  *(_QWORD *)buf = v34;
  if (!v33 || (v35 = std::__shared_weak_count::lock(v33), (*(_QWORD *)&buf[8] = v35) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v36 = v35;
  v37 = *(_QWORD *)(v53 + 104);
  if (v32 && (v38 = CFGetTypeID(v32), v38 == CFDictionaryGetTypeID()))
  {
    cf = v32;
    CFRetain(v32);
  }
  else
  {
    cf = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleSetScanFreqBandFilter_syncEN3xpc5arrayENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_118;
  aBlock[4] = v53;
  aBlock[5] = v34;
  v57 = v36;
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v40 = __ldxr(p_shared_owners);
  while (__stxr(v40 + 1, p_shared_owners));
  v41 = _Block_copy(aBlock);
  v42 = *(NSObject **)(v53 + 88);
  if (v42)
    dispatch_retain(*(dispatch_object_t *)(v53 + 88));
  if (v41)
  {
    v58 = _Block_copy(v41);
    object = v42;
    if (v42)
      goto LABEL_56;
  }
  else
  {
    v58 = 0;
    object = v42;
    if (v42)
LABEL_56:
      dispatch_retain(v42);
  }
  (*(void (**)(uint64_t, CFTypeRef *, _QWORD, void **))(*(_QWORD *)v37 + 48))(v37, &cf, v52, &v58);
  if (object)
    dispatch_release(object);
  if (v58)
    _Block_release(v58);
  if (v42)
    dispatch_release(v42);
  if (v41)
    _Block_release(v41);
  if (cf)
    CFRelease(cf);
  v43 = v57;
  if (v57)
  {
    v44 = (unint64_t *)&v57->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_76;
  v47 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (!v48)
  {
    ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
    std::__shared_weak_count::__release_weak(v46);
    v49 = v62;
    if (v62)
LABEL_77:
      CFRelease(v49);
  }
  else
  {
LABEL_76:
    v49 = v62;
    if (v62)
      goto LABEL_77;
  }
  if ((_QWORD)v66)
    CFRelease((CFTypeRef)v66);
  v28 = theArray;
  if (theArray)
    goto LABEL_85;
}

void sub_1BF5A09A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t object,char a25,int a26,__int16 a27,char a28,char a29,xpc_object_t a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleSetScanFreqBandFilter_syncEN3xpc5arrayENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Failed to set: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetWiFiStatus_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  xpc_object_t value;
  int v8;
  xpc_object_t v9;
  int v10;
  xpc_object_t v11;
  int v12;
  const __CFAllocator *v13;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  CFTypeID v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v41;
  CFTypeRef v42;
  __int128 buf;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  value = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_CenterFrequency");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v8 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  v9 = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_ChannelBandwidth");
  *(_QWORD *)&buf = v9;
  if (v9)
    xpc_retain(v9);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v10 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  v11 = xpc_dictionary_get_value(*a2, "WCMCellularSetWiFiStatus_TxPower");
  *(_QWORD *)&buf = v11;
  if (v11)
    xpc_retain(v11);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v12 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  xpc_release((xpc_object_t)buf);
  v42 = 0;
  v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = Mutable;
  if (Mutable)
    v42 = Mutable;
  ctu::cf::insert<__CFString const*,int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF388], v8, v13);
  ctu::cf::insert<__CFString const*,int>(v15, (CFTypeRef)*MEMORY[0x1E0DDF268], v10, v13);
  ctu::cf::insert<__CFString const*,int>(v15, (CFTypeRef)*MEMORY[0x1E0DDF230], v12, v13);
  v41 = 0;
  v16 = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = v16;
  if (v16)
    v41 = v16;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E0DDF350], v15);
  v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting WiFi status with: %@", (uint8_t *)&buf, 0xCu);
  }
  v20 = a1[9];
  v19 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v20;
  if (!v19 || (v21 = std::__shared_weak_count::lock(v19), (*((_QWORD *)&buf + 1) = v21) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  v23 = a1[13];
  if (v17 && (v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    cf = v17;
    CFRetain(v17);
  }
  else
  {
    cf = 0;
  }
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v36[2] = ___ZN4coex6Module5State24handleSetWiFiStatus_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v36[3] = &__block_descriptor_tmp_122;
  v36[4] = a1;
  v36[5] = v20;
  v37 = v22;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v27 = _Block_copy(v36);
  v28 = a1[11];
  if (v28)
    dispatch_retain(v28);
  if (v27)
  {
    aBlock = _Block_copy(v27);
    object = v28;
    if (!v28)
      goto LABEL_32;
    goto LABEL_31;
  }
  aBlock = 0;
  object = v28;
  if (v28)
LABEL_31:
    dispatch_retain(v28);
LABEL_32:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (cf)
    CFRelease(cf);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_51;
  v33 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_51:
    v35 = v41;
    if (!v41)
      goto LABEL_53;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = v41;
  if (v41)
LABEL_52:
    CFRelease(v35);
LABEL_53:
  if (v42)
    CFRelease(v42);
}

void sub_1BF5A1068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1BF5A1164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State24handleSetWiFiStatus_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set wifi status: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetTimeShareConfigReq_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  unsigned int v14;
  xpc_object_t v15;
  unsigned int v16;
  xpc_object_t v17;
  unsigned __int16 v18;
  xpc_object_t v19;
  unsigned __int16 v20;
  xpc_object_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  CFMutableArrayRef v25;
  xpc_object_t v26;
  const CFDictionaryKeyCallBacks *v27;
  const CFDictionaryValueCallBacks *v28;
  xpc_object_t v29;
  size_t count;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  CFMutableDictionaryRef v34;
  __CFDictionary *v35;
  xpc_object_t v36;
  int v37;
  xpc_object_t v38;
  int v39;
  __CFArray *v40;
  xpc_object_t v41;
  CFMutableArrayRef v42;
  CFMutableDictionaryRef v43;
  CFMutableDictionaryRef v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  CFTypeID v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  void *v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  xpc_object_t v62;
  uint64_t v63;
  unsigned int v64;
  CFTypeRef v65;
  CFTypeRef v66;
  _QWORD aBlock[6];
  std::__shared_weak_count *v68;
  void *v69;
  dispatch_object_t v70;
  CFTypeRef cf;
  xpc_object_t object[2];
  xpc_object_t xdict;
  CFMutableDictionaryRef v74;
  CFMutableArrayRef v75;
  xpc_object_t v76;
  __CFDictionary *v77;
  uint8_t buf[16];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetTimeShareConfig_Enable"))
  {
    v77 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
    if (Mutable)
      v77 = Mutable;
    value = xpc_dictionary_get_value(*a2, "kWCMCellularSetTimeShareConfig_Enable");
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF538], v12);
    xpc_release(*(xpc_object_t *)buf);
    v13 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_CoexTech");
    *(_QWORD *)buf = v13;
    if (v13)
      xpc_retain(v13);
    else
      *(_QWORD *)buf = xpc_null_create();
    v14 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF570], v14, v7);
    xpc_release(*(xpc_object_t *)buf);
    v15 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_CallType");
    *(_QWORD *)buf = v15;
    if (v15)
      xpc_retain(v15);
    else
      *(_QWORD *)buf = xpc_null_create();
    v16 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF568], v16, v7);
    xpc_release(*(xpc_object_t *)buf);
    v17 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_LongDrxCycle");
    *(_QWORD *)buf = v17;
    if (v17)
      xpc_retain(v17);
    else
      *(_QWORD *)buf = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned short>(v9, (CFTypeRef)*MEMORY[0x1E0DDF650], v18, v7);
    xpc_release(*(xpc_object_t *)buf);
    v19 = xpc_dictionary_get_value(*a2, "kWCMCellularTimeShareConfig_ShortDrxCycle");
    *(_QWORD *)buf = v19;
    if (v19)
      xpc_retain(v19);
    else
      *(_QWORD *)buf = xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned short>(v9, (CFTypeRef)*MEMORY[0x1E0DDF670], v20, v7);
    xpc_release(*(xpc_object_t *)buf);
    v21 = xpc_dictionary_get_value(*a2, "kWCMCellularTImeShareConfig_SleepWakeDurScale");
    *(_QWORD *)buf = v21;
    if (v21)
      xpc_retain(v21);
    else
      *(_QWORD *)buf = xpc_null_create();
    v22 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF6C0], v22, v7);
    xpc_release(*(xpc_object_t *)buf);
    v76 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)buf = a2;
    *(_QWORD *)&buf[8] = "kWCMCellularTImeShareConfig_BandInformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v76);
    v23 = MEMORY[0x1C3B8CD78](v76);
    v24 = MEMORY[0x1E0C812C8];
    if (v23 == MEMORY[0x1E0C812C8])
    {
      v75 = 0;
      v25 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
      if (v25)
        v75 = v25;
      memset(buf, 170, sizeof(buf));
      v26 = v76;
      if (v76)
      {
        xpc_retain(v76);
        *(_QWORD *)buf = v26;
      }
      else
      {
        v26 = xpc_null_create();
        *(_QWORD *)buf = v26;
        if (!v26)
        {
          v26 = 0;
          *(_QWORD *)buf = xpc_null_create();
          goto LABEL_35;
        }
      }
      xpc_retain(v26);
LABEL_35:
      *(_QWORD *)&buf[8] = 0;
      xpc_release(v26);
      v63 = a1;
      v64 = a3;
      v65 = (CFTypeRef)*MEMORY[0x1E0DDF268];
      v66 = (CFTypeRef)*MEMORY[0x1E0DDF388];
      v27 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        v29 = v76;
        if (v76)
          xpc_retain(v76);
        else
          v29 = xpc_null_create();
        if (MEMORY[0x1C3B8CD78](v76) == v24)
        {
          count = xpc_array_get_count(v76);
          if (!v29)
          {
LABEL_45:
            v31 = xpc_null_create();
            goto LABEL_46;
          }
        }
        else
        {
          count = 0;
          if (!v29)
            goto LABEL_45;
        }
        xpc_retain(v29);
        v31 = v29;
LABEL_46:
        xpc_release(v29);
        v33 = *(xpc_object_t *)buf;
        v32 = *(_QWORD *)&buf[8];
        xpc_release(v31);
        if (v32 == count && v33 == v31)
        {
          xpc_release(*(xpc_object_t *)buf);
          v42 = v75;
          v9 = v77;
          ctu::cf::insert<__CFString const*,__CFArray *>(v77, (CFTypeRef)*MEMORY[0x1E0DDF6D8], v75);
          a3 = v64;
          a1 = v63;
          if (v42)
            CFRelease(v42);
          break;
        }
        v74 = 0;
        v34 = CFDictionaryCreateMutable(v7, 0, v27, v28);
        v35 = v34;
        if (v34)
          v74 = v34;
        object[0] = buf;
        object[1] = *(xpc_object_t *)&buf[8];
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc::array::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
        if (MEMORY[0x1C3B8CD78](xdict) == MEMORY[0x1E0C812F8])
        {
          v36 = xpc_dictionary_get_value(xdict, "kWCMCellularTImeShareConfig_BandSet_Frequency");
          object[0] = v36;
          if (v36)
            xpc_retain(v36);
          else
            object[0] = xpc_null_create();
          v37 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          v38 = xpc_dictionary_get_value(xdict, "kWCMCellularTImeShareConfig_BandSet_BW");
          object[0] = v38;
          if (v38)
            xpc_retain(v38);
          else
            object[0] = xpc_null_create();
          v39 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          ctu::cf::insert<__CFString const*,long long>(v35, v66, v37, v7);
          ctu::cf::insert<__CFString const*,long long>(v35, v65, v39, v7);
        }
        v40 = v75;
        object[0] = v35;
        if (v35)
        {
          CFRetain(v35);
          CFArrayAppendValue(v40, v35);
          CFRelease(v35);
        }
        xpc_release(xdict);
        if (v35)
          CFRelease(v35);
        v41 = *(xpc_object_t *)buf;
        if (*(_QWORD *)buf)
          xpc_retain(*(xpc_object_t *)buf);
        else
          v41 = xpc_null_create();
        ++*(_QWORD *)&buf[8];
        xpc_release(v41);
      }
    }
    object[0] = 0;
    v43 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v44 = v43;
    if (v43)
      object[0] = v43;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v43, (CFTypeRef)*MEMORY[0x1E0DDF410], v9);
    v45 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v44;
      _os_log_impl(&dword_1BF566000, v45, OS_LOG_TYPE_DEFAULT, "#I Setting Time share config with: %@", buf, 0xCu);
    }
    v47 = *(_QWORD *)(a1 + 72);
    v46 = *(std::__shared_weak_count **)(a1 + 80);
    *(_QWORD *)buf = v47;
    if (!v46 || (v48 = std::__shared_weak_count::lock(v46), (*(_QWORD *)&buf[8] = v48) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v49 = v48;
    v50 = *(_QWORD *)(a1 + 104);
    if (v44 && (v51 = CFGetTypeID(v44), v51 == CFDictionaryGetTypeID()))
    {
      cf = v44;
      CFRetain(v44);
    }
    else
    {
      cf = 0;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State32handleSetTimeShareConfigReq_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_132;
    aBlock[4] = a1;
    aBlock[5] = v47;
    v68 = v49;
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldxr(p_shared_owners);
    while (__stxr(v53 + 1, p_shared_owners));
    v54 = _Block_copy(aBlock);
    v55 = *(NSObject **)(a1 + 88);
    if (v55)
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    if (v54)
    {
      v69 = _Block_copy(v54);
      v70 = v55;
      if (!v55)
        goto LABEL_83;
    }
    else
    {
      v69 = 0;
      v70 = v55;
      if (!v55)
      {
LABEL_83:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v50 + 48))(v50, &cf, a3, &v69);
        if (v70)
          dispatch_release(v70);
        if (v69)
          _Block_release(v69);
        if (v55)
          dispatch_release(v55);
        if (v54)
          _Block_release(v54);
        if (cf)
          CFRelease(cf);
        v56 = v68;
        if (v68)
        {
          v57 = (unint64_t *)&v68->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        v59 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_102;
        v60 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          v62 = object[0];
          if (!object[0])
          {
LABEL_104:
            xpc_release(v76);
            if (v77)
              CFRelease(v77);
            return;
          }
        }
        else
        {
LABEL_102:
          v62 = object[0];
          if (!object[0])
            goto LABEL_104;
        }
        CFRelease(v62);
        goto LABEL_104;
      }
    }
    dispatch_retain(v55);
    goto LABEL_83;
  }
  v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing Time share config", buf, 2u);
  }
}

void sub_1BF5A1B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t a24,uint64_t a25,xpc_object_t object,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleSetTimeShareConfigReq_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Time share config: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetWCI2TxAntMap_sync(uint64_t a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  CFMutableArrayRef v17;
  xpc_object_t v18;
  const CFDictionaryKeyCallBacks *v19;
  const CFDictionaryValueCallBacks *v20;
  xpc_object_t v21;
  size_t count;
  xpc_object_t v23;
  uint64_t v24;
  xpc_object_t v25;
  CFMutableDictionaryRef v26;
  __CFDictionary *v27;
  xpc_object_t v28;
  unsigned __int8 v29;
  xpc_object_t v30;
  unsigned __int8 v31;
  __CFArray *v32;
  xpc_object_t v33;
  CFMutableArrayRef v34;
  xpc_object_t v35;
  xpc_object_t v36;
  int v37;
  CFMutableDictionaryRef v38;
  CFMutableDictionaryRef v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  CFTypeID v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  void *v49;
  NSObject *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  CFMutableArrayRef v57;
  uint64_t v58;
  unsigned int v59;
  CFTypeRef v60;
  CFTypeRef v61;
  _QWORD aBlock[6];
  std::__shared_weak_count *v63;
  void *v64;
  dispatch_object_t v65;
  CFTypeRef cf;
  xpc_object_t object[2];
  xpc_object_t xdict;
  CFMutableDictionaryRef v69;
  CFMutableArrayRef v70;
  xpc_object_t v71;
  __CFDictionary *v72;
  uint8_t buf[16];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_Enable"))
  {
    v72 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
    if (Mutable)
      v72 = Mutable;
    value = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_Enable");
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF460], v12);
    xpc_release(*(xpc_object_t *)buf);
    v13 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2TxAntMap_DefaultIdx");
    *(_QWORD *)buf = v13;
    if (v13)
      xpc_retain(v13);
    else
      *(_QWORD *)buf = xpc_null_create();
    v14 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF548], v14, v7);
    xpc_release(*(xpc_object_t *)buf);
    v71 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)buf = a2;
    *(_QWORD *)&buf[8] = "kWCMCellularSetWCI2TxAntMap_InformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v71);
    v15 = MEMORY[0x1C3B8CD78](v71);
    v16 = MEMORY[0x1E0C812C8];
    if (v15 == MEMORY[0x1E0C812C8])
    {
      v70 = 0;
      v17 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
      if (v17)
        v70 = v17;
      memset(buf, 170, sizeof(buf));
      v18 = v71;
      if (v71)
      {
        xpc_retain(v71);
        *(_QWORD *)buf = v18;
      }
      else
      {
        v18 = xpc_null_create();
        *(_QWORD *)buf = v18;
        if (!v18)
        {
          v18 = 0;
          *(_QWORD *)buf = xpc_null_create();
          goto LABEL_23;
        }
      }
      xpc_retain(v18);
LABEL_23:
      *(_QWORD *)&buf[8] = 0;
      xpc_release(v18);
      v58 = a1;
      v59 = a3;
      v60 = (CFTypeRef)*MEMORY[0x1E0DDF628];
      v61 = (CFTypeRef)*MEMORY[0x1E0DDF5F0];
      v19 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v20 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      while (1)
      {
        v21 = v71;
        if (v71)
          xpc_retain(v71);
        else
          v21 = xpc_null_create();
        if (MEMORY[0x1C3B8CD78](v71) == v16)
        {
          count = xpc_array_get_count(v71);
          if (!v21)
          {
LABEL_33:
            v23 = xpc_null_create();
            goto LABEL_34;
          }
        }
        else
        {
          count = 0;
          if (!v21)
            goto LABEL_33;
        }
        xpc_retain(v21);
        v23 = v21;
LABEL_34:
        xpc_release(v21);
        v25 = *(xpc_object_t *)buf;
        v24 = *(_QWORD *)&buf[8];
        xpc_release(v23);
        if (v24 == count && v25 == v23)
        {
          xpc_release(*(xpc_object_t *)buf);
          v34 = v70;
          v9 = v72;
          ctu::cf::insert<__CFString const*,__CFArray *>(v72, (CFTypeRef)*MEMORY[0x1E0DDF630], v70);
          a3 = v59;
          a1 = v58;
          if (v34)
            CFRelease(v34);
          break;
        }
        v69 = 0;
        v26 = CFDictionaryCreateMutable(v7, 0, v19, v20);
        v27 = v26;
        if (v26)
          v69 = v26;
        object[0] = buf;
        object[1] = *(xpc_object_t *)&buf[8];
        xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
        xpc::array::object_proxy::operator xpc::dict((uint64_t)object, &xdict);
        if (MEMORY[0x1C3B8CD78](xdict) == MEMORY[0x1E0C812F8])
        {
          v28 = xpc_dictionary_get_value(xdict, "kWCMCellularSetWCI2TxAntMap_Infoet_AntIdx");
          object[0] = v28;
          if (v28)
            xpc_retain(v28);
          else
            object[0] = xpc_null_create();
          v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          v30 = xpc_dictionary_get_value(xdict, "kWCMCellularSetWCI2TxAntMap_InfoSet_WCI2Idx");
          object[0] = v30;
          if (v30)
            xpc_retain(v30);
          else
            object[0] = xpc_null_create();
          v31 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          ctu::cf::insert<__CFString const*,unsigned char>(v27, v61, v29, v7);
          ctu::cf::insert<__CFString const*,unsigned char>(v27, v60, v31, v7);
        }
        v32 = v70;
        object[0] = v27;
        if (v27)
        {
          CFRetain(v27);
          CFArrayAppendValue(v32, v27);
          CFRelease(v27);
        }
        xpc_release(xdict);
        if (v27)
          CFRelease(v27);
        v33 = *(xpc_object_t *)buf;
        if (*(_QWORD *)buf)
          xpc_retain(*(xpc_object_t *)buf);
        else
          v33 = xpc_null_create();
        ++*(_QWORD *)&buf[8];
        xpc_release(v33);
      }
    }
    object[0] = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v35 = xpc_dictionary_get_value(*a2, "kWCMCellularSetWCI2Type7FRTwoTxEnable");
    object[0] = v35;
    if (v35)
    {
      xpc_retain(v35);
      v36 = object[0];
    }
    else
    {
      v36 = xpc_null_create();
      object[0] = v36;
    }
    if (MEMORY[0x1C3B8CD78](v36) != MEMORY[0x1E0C81350])
    {
      v37 = xpc::dyn_cast_or_default((xpc *)object, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF660], v37);
    }
    v70 = 0;
    v38 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v39 = v38;
    if (v38)
      v70 = v38;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v38, (CFTypeRef)*MEMORY[0x1E0DDF3A8], v9);
    v40 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v39;
      _os_log_impl(&dword_1BF566000, v40, OS_LOG_TYPE_DEFAULT, "#I Setting Tx antenna map with: %@", buf, 0xCu);
    }
    v42 = *(_QWORD *)(a1 + 72);
    v41 = *(std::__shared_weak_count **)(a1 + 80);
    *(_QWORD *)buf = v42;
    if (!v41 || (v43 = std::__shared_weak_count::lock(v41), (*(_QWORD *)&buf[8] = v43) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v44 = v43;
    v45 = *(_QWORD *)(a1 + 104);
    if (v39 && (v46 = CFGetTypeID(v39), v46 == CFDictionaryGetTypeID()))
    {
      cf = v39;
      CFRetain(v39);
    }
    else
    {
      cf = 0;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State26handleSetWCI2TxAntMap_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_139;
    aBlock[4] = a1;
    aBlock[5] = v42;
    v63 = v44;
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v48 = __ldxr(p_shared_owners);
    while (__stxr(v48 + 1, p_shared_owners));
    v49 = _Block_copy(aBlock);
    v50 = *(NSObject **)(a1 + 88);
    if (v50)
      dispatch_retain(*(dispatch_object_t *)(a1 + 88));
    if (v49)
    {
      v64 = _Block_copy(v49);
      v65 = v50;
      if (!v50)
        goto LABEL_76;
    }
    else
    {
      v64 = 0;
      v65 = v50;
      if (!v50)
      {
LABEL_76:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v45 + 48))(v45, &cf, a3, &v64);
        if (v65)
          dispatch_release(v65);
        if (v64)
          _Block_release(v64);
        if (v50)
          dispatch_release(v50);
        if (v49)
          _Block_release(v49);
        if (cf)
          CFRelease(cf);
        v51 = v63;
        if (v63)
        {
          v52 = (unint64_t *)&v63->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v54 = *(std::__shared_weak_count **)&buf[8];
        if (!*(_QWORD *)&buf[8])
          goto LABEL_95;
        v55 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          v57 = v70;
          if (!v70)
          {
LABEL_97:
            xpc_release(object[0]);
            xpc_release(v71);
            if (v72)
              CFRelease(v72);
            return;
          }
        }
        else
        {
LABEL_95:
          v57 = v70;
          if (!v70)
            goto LABEL_97;
        }
        CFRelease(v57);
        goto LABEL_97;
      }
    }
    dispatch_retain(v50);
    goto LABEL_76;
  }
  v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing Tx antenna map", buf, 2u);
  }
}

void sub_1BF5A263C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,xpc_object_t object,uint64_t a25,xpc_object_t a26,char a27)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State26handleSetWCI2TxAntMap_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Tx antenna map: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetAntBlocking_sync(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  CFMutableArrayRef v14;
  xpc_object_t v15;
  xpc_object_t v16;
  size_t count;
  xpc_object_t v18;
  xpc_object_t v19;
  uint64_t v20;
  CFMutableDictionaryRef v21;
  __CFDictionary *v22;
  xpc_object_t value;
  unsigned __int8 v24;
  CFMutableArrayRef v25;
  xpc_object_t v26;
  void *v27;
  size_t i;
  xpc_object_t v29;
  xpc_object_t v30;
  size_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  int v34;
  __CFArray *v35;
  CFNumberRef v36;
  CFTypeRef v37;
  __CFArray *v38;
  xpc_object_t v39;
  CFMutableArrayRef v40;
  CFMutableDictionaryRef v41;
  CFMutableDictionaryRef v42;
  NSObject *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  CFTypeID v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  void *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  xpc_object_t v60;
  unsigned int v61;
  CFTypeRef v62;
  CFTypeRef v63;
  _QWORD aBlock[6];
  std::__shared_weak_count *v65;
  void *v66;
  dispatch_object_t v67;
  CFTypeRef v68;
  xpc_object_t v69;
  CFTypeRef v70;
  xpc_object_t xarray;
  xpc_object_t object;
  const char *v73;
  xpc_object_t xdict;
  CFTypeRef cf;
  CFMutableArrayRef v76;
  xpc_object_t v77;
  __CFDictionary *v78;
  int valuePtr;
  uint8_t buf[16];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8CD78](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  v78 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (Mutable)
    v78 = Mutable;
  v77 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = "kWCMCellularSetAntBlocking_BandInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v77);
  v12 = MEMORY[0x1C3B8CD78](v77);
  v13 = MEMORY[0x1E0C812C8];
  if (v12 == MEMORY[0x1E0C812C8])
  {
    v76 = 0;
    v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (v14)
      v76 = v14;
    memset(buf, 170, sizeof(buf));
    v15 = v77;
    if (v77)
    {
      xpc_retain(v77);
      *(_QWORD *)buf = v15;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)buf = v15;
      if (!v15)
      {
        v15 = 0;
        *(_QWORD *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(_QWORD *)&buf[8] = 0;
    xpc_release(v15);
    v61 = a3;
    v63 = (CFTypeRef)*MEMORY[0x1E0DDF3D0];
    v62 = (CFTypeRef)*MEMORY[0x1E0DDF428];
    while (1)
    {
      v16 = v77;
      if (v77)
        xpc_retain(v77);
      else
        v16 = xpc_null_create();
      if (MEMORY[0x1C3B8CD78](v77) == v13)
      {
        count = xpc_array_get_count(v77);
        if (!v16)
        {
LABEL_23:
          v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        count = 0;
        if (!v16)
          goto LABEL_23;
      }
      xpc_retain(v16);
      v18 = v16;
LABEL_24:
      xpc_release(v16);
      v19 = *(xpc_object_t *)buf;
      v20 = *(_QWORD *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        v40 = v76;
        v11 = v78;
        ctu::cf::insert<__CFString const*,__CFArray *>(v78, (CFTypeRef)*MEMORY[0x1E0DDF5B8], v76);
        a3 = v61;
        if (v40)
          CFRelease(v40);
        break;
      }
      cf = 0;
      v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = v21;
      if (v21)
        cf = v21;
      object = buf;
      v73 = *(const char **)&buf[8];
      xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
      if (MEMORY[0x1C3B8CD78](xdict) != v7)
        goto LABEL_62;
      value = xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v24 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      xpc_release(object);
      ctu::cf::insert<__CFString const*,unsigned char>(v22, v63, v24, v9);
      xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      object = &xdict;
      v73 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1C3B8CD78](xarray) != v13)
        goto LABEL_61;
      v70 = 0;
      v25 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
      if (v25)
        v70 = v25;
      v26 = xarray;
      if (xarray)
      {
        xpc_retain(xarray);
      }
      else
      {
        v26 = xpc_null_create();
        if (!v26)
        {
          v26 = xpc_null_create();
          v27 = 0;
          goto LABEL_39;
        }
      }
      xpc_retain(v26);
      v27 = v26;
LABEL_39:
      xpc_release(v27);
      for (i = 0; ; ++i)
      {
        v30 = xarray;
        if (xarray)
          xpc_retain(xarray);
        else
          v30 = xpc_null_create();
        if (MEMORY[0x1C3B8CD78](xarray) == v13)
        {
          v31 = xpc_array_get_count(xarray);
          if (!v30)
          {
LABEL_49:
            v32 = xpc_null_create();
            goto LABEL_50;
          }
        }
        else
        {
          v31 = 0;
          if (!v30)
            goto LABEL_49;
        }
        xpc_retain(v30);
        v32 = v30;
LABEL_50:
        xpc_release(v30);
        xpc_release(v32);
        if (i == v31 && v26 == v32)
          break;
        v33 = xpc_array_get_value(v26, i);
        v69 = v33;
        if (v33)
          xpc_retain(v33);
        else
          v69 = xpc_null_create();
        v34 = xpc::dyn_cast_or_default((xpc *)&v69, 0);
        v35 = (__CFArray *)v70;
        valuePtr = v34;
        v36 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        object = v36;
        if (v36)
        {
          CFArrayAppendValue(v35, v36);
          CFRelease(v36);
        }
        xpc_release(v69);
        if (v26)
        {
          xpc_retain(v26);
          v29 = v26;
        }
        else
        {
          v29 = xpc_null_create();
        }
        xpc_release(v29);
      }
      xpc_release(v26);
      v37 = v70;
      v22 = (__CFDictionary *)cf;
      ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v62, v70);
      if (v37)
        CFRelease(v37);
LABEL_61:
      xpc_release(xarray);
LABEL_62:
      v38 = v76;
      object = v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v38, v22);
        CFRelease(v22);
      }
      xpc_release(xdict);
      if (cf)
        CFRelease(cf);
      v39 = *(xpc_object_t *)buf;
      if (*(_QWORD *)buf)
        xpc_retain(*(xpc_object_t *)buf);
      else
        v39 = xpc_null_create();
      ++*(_QWORD *)&buf[8];
      xpc_release(v39);
    }
  }
  object = 0;
  v41 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v42 = v41;
  if (v41)
    object = v41;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v41, (CFTypeRef)*MEMORY[0x1E0DDF368], v11);
  v43 = a1[5];
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v42;
    _os_log_impl(&dword_1BF566000, v43, OS_LOG_TYPE_DEFAULT, "#I Setting Ant blocking with: %@", buf, 0xCu);
  }
  v45 = a1[9];
  v44 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)buf = v45;
  if (!v44 || (v46 = std::__shared_weak_count::lock(v44), (*(_QWORD *)&buf[8] = v46) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v47 = v46;
  v48 = a1[13];
  if (v42 && (v49 = CFGetTypeID(v42), v49 == CFDictionaryGetTypeID()))
  {
    v68 = v42;
    CFRetain(v42);
  }
  else
  {
    v68 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State25handleSetAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_143;
  aBlock[4] = a1;
  aBlock[5] = v45;
  v65 = v47;
  p_shared_owners = (unint64_t *)&v47->__shared_owners_;
  do
    v51 = __ldxr(p_shared_owners);
  while (__stxr(v51 + 1, p_shared_owners));
  v52 = _Block_copy(aBlock);
  v53 = a1[11];
  if (v53)
    dispatch_retain(v53);
  if (v52)
  {
    v66 = _Block_copy(v52);
    v67 = v53;
    if (!v53)
      goto LABEL_88;
    goto LABEL_87;
  }
  v66 = 0;
  v67 = v53;
  if (v53)
LABEL_87:
    dispatch_retain(v53);
LABEL_88:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v48 + 48))(v48, &v68, a3, &v66);
  if (v67)
    dispatch_release(v67);
  if (v66)
    _Block_release(v66);
  if (v53)
    dispatch_release(v53);
  if (v52)
    _Block_release(v52);
  if (v68)
    CFRelease(v68);
  v54 = v65;
  if (v65)
  {
    v55 = (unint64_t *)&v65->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_107;
  v58 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v59 = __ldaxr(v58);
  while (__stlxr(v59 - 1, v58));
  if (v59)
  {
LABEL_107:
    v60 = object;
    if (!object)
      goto LABEL_109;
    goto LABEL_108;
  }
  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
  std::__shared_weak_count::__release_weak(v57);
  v60 = object;
  if (object)
LABEL_108:
    CFRelease(v60);
LABEL_109:
  xpc_release(v77);
  if (v78)
    CFRelease(v78);
}

void sub_1BF5A3100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,xpc_object_t a22,char a23,xpc_object_t object,xpc_object_t a25,uint64_t a26,xpc_object_t a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State25handleSetAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleTransparentMessageReq_sync(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  __CFDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  CFMutableArrayRef v12;
  xpc_object_t v13;
  const void *v14;
  xpc_object_t v15;
  size_t count;
  xpc_object_t v17;
  xpc_object_t v18;
  uint64_t v19;
  CFMutableDictionaryRef v20;
  __CFDictionary *v21;
  xpc_object_t value;
  unsigned int v23;
  CFMutableArrayRef v24;
  xpc_object_t v25;
  void *v26;
  size_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  size_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  int v33;
  __CFArray *v34;
  CFNumberRef v35;
  CFTypeRef v36;
  __CFArray *v37;
  xpc_object_t v38;
  CFMutableArrayRef v39;
  CFMutableDictionaryRef v40;
  CFMutableDictionaryRef v41;
  NSObject *v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  CFTypeID v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  void *v51;
  NSObject *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  xpc_object_t v59;
  CFTypeRef v60;
  _QWORD aBlock[6];
  std::__shared_weak_count *v62;
  void *v63;
  dispatch_object_t v64;
  CFTypeRef cf;
  xpc_object_t v66;
  CFTypeRef v67;
  xpc_object_t xarray;
  xpc_object_t object;
  const char *v70;
  xpc_object_t xdict;
  int v72[2];
  CFMutableArrayRef v73;
  xpc_object_t v74;
  __CFDictionary *v75;
  int valuePtr;
  uint8_t buf[16];
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  v75 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v75 = Mutable;
  v74 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = "kWCMCellularTransparentMessageInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v74);
  v10 = MEMORY[0x1C3B8CD78](v74);
  v11 = MEMORY[0x1E0C812C8];
  if (v10 == MEMORY[0x1E0C812C8])
  {
    v73 = 0;
    v12 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
    if (v12)
      v73 = v12;
    memset(buf, 170, sizeof(buf));
    v13 = v74;
    if (v74)
    {
      xpc_retain(v74);
      *(_QWORD *)buf = v13;
    }
    else
    {
      v13 = xpc_null_create();
      *(_QWORD *)buf = v13;
      if (!v13)
      {
        v13 = 0;
        *(_QWORD *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v13);
LABEL_13:
    *(_QWORD *)&buf[8] = 0;
    xpc_release(v13);
    v14 = (const void *)*MEMORY[0x1E0DDF540];
    v60 = (CFTypeRef)*MEMORY[0x1E0DDF658];
    while (1)
    {
      v15 = v74;
      if (v74)
        xpc_retain(v74);
      else
        v15 = xpc_null_create();
      if (MEMORY[0x1C3B8CD78](v74) == v11)
      {
        count = xpc_array_get_count(v74);
        if (!v15)
        {
LABEL_23:
          v17 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        count = 0;
        if (!v15)
          goto LABEL_23;
      }
      xpc_retain(v15);
      v17 = v15;
LABEL_24:
      xpc_release(v15);
      v18 = *(xpc_object_t *)buf;
      v19 = *(_QWORD *)&buf[8];
      xpc_release(v17);
      if (v19 == count && v18 == v17)
      {
        xpc_release(*(xpc_object_t *)buf);
        v39 = v73;
        v9 = v75;
        ctu::cf::insert<__CFString const*,__CFArray *>(v75, (CFTypeRef)*MEMORY[0x1E0DDF6C8], v73);
        a3 = a3;
        if (v39)
          CFRelease(v39);
        break;
      }
      *(_QWORD *)v72 = 0;
      v20 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v21 = v20;
      if (v20)
        *(_QWORD *)v72 = v20;
      object = buf;
      v70 = *(const char **)&buf[8];
      xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&object, &xdict);
      value = xpc_dictionary_get_value(xdict, "kWCMCellularTransparentMessage_Type");
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      v23 = xpc::dyn_cast_or_default((xpc *)&object, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v21, v14, v23, v7);
      xpc_release(object);
      xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      object = &xdict;
      v70 = "kWCMCellularTransparentMessage_ByteList";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&object, &xarray);
      if (MEMORY[0x1C3B8CD78](xarray) == v11)
      {
        v67 = 0;
        v24 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E0C9B378]);
        if (v24)
          v67 = v24;
        v25 = xarray;
        if (xarray)
        {
          xpc_retain(xarray);
          goto LABEL_37;
        }
        v25 = xpc_null_create();
        if (v25)
        {
LABEL_37:
          xpc_retain(v25);
          v26 = v25;
        }
        else
        {
          v25 = xpc_null_create();
          v26 = 0;
        }
        xpc_release(v26);
        v27 = 0;
        while (2)
        {
          v29 = xarray;
          if (xarray)
            xpc_retain(xarray);
          else
            v29 = xpc_null_create();
          if (MEMORY[0x1C3B8CD78](xarray) == v11)
          {
            v30 = xpc_array_get_count(xarray);
            if (!v29)
              goto LABEL_48;
LABEL_46:
            xpc_retain(v29);
            v31 = v29;
          }
          else
          {
            v30 = 0;
            if (v29)
              goto LABEL_46;
LABEL_48:
            v31 = xpc_null_create();
          }
          xpc_release(v29);
          xpc_release(v31);
          if (v27 == v30 && v25 == v31)
          {
            xpc_release(v25);
            v36 = v67;
            v21 = *(__CFDictionary **)v72;
            ctu::cf::insert<__CFString const*,__CFArray *>(*(__CFDictionary **)v72, v60, v67);
            if (v36)
              CFRelease(v36);
            break;
          }
          v32 = xpc_array_get_value(v25, v27);
          v66 = v32;
          if (v32)
            xpc_retain(v32);
          else
            v66 = xpc_null_create();
          v33 = xpc::dyn_cast_or_default((xpc *)&v66, 0);
          v34 = (__CFArray *)v67;
          valuePtr = v33;
          v35 = CFNumberCreate(v7, kCFNumberIntType, &valuePtr);
          object = v35;
          if (v35)
          {
            CFArrayAppendValue(v34, v35);
            CFRelease(v35);
          }
          xpc_release(v66);
          if (v25)
          {
            xpc_retain(v25);
            v28 = v25;
          }
          else
          {
            v28 = xpc_null_create();
          }
          ++v27;
          xpc_release(v28);
          continue;
        }
      }
      v37 = v73;
      object = v21;
      if (v21)
      {
        CFRetain(v21);
        CFArrayAppendValue(v37, v21);
        CFRelease(v21);
      }
      xpc_release(xarray);
      xpc_release(xdict);
      if (v21)
        CFRelease(v21);
      v38 = *(xpc_object_t *)buf;
      if (*(_QWORD *)buf)
        xpc_retain(*(xpc_object_t *)buf);
      else
        v38 = xpc_null_create();
      ++*(_QWORD *)&buf[8];
      xpc_release(v38);
    }
  }
  object = 0;
  v40 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = v40;
  if (v40)
    object = v40;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v40, (CFTypeRef)*MEMORY[0x1E0DDF5E0], v9);
  v42 = a1[5];
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v41;
    _os_log_impl(&dword_1BF566000, v42, OS_LOG_TYPE_DEFAULT, "#I Sending transparent message reqeust: %@", buf, 0xCu);
  }
  v44 = a1[9];
  v43 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)buf = v44;
  if (!v43 || (v45 = std::__shared_weak_count::lock(v43), (*(_QWORD *)&buf[8] = v45) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v46 = v45;
  v47 = a1[13];
  if (v41 && (v48 = CFGetTypeID(v41), v48 == CFDictionaryGetTypeID()))
  {
    cf = v41;
    CFRetain(v41);
  }
  else
  {
    cf = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleTransparentMessageReq_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_147;
  aBlock[4] = a1;
  aBlock[5] = v44;
  v62 = v46;
  p_shared_owners = (unint64_t *)&v46->__shared_owners_;
  do
    v50 = __ldxr(p_shared_owners);
  while (__stxr(v50 + 1, p_shared_owners));
  v51 = _Block_copy(aBlock);
  v52 = a1[11];
  if (v52)
    dispatch_retain(v52);
  if (v51)
  {
    v63 = _Block_copy(v51);
    v64 = v52;
    if (!v52)
      goto LABEL_86;
    goto LABEL_85;
  }
  v63 = 0;
  v64 = v52;
  if (v52)
LABEL_85:
    dispatch_retain(v52);
LABEL_86:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v47 + 48))(v47, &cf, a3, &v63);
  if (v64)
    dispatch_release(v64);
  if (v63)
    _Block_release(v63);
  if (v52)
    dispatch_release(v52);
  if (v51)
    _Block_release(v51);
  if (cf)
    CFRelease(cf);
  v53 = v62;
  if (v62)
  {
    v54 = (unint64_t *)&v62->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_105;
  v57 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (v58)
  {
LABEL_105:
    v59 = object;
    if (!object)
      goto LABEL_107;
    goto LABEL_106;
  }
  ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
  std::__shared_weak_count::__release_weak(v56);
  v59 = object;
  if (object)
LABEL_106:
    CFRelease(v59);
LABEL_107:
  xpc_release(v74);
  if (v75)
    CFRelease(v75);
}

void sub_1BF5A3BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,xpc_object_t a22,char a23,xpc_object_t object,xpc_object_t a25,uint64_t a26,xpc_object_t a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State32handleTransparentMessageReq_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to send transparent message req: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetClientAntBlocking_sync(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  CFMutableArrayRef v14;
  xpc_object_t v15;
  xpc_object_t v16;
  size_t count;
  xpc_object_t v18;
  xpc_object_t v19;
  uint64_t v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  xpc_object_t *value;
  unsigned int v24;
  xpc_object_t *v25;
  int v26;
  xpc_object_t *v27;
  unsigned int v28;
  CFMutableArrayRef v29;
  xpc_object_t v30;
  void *v31;
  size_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  size_t v35;
  xpc_object_t v36;
  CFMutableDictionaryRef v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t *v41;
  xpc_object_t *v42;
  unsigned __int8 v43;
  CFMutableArrayRef v44;
  xpc_object_t v45;
  void *v46;
  size_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  size_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  int v53;
  __CFArray *v54;
  CFNumberRef v55;
  CFTypeRef v56;
  __CFArray *v57;
  CFTypeRef v58;
  __CFArray *v59;
  xpc_object_t v60;
  CFMutableArrayRef v61;
  CFMutableDictionaryRef v62;
  CFMutableDictionaryRef v63;
  NSObject *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  CFTypeID v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  void *v73;
  NSObject *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  xpc_object_t *v81;
  unsigned int v82;
  uint64_t v83;
  CFTypeRef v84;
  CFTypeRef v85;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  _QWORD aBlock[6];
  std::__shared_weak_count *v91;
  void *v92;
  dispatch_object_t v93;
  CFTypeRef v94;
  xpc_object_t v95;
  CFTypeRef v96;
  xpc_object_t object;
  xpc_object_t xdict;
  CFTypeRef cf;
  CFTypeRef v100;
  xpc_object_t v101;
  xpc_object_t *p_xdict;
  const char *v103;
  xpc_object_t v104;
  __CFDictionary *v105;
  CFMutableArrayRef v106;
  xpc_object_t v107;
  __CFDictionary *v108;
  int valuePtr;
  uint8_t buf[16];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8CD78](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  v82 = a3;
  v108 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (Mutable)
    v108 = Mutable;
  v107 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = "kWCMCellularSetAntBlocking_ClientInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v107);
  v83 = a1;
  v12 = MEMORY[0x1C3B8CD78](v107);
  v13 = MEMORY[0x1E0C812C8];
  if (v12 == MEMORY[0x1E0C812C8])
  {
    v106 = 0;
    v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (v14)
      v106 = v14;
    memset(buf, 170, sizeof(buf));
    v15 = v107;
    if (v107)
    {
      xpc_retain(v107);
      *(_QWORD *)buf = v15;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)buf = v15;
      if (!v15)
      {
        v15 = 0;
        *(_QWORD *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(_QWORD *)&buf[8] = 0;
    xpc_release(v15);
    v86 = (CFTypeRef)*MEMORY[0x1E0DDF4A8];
    v87 = (CFTypeRef)*MEMORY[0x1E0DDF430];
    v85 = (CFTypeRef)*MEMORY[0x1E0DDF5C0];
    v89 = (CFTypeRef)*MEMORY[0x1E0DDF3D0];
    v88 = (CFTypeRef)*MEMORY[0x1E0DDF428];
    v84 = (CFTypeRef)*MEMORY[0x1E0DDF5B8];
    while (1)
    {
      v16 = v107;
      if (v107)
        xpc_retain(v107);
      else
        v16 = xpc_null_create();
      if (MEMORY[0x1C3B8CD78](v107) == v13)
      {
        count = xpc_array_get_count(v107);
        if (!v16)
        {
LABEL_23:
          v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        count = 0;
        if (!v16)
          goto LABEL_23;
      }
      xpc_retain(v16);
      v18 = v16;
LABEL_24:
      xpc_release(v16);
      v19 = *(xpc_object_t *)buf;
      v20 = *(_QWORD *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        v61 = v106;
        v11 = v108;
        ctu::cf::insert<__CFString const*,__CFArray *>(v108, (CFTypeRef)*MEMORY[0x1E0DDF6B0], v106);
        if (v61)
          CFRelease(v61);
        break;
      }
      v105 = 0;
      v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = v21;
      if (v21)
        v105 = v21;
      p_xdict = (xpc_object_t *)buf;
      v103 = *(const char **)&buf[8];
      v104 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&p_xdict, &v104);
      value = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_ClientId");
      p_xdict = value;
      if (value)
        xpc_retain(value);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v24 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v87, v24, v9);
      xpc_release(p_xdict);
      v25 = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_BlockVoice");
      p_xdict = v25;
      if (v25)
        xpc_retain(v25);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v26 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v22, v86, v26);
      xpc_release(p_xdict);
      v27 = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_TimeMultiplier");
      p_xdict = v27;
      if (v27)
        xpc_retain(v27);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v28 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v85, v28, v9);
      xpc_release(p_xdict);
      v101 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      p_xdict = &v104;
      v103 = "kWCMCellularSetAntBlocking_BandInformationSet";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &v101);
      if (MEMORY[0x1C3B8CD78](v101) == v13)
      {
        v100 = 0;
        v29 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
        if (v29)
          v100 = v29;
        v30 = v101;
        if (v101)
        {
          xpc_retain(v101);
          goto LABEL_43;
        }
        v30 = xpc_null_create();
        if (v30)
        {
LABEL_43:
          xpc_retain(v30);
          v31 = v30;
        }
        else
        {
          v30 = xpc_null_create();
          v31 = 0;
        }
        xpc_release(v31);
        v32 = 0;
        while (2)
        {
          v34 = v101;
          if (v101)
            xpc_retain(v101);
          else
            v34 = xpc_null_create();
          if (MEMORY[0x1C3B8CD78](v101) == v13)
          {
            v35 = xpc_array_get_count(v101);
            if (!v34)
              goto LABEL_54;
LABEL_52:
            xpc_retain(v34);
            v36 = v34;
          }
          else
          {
            v35 = 0;
            if (v34)
              goto LABEL_52;
LABEL_54:
            v36 = xpc_null_create();
          }
          xpc_release(v34);
          xpc_release(v36);
          if (v32 == v35 && v30 == v36)
          {
            xpc_release(v30);
            v58 = v100;
            v22 = v105;
            ctu::cf::insert<__CFString const*,__CFArray *>(v105, v84, v100);
            if (v58)
              CFRelease(v58);
            goto LABEL_111;
          }
          cf = 0;
          v37 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v37)
            cf = v37;
          xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          v38 = xpc_array_get_value(v30, v32);
          v39 = v38;
          if (v38)
          {
            xpc_retain(v38);
            xdict = v39;
            goto LABEL_62;
          }
          v39 = xpc_null_create();
          xdict = v39;
          if (v39)
          {
LABEL_62:
            if (MEMORY[0x1C3B8CD78](v39) != v7)
            {
              v40 = xpc_null_create();
              goto LABEL_66;
            }
            xpc_retain(v39);
          }
          else
          {
            v40 = xpc_null_create();
            v39 = 0;
LABEL_66:
            xdict = v40;
          }
          xpc_release(v39);
          if (MEMORY[0x1C3B8CD78](xdict) != v7)
          {
            v41 = (xpc_object_t *)cf;
            goto LABEL_102;
          }
          v42 = (xpc_object_t *)xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
          p_xdict = v42;
          if (v42)
            xpc_retain(v42);
          else
            p_xdict = (xpc_object_t *)xpc_null_create();
          v43 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
          xpc_release(p_xdict);
          v41 = (xpc_object_t *)cf;
          ctu::cf::insert<__CFString const*,unsigned char>((__CFDictionary *)cf, v89, v43, v9);
          object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          p_xdict = &xdict;
          v103 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
          xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &object);
          if (MEMORY[0x1C3B8CD78](object) != v13)
            goto LABEL_101;
          v96 = 0;
          v44 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
          if (v44)
            v96 = v44;
          v45 = object;
          if (object)
          {
            xpc_retain(object);
            goto LABEL_78;
          }
          v45 = xpc_null_create();
          if (v45)
          {
LABEL_78:
            xpc_retain(v45);
            v46 = v45;
          }
          else
          {
            v45 = xpc_null_create();
            v46 = 0;
          }
          xpc_release(v46);
          v47 = 0;
LABEL_82:
          v49 = object;
          if (object)
            xpc_retain(object);
          else
            v49 = xpc_null_create();
          if (MEMORY[0x1C3B8CD78](object) == v13)
          {
            v50 = xpc_array_get_count(object);
            if (!v49)
              goto LABEL_89;
LABEL_87:
            xpc_retain(v49);
            v51 = v49;
          }
          else
          {
            v50 = 0;
            if (v49)
              goto LABEL_87;
LABEL_89:
            v51 = xpc_null_create();
          }
          xpc_release(v49);
          xpc_release(v51);
          if (v47 == v50 && v45 == v51)
          {
            xpc_release(v45);
            v56 = v96;
            v41 = (xpc_object_t *)cf;
            ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v88, v96);
            if (v56)
              CFRelease(v56);
LABEL_101:
            xpc_release(object);
LABEL_102:
            v57 = (__CFArray *)v100;
            p_xdict = v41;
            if (v41)
            {
              CFRetain(v41);
              CFArrayAppendValue(v57, v41);
              CFRelease(v41);
            }
            xpc_release(xdict);
            if (cf)
              CFRelease(cf);
            if (v30)
            {
              xpc_retain(v30);
              v33 = v30;
            }
            else
            {
              v33 = xpc_null_create();
            }
            ++v32;
            xpc_release(v33);
            continue;
          }
          break;
        }
        v52 = xpc_array_get_value(v45, v47);
        v95 = v52;
        if (v52)
          xpc_retain(v52);
        else
          v95 = xpc_null_create();
        v53 = xpc::dyn_cast_or_default((xpc *)&v95, 0);
        v54 = (__CFArray *)v96;
        valuePtr = v53;
        v55 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        p_xdict = (xpc_object_t *)v55;
        if (v55)
        {
          CFArrayAppendValue(v54, v55);
          CFRelease(v55);
        }
        xpc_release(v95);
        if (v45)
        {
          xpc_retain(v45);
          v48 = v45;
        }
        else
        {
          v48 = xpc_null_create();
        }
        ++v47;
        xpc_release(v48);
        goto LABEL_82;
      }
LABEL_111:
      v59 = v106;
      p_xdict = (xpc_object_t *)v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v59, v22);
        CFRelease(v22);
      }
      xpc_release(v101);
      xpc_release(v104);
      if (v22)
        CFRelease(v22);
      v60 = *(xpc_object_t *)buf;
      if (*(_QWORD *)buf)
        xpc_retain(*(xpc_object_t *)buf);
      else
        v60 = xpc_null_create();
      ++*(_QWORD *)&buf[8];
      xpc_release(v60);
    }
  }
  p_xdict = 0;
  v62 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v63 = v62;
  if (v62)
    p_xdict = (xpc_object_t *)v62;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v62, (CFTypeRef)*MEMORY[0x1E0DDF490], v11);
  v64 = *(NSObject **)(v83 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v63;
    _os_log_impl(&dword_1BF566000, v64, OS_LOG_TYPE_DEFAULT, "#I Setting Client Ant blocking with: %@", buf, 0xCu);
  }
  v66 = *(_QWORD *)(v83 + 72);
  v65 = *(std::__shared_weak_count **)(v83 + 80);
  *(_QWORD *)buf = v66;
  if (!v65 || (v67 = std::__shared_weak_count::lock(v65), (*(_QWORD *)&buf[8] = v67) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v68 = v67;
  v69 = *(_QWORD *)(v83 + 104);
  if (v63 && (v70 = CFGetTypeID(v63), v70 == CFDictionaryGetTypeID()))
  {
    v94 = v63;
    CFRetain(v63);
  }
  else
  {
    v94 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State31handleSetClientAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_152;
  aBlock[4] = v83;
  aBlock[5] = v66;
  v91 = v68;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v72 = __ldxr(p_shared_owners);
  while (__stxr(v72 + 1, p_shared_owners));
  v73 = _Block_copy(aBlock);
  v74 = *(NSObject **)(v83 + 88);
  if (v74)
    dispatch_retain(*(dispatch_object_t *)(v83 + 88));
  if (v73)
  {
    v92 = _Block_copy(v73);
    v93 = v74;
    if (!v74)
      goto LABEL_137;
    goto LABEL_136;
  }
  v92 = 0;
  v93 = v74;
  if (v74)
LABEL_136:
    dispatch_retain(v74);
LABEL_137:
  (*(void (**)(uint64_t, CFTypeRef *, _QWORD, void **))(*(_QWORD *)v69 + 48))(v69, &v94, v82, &v92);
  if (v93)
    dispatch_release(v93);
  if (v92)
    _Block_release(v92);
  if (v74)
    dispatch_release(v74);
  if (v73)
    _Block_release(v73);
  if (v94)
    CFRelease(v94);
  v75 = v91;
  if (v91)
  {
    v76 = (unint64_t *)&v91->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_156;
  v79 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (v80)
  {
LABEL_156:
    v81 = p_xdict;
    if (!p_xdict)
      goto LABEL_158;
    goto LABEL_157;
  }
  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
  std::__shared_weak_count::__release_weak(v78);
  v81 = p_xdict;
  if (p_xdict)
LABEL_157:
    CFRelease(v81);
LABEL_158:
  xpc_release(v107);
  if (v108)
    CFRelease(v108);
}

void sub_1BF5A4A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,xpc_object_t a28,char a29,xpc_object_t object,xpc_object_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State31handleSetClientAntBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetClientAntBlockingExtended_sync(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  CFMutableArrayRef v14;
  xpc_object_t v15;
  xpc_object_t v16;
  size_t count;
  xpc_object_t v18;
  xpc_object_t v19;
  uint64_t v20;
  __CFDictionary *v21;
  __CFDictionary *v22;
  xpc_object_t *value;
  unsigned int v24;
  xpc_object_t *v25;
  int v26;
  xpc_object_t *v27;
  unsigned int v28;
  CFMutableArrayRef v29;
  xpc_object_t v30;
  void *v31;
  size_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  size_t v35;
  xpc_object_t v36;
  CFMutableDictionaryRef v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t *v41;
  xpc_object_t *v42;
  unsigned __int8 v43;
  CFMutableArrayRef v44;
  xpc_object_t v45;
  void *v46;
  size_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  size_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  int v53;
  __CFArray *v54;
  CFNumberRef v55;
  CFTypeRef v56;
  __CFArray *v57;
  CFTypeRef v58;
  __CFArray *v59;
  xpc_object_t v60;
  CFMutableArrayRef v61;
  CFMutableDictionaryRef v62;
  CFMutableDictionaryRef v63;
  NSObject *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  CFTypeID v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  void *v73;
  NSObject *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  xpc_object_t *v81;
  unsigned int v82;
  uint64_t v83;
  CFTypeRef v84;
  CFTypeRef v85;
  CFTypeRef v86;
  CFTypeRef v87;
  CFTypeRef v88;
  CFTypeRef v89;
  _QWORD aBlock[6];
  std::__shared_weak_count *v91;
  void *v92;
  dispatch_object_t v93;
  CFTypeRef v94;
  xpc_object_t v95;
  CFTypeRef v96;
  xpc_object_t object;
  xpc_object_t xdict;
  CFTypeRef cf;
  CFTypeRef v100;
  xpc_object_t v101;
  xpc_object_t *p_xdict;
  const char *v103;
  xpc_object_t v104;
  __CFDictionary *v105;
  CFMutableArrayRef v106;
  xpc_object_t v107;
  __CFDictionary *v108;
  int valuePtr;
  uint8_t buf[16];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8CD78](*a2);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 != MEMORY[0x1E0C812F8])
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Invalid XPC dict", buf, 2u);
    }
    return;
  }
  v82 = a3;
  v108 = 0;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = Mutable;
  if (Mutable)
    v108 = Mutable;
  v107 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = a2;
  *(_QWORD *)&buf[8] = "kWCMCellularSetAntBlocking_ClientInformationSet";
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v107);
  v83 = a1;
  v12 = MEMORY[0x1C3B8CD78](v107);
  v13 = MEMORY[0x1E0C812C8];
  if (v12 == MEMORY[0x1E0C812C8])
  {
    v106 = 0;
    v14 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
    if (v14)
      v106 = v14;
    memset(buf, 170, sizeof(buf));
    v15 = v107;
    if (v107)
    {
      xpc_retain(v107);
      *(_QWORD *)buf = v15;
    }
    else
    {
      v15 = xpc_null_create();
      *(_QWORD *)buf = v15;
      if (!v15)
      {
        v15 = 0;
        *(_QWORD *)buf = xpc_null_create();
        goto LABEL_13;
      }
    }
    xpc_retain(v15);
LABEL_13:
    *(_QWORD *)&buf[8] = 0;
    xpc_release(v15);
    v86 = (CFTypeRef)*MEMORY[0x1E0DDF4A8];
    v87 = (CFTypeRef)*MEMORY[0x1E0DDF430];
    v85 = (CFTypeRef)*MEMORY[0x1E0DDF5C0];
    v89 = (CFTypeRef)*MEMORY[0x1E0DDF3D0];
    v88 = (CFTypeRef)*MEMORY[0x1E0DDF428];
    v84 = (CFTypeRef)*MEMORY[0x1E0DDF5B8];
    while (1)
    {
      v16 = v107;
      if (v107)
        xpc_retain(v107);
      else
        v16 = xpc_null_create();
      if (MEMORY[0x1C3B8CD78](v107) == v13)
      {
        count = xpc_array_get_count(v107);
        if (!v16)
        {
LABEL_23:
          v18 = xpc_null_create();
          goto LABEL_24;
        }
      }
      else
      {
        count = 0;
        if (!v16)
          goto LABEL_23;
      }
      xpc_retain(v16);
      v18 = v16;
LABEL_24:
      xpc_release(v16);
      v19 = *(xpc_object_t *)buf;
      v20 = *(_QWORD *)&buf[8];
      xpc_release(v18);
      if (v20 == count && v19 == v18)
      {
        xpc_release(*(xpc_object_t *)buf);
        v61 = v106;
        v11 = v108;
        ctu::cf::insert<__CFString const*,__CFArray *>(v108, (CFTypeRef)*MEMORY[0x1E0DDF6B0], v106);
        if (v61)
          CFRelease(v61);
        break;
      }
      v105 = 0;
      v21 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v22 = v21;
      if (v21)
        v105 = v21;
      p_xdict = (xpc_object_t *)buf;
      v103 = *(const char **)&buf[8];
      v104 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)&p_xdict, &v104);
      value = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_ClientId");
      p_xdict = value;
      if (value)
        xpc_retain(value);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v24 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v87, v24, v9);
      xpc_release(p_xdict);
      v25 = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_BlockVoice");
      p_xdict = v25;
      if (v25)
        xpc_retain(v25);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v26 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,BOOL>(v22, v86, v26);
      xpc_release(p_xdict);
      v27 = (xpc_object_t *)xpc_dictionary_get_value(v104, "kWCMCellularSetAntBlocking_TimeMultiplier");
      p_xdict = v27;
      if (v27)
        xpc_retain(v27);
      else
        p_xdict = (xpc_object_t *)xpc_null_create();
      v28 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
      ctu::cf::insert<__CFString const*,unsigned int>(v22, v85, v28, v9);
      xpc_release(p_xdict);
      v101 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      p_xdict = &v104;
      v103 = "kWCMCellularSetAntBlocking_BandInformationSet";
      xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &v101);
      if (MEMORY[0x1C3B8CD78](v101) == v13)
      {
        v100 = 0;
        v29 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
        if (v29)
          v100 = v29;
        v30 = v101;
        if (v101)
        {
          xpc_retain(v101);
          goto LABEL_43;
        }
        v30 = xpc_null_create();
        if (v30)
        {
LABEL_43:
          xpc_retain(v30);
          v31 = v30;
        }
        else
        {
          v30 = xpc_null_create();
          v31 = 0;
        }
        xpc_release(v31);
        v32 = 0;
        while (2)
        {
          v34 = v101;
          if (v101)
            xpc_retain(v101);
          else
            v34 = xpc_null_create();
          if (MEMORY[0x1C3B8CD78](v101) == v13)
          {
            v35 = xpc_array_get_count(v101);
            if (!v34)
              goto LABEL_54;
LABEL_52:
            xpc_retain(v34);
            v36 = v34;
          }
          else
          {
            v35 = 0;
            if (v34)
              goto LABEL_52;
LABEL_54:
            v36 = xpc_null_create();
          }
          xpc_release(v34);
          xpc_release(v36);
          if (v32 == v35 && v30 == v36)
          {
            xpc_release(v30);
            v58 = v100;
            v22 = v105;
            ctu::cf::insert<__CFString const*,__CFArray *>(v105, v84, v100);
            if (v58)
              CFRelease(v58);
            goto LABEL_111;
          }
          cf = 0;
          v37 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          if (v37)
            cf = v37;
          xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          v38 = xpc_array_get_value(v30, v32);
          v39 = v38;
          if (v38)
          {
            xpc_retain(v38);
            xdict = v39;
            goto LABEL_62;
          }
          v39 = xpc_null_create();
          xdict = v39;
          if (v39)
          {
LABEL_62:
            if (MEMORY[0x1C3B8CD78](v39) != v7)
            {
              v40 = xpc_null_create();
              goto LABEL_66;
            }
            xpc_retain(v39);
          }
          else
          {
            v40 = xpc_null_create();
            v39 = 0;
LABEL_66:
            xdict = v40;
          }
          xpc_release(v39);
          if (MEMORY[0x1C3B8CD78](xdict) != v7)
          {
            v41 = (xpc_object_t *)cf;
            goto LABEL_102;
          }
          v42 = (xpc_object_t *)xpc_dictionary_get_value(xdict, "kWCMCellularSetAntBlocking_BandInfoSet_AntNum");
          p_xdict = v42;
          if (v42)
            xpc_retain(v42);
          else
            p_xdict = (xpc_object_t *)xpc_null_create();
          v43 = xpc::dyn_cast_or_default((xpc *)&p_xdict, 0);
          xpc_release(p_xdict);
          v41 = (xpc_object_t *)cf;
          ctu::cf::insert<__CFString const*,unsigned char>((__CFDictionary *)cf, v89, v43, v9);
          object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
          p_xdict = &xdict;
          v103 = "kWCMCellularSetAntBlocking_BandInfoSet_BandList";
          xpc::dict::object_proxy::operator xpc::array((uint64_t)&p_xdict, &object);
          if (MEMORY[0x1C3B8CD78](object) != v13)
            goto LABEL_101;
          v96 = 0;
          v44 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E0C9B378]);
          if (v44)
            v96 = v44;
          v45 = object;
          if (object)
          {
            xpc_retain(object);
            goto LABEL_78;
          }
          v45 = xpc_null_create();
          if (v45)
          {
LABEL_78:
            xpc_retain(v45);
            v46 = v45;
          }
          else
          {
            v45 = xpc_null_create();
            v46 = 0;
          }
          xpc_release(v46);
          v47 = 0;
LABEL_82:
          v49 = object;
          if (object)
            xpc_retain(object);
          else
            v49 = xpc_null_create();
          if (MEMORY[0x1C3B8CD78](object) == v13)
          {
            v50 = xpc_array_get_count(object);
            if (!v49)
              goto LABEL_89;
LABEL_87:
            xpc_retain(v49);
            v51 = v49;
          }
          else
          {
            v50 = 0;
            if (v49)
              goto LABEL_87;
LABEL_89:
            v51 = xpc_null_create();
          }
          xpc_release(v49);
          xpc_release(v51);
          if (v47 == v50 && v45 == v51)
          {
            xpc_release(v45);
            v56 = v96;
            v41 = (xpc_object_t *)cf;
            ctu::cf::insert<__CFString const*,__CFArray *>((__CFDictionary *)cf, v88, v96);
            if (v56)
              CFRelease(v56);
LABEL_101:
            xpc_release(object);
LABEL_102:
            v57 = (__CFArray *)v100;
            p_xdict = v41;
            if (v41)
            {
              CFRetain(v41);
              CFArrayAppendValue(v57, v41);
              CFRelease(v41);
            }
            xpc_release(xdict);
            if (cf)
              CFRelease(cf);
            if (v30)
            {
              xpc_retain(v30);
              v33 = v30;
            }
            else
            {
              v33 = xpc_null_create();
            }
            ++v32;
            xpc_release(v33);
            continue;
          }
          break;
        }
        v52 = xpc_array_get_value(v45, v47);
        v95 = v52;
        if (v52)
          xpc_retain(v52);
        else
          v95 = xpc_null_create();
        v53 = xpc::dyn_cast_or_default((xpc *)&v95, 0);
        v54 = (__CFArray *)v96;
        valuePtr = v53;
        v55 = CFNumberCreate(v9, kCFNumberIntType, &valuePtr);
        p_xdict = (xpc_object_t *)v55;
        if (v55)
        {
          CFArrayAppendValue(v54, v55);
          CFRelease(v55);
        }
        xpc_release(v95);
        if (v45)
        {
          xpc_retain(v45);
          v48 = v45;
        }
        else
        {
          v48 = xpc_null_create();
        }
        ++v47;
        xpc_release(v48);
        goto LABEL_82;
      }
LABEL_111:
      v59 = v106;
      p_xdict = (xpc_object_t *)v22;
      if (v22)
      {
        CFRetain(v22);
        CFArrayAppendValue(v59, v22);
        CFRelease(v22);
      }
      xpc_release(v101);
      xpc_release(v104);
      if (v22)
        CFRelease(v22);
      v60 = *(xpc_object_t *)buf;
      if (*(_QWORD *)buf)
        xpc_retain(*(xpc_object_t *)buf);
      else
        v60 = xpc_null_create();
      ++*(_QWORD *)&buf[8];
      xpc_release(v60);
    }
  }
  p_xdict = 0;
  v62 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v63 = v62;
  if (v62)
    p_xdict = (xpc_object_t *)v62;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v62, (CFTypeRef)*MEMORY[0x1E0DDF668], v11);
  v64 = *(NSObject **)(v83 + 40);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v63;
    _os_log_impl(&dword_1BF566000, v64, OS_LOG_TYPE_DEFAULT, "#I Setting Client Ant blocking Extended with: %@ ", buf, 0xCu);
  }
  v66 = *(_QWORD *)(v83 + 72);
  v65 = *(std::__shared_weak_count **)(v83 + 80);
  *(_QWORD *)buf = v66;
  if (!v65 || (v67 = std::__shared_weak_count::lock(v65), (*(_QWORD *)&buf[8] = v67) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v68 = v67;
  v69 = *(_QWORD *)(v83 + 104);
  if (v63 && (v70 = CFGetTypeID(v63), v70 == CFDictionaryGetTypeID()))
  {
    v94 = v63;
    CFRetain(v63);
  }
  else
  {
    v94 = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State39handleSetClientAntBlockingExtended_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_153;
  aBlock[4] = v83;
  aBlock[5] = v66;
  v91 = v68;
  p_shared_owners = (unint64_t *)&v68->__shared_owners_;
  do
    v72 = __ldxr(p_shared_owners);
  while (__stxr(v72 + 1, p_shared_owners));
  v73 = _Block_copy(aBlock);
  v74 = *(NSObject **)(v83 + 88);
  if (v74)
    dispatch_retain(*(dispatch_object_t *)(v83 + 88));
  if (v73)
  {
    v92 = _Block_copy(v73);
    v93 = v74;
    if (!v74)
      goto LABEL_137;
    goto LABEL_136;
  }
  v92 = 0;
  v93 = v74;
  if (v74)
LABEL_136:
    dispatch_retain(v74);
LABEL_137:
  (*(void (**)(uint64_t, CFTypeRef *, _QWORD, void **))(*(_QWORD *)v69 + 48))(v69, &v94, v82, &v92);
  if (v93)
    dispatch_release(v93);
  if (v92)
    _Block_release(v92);
  if (v74)
    dispatch_release(v74);
  if (v73)
    _Block_release(v73);
  if (v94)
    CFRelease(v94);
  v75 = v91;
  if (v91)
  {
    v76 = (unint64_t *)&v91->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_156;
  v79 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v80 = __ldaxr(v79);
  while (__stlxr(v80 - 1, v79));
  if (v80)
  {
LABEL_156:
    v81 = p_xdict;
    if (!p_xdict)
      goto LABEL_158;
    goto LABEL_157;
  }
  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
  std::__shared_weak_count::__release_weak(v78);
  v81 = p_xdict;
  if (p_xdict)
LABEL_157:
    CFRelease(v81);
LABEL_158:
  xpc_release(v107);
  if (v108)
    CFRelease(v108);
}

void sub_1BF5A59E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,xpc_object_t a28,char a29,xpc_object_t object,xpc_object_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State39handleSetClientAntBlockingExtended_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Ant blocking Extended: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleTriggerAntennaBlocking_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned int v13;
  xpc_object_t v14;
  unsigned int v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  CFTypeID v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v41;
  CFTypeRef v42;
  __int128 buf;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v42 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v42 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Enable");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF5A8], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_ClientID");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF618], v13, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Duration"))
  {
    v14 = xpc_dictionary_get_value(*a2, "kWCMCellularTriggerClientAntBlockingReq_Duration");
    *(_QWORD *)&buf = v14;
    if (v14)
      xpc_retain(v14);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v15 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF620], v15, v7);
    xpc_release((xpc_object_t)buf);
  }
  v41 = 0;
  v16 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = v16;
  if (v16)
    v41 = v16;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E0DDF418], v9);
  v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I Triggering client antenna blocking with params: %@", (uint8_t *)&buf, 0xCu);
  }
  v20 = a1[9];
  v19 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v20;
  if (!v19 || (v21 = std::__shared_weak_count::lock(v19), (*((_QWORD *)&buf + 1) = v21) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  v23 = a1[13];
  if (v17 && (v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    cf = v17;
    CFRetain(v17);
  }
  else
  {
    cf = 0;
  }
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v36[2] = ___ZN4coex6Module5State33handleTriggerAntennaBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v36[3] = &__block_descriptor_tmp_157;
  v36[4] = a1;
  v36[5] = v20;
  v37 = v22;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v27 = _Block_copy(v36);
  v28 = a1[11];
  if (v28)
    dispatch_retain(v28);
  if (v27)
  {
    aBlock = _Block_copy(v27);
    object = v28;
    if (!v28)
      goto LABEL_34;
    goto LABEL_33;
  }
  aBlock = 0;
  object = v28;
  if (v28)
LABEL_33:
    dispatch_retain(v28);
LABEL_34:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (cf)
    CFRelease(cf);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_53;
  v33 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_53:
    v35 = v41;
    if (!v41)
      goto LABEL_55;
    goto LABEL_54;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = v41;
  if (v41)
LABEL_54:
    CFRelease(v35);
LABEL_55:
  if (v42)
    CFRelease(v42);
}

void sub_1BF5A6288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State33handleTriggerAntennaBlocking_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to trigger antenna blocking: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetCC1_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  xpc_object_t v15;
  unsigned __int8 v16;
  xpc_object_t v17;
  unsigned int v18;
  xpc_object_t v19;
  unsigned int v20;
  CFMutableDictionaryRef v21;
  CFMutableDictionaryRef v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  CFTypeID v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CFTypeRef v40;
  _QWORD v41[6];
  std::__shared_weak_count *v42;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v46;
  CFTypeRef v47;
  __int128 buf;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v47 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v47 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Enable");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF270], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CoexTech");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF248], v13, v7);
  xpc_release((xpc_object_t)buf);
  *(_QWORD *)&buf = xpc_int64_create(a3);
  if (!(_QWORD)buf)
    *(_QWORD *)&buf = xpc_null_create();
  v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF320], v14, v7);
  xpc_release((xpc_object_t)buf);
  v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CarrierId");
  *(_QWORD *)&buf = v15;
  if (v15)
    xpc_retain(v15);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF278], v16, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency")
    && xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth"))
  {
    v17 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency");
    *(_QWORD *)&buf = v17;
    if (v17)
      xpc_retain(v17);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF388], v18, v7);
    xpc_release((xpc_object_t)buf);
    v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth");
    *(_QWORD *)&buf = v19;
    if (v19)
      xpc_retain(v19);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF268], v20, v7);
    xpc_release((xpc_object_t)buf);
  }
  v46 = 0;
  v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = v21;
  if (v21)
    v46 = v21;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v21, (CFTypeRef)*MEMORY[0x1E0DDF288], v9);
  v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting CC1 with: %@", (uint8_t *)&buf, 0xCu);
  }
  v25 = a1[9];
  v24 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v25;
  if (!v24 || (v26 = std::__shared_weak_count::lock(v24), (*((_QWORD *)&buf + 1) = v26) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = a1[13];
  if (v22 && (v29 = CFGetTypeID(v22), v29 == CFDictionaryGetTypeID()))
  {
    cf = v22;
    CFRetain(v22);
  }
  else
  {
    cf = 0;
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 1174405120;
  v41[2] = ___ZN4coex6Module5State17handleSetCC1_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v41[3] = &__block_descriptor_tmp_163;
  v41[4] = a1;
  v41[5] = v25;
  v42 = v27;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  v32 = _Block_copy(v41);
  v33 = a1[11];
  if (v33)
    dispatch_retain(v33);
  if (v32)
  {
    aBlock = _Block_copy(v32);
    object = v33;
    if (!v33)
      goto LABEL_43;
    goto LABEL_42;
  }
  aBlock = 0;
  object = v33;
  if (v33)
LABEL_42:
    dispatch_retain(v33);
LABEL_43:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v28 + 48))(v28, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v33)
    dispatch_release(v33);
  if (v32)
    _Block_release(v32);
  if (cf)
    CFRelease(cf);
  v34 = v42;
  if (v42)
  {
    v35 = (unint64_t *)&v42->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_62;
  v38 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_62:
    v40 = v46;
    if (!v46)
      goto LABEL_64;
    goto LABEL_63;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v40 = v46;
  if (v46)
LABEL_63:
    CFRelease(v40);
LABEL_64:
  if (v47)
    CFRelease(v47);
}

void sub_1BF5A69D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State17handleSetCC1_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set CC1: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetCC2_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned __int8 v13;
  unsigned int v14;
  xpc_object_t v15;
  unsigned __int8 v16;
  xpc_object_t v17;
  unsigned int v18;
  xpc_object_t v19;
  unsigned int v20;
  CFMutableDictionaryRef v21;
  CFMutableDictionaryRef v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  CFTypeID v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  NSObject *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  CFTypeRef v40;
  _QWORD v41[6];
  std::__shared_weak_count *v42;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v46;
  CFTypeRef v47;
  __int128 buf;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v47 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v47 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Enable");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF270], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CoexTech");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF248], v13, v7);
  xpc_release((xpc_object_t)buf);
  *(_QWORD *)&buf = xpc_int64_create(a3);
  if (!(_QWORD)buf)
    *(_QWORD *)&buf = xpc_null_create();
  v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF320], v14, v7);
  xpc_release((xpc_object_t)buf);
  v15 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CarrierId");
  *(_QWORD *)&buf = v15;
  if (v15)
    xpc_retain(v15);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned char>(v9, (CFTypeRef)*MEMORY[0x1E0DDF278], v16, v7);
  xpc_release((xpc_object_t)buf);
  if (xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency")
    && xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth"))
  {
    v17 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_CenterFrequency");
    *(_QWORD *)&buf = v17;
    if (v17)
      xpc_retain(v17);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF388], v18, v7);
    xpc_release((xpc_object_t)buf);
    v19 = xpc_dictionary_get_value(*a2, "kWCMCellularSetCC_Bandwidth");
    *(_QWORD *)&buf = v19;
    if (v19)
      xpc_retain(v19);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF268], v20, v7);
    xpc_release((xpc_object_t)buf);
  }
  v46 = 0;
  v21 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = v21;
  if (v21)
    v46 = v21;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v21, (CFTypeRef)*MEMORY[0x1E0DDF290], v9);
  v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v22;
    _os_log_impl(&dword_1BF566000, v23, OS_LOG_TYPE_DEFAULT, "#I Setting CC2 with: %@", (uint8_t *)&buf, 0xCu);
  }
  v25 = a1[9];
  v24 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v25;
  if (!v24 || (v26 = std::__shared_weak_count::lock(v24), (*((_QWORD *)&buf + 1) = v26) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v27 = v26;
  v28 = a1[13];
  if (v22 && (v29 = CFGetTypeID(v22), v29 == CFDictionaryGetTypeID()))
  {
    cf = v22;
    CFRetain(v22);
  }
  else
  {
    cf = 0;
  }
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 1174405120;
  v41[2] = ___ZN4coex6Module5State17handleSetCC2_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v41[3] = &__block_descriptor_tmp_164;
  v41[4] = a1;
  v41[5] = v25;
  v42 = v27;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  v32 = _Block_copy(v41);
  v33 = a1[11];
  if (v33)
    dispatch_retain(v33);
  if (v32)
  {
    aBlock = _Block_copy(v32);
    object = v33;
    if (!v33)
      goto LABEL_43;
    goto LABEL_42;
  }
  aBlock = 0;
  object = v33;
  if (v33)
LABEL_42:
    dispatch_retain(v33);
LABEL_43:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v28 + 48))(v28, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v33)
    dispatch_release(v33);
  if (v32)
    _Block_release(v32);
  if (cf)
    CFRelease(cf);
  v34 = v42;
  if (v42)
  {
    v35 = (unint64_t *)&v42->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_62;
  v38 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (v39)
  {
LABEL_62:
    v40 = v46;
    if (!v46)
      goto LABEL_64;
    goto LABEL_63;
  }
  ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
  std::__shared_weak_count::__release_weak(v37);
  v40 = v46;
  if (v46)
LABEL_63:
    CFRelease(v40);
LABEL_64:
  if (v47)
    CFRelease(v47);
}

void sub_1BF5A7184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State17handleSetCC2_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set CC2: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetLaaGpioThrottle_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned int v13;
  CFMutableDictionaryRef v14;
  CFMutableDictionaryRef v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  CFTypeID v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  CFTypeRef v33;
  _QWORD v34[6];
  std::__shared_weak_count *v35;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v39;
  CFTypeRef v40;
  __int128 buf;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v40 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v40 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularSetLaaGpioThrottleReq_Enabled");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF518], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetLaaGpioThrottleReq_Periodicity");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF610], v13, v7);
  xpc_release((xpc_object_t)buf);
  v39 = 0;
  v14 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v15 = v14;
  if (v14)
    v39 = v14;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v14, (CFTypeRef)*MEMORY[0x1E0DDF4F8], v9);
  v16 = a1[5];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v15;
    _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Setting LAA GPIO throttle with: %@", (uint8_t *)&buf, 0xCu);
  }
  v18 = a1[9];
  v17 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v18;
  if (!v17 || (v19 = std::__shared_weak_count::lock(v17), (*((_QWORD *)&buf + 1) = v19) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v20 = v19;
  v21 = a1[13];
  if (v15 && (v22 = CFGetTypeID(v15), v22 == CFDictionaryGetTypeID()))
  {
    cf = v15;
    CFRetain(v15);
  }
  else
  {
    cf = 0;
  }
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 1174405120;
  v34[2] = ___ZN4coex6Module5State29handleSetLaaGpioThrottle_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v34[3] = &__block_descriptor_tmp_167;
  v34[4] = a1;
  v34[5] = v18;
  v35 = v20;
  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v24 = __ldxr(p_shared_owners);
  while (__stxr(v24 + 1, p_shared_owners));
  v25 = _Block_copy(v34);
  v26 = a1[11];
  if (v26)
    dispatch_retain(v26);
  if (v25)
  {
    aBlock = _Block_copy(v25);
    object = v26;
    if (!v26)
      goto LABEL_29;
    goto LABEL_28;
  }
  aBlock = 0;
  object = v26;
  if (v26)
LABEL_28:
    dispatch_retain(v26);
LABEL_29:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v21 + 48))(v21, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v26)
    dispatch_release(v26);
  if (v25)
    _Block_release(v25);
  if (cf)
    CFRelease(cf);
  v27 = v35;
  if (v35)
  {
    v28 = (unint64_t *)&v35->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_48;
  v31 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
  {
LABEL_48:
    v33 = v39;
    if (!v39)
      goto LABEL_50;
    goto LABEL_49;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v33 = v39;
  if (v39)
LABEL_49:
    CFRelease(v33);
LABEL_50:
  if (v40)
    CFRelease(v40);
}

void sub_1BF5A77BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State29handleSetLaaGpioThrottle_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set LAA GPIO throttle: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetGnssParams_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  int v11;
  xpc_object_t v12;
  unsigned int v13;
  xpc_object_t v14;
  unsigned int v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  CFTypeID v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  CFTypeRef v35;
  _QWORD v36[6];
  std::__shared_weak_count *v37;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v41;
  CFTypeRef v42;
  __int128 buf;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  v42 = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = Mutable;
  if (Mutable)
    v42 = Mutable;
  value = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_Enabled");
  *(_QWORD *)&buf = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF2B0], v11);
  xpc_release((xpc_object_t)buf);
  v12 = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_Band");
  *(_QWORD *)&buf = v12;
  if (v12)
    xpc_retain(v12);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v13 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF228], v13, v7);
  xpc_release((xpc_object_t)buf);
  v14 = xpc_dictionary_get_value(*a2, "kWCMCellularSetGnssParamsReq_L5Level");
  *(_QWORD *)&buf = v14;
  if (v14)
    xpc_retain(v14);
  else
    *(_QWORD *)&buf = xpc_null_create();
  v15 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
  ctu::cf::insert<__CFString const*,unsigned int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF2B8], v15, v7);
  xpc_release((xpc_object_t)buf);
  v41 = 0;
  v16 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = v16;
  if (v16)
    v41 = v16;
  ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E0DDF3B8], v9);
  v18 = a1[5];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v17;
    _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting Gnss params with: %@", (uint8_t *)&buf, 0xCu);
  }
  v20 = a1[9];
  v19 = (std::__shared_weak_count *)a1[10];
  *(_QWORD *)&buf = v20;
  if (!v19 || (v21 = std::__shared_weak_count::lock(v19), (*((_QWORD *)&buf + 1) = v21) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  v23 = a1[13];
  if (v17 && (v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
  {
    cf = v17;
    CFRetain(v17);
  }
  else
  {
    cf = 0;
  }
  v36[0] = MEMORY[0x1E0C809B0];
  v36[1] = 1174405120;
  v36[2] = ___ZN4coex6Module5State24handleSetGnssParams_syncEN3xpc4dictENS_5SubIdE_block_invoke;
  v36[3] = &__block_descriptor_tmp_171;
  v36[4] = a1;
  v36[5] = v20;
  v37 = v22;
  p_shared_owners = (unint64_t *)&v22->__shared_owners_;
  do
    v26 = __ldxr(p_shared_owners);
  while (__stxr(v26 + 1, p_shared_owners));
  v27 = _Block_copy(v36);
  v28 = a1[11];
  if (v28)
    dispatch_retain(v28);
  if (v27)
  {
    aBlock = _Block_copy(v27);
    object = v28;
    if (!v28)
      goto LABEL_32;
    goto LABEL_31;
  }
  aBlock = 0;
  object = v28;
  if (v28)
LABEL_31:
    dispatch_retain(v28);
LABEL_32:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &cf, a3, &aBlock);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (v28)
    dispatch_release(v28);
  if (v27)
    _Block_release(v27);
  if (cf)
    CFRelease(cf);
  v29 = v37;
  if (v37)
  {
    v30 = (unint64_t *)&v37->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
  if (!*((_QWORD *)&buf + 1))
    goto LABEL_51;
  v33 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
  do
    v34 = __ldaxr(v33);
  while (__stlxr(v34 - 1, v33));
  if (v34)
  {
LABEL_51:
    v35 = v41;
    if (!v41)
      goto LABEL_53;
    goto LABEL_52;
  }
  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
  std::__shared_weak_count::__release_weak(v32);
  v35 = v41;
  if (v41)
LABEL_52:
    CFRelease(v35);
LABEL_53:
  if (v42)
    CFRelease(v42);
}

void sub_1BF5A7DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State24handleSetGnssParams_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set Gnss params: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetLAAConfig_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  const __CFAllocator *v7;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v9;
  xpc_object_t value;
  NSObject *v11;
  int v12;
  xpc_object_t v13;
  int v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  int v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  int v22;
  CFMutableDictionaryRef v23;
  CFMutableDictionaryRef v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  CFTypeID v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  void *v34;
  NSObject *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  CFTypeRef v42;
  _QWORD v43[6];
  std::__shared_weak_count *v44;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v48;
  CFTypeRef v49;
  __int128 buf;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", (uint8_t *)&buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_CoexEnable"))
  {
    v49 = 0;
    v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v9 = Mutable;
    if (Mutable)
      v49 = Mutable;
    value = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_CoexEnable");
    *(_QWORD *)&buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v12 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,BOOL>(v9, (CFTypeRef)*MEMORY[0x1E0DDF478], v12);
    xpc_release((xpc_object_t)buf);
    v13 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ProtectCQIPeriod");
    *(_QWORD *)&buf = v13;
    if (v13)
      xpc_retain(v13);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF5D0], v14, v7);
    xpc_release((xpc_object_t)buf);
    v15 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ThresholdIn");
    *(_QWORD *)&buf = v15;
    if (v15)
      xpc_retain(v15);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF480], v16, v7);
    xpc_release((xpc_object_t)buf);
    v17 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_ThresholdOut");
    *(_QWORD *)&buf = v17;
    if (v17)
      xpc_retain(v17);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF4D8], v18, v7);
    xpc_release((xpc_object_t)buf);
    v19 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_DeactTimer");
    *(_QWORD *)&buf = v19;
    if (v19)
      xpc_retain(v19);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF448], v20, v7);
    xpc_release((xpc_object_t)buf);
    v21 = xpc_dictionary_get_value(*a2, "WCMCellularSetLAAConfig_DeactStopTimer");
    *(_QWORD *)&buf = v21;
    if (v21)
      xpc_retain(v21);
    else
      *(_QWORD *)&buf = xpc_null_create();
    v22 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    ctu::cf::insert<__CFString const*,int>(v9, (CFTypeRef)*MEMORY[0x1E0DDF558], v22, v7);
    xpc_release((xpc_object_t)buf);
    v48 = 0;
    v23 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v24 = v23;
    if (v23)
      v48 = v23;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v23, (CFTypeRef)*MEMORY[0x1E0DDF310], v9);
    v25 = a1[5];
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v24;
      _os_log_impl(&dword_1BF566000, v25, OS_LOG_TYPE_DEFAULT, "#I Setting LAA config with: %@", (uint8_t *)&buf, 0xCu);
    }
    v27 = a1[9];
    v26 = (std::__shared_weak_count *)a1[10];
    *(_QWORD *)&buf = v27;
    if (!v26 || (v28 = std::__shared_weak_count::lock(v26), (*((_QWORD *)&buf + 1) = v28) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v29 = v28;
    v30 = a1[13];
    if (v24 && (v31 = CFGetTypeID(v24), v31 == CFDictionaryGetTypeID()))
    {
      cf = v24;
      CFRetain(v24);
    }
    else
    {
      cf = 0;
    }
    v43[0] = MEMORY[0x1E0C809B0];
    v43[1] = 1174405120;
    v43[2] = ___ZN4coex6Module5State23handleSetLAAConfig_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    v43[3] = &__block_descriptor_tmp_178;
    v43[4] = a1;
    v43[5] = v27;
    v44 = v29;
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
    v34 = _Block_copy(v43);
    v35 = a1[11];
    if (v35)
      dispatch_retain(v35);
    if (v34)
    {
      aBlock = _Block_copy(v34);
      object = v35;
      if (!v35)
        goto LABEL_45;
    }
    else
    {
      aBlock = 0;
      object = v35;
      if (!v35)
      {
LABEL_45:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v30 + 48))(v30, &cf, a3, &aBlock);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        if (v35)
          dispatch_release(v35);
        if (v34)
          _Block_release(v34);
        if (cf)
          CFRelease(cf);
        v36 = v44;
        if (v44)
        {
          v37 = (unint64_t *)&v44->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v39 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
        if (!*((_QWORD *)&buf + 1))
          goto LABEL_64;
        v40 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
          v42 = v48;
          if (!v48)
          {
LABEL_66:
            if (v49)
              CFRelease(v49);
            return;
          }
        }
        else
        {
LABEL_64:
          v42 = v48;
          if (!v48)
            goto LABEL_66;
        }
        CFRelease(v42);
        goto LABEL_66;
      }
    }
    dispatch_retain(v35);
    goto LABEL_45;
  }
  v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#E Missing LAA config", (uint8_t *)&buf, 2u);
  }
}

void sub_1BF5A854C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZN4coex6Module5State23handleSetLAAConfig_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set LAA config: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetFCMBCMAntennaMode_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  xpc_object_t value;
  NSObject *v8;
  unsigned int v9;
  const __CFAllocator *v10;
  CFMutableArrayRef Mutable;
  CFTypeRef v12;
  uint64_t v13;
  CFMutableDictionaryRef v14;
  __CFDictionary *v15;
  CFMutableDictionaryRef v16;
  CFMutableDictionaryRef v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  CFTypeID v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  CFTypeRef v36;
  _QWORD aBlock[6];
  std::__shared_weak_count *v38;
  void *v39;
  dispatch_object_t object;
  CFTypeRef v41;
  CFTypeRef v42;
  CFTypeRef v43;
  _QWORD applier[5];
  uint8_t buf[8];
  uint8_t *v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t);
  CFTypeRef cf;
  xpc_object_t v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "WCMCellularSetFCM_BCM_Antenna_Switching_RAT"))
  {
    value = xpc_dictionary_get_value(*a2, "WCMCellularSetFCM_BCM_Antenna_Switching_RAT");
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v9 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    v51 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)buf = a2;
    v46 = (uint8_t *)"WCMCellularSetFCM_BCM_Antenna_Switching_PortMapInformationSet";
    xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &v51);
    *(_QWORD *)buf = 0;
    v46 = buf;
    v47 = 0x3002000000;
    v48 = __Block_byref_object_copy__0;
    v49 = __Block_byref_object_dispose__0;
    cf = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    if (Mutable)
    {
      v12 = cf;
      cf = Mutable;
      if (v12)
        CFRelease(v12);
    }
    v13 = MEMORY[0x1E0C809B0];
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 0x40000000;
    applier[2] = ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    applier[3] = &unk_1E7913008;
    applier[4] = buf;
    xpc_array_apply(v51, applier);
    if (!CFArrayGetCount(*((CFArrayRef *)v46 + 5)))
    {
      v35 = a1[5];
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v52) = 0;
        _os_log_debug_impl(&dword_1BF566000, v35, OS_LOG_TYPE_DEBUG, "#D Empty port map passed for FCM BCM Antenna mode", (uint8_t *)&v52, 2u);
        _Block_object_dispose(buf, 8);
        v36 = cf;
        if (!cf)
          goto LABEL_60;
        goto LABEL_59;
      }
LABEL_58:
      _Block_object_dispose(buf, 8);
      v36 = cf;
      if (!cf)
      {
LABEL_60:
        xpc_release(v51);
        return;
      }
LABEL_59:
      CFRelease(v36);
      goto LABEL_60;
    }
    v43 = 0;
    v14 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = v14;
    if (v14)
      v43 = v14;
    ctu::cf::insert<__CFString const*,unsigned int>(v14, (CFTypeRef)*MEMORY[0x1E0DDF5C8], v9, v10);
    ctu::cf::insert<__CFString const*,__CFArray *>(v15, (CFTypeRef)*MEMORY[0x1E0DDF6D0], *((CFTypeRef *)v46 + 5));
    v42 = 0;
    v16 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v17 = v16;
    if (v16)
      v42 = v16;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v16, (CFTypeRef)*MEMORY[0x1E0DDF498], v15);
    v18 = a1[5];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v52) = 138412290;
      *(_QWORD *)((char *)&v52 + 4) = v17;
      _os_log_impl(&dword_1BF566000, v18, OS_LOG_TYPE_DEFAULT, "#I Setting FCM BCM Antenna mode with: %@", (uint8_t *)&v52, 0xCu);
    }
    v20 = a1[9];
    v19 = (std::__shared_weak_count *)a1[10];
    *(_QWORD *)&v52 = v20;
    if (!v19 || (v21 = std::__shared_weak_count::lock(v19), (*((_QWORD *)&v52 + 1) = v21) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v22 = v21;
    v23 = a1[13];
    if (v17 && (v24 = CFGetTypeID(v17), v24 == CFDictionaryGetTypeID()))
    {
      v41 = v17;
      CFRetain(v17);
    }
    else
    {
      v41 = 0;
    }
    aBlock[0] = v13;
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke_185;
    aBlock[3] = &__block_descriptor_tmp_186;
    aBlock[4] = a1;
    aBlock[5] = v20;
    v38 = v22;
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldxr(p_shared_owners);
    while (__stxr(v26 + 1, p_shared_owners));
    v27 = _Block_copy(aBlock);
    v28 = a1[11];
    if (v28)
      dispatch_retain(v28);
    if (v27)
    {
      v39 = _Block_copy(v27);
      object = v28;
      if (!v28)
      {
LABEL_33:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, &v41, a3, &v39);
        if (object)
          dispatch_release(object);
        if (v39)
          _Block_release(v39);
        if (v28)
          dispatch_release(v28);
        if (v27)
          _Block_release(v27);
        if (v41)
          CFRelease(v41);
        v29 = v38;
        if (v38)
        {
          v30 = (unint64_t *)&v38->__shared_owners_;
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
        if (*((_QWORD *)&v52 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (v42)
          CFRelease(v42);
        if (v43)
          CFRelease(v43);
        goto LABEL_58;
      }
    }
    else
    {
      v39 = 0;
      object = v28;
      if (!v28)
        goto LABEL_33;
    }
    dispatch_retain(v28);
    goto LABEL_33;
  }
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#E Invalid RAT option passed for FCM BCM Antenna mode", buf, 2u);
  }
}

void sub_1BF5A8CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, int a2, xpc_object_t object)
{
  xpc_object_t v4;
  xpc_object_t v5;
  CFMutableDictionaryRef Mutable;
  ctu *value;
  void *v8;
  ctu *v9;
  void *v10;
  __CFArray *v11;
  __CFDictionary *v13;
  CFTypeRef cf;

  if (object)
  {
    v4 = object;
    xpc_retain(object);
  }
  else
  {
    v4 = xpc_null_create();
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    v5 = v4;
  }
  else
  {
    v5 = xpc_null_create();
  }
LABEL_8:
  xpc_release(v4);
  v13 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
    v13 = Mutable;
  if (xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Band")
    && xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Port"))
  {
    value = (ctu *)xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Band");
    ctu::xpc_to_cf(value, v8);
    ctu::cf::insert<__CFString const*,void const*>(v13, (CFTypeRef)*MEMORY[0x1E0DDF5F8], cf);
    if (cf)
      CFRelease(cf);
    v9 = (ctu *)xpc_dictionary_get_value(v5, "WCMCellularSetFCM_BCM_Antenna_Switching_Port");
    ctu::xpc_to_cf(v9, v10);
    ctu::cf::insert<__CFString const*,void const*>(v13, (CFTypeRef)*MEMORY[0x1E0DDF600], cf);
    if (cf)
      CFRelease(cf);
    v11 = *(__CFArray **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (v13)
    {
      CFRetain(v13);
      CFArrayAppendValue(v11, v13);
      CFRelease(v13);
    }
  }
  if (v13)
    CFRelease(v13);
  xpc_release(v5);
  return 1;
}

void sub_1BF5A8F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  void *v10;

  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a9);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State31handleSetFCMBCMAntennaMode_syncEN3xpc4dictENS_5SubIdE_block_invoke_185(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set FCM BCM Antenna mode: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::handleSetRC1DurationParam_sync(_QWORD *a1, xpc_object_t *a2, uint64_t a3)
{
  NSObject *v6;
  xpc_object_t value;
  NSObject *v8;
  unsigned int v9;
  const __CFAllocator *v10;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v12;
  CFMutableDictionaryRef v13;
  CFMutableDictionaryRef v14;
  NSObject *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  CFTypeID v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  void *v24;
  NSObject *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  CFTypeRef v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  CFTypeRef cf;
  CFTypeRef v38;
  CFTypeRef v39;
  uint8_t buf[8];
  std::__shared_weak_count *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
  {
    v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEBUG, "#D Invalid XPC dict", buf, 2u);
    }
    return;
  }
  if (xpc_dictionary_get_value(*a2, "kWCMCellularRC1Duration"))
  {
    value = xpc_dictionary_get_value(*a2, "kWCMCellularRC1Duration");
    *(_QWORD *)buf = value;
    if (value)
      xpc_retain(value);
    else
      *(_QWORD *)buf = xpc_null_create();
    v9 = xpc::dyn_cast_or_default((xpc *)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    v39 = 0;
    v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v12 = Mutable;
    if (Mutable)
      v39 = Mutable;
    ctu::cf::insert<__CFString const*,unsigned int>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF2F8], v9, v10);
    v38 = 0;
    v13 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v14 = v13;
    if (v13)
      v38 = v13;
    ctu::cf::insert<__CFString const*,__CFDictionary *>(v13, (CFTypeRef)*MEMORY[0x1E0DDF378], v12);
    v15 = a1[5];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v9;
      _os_log_impl(&dword_1BF566000, v15, OS_LOG_TYPE_DEFAULT, "#I Setting RC1 duration to %u", buf, 8u);
    }
    v17 = a1[9];
    v16 = (std::__shared_weak_count *)a1[10];
    *(_QWORD *)buf = v17;
    if (!v16 || (v18 = std::__shared_weak_count::lock(v16), (v41 = v18) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v19 = v18;
    v20 = a1[13];
    if (v14 && (v21 = CFGetTypeID(v14), v21 == CFDictionaryGetTypeID()))
    {
      cf = v14;
      CFRetain(v14);
    }
    else
    {
      cf = 0;
    }
    v33[0] = MEMORY[0x1E0C809B0];
    v33[1] = 1174405120;
    v33[2] = ___ZN4coex6Module5State30handleSetRC1DurationParam_syncEN3xpc4dictENS_5SubIdE_block_invoke;
    v33[3] = &__block_descriptor_tmp_188;
    v33[4] = a1;
    v33[5] = v17;
    v34 = v19;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
    v24 = _Block_copy(v33);
    v25 = a1[11];
    if (v25)
      dispatch_retain(v25);
    if (v24)
    {
      aBlock = _Block_copy(v24);
      object = v25;
      if (!v25)
        goto LABEL_30;
    }
    else
    {
      aBlock = 0;
      object = v25;
      if (!v25)
      {
LABEL_30:
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v20 + 48))(v20, &cf, a3, &aBlock);
        if (object)
          dispatch_release(object);
        if (aBlock)
          _Block_release(aBlock);
        if (v25)
          dispatch_release(v25);
        if (v24)
          _Block_release(v24);
        if (cf)
          CFRelease(cf);
        v26 = v34;
        if (v34)
        {
          v27 = (unint64_t *)&v34->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        v29 = v41;
        if (!v41)
          goto LABEL_49;
        v30 = (unint64_t *)&v41->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          v32 = v38;
          if (!v38)
          {
LABEL_51:
            if (v39)
              CFRelease(v39);
            return;
          }
        }
        else
        {
LABEL_49:
          v32 = v38;
          if (!v38)
            goto LABEL_51;
        }
        CFRelease(v32);
        goto LABEL_51;
      }
    }
    dispatch_retain(v25);
    goto LABEL_30;
  }
  v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#E Invalid RC1 duration passed", buf, 2u);
  }
}

void sub_1BF5A94C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF5A9580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State30handleSetRC1DurationParam_syncEN3xpc4dictENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#E Failed to set RC1 duration; %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void coex::Module::State::convertScanFreqBandFilter_sync(uint64_t a1, xpc_object_t *a2, CFArrayRef *a3)
{
  uint64_t (*v5)(uint64_t);
  CFIndex Count;
  CFIndex v7;
  CFIndex v8;
  const __CFString *v9;
  const __CFString *v10;
  const void *ValueAtIndex;
  const void *v12;
  CFTypeID v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  int Int;
  xpc_object_t v19;
  xpc_object_t v20;
  int v21;
  xpc_object_t v22;
  xpc_object_t v23;
  _QWORD v24[2];
  CFTypeRef cf;

  if (MEMORY[0x1C3B8CD78](*a2) == MEMORY[0x1E0C812C8])
  {
    v5 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    if (!*a3)
      v5 = 0;
    if (v5)
    {
      Count = CFArrayGetCount(*a3);
      if (Count >= 1)
      {
        v7 = Count;
        v8 = 0;
        v9 = (const __CFString *)*MEMORY[0x1E0DDF388];
        v10 = (const __CFString *)*MEMORY[0x1E0DDF268];
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*a3, v8);
          if (ValueAtIndex && (v12 = ValueAtIndex, v13 = CFGetTypeID(ValueAtIndex), v13 == CFDictionaryGetTypeID()))
          {
            cf = v12;
            CFRetain(v12);
            if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
            {
              v24[0] = 0xAAAAAAAAAAAAAAAALL;
              v24[1] = 0xAAAAAAAAAAAAAAAALL;
              ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v24, (const __CFDictionary *)v12);
              v14 = xpc_dictionary_create(0, 0, 0);
              if (v14 || (v14 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v14) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v14);
                  v15 = v14;
                }
                else
                {
                  v15 = xpc_null_create();
                }
              }
              else
              {
                v15 = xpc_null_create();
                v14 = 0;
              }
              xpc_release(v14);
              Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v24, v9);
              v19 = xpc_int64_create(Int);
              if (!v19)
                v19 = xpc_null_create();
              xpc_dictionary_set_value(v15, "kWCMCellularScanFreqBandFilter_CenterFreq", v19);
              v20 = xpc_null_create();
              xpc_release(v19);
              xpc_release(v20);
              v21 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v24, v10);
              v22 = xpc_int64_create(v21);
              if (!v22)
                v22 = xpc_null_create();
              xpc_dictionary_set_value(v15, "kWCMCellularScanFreqBandFilter_Bandwidth", v22);
              v23 = xpc_null_create();
              xpc_release(v22);
              xpc_release(v23);
              xpc_array_append_value(*a2, v15);
              xpc_release(v15);
              MEMORY[0x1C3B8B8B4](v24);
              goto LABEL_31;
            }
          }
          else
          {
            cf = 0;
          }
          v16 = xpc_dictionary_create(0, 0, 0);
          if (v16 || (v16 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8CD78](v16) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v16);
              v17 = v16;
            }
            else
            {
              v17 = xpc_null_create();
            }
          }
          else
          {
            v17 = xpc_null_create();
            v16 = 0;
          }
          xpc_release(v16);
          xpc_array_append_value(*a2, v17);
          xpc_release(v17);
LABEL_31:
          if (cf)
            CFRelease(cf);
          ++v8;
        }
        while (v7 != v8);
      }
    }
  }
}

void sub_1BF5A9950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, const void *a12)
{
  void *v12;

  xpc_release(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

void coex::Module::State::handleGetScanFreqBandFilter_sync(_QWORD *a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v8;
  std::__shared_weak_count *v9;
  const void *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  CFTypeID v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  NSObject *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  CFTypeRef v25;
  _QWORD aBlock[7];
  std::__shared_weak_count *v27;
  int v28;
  void *v29;
  dispatch_object_t object;
  CFTypeRef cf[2];
  std::__shared_weak_count *v32;
  CFTypeRef v33;
  _QWORD v34[5];
  xpc_object_t v35;

  v34[0] = 0;
  v34[1] = v34;
  v34[2] = 0x3002000000;
  v34[3] = __Block_byref_object_copy__189;
  v34[4] = __Block_byref_object_dispose__190;
  v35 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_array_create(0, 0);
  v5 = v4;
  if (v4)
  {
    v35 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    v35 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812C8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  v35 = v6;
LABEL_9:
  xpc_release(v5);
  v33 = 0;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v8 = Mutable;
  if (Mutable)
    v33 = Mutable;
  ctu::cf::insert<__CFString const*,BOOL>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF4C8], 1);
  v10 = (const void *)a1[9];
  v9 = (std::__shared_weak_count *)a1[10];
  cf[1] = v10;
  if (!v9 || (v11 = std::__shared_weak_count::lock(v9), (v32 = v11) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v12 = v11;
  v13 = a1[13];
  if (v8 && (v14 = CFGetTypeID(v8), v14 == CFDictionaryGetTypeID()))
  {
    cf[0] = v8;
    CFRetain(v8);
  }
  else
  {
    cf[0] = 0;
  }
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN4coex6Module5State32handleGetScanFreqBandFilter_syncENS_5SubIdE_block_invoke;
  aBlock[3] = &unk_1E7913090;
  aBlock[5] = a1;
  aBlock[6] = v10;
  v27 = v12;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v16 = __ldxr(p_shared_owners);
  while (__stxr(v16 + 1, p_shared_owners));
  aBlock[4] = v34;
  v28 = a2;
  v17 = _Block_copy(aBlock);
  v18 = a1[11];
  if (v18)
    dispatch_retain(v18);
  if (v17)
  {
    v29 = _Block_copy(v17);
    object = v18;
    if (!v18)
      goto LABEL_24;
    goto LABEL_23;
  }
  v29 = 0;
  object = v18;
  if (v18)
LABEL_23:
    dispatch_retain(v18);
LABEL_24:
  (*(void (**)(uint64_t, CFTypeRef *, uint64_t, void **))(*(_QWORD *)v13 + 56))(v13, cf, a2, &v29);
  if (object)
    dispatch_release(object);
  if (v29)
    _Block_release(v29);
  if (v18)
    dispatch_release(v18);
  if (v17)
    _Block_release(v17);
  if (cf[0])
    CFRelease(cf[0]);
  v19 = v27;
  if (!v27)
    goto LABEL_38;
  v20 = (unint64_t *)&v27->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    v22 = v32;
    if (!v32)
      goto LABEL_42;
  }
  else
  {
LABEL_38:
    v22 = v32;
    if (!v32)
      goto LABEL_42;
  }
  v23 = (unint64_t *)&v22->__shared_owners_;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 - 1, v23));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
    v25 = v33;
    if (!v33)
      goto LABEL_44;
    goto LABEL_43;
  }
LABEL_42:
  v25 = v33;
  if (v33)
LABEL_43:
    CFRelease(v25);
LABEL_44:
  _Block_object_dispose(v34, 8);
  xpc_release(v35);
}

void sub_1BF5A9D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  NSObject *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  const void *v19;
  va_list va1;
  uint64_t v21;
  va_list va2;
  uint64_t v23;
  va_list va3;

  va_start(va3, a11);
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v19 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v21 = va_arg(va3, _QWORD);
  v23 = va_arg(va3, _QWORD);
  coex::CommandDriver::Callback::~Callback((coex::CommandDriver::Callback *)va);
  if (v11)
    dispatch_release(v11);
  if (v12)
    _Block_release(v12);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)va3);
  _Block_object_dispose((const void *)(v14 - 112), 8);
  xpc_release(*(xpc_object_t *)(v14 - 72));
  _Unwind_Resume(a1);
}

xpc_object_t __Block_byref_object_copy__189(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__190(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZN4coex6Module5State32handleGetScanFreqBandFilter_syncENS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2, const __CFDictionary **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  NSObject *v7;
  const __CFDictionary *v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  xpc_object_t v15;
  int v16;
  CFArrayRef v17;
  xpc_object_t v18[2];
  uint8_t buf[16];
  void (*v20)(uint64_t);
  void *v21;
  uint64_t v22;
  xpc_object_t object;
  int v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *a2;
  v6 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v6 = 0;
  if (v6)
  {
    v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl(&dword_1BF566000, v7, OS_LOG_TYPE_DEFAULT, "#I Failed to get: %@", buf, 0xCu);
    }
    goto LABEL_19;
  }
  v8 = *a3;
  v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  if (!*a3)
    v9 = 0;
  if (v9)
  {
    memset(buf, 170, sizeof(buf));
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)buf, v8);
    v10 = (void *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)buf, (const __CFString *)*MEMORY[0x1E0DDF408]);
    v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    v18[0] = v11;
    v18[1] = v10;
    if (v11)
    {
      v12 = xpc_retain(v11);
      v17 = (CFArrayRef)v10;
      if (!v10)
        goto LABEL_14;
    }
    else
    {
      v12 = xpc_null_create();
      v11 = v12;
      v17 = (CFArrayRef)v10;
      v18[0] = v12;
      if (!v10)
      {
LABEL_14:
        coex::Module::State::convertScanFreqBandFilter_sync((uint64_t)v12, v18, &v17);
        if (v10)
          CFRelease(v10);
        xpc_release(v11);
        v18[0] = 0;
        if (v10)
          CFRelease(v10);
        MEMORY[0x1C3B8B8B4](buf);
        goto LABEL_19;
      }
    }
    v12 = (void *)CFRetain(v10);
    goto LABEL_14;
  }
LABEL_19:
  v13 = *(_QWORD *)(v4 + 120);
  if (v13)
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v15 = *(xpc_object_t *)(v14 + 40);
    if (v15)
      xpc_retain(*(xpc_object_t *)(v14 + 40));
    else
      v15 = xpc_null_create();
    v16 = *(_DWORD *)(a1 + 64);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 1174405120;
    v20 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
    v21 = &__block_descriptor_tmp_7;
    v24 = 305;
    v22 = v13;
    object = v15;
    if (v15)
      xpc_retain(v15);
    else
      object = xpc_null_create();
    v25 = v16;
    ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)buf);
    xpc_release(object);
    xpc_release(v15);
  }
}

void sub_1BF5AA034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __copy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_48c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void coex::Module::State::fetchBandInfoSet_sync(uint64_t a1, CFArrayRef *a2, const char *a3, xpc_object_t *a4)
{
  uint64_t (*v4)(uint64_t);
  CFIndex Count;
  CFIndex v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  CFIndex v13;
  const __CFString *v14;
  const __CFString *v15;
  const __CFString *v16;
  const void *ValueAtIndex;
  const void *v18;
  CFTypeID v19;
  uint64_t (*v20)(uint64_t);
  xpc_object_t v21;
  xpc_object_t v22;
  int Int;
  xpc_object_t v24;
  xpc_object_t v25;
  double v26;
  xpc_object_t v27;
  xpc_object_t v28;
  const __CFData *v29;
  const __CFData *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  xpc_object_t v33;
  int v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t *v38;
  xpc_object_t xarray;
  const __CFData *cf;
  _QWORD v41[2];
  const void *v42;
  UInt8 buffer[8];
  CFRange v44;

  if (*a2)
    v4 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  else
    v4 = 0;
  if (!a3)
    return;
  if (!v4)
    return;
  if (MEMORY[0x1C3B8CD78](*a4) != MEMORY[0x1E0C812F8])
    return;
  Count = CFArrayGetCount(*a2);
  if (Count < 1)
    return;
  v9 = Count;
  v10 = xpc_array_create(0, 0);
  v11 = MEMORY[0x1E0C812C8];
  if (v10 || (v10 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v10) == v11)
    {
      xpc_retain(v10);
      v12 = v10;
    }
    else
    {
      v12 = xpc_null_create();
    }
  }
  else
  {
    v12 = xpc_null_create();
    v10 = 0;
  }
  v38 = a4;
  xarray = v12;
  xpc_release(v10);
  v13 = 0;
  v14 = (const __CFString *)*MEMORY[0x1E0DDF388];
  v15 = (const __CFString *)*MEMORY[0x1E0DDF268];
  v16 = (const __CFString *)*MEMORY[0x1E0DDF330];
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(*a2, v13);
    v18 = ValueAtIndex;
    if (!ValueAtIndex || (v19 = CFGetTypeID(ValueAtIndex), v19 != CFDictionaryGetTypeID()))
    {
      v18 = 0;
      v42 = 0;
LABEL_26:
      if (v18)
        goto LABEL_49;
      goto LABEL_15;
    }
    v42 = v18;
    CFRetain(v18);
    v20 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v18)
      v20 = 0;
    if (!v20)
      goto LABEL_26;
    v41[0] = 0xAAAAAAAAAAAAAAAALL;
    v41[1] = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v41, (const __CFDictionary *)v18);
    v21 = xpc_dictionary_create(0, 0, 0);
    if (v21 || (v21 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v21) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v21);
        v22 = v21;
      }
      else
      {
        v22 = xpc_null_create();
      }
    }
    else
    {
      v22 = xpc_null_create();
      v21 = 0;
    }
    xpc_release(v21);
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v14);
    v24 = xpc_int64_create(Int);
    if (!v24)
      v24 = xpc_null_create();
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_CenterFreq", v24);
    v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v41, v15, 0.0);
    v27 = xpc_double_create(v26);
    if (!v27)
      v27 = xpc_null_create();
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_Bandwidth", v27);
    v28 = xpc_null_create();
    xpc_release(v27);
    xpc_release(v28);
    v29 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v41, v16);
    v30 = v29;
    cf = v29;
    v31 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    if (!v29)
      v31 = 0;
    if (v31)
    {
      if (v29)
        CFRetain(v29);
      *(_QWORD *)buffer = 0;
      v44.length = CFDataGetLength(v30);
      v44.location = 0;
      CFDataGetBytes(v30, v44, buffer);
      v32 = *(_QWORD *)buffer;
      if (v30)
        CFRelease(v30);
      v33 = xpc_uint64_create(v32);
      if (!v33)
        v33 = xpc_null_create();
    }
    else
    {
      v34 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v41, v16);
      v33 = xpc_uint64_create(v34);
      if (!v33)
        v33 = xpc_null_create();
    }
    xpc_dictionary_set_value(v22, "kWCMCellularNetworkConfiguration_BandInfoSet_DirectionMask", v33);
    v35 = xpc_null_create();
    xpc_release(v33);
    xpc_release(v35);
    xpc_array_append_value(xarray, v22);
    if (cf)
      CFRelease(cf);
    xpc_release(v22);
    MEMORY[0x1C3B8B8B4](v41);
    v18 = v42;
    if (v42)
LABEL_49:
      CFRelease(v18);
LABEL_15:
    ++v13;
  }
  while (v9 != v13);
  if (MEMORY[0x1C3B8CD78](xarray) == MEMORY[0x1E0C812C8])
  {
    if (xarray)
    {
      xpc_retain(xarray);
      v36 = xarray;
    }
    else
    {
      v36 = xpc_null_create();
    }
    xpc_dictionary_set_value(*v38, a3, v36);
    v37 = xpc_null_create();
    xpc_release(v36);
    xpc_release(v37);
  }
  xpc_release(xarray);
}

void sub_1BF5AA5C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void coex::Module::State::fetchCarrierIdSet_sync(uint64_t a1, CFArrayRef *a2, const char *a3, xpc_object_t *a4)
{
  uint64_t (*v4)(uint64_t);
  CFIndex Count;
  CFIndex v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  CFIndex i;
  unsigned int *ValueAtIndex;
  unsigned int *v15;
  CFTypeID v16;
  const __CFNumber *v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  int64_t value;

  if (*a2)
    v4 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
  else
    v4 = 0;
  if (a3)
  {
    if (v4)
    {
      if (MEMORY[0x1C3B8CD78](*a4) == MEMORY[0x1E0C812F8])
      {
        Count = CFArrayGetCount(*a2);
        if (Count >= 1)
        {
          v9 = Count;
          v10 = xpc_array_create(0, 0);
          v11 = MEMORY[0x1E0C812C8];
          if (v10 || (v10 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B8CD78](v10) == v11)
            {
              xpc_retain(v10);
              v12 = v10;
            }
            else
            {
              v12 = xpc_null_create();
            }
          }
          else
          {
            v12 = xpc_null_create();
            v10 = 0;
          }
          xpc_release(v10);
          for (i = 0; i != v9; ++i)
          {
            LODWORD(value) = 0;
            ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(*a2, i);
            v15 = ValueAtIndex;
            if (ValueAtIndex)
            {
              v16 = CFGetTypeID(ValueAtIndex);
              if (v16 == CFNumberGetTypeID())
              {
                if (ctu::cf::assign((ctu::cf *)&value, v15, v17))
                {
                  v18 = xpc_int64_create(value);
                  if (!v18)
                    v18 = xpc_null_create();
                  xpc_array_append_value(v12, v18);
                  xpc_release(v18);
                }
              }
            }
          }
          if (MEMORY[0x1C3B8CD78](v12) == v11 && xpc_array_get_count(v12))
          {
            if (v12)
            {
              xpc_retain(v12);
              v19 = v12;
            }
            else
            {
              v19 = xpc_null_create();
            }
            xpc_dictionary_set_value(*a4, a3, v19);
            v20 = xpc_null_create();
            xpc_release(v19);
            xpc_release(v20);
          }
          xpc_release(v12);
        }
      }
    }
  }
}

void sub_1BF5AA8D4(_Unwind_Exception *a1)
{
  void *v1;

  xpc_release(v1);
  _Unwind_Resume(a1);
}

void coex::Module::State::sendWWANState_sync(uint64_t a1, uint64_t a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t (*v7)(uint64_t);
  ctu::cf::map_adapter *v8;
  const __CFDictionary *v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *v14;
  CFTypeID v15;
  CFTypeID TypeID;
  uint64_t v17;
  const void *v18;
  const void *v19;
  CFTypeID v20;
  CFTypeID v21;
  const __CFDictionary *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  CFTypeID v27;
  const __CFNumber *v28;
  int v29;
  __CFDictionary *Mutable;
  __CFDictionary *v31;
  const void *v32;
  uint64_t v33;
  CFTypeID v34;
  CFMutableDictionaryRef v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int *v38;
  CFTypeID v39;
  const __CFNumber *v40;
  int v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  CFTypeID v45;
  const __CFNumber *v46;
  int v47;
  uint64_t v48;
  unsigned int *v49;
  unsigned int *v50;
  CFTypeID v51;
  const __CFNumber *v52;
  int v53;
  uint64_t v54;
  unsigned int *v55;
  unsigned int *v56;
  CFTypeID v57;
  const __CFNumber *v58;
  int v59;
  const __CFArray *v60;
  const __CFArray *v61;
  uint64_t (*v62)(uint64_t);
  void *v63;
  xpc_object_t v64;
  const __CFArray *v65;
  const __CFArray *v66;
  uint64_t (*v67)(uint64_t);
  void *v68;
  xpc_object_t v69;
  const __CFArray *v70;
  const __CFArray *v71;
  uint64_t (*v72)(uint64_t);
  void *v73;
  xpc_object_t v74;
  const __CFArray *v75;
  const __CFArray *v76;
  uint64_t (*v77)(uint64_t);
  void *v78;
  xpc_object_t v79;
  const __CFDictionary *v80;
  const __CFArray *v81;
  const __CFArray *v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  xpc_object_t v85;
  const __CFArray *v86;
  const __CFArray *v87;
  uint64_t (*v88)(uint64_t);
  void *v89;
  xpc_object_t v90;
  const __CFArray *v91;
  const __CFArray *v92;
  uint64_t (*v93)(uint64_t);
  void *v94;
  xpc_object_t v95;
  const __CFArray *v96;
  const __CFArray *v97;
  uint64_t (*v98)(uint64_t);
  void *v99;
  xpc_object_t v100;
  const __CFArray *v101;
  const __CFArray *v102;
  uint64_t (*v103)(uint64_t);
  void *v104;
  xpc_object_t v105;
  uint64_t v106;
  const __CFDictionary *v107;
  uint64_t (*v108)(uint64_t);
  unsigned int *v109;
  unsigned int *v110;
  CFTypeID v111;
  const __CFNumber *v112;
  int v113;
  uint64_t v114;
  xpc_object_t v115;
  int v116;
  uint64_t v117;
  const __CFArray *v118;
  const __CFArray *v119;
  _QWORD v120[2];
  void (*v121)(uint64_t, int64_t);
  void *v122;
  uint64_t *v123;
  _QWORD v124[2];
  xpc_object_t v125;
  CFArrayRef v126[2];
  xpc_object_t v127;
  CFArrayRef v128[2];
  xpc_object_t v129;
  CFArrayRef v130[2];
  xpc_object_t v131;
  CFArrayRef v132[2];
  xpc_object_t v133;
  CFArrayRef v134[2];
  xpc_object_t v135;
  CFArrayRef v136[2];
  xpc_object_t v137;
  CFArrayRef v138[2];
  xpc_object_t v139;
  CFArrayRef v140[2];
  xpc_object_t v141;
  CFArrayRef v142;
  int64_t value;
  _QWORD v144[2];
  void (*v145)(uint64_t, int64_t);
  void *v146;
  uint64_t *v147;
  _QWORD v148[2];
  _QWORD v149[2];
  void (*v150)(uint64_t, int64_t);
  void *v151;
  uint64_t *v152;
  _QWORD v153[2];
  _QWORD v154[2];
  void (*v155)(uint64_t, int64_t);
  void *v156;
  uint64_t *v157;
  _QWORD v158[2];
  _QWORD v159[2];
  void (*v160)(uint64_t, int64_t);
  void *v161;
  uint64_t *v162;
  _QWORD v163[2];
  _QWORD v164[2];
  void (*v165)(uint64_t, int64_t);
  void *v166;
  uint64_t *v167;
  _QWORD v168[2];
  _QWORD v169[2];
  void (*v170)(uint64_t, const __CFDictionary *);
  void *v171;
  uint64_t *v172;
  _QWORD v173[2];
  _QWORD v174[2];
  void (*v175)(uint64_t, const __CFDictionary *);
  void *v176;
  uint64_t *v177;
  _QWORD v178[2];
  const __CFDictionary *v179;
  _QWORD v180[2];
  __CFDictionary *v181;
  CFMutableDictionaryRef v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  xpc_object_t (*v186)(uint64_t, uint64_t);
  void (*v187)(uint64_t);
  xpc_object_t v188;
  unsigned int v189;
  unint64_t v190;
  unint64_t v191;
  void (*v192)(uint64_t);
  void *v193;
  uint64_t v194;
  xpc_object_t v195;
  int v196;
  int v197;

  v183 = 0;
  v184 = &v183;
  v185 = 0x3002000000;
  v186 = __Block_byref_object_copy__195;
  v187 = __Block_byref_object_dispose__196;
  v188 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v4 = xpc_dictionary_create(0, 0, 0);
  v5 = v4;
  if (v4)
  {
    v188 = v4;
  }
  else
  {
    v5 = xpc_null_create();
    v188 = v5;
    if (!v5)
    {
      v6 = xpc_null_create();
      v5 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  v6 = xpc_null_create();
LABEL_8:
  v188 = v6;
LABEL_9:
  xpc_release(v5);
  v182 = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyWWANState, a2, 0, &v182);
  v7 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v182)
    v7 = 0;
  if (v7)
  {
    v180[0] = 0xAAAAAAAAAAAAAAAALL;
    v180[1] = 0xAAAAAAAAAAAAAAAALL;
    v8 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v180, v182);
    v179 = 0;
    v9 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef(v8, (const __CFString *)*MEMORY[0x1E0DDF3F8]);
    v179 = v9;
    if (v9)
      v10 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v10 = 0;
    v11 = MEMORY[0x1E0C809B0];
    if (v10)
    {
      v190 = 0xAAAAAAAAAAAAAAAALL;
      v191 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v190, v9);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v178, (const ctu::cf::dict_adapter *)&v190);
      v12 = *MEMORY[0x1E0DDF3F0];
      v174[0] = v11;
      v174[1] = 0x40000000;
      v175 = (void (*)(uint64_t, const __CFDictionary *))___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke;
      v176 = &unk_1E79130C8;
      v177 = &v183;
      v13 = (const void *)(*(uint64_t (**)(_QWORD *, uint64_t))v178[0])(v178, v12);
      v14 = v13;
      if (v13)
      {
        v15 = CFGetTypeID(v13);
        TypeID = CFDictionaryGetTypeID();
        CFRelease(v14);
        if (v15 == TypeID)
          v175((uint64_t)v174, (const __CFDictionary *)v14);
      }
      MEMORY[0x1C3B8B8B4](v178);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v173, (const ctu::cf::dict_adapter *)&v190);
      v17 = *MEMORY[0x1E0DDF3D8];
      v169[0] = v11;
      v169[1] = 0x40000000;
      v170 = (void (*)(uint64_t, const __CFDictionary *))___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_2;
      v171 = &unk_1E79130F0;
      v172 = &v183;
      v18 = (const void *)(*(uint64_t (**)(_QWORD *, uint64_t))v173[0])(v173, v17);
      v19 = v18;
      if (v18)
      {
        v20 = CFGetTypeID(v18);
        v21 = CFDictionaryGetTypeID();
        CFRelease(v19);
        if (v20 == v21)
          v170((uint64_t)v169, (const __CFDictionary *)v19);
      }
      MEMORY[0x1C3B8B8B4](v173);
      MEMORY[0x1C3B8B8B4](&v190);
    }
    v22 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF3E0]);
    v179 = v22;
    if (v9)
      CFRelease(v9);
    if (v22)
      v23 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    else
      v23 = 0;
    if (v23)
    {
      v190 = 0xAAAAAAAAAAAAAAAALL;
      v191 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v190, v22);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v168, (const ctu::cf::dict_adapter *)&v190);
      v24 = *MEMORY[0x1E0DDF2E0];
      v164[0] = v11;
      v164[1] = 0x40000000;
      v165 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_3;
      v166 = &unk_1E7913118;
      v167 = &v183;
      v25 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v168[0])(v168, v24);
      v26 = v25;
      if (v25)
      {
        v27 = CFGetTypeID(v25);
        if (v27 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v29 = ctu::cf::assign((ctu::cf *)&value, v26, v28);
          CFRelease(v26);
          if (v29)
            v165((uint64_t)v164, value);
        }
        else
        {
          CFRelease(v26);
        }
      }
      MEMORY[0x1C3B8B8B4](v168);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v163, (const ctu::cf::dict_adapter *)&v190);
      v36 = *MEMORY[0x1E0DDF2A0];
      v159[0] = v11;
      v159[1] = 0x40000000;
      v160 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_4;
      v161 = &unk_1E7913140;
      v162 = &v183;
      v37 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v163[0])(v163, v36);
      v38 = v37;
      if (v37)
      {
        v39 = CFGetTypeID(v37);
        if (v39 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v41 = ctu::cf::assign((ctu::cf *)&value, v38, v40);
          CFRelease(v38);
          if (v41)
            v160((uint64_t)v159, value);
        }
        else
        {
          CFRelease(v38);
        }
      }
      MEMORY[0x1C3B8B8B4](v163);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v158, (const ctu::cf::dict_adapter *)&v190);
      v42 = *MEMORY[0x1E0DDF380];
      v154[0] = v11;
      v154[1] = 0x40000000;
      v155 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_5;
      v156 = &unk_1E7913168;
      v157 = &v183;
      v43 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v158[0])(v158, v42);
      v44 = v43;
      if (v43)
      {
        v45 = CFGetTypeID(v43);
        if (v45 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v47 = ctu::cf::assign((ctu::cf *)&value, v44, v46);
          CFRelease(v44);
          if (v47)
            v155((uint64_t)v154, value);
        }
        else
        {
          CFRelease(v44);
        }
      }
      MEMORY[0x1C3B8B8B4](v158);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v153, (const ctu::cf::dict_adapter *)&v190);
      v48 = *MEMORY[0x1E0DDF260];
      v149[0] = v11;
      v149[1] = 0x40000000;
      v150 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_6;
      v151 = &unk_1E7913190;
      v152 = &v183;
      v49 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v153[0])(v153, v48);
      v50 = v49;
      if (v49)
      {
        v51 = CFGetTypeID(v49);
        if (v51 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v53 = ctu::cf::assign((ctu::cf *)&value, v50, v52);
          CFRelease(v50);
          if (v53)
            v150((uint64_t)v149, value);
        }
        else
        {
          CFRelease(v50);
        }
      }
      MEMORY[0x1C3B8B8B4](v153);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v148, (const ctu::cf::dict_adapter *)&v190);
      v54 = *MEMORY[0x1E0DDF250];
      v144[0] = v11;
      v144[1] = 0x40000000;
      v145 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_7;
      v146 = &unk_1E79131B8;
      v147 = &v183;
      v55 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v148[0])(v148, v54);
      v56 = v55;
      if (v55)
      {
        v57 = CFGetTypeID(v55);
        if (v57 == CFNumberGetTypeID())
        {
          LODWORD(value) = -1431655766;
          v59 = ctu::cf::assign((ctu::cf *)&value, v56, v58);
          CFRelease(v56);
          if (v59)
            v145((uint64_t)v144, value);
        }
        else
        {
          CFRelease(v56);
        }
      }
      MEMORY[0x1C3B8B8B4](v148);
      MEMORY[0x1C3B8B8B4](&v190);
    }
    v60 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF4E0]);
    v61 = v60;
    value = (int64_t)v60;
    if (v60)
      v62 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v62 = 0;
    if (v62)
    {
      v142 = v60;
      if (v60)
        CFRetain(v60);
      v63 = (void *)v184[5];
      v141 = v63;
      if (v63)
      {
        v64 = xpc_retain(v63);
      }
      else
      {
        v64 = xpc_null_create();
        v63 = v64;
        v141 = v64;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v64, &v142, "kWCMCellularNetworkConfiguration_LTEBandInformationSet", &v141);
      xpc_release(v63);
      v141 = 0;
      if (v61)
        CFRelease(v61);
    }
    v65 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF5E8]);
    v66 = v65;
    v140[1] = v65;
    if (v65)
      v67 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v67 = 0;
    if (v67)
    {
      v140[0] = v65;
      if (v65)
        CFRetain(v65);
      v68 = (void *)v184[5];
      v139 = v68;
      if (v68)
      {
        v69 = xpc_retain(v68);
      }
      else
      {
        v69 = xpc_null_create();
        v68 = v69;
        v139 = v69;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v69, v140, "kWCMCellularNetworkConfiguration_TDSCDMABandInformationSet", &v139);
      xpc_release(v68);
      v139 = 0;
      if (v66)
        CFRelease(v66);
    }
    v70 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF4C0]);
    v71 = v70;
    v138[1] = v70;
    if (v70)
      v72 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v72 = 0;
    if (v72)
    {
      v138[0] = v70;
      if (v70)
        CFRetain(v70);
      v73 = (void *)v184[5];
      v137 = v73;
      if (v73)
      {
        v74 = xpc_retain(v73);
      }
      else
      {
        v74 = xpc_null_create();
        v73 = v74;
        v137 = v74;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v74, v138, "kWCMCellularNetworkConfiguration_GSMBandInformationSet", &v137);
      xpc_release(v73);
      v137 = 0;
      if (v71)
        CFRelease(v71);
    }
    v75 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF520]);
    v76 = v75;
    v136[1] = v75;
    if (v75)
      v77 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v77 = 0;
    if (v77)
    {
      v136[0] = v75;
      if (v75)
        CFRetain(v75);
      v78 = (void *)v184[5];
      v135 = v78;
      if (v78)
      {
        v79 = xpc_retain(v78);
      }
      else
      {
        v79 = xpc_null_create();
        v78 = v79;
        v135 = v79;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v79, v136, "kWCMCellularNetworkConfiguration_ONEXBandInformationSet", &v135);
      xpc_release(v78);
      v135 = 0;
      if (v76)
        CFRelease(v76);
    }
    v118 = v66;
    v119 = v61;
    v80 = v22;
    v81 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF4D0]);
    v82 = v81;
    v134[1] = v81;
    if (v81)
      v83 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v83 = 0;
    if (v83)
    {
      v134[0] = v81;
      if (v81)
        CFRetain(v81);
      v84 = (void *)v184[5];
      v133 = v84;
      if (v84)
      {
        v85 = xpc_retain(v84);
      }
      else
      {
        v85 = xpc_null_create();
        v84 = v85;
        v133 = v85;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v85, v134, "kWCMCellularNetworkConfiguration_HDRBandInformationSet", &v133);
      xpc_release(v84);
      v133 = 0;
      if (v82)
        CFRelease(v82);
    }
    v117 = a1;
    v86 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF578]);
    v87 = v86;
    v132[1] = v86;
    if (v86)
      v88 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v88 = 0;
    if (v88)
    {
      v132[0] = v86;
      if (v86)
        CFRetain(v86);
      v89 = (void *)v184[5];
      v131 = v89;
      if (v89)
      {
        v90 = xpc_retain(v89);
      }
      else
      {
        v90 = xpc_null_create();
        v89 = v90;
        v131 = v90;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v90, v132, "kWCMCellularNetworkConfiguration_WCDMABandInformationSet", &v131);
      xpc_release(v89);
      v131 = 0;
      if (v87)
        CFRelease(v87);
    }
    v116 = a2;
    v91 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF4F0]);
    v92 = v91;
    v130[1] = v91;
    if (v91)
      v93 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v93 = 0;
    if (v93)
    {
      v130[0] = v91;
      if (v91)
        CFRetain(v91);
      v94 = (void *)v184[5];
      v129 = v94;
      if (v94)
      {
        v95 = xpc_retain(v94);
      }
      else
      {
        v95 = xpc_null_create();
        v94 = v95;
        v129 = v95;
      }
      coex::Module::State::fetchBandInfoSet_sync((uint64_t)v95, v130, "kWCMCellularNetworkConfiguration_NGCBandInformationSet", &v129);
      xpc_release(v94);
      v129 = 0;
      if (v92)
        CFRelease(v92);
    }
    v96 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF598]);
    v97 = v96;
    v128[1] = v96;
    if (v96)
      v98 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v98 = 0;
    if (v98)
    {
      v128[0] = v96;
      if (v96)
        CFRetain(v96);
      v99 = (void *)v184[5];
      v127 = v99;
      if (v99)
      {
        v100 = xpc_retain(v99);
      }
      else
      {
        v100 = xpc_null_create();
        v99 = v100;
        v127 = v100;
      }
      coex::Module::State::fetchCarrierIdSet_sync((uint64_t)v100, v128, "kWCMCellularNetworkConfiguration_LTECarrierInformationSet", &v127);
      xpc_release(v99);
      v127 = 0;
      if (v97)
        CFRelease(v97);
    }
    v101 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF5A0]);
    v102 = v101;
    v126[1] = v101;
    if (v101)
      v103 = ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::get;
    else
      v103 = 0;
    if (v103)
    {
      v126[0] = v101;
      if (v101)
        CFRetain(v101);
      v104 = (void *)v184[5];
      v125 = v104;
      if (v104)
      {
        v105 = xpc_retain(v104);
      }
      else
      {
        v105 = xpc_null_create();
        v104 = v105;
        v125 = v105;
      }
      coex::Module::State::fetchCarrierIdSet_sync((uint64_t)v105, v126, "kWCMCellularNetworkConfiguration_NGCCarrierInformationSet", &v125);
      xpc_release(v104);
      v125 = 0;
      if (v102)
        CFRelease(v102);
    }
    v106 = *MEMORY[0x1E0DDF300];
    v107 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)v180, (const __CFString *)*MEMORY[0x1E0DDF300]);
    v179 = v107;
    if (v80)
      CFRelease(v80);
    v108 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v107)
      v108 = 0;
    if (v108)
    {
      v190 = 0xAAAAAAAAAAAAAAAALL;
      v191 = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v190, v107);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v124, (const ctu::cf::dict_adapter *)&v190);
      v120[0] = MEMORY[0x1E0C809B0];
      v120[1] = 0x40000000;
      v121 = ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_8;
      v122 = &unk_1E79131E0;
      v123 = &v183;
      v109 = (unsigned int *)(*(uint64_t (**)(_QWORD *, uint64_t))v124[0])(v124, v106);
      v110 = v109;
      if (v109)
      {
        v111 = CFGetTypeID(v109);
        if (v111 == CFNumberGetTypeID())
        {
          v189 = -1431655766;
          v113 = ctu::cf::assign((ctu::cf *)&v189, v110, v112);
          CFRelease(v110);
          if (v113)
            v121((uint64_t)v120, v189);
        }
        else
        {
          CFRelease(v110);
        }
      }
      MEMORY[0x1C3B8B8B4](v124);
      MEMORY[0x1C3B8B8B4](&v190);
    }
    v114 = *(_QWORD *)(v117 + 120);
    if (v114)
    {
      v115 = (xpc_object_t)v184[5];
      if (v115)
        xpc_retain((xpc_object_t)v184[5]);
      else
        v115 = xpc_null_create();
      v190 = MEMORY[0x1E0C809B0];
      v191 = 1174405120;
      v192 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
      v193 = &__block_descriptor_tmp_7;
      v196 = 300;
      v194 = v114;
      v195 = v115;
      if (v115)
        xpc_retain(v115);
      else
        v195 = xpc_null_create();
      v197 = v116;
      ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v114 + 8), (uint64_t)&v190);
      xpc_release(v195);
      xpc_release(v115);
    }
    if (v102)
      CFRelease(v102);
    if (v97)
      CFRelease(v97);
    if (v92)
      CFRelease(v92);
    if (v87)
      CFRelease(v87);
    if (v82)
      CFRelease(v82);
    if (v76)
      CFRelease(v76);
    if (v71)
      CFRelease(v71);
    if (v118)
      CFRelease(v118);
    if (v119)
      CFRelease(v119);
    if (v107)
      CFRelease(v107);
    MEMORY[0x1C3B8B8B4](v180);
    v35 = v182;
    if (v182)
LABEL_207:
      CFRelease(v35);
  }
  else
  {
    v190 = 0;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v31 = Mutable;
    if (Mutable)
      v190 = (unint64_t)Mutable;
    v32 = (const void *)*MEMORY[0x1E0C9AE50];
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(Mutable, (CFTypeRef)*MEMORY[0x1E0DDF338], (CFTypeRef)*MEMORY[0x1E0C9AE50]);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v31, (CFTypeRef)*MEMORY[0x1E0DDF390], v32);
    ctu::cf::insert<__CFString const*,__CFBoolean const*>(v31, (CFTypeRef)*MEMORY[0x1E0DDF2C8], v32);
    v33 = *(_QWORD *)(a1 + 104);
    if (v33)
    {
      if (v31 && (v34 = CFGetTypeID(v31), v34 == CFDictionaryGetTypeID()))
      {
        v181 = v31;
        CFRetain(v31);
      }
      else
      {
        v181 = 0;
      }
      (*(void (**)(uint64_t, __CFDictionary **, uint64_t))(*(_QWORD *)v33 + 72))(v33, &v181, a2);
      if (v181)
        CFRelease(v181);
    }
    if (v31)
      CFRelease(v31);
    v35 = v182;
    if (v182)
      goto LABEL_207;
  }
  _Block_object_dispose(&v183, 8);
  xpc_release(v188);
}

void sub_1BF5AB818(_Unwind_Exception *a1)
{
  uint64_t v1;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)(v1 - 232));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 160));
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v1 - 224));
  _Block_object_dispose((const void *)(v1 - 216), 8);
  xpc_release(*(xpc_object_t *)(v1 - 176));
  _Unwind_Resume(a1);
}

void sub_1BF5ABBA4()
{
  JUMPOUT(0x1BF5ABB54);
}

xpc_object_t __Block_byref_object_copy__195(uint64_t a1, uint64_t a2)
{
  xpc_object_t result;

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = xpc_null_create();
  *(_QWORD *)(a2 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__196(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
}

uint64_t ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  int Int;
  xpc_object_t v4;
  xpc_object_t v5;
  double v6;
  xpc_object_t v7;
  xpc_object_t v8;
  _QWORD v10[2];

  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v10, a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E0DDF388]);
  v4 = xpc_int64_create(Int);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULBandInfo_CenterFreq", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E0DDF268], 0.0);
  v7 = xpc_double_create(v6);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULBandInfo_BandWidth", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  return MEMORY[0x1C3B8B8B4](v10);
}

uint64_t ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_2(uint64_t a1, const __CFDictionary *a2)
{
  int Int;
  xpc_object_t v4;
  xpc_object_t v5;
  double v6;
  xpc_object_t v7;
  xpc_object_t v8;
  _QWORD v10[2];

  v10[0] = 0xAAAAAAAAAAAAAAAALL;
  v10[1] = 0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v10, a2);
  Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E0DDF388]);
  v4 = xpc_int64_create(Int);
  if (!v4)
    v4 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLBandInfo_CenterFreq", v4);
  v5 = xpc_null_create();
  xpc_release(v4);
  xpc_release(v5);
  ctu::cf::map_adapter::getDouble((ctu::cf::map_adapter *)v10, (const __CFString *)*MEMORY[0x1E0DDF268], 0.0);
  v7 = xpc_double_create(v6);
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLBandInfo_BandWidth", v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  return MEMORY[0x1C3B8B8B4](v10);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_3(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_FrameOffset", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_4(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_TTDUL_DL", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_5(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_SubFrameFormat", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_6(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_ULCPConfig", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_7(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_DLCPConfig", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State18sendWWANState_syncENS_5SubIdE_block_invoke_8(uint64_t a1, int64_t value)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(value);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularNetworkConfiguration_LTEOffPeriod", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void coex::Module::State::sendLinkQuality_sync(uint64_t a1, int a2)
{
  xpc_object_t v4;
  xpc_object_t v5;
  uint64_t (*v6)(uint64_t);
  void *v7;
  const __CFNumber *v8;
  uint64_t (*v9)(uint64_t);
  xpc_object_t v10;
  xpc_object_t v11;
  const __CFDictionary *v12;
  uint64_t (*v13)(uint64_t);
  int Int;
  int v15;
  double v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  uint64_t v21;
  xpc_object_t v22;
  int64_t value[2];
  const __CFDictionary *v24;
  CFTypeRef cf;
  CFTypeRef v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(uint64_t);
  void *v30;
  uint64_t v31;
  xpc_object_t object;
  int v33;
  int v34;

  v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (v4 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v4);
      v5 = v4;
    }
    else
    {
      v5 = xpc_null_create();
    }
  }
  else
  {
    v5 = xpc_null_create();
    v4 = 0;
  }
  xpc_release(v4);
  v26 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyLinkQuality, a2, 0, (CFMutableDictionaryRef *)&v26);
  v6 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v26)
    v6 = 0;
  if (v6)
  {
    v27 = 0xAAAAAAAAAAAAAAAALL;
    v28 = 0xAAAAAAAAAAAAAAAALL;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v27, (const __CFDictionary *)v26);
    v7 = (void *)ctu::cf::map_adapter::copyCFNumberRef((ctu::cf::map_adapter *)&v27, (const __CFString *)*MEMORY[0x1E0DDF6F8]);
    cf = v7;
    v9 = ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::get;
    if (!v7)
      v9 = 0;
    if (v9)
    {
      value[0] = 0;
      ctu::cf::assign((ctu::cf *)value, (uint64_t *)v7, v8);
      v10 = xpc_int64_create(value[0]);
      if (!v10)
        v10 = xpc_null_create();
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_SINR", v10);
      v11 = xpc_null_create();
      xpc_release(v10);
      xpc_release(v11);
    }
    v12 = (const __CFDictionary *)ctu::cf::map_adapter::copyCFDictionaryRef((ctu::cf::map_adapter *)&v27, (const __CFString *)*MEMORY[0x1E0DDF398]);
    v24 = v12;
    v13 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    if (!v12)
      v13 = 0;
    if (v13)
    {
      value[0] = 0xAAAAAAAAAAAAAAAALL;
      value[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)value, v12);
      Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)value, (const __CFString *)*MEMORY[0x1E0DDF2A8]);
      v15 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)value, (const __CFString *)*MEMORY[0x1E0DDF590]);
      v16 = (double)Int;
      v17 = xpc_double_create((double)Int);
      if (!v17)
        v17 = xpc_null_create();
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_BLERBlockCount", v17);
      v18 = xpc_null_create();
      xpc_release(v17);
      xpc_release(v18);
      v19 = xpc_double_create((double)v15 / v16);
      if (!v19)
        v19 = xpc_null_create();
      xpc_dictionary_set_value(v5, "kWCMCellularLinkQuality_BLER", v19);
      v20 = xpc_null_create();
      xpc_release(v19);
      xpc_release(v20);
      MEMORY[0x1C3B8B8B4](value);
      v12 = v24;
    }
    if (v12)
      CFRelease(v12);
    if (cf)
      CFRelease(cf);
    MEMORY[0x1C3B8B8B4](&v27);
  }
  v21 = *(_QWORD *)(a1 + 120);
  if (v21)
  {
    if (v5)
    {
      xpc_retain(v5);
      v22 = v5;
    }
    else
    {
      v22 = xpc_null_create();
    }
    v27 = MEMORY[0x1E0C809B0];
    v28 = 1174405120;
    v29 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
    v30 = &__block_descriptor_tmp_7;
    v33 = 302;
    v31 = v21;
    object = v22;
    if (v22)
      xpc_retain(v22);
    else
      object = xpc_null_create();
    v34 = a2;
    ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v21 + 8), (uint64_t)&v27);
    xpc_release(object);
    xpc_release(v22);
  }
  if (v26)
    CFRelease(v26);
  xpc_release(v5);
}

void sub_1BF5AC548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, const void *a13, char a14)
{
  void *v14;

  MEMORY[0x1C3B8B8B4](&a9);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  ctu::cf::CFSharedRef<__CFNumber const>::~CFSharedRef(&a12);
  MEMORY[0x1C3B8B8B4](&a14);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef(&a13);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

void coex::Module::State::sendFailCondition_sync(uint64_t a1, int a2)
{
  CFMutableDictionaryRef v4;
  uint64_t (*v5)(uint64_t);
  ctu::cf::map_adapter *v6;
  const __CFData *v7;
  const __CFData *v8;
  uint64_t (*v9)(uint64_t);
  UInt8 v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  CFTypeID v20;
  const __CFNumber *v21;
  int v22;
  uint64_t v23;
  const __CFData *v24;
  const __CFData *v25;
  const __CFData *v26;
  uint64_t (*v27)(uint64_t);
  UInt8 v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  CFTypeID v38;
  const __CFNumber *v39;
  int v40;
  uint64_t v41;
  const __CFData *v42;
  const __CFData *v43;
  const __CFData *v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  uint64_t v51;
  xpc_object_t v52;
  _QWORD v53[2];
  void (*v54)(uint64_t, int);
  void *v55;
  const __CFData **v56;
  _QWORD v57[3];
  CFTypeRef cf;
  _QWORD v59[2];
  void (*v60)(uint64_t, int);
  void *v61;
  const __CFData **v62;
  _QWORD v63[2];
  const __CFData *v64;
  const __CFData **v65;
  uint64_t v66;
  xpc_object_t (*v67)(uint64_t, uint64_t);
  void (*v68)(uint64_t);
  xpc_object_t object;
  const __CFData *v70;
  const __CFData *v71;
  _QWORD v72[2];
  CFMutableDictionaryRef v73;
  UInt8 buffer[8];
  uint64_t v75;
  void (*v76)(uint64_t);
  void *v77;
  uint64_t v78;
  xpc_object_t v79;
  int v80;
  int v81;
  CFRange v82;
  CFRange v83;
  CFRange v84;

  v73 = (CFMutableDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  coex::Module::State::getSubProperty(a1, coex::kKeyFailCondition, a2, 0, &v73);
  v4 = v73;
  v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  if (!v73)
    v5 = 0;
  if (v5)
  {
    v72[0] = 0xAAAAAAAAAAAAAAAALL;
    v72[1] = 0xAAAAAAAAAAAAAAAALL;
    v6 = (ctu::cf::map_adapter *)ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v72, v73);
    v7 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef(v6, (const __CFString *)*MEMORY[0x1E0DDF6B8]);
    v8 = v7;
    v71 = v7;
    if (v7)
      v9 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    else
      v9 = 0;
    if (!v9)
      goto LABEL_37;
    v70 = v7;
    if (v7)
      CFRetain(v7);
    *(_QWORD *)buffer = 0;
    v82.length = CFDataGetLength(v8);
    v82.location = 0;
    CFDataGetBytes(v8, v82, buffer);
    v10 = buffer[0];
    if (v8)
      CFRelease(v8);
    if ((v10 & 1) == 0)
    {
LABEL_37:
      v25 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v72, (const __CFString *)*MEMORY[0x1E0DDF458]);
      v26 = v25;
      cf = v25;
      if (v25)
        v27 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
      else
        v27 = 0;
      if (!v27)
        goto LABEL_70;
      v57[2] = v25;
      if (v25)
        CFRetain(v25);
      *(_QWORD *)buffer = 0;
      v83.length = CFDataGetLength(v26);
      v83.location = 0;
      CFDataGetBytes(v26, v83, buffer);
      v28 = buffer[0];
      if (v26)
        CFRelease(v26);
      if ((v28 & 2) == 0)
        goto LABEL_70;
      v64 = 0;
      v65 = &v64;
      v66 = 0x3002000000;
      v67 = __Block_byref_object_copy__195;
      v68 = __Block_byref_object_dispose__196;
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      v29 = xpc_dictionary_create(0, 0, 0);
      v30 = v29;
      if (v29)
      {
        object = v29;
      }
      else
      {
        v30 = xpc_null_create();
        object = v30;
        if (!v30)
        {
          v31 = xpc_null_create();
          v30 = 0;
          goto LABEL_53;
        }
      }
      if (MEMORY[0x1C3B8CD78](v30) == MEMORY[0x1E0C812F8])
      {
        xpc_retain(v30);
LABEL_54:
        xpc_release(v30);
        v32 = xpc_int64_create(0);
        if (!v32)
          v32 = xpc_null_create();
        xpc_dictionary_set_value(v65[5], "kWCMCellularThresholdReached_EventType", v32);
        v33 = xpc_null_create();
        xpc_release(v32);
        xpc_release(v33);
        ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v57, (const ctu::cf::dict_adapter *)v72);
        v34 = *MEMORY[0x1E0DDF508];
        v35 = MEMORY[0x1E0C809B0];
        v53[0] = MEMORY[0x1E0C809B0];
        v53[1] = 0x40000000;
        v54 = ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke_2;
        v55 = &unk_1E7913230;
        v56 = &v64;
        v36 = (int *)(*(uint64_t (**)(_QWORD *, uint64_t))v57[0])(v57, v34);
        v37 = v36;
        if (v36)
        {
          v38 = CFGetTypeID(v36);
          if (v38 == CFNumberGetTypeID())
          {
            *(_DWORD *)buffer = -1431655766;
            v40 = ctu::cf::assign((ctu::cf *)buffer, v37, v39);
            CFRelease(v37);
            if (v40)
              v54((uint64_t)v53, *(unsigned int *)buffer);
          }
          else
          {
            CFRelease(v37);
          }
        }
        MEMORY[0x1C3B8B8B4](v57);
        v41 = *(_QWORD *)(a1 + 120);
        if (v41)
        {
          v42 = v65[5];
          if (v42)
            xpc_retain(v65[5]);
          else
            v42 = (const __CFData *)xpc_null_create();
          *(_QWORD *)buffer = v35;
          v75 = 1174405120;
          v76 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
          v77 = &__block_descriptor_tmp_7;
          v80 = 303;
          v78 = v41;
          v79 = v42;
          if (v42)
            xpc_retain(v42);
          else
            v79 = xpc_null_create();
          v81 = a2;
          ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v41 + 8), (uint64_t)buffer);
          xpc_release(v79);
          xpc_release(v42);
        }
        _Block_object_dispose(&v64, 8);
        xpc_release(object);
LABEL_70:
        v43 = (const __CFData *)ctu::cf::map_adapter::copyCFDataRef((ctu::cf::map_adapter *)v72, (const __CFString *)*MEMORY[0x1E0DDF528]);
        v44 = v43;
        v64 = v43;
        if (v43)
          v45 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
        else
          v45 = 0;
        if (v45)
        {
          if (v43)
            CFRetain(v43);
          *(_QWORD *)buffer = 0;
          v84.length = CFDataGetLength(v44);
          v84.location = 0;
          CFDataGetBytes(v44, v84, buffer);
          v46 = *(_QWORD *)buffer;
          if (v44)
            CFRelease(v44);
          if (v46)
          {
            v47 = xpc_dictionary_create(0, 0, 0);
            if (v47 || (v47 = xpc_null_create()) != 0)
            {
              if (MEMORY[0x1C3B8CD78](v47) == MEMORY[0x1E0C812F8])
              {
                xpc_retain(v47);
                v48 = v47;
              }
              else
              {
                v48 = xpc_null_create();
              }
            }
            else
            {
              v48 = xpc_null_create();
              v47 = 0;
            }
            xpc_release(v47);
            v49 = xpc_uint64_create(v46);
            if (!v49)
              v49 = xpc_null_create();
            xpc_dictionary_set_value(v48, "kWCMCellularTxPower_Response", v49);
            v50 = xpc_null_create();
            xpc_release(v49);
            xpc_release(v50);
            v51 = *(_QWORD *)(a1 + 120);
            if (v51)
            {
              if (v48)
              {
                xpc_retain(v48);
                v52 = v48;
              }
              else
              {
                v52 = xpc_null_create();
              }
              *(_QWORD *)buffer = MEMORY[0x1E0C809B0];
              v75 = 1174405120;
              v76 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
              v77 = &__block_descriptor_tmp_7;
              v80 = 301;
              v78 = v51;
              v79 = v52;
              if (v52)
                xpc_retain(v52);
              else
                v79 = xpc_null_create();
              v81 = a2;
              ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v51 + 8), (uint64_t)buffer);
              xpc_release(v79);
              xpc_release(v52);
            }
            xpc_release(v48);
            v44 = v64;
          }
        }
        if (v44)
          CFRelease(v44);
        if (cf)
          CFRelease(cf);
        if (v71)
          CFRelease(v71);
        MEMORY[0x1C3B8B8B4](v72);
        v4 = v73;
        goto LABEL_103;
      }
      v31 = xpc_null_create();
LABEL_53:
      object = v31;
      goto LABEL_54;
    }
    v64 = 0;
    v65 = &v64;
    v66 = 0x3002000000;
    v67 = __Block_byref_object_copy__195;
    v68 = __Block_byref_object_dispose__196;
    object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v11 = xpc_dictionary_create(0, 0, 0);
    v12 = v11;
    if (v11)
    {
      object = v11;
    }
    else
    {
      v12 = xpc_null_create();
      object = v12;
      if (!v12)
      {
        v13 = xpc_null_create();
        v12 = 0;
        goto LABEL_20;
      }
    }
    if (MEMORY[0x1C3B8CD78](v12) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v12);
LABEL_21:
      xpc_release(v12);
      v14 = xpc_int64_create(1);
      if (!v14)
        v14 = xpc_null_create();
      xpc_dictionary_set_value(v65[5], "kWCMCellularThresholdReached_EventType", v14);
      v15 = xpc_null_create();
      xpc_release(v14);
      xpc_release(v15);
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v63, (const ctu::cf::dict_adapter *)v72);
      v16 = *MEMORY[0x1E0DDF6E0];
      v17 = MEMORY[0x1E0C809B0];
      v59[0] = MEMORY[0x1E0C809B0];
      v59[1] = 0x40000000;
      v60 = ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke;
      v61 = &unk_1E7913208;
      v62 = &v64;
      v18 = (int *)(*(uint64_t (**)(_QWORD *, uint64_t))v63[0])(v63, v16);
      v19 = v18;
      if (v18)
      {
        v20 = CFGetTypeID(v18);
        if (v20 == CFNumberGetTypeID())
        {
          *(_DWORD *)buffer = -1431655766;
          v22 = ctu::cf::assign((ctu::cf *)buffer, v19, v21);
          CFRelease(v19);
          if (v22)
            v60((uint64_t)v59, *(unsigned int *)buffer);
        }
        else
        {
          CFRelease(v19);
        }
      }
      MEMORY[0x1C3B8B8B4](v63);
      v23 = *(_QWORD *)(a1 + 120);
      if (v23)
      {
        v24 = v65[5];
        if (v24)
          xpc_retain(v65[5]);
        else
          v24 = (const __CFData *)xpc_null_create();
        *(_QWORD *)buffer = v17;
        v75 = 1174405120;
        v76 = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
        v77 = &__block_descriptor_tmp_7;
        v80 = 303;
        v78 = v23;
        v79 = v24;
        if (v24)
          xpc_retain(v24);
        else
          v79 = xpc_null_create();
        v81 = a2;
        ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v23 + 8), (uint64_t)buffer);
        xpc_release(v79);
        xpc_release(v24);
      }
      _Block_object_dispose(&v64, 8);
      xpc_release(object);
      goto LABEL_37;
    }
    v13 = xpc_null_create();
LABEL_20:
    object = v13;
    goto LABEL_21;
  }
LABEL_103:
  if (v4)
    CFRelease(v4);
}

void sub_1BF5ACE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object)
{
  uint64_t v33;

  _Block_object_dispose(&a28, 8);
  xpc_release(object);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef(&a20);
  ctu::cf::CFSharedRef<__CFData const>::~CFSharedRef((const void **)(v33 - 152));
  MEMORY[0x1C3B8B8B4](v33 - 144);
  ctu::cf::CFSharedRef<__CFDictionary>::~CFSharedRef((const void **)(v33 - 128));
  _Unwind_Resume(a1);
}

void ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke(uint64_t a1, int a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(a2);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularThresholdReached_EventData", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State22sendFailCondition_syncENS_5SubIdE_block_invoke_2(uint64_t a1, int a2)
{
  xpc_object_t v3;
  xpc_object_t v4;

  v3 = xpc_int64_create(a2);
  if (!v3)
    v3 = xpc_null_create();
  xpc_dictionary_set_value(*(xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "kWCMCellularThresholdReached_EventData", v3);
  v4 = xpc_null_create();
  xpc_release(v3);
  xpc_release(v4);
}

void ___ZN4coex6Module5State14setPolicy_syncENS_5SubIdE_block_invoke_235(uint64_t a1, int a2)
{
  uint64_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t (*v7)(uint64_t);
  int64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  uint64_t v13;
  xpc_object_t v14;
  _QWORD v15[5];
  xpc_object_t object;
  int v17;
  int v18;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v5);
      v6 = v5;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v7 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*(_QWORD *)(a1 + 40))
    v7 = 0;
  if (v7)
    v8 = 39321;
  else
    v8 = 0;
  v9 = xpc_int64_create(v8);
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kWCMCellularTxPower_Response", v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(a2);
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v6, "kWCMCellularTxPower_Level", v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = *(_QWORD *)(v4 + 120);
  if (v13)
  {
    if (v6)
    {
      xpc_retain(v6);
      v14 = v6;
    }
    else
    {
      v14 = xpc_null_create();
    }
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 1174405120;
    v15[2] = ___ZN4coex9XpcClient11sendMessageE19WCMReceiveMessageIdN3xpc6objectENS_5SubIdE_block_invoke;
    v15[3] = &__block_descriptor_tmp_7;
    v17 = 301;
    v15[4] = v13;
    object = v14;
    if (v14)
      xpc_retain(v14);
    else
      object = xpc_null_create();
    v18 = 0;
    ctu::SharedSynchronizable<ctu::XpcClient>::execute_wrapped((uint64_t *)(v13 + 8), (uint64_t)v15);
    xpc_release(object);
    xpc_release(v14);
  }
  xpc_release(v6);
}

CFTypeRef __copy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 40);
  if (v1)
    CFRelease(v1);
}

const void **ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__110shared_ptrIN4coex6Module5StateEEE56c27_ZTSN3ctu2cf12dict_adapterE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  MEMORY[0x1C3B8B8B4](a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void ___ZN4coex6Module5State23setLinkQualityMode_syncEjNS_5SubIdE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
  if (!*a2)
    v3 = 0;
  if (v3)
  {
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = 138412290;
      v6 = v2;
      _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "Failed to set SINR and/or BLER: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

uint64_t *std::list<std::pair<unsigned long long,unsigned int>>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "coex.mod");
}

uint64_t ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

void coex::CoexCache::~CoexCache(coex::CoexCache *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 1);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

_QWORD *ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7913420;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7913420;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<coex::Module *,std::shared_ptr<coex::Module>::__shared_ptr_default_delete<coex::Module,coex::Module>,std::allocator<coex::Module>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73B72CLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF73B72CLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73B72CLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73B72CLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State*)#1}::operator() const(coex::Module::State*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<coex::Module::State *,std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State *)#1},std::allocator<coex::Module::State>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared"
                                "_ptrIT_EEPS8_EUlPS3_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE15make_shared_ptrIS3_EENSt3__110shared_ptrIT_EEPS8_EUlPS3_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<coex::Module::State> ctu::SharedSynchronizable<coex::Module::State>::make_shared_ptr<coex::Module::State>(coex::Module::State*)::{lambda(coex::Module::State*)#1}::operator() const(coex::Module::State*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<coex::Module::State,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7913420;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(uint64_t **)a1;
  coex::Module::State::sendWWANState_sync(**(_QWORD **)a1, *(unsigned int *)(*(_QWORD *)a1 + 8));
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF5AD984(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb0_E3__1EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(uint64_t a1)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(uint64_t **)a1;
  coex::Module::State::sendLinkQuality_sync(**(_QWORD **)a1, *(_DWORD *)(*(_QWORD *)a1 + 8));
  operator delete(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete((void *)a1);
  }
  else
  {
LABEL_5:
    operator delete((void *)a1);
  }
}

void sub_1BF5ADA64(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb1_E3__2EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812C8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetNetworkConfigOfInterest_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5ADB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb2_E3__3EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(void **)(*a1 + 8);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetTxPowerLimit_sync(v4, (xpc *)&object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5ADCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb3_E3__4EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(void **)(*a1 + 8);
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetWCI2TxPowerLimit_sync(v4, (xpc *)&object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5ADDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb4_E3__5EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(xpc_object_t **a1)
{
  xpc_object_t *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __int16 v9[8];

  v2 = *a1;
  v4 = **a1;
  v3 = (*a1)[1];
  if (v3 && MEMORY[0x1C3B8CD78]((*a1)[1]) == MEMORY[0x1E0C812F8])
    xpc_retain(v3);
  else
    v3 = xpc_null_create();
  v5 = *((_QWORD *)v4 + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v9[0] = 0;
    _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "WCMCellularSetWCI2CalibrationInfo not supported", (uint8_t *)v9, 2u);
  }
  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  operator delete(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb6_E3__7EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  xpc_object_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = *(uint64_t **)a1;
  v4 = **(_QWORD **)a1;
  v3 = *(xpc_object_t *)(*(_QWORD *)a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetLinkQualityMode_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AE060(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb7_E3__8EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812C8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetScanFreqBandFilter_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5AE1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb8_E3__9EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD **v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = (_QWORD **)*a1;
  coex::Module::State::handleGetScanFreqBandFilter_sync(*(_QWORD **)*a1, *(unsigned int *)(*a1 + 8));
  operator delete(v2);
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    operator delete(a1);
  }
  else
  {
LABEL_5:
    operator delete(a1);
  }
}

void sub_1BF5AE2AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  operator delete(v2);
  v4 = (std::__shared_weak_count *)v1[2];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb9_E4__10EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetWiFiStatus_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AE3F8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb10_E4__11EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetLAAConfig_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AE560(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb11_E4__12EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(void **)(*a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetFCMBCMAntennaMode_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5AE6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb12_E4__13EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetRC1DurationParam_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AE818(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb13_E4__14EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetTimeShareConfigReq_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5AE968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb14_E4__15EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetWCI2TxAntMap_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5AEAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb15_E4__16EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(void **)(*a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetAntBlocking_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5AEC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb16_E4__17EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetClientAntBlocking_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5AED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb17_E4__18EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  v4 = *(void **)(*(_QWORD *)a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleSetClientAntBlockingExtended_sync(v3, &object, *((_DWORD *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5AEEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb18_E4__19EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleTriggerAntennaBlocking_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AF010(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb19_E4__20EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetCC1_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AF178(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb20_E4__21EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetCC2_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AF2E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb21_E4__22EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetLaaGpioThrottle_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AF448(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb22_E4__23EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t v8;

  v2 = (_QWORD *)*a1;
  v4 = *(_QWORD **)*a1;
  v3 = *(xpc_object_t *)(*a1 + 8);
  v8 = v3;
  if (v3 && MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v8 = v3;
  }
  coex::Module::State::handleSetGnssParams_sync(v4, &v8, *((unsigned int *)v2 + 4));
  xpc_release(v3);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    operator delete(a1);
  }
  else
  {
LABEL_9:
    operator delete(a1);
  }
}

void sub_1BF5AF5B0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  xpc_object_t *v2;
  void *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  xpc_release(v3);
  xpc_release(v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)v1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedIZZNS5_4initEvEUb23_E4__24EEvOT_EUlvE_EEvP16dispatch_queue_sNSt3__110unique_ptrIS9_NSE_14default_deleteIS9_EEEEENUlPvE_8__invokeESJ_(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  xpc_object_t object;

  v2 = (_QWORD *)*a1;
  v3 = *(_QWORD **)*a1;
  v4 = *(void **)(*a1 + 8);
  object = v4;
  if (v4 && MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
    xpc_retain(v4);
  else
    object = xpc_null_create();
  coex::Module::State::handleTransparentMessageReq_sync(v3, &object, *((unsigned int *)v2 + 4));
  xpc_release(object);
  xpc_release((xpc_object_t)v2[1]);
  operator delete(v2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  operator delete(a1);
}

void sub_1BF5AF700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[1]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvvENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionIS9_EENSF_IFvRKNS7_10connectionEEEENS7_5mutexEEES3_vJEEEDTcl7connectfp_cvNSC_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSS_SU_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(void),boost::function<void ()(void)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(void),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(void)>,boost::function<void ()(boost::signals2::connection const&)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF5AFF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(void),boost::function<void ()(void)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E7913620;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E7911F10;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(void)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF73BBBALL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF73BBBALL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker0<ctu::DispatchSlot<dispatch::block<void({block_pointer})(void)>>,void>::invoke(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *v3;
  const void *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  char v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  void (*v20)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v21[3];
  _QWORD block[5];

  v2 = *(NSObject **)a1;
  v1 = *(const void **)(a1 + 8);
  if (!v1)
  {
    v4 = 0;
    goto LABEL_10;
  }
  v3 = _Block_copy(v1);
  v4 = v3;
  if (!v3)
  {
LABEL_10:
    v16 = 1;
LABEL_11:
    v15 = 0;
    v21[0] = 0;
    goto LABEL_21;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
    v16 = 0;
    goto LABEL_11;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (v7)
  {
    v9 = _Block_copy(v7);
    v10 = v9;
    if (v9)
    {
      v11 = _Block_copy(v9);
      v12 = v11;
      if (v11)
      {
        v13 = _Block_copy(v11);
        v14 = v13;
        if (v13)
        {
          v15 = _Block_copy(v13);
          v21[0] = v15;
          _Block_release(v14);
        }
        else
        {
          v15 = 0;
          v21[0] = 0;
        }
        _Block_release(v12);
      }
      else
      {
        v15 = 0;
        v21[0] = 0;
      }
      _Block_release(v10);
    }
    else
    {
      v15 = 0;
      v21[0] = 0;
    }
    _Block_release(v8);
  }
  else
  {
    v15 = 0;
    v21[0] = 0;
  }
  _Block_release(v6);
  v16 = 0;
LABEL_21:
  v17 = operator new(0x20uLL);
  *v17 = boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable;
  if (v15)
    v18 = _Block_copy(v15);
  else
    v18 = 0;
  v19 = MEMORY[0x1E0C809B0];
  v17[1] = v18;
  block[0] = v19;
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_252;
  block[4] = v17;
  dispatch_async(v2, block);
  if (boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable)
  {
    if ((boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable & 1) == 0)
    {
      v20 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function0<void>::assign_to<dispatch::block<void({block_pointer})(void)>>(dispatch::block<void({block_pointer})(void)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v20)
        v20(v21, v21, 2);
    }
  }
  if ((v16 & 1) == 0)
    _Block_release(v4);
}

void sub_1BF5B0698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  const void *v10;
  const void *v11;
  char v12;

  if (v11)
    _Block_release(v11);
  if ((v12 & 1) == 0)
    _Block_release(v10);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvvEEE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  std::runtime_error v6;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v6, "call to empty boost::function");
    v6.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
    boost::throw_exception<boost::bad_function_call>(&v6);
  }
  (*(void (**)(_QWORD *))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1);
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
}

void sub_1BF5B0780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(void)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF73BBF8 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF73BBF8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker0<dispatch::block<void({block_pointer})(void)>,void>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function0<void>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF5B0930(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF5B0940(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function0<void>::~function0(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::~foreign_weak_ptr_impl(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E7913798;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::~foreign_weak_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E7913798;
  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::lock(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = 0;
  }
  v6 = 0;
LABEL_6:
  v7 = operator new(0x18uLL);
  *v7 = &off_1E79137E8;
  v7[1] = v6;
  v7[2] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *a2 = v7;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *a2 = v7;
  }
}

void sub_1BF5B0AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::expired(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  return !v1 || *(_QWORD *)(v1 + 8) == -1;
}

_QWORD *boost::signals2::detail::foreign_weak_ptr_impl<std::weak_ptr<coex::Module::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E7913798;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::~foreign_shared_ptr_impl(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_1E79137E8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::~foreign_shared_ptr_impl(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *__p = &off_1E79137E8;
  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

_QWORD *boost::signals2::detail::foreign_shared_ptr_impl<std::shared_ptr<coex::Module::State>>::clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_1E79137E8;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

void ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS_2cf11CFSharedRefIK14__CFDictionaryEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISF_EENSL_IFvRKNS7_10connectionESD_SE_EEENS7_5mutexEEES3_vJSD_SE_EEEDTcl7connectfp_cvNSI_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FSY_S10_E_block_invoke(_QWORD *a1, const void **a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(_QWORD *, CFTypeRef *, uint64_t);
  _QWORD *v6;
  const void *v7;
  CFTypeRef cf;

  v5 = (void (*)(_QWORD *, CFTypeRef *, uint64_t))a1[5];
  v4 = a1[6];
  v6 = (_QWORD *)(a1[4] + (v4 >> 1) - 72);
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *, CFTypeRef *, uint64_t))(*v6 + v5);
  v7 = *a2;
  cf = v7;
  if (v7)
    CFRetain(v7);
  v5(v6, &cf, a3);
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B0D34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF5B14C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E7913908;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E7911F10;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId),boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF73C11ALL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF73C11ALL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker2<ctu::DispatchSlot<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>,void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::invoke(uint64_t a1, const void **a2, int a3)
{
  const void *v4;
  const void *v5;
  NSObject *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  const void *v18;
  char v19;
  _QWORD *v20;
  _DWORD *v21;
  char *v22;
  char *v23;
  void (*v24)(__int128 *, __int128 *, uint64_t);
  const void *v25;
  __int128 v26;
  uint64_t v27;
  _QWORD block[7];

  v4 = *a2;
  v25 = *a2;
  *a2 = 0;
  v6 = *(NSObject **)a1;
  v5 = *(const void **)(a1 + 8);
  if (!v5)
  {
    v8 = 0;
LABEL_10:
    v19 = 1;
    *(_QWORD *)&v26 = 0;
    if (!v4)
      goto LABEL_23;
    goto LABEL_22;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
    goto LABEL_10;
  v9 = _Block_copy(v7);
  v10 = v9;
  if (!v9)
  {
    v19 = 0;
    *(_QWORD *)&v26 = 0;
    if (!v4)
      goto LABEL_23;
LABEL_22:
    CFRetain(v4);
    goto LABEL_23;
  }
  v11 = _Block_copy(v9);
  v12 = v11;
  if (v11)
  {
    v13 = _Block_copy(v11);
    v14 = v13;
    if (v13)
    {
      v15 = _Block_copy(v13);
      v16 = v15;
      if (v15)
      {
        v17 = _Block_copy(v15);
        v18 = v17;
        if (v17)
        {
          *(_QWORD *)&v26 = _Block_copy(v17);
          _Block_release(v18);
        }
        else
        {
          *(_QWORD *)&v26 = 0;
        }
        _Block_release(v16);
      }
      else
      {
        *(_QWORD *)&v26 = 0;
      }
      _Block_release(v14);
    }
    else
    {
      *(_QWORD *)&v26 = 0;
    }
    _Block_release(v12);
  }
  else
  {
    *(_QWORD *)&v26 = 0;
  }
  _Block_release(v10);
  v19 = 0;
  if (v4)
    goto LABEL_22;
LABEL_23:
  v20 = operator new(8uLL);
  *v20 = v4;
  if (v4)
    CFRetain(v4);
  v21 = operator new(4uLL);
  *v21 = a3;
  v22 = (char *)operator new(0x20uLL);
  v23 = v22;
  *(_QWORD *)v22 = 0;
  if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
  {
    *(_QWORD *)v22 = boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable;
    if ((boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 1) != 0)
    {
      *(_OWORD *)(v22 + 8) = v26;
      *((_QWORD *)v22 + 3) = v27;
    }
    else
    {
      (*(void (**)(__int128 *, char *, _QWORD))((unint64_t)boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL))(&v26, v22 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN4coex5SubIdEEEES8_SA__block_invoke;
  block[3] = &__block_descriptor_tmp_256;
  block[4] = v23;
  block[5] = v20;
  block[6] = v21;
  dispatch_async(v6, block);
  if (v4)
    CFRelease(v4);
  if (boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable)
  {
    if ((boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 1) == 0)
    {
      v24 = *(void (**)(__int128 *, __int128 *, uint64_t))((unint64_t)boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>(dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v24)
        v24(&v26, &v26, 2);
    }
  }
  if ((v19 & 1) == 0)
  {
    _Block_release(v8);
    v4 = v25;
  }
  if (v4)
    CFRelease(v4);
}

void sub_1BF5B1CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, uint64_t a12)
{
  const void *v12;
  void *v13;
  char v14;

  operator delete(v13);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a11);
  boost::function<void ()(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>::~function(&a12);
  if ((v14 & 1) == 0)
    _Block_release(v12);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN3ctu2cf11CFSharedRefIK14__CFDictionaryEEN4coex5SubIdEEEES8_SA__block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::runtime_error_vtbl *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, std::runtime_error *, uint64_t);
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  CFTypeRef *v9;
  void *v10;
  std::runtime_error cf;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = **(std::runtime_error_vtbl ***)(a1 + 40);
  if (v3)
    CFRetain(v3);
  if (!*v2)
  {
    std::runtime_error::runtime_error(&cf, "call to empty boost::function");
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
    boost::throw_exception<boost::bad_function_call>(&cf);
  }
  v4 = **(unsigned int **)(a1 + 48);
  v5 = *(void (**)(_QWORD *, std::runtime_error *, uint64_t))((*v2 & 0xFFFFFFFFFFFFFFFELL) + 8);
  cf.__vftable = v3;
  v5(v2 + 1, &cf, v4);
  if (cf.__vftable)
    CFRelease(cf.__vftable);
  v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    v7 = *v6;
    if (*v6)
    {
      if ((v7 & 1) == 0)
      {
        v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 & 0xFFFFFFFFFFFFFFFELL);
        if (v8)
          v8(v6 + 1, v6 + 1, 2);
      }
      *v6 = 0;
    }
    operator delete(v6);
  }
  v9 = *(CFTypeRef **)(a1 + 40);
  if (v9)
  {
    if (*v9)
      CFRelease(*v9);
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
    operator delete(v10);
}

void sub_1BF5B1E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B1E3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF5B1E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va1);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF73C18BLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF73C18BLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker2<dispatch::block<void({block_pointer})(ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId)>,void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::invoke(uint64_t *a1, CFTypeRef *a2)
{
  uint64_t v2;
  CFTypeRef cf;

  v2 = *a1;
  cf = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B1FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
  _Unwind_Resume(exception_object);
}

uint64_t boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF5B206C(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF5B207C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function2<void,ctu::cf::CFSharedRef<__CFDictionary const>,coex::SubId>::~function2(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNS1_5SubIdEENS7_19optional_last_valueIvEEiNSt3__14lessIiEENS6_8functionISA_EENSG_IFvRKNS7_10connectionES9_EEENS7_5mutexEEES3_vJS9_EEEDTcl7connectfp_cvNSD_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FST_SV_E_block_invoke(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[5];
  v2 = a1[6];
  v3 = (_QWORD *)(a1[4] + (v2 >> 1) - 72);
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF5B287C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E7913B60;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E7911F10;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(coex::SubId),boost::function<void ()(coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF73C55BLL & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF73C55BLL & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker1<ctu::DispatchSlot<dispatch::block<void({block_pointer})(coex::SubId)>>,void,coex::SubId>::invoke(uint64_t a1, int a2)
{
  const void *v3;
  NSObject *v4;
  void *v5;
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  const void *v10;
  void *v11;
  const void *v12;
  void *v13;
  const void *v14;
  void *v15;
  const void *v16;
  void *v17;
  char v18;
  _DWORD *v19;
  _QWORD *v20;
  void *v21;
  void (*v22)(_QWORD *, _QWORD *, uint64_t);
  _QWORD v23[3];
  _QWORD block[6];

  v4 = *(NSObject **)a1;
  v3 = *(const void **)(a1 + 8);
  if (!v3)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = _Block_copy(v3);
  v6 = v5;
  if (!v5)
  {
LABEL_10:
    v18 = 1;
LABEL_11:
    v17 = 0;
    v23[0] = 0;
    goto LABEL_21;
  }
  v7 = _Block_copy(v5);
  v8 = v7;
  if (!v7)
  {
    v18 = 0;
    goto LABEL_11;
  }
  v9 = _Block_copy(v7);
  v10 = v9;
  if (v9)
  {
    v11 = _Block_copy(v9);
    v12 = v11;
    if (v11)
    {
      v13 = _Block_copy(v11);
      v14 = v13;
      if (v13)
      {
        v15 = _Block_copy(v13);
        v16 = v15;
        if (v15)
        {
          v17 = _Block_copy(v15);
          v23[0] = v17;
          _Block_release(v16);
        }
        else
        {
          v17 = 0;
          v23[0] = 0;
        }
        _Block_release(v14);
      }
      else
      {
        v17 = 0;
        v23[0] = 0;
      }
      _Block_release(v12);
    }
    else
    {
      v17 = 0;
      v23[0] = 0;
    }
    _Block_release(v10);
  }
  else
  {
    v17 = 0;
    v23[0] = 0;
  }
  _Block_release(v8);
  v18 = 0;
LABEL_21:
  v19 = operator new(4uLL);
  *v19 = a2;
  v20 = operator new(0x20uLL);
  *v20 = boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable;
  if (v17)
    v21 = _Block_copy(v17);
  else
    v21 = 0;
  v20[1] = v21;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN4coex5SubIdEEEES4__block_invoke;
  block[3] = &__block_descriptor_tmp_258;
  block[4] = v20;
  block[5] = v19;
  dispatch_async(v4, block);
  if (boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable)
  {
    if ((boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable & 1) == 0)
    {
      v22 = *(void (**)(_QWORD *, _QWORD *, uint64_t))((unint64_t)boost::function1<void,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(coex::SubId)>>(dispatch::block<void({block_pointer})(coex::SubId)>)::stored_vtable & 0xFFFFFFFFFFFFFFFELL);
      if (v22)
        v22(v23, v23, 2);
    }
  }
  if ((v18 & 1) == 0)
    _Block_release(v6);
}

void sub_1BF5B2FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  const void *v9;
  const void *v10;
  char v11;

  if (v10)
    _Block_release(v10);
  if ((v11 & 1) == 0)
    _Block_release(v9);
  _Unwind_Resume(exception_object);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvN4coex5SubIdEEEES4__block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  void (*v5)(uint64_t *, uint64_t *, uint64_t);
  void *v6;
  std::runtime_error v7;

  v1 = *(_QWORD **)(a1 + 32);
  if (!*v1)
  {
    std::runtime_error::runtime_error(&v7, "call to empty boost::function");
    v7.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
    boost::throw_exception<boost::bad_function_call>(&v7);
  }
  (*(void (**)(_QWORD *, _QWORD))((*v1 & 0xFFFFFFFFFFFFFFFELL) + 8))(v1 + 1, **(unsigned int **)(a1 + 40));
  v3 = *(uint64_t **)(a1 + 32);
  if (v3)
  {
    v4 = *v3;
    if (*v3)
    {
      if ((v4 & 1) == 0)
      {
        v5 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL);
        if (v5)
          v5(v3 + 1, v3 + 1, 2);
      }
      *v3 = 0;
    }
    operator delete(v3);
  }
  v6 = *(void **)(a1 + 40);
  if (v6)
    operator delete(v6);
}

void sub_1BF5B30E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  std::runtime_error::~runtime_error(&a9);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF73C5A5 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF73C5A5 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

uint64_t boost::detail::function::void_function_obj_invoker1<dispatch::block<void({block_pointer})(coex::SubId)>,void,coex::SubId>::invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)a1 + 16))();
}

uint64_t boost::function1<void,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF5B3290(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF5B32A0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function1<void,coex::SubId>::~function1(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void ___ZN3ctu20SharedSynchronizableIN4coex6Module5StateEE13connect_eventIN5boost8signals26signalIFvNSt3__13mapIPKcNS9_4listINS9_4pairIyjEENS9_9allocatorISF_EEEENS9_4lessISC_EENSG_INSE_IKSC_SI_EEEEEENS1_5SubIdEENS7_19optional_last_valueIvEEiNSJ_IiEENS6_8functionISQ_EENSU_IFvRKNS7_10connectionESO_SP_EEENS7_5mutexEEES3_vJSO_SP_EEEDTcl7connectfp_cvNS9_10shared_ptrIS3_EE_EcvP16dispatch_queue_s_EcvPFT1_DpT2_ELi0EEERT_MT0_FS17_S19_E_block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void (*v5)(_QWORD *, _QWORD ***, uint64_t);
  _QWORD *v6;
  _QWORD **v7;
  _QWORD *v8[2];

  v5 = (void (*)(_QWORD *, _QWORD ***, uint64_t))a1[5];
  v4 = a1[6];
  v6 = (_QWORD *)(a1[4] + (v4 >> 1) - 72);
  if ((v4 & 1) != 0)
    v5 = *(void (**)(_QWORD *, _QWORD ***, uint64_t))(*v6 + v5);
  v8[0] = 0;
  v8[1] = 0;
  v7 = v8;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v7, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  v5(v6, &v7, a3);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v8[0]);
}

void sub_1BF5B3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void sub_1BF5B3398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

_QWORD *std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD **v25;

  if (a2 != a3)
  {
    v3 = a2;
    v4 = result + 1;
    v24 = a3;
    v25 = (_QWORD **)result;
    while (1)
    {
      v5 = (uint64_t *)result[1];
      v6 = v4;
      if ((_QWORD *)*result != v4)
      {
        v7 = (_QWORD *)result[1];
        v8 = v4;
        if (v5)
        {
          do
          {
            v6 = v7;
            v7 = (_QWORD *)v7[1];
          }
          while (v7);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v8[2];
            v9 = *v6 == (_QWORD)v8;
            v8 = v6;
          }
          while (v9);
        }
        v10 = v3[4];
        if (v6[4] >= v10)
          break;
      }
      if (v5)
        v11 = (uint64_t **)v6;
      else
        v11 = (uint64_t **)v4;
      if (v5)
        v12 = (uint64_t **)(v6 + 1);
      else
        v12 = (uint64_t **)v4;
      if (!*v12)
        goto LABEL_25;
LABEL_31:
      v22 = (_QWORD *)v3[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)v3[2];
          v9 = *v23 == (_QWORD)v3;
          v3 = v23;
        }
        while (!v9);
      }
      v3 = v23;
      result = v25;
      if (v23 == a3)
        return result;
    }
    v12 = (uint64_t **)v4;
    v11 = (uint64_t **)v4;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v5;
          v13 = v5[4];
          if (v13 <= v10)
            break;
          v5 = *v11;
          v12 = v11;
          if (!*v11)
            goto LABEL_25;
        }
        if (v13 >= v10)
          goto LABEL_31;
        v5 = v11[1];
        if (!v5)
        {
          v12 = v11 + 1;
          break;
        }
      }
    }
LABEL_25:
    v14 = (uint64_t *)operator new(0x40uLL);
    v15 = v14;
    v16 = v14 + 5;
    v14[4] = v3[4];
    v14[5] = (uint64_t)(v14 + 5);
    v14[6] = (uint64_t)(v14 + 5);
    v14[7] = 0;
    v17 = v3[6];
    if ((_QWORD *)v17 != v3 + 5)
    {
      v18 = 1;
      v19 = v14 + 5;
      do
      {
        v20 = operator new(0x20uLL);
        v20[1] = *(_OWORD *)(v17 + 16);
        *(_QWORD *)v20 = v19;
        *((_QWORD *)v20 + 1) = v16;
        v19[1] = v20;
        v15[5] = (uint64_t)v20;
        v15[7] = v18;
        v17 = *(_QWORD *)(v17 + 8);
        ++v18;
        v19 = v20;
      }
      while ((_QWORD *)v17 != v3 + 5);
    }
    *v15 = 0;
    v15[1] = 0;
    v15[2] = (uint64_t)v11;
    *v12 = v15;
    v21 = (_QWORD *)**v25;
    if (v21)
    {
      *v25 = v21;
      v15 = *v12;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v25[1], v15);
    v25[2] = (_QWORD *)((char *)v25[2] + 1);
    a3 = v24;
    goto LABEL_31;
  }
  return result;
}

void std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(*a1);
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a1[1]);
    if (a1[7])
    {
      v3 = a1[5];
      v2 = (uint64_t *)a1[6];
      v4 = *v2;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(v3 + 8);
      **(_QWORD **)(v3 + 8) = v4;
      a1[7] = 0;
      if (v2 != a1 + 5)
      {
        do
        {
          v5 = (uint64_t *)v2[1];
          operator delete(v2);
          v2 = v5;
        }
        while (v5 != a1 + 5);
      }
    }
    operator delete(a1);
  }
}

uint64_t boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~slot(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 32, a1 + 32, 2);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)a1)
  {
    std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)a1, *(_QWORD *)a1);
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::~DispatchSlot(uint64_t a1)
{
  const void *v2;

  dispatch_release(*(dispatch_object_t *)a1);
  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

uint64_t boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::~shared_ptr(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::dispose(uint64_t a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v1 = *(_QWORD **)(a1 + 16);
  if (v1)
  {
    v2 = (unsigned int *)v1[3];
    if (v2)
    {
      v3 = v2 + 2;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
        v6 = v2 + 3;
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
          (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
      }
    }
    v9 = (unsigned int *)v1[1];
    if (v9)
    {
      v10 = v9 + 2;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
        v13 = v9 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::signal_impl<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::signals2::optional_last_value<void>,int,std::less<int>,boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::function<void ()(boost::signals2::connection const&,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,boost::signals2::mutex>::invocation_state>::get_untyped_deleter()
{
  return 0;
}

uint64_t *std::list<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        v7 = (unsigned int *)v3[3];
        if (v7)
        {
          v8 = v7 + 2;
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 16))(v7);
            v11 = v7 + 3;
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
              (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 24))(v7);
          }
        }
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1);
    }
  }
  return a1;
}

void boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::dispose(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(uint64_t **)(a1 + 16);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy((_QWORD *)v1[4]);
    if (v1[2])
    {
      v2 = (_QWORD *)*v1;
      v3 = (uint64_t *)v1[1];
      v4 = *v3;
      *(_QWORD *)(v4 + 8) = *(_QWORD *)(*v1 + 8);
      *(_QWORD *)v2[1] = v4;
      v1[2] = 0;
      if (v3 != v1)
      {
        do
        {
          v5 = (uint64_t *)v3[1];
          v6 = (unsigned int *)v3[3];
          if (v6)
          {
            v7 = v6 + 2;
            do
            {
              v8 = __ldaxr(v7);
              v9 = v8 - 1;
            }
            while (__stlxr(v9, v7));
            if (!v9)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
              v10 = v6 + 3;
              do
              {
                v11 = __ldaxr(v10);
                v12 = v11 - 1;
              }
              while (__stlxr(v12, v10));
              if (!v12)
                (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
            }
          }
          operator delete(v3);
          v3 = v5;
        }
        while (v5 != v1);
      }
    }
    operator delete(v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::grouped_list<int,std::less<int>,boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>>>::get_untyped_deleter()
{
  return 0;
}

void boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  _QWORD *v1;

  v1 = boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(a1);
  operator delete(v1);
}

BOOL boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::connected(uint64_t a1)
{
  __int128 v2;
  pthread_mutex_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  uint64_t v11;
  char v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  char *v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _OWORD v33[10];
  unint64_t v34;
  void *__p;
  uint64_t v36;
  pthread_mutex_t *v37;
  _QWORD v38[4];

  v38[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v3 = *(pthread_mutex_t **)(a1 + 48);
  v34 = 10;
  __p = v33;
  v36 = 0;
  v37 = v3;
  pthread_mutex_lock(v3);
  v4 = *(uint64_t **)(a1 + 32);
  if (!v4)
    goto LABEL_40;
  v5 = *v4;
  if (*v4 == v4[1])
    goto LABEL_40;
  do
  {
    memset(v38, 170, 24);
    v6 = *(_DWORD *)v5 ^ (*(int *)v5 >> 31);
    if (v6 == 2)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v5 + 8) + 16))(&v32);
      v38[1] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(v38[0]) = 1;
      if (v32)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
        if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
          goto LABEL_26;
LABEL_19:
        v11 = *(_QWORD *)(v5 + 16);
        if (!v11)
          goto LABEL_27;
        if (!atomic_load((unsigned int *)(v11 + 8)))
          goto LABEL_27;
LABEL_21:
        v13 = 0;
        if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
          goto LABEL_30;
        goto LABEL_22;
      }
LABEL_18:
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    if (v6 != 1)
    {
      LODWORD(v38[0]) = 0;
      v38[1] = 0;
      v38[2] = 0;
      goto LABEL_18;
    }
    v7 = *(_QWORD *)(v5 + 16);
    if (!v7)
    {
LABEL_25:
      v38[1] = 0;
      v38[2] = v7;
      LODWORD(v38[0]) = 0;
      if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) == 2)
        goto LABEL_26;
      goto LABEL_19;
    }
    v8 = (unsigned int *)(v7 + 8);
    for (i = *(_DWORD *)(v7 + 8); ; i = v10)
    {
      if (!i)
      {
        v7 = 0;
        goto LABEL_25;
      }
      v10 = __ldxr(v8);
      if (v10 != i)
      {
        __clrex();
        continue;
      }
      if (!__stxr(i + 1, v8))
        break;
    }
    v38[1] = *(_QWORD *)(v5 + 8);
    v38[2] = v7;
    LODWORD(v38[0]) = 0;
    if ((*(_DWORD *)v5 ^ (*(int *)v5 >> 31)) != 2)
      goto LABEL_19;
LABEL_26:
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8) + 24))(*(_QWORD *)(v5 + 8)))
      goto LABEL_21;
LABEL_27:
    if (*(_BYTE *)(a1 + 24))
    {
      *(_BYTE *)(a1 + 24) = 0;
      boost::signals2::detail::connection_body_base::dec_slot_refcount<boost::signals2::mutex>((_DWORD *)a1, v33);
    }
    v13 = 1;
    if (LODWORD(v38[0]) == SLODWORD(v38[0]) >> 31)
    {
LABEL_30:
      v14 = (unsigned int *)v38[2];
      if (v38[2])
      {
        v15 = (unsigned int *)(v38[2] + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 16))(v14);
          v18 = v14 + 3;
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 24))(v14);
        }
      }
      goto LABEL_38;
    }
LABEL_22:
    if (v38[1])
      (*(void (**)(_QWORD))(*(_QWORD *)v38[1] + 8))(v38[1]);
LABEL_38:
    if ((v13 & 1) != 0)
      break;
    v5 += 24;
  }
  while (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
LABEL_40:
  v21 = *(unsigned __int8 *)(a1 + 24);
  pthread_mutex_unlock(v37);
  v22 = (char *)__p;
  if (__p)
  {
    if (v36 - 1 >= 0)
    {
      v23 = (char *)__p + 16 * v36;
      do
      {
        v24 = (unsigned int *)*((_QWORD *)v23 - 1);
        if (v24)
        {
          v25 = v24 + 2;
          do
          {
            v26 = __ldaxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
          {
            (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
            v28 = v24 + 3;
            do
            {
              v29 = __ldaxr(v28);
              v30 = v29 - 1;
            }
            while (__stlxr(v30, v28));
            if (!v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
          }
        }
        v23 -= 16;
      }
      while (v23 > v22);
    }
    if (v34 >= 0xB)
      operator delete(__p);
  }
  return v21 != 0;
}

void sub_1BF5B3DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::lock(uint64_t a1)
{
  return pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::unlock(uint64_t a1)
{
  return pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 48));
}

uint64_t boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::release_slot@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = *(_QWORD *)(result + 40);
  v2 = (_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 32);
  a2[1] = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *(unsigned int **)(result + 40);
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
    if (v6)
    {
      v7 = v6 + 2;
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
        v10 = v6 + 3;
        do
        {
          v11 = __ldaxr(v10);
          v12 = v11 - 1;
        }
        while (__stlxr(v12, v10));
        if (!v12)
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
      }
    }
  }
  else
  {
    *v2 = 0;
    *(_QWORD *)(result + 40) = 0;
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::dispose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      if ((v2 & 1) == 0)
      {
        v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
        if (v3)
          v3(v1 + 32, v1 + 32, 2);
      }
      *(_QWORD *)(v1 + 24) = 0;
    }
    if (*(_QWORD *)v1)
    {
      std::vector<boost::variant<boost::weak_ptr<boost::signals2::detail::trackable_pointee>,boost::weak_ptr<void>,boost::signals2::detail::foreign_void_weak_ptr>>::__base_destruct_at_end[abi:ne180100]((unsigned int *)v1, *(_QWORD *)v1);
      operator delete(*(void **)v1);
    }
    operator delete((void *)v1);
  }
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::get_untyped_deleter()
{
  return 0;
}

_QWORD *boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>::~connection_body(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  *a1 = off_1E7913DB8;
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = (unsigned int *)a1[5];
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 16))(v9);
      v13 = v9 + 3;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 24))(v9);
    }
  }
  *a1 = &unk_1E7911F10;
  v16 = (unsigned int *)a1[2];
  if (v16)
  {
    v17 = v16 + 3;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 24))(v16);
  }
  return a1;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::dispose(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId),boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,boost::signals2::mutex>>::get_untyped_deleter()
{
  return 0;
}

uint64_t *boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void boost::detail::function::functor_manager<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>>::manage(uint64_t a1, _WORD *a2, unsigned int a3)
{
  NSObject *v6;
  void *v7;
  const void *v8;
  const char *v9;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v9 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v9 == (const char *)(0x80000001BF73CB19 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v9, (const char *)(0x80000001BF73CB19 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      dispatch_release(*(dispatch_object_t *)a2);
      v8 = (const void *)*((_QWORD *)a2 + 1);
      if (v8)
LABEL_9:
        _Block_release(v8);
    }
  }
  else
  {
    v6 = *(NSObject **)a1;
    v7 = *(void **)(a1 + 8);
    *(_QWORD *)a2 = *(_QWORD *)a1;
    if (v7)
    {
      v7 = _Block_copy(v7);
      v6 = *(NSObject **)a2;
    }
    *((_QWORD *)a2 + 1) = v7;
    dispatch_retain(v6);
    if (a3 == 1)
    {
      dispatch_release(*(dispatch_object_t *)a1);
      v8 = *(const void **)(a1 + 8);
      if (v8)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker2<ctu::DispatchSlot<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>,void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::invoke(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  _QWORD *v5;
  const void *v6;
  NSObject *v7;
  void *v8;
  const void *v9;
  void *v10;
  const void *v11;
  void *v12;
  const void *v13;
  void *v14;
  const void *v15;
  void *v16;
  const void *v17;
  void *v18;
  const void *v19;
  char v20;
  _QWORD *v21;
  _DWORD *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  void (*v26)(__int128 *, __int128 *, uint64_t);
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v30;
  _QWORD *v31[2];
  unint64_t v32;
  __int128 v33;
  uint64_t v34;
  _QWORD block[7];

  v4 = a2 + 1;
  v5 = (_QWORD *)a2[1];
  v27 = (_QWORD *)*a2;
  v28 = v5;
  if (a2[2])
  {
    v5[2] = &v28;
    *a2 = v4;
    *v4 = 0;
    a2[2] = 0;
    v7 = *(NSObject **)a1;
    v6 = *(const void **)(a1 + 8);
    if (v6)
      goto LABEL_3;
LABEL_11:
    v9 = 0;
    goto LABEL_12;
  }
  v27 = &v28;
  v7 = *(NSObject **)a1;
  v6 = *(const void **)(a1 + 8);
  if (!v6)
    goto LABEL_11;
LABEL_3:
  v8 = _Block_copy(v6);
  v9 = v8;
  if (!v8)
  {
LABEL_12:
    v20 = 1;
LABEL_13:
    v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    *(_QWORD *)&v33 = 0;
    goto LABEL_23;
  }
  v10 = _Block_copy(v8);
  v11 = v10;
  if (!v10)
  {
    v20 = 0;
    goto LABEL_13;
  }
  v12 = _Block_copy(v10);
  v13 = v12;
  if (v12)
  {
    v14 = _Block_copy(v12);
    v15 = v14;
    if (v14)
    {
      v16 = _Block_copy(v14);
      v17 = v16;
      if (v16)
      {
        v18 = _Block_copy(v16);
        v19 = v18;
        if (v18)
        {
          *(_QWORD *)&v33 = _Block_copy(v18);
          _Block_release(v19);
        }
        else
        {
          *(_QWORD *)&v33 = 0;
        }
        _Block_release(v17);
      }
      else
      {
        *(_QWORD *)&v33 = 0;
      }
      _Block_release(v15);
    }
    else
    {
      *(_QWORD *)&v33 = 0;
    }
    v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    _Block_release(v13);
  }
  else
  {
    v32 = (unint64_t)boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::assign_to<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>(dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>)::stored_vtable;
    *(_QWORD *)&v33 = 0;
  }
  _Block_release(v11);
  v20 = 0;
LABEL_23:
  v31[0] = 0;
  v31[1] = 0;
  v30 = v31;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v30, v27, &v28);
  v21 = operator new(0x18uLL);
  v21[1] = 0;
  v21[2] = 0;
  *v21 = v21 + 1;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(v21, v30, v31);
  v22 = operator new(4uLL);
  *v22 = a3;
  v23 = (char *)operator new(0x20uLL);
  v24 = v23;
  *(_QWORD *)v23 = 0;
  v25 = v32;
  if (v32)
  {
    *(_QWORD *)v23 = v32;
    if ((v25 & 1) != 0)
    {
      *(_OWORD *)(v23 + 8) = v33;
      *((_QWORD *)v23 + 3) = v34;
    }
    else
    {
      (*(void (**)(__int128 *, char *, _QWORD))(v25 & 0xFFFFFFFFFFFFFFFELL))(&v33, v23 + 8, 0);
    }
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__13mapIPKcNS3_4listINS3_4pairIyjEENS3_9allocatorIS9_EEEENS3_4lessIS6_EENSA_INS8_IKS6_SC_EEEEEEN4coex5SubIdEEEESI_SK__block_invoke;
  block[3] = &__block_descriptor_tmp_261;
  block[4] = v24;
  block[5] = v21;
  block[6] = v22;
  dispatch_async(v7, block);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v31[0]);
  if (v32)
  {
    if ((v32 & 1) == 0)
    {
      v26 = *(void (**)(__int128 *, __int128 *, uint64_t))(v32 & 0xFFFFFFFFFFFFFFFELL);
      if (v26)
        v26(&v33, &v33, 2);
    }
    v32 = 0;
  }
  if ((v20 & 1) == 0)
    _Block_release(v9);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v28);
}

void sub_1BF5B45F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16)
{
  const void *v16;
  void *v17;
  char v18;

  operator delete(v17);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a14);
  boost::function<void ()(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>::~function(&a16);
  if ((v18 & 1) == 0)
    _Block_release(v16);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

void ___Z13execute_blockP16dispatch_queue_sRKN5boost8functionIFvNSt3__13mapIPKcNS3_4listINS3_4pairIyjEENS3_9allocatorIS9_EEEENS3_4lessIS6_EENSA_INS8_IKS6_SC_EEEEEEN4coex5SubIdEEEESI_SK__block_invoke(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, std::runtime_error *, uint64_t);
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  _QWORD **v9;
  void *v10;
  std::runtime_error v11;
  uint64_t v12;
  std::runtime_error v13;
  uint64_t v14;

  v3 = *(_QWORD **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v11.__imp_.__imp_ = 0;
  v12 = 0;
  v11.__vftable = (std::runtime_error_vtbl *)&v11.__imp_;
  std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__tree_node<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,void *> *,long>>>(&v11, *(_QWORD **)v2, (_QWORD *)(v2 + 8));
  if (!*v3)
  {
    std::runtime_error::runtime_error(&v13, "call to empty boost::function");
    v13.__vftable = (std::runtime_error_vtbl *)&unk_1E7912440;
    boost::throw_exception<boost::bad_function_call>(&v13);
  }
  v4 = **(unsigned int **)(a1 + 48);
  v5 = *(void (**)(_QWORD *, std::runtime_error *, uint64_t))((*v3 & 0xFFFFFFFFFFFFFFFELL) + 8);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    *((_QWORD *)v11.__imp_.__imp_ + 2) = &v13.__imp_;
    v11.__vftable = (std::runtime_error_vtbl *)&v11.__imp_;
    v11.__imp_.__imp_ = 0;
    v12 = 0;
  }
  else
  {
    v13.__vftable = (std::runtime_error_vtbl *)&v13.__imp_;
  }
  v5(v3 + 1, &v13, v4);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((_QWORD *)v13.__imp_.__imp_);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy((_QWORD *)v11.__imp_.__imp_);
  v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    v7 = *v6;
    if (*v6)
    {
      if ((v7 & 1) == 0)
      {
        v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 & 0xFFFFFFFFFFFFFFFELL);
        if (v8)
          v8(v6 + 1, v6 + 1, 2);
      }
      *v6 = 0;
    }
    operator delete(v6);
  }
  v9 = *(_QWORD ***)(a1 + 40);
  if (v9)
  {
    std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v9[1]);
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 48);
  if (v10)
    operator delete(v10);
}

void sub_1BF5B47A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, std::runtime_error a12)
{
  std::runtime_error::~runtime_error(&a12);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B47BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B47D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a13);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B47EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void boost::detail::function::functor_manager<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>>::manage(void **a1, _WORD *a2, unsigned int a3)
{
  void *v6;
  void *v7;
  const char *v8;

  if (a3 == 4)
    goto LABEL_2;
  if (a3 > 1)
  {
    if (a3 == 3)
    {
      v8 = (const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      if (v8 == (const char *)(0x80000001BF73CBC6 & 0x7FFFFFFFFFFFFFFFLL)
        || !strcmp(v8, (const char *)(0x80000001BF73CBC6 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        *(_QWORD *)a2 = a1;
      }
      else
      {
        *(_QWORD *)a2 = 0;
      }
    }
    else
    {
      if (a3 != 2)
      {
LABEL_2:
        a2[4] = 0;
        return;
      }
      v7 = *(void **)a2;
      if (*(_QWORD *)a2)
LABEL_9:
        _Block_release(v7);
    }
  }
  else
  {
    v6 = *a1;
    if (*a1)
      v6 = _Block_copy(v6);
    *(_QWORD *)a2 = v6;
    if (a3 == 1)
    {
      v7 = *a1;
      if (*a1)
        goto LABEL_9;
    }
  }
}

void boost::detail::function::void_function_obj_invoker2<dispatch::block<void({block_pointer})(std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId)>,void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::invoke(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v6;

  v2 = *a1;
  v3 = a2 + 1;
  v4 = (_QWORD *)a2[1];
  v5 = (_QWORD **)*a2;
  v6 = v4;
  if (a2[2])
  {
    v4[2] = &v6;
    *a2 = v3;
    *v3 = 0;
    a2[2] = 0;
  }
  else
  {
    v5 = &v6;
  }
  (*(void (**)(uint64_t, _QWORD ***))(v2 + 16))(v2, &v5);
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(v6);
}

void sub_1BF5B4968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11)
{
  std::__tree<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::__map_value_compare<char const*,std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,std::less<char const*>,true>,std::allocator<std::__value_type<char const*,std::list<std::pair<unsigned long long,unsigned int>>>>>::destroy(a11);
  _Unwind_Resume(a1);
}

uint64_t boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::move_assign(uint64_t result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  __int128 v7;

  if (a2 != (uint64_t *)result)
  {
    v2 = a2;
    v3 = (uint64_t *)result;
    v4 = *a2;
    if (*a2)
    {
      *(_QWORD *)result = v4;
      if ((v4 & 1) != 0)
      {
        v7 = *(_OWORD *)(a2 + 1);
        *(_QWORD *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      v5 = *(_QWORD *)result;
      if (!*(_QWORD *)result)
        return result;
      if ((v5 & 1) == 0)
      {
        v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6)
          result = v6(result + 8, result + 8, 2);
      }
      v2 = v3;
    }
    *v2 = 0;
  }
  return result;
}

void sub_1BF5B4A14(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_rethrow();
}

void sub_1BF5B4A24(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *boost::function2<void,std::map<char const*,std::list<std::pair<unsigned long long,unsigned int>>>,coex::SubId>::~function2(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

void ctu::SharedSynchronizable<coex::Module::State>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7913F28;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableIN4coex6Module5StateEE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIKN4coex6Module5StateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIKN4coex6Module5StateEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void ctu::cf::insert<__CFString const*,__CFBoolean const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B4CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B4CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B4D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B4D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,long long>(__CFDictionary *a1, CFTypeRef cf, uint64_t a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B4E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5B4E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B4F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5B4F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,double>(__CFDictionary *a1, CFTypeRef cf, CFAllocatorRef allocator, double a4)
{
  CFNumberRef v8;
  CFNumberRef v9;
  double valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a4;
  v8 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionarySetValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B4FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5B5000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL ctu::cf::update<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  _BOOL8 v6;

  if (cf)
    CFRetain(cf);
  if (!a3)
  {
    v6 = 0;
    if (!cf)
      return v6;
LABEL_9:
    CFRelease(cf);
    return v6;
  }
  CFRetain(a3);
  v6 = cf != 0;
  if (cf)
    CFDictionarySetValue(a1, cf, a3);
  CFRelease(a3);
  if (cf)
    goto LABEL_9;
  return v6;
}

void sub_1BF5B50A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B50CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::update<__CFString const*,__CFArray const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionarySetValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B515C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B5180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFArray *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B5210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B5234(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,__CFDictionary *>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B52C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B52E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,int>(__CFDictionary *a1, CFTypeRef cf, int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  int valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberIntType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B5394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5B53B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,BOOL>(CFMutableDictionaryRef theDict, CFTypeRef cf, int a3)
{
  const void **v6;
  const void *v7;

  if (cf)
    CFRetain(cf);
  v6 = (const void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v6 = (const void **)MEMORY[0x1E0C9AE40];
  v7 = *v6;
  if (cf && v7)
  {
    CFDictionaryAddValue(theDict, cf, v7);
  }
  else if (!v7)
  {
    goto LABEL_10;
  }
  CFRelease(v7);
LABEL_10:
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B5464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned int>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B5524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5B5548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned short>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B55F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5B561C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,unsigned char>(__CFDictionary *a1, CFTypeRef cf, unsigned int a3, CFAllocatorRef allocator)
{
  CFNumberRef v8;
  CFNumberRef v9;
  uint64_t valuePtr;

  if (cf)
    CFRetain(cf);
  valuePtr = a3;
  v8 = CFNumberCreate(allocator, kCFNumberLongLongType, &valuePtr);
  v9 = v8;
  if (cf && v8)
  {
    CFDictionaryAddValue(a1, cf, v8);
  }
  else if (!v8)
  {
    goto LABEL_8;
  }
  CFRelease(v9);
LABEL_8:
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B56CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5B56F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

void ctu::cf::insert<__CFString const*,void const*>(__CFDictionary *a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf)
    CFRetain(cf);
  if (a3)
  {
    CFRetain(a3);
    if (cf)
      CFDictionaryAddValue(a1, cf, a3);
    CFRelease(a3);
  }
  if (cf)
    CFRelease(cf);
}

void sub_1BF5B5780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)&a9);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  _Unwind_Resume(a1);
}

void sub_1BF5B57A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t __cxx_global_var_init_246()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

const char *IOKitEventNotifier::getName(IOKitEventNotifier *this)
{
  return "iokit.event";
}

uint64_t IOKitEventNotifier::setMESAQuality(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 72))
    ctu::iokit::Controller::setMesaQuality();
  return 0;
}

void IOKitEventNotifier::start(IOKitEventNotifier *this)
{
  const void *v2;
  void *v3;
  NSObject *v4;
  char v5;
  NSObject *v6;
  const void *v7;
  void *v8;
  NSObject *v9;
  char v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  const void *v18;
  void *v19;
  NSObject *v20;
  char v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  const char *v25;
  const void *v26;
  void *v27;
  NSObject *v28;
  const void *v29;
  void *v30;
  NSObject *v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  void *v41;
  NSObject *v42;
  void *aBlock;
  NSObject *object;
  uint8_t buf[4];
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 9))
    return;
  v2 = (const void *)*((_QWORD *)this + 11);
  if (!v2 || !*((_QWORD *)this + 12))
    goto LABEL_12;
  v3 = _Block_copy(v2);
  v4 = *((_QWORD *)this + 12);
  aBlock = v3;
  object = v4;
  if (v4)
    dispatch_retain(v4);
  v5 = ctu::iokit::Controller::setAccessoryCallback();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if ((v5 & 1) == 0 && (v6 = *((_QWORD *)this + 5), os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Failed to setup accessory callback", buf, 2u);
    v7 = (const void *)*((_QWORD *)this + 13);
    if (!v7)
      goto LABEL_23;
  }
  else
  {
LABEL_12:
    v7 = (const void *)*((_QWORD *)this + 13);
    if (!v7)
      goto LABEL_23;
  }
  if (*((_QWORD *)this + 14))
  {
    v8 = _Block_copy(v7);
    v9 = *((_QWORD *)this + 14);
    v41 = v8;
    v42 = v9;
    if (v9)
      dispatch_retain(v9);
    v10 = ctu::iokit::Controller::setDisplayCallback();
    if (v42)
      dispatch_release(v42);
    if (v41)
      _Block_release(v41);
    if ((v10 & 1) == 0)
    {
      v11 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF566000, v11, OS_LOG_TYPE_ERROR, "Failed to setup display callback", buf, 2u);
      }
    }
  }
LABEL_23:
  if (!*((_QWORD *)this + 15) || !*((_QWORD *)this + 16))
    goto LABEL_39;
  v12 = ctu::iokit::Controller::acquireMesaService(*((ctu::iokit::Controller **)this + 9));
  v13 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = "failed";
    if (v12)
      v14 = "succeeded";
    *(_DWORD *)buf = 136315138;
    v46 = v14;
    _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Acquire MESA service %s", buf, 0xCu);
  }
  if (v12)
  {
    v15 = (void *)*((_QWORD *)this + 15);
    if (v15)
      v15 = _Block_copy(v15);
    v16 = *((_QWORD *)this + 16);
    v39 = v15;
    v40 = v16;
    if (v16)
      dispatch_retain(v16);
    ctu::iokit::Controller::setMesaCallback();
    if (v40)
      dispatch_release(v40);
    if (v39)
      _Block_release(v39);
LABEL_39:
    v18 = (const void *)*((_QWORD *)this + 17);
    if (v18)
      goto LABEL_40;
    goto LABEL_50;
  }
  v17 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    goto LABEL_39;
  *(_WORD *)buf = 0;
  _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Failed to setup MESA callback", buf, 2u);
  v18 = (const void *)*((_QWORD *)this + 17);
  if (v18)
  {
LABEL_40:
    if (*((_QWORD *)this + 18))
    {
      v19 = _Block_copy(v18);
      v20 = *((_QWORD *)this + 18);
      v37 = v19;
      v38 = v20;
      if (v20)
        dispatch_retain(v20);
      v21 = ctu::iokit::Controller::setPowerSourceCallback();
      if (v38)
        dispatch_release(v38);
      if (v37)
        _Block_release(v37);
      if ((v21 & 1) == 0)
      {
        v22 = *((_QWORD *)this + 5);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_error_impl(&dword_1BF566000, v22, OS_LOG_TYPE_ERROR, "Failed to setup power source", buf, 2u);
        }
      }
    }
  }
LABEL_50:
  if (*((_QWORD *)this + 19) && *((_QWORD *)this + 20) || *((_QWORD *)this + 21) && *((_QWORD *)this + 22))
  {
    v23 = ctu::iokit::Controller::setupCameraService(*((ctu::iokit::Controller **)this + 9));
    v24 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = "failed";
      if (v23)
        v25 = "succeeded";
      *(_DWORD *)buf = 136315138;
      v46 = v25;
      _os_log_impl(&dword_1BF566000, v24, OS_LOG_TYPE_DEFAULT, "#I Setup camera service is %s", buf, 0xCu);
    }
    if ((v23 & 1) != 0)
    {
      v26 = (const void *)*((_QWORD *)this + 19);
      if (v26 && *((_QWORD *)this + 20))
      {
        v27 = _Block_copy(v26);
        v28 = *((_QWORD *)this + 20);
        v35 = v27;
        v36 = v28;
        if (v28)
          dispatch_retain(v28);
        ctu::iokit::Controller::setFaceIDCallback();
        if (v36)
          dispatch_release(v36);
        if (v35)
          _Block_release(v35);
      }
      v29 = (const void *)*((_QWORD *)this + 21);
      if (v29 && *((_QWORD *)this + 22))
      {
        v30 = _Block_copy(v29);
        v31 = *((_QWORD *)this + 22);
        v33 = v30;
        v34 = v31;
        if (v31)
          dispatch_retain(v31);
        ctu::iokit::Controller::setFrontCameraCallback();
        if (v34)
          dispatch_release(v34);
        if (v33)
          _Block_release(v33);
      }
    }
    else
    {
      v32 = *((_QWORD *)this + 5);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_1BF566000, v32, OS_LOG_TYPE_ERROR, "Failed to setup camera service callback", buf, 2u);
      }
    }
  }
}

void sub_1BF5B5CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitAccessoryParameter)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitDisplayLink)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitMesaEvent)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitPowerSource)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitFaceIDState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

uint64_t dispatch::callback<void({block_pointer})(ctu::iokit::TelephonyIOKitFrontCameraState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void IOKitEventNotifier::registerCallbackAccessory(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackVideo(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackMesa(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackPowerSource(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackFaceID(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v6;
  if (v7)
    dispatch_release(v7);
}

void IOKitEventNotifier::registerCallbackFrontCamera(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v6;
  if (v7)
    dispatch_release(v7);
}

uint64_t IOKitEventNotifier::queryPowerSource(IOKitEventNotifier *this)
{
  ctu::iokit::Controller *v1;

  v1 = (ctu::iokit::Controller *)*((_QWORD *)this + 9);
  if (v1)
    return ctu::iokit::Controller::queryPowerSource(v1);
  else
    return 1;
}

uint64_t IOKitEventNotifier::IOKitEventNotifier(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v12;
  const char *v13;

  *(_QWORD *)a1 = off_1E7913F68;
  v13 = "iokit.event";
  *ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>&>((_QWORD *)a1, &v13, a2) = off_1E7913F68;
  v6 = (std::__shared_weak_count *)a2[1];
  v12 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  ctu::iokit::Controller::create();
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 184) = a3;
  return a1;
}

void sub_1BF5B62A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  *v2 = off_1E7914008;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  _Unwind_Resume(a1);
}

_QWORD *ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, const char **a2, _QWORD *a3)
{
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__dst[2];
  unint64_t v16;

  *a1 = off_1E7914008;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v11 = a3[1];
  a1[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_1BF5B63F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IOKitEventNotifier::shutdown(IOKitEventNotifier *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __CFRunLoop *v5;
  NSObject *v6;
  NSObject *v7;
  __CFRunLoop *v8;
  const void *v9;
  _QWORD block[4];
  dispatch_group_t group;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (__CFRunLoop *)*((_QWORD *)this + 23);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    v5 = (__CFRunLoop *)*((_QWORD *)this + 23);
    if (!v5)
      return;
  }
  if (CFRunLoopIsWaiting(v5))
  {
    v6 = dispatch_group_create();
    v7 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v7);
    }
    v8 = (__CFRunLoop *)*((_QWORD *)this + 23);
    v9 = (const void *)*MEMORY[0x1E0C9B280];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN18IOKitEventNotifier8shutdownEv_block_invoke;
    block[3] = &__block_descriptor_tmp_2;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    CFRunLoopPerformBlock(v8, v9, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 23));
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v7)
    {
      dispatch_group_leave(v7);
      dispatch_release(v7);
      dispatch_group_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v7);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
}

void sub_1BF5B6580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, dispatch_group_t group)
{
  NSObject *v14;

  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v14)
  {
    dispatch_group_leave(v14);
    dispatch_release(v14);
    dispatch_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;

  v3 = *(NSObject **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    v4 = *(NSObject **)(a1 + 32);
    if (v4)
      dispatch_group_enter(v4);
  }
}

void __destroy_helper_block_e8_32c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;

  v2 = *(NSObject **)(a1 + 32);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 32);
    if (v3)
      dispatch_release(v3);
  }
}

void IOKitEventNotifier::~IOKitEventNotifier(IOKitEventNotifier *this)
{
  NSObject *v2;
  const void *v3;
  NSObject *v4;
  const void *v5;
  NSObject *v6;
  const void *v7;
  NSObject *v8;
  const void *v9;
  NSObject *v10;
  const void *v11;
  NSObject *v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  *(_QWORD *)this = off_1E7913F68;
  IOKitEventNotifier::shutdown(this);
  v2 = *((_QWORD *)this + 22);
  if (v2)
    dispatch_release(v2);
  v3 = (const void *)*((_QWORD *)this + 21);
  if (v3)
    _Block_release(v3);
  v4 = *((_QWORD *)this + 20);
  if (v4)
    dispatch_release(v4);
  v5 = (const void *)*((_QWORD *)this + 19);
  if (v5)
    _Block_release(v5);
  v6 = *((_QWORD *)this + 18);
  if (v6)
    dispatch_release(v6);
  v7 = (const void *)*((_QWORD *)this + 17);
  if (v7)
    _Block_release(v7);
  v8 = *((_QWORD *)this + 16);
  if (v8)
    dispatch_release(v8);
  v9 = (const void *)*((_QWORD *)this + 15);
  if (v9)
    _Block_release(v9);
  v10 = *((_QWORD *)this + 14);
  if (v10)
    dispatch_release(v10);
  v11 = (const void *)*((_QWORD *)this + 13);
  if (v11)
    _Block_release(v11);
  v12 = *((_QWORD *)this + 12);
  if (v12)
    dispatch_release(v12);
  v13 = (const void *)*((_QWORD *)this + 11);
  if (v13)
    _Block_release(v13);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)this = off_1E7914008;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  void *v1;

  IOKitEventNotifier::~IOKitEventNotifier(this);
  operator delete(v1);
}

_QWORD *IOKitEventNotifier::create@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;

  v7 = a2;
  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0xD8uLL);
  result = std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(v5, a1, &v7);
  *a3 = v5 + 3;
  a3[1] = v5;
  return result;
}

void sub_1BF5B67E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t IOKitEventNotifier::getAccessoryPrimaryPortNumber(ctu::iokit::Controller **this)
{
  return ctu::iokit::Controller::getAccessoryPrimaryPortNumber(this[9]);
}

uint64_t ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 11;
  strcpy(a1, "iokit.event");
}

uint64_t ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7914008;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<IOKitEventNotifier,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7914008;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

_QWORD *std::__shared_ptr_emplace<IOKitEventNotifier>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<ctu::LogServer> &,__CFRunLoop *&,std::allocator<IOKitEventNotifier>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1E7914048;
  v4 = (uint64_t)(a1 + 3);
  v5 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  IOKitEventNotifier::IOKitEventNotifier(v4, &v12, *a3);
  v8 = v13;
  if (!v13)
    return a1;
  v9 = (unint64_t *)&v13->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_1BF5B6958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IOKitEventNotifier>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7914048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IOKitEventNotifier>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7914048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<IOKitEventNotifier>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void AppleBasebandManagerInitServer(const char *a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *size;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  size_t v28;
  std::string::size_type v29;
  std::string *p_dst;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::string __dst;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51[3];
  std::__shared_weak_count *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  std::string v57;

  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v55 = *a2;
  v56 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (std::__shared_weak_count *)a2[3];
  v53 = a2[2];
  v54 = v8;
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (std::__shared_weak_count *)a2[5];
  v51[2] = a2[4];
  v52 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v4)
  {
    v51[0] = v4;
    v51[1] = (uint64_t)v5;
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    abm::AWDHelperSetConnection(v51);
    if (v5)
    {
      v16 = (unint64_t *)&v5->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v49 = 0xAAAAAAAAAAAAAAAALL;
  v50 = 0xAAAAAAAAAAAAAAAALL;
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v18 = (uint64_t *)off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&v57);
    v19 = *(_OWORD *)&v57.__r_.__value_.__l.__data_;
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = 0uLL;
    v20 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v19;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    size = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
    if (v57.__r_.__value_.__l.__size_)
    {
      v24 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v18 = (uint64_t *)off_1ED70F338;
  }
  v49 = (unint64_t)v18;
  v50 = *(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v26 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  if (!v18)
    goto LABEL_47;
  v28 = strlen(a1);
  if (v28 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v33 = v28 | 7;
    v34 = v33 + 1;
    p_dst = (std::string *)operator new(v33 + 1);
    __dst.__r_.__value_.__l.__size_ = v29;
    __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
LABEL_43:
    memcpy(p_dst, a1, v29);
    p_dst->__r_.__value_.__s.__data_[v29] = 0;
    v31 = *v18;
    v32 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_39;
LABEL_44:
    std::string::__init_copy_ctor_external(&v57, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    goto LABEL_45;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v28;
  p_dst = &__dst;
  if (v28)
    goto LABEL_43;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  v31 = *v18;
  v32 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
LABEL_39:
  v57 = __dst;
LABEL_45:
  ABMServerInternal::init(v31, (uint64_t)&v57, (uint64_t)a2);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((v32 & 0x80000000) == 0)
      goto LABEL_47;
  }
  else if ((v32 & 0x80000000) == 0)
  {
    goto LABEL_47;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_47:
  abm::asString();
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = &v57;
  else
    v35 = (std::string *)v57.__r_.__value_.__r.__words[0];
  syslog(5, "%s hosting ABM with profile: %s", a1, (const char *)v35);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v36 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v37 = (unint64_t *)(v50 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v52;
  if (v52)
  {
    v40 = (unint64_t *)&v52->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v54;
  if (!v54)
    goto LABEL_66;
  v43 = (unint64_t *)&v54->__shared_owners_;
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    v45 = v56;
    if (!v56)
      return;
  }
  else
  {
LABEL_66:
    v45 = v56;
    if (!v56)
      return;
  }
  v46 = (unint64_t *)&v45->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
  }
}

void sub_1BF5B6DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v21 - 96);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerStartServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_1ED70F338;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::start(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_1BF5B6FDC(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerStopServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_1ED70F338;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::stop(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_1BF5B7150(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

BOOL AppleBasebandManagerShutdownServer(NSObject *a1)
{
  ABMServerInternal **v2;
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL8 result;
  _BOOL8 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;

  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v2 = (ABMServerInternal **)off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&v17);
    v3 = v17;
    v17 = 0uLL;
    v4 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v3;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v2 = (ABMServerInternal **)off_1ED70F338;
  }
  v10 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v11 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  result = ABMServerInternal::shutdown(*v2, a1);
  v14 = result;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      return v14;
    }
  }
  return result;
}

void sub_1BF5B72C4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t AppleBasebandManagerGetProfile()
{
  return 3;
}

uint64_t ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void ResetDetection::create(NSObject **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  dispatch_object_t object;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0xB8uLL);
  v9 = *a1;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  v10 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  ResetDetection::ResetDetection((uint64_t)v8, &object, &v16, a3);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(a4, (uint64_t)v8);
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a4);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (object)
    dispatch_release(object);
}

void sub_1BF5B74E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  NSObject *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2)
    dispatch_release(v2);
  _Unwind_Resume(a1);
}

uint64_t ResetDetection::ResetDetection(uint64_t a1, NSObject **a2, _QWORD *a3, uint64_t a4)
{
  NSObject *v8;
  _BYTE v10[16];

  *(_QWORD *)a1 = off_1E7914098;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, "com.apple.telephony.abm", "reset.detect");
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v8 = *a2;
  *(_QWORD *)(a1 + 88) = *a2;
  if (v8)
    dispatch_retain(v8);
  *(_QWORD *)(a1 + 96) = 0;
  ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>((_QWORD *)a1, (uint64_t)v10, a3);
  *(_QWORD *)a1 = off_1E79142B8;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(_QWORD *)a1 = off_1E7914098;
  *(_QWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = TelephonyBasebandCreateController();
  *(_DWORD *)(a1 + 128) = 2;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 144;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  return a1;
}

void sub_1BF5B761C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5B7630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

const char *ResetDetection::getName(ResetDetection *this)
{
  return "reset.detect";
}

_QWORD *ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7914228;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7914228;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ResetDetection::~ResetDetection(ResetDetection *this)
{
  const void *v2;
  __CFRunLoop *v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  NSObject *v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  _QWORD block[5];

  *(_QWORD *)this = off_1E7914098;
  v2 = (const void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    CFRelease(v2);
  v3 = (__CFRunLoop *)*((_QWORD *)this + 13);
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  v5 = (const void *)*MEMORY[0x1E0C9B280];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN14ResetDetectionD2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = v4;
  CFRunLoopPerformBlock(v3, v5, block);
  CFRunLoopWakeUp(*((CFRunLoopRef *)this + 13));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 21));
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((char **)this + 18));
  v6 = (const void *)*((_QWORD *)this + 15);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)this = off_1E7914228;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v7 = *((_QWORD *)this + 12);
  if (v7)
    dispatch_release(v7);
  v8 = *((_QWORD *)this + 11);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  void *v1;

  ResetDetection::~ResetDetection(this);
  operator delete(v1);
}

void ___ZN14ResetDetectionD2Ev_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;

  v1 = *(_QWORD **)(a1 + 32);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
    operator delete(v1);
  }
}

void ResetDetection::start(ResetDetection *this)
{
  _QWORD v1[5];

  v1[0] = MEMORY[0x1E0C809B0];
  v1[1] = 0x40000000;
  v1[2] = ___ZN14ResetDetection5startEv_block_invoke;
  v1[3] = &__block_descriptor_tmp_3;
  v1[4] = this;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v1);
}

void ___ZN14ResetDetection5startEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  NSObject *v12;
  uint64_t (*v13)(uint64_t);
  NSObject *v14;
  uint64_t (*v15)(uint64_t);
  uint8_t v16[16];
  uint8_t buf[16];
  uint8_t v18[15];
  unsigned __int8 v19;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Started", buf, 2u);
  }
  v3 = operator new(0x10uLL);
  v4 = *(std::__shared_weak_count **)(v1 + 80);
  if (!v4 || (v5 = *(_QWORD *)(v1 + 72), (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  *v3 = v5;
  v3[1] = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  *(_QWORD *)(v1 + 112) = v3;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
    if ((TelephonyBasebandRegisterForReset() & 1) != 0)
      goto LABEL_14;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
    if ((TelephonyBasebandRegisterForReset() & 1) != 0)
      goto LABEL_14;
  }
  v12 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v16 = 0;
    _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "failed registering for reset detect", v16, 2u);
    v15 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
    if (!*(_QWORD *)(v1 + 120))
      v15 = 0;
    if (v15)
      goto LABEL_17;
    return;
  }
LABEL_14:
  v13 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  if (!*(_QWORD *)(v1 + 120))
    v13 = 0;
  if (v13)
  {
LABEL_17:
    v19 = 1;
    if ((TelephonyBasebandGetReset() & 1) != 0)
    {
      *(_DWORD *)(v1 + 128) = v19;
    }
    else
    {
      v14 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v18 = 0;
        _os_log_error_impl(&dword_1BF566000, v14, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v18, 2u);
      }
    }
  }
}

void sub_1BF5B7A40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void ResetDetection::sResetDetectCallback(ResetDetection *this, void *a2, int a3, unsigned int a4, void *a5)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  int v15;

  if (this)
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if (v5)
    {
      v7 = *(_QWORD *)this;
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      v10 = std::__shared_weak_count::lock(v5);
      if (v10)
      {
        v11 = v10;
        if (v7)
        {
          v14[0] = MEMORY[0x1E0C809B0];
          v14[1] = 0x40000000;
          v14[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
          v14[3] = &__block_descriptor_tmp_6;
          v14[4] = v7;
          v15 = a3;
          ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(v7 + 72), (uint64_t)v14);
        }
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

uint64_t ResetDetection::poll(ResetDetection *this, BOOL *a2)
{
  uint64_t (*v3)(uint64_t);
  uint64_t Reset;
  NSObject *v7;
  uint8_t v8[15];
  BOOL v9;

  v3 = ctu::SharedRef<__TelephonyBasebandControllerHandle_tag,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__TelephonyBasebandControllerHandle_tag>::get;
  if (!*((_QWORD *)this + 15))
    v3 = 0;
  if (!v3)
    return 0;
  v9 = 1;
  Reset = TelephonyBasebandGetReset();
  if ((_DWORD)Reset)
  {
    *a2 = v9;
    return Reset;
  }
  v7 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    return Reset;
  *(_WORD *)v8 = 0;
  _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "failed to poll for reset detect", v8, 2u);
  return Reset;
}

void ResetDetection::add(uint64_t a1, uint64_t a2, char a3, void **a4, uint64_t a5)
{
  void *v9;
  _QWORD v10[5];
  std::string __p;
  void *aBlock;
  uint64_t v13;
  char v14;

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke;
  v10[3] = &__block_descriptor_tmp_4;
  v10[4] = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v14 = a3;
    v9 = *a4;
    if (!*a4)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v14 = a3;
  v9 = *a4;
  if (*a4)
LABEL_5:
    v9 = _Block_copy(v9);
LABEL_6:
  aBlock = v9;
  v13 = a5;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)(a1 + 72), (uint64_t)v10);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZN14ResetDetection3addENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbN8dispatch5blockIU13block_pointerFviEEEy_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  _OWORD *v13;
  int v14;
  const void *v15;
  void *v16;
  void *v17;
  const void *v18;
  void *v19;
  void *v20;
  std::string v21;
  void *v22;
  std::string v23;
  uint8_t buf[4];
  _QWORD *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 136315394;
    v25 = v4;
    v26 = 1024;
    v27 = v5;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Added detection with key '%s', reset=%d", buf, 0x12u);
  }
  v6 = *(_DWORD *)(v2 + 128);
  v7 = *(unsigned __int8 *)(a1 + 80);
  if (v6)
  {
    if (v6 != 2)
    {
      v8 = v6 != 1 || v7 == 0;
      v9 = !v8;
      v10 = v6 | v7 || v6 == 1;
      v11 = !v10 && v7 == 0;
      if (v11 || v9)
        goto LABEL_28;
    }
  }
  else if (!*(_BYTE *)(a1 + 80))
  {
LABEL_28:
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
    return;
  }
  v13 = (_OWORD *)(a1 + 40);
  v14 = *(char *)(a1 + 63);
  if (*(_BYTE *)(a1 + 80))
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *v13;
      v23.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
    }
    v15 = *(const void **)(a1 + 64);
    if (v15)
      v16 = _Block_copy(v15);
    else
      v16 = 0;
    v22 = v16;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v23, &v22, (uint64_t **)(v2 + 136), *(_QWORD *)(a1 + 72));
    if (v16)
      _Block_release(v16);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_47:
      operator delete(v17);
    }
  }
  else
  {
    if (v14 < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v13;
      v21.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
    }
    v18 = *(const void **)(a1 + 64);
    if (v18)
      v19 = _Block_copy(v18);
    else
      v19 = 0;
    v20 = v19;
    ResetDetection::addToBlocks_sync(v2, (uint64_t)&v21, &v20, (uint64_t **)(v2 + 160), *(_QWORD *)(a1 + 72));
    if (v19)
      _Block_release(v19);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v21.__r_.__value_.__r.__words[0];
      goto LABEL_47;
    }
  }
}

void sub_1BF5B7F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ResetDetection::addToBlocks_sync(uint64_t a1, uint64_t a2, void **a3, uint64_t **a4, dispatch_time_t a5)
{
  NSObject *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t **v22;
  int v23;
  const std::string::value_type *v24;
  size_t v25;
  uint64_t **v26;
  _QWORD *v27;
  const void *v28;
  const void *v29;
  int v30;
  const void *v31;
  size_t v32;
  size_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  std::string *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD handler[6];
  std::__shared_weak_count *v43;
  uint64_t **v44;
  std::string __p;

  v10 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, *(dispatch_queue_t *)(a1 + 88));
  dispatch_source_set_timer(v10, a5, 0xFFFFFFFFFFFFFFFFLL, 0x5F5E100uLL);
  v11 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v11 || (v12 = *(_QWORD *)(a1 + 72), (v13 = std::__shared_weak_count::lock(v11)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v13;
  p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v14);
  }
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke;
  handler[3] = &__block_descriptor_tmp_5_0;
  handler[4] = a1;
  handler[5] = v12;
  v43 = v14;
  do
    v19 = __ldxr(p_shared_weak_owners);
  while (__stxr(v19 + 1, p_shared_weak_owners));
  v44 = a4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  dispatch_source_set_event_handler(v10, handler);
  dispatch_activate(v10);
  v20 = *a3;
  if (*a3)
    v20 = _Block_copy(v20);
  v41 = (uint64_t *)v20;
  v22 = a4 + 1;
  v21 = a4[1];
  if (v21)
  {
    v23 = *(char *)(a2 + 23);
    if (v23 >= 0)
      v24 = (const std::string::value_type *)a2;
    else
      v24 = *(const std::string::value_type **)a2;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a2 + 23);
    else
      v25 = *(_QWORD *)(a2 + 8);
    while (1)
    {
      v26 = (uint64_t **)v21;
      v29 = (const void *)v21[4];
      v27 = v21 + 4;
      v28 = v29;
      v30 = *((char *)v27 + 23);
      if (v30 >= 0)
        v31 = v27;
      else
        v31 = v28;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)v27 + 23);
      else
        v32 = v27[1];
      if (v32 >= v25)
        v33 = v25;
      else
        v33 = v32;
      v34 = memcmp(v24, v31, v33);
      if (v34)
      {
        if (v34 < 0)
          goto LABEL_23;
LABEL_37:
        v35 = memcmp(v31, v24, v33);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0)
            goto LABEL_51;
        }
        else if (v32 >= v25)
        {
LABEL_51:
          v40 = v26[8];
          v26[7] = (uint64_t *)v10;
          v26[8] = v41;
          if (v40)
            goto LABEL_52;
          goto LABEL_53;
        }
        v21 = v26[1];
        if (!v21)
        {
          v22 = v26 + 1;
          goto LABEL_44;
        }
      }
      else
      {
        if (v25 >= v32)
          goto LABEL_37;
LABEL_23:
        v21 = *v26;
        v22 = v26;
        if (!*v26)
          goto LABEL_44;
      }
    }
  }
  v26 = a4 + 1;
LABEL_44:
  v36 = operator new(0x48uLL);
  v37 = (std::string *)(v36 + 4);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v37->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v36[6] = *(_QWORD *)(a2 + 16);
  }
  v36[7] = 0;
  v36[8] = 0;
  *v36 = 0;
  v36[1] = 0;
  v36[2] = v26;
  *v22 = v36;
  v38 = (uint64_t *)**a4;
  v39 = v36;
  if (v38)
  {
    *a4 = v38;
    v39 = *v22;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a4[1], v39);
  a4[2] = (uint64_t *)((char *)a4[2] + 1);
  v40 = (uint64_t *)v36[8];
  v36[7] = v10;
  v36[8] = v41;
  if (v40)
LABEL_52:
    _Block_release(v40);
LABEL_53:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  std::__shared_weak_count::__release_weak(v14);
}

void sub_1BF5B82C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  void *v26;
  std::__shared_weak_count *v28;

  operator delete(v26);
  std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair((uint64_t)&a10);
  if (a25 < 0)
  {
    operator delete(__p);
    v28 = a18;
    if (a18)
      goto LABEL_3;
  }
  else
  {
    v28 = a18;
    if (a18)
    {
LABEL_3:
      std::__shared_weak_count::__release_weak(v28);
      std::__shared_weak_count::__release_weak(v25);
      _Unwind_Resume(a1);
    }
  }
  std::__shared_weak_count::__release_weak(v25);
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *result;

  v4 = (std::string *)(a1 + 40);
  if ((*(char *)(a2 + 63) & 0x80000000) == 0)
  {
    v5 = *(_OWORD *)(a2 + 40);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
    result = *(void **)(a2 + 64);
    if (!result)
      goto LABEL_6;
    goto LABEL_5;
  }
  std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  result = *(void **)(a2 + 64);
  if (result)
LABEL_5:
    result = _Block_copy(result);
LABEL_6:
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c43_ZTSN8dispatch5blockIU13block_pointerFviEEE(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void ___ZN14ResetDetection16addToBlocks_syncENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFviEEERNS0_3mapIS6_NS0_4pairIP17dispatch_source_sSB_EENS0_4lessIS6_EENS4_INSD_IKS6_SG_EEEEEEy_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  int v10;
  const void *v11;
  size_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  size_t v16;
  size_t v17;
  int v18;
  int v19;
  const void *v20;
  size_t v21;
  size_t v22;
  int v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t *v29;
  const void *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2)
    return;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return;
  v5 = v4;
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_54;
  v6 = *(_QWORD *)(a1 + 56);
  v9 = *(uint64_t ***)(v6 + 8);
  v7 = (uint64_t *)(v6 + 8);
  v8 = v9;
  if (!v9)
    goto LABEL_54;
  v10 = *(char *)(a1 + 87);
  if (v10 >= 0)
    v11 = (const void *)(a1 + 64);
  else
    v11 = *(const void **)(a1 + 64);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 87);
  else
    v12 = *(_QWORD *)(a1 + 72);
  v13 = v7;
  do
  {
    while (1)
    {
      v14 = *((char *)v8 + 55);
      v15 = v14 >= 0 ? (uint64_t *)(v8 + 4) : v8[4];
      v16 = v14 >= 0 ? *((unsigned __int8 *)v8 + 55) : (size_t)v8[5];
      v17 = v12 >= v16 ? v16 : v12;
      v18 = memcmp(v15, v11, v17);
      if (v18)
        break;
      if (v16 >= v12)
        goto LABEL_26;
LABEL_12:
      v8 = (uint64_t **)v8[1];
      if (!v8)
        goto LABEL_27;
    }
    if (v18 < 0)
      goto LABEL_12;
LABEL_26:
    v13 = (uint64_t *)v8;
    v8 = (uint64_t **)*v8;
  }
  while (v8);
LABEL_27:
  if (v13 != v7)
  {
    v19 = *((char *)v13 + 55);
    if (v19 >= 0)
      v20 = v13 + 4;
    else
      v20 = (const void *)v13[4];
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)v13 + 55);
    else
      v21 = v13[5];
    if (v21 >= v12)
      v22 = v12;
    else
      v22 = v21;
    v23 = memcmp(v11, v20, v22);
    if (v23)
    {
      if (v23 < 0)
        goto LABEL_54;
LABEL_41:
      ResetDetection::invokeBlock_sync(v3, (uint64_t)(v13 + 4), 3760250883);
      v24 = *(uint64_t ***)(a1 + 56);
      v25 = (uint64_t *)v13[1];
      if (v25)
      {
        do
        {
          v26 = v25;
          v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        v27 = v13;
        do
        {
          v26 = (uint64_t *)v27[2];
          v28 = *v26 == (_QWORD)v27;
          v27 = v26;
        }
        while (!v28);
      }
      if (*v24 == v13)
        *v24 = v26;
      v29 = v24[1];
      v24[2] = (uint64_t *)((char *)v24[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, v13);
      v30 = (const void *)v13[8];
      if (v30)
        _Block_release(v30);
      if (*((char *)v13 + 55) < 0)
        operator delete((void *)v13[4]);
      operator delete(v13);
    }
    else if (v12 >= v21)
    {
      goto LABEL_41;
    }
  }
LABEL_54:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v32 = __ldaxr(p_shared_owners);
  while (__stlxr(v32 - 1, p_shared_owners));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF5B860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ResetDetection::invokeBlock_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v6;
  NSObject *v7;
  void (**v8)(void *, _QWORD);
  NSObject *v9;
  std::string *p_p;
  std::string __p;
  uint8_t buf[4];
  std::string *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(&__p, 170, sizeof(__p));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v7 = *(NSObject **)(a2 + 24);
  v6 = *(const void **)(a2 + 32);
  if (v6)
  {
    v8 = (void (**)(void *, _QWORD))_Block_copy(v6);
    *(_QWORD *)(a2 + 24) = 0;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (v7)
  {
LABEL_6:
    dispatch_source_cancel(v7);
    dispatch_release(v7);
  }
LABEL_7:
  v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v13 = p_p;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Signalling %s", buf, 0xCu);
  }
  v8[2](v8, a3);
  _Block_release(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF5B877C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void __copy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    a1[10] = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF5B8834(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__18weak_ptrI14ResetDetectionEE64c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    v2 = *(std::__shared_weak_count **)(a1 + 48);
    if (!v2)
      return;
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
LABEL_3:
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    _Block_release(v2);
  return a1;
}

void ResetDetection::notifyResetDetectBlocks_sync(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[2];
  __int128 v13;
  void *aBlock;
  _QWORD *v15;
  _QWORD v16[2];

  v3 = &v15;
  v4 = *(char **)(a2 + 8);
  v15 = *(_QWORD **)a2;
  v16[0] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v16[1] = v5;
  if (v5)
    v3 = v4 + 16;
  *v3 = v16;
  *(_QWORD *)a2 = a2 + 8;
  v6 = v15;
  if (v15 != v16)
  {
    while (1)
    {
      aBlock = (void *)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)__p = v7;
      v13 = v7;
      if (*((char *)v6 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v6[4], v6[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v6 + 2);
        *(_QWORD *)&v13 = v6[6];
      }
      v8 = (void *)v6[8];
      *((_QWORD *)&v13 + 1) = v6[7];
      if (v8)
        v8 = _Block_copy(v8);
      aBlock = v8;
      ResetDetection::invokeBlock_sync(a1, (uint64_t)__p, 0);
      if (aBlock)
        _Block_release(aBlock);
      if (SBYTE7(v13) < 0)
      {
        operator delete(__p[0]);
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
LABEL_17:
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
          goto LABEL_5;
        }
      }
      else
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
          goto LABEL_17;
      }
      do
      {
        v10 = (_QWORD *)v6[2];
        v11 = *v10 == (_QWORD)v6;
        v6 = v10;
      }
      while (!v11);
LABEL_5:
      v6 = v10;
      if (v10 == v16)
      {
        v4 = (char *)v16[0];
        break;
      }
    }
  }
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(v4);
}

void sub_1BF5B8A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(a15);
  _Unwind_Resume(a1);
}

void sub_1BF5B8A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(a15);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    _Block_release(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void ResetDetection::resetDetectCallback(ResetDetection *this, void *a2, unsigned int a3, int a4, void *a5)
{
  _QWORD v5[5];
  int v6;

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke;
  v5[3] = &__block_descriptor_tmp_6;
  v5[4] = this;
  v6 = a4;
  ctu::SharedSynchronizable<ResetDetection>::execute_wrapped((uint64_t *)this + 9, (uint64_t)v5);
}

void ___ZN14ResetDetection19resetDetectCallbackEPvjjS0__block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == -469794815)
  {
    v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I baseband alive detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 0;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 160);
  }
  else if (v2 == -469794816)
  {
    v3 = _os_activity_create(&dword_1BF566000, "Baseband state: reset detected", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v3, &state);
    os_activity_scope_leave(&state);
    v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I baseband reset detected", (uint8_t *)&state, 2u);
    }
    *(_DWORD *)(v1 + 128) = 1;
    ResetDetection::notifyResetDetectBlocks_sync(v1, v1 + 136);
    if (v3)
      os_release(v3);
  }
}

void sub_1BF5B8C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

void ctu::os::scoped_activity::~scoped_activity(void **this)
{
  void *v1;

  v1 = *this;
  if (v1)
    os_release(v1);
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "reset.detect");
}

uint64_t ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7914228;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7914228;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF5B8E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF5B8E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<ResetDetection>::shared_ptr[abi:ne180100]<ResetDetection,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7914268;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF5B8F54(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF5B8F74(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ResetDetection *,std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection *)#1},std::allocator<ResetDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                                "IT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI14ResetDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ResetDetection> ctu::SharedSynchronizable<ResetDetection>::make_shared_ptr<ResetDetection>(ResetDetection*)::{lambda(ResetDetection*)#1}::operator() const(ResetDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::Loggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7914228;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF5B90E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

void ctu::SharedLoggable<ResetDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7914228;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(char *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<dispatch_source_s *,dispatch::block<void({block_pointer})(int)>>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (const void *)*((_QWORD *)a1 + 8);
    if (v2)
      _Block_release(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void ctu::SharedSynchronizable<ResetDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79142F0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI14ResetDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIK14ResetDetectionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void **std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0)
          operator delete(*(v3 - 4));
        v3 -= 4;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ResetInfo::ResetInfo(ResetInfo *this)
{
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

{
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
}

uint64_t ResetInfo::ResetInfo(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, int a6, __int128 *a7)
{
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string __p;
  __int128 v17;
  uint64_t v18;

  v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(_QWORD *)(a1 + 16) = v18;
  v17 = 0uLL;
  v18 = 0;
  ctu::cf::assign();
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(_QWORD *)(a1 + 40) = v18;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v12 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v12;
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  *(_QWORD *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 80) = a6;
    v13 = (std::string *)(a1 + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
      goto LABEL_9;
LABEL_11:
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
    return a1;
  }
  *(_DWORD *)(a1 + 80) = a6;
  v13 = (std::string *)(a1 + 88);
  if (*((char *)a7 + 23) < 0)
    goto LABEL_11;
LABEL_9:
  v14 = *a7;
  v13->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
  *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  return a1;
}

void sub_1BF5B95B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;

  if (*(char *)(v20 + 47) < 0)
    operator delete(*v21);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void ResetInfo::ResetInfo(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, int a6, __int128 *a7)
{
  __int128 v13;
  std::string *v14;
  __int128 v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string __p;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
    v14 = this + 1;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      v15 = *a3;
      v14->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
      goto LABEL_6;
    }
  }
  std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
LABEL_6:
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v16 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v16;
  }
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  this[3].__r_.__value_.__r.__words[0] = (std::string::size_type)Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else
  {
    LODWORD(this[3].__r_.__value_.__r.__words[1]) = a6;
    v17 = (std::string *)((char *)this + 88);
    if ((*((char *)a7 + 23) & 0x80000000) == 0)
    {
LABEL_14:
      v18 = *a7;
      v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a7 + 2);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      return;
    }
  }
  std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a7, *((_QWORD *)a7 + 1));
}

void sub_1BF5B97BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 47) < 0)
  {
    operator delete(*v15);
    if ((*(char *)(v14 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void ResetInfo::~ResetInfo(void **this)
{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

{
  if (*((char *)this + 111) < 0)
  {
    operator delete(this[11]);
    if ((*((char *)this + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[6]);
  if ((*((char *)this + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_9:
    operator delete(*this);
    return;
  }
LABEL_8:
  operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    goto LABEL_9;
}

void ResetInfo::getType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void ResetInfo::getSubType(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

void ResetInfo::getReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

void ResetInfo::getTime(ResetInfo *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6[2];

  v3 = *((_QWORD *)this + 9);
  v4 = operator new(0x38uLL);
  v4[8] = 0;
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = v6;
  v5 = v4;
  v6[0] = v4;
  *((_BYTE *)v4 + 24) = 1;
  v6[1] = (_QWORD *)1;
  *((_QWORD *)v4 + 5) = v3;
  *((_QWORD *)v4 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v5, 0, 9, a2);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v5, v6[0]);
}

void sub_1BF5B9A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t ResetInfo::getChronoTime(ResetInfo *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t ResetInfo::getRadar(ResetInfo *this)
{
  return *((unsigned int *)this + 20);
}

void ResetInfo::getCrashReason(ResetInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

void ResetInfo::setType(ResetInfo *this, const __CFString *a2)
{
  ctu::cf::assign();
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)((char *)this + 15) = 0;
  *((_BYTE *)this + 23) = 0;
}

void sub_1BF5B9B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetInfo::setSubType(ResetInfo *this, const __CFString *a2)
{
  ctu::cf::assign();
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)((char *)this + 39) = 0;
  *((_BYTE *)this + 47) = 0;
}

void sub_1BF5B9C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **ResetInfo::setReason(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 48);
  if (result != a2)
  {
    if (*(char *)(a1 + 71) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

void ResetInfo::setTime(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_QWORD *)(a1 + 72) = Timestamp::convert((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF5B9D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ResetInfo::setRadar(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

void **ResetInfo::setCrashReason(uint64_t a1, void **a2)
{
  void **result;
  __int128 v4;
  size_t v5;
  size_t v6;

  result = (void **)(a1 + 88);
  if (result != a2)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        v6 = v5;
      }
      return std::string::__assign_no_alias<false>(result, a2, v6);
    }
    else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
    {
      return (void **)std::string::__assign_no_alias<true>(result, *a2, (size_t)a2[1]);
    }
    else
    {
      v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)result = v4;
    }
  }
  return result;
}

uint64_t ResetInfo::asString@<X0>(ResetInfo *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  int v6;
  ResetInfo *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char v34;
  size_t v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  void *__p[2];
  unsigned __int8 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void *v50[2];
  __int128 v51;
  __int128 v52;
  _OWORD v53[9];
  unint64_t v54;
  _QWORD **v55;
  _QWORD *v56;
  uint64_t v57;

  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
  v54 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53[7] = v4;
  v53[8] = v4;
  v53[5] = v4;
  v53[6] = v4;
  v53[3] = v4;
  v53[4] = v4;
  v53[1] = v4;
  v53[2] = v4;
  v52 = v4;
  v53[0] = v4;
  *(_OWORD *)v50 = v4;
  v51 = v4;
  v48 = v4;
  v49 = v4;
  v46 = v4;
  v47 = v4;
  v45 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v45);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"ResetInfo { Type='", 18);
  v6 = *((char *)this + 23);
  if (v6 >= 0)
    v7 = this;
  else
    v7 = *(ResetInfo **)this;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 23);
  else
    v8 = *((_QWORD *)this + 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' SubType='", 11);
  v11 = *((char *)this + 47);
  if (v11 >= 0)
    v12 = (char *)this + 24;
  else
    v12 = (char *)*((_QWORD *)this + 3);
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)this + 47);
  else
    v13 = *((_QWORD *)this + 4);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' Time='", 8);
  v16 = *((_QWORD *)this + 9);
  v56 = 0;
  v57 = 0;
  v55 = &v56;
  v17 = operator new(0x38uLL);
  v17[8] = 0;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = &v56;
  v55 = (_QWORD **)v17;
  v56 = v17;
  *((_BYTE *)v17 + 24) = 1;
  v57 = 1;
  *((_QWORD *)v17 + 5) = v16;
  *((_QWORD *)v17 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v55, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v55, v56);
  if ((v44 & 0x80u) == 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if ((v44 & 0x80u) == 0)
    v19 = v44;
  else
    v19 = (uint64_t)__p[1];
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' Radar='", 9);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' Reason='", 10);
  v23 = (char *)this + 48;
  v24 = *((char *)this + 71);
  if (v24 >= 0)
    v25 = (char *)this + 48;
  else
    v25 = (char *)*((_QWORD *)this + 6);
  if (v24 >= 0)
    v26 = *((unsigned __int8 *)this + 71);
  else
    v26 = *((_QWORD *)this + 7);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v25, v26);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"' MTBF='", 8);
  *(_DWORD *)((char *)v28 + *(_QWORD *)(*v28 - 24) + 8) |= 1u;
  ResetInfo::isMTBF((ResetInfo **)this);
  v29 = (_QWORD *)std::ostream::operator<<();
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' SCD='", 7);
  *(_DWORD *)((char *)v30 + *(_QWORD *)(*v30 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v23, (__int128 **)&ResetInfo::sPatternMasks);
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' COF='", 7);
  *(_DWORD *)((char *)v32 + *(_QWORD *)(*v32 - 24) + 8) |= 1u;
  ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v23, (__int128 **)&ResetInfo::sPatternMasks);
  v33 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' }", 3);
  if (((char)v44 & 0x80000000) == 0)
  {
    v34 = BYTE8(v52);
    if ((BYTE8(v52) & 0x10) == 0)
      goto LABEL_29;
LABEL_32:
    v36 = v52;
    if ((unint64_t)v52 < *((_QWORD *)&v49 + 1))
    {
      *(_QWORD *)&v52 = *((_QWORD *)&v49 + 1);
      v36 = *((_QWORD *)&v49 + 1);
    }
    v37 = (const void *)v49;
    v35 = v36 - v49;
    if ((unint64_t)(v36 - v49) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_46;
    goto LABEL_35;
  }
  operator delete(__p[0]);
  v34 = BYTE8(v52);
  if ((BYTE8(v52) & 0x10) != 0)
    goto LABEL_32;
LABEL_29:
  if ((v34 & 8) == 0)
  {
    v35 = 0;
    a2[23] = 0;
    goto LABEL_42;
  }
  v37 = (const void *)*((_QWORD *)&v47 + 1);
  v35 = *((_QWORD *)&v48 + 1) - *((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v48 + 1) - *((_QWORD *)&v47 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_46:
    std::string::__throw_length_error[abi:ne180100]();
LABEL_35:
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    v40 = operator new(v38 + 1);
    *((_QWORD *)a2 + 1) = v35;
    *((_QWORD *)a2 + 2) = v39 | 0x8000000000000000;
    *(_QWORD *)a2 = v40;
    a2 = v40;
    goto LABEL_41;
  }
  a2[23] = v35;
  if (v35)
LABEL_41:
    memmove(a2, v37, v35);
LABEL_42:
  a2[v35] = 0;
  *(_QWORD *)&v45 = *MEMORY[0x1E0DE4F50];
  v41 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v45 + *(_QWORD *)(v45 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v46 = v41;
  *((_QWORD *)&v46 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v51) < 0)
    operator delete(v50[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8C364](v53);
}

void sub_1BF5BA1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v5 - 72, *(_QWORD **)(v5 - 64));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5BA1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5BA1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5BA1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ResetInfo::readResetReasonPatterns(ResetInfo *this)
{
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
}

uint64_t ResetInfo::isMTBF(ResetInfo **this)
{
  char *v2;
  int64_t v3;
  ResetInfo *v4;
  int64_t v5;
  int64_t v6;
  uint64_t result;
  char *v8;
  int v9;
  ResetInfo *v10;
  uint64_t v11;

  v2 = (char *)*MEMORY[0x1E0CFB590];
  if (*((char *)this + 23) < 0)
  {
    v4 = *this;
    v3 = (int64_t)this[1];
    v5 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (!v5)
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 23);
    v4 = (ResetInfo *)this;
    v5 = strlen((const char *)*MEMORY[0x1E0CFB590]);
    if (!v5)
      return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  }
  v6 = v5;
  if (v3 < v5)
    return 0;
  v8 = (char *)v4 + v3;
  v9 = *v2;
  v10 = v4;
  while (1)
  {
    if (v3 - v6 == -1)
      return 0;
    result = (uint64_t)memchr(v10, v9, v3 - v6 + 1);
    if (!result)
      return result;
    v11 = result;
    result = memcmp((const void *)result, v2, v6);
    if (!(_DWORD)result)
      break;
    v10 = (ResetInfo *)(v11 + 1);
    v3 = (int64_t)&v8[-v11 - 1];
    if (v3 < v6)
      return 0;
  }
  if ((char *)v11 != v8 && v11 - (_QWORD)v4 != -1)
    return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(1, (uint64_t)(this + 6), (__int128 **)&ResetInfo::sPatternMasks) ^ 1;
  return result;
}

uint64_t ResetInfo::shouldSetSCD(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)this + 48, (__int128 **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::shouldSetCOF(ResetInfo *this)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)this + 48, (__int128 **)&ResetInfo::sPatternMasks);
}

uint64_t ResetInfo::addToDict(uint64_t result, __CFDictionary **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  const __CFAllocator *v8;
  __CFDictionary *v9;
  const __CFString **v10;
  const __CFAllocator *v11;
  __CFDictionary *v12;
  const __CFString **v13;
  const __CFAllocator *v14;
  _OWORD *v15;
  __CFDictionary *v16;
  const __CFString **v17;
  uint64_t v18;
  _DWORD *v19;
  const __CFAllocator *v20;
  __CFDictionary *v21;
  const __CFAllocator *v22;
  int isMTBF;
  const __CFAllocator *v24;
  int v25;
  const __CFAllocator *v26;
  int v27;
  const __CFAllocator *v28;
  std::string __p;
  std::string v30;

  if (*a2)
    v5 = ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::get;
  else
    v5 = 0;
  if (v5)
  {
    v7 = result;
    if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
      dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v9 = *a2;
    v10 = (const __CFString **)*MEMORY[0x1E0CFB538];
    if (*(char *)(v7 + 23) < 0)
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    else
      v30 = *(std::string *)v7;
    ctu::cf::update<char const*,std::string>(v9, v10, (uint64_t)&v30, (uint64_t)v8, a5);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      v12 = *a2;
      v13 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else
    {
      v12 = *a2;
      v13 = (const __CFString **)*MEMORY[0x1E0CFB8D0];
      if ((*(char *)(v7 + 47) & 0x80000000) == 0)
      {
LABEL_12:
        v30 = *(std::string *)(v7 + 24);
        goto LABEL_15;
      }
    }
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 24), *(_QWORD *)(v7 + 32));
LABEL_15:
    ctu::cf::update<char const*,std::string>(v12, v13, (uint64_t)&v30, (uint64_t)v8, v11);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v15 = (_OWORD *)(v7 + 48);
    v16 = *a2;
    v17 = (const __CFString **)*MEMORY[0x1E0CFB788];
    if (*(char *)(v7 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v7 + 48), *(_QWORD *)(v7 + 56));
    }
    else
    {
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *v15;
      v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 64);
    }
    ctu::cf::update<char const*,std::string>(v16, v17, (uint64_t)&v30, (uint64_t)v8, v14);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v18 = *(_QWORD *)(v7 + 72);
    v19 = operator new(0x38uLL);
    v19[8] = 0;
    *(_QWORD *)v19 = 0;
    *((_QWORD *)v19 + 1) = 0;
    *((_QWORD *)v19 + 2) = &v30.__r_.__value_.__l.__size_;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    v30.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
    *((_BYTE *)v19 + 24) = 1;
    v30.__r_.__value_.__r.__words[2] = 1;
    *((_QWORD *)v19 + 5) = v18;
    *((_QWORD *)v19 + 6) = 0xAAAAAAAA00000000;
    Timestamp::asString((uint64_t)&v30, 0, 9, &__p);
    std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v30, (_QWORD *)v30.__r_.__value_.__l.__size_);
    v21 = *a2;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v30 = __p;
    ctu::cf::update<char const*,std::string>(v21, (const __CFString **)*MEMORY[0x1E0CFB370], (uint64_t)&v30, (uint64_t)v8, v20);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_27;
    }
    else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_27:
      ctu::cf::update<char const*,unsigned int>(*a2, (const __CFString **)*MEMORY[0x1E0CFB010], *(_DWORD *)(v7 + 80), v8, v22);
      isMTBF = ResetInfo::isMTBF((ResetInfo **)v7);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB780], isMTBF, (uint64_t)v8, v24);
      v25 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v15, (__int128 **)&ResetInfo::sPatternMasks);
      ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB798], v25, (uint64_t)v8, v26);
      v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v15, (__int128 **)&ResetInfo::sPatternMasks);
      return ctu::cf::update<char const*,BOOL>(*a2, (const __CFString **)*MEMORY[0x1E0CFB790], v27, (uint64_t)v8, v28);
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_27;
  }
  return result;
}

void sub_1BF5BA6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ResetInfo::addToDict(ResetInfo *this, xpc_object_t *a2)
{
  const char *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  const char *v7;
  xpc_object_t v8;
  xpc_object_t v9;
  const char **v10;
  const char *v11;
  xpc_object_t v12;
  xpc_object_t v13;
  uint64_t v14;
  _DWORD *v15;
  void **v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  char isMTBF;
  xpc_object_t v22;
  xpc_object_t v23;
  char v24;
  xpc_object_t v25;
  xpc_object_t v26;
  char v27;
  xpc_object_t v28;
  xpc_object_t v29;
  void *__p[2];
  char v31;
  _DWORD *v32;
  _QWORD *v33[2];

  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
    return;
  if (ResetInfo::readResetReasonPatterns(void)::sOnce != -1)
  {
    dispatch_once(&ResetInfo::readResetReasonPatterns(void)::sOnce, &__block_literal_global);
    v4 = (const char *)this;
    if ((*((char *)this + 23) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v4 = (const char *)this;
  if (*((char *)this + 23) < 0)
LABEL_4:
    v4 = *(const char **)this;
LABEL_5:
  v5 = xpc_string_create(v4);
  if (!v5)
    v5 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB538], v5);
  v6 = xpc_null_create();
  xpc_release(v5);
  xpc_release(v6);
  v7 = (char *)this + 24;
  if (*((char *)this + 47) < 0)
    v7 = *(const char **)v7;
  v8 = xpc_string_create(v7);
  if (!v8)
    v8 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0], v8);
  v9 = xpc_null_create();
  xpc_release(v8);
  xpc_release(v9);
  v10 = (const char **)((char *)this + 48);
  v11 = (char *)this + 48;
  if (*((char *)this + 71) < 0)
    v11 = *v10;
  v12 = xpc_string_create(v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB788], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  v14 = *((_QWORD *)this + 9);
  v15 = operator new(0x38uLL);
  v15[8] = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  *((_QWORD *)v15 + 2) = v33;
  v32 = v15;
  v33[0] = v15;
  *((_BYTE *)v15 + 24) = 1;
  v33[1] = (_QWORD *)1;
  *((_QWORD *)v15 + 5) = v14;
  *((_QWORD *)v15 + 6) = 0xAAAAAAAA00000000;
  Timestamp::asString((uint64_t)&v32, 0, 9, __p);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v32, v33[0]);
  if (v31 >= 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = xpc_string_create((const char *)v16);
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB370], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  if (v31 < 0)
    operator delete(__p[0]);
  v19 = xpc_int64_create(*((unsigned int *)this + 20));
  if (!v19)
    v19 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB010], v19);
  v20 = xpc_null_create();
  xpc_release(v19);
  xpc_release(v20);
  isMTBF = ResetInfo::isMTBF((ResetInfo **)this);
  v22 = xpc_BOOL_create(isMTBF);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB780], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  v24 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, (uint64_t)v10, (__int128 **)&ResetInfo::sPatternMasks);
  v25 = xpc_BOOL_create(v24);
  if (!v25)
    v25 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB798], v25);
  v26 = xpc_null_create();
  xpc_release(v25);
  xpc_release(v26);
  v27 = ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, (uint64_t)v10, (__int128 **)&ResetInfo::sPatternMasks);
  v28 = xpc_BOOL_create(v27);
  if (!v28)
    v28 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB790], v28);
  v29 = xpc_null_create();
  xpc_release(v28);
  xpc_release(v29);
}

void sub_1BF5BAB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void ResetInfo::fetchFromDict(void **this, xpc_object_t *a2)
{
  xpc_object_t value;
  xpc_object_t v5;
  void **v6;
  xpc_object_t v7;
  void **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  void *v11;
  char v12;
  xpc_object_t object;
  __int128 v14;
  void *v15;
  void *__p;
  uint64_t v17;
  uint64_t v18;

  if (MEMORY[0x1C3B8CD78](*a2) != MEMORY[0x1E0C812F8])
    return;
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB538]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)this + 23) < 0)
    operator delete(*this);
  *(_OWORD *)this = v14;
  this[2] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v5 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB8D0]);
  object = v5;
  if (v5)
    xpc_retain(v5);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  v6 = this + 3;
  if (*((char *)this + 47) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  this[5] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB788]);
  object = v7;
  if (v7)
    xpc_retain(v7);
  else
    object = xpc_null_create();
  __p = 0;
  v17 = 0;
  v18 = 0;
  xpc::dyn_cast_or_default();
  v8 = this + 6;
  if (*((char *)this + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v14;
  this[8] = v15;
  HIBYTE(v15) = 0;
  LOBYTE(v14) = 0;
  xpc_release(object);
  v9 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB370]);
  object = v9;
  if (v9)
    xpc_retain(v9);
  else
    object = xpc_null_create();
  Timestamp::Timestamp((Timestamp *)&v14);
  Timestamp::asString((uint64_t)&v14, 0, 9, &__p);
  xpc::dyn_cast_or_default();
  this[9] = Timestamp::convert((uint64_t)&v11);
  if (v12 < 0)
  {
    operator delete(v11);
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_22;
LABEL_25:
    operator delete(__p);
    goto LABEL_22;
  }
  if (SHIBYTE(v18) < 0)
    goto LABEL_25;
LABEL_22:
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)&v14, *((_QWORD **)&v14 + 1));
  xpc_release(object);
  v10 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB010]);
  __p = v10;
  if (v10)
    xpc_retain(v10);
  else
    __p = xpc_null_create();
  *((_DWORD *)this + 20) = xpc::dyn_cast_or_default((xpc *)&__p, (const object *)7);
  xpc_release(__p);
}

void sub_1BF5BAE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t object, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t ResetInfo::reasonMatchesAtLeastOneApplicablePattern(int a1, uint64_t a2, __int128 **a3)
{
  __int128 *v3;
  int v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  std::string::size_type size;
  std::string *v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  char *v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  std::sub_match<const char *> *begin;
  std::vector<std::csub_match>::pointer end;
  unint64_t v25;
  std::vector<std::csub_match> *v26;
  _QWORD *p_end;
  _BYTE *p_end_cap;
  int v29;
  int v30;
  int v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 *v37;
  std::locale v39[2];
  _BYTE v40[48];
  std::string v41;
  _BYTE v42[32];
  _BYTE v43[48];
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  std::vector<std::csub_match> v51[2];
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = *a3;
  v37 = a3[1];
  if (*a3 != v37)
  {
    v4 = 0;
    while (1)
    {
      *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v42 = v5;
      *(_OWORD *)&v42[16] = v5;
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v42, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v6 = *v3;
        *(_QWORD *)&v42[16] = *((_QWORD *)v3 + 2);
        *(_OWORD *)v42 = v6;
      }
      *(_DWORD *)&v42[24] = *((_DWORD *)v3 + 6);
      if ((*(_DWORD *)&v42[24] & a1) != 0)
      {
        memset(&v41, 170, sizeof(v41));
        if ((v42[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)v42, *(std::string::size_type *)&v42[8]);
        else
          v41 = *(std::string *)v42;
        *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v40[16] = v8;
        *(_OWORD *)&v40[32] = v8;
        *(_OWORD *)&v39[0].__locale_ = v8;
        *(_OWORD *)v40 = v8;
        MEMORY[0x1C3B8C328](v39);
        v39[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v39, MEMORY[0x1E0DE4A90]);
        *(_QWORD *)v40 = std::locale::use_facet(v39, MEMORY[0x1E0DE4C08]);
        memset(&v40[8], 0, 40);
        size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v41;
        else
          v10 = (std::string *)v41.__r_.__value_.__r.__words[0];
        if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v41.__r_.__value_.__l.__size_;
        if ((char *)v10 + size != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v39, (char *)v10, (char *)v10 + size))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
        v11 = *(unsigned __int8 *)(a2 + 23);
        if ((v11 & 0x80u) == 0)
          v12 = (std::sub_match<const char *> *)a2;
        else
          v12 = *(std::sub_match<const char *> **)a2;
        if ((v11 & 0x80u) != 0)
          v11 = *(_QWORD *)(a2 + 8);
        v13 = (char *)v12 + v11;
        *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v49 = v14;
        v46 = 0xAAAAAAAAAAAAAA00;
        *(_QWORD *)&v43[40] = 0xAAAAAAAAAAAAAAAALL;
        v44 = 0;
        v45 = 0;
        v47 = 0;
        v48 = 0;
        LOBYTE(v49) = 0;
        BYTE8(v49) = 0;
        v50 = 0;
        memset(v43, 0, 41);
        v57 = v14;
        v54 = 0xAAAAAAAAAAAAAA00;
        v51[1].__end_cap_.__value_ = (std::sub_match<const char *> *)0xAAAAAAAAAAAAAAAALL;
        v52 = 0;
        v53 = 0;
        v55 = 0;
        v56 = 0;
        LOBYTE(v57) = 0;
        BYTE8(v57) = 0;
        v58 = 0;
        memset(v51, 0, 41);
        v15 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v39, v12, (std::sub_match<const char *> *)((char *)v12 + v11), v51, 4160);
        v16 = v52;
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3);
        v19 = *(_QWORD *)&v43[8];
        v18 = *(char **)v43;
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v43[8] - *(_QWORD *)v43) >> 3);
        if (v17 <= v20)
        {
          if (v17 < v20)
          {
            v19 = *(_QWORD *)v43 + 8 * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3);
            *(_QWORD *)&v43[8] = v19;
          }
        }
        else
        {
          std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append((std::vector<std::ssub_match> *)v43, v17 - v20);
          v19 = *(_QWORD *)&v43[8];
          v18 = *(char **)v43;
        }
        if ((char *)v19 == v18)
        {
          begin = v51[0].__begin_;
        }
        else
        {
          v21 = 0;
          v22 = 0;
          end = v51[0].__end_;
          begin = v51[0].__begin_;
          do
          {
            v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
            v26 = (std::vector<std::csub_match> *)&begin[v21];
            if (v25 <= v22)
              v26 = &v51[1];
            *(_QWORD *)&v18[v21 * 24] = (char *)v12 + (unint64_t)v26->__begin_ - v16;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3) <= v22)
              p_end = &v51[1].__end_;
            else
              p_end = &v51[0].__begin_[v21].second;
            *(_QWORD *)(*(_QWORD *)v43 + v21 * 24 + 8) = (char *)v12 + *p_end - v16;
            end = v51[0].__end_;
            begin = v51[0].__begin_;
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v51[0].__end_ - (char *)v51[0].__begin_) >> 3) <= v22)
              p_end_cap = &v51[1].__end_cap_;
            else
              p_end_cap = &v51[0].__begin_[v21].matched;
            v18 = *(char **)v43;
            *(_BYTE *)(*(_QWORD *)v43 + v21 * 24 + 16) = *p_end_cap;
            ++v22;
            ++v21;
          }
          while (v22 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v43[8] - (_QWORD)v18) >> 3));
        }
        *(_QWORD *)&v43[24] = v13;
        *(_QWORD *)&v43[32] = v13;
        v44 = (char *)v12 + v52 - v16;
        v45 = (char *)v12 + v53 - v16;
        LOBYTE(v46) = v54;
        v43[40] = 0;
        v47 = (char *)v12 + v55 - v16;
        v48 = (char *)v12 + v56 - v16;
        v29 = v57;
        LOBYTE(v49) = v57;
        v50 = v44;
        BYTE8(v49) = BYTE8(v57);
        if (begin)
        {
          v51[0].__end_ = begin;
          operator delete(begin);
          v29 = v49;
          v18 = *(char **)v43;
        }
        if (v29)
          v30 = v15 ^ 1;
        else
          v30 = 1;
        if (v18)
        {
          *(_QWORD *)&v43[8] = v18;
          operator delete(v18);
        }
        v31 = v15 & v30;
        if (v31)
          v7 = 2;
        else
          v7 = 0;
        v32 = *(std::__shared_weak_count **)&v40[32];
        if (!*(_QWORD *)&v40[32])
          goto LABEL_55;
        v33 = (unint64_t *)(*(_QWORD *)&v40[32] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
          std::locale::~locale(v39);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_62:
            operator delete(v41.__r_.__value_.__l.__data_);
            v4 |= v31;
            if ((v42[23] & 0x80000000) == 0)
              goto LABEL_58;
LABEL_57:
            operator delete(*(void **)v42);
            goto LABEL_58;
          }
        }
        else
        {
LABEL_55:
          std::locale::~locale(v39);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_62;
        }
        v4 |= v31;
        if ((v42[23] & 0x80000000) != 0)
          goto LABEL_57;
      }
      else
      {
        v7 = 3;
        if ((v42[23] & 0x80000000) != 0)
          goto LABEL_57;
      }
LABEL_58:
      if (v7 == 3 || !v7)
      {
        v3 += 2;
        if (v3 != v37)
          continue;
      }
      return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

void sub_1BF5BB468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF5BB474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,__int128 a52)
{
  uint64_t v52;
  NSObject *v55;
  void **p_p;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::locale::~locale(&a19);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v55 = GetOsLogContext()[1];
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      p_p = (void **)&__p;
      if (a32 < 0)
        p_p = __p;
      *(_DWORD *)(v52 - 224) = 136315138;
      *(_QWORD *)((char *)&a52 + 4) = p_p;
      _os_log_error_impl(&dword_1BF566000, v55, OS_LOG_TYPE_ERROR, "Exception with %s", (uint8_t *)(v52 - 224), 0xCu);
    }
    __cxa_rethrow();
  }
  if (a32 < 0)
    operator delete(__p);
  if (SHIBYTE(a36) < 0)
  {
    operator delete(a34);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1BF5BB58CLL);
}

void sub_1BF5BB550()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF5BB55CLL);
}

void sub_1BF5BB584(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1BF5BB58CLL);
  __clang_call_terminate(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&locale->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

void ___ZN9ResetInfo23readResetReasonPatternsEv_block_invoke()
{
  unsigned __int8 v0;
  NSObject *v1;
  uint8_t v2[16];

  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken != -1)
  {
    dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
    v1 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEBUG))
      goto LABEL_4;
LABEL_6:
    *(_WORD *)v2 = 0;
    _os_log_debug_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEBUG, "Default pattern masks will be used", v2, 2u);
    goto LABEL_4;
  }
  v1 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_DEBUG))
    goto LABEL_6;
LABEL_4:
  std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)&ResetInfo::sPatternMasks, (void **)kDefaultPatternMasks, (char *)qword_1ED70F738, (qword_1ED70F738 - kDefaultPatternMasks) >> 5);
}

void ***std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0)
            operator delete(*(v4 - 4));
          v4 -= 4;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>(void **a1, void **a2, char *a3, unint64_t a4)
{
  uint64_t v8;
  void **v9;
  void **v10;
  void *v11;
  void **v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  char *v19;
  char *v20;
  char v21;
  __int128 v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  char *v26;
  char *v27;
  char v28;
  __int128 v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  std::string *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 v40;
  std::string *v41;
  char *v42;

  v8 = (uint64_t)a1[2];
  v9 = (void **)*a1;
  if (a4 <= (v8 - (uint64_t)*a1) >> 5)
  {
    v12 = (void **)a1[1];
    v13 = ((char *)v12 - (char *)v9) >> 5;
    if (v13 >= a4)
    {
      if (a2 != (void **)a3)
      {
        v23 = 0;
        do
        {
          v26 = (char *)&v9[v23];
          v27 = (char *)&a2[v23];
          if (a2 != v9)
          {
            v28 = v27[23];
            if (v26[23] < 0)
            {
              if (v28 >= 0)
                v24 = (char *)&a2[v23];
              else
                v24 = (char *)a2[v23];
              if (v28 >= 0)
                v25 = v27[23];
              else
                v25 = (size_t)a2[v23 + 1];
              std::string::__assign_no_alias<false>(&v9[v23], v24, v25);
            }
            else if (v27[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v23], a2[v23], (size_t)a2[v23 + 1]);
            }
            else
            {
              v29 = *(_OWORD *)v27;
              *((_QWORD *)v26 + 2) = *((_QWORD *)v27 + 2);
              *(_OWORD *)v26 = v29;
            }
          }
          *((_DWORD *)v26 + 6) = *((_DWORD *)v27 + 6);
          v23 += 4;
        }
        while (&a2[v23] != (void **)a3);
        v12 = (void **)a1[1];
        v9 = (void **)((char *)v9 + v23 * 8);
      }
      while (v12 != v9)
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      a1[1] = v9;
    }
    else
    {
      v14 = (char *)&a2[4 * v13];
      if (v12 != v9)
      {
        v15 = 0;
        v16 = 32 * v13;
        do
        {
          v19 = (char *)&v9[v15 / 8];
          v20 = (char *)&a2[v15 / 8];
          if (a2 != v9)
          {
            v21 = v20[23];
            if (v19[23] < 0)
            {
              if (v21 >= 0)
                v17 = (char *)&a2[v15 / 8];
              else
                v17 = (char *)a2[v15 / 8];
              if (v21 >= 0)
                v18 = v20[23];
              else
                v18 = (size_t)a2[v15 / 8 + 1];
              std::string::__assign_no_alias<false>(&v9[v15 / 8], v17, v18);
            }
            else if (v20[23] < 0)
            {
              std::string::__assign_no_alias<true>(&v9[v15 / 8], a2[v15 / 8], (size_t)a2[v15 / 8 + 1]);
            }
            else
            {
              v22 = *(_OWORD *)v20;
              *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
              *(_OWORD *)v19 = v22;
            }
          }
          *((_DWORD *)v19 + 6) = *((_DWORD *)v20 + 6);
          v15 += 32;
        }
        while (v16 != v15);
        v9 = (void **)a1[1];
      }
      v38 = (char *)v9;
      if (v14 != a3)
      {
        v39 = 0;
        do
        {
          v41 = (std::string *)&v9[v39];
          v42 = &v14[v39 * 8];
          if (v14[v39 * 8 + 23] < 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v42, *((_QWORD *)v42 + 1));
          }
          else
          {
            v40 = *(_OWORD *)v42;
            v41->__r_.__value_.__r.__words[2] = *((_QWORD *)v42 + 2);
            *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v40;
          }
          LODWORD(v9[v39 + 3]) = *(_DWORD *)&v14[v39 * 8 + 24];
          v39 += 4;
        }
        while (&v14[v39 * 8] != a3);
        v38 = (char *)&v9[v39];
      }
      a1[1] = v38;
    }
  }
  else
  {
    if (v9)
    {
      v10 = (void **)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*((char *)v10 - 9) < 0)
            operator delete(*(v10 - 4));
          v10 -= 4;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      goto LABEL_70;
    v30 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v30 = a4;
    v31 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0;
    v32 = 0x7FFFFFFFFFFFFFFLL;
    if (!v31)
      v32 = v30;
    if (v32 >> 59)
LABEL_70:
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v33 = 32 * v32;
    v34 = (char *)operator new(32 * v32);
    *a1 = v34;
    a1[1] = v34;
    a1[2] = &v34[v33];
    if (a2 != (void **)a3)
    {
      v35 = 0;
      do
      {
        v36 = (std::string *)&v34[v35 * 8];
        v37 = (char *)&a2[v35];
        if (SHIBYTE(a2[v35 + 2]) < 0)
        {
          std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v37, *((_QWORD *)v37 + 1));
        }
        else
        {
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = *(_OWORD *)v37;
          v36->__r_.__value_.__r.__words[2] = *((_QWORD *)v37 + 2);
        }
        *(_DWORD *)&v34[v35 * 8 + 24] = a2[v35 + 3];
        v35 += 4;
      }
      while (&a2[v35] != (void **)a3);
      v34 += v35 * 8;
    }
    a1[1] = v34;
  }
}

void sub_1BF5BBB20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 32)
  {
    if (*(char *)(v2 + v3 - 9) < 0)
      operator delete(*(void **)(v2 + v3 - 32));
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void ctu::cf::update<char const*,std::string>(__CFDictionary *a1, const __CFString **a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v6;
  void *v7;
  BOOL v8;
  void *value;

  value = 0;
  ctu::cf::convert_copy((ctu::cf *)&value, a2, (const char *)0x8000100, a4, a5);
  v6 = value;
  value = 0;
  ctu::cf::convert_copy();
  v7 = value;
  if (v6)
    v8 = value == 0;
  else
    v8 = 1;
  if (v8)
  {
    if (!value)
      goto LABEL_8;
  }
  else
  {
    CFDictionarySetValue(a1, v6, value);
  }
  CFRelease(v7);
LABEL_8:
  if (v6)
    CFRelease(v6);
}

void sub_1BF5BBBFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5BBC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,unsigned int>(__CFDictionary *a1, const __CFString **a2, unsigned int a3, const __CFAllocator *a4, const __CFAllocator *a5)
{
  const void *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  BOOL v11;
  uint64_t v12;
  unint64_t valuePtr;

  valuePtr = 0;
  ctu::cf::convert_copy((ctu::cf *)&valuePtr, a2, (const char *)0x8000100, (uint64_t)a4, a5);
  v8 = (const void *)valuePtr;
  valuePtr = a3;
  v9 = CFNumberCreate(a4, kCFNumberLongLongType, &valuePtr);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  v12 = !v11;
  if (v11)
  {
    if (!v9)
      goto LABEL_11;
  }
  else
  {
    CFDictionarySetValue(a1, v8, v9);
  }
  CFRelease(v10);
LABEL_11:
  if (v8)
    CFRelease(v8);
  return v12;
}

void sub_1BF5BBCE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1BF5BBD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t ctu::cf::update<char const*,BOOL>(__CFDictionary *a1, const __CFString **a2, int a3, uint64_t a4, const __CFAllocator *a5)
{
  void *v7;
  void **v8;
  void *v9;
  BOOL v10;
  uint64_t v11;
  void *key;

  key = 0;
  ctu::cf::convert_copy((ctu::cf *)&key, a2, (const char *)0x8000100, a4, a5);
  v7 = key;
  v8 = (void **)MEMORY[0x1E0C9AE50];
  if (!a3)
    v8 = (void **)MEMORY[0x1E0C9AE40];
  v9 = *v8;
  key = *v8;
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 1;
  v11 = !v10;
  if (v10)
  {
    if (!v9)
      goto LABEL_13;
  }
  else
  {
    CFDictionarySetValue(a1, v7, v9);
  }
  CFRelease(v9);
LABEL_13:
  if (v7)
    CFRelease(v7);
  return v11;
}

void sub_1BF5BBDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a10);
  ctu::cf::ConvertToCFTypeRef::~ConvertToCFTypeRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(uint64_t a1, uint64_t a2, int a3)
{
  const std::locale *v6;
  uint64_t v7;
  char *v8;

  v6 = (const std::locale *)MEMORY[0x1C3B8C328]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v6, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_DWORD *)(a1 + 24) = a3;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a2;
  else
    v8 = *(char **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (&v8[v7] != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(a1, v8, &v8[v7]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1BF5BBE90(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5BBEAC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unsigned int v12;

  v6 = operator new(8uLL);
  *v6 = &unk_1E7914370;
  v7 = operator new(0x10uLL);
  v7[1] = v6;
  v8 = operator new(0x20uLL);
  *v8 = &unk_1E79143C8;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
    {
LABEL_6:
      if (!v12)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      if (v12 != 16)
      {
        if (v12 != 32)
LABEL_19:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
        return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, a3);
    }
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    v12 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v12 <= 0x3F)
      goto LABEL_6;
  }
  if (v12 == 64)
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
  if (v12 == 128)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v12 != 256)
    goto LABEL_19;
  return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)a3);
}

void sub_1BF5BC074(_Unwind_Exception *a1)
{
  void *v1;
  void (__cdecl ***v2)(std::__owns_one_state<char> *__hidden);

  operator delete(v1);
  operator delete(v2);
  (*(void (**)(void *))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5BC0B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(v2 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5BC100(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  char *v7;
  std::basic_regex<char> *v8;
  std::__owns_one_state<char> *v9;
  unsigned int marked_count;
  std::basic_regex<char> *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  std::__node<char> *v15;
  std::__node<char> *v16;
  std::__node<char> *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;
  std::__node<char> *v20;
  std::__owns_one_state<char> *v21;
  std::basic_regex<char> *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  std::basic_regex<char> *v26;
  std::__node<char> *v27;
  std::__owns_one_state<char> *v28;
  std::__node<char> *v29;

  end = a1->__end_;
  v7 = a2;
  while (1)
  {
    v8 = (std::basic_regex<char> *)v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v7, a3);
    if (v8 == (std::basic_regex<char> *)v7)
      break;
LABEL_2:
    if (v7 == (char *)v8)
      goto LABEL_6;
  }
  v9 = a1->__end_;
  marked_count = a1->__marked_count_;
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
  if (v8 != v11)
  {
    v7 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v11, (std::basic_regex<char> *)a3, v9, marked_count + 1, a1->__marked_count_ + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != (std::basic_regex<char> *)a2)
  {
    if (v8 != (std::basic_regex<char> *)a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (std::__node<char> *)operator new(0x10uLL);
  v13 = a1->__end_;
  first = v13->__first_;
  v12[1].__vftable = (std::__node<char>_vtbl *)first;
  v13->__first_ = v12;
  a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  if (v8 != (std::basic_regex<char> *)a3)
  {
LABEL_14:
    if (LOBYTE(v8->__traits_.__loc_.__locale_) != 124)
      return (char *)v8;
    v21 = a1->__end_;
    v22 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v23 = (char *)&v8->__traits_.__loc_.__locale_ + 1;
    while (1)
    {
      v8 = (std::basic_regex<char> *)v23;
      v23 = std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>((uint64_t)a1, v23, a3);
      if (v8 == (std::basic_regex<char> *)v23)
      {
        v24 = a1->__end_;
        v25 = a1->__marked_count_;
        v26 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, v8, (std::basic_regex<char> *)a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (std::__node<char> *)operator new(0x10uLL);
            v28 = a1->__end_;
            v29 = v28->__first_;
            v27[1].__vftable = (std::__node<char>_vtbl *)v29;
            v28->__first_ = v27;
            a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          }
          v15 = (std::__node<char> *)operator new(0x18uLL);
          v16 = v21->__first_;
          v15[1].__vftable = (std::__node<char>_vtbl *)end->__first_;
          v15[2].__vftable = (std::__node<char>_vtbl *)v16;
          v15->__vftable = (std::__node<char>_vtbl *)&unk_1E7914988;
          end->__first_ = v15;
          v21->__first_ = 0;
          v17 = (std::__node<char> *)operator new(0x10uLL);
          v18 = a1->__end_->__first_;
          v17[1].__vftable = (std::__node<char>_vtbl *)v18;
          v21->__first_ = v17;
          a1->__end_->__first_ = 0;
          v19 = (std::__node<char> *)operator new(0x10uLL);
          v20 = v21->__first_;
          v19->__vftable = (std::__node<char>_vtbl *)&unk_1E79149D0;
          v19[1].__vftable = (std::__node<char>_vtbl *)v20;
          a1->__end_->__first_ = v19;
          a1->__end_ = (std::__owns_one_state<char> *)v21->__first_;
          if (v8 == (std::basic_regex<char> *)a3)
            return a3;
          goto LABEL_14;
        }
        v23 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v26, (std::basic_regex<char> *)a3, v24, v25 + 1, a1->__marked_count_ + 1);
      }
      if (v23 == (char *)v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::basic_regex<char> *v3;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  std::__owns_one_state<char> *v11;
  int v12;
  char *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (std::basic_regex<char> *)a2;
  if (a2 == a3)
    return a2;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_1E79144C0;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v3 = (std::basic_regex<char> *)((char *)v3 + 1);
  }
  if (v3 != (std::basic_regex<char> *)a3)
  {
    while (v3 != (std::basic_regex<char> *)a3)
    {
      v10 = v3;
      v11 = *(std::__owns_one_state<char> **)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, (uint64_t)v10, a3);
      if (v10 != v13)
      {
        v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, v11, (v12 + 1), (*(_DWORD *)(a1 + 28) + 1));
        if (v10 != (_BYTE *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v14 = operator new(0x18uLL);
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *v14 = &unk_1E7914508;
      v14[1] = v17;
      *((_BYTE *)v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  uint64_t v9;
  std::basic_regex<char> *v10;
  std::basic_regex<char> *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  if (v8 == a3)
    return a3;
  while (LOBYTE(v8->__traits_.__loc_.__locale_) == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1), a3);
    if ((std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1) == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = operator new(0x18uLL);
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &unk_1E7914988;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = operator new(0x10uLL);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = operator new(0x10uLL);
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &unk_1E79149D0;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = v8 + 1;
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (char *)memchr(v11, 10, a3 - v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E7914988;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E79149D0;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = v22 + 1;
  }
  while (v11 != a3);
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  uint64_t v6;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  std::basic_regex<char> *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::basic_regex<char> *v21;
  std::basic_regex<char> *v22;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
    if (v8 == a3)
      v11 = v8;
    else
      v11 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3)
      return a3;
  }
  v12 = *(_QWORD *)(a1 + 56);
  do
  {
    v21 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v21)
      v22 = v21;
    else
      v22 = a3;
    if (v22 == v11)
    {
      v13 = operator new(0x10uLL);
      v14 = *(_QWORD *)(v12 + 8);
      v13[1] = v14;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v22);
    }
    v15 = operator new(0x18uLL);
    v16 = *(_QWORD *)(v12 + 8);
    v15[1] = *(_QWORD *)(v6 + 8);
    v15[2] = v16;
    *v15 = &unk_1E7914988;
    *(_QWORD *)(v6 + 8) = v15;
    *(_QWORD *)(v12 + 8) = 0;
    v17 = operator new(0x10uLL);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v17[1] = v18;
    *(_QWORD *)(v12 + 8) = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v19 = operator new(0x10uLL);
    v20 = *(_QWORD *)(v12 + 8);
    *v19 = &unk_1E79149D0;
    v19[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
    v12 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)(a1 + 56) = v12;
    if (v22 == a3)
      v11 = v22;
    else
      v11 = (std::basic_regex<char> *)((char *)&v22->__traits_.__loc_.__locale_ + 1);
  }
  while (v11 != a3);
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5BCA08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73D28DLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF73D28DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73D28DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73D28DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  operator delete(this);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  __int128 v8;
  char *v9;
  unsigned int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unsigned int marked_count;
  std::basic_regex<char> v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v17 = a2[1];
        if (v17 == 66)
        {
          v18 = (char *)operator new(0x30uLL);
          v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_1E7914550;
          *((_QWORD *)v18 + 1) = v20;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 1;
        }
        else
        {
          if (v17 != 98)
            return v3;
          v18 = (char *)operator new(0x30uLL);
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v18 = &unk_1E7914550;
          *((_QWORD *)v18 + 1) = v19;
          std::locale::locale((std::locale *)v18 + 2, (const std::locale *)a1);
          *(_OWORD *)(v18 + 24) = *(_OWORD *)(a1 + 8);
          v18[40] = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
LABEL_17:
    *v11 = v15 + 16;
    v11[1] = v14;
    *((_BYTE *)v11 + 16) = v12;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v11 = operator new(0x18uLL);
    v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(v13 + 8);
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v23.__loop_count_ = v21;
    *(_OWORD *)&v23.__start_.__cntrl_ = v21;
    *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v21;
    *(_OWORD *)&v23.__traits_.__col_ = v21;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
    v23.__flags_ = *(_DWORD *)(a1 + 24);
    v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
    marked_count = v23.__marked_count_;
    std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += marked_count;
    if (v9 == a3 || *v9 != 41)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v23.__loop_count_ = v8;
  *(_OWORD *)&v23.__start_.__cntrl_ = v8;
  *(_OWORD *)&v23.__traits_.__loc_.__locale_ = v8;
  *(_OWORD *)&v23.__traits_.__col_ = v8;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((uint64_t)&v23);
  v23.__flags_ = *(_DWORD *)(a1 + 24);
  v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v23, v3 + 3, a3);
  v10 = v23.__marked_count_;
  std::basic_regex<char,std::regex_traits<char>>::__push_lookahead((std::basic_regex<char> *)a1, &v23, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v10;
  if (v9 == a3 || *v9 != 41)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v23.__traits_.__loc_);
  return v9 + 1;
}

void sub_1BF5BCEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF5BCF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF5BCF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

void sub_1BF5BCF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a9);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::basic_regex<char> *v6;
  std::basic_regex<char> *result;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;
  unsigned int marked_count;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  std::basic_regex<char> *v15;
  std::basic_regex<char> *v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  switch(LOBYTE(a2->__traits_.__loc_.__locale_))
  {
    case '(':
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1) == a3)
        goto LABEL_26;
      if ((std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 2) != a3
        && BYTE1(a2->__traits_.__loc_.__locale_) == 63
        && BYTE2(a2->__traits_.__loc_.__locale_) == 58)
      {
        ++this->__open_count_;
        v6 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&a2->__traits_.__loc_.__locale_ + 3, a3);
        if (v6 != a3 && LOBYTE(v6->__traits_.__loc_.__locale_) == 41)
        {
          --this->__open_count_;
          return (std::basic_regex<char> *)((char *)&v6->__traits_.__loc_.__locale_ + 1);
        }
LABEL_26:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if ((this->__flags_ & 2) != 0)
      {
        marked_count = this->__marked_count_;
      }
      else
      {
        v11 = (std::__node<char> *)operator new(0x18uLL);
        marked_count = this->__marked_count_ + 1;
        this->__marked_count_ = marked_count;
        end = this->__end_;
        first = end->__first_;
        v11->__vftable = (std::__node<char>_vtbl *)&unk_1E7914820;
        v11[1].__vftable = (std::__node<char>_vtbl *)first;
        LODWORD(v11[2].__vftable) = marked_count;
        end->__first_ = v11;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      ++this->__open_count_;
      v15 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, (char *)&v3->__traits_.__loc_.__locale_ + 1, a3);
      if (v15 == a3)
        goto LABEL_26;
      v16 = v15;
      if (LOBYTE(v15->__traits_.__loc_.__locale_) != 41)
        goto LABEL_26;
      if ((this->__flags_ & 2) == 0)
      {
        v17 = (std::__node<char> *)operator new(0x18uLL);
        v18 = this->__end_;
        v19 = v18->__first_;
        v17->__vftable = (std::__node<char>_vtbl *)&unk_1E7914868;
        v17[1].__vftable = (std::__node<char>_vtbl *)v19;
        LODWORD(v17[2].__vftable) = marked_count;
        v18->__first_ = v17;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      }
      --this->__open_count_;
      result = (std::basic_regex<char> *)((char *)&v16->__traits_.__loc_.__locale_ + 1);
      break;
    case ')':
    case ',':
    case '-':
    case '/':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '@':
    case 'A':
    case 'B':
    case 'C':
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
    case 'U':
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
    case '*':
    case '+':
    case '?':
      goto LABEL_25;
    case '.':
      v8 = (std::__node<char> *)operator new(0x10uLL);
      v9 = this->__end_;
      v10 = v9->__first_;
      v8->__vftable = (std::__node<char>_vtbl *)&unk_1E79145E0;
      v8[1].__vftable = (std::__node<char>_vtbl *)v10;
      v9->__first_ = v8;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return (std::basic_regex<char> *)((char *)v3 + 1);
    case '[':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, (char *)a3);
    case '\\':
      return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    default:
      if (LOBYTE(a2->__traits_.__loc_.__locale_) == 123)
LABEL_25:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int v6;
  int locale_low;
  std::basic_regex<char> *v8;
  std::basic_regex<char> *v9;
  char *v10;
  size_t v11;
  char *v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  std::basic_regex<char> *v19;
  unsigned __int8 *v20;
  BOOL v21;
  std::basic_regex<char> *v22;
  BOOL v23;
  char *v24;
  size_t v25;
  std::basic_regex<char> *v26;
  int v27;
  int v28;
  std::basic_regex<char> *v29;
  int v30;
  std::basic_regex<char> *v31;
  _BYTE *v32;

  if (this == a3)
    return this;
  v6 = *(_DWORD *)(a1 + 24) & 0x1F0;
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low <= 62)
  {
    if (locale_low == 42)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (v6)
        v21 = 1;
      else
        v21 = v9 == a3;
      if (!v21 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 0;
        goto LABEL_36;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 0;
      goto LABEL_45;
    }
    v8 = this;
    if (locale_low == 43)
    {
      v9 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v10 = (char *)&this->__traits_.__loc_.__locale_ + 2;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        v11 = 1;
LABEL_36:
        std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 0);
        return (std::basic_regex<char> *)v10;
      }
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
      v25 = 1;
      goto LABEL_45;
    }
    return v8;
  }
  if (locale_low == 63)
  {
    v22 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
    if (v6)
      v23 = 1;
    else
      v23 = v22 == a3;
    if (v23 || LOBYTE(v22->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 1);
      return v22;
    }
    else
    {
      v24 = (char *)&this->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, 0, 1uLL, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v24;
    }
  }
  else
  {
    v8 = this;
    if (locale_low != 123)
      return v8;
    v13 = (char *)&this->__traits_.__loc_.__locale_ + 1;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_72;
    v14 = *v13;
    if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      goto LABEL_72;
    v15 = v14 - 48;
    v16 = (char *)&this->__traits_.__loc_.__locale_ + 2;
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_21:
      v16 = (char *)a3;
    }
    else
    {
      while (1)
      {
        v17 = *v16;
        if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
          break;
        if (v15 >= 214748364)
          goto LABEL_72;
        v15 = v17 + 10 * v15 - 48;
        if (++v16 == (char *)a3)
          goto LABEL_21;
      }
    }
    if (v16 == v13)
      goto LABEL_72;
    if (v16 == (char *)a3)
      goto LABEL_73;
    v18 = *v16;
    if (v18 != 44)
    {
      if (v18 == 125)
      {
        v19 = (std::basic_regex<char> *)(v16 + 1);
        if (v6 || v19 == a3 || LOBYTE(v19->__traits_.__loc_.__locale_) != 63)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 1);
          return v19;
        }
        else
        {
          v20 = (unsigned __int8 *)(v16 + 2);
          std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v15, a4, __mexp_begin, __mexp_end, 0);
          return (std::basic_regex<char> *)v20;
        }
      }
LABEL_72:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    }
    v26 = (std::basic_regex<char> *)(v16 + 1);
    if (v16 + 1 == (char *)a3)
      goto LABEL_72;
    v27 = LOBYTE(v26->__traits_.__loc_.__locale_);
    if (v27 == 125)
    {
      v9 = (std::basic_regex<char> *)(v16 + 2);
      if (!v6 && v9 != a3 && LOBYTE(v9->__traits_.__loc_.__locale_) == 63)
      {
        v11 = v15;
        v10 = v16 + 3;
        __mexp_begin = __mexp_begin;
        __mexp_end = __mexp_end;
        goto LABEL_36;
      }
      v25 = v15;
      __mexp_begin = __mexp_begin;
      __mexp_end = __mexp_end;
LABEL_45:
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v25, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
      return v9;
    }
    if ((v27 & 0xF8) != 0x30 && (v27 & 0xFE) != 0x38)
      goto LABEL_73;
    v28 = v27 - 48;
    v29 = (std::basic_regex<char> *)(v16 + 2);
    if (v29 == a3)
    {
LABEL_61:
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v30 = LOBYTE(v29->__traits_.__loc_.__locale_);
        if ((v30 & 0xF8) != 0x30 && (v30 & 0xFE) != 0x38)
          break;
        if (v28 >= 214748364)
          goto LABEL_72;
        v28 = v30 + 10 * v28 - 48;
        v29 = (std::basic_regex<char> *)((char *)v29 + 1);
        if (v29 == a3)
          goto LABEL_61;
      }
    }
    if (v29 == v26 || v29 == a3 || LOBYTE(v29->__traits_.__loc_.__locale_) != 125)
LABEL_73:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    if (v28 < v15)
      goto LABEL_72;
    v31 = (std::basic_regex<char> *)((char *)&v29->__traits_.__loc_.__locale_ + 1);
    if (v6 || v31 == a3 || LOBYTE(v31->__traits_.__loc_.__locale_) != 63)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 1);
      return v31;
    }
    else
    {
      v32 = (char *)&v29->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v15, v28, a4, __mexp_begin, __mexp_end, 0);
      return (std::basic_regex<char> *)v32;
    }
  }
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1C3B8C328]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1BF5BD604(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  char *v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = (char *)operator new(0x58uLL);
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &unk_1E7914598;
  *((_QWORD *)v8 + 1) = first;
  std::locale::locale((std::locale *)v8 + 2, &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *((_QWORD *)v8 + 7) = a2->__start_.__ptr_;
  *((_QWORD *)v8 + 8) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *((_QWORD *)v8 + 9) = a2->__end_;
  *((_DWORD *)v8 + 20) = a4;
  v8[84] = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5BD708(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914550;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914550;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void (__cdecl **v6)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7914598;
  v2 = (std::locale *)(a1 + 2);
  v3 = (std::__shared_weak_count *)a1[8];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1];
  if (v6)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v6 + 1))(v6);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914598;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  operator delete(a1);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::vector<std::csub_match>::size_type v5;
  uint64_t v6;
  const char *v7;
  BOOL v8;
  char v9;
  std::sub_match<const char *> *begin;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  std::sub_match<const char *> *v16;
  uint64_t v17;
  std::vector<std::csub_match> __p;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  v22 = 0xAAAAAAAAAAAAAA00;
  v24 = v4;
  v21 = 0;
  v23 = 0uLL;
  LOBYTE(v24) = 0;
  BYTE8(v24) = 0;
  v25 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)&v19 = *(_QWORD *)(a2 + 24);
  *((_QWORD *)&v19 + 1) = v19;
  LOBYTE(v20) = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v5, (std::vector<std::csub_match>::const_reference)&v19);
  *((_QWORD *)&v20 + 1) = v6;
  v21 = v6;
  LOBYTE(v22) = 0;
  v23 = v19;
  LOBYTE(v24) = v20;
  v25 = v6;
  BYTE8(v24) = 1;
  v7 = *(const char **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(const char **)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v7, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &begin[v15];
    v17 = v14 + 24 * (v13 + v12);
    *(std::pair<const char *, const char *> *)v17 = v16->std::pair<const char *, const char *>;
    *(_BYTE *)(v17 + 16) = v16->matched;
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1BF5BDD9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  void *v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void *v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  _BYTE v45[96];
  std::vector<std::csub_match>::value_type __x;
  char *v47;
  char *v48;
  unint64_t v49;

  v47 = 0;
  v48 = 0;
  v49 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
    __x.first = a3;
    *(_DWORD *)v45 = 0;
    memset(&v45[8], 0, 85);
    v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
    if (*(_QWORD *)&v45[56])
    {
      *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
      operator delete(*(void **)&v45[56]);
    }
    if (*(_QWORD *)&v45[32])
    {
      *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
      operator delete(*(void **)&v45[32]);
    }
    v13 = v48;
    *((_DWORD *)v48 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v13 - 64), v15 - v16, &__x);
      v13 = v48;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v13 - 40), v18 - v19);
      v13 = v48;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = (const char *)*((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v36 = *a4;
          *(_QWORD *)v36 = a2;
          *(_QWORD *)(v36 + 8) = v23;
          *(_BYTE *)(v36 + 16) = 1;
          v37 = *((_QWORD *)v13 - 8);
          v38 = *((_QWORD *)v13 - 7) - v37;
          if (v38)
          {
            v39 = 0xAAAAAAAAAAAAAAABLL * (v38 >> 3);
            v40 = (_BYTE *)(v37 + 16);
            v41 = 1;
            do
            {
              v42 = v36 + 24 * v41;
              *(_OWORD *)v42 = *((_OWORD *)v40 - 1);
              v43 = *v40;
              v40 += 24;
              *(_BYTE *)(v42 + 16) = v43;
            }
            while (v39 > v41++);
          }
          v6 = 1;
          v21 = v47;
          if (!v47)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v48;
          v25 = (void *)*((_QWORD *)v48 - 5);
          if (v25)
          {
            *((_QWORD *)v48 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v48 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
          *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v45[64] = v27;
          *(_OWORD *)&v45[80] = v27;
          *(_OWORD *)&v45[32] = v27;
          *(_OWORD *)&v45[48] = v27;
          *(_OWORD *)v45 = v27;
          *(_OWORD *)&v45[16] = v27;
          std::__state<char>::__state((uint64_t)v45, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v45[80] + 24))(*(_QWORD *)&v45[80], 0, v45);
          v28 = v48;
          if ((unint64_t)v48 >= v49)
          {
            v48 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v47, (uint64_t)v45);
            if (*(_QWORD *)&v45[56])
            {
              *(_QWORD *)&v45[64] = *(_QWORD *)&v45[56];
              operator delete(*(void **)&v45[56]);
            }
          }
          else
          {
            v29 = *(_OWORD *)&v45[16];
            *(_OWORD *)v48 = *(_OWORD *)v45;
            *((_OWORD *)v28 + 1) = v29;
            *((_QWORD *)v28 + 4) = 0;
            *((_QWORD *)v28 + 5) = 0;
            *((_QWORD *)v28 + 6) = 0;
            *((_QWORD *)v28 + 7) = 0;
            *((_OWORD *)v28 + 2) = *(_OWORD *)&v45[32];
            *((_QWORD *)v28 + 6) = *(_QWORD *)&v45[48];
            memset(&v45[32], 0, 24);
            *((_QWORD *)v28 + 8) = 0;
            *((_QWORD *)v28 + 9) = 0;
            *(_OWORD *)(v28 + 56) = *(_OWORD *)&v45[56];
            *((_QWORD *)v28 + 9) = *(_QWORD *)&v45[72];
            memset(&v45[56], 0, 24);
            v30 = *(_QWORD *)&v45[80];
            *(_QWORD *)(v28 + 85) = *(_QWORD *)&v45[85];
            *((_QWORD *)v28 + 10) = v30;
            v48 = v28 + 96;
          }
          if (*(_QWORD *)&v45[32])
          {
            *(_QWORD *)&v45[40] = *(_QWORD *)&v45[32];
            operator delete(*(void **)&v45[32]);
          }
LABEL_16:
          v21 = v47;
          v13 = v48;
          ++v20;
          if (v47 != v48)
            continue;
          v6 = 0;
          if (v47)
          {
LABEL_37:
            v31 = v48;
            v32 = v21;
            if (v48 != v21)
            {
              do
              {
                v33 = (void *)*((_QWORD *)v31 - 5);
                if (v33)
                {
                  *((_QWORD *)v31 - 4) = v33;
                  operator delete(v33);
                }
                v34 = (void *)*((_QWORD *)v31 - 8);
                if (v34)
                {
                  *((_QWORD *)v31 - 7) = v34;
                  operator delete(v34);
                }
                v31 -= 96;
              }
              while (v31 != v21);
              v32 = v47;
            }
            v48 = v21;
            operator delete(v32);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  return v6;
}

void sub_1BF5BE1C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1BF5BE1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::__state<char>::~__state((uint64_t *)va);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v3 - 112));
  _Unwind_Resume(a1);
}

void sub_1BF5BE224(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1BF5BE238(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  uint64_t v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::sub_match<const char *> *v14;
  std::vector<std::csub_match>::pointer end;
  unint64_t v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) < __n)
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v11 = v10;
    v12 = (std::sub_match<const char *> *)operator new(24 * v10);
    this->__begin_ = v12;
    this->__end_ = v12;
    this->__end_cap_.__value_ = &v12[v11];
    v13 = 24 * __n;
    v14 = &v12[__n];
    do
    {
      v12->std::pair<const char *, const char *> = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v12->matched = *(_QWORD *)&__u->matched;
      ++v12;
      v13 -= 24;
    }
    while (v13);
    goto LABEL_25;
  }
  end = this->__end_;
  v16 = end - begin;
  if (v16 >= __n)
    v17 = __n;
  else
    v17 = end - begin;
  if (v17)
  {
    v18 = begin;
    do
    {
      *v18++ = *__u;
      --v17;
    }
    while (v17);
  }
  if (__n <= v16)
  {
    v14 = &begin[__n];
LABEL_25:
    this->__end_ = v14;
    return;
  }
  v19 = &end[__n - v16];
  v20 = 24 * __n - 24 * v16;
  do
  {
    v21 = __u->std::pair<const char *, const char *>;
    *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
    end->std::pair<const char *, const char *> = v21;
    ++end;
    v20 -= 24;
  }
  while (v20);
  this->__end_ = v19;
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5BE45C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5BE4A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **std::vector<std::__state<char>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  std::sub_match<const char *> *value;
  std::vector<std::csub_match>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<const char *> *v13;
  std::vector<std::csub_match>::size_type v14;
  std::pair<const char *, const char *> v15;
  std::sub_match<const char *> *v16;
  std::vector<std::csub_match>::size_type v17;
  std::sub_match<const char *> *v18;
  std::pair<const char *, const char *> *v19;
  std::pair<const char *, const char *> v20;
  std::vector<std::csub_match>::pointer begin;
  std::pair<const char *, const char *> v22;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      v14 = 24 * __n;
      do
      {
        v15 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v15;
        ++end;
        v14 -= 24;
      }
      while (v14);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = (std::sub_match<const char *> *)&v12[24 * v8];
    v17 = 24 * __n;
    v18 = &v16[__n];
    v19 = v16;
    do
    {
      v20 = __x->std::pair<const char *, const char *>;
      v19[1].first = *(const char **)&__x->matched;
      *v19 = v20;
      v19 = (std::pair<const char *, const char *> *)((char *)v19 + 24);
      v17 -= 24;
    }
    while (v17);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<const char *, const char *>;
        *(_QWORD *)&v16[-1].matched = *(_QWORD *)&end[-1].matched;
        v16[-1].std::pair<const char *, const char *> = v22;
        --v16;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v16;
    this->__end_ = v18;
    this->__end_cap_.__value_ = (std::sub_match<const char *> *)&v12[24 * v11];
    if (end)
      operator delete(end);
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  std::pair<unsigned long, const char *> *value;
  std::pair<unsigned long, const char *> *end;
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::vector<std::pair<unsigned long, const char *>>::size_type v12;
  std::pair<unsigned long, const char *> *v13;
  size_t v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      v12 = 16 * __n;
      bzero(this->__end_, 16 * __n);
      end = (std::pair<unsigned long, const char *> *)((char *)end + v12);
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((v7 + __n) >> 60)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)value - (char *)begin;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = (std::pair<unsigned long, const char *> *)&v11[16 * v7];
    v14 = __n;
    v15 = (std::pair<unsigned long, const char *> *)&v11[16 * v10];
    bzero(v13, v14 * 16);
    v16 = &v13[v14];
    if (end != begin)
    {
      do
      {
        v13[-1] = end[-1];
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
      operator delete(end);
  }
}

uint64_t std::__state<char>::__state(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    memcpy(v14, v12, v13 & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)(a1 + 64) = &v14[v13 & 0xFFFFFFFFFFFFFFF0];
  }
  v15 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v15;
  return a1;
}

void sub_1BF5BEB18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  int v8;
  unsigned int v9;
  int v11;
  unsigned __int8 *v12;

  if (a2 == a3)
    return a2;
  v4 = a2;
  if (*a2 == 92)
  {
    v6 = a2 + 1;
    if (a2 + 1 == a3)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    v8 = *v6;
    v9 = v8 - 48;
    if (v8 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
      return a2 + 2;
    }
    if ((v8 - 49) <= 8)
    {
      v4 = a2 + 2;
      if (a2 + 2 == a3)
      {
        v4 = a3;
      }
      else
      {
        while (1)
        {
          v11 = *v4;
          if ((v11 - 48) > 9)
            break;
          if (v9 >= 0x19999999)
            goto LABEL_24;
          ++v4;
          v9 = v11 + 10 * v9 - 48;
          if (v4 == a3)
          {
            v4 = a3;
            break;
          }
        }
        if (!v9)
LABEL_24:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
      }
      if (v9 > this->__marked_count_)
        goto LABEL_24;
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v9);
      if (v4 != v6)
        return v4;
    }
    v4 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 1, a3);
    if (v6 == v4)
    {
      v12 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(this, a2 + 1, a3, 0);
      if (v6 == v12)
        return a2;
      else
        return v12;
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  char *v7;
  void *v8;
  char *v9;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = v5 == 94 ? a2 + 2 : a2 + 1;
    v8 = operator new(0xB0uLL);
    std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == a3)
      goto LABEL_20;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v7 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 93);
      ++v7;
    }
    if (v7 == a3)
      goto LABEL_20;
    do
    {
      v9 = v7;
      v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v7, a3, (uint64_t)v8);
    }
    while (v9 != v7);
    if (v9 == a3)
      goto LABEL_20;
    if (*v9 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, 45);
      ++v9;
    }
    if (v9 == a3 || *v9 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v9 + 1;
  }
  return a2;
}

void sub_1BF5BEDEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5BEE38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *result;

  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '{':
    case '|':
    case '}':
      return this;
    default:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
      result = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      break;
  }
  return result;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5BEF7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  _DWORD *v5;
  _DWORD *v6;
  int v7;

  v3 = a2;
  if (a2 != a3)
  {
    switch(*a2)
    {
      case 'D':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_7;
      case 'S':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_11;
      case 'W':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
        goto LABEL_9;
      case 'd':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_7:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x400;
        goto LABEL_12;
      case 's':
        v5 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v5, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_11:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v5;
        *(_QWORD *)(a1 + 56) = v5;
        v7 = v5[40] | 0x4000;
LABEL_12:
        v5[40] = v7;
        goto LABEL_13;
      case 'w':
        v6 = operator new(0xB0uLL);
        std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100]((uint64_t)v6, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_9:
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v6;
        *(_QWORD *)(a1 + 56) = v6;
        v6[40] |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v6, 95);
LABEL_13:
        ++v3;
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_1BF5BF160(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5BF174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5BF188(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5BF19C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5BF1B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5BF1C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  unsigned __int8 *result;
  unsigned int v8;
  std::basic_regex<char>::value_type v10;
  int v11;
  int v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  std::basic_regex<char>::value_type v17;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  v6 = v5;
  switch((char)v5)
  {
    case '0':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 0);
        return v4 + 1;
      }
    case 'c':
      if (v4 + 1 == a3 || (char)v4[1] < 65)
        goto LABEL_85;
      v8 = v4[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_85;
      v10 = v8 & 0x1F;
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v10;
        *((_BYTE *)a4 + 1) = 0;
        return v4 + 2;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v10);
        return v4 + 2;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return v4 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return v4 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return v4 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return v4 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return v4 + 1;
      }
    case 'u':
      if (v4 + 1 != a3)
      {
        v11 = v4[1];
        if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
        {
          v4 += 2;
          if (v4 != a3)
          {
            v12 = *v4;
            if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38 || (v12 | 0x20u) - 97 < 6)
              goto LABEL_42;
          }
        }
      }
      goto LABEL_85;
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return v4 + 1;
      }
      else
      {
        v6 = 11;
LABEL_68:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return v4 + 1;
      }
    case 'x':
LABEL_42:
      if (v4 + 1 == a3)
        goto LABEL_85;
      v13 = v4[1];
      v14 = -48;
      if ((v13 & 0xF8) == 0x30 || (v13 & 0xFE) == 0x38)
        goto LABEL_47;
      v13 |= 0x20u;
      if ((v13 - 97) >= 6u)
        goto LABEL_85;
      v14 = -87;
LABEL_47:
      if (v4 + 2 == a3)
        goto LABEL_85;
      v15 = v4[2];
      v16 = -48;
      if ((v15 & 0xF8) != 0x30 && (v15 & 0xFE) != 0x38)
      {
        v15 |= 0x20u;
        if ((v15 - 97) >= 6u)
LABEL_85:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
        v16 = -87;
      }
      v17 = v15 + 16 * (v13 + v14) + v16;
      if (!a4)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
        v4 += 3;
        return v4;
      }
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v17;
      *((_BYTE *)a4 + 1) = 0;
      result = v4 + 3;
      break;
    default:
      if ((char)v5 == 95 || ((char)v5 & 0x80000000) == 0 && (a1->__traits_.__ct_->__tab_[v5] & 0x500) != 0)
        goto LABEL_85;
      if (!a4)
        goto LABEL_68;
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v5;
      *((_BYTE *)a4 + 1) = 0;
      return v4 + 1;
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  char *v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E7914628;
    *((_QWORD *)v8 + 1) = first;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E7914670;
    *((_QWORD *)v8 + 1) = v10;
    std::locale::locale((std::locale *)v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    v8[40] = v2;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1E79146B8;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LOBYTE(v5[2].__vftable) = v2;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1BF5BF7AC(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5BF824(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  std::__node<char> *v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = (std::__node<char> *)operator new(0x18uLL);
  end = this->__end_;
  v7 = end->__first_;
  v5->__vftable = (std::__node<char>_vtbl *)&unk_1E7914790;
  v5[1].__vftable = (std::__node<char>_vtbl *)v7;
  LODWORD(v5[2].__vftable) = __i;
  end->__first_ = v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914628;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914628;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914670;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914670;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914700;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914700;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914748;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E7914748;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_1BF5C05C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  std::vector<std::string>::~vector[abi:ne180100]((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale *v1;

  v1 = std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);
  operator delete(v1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v2;
  char *current;
  char *last;
  char v6;
  char v7;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  char *p_second;
  std::vector<std::pair<std::string, std::string>>::pointer v14;
  char v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  char v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  _BOOL4 negate;
  void *v27;
  unsigned __int8 v28;
  std::vector<char>::pointer v29;
  unint64_t v30;
  int v31;
  std::regex_traits<char>::char_class_type v32;
  char v33;
  int v34;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v36;
  char *v37;
  std::vector<std::pair<std::string, std::string>>::pointer v38;
  std::vector<std::pair<std::string, std::string>>::pointer v39;
  unsigned int v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  std::vector<std::string>::pointer v71;
  uint64_t v72;
  int64_t v73;
  unint64_t v74;
  unint64_t v75;
  const void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  BOOL v80;
  std::string *v81;
  void *v82;
  int v83;
  std::string *v84;
  uint64_t v85;
  const void *v86;
  void *v87;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v88;
  std::vector<std::string>::pointer v89;
  int v90;
  int64_t v91;
  unint64_t v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  std::string *v98;
  void *v99;
  int v100;
  void **v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  std::string::size_type size;
  int v107;
  std::vector<std::string>::pointer v108;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v111;
  std::regex_traits<char>::char_class_type neg_mask;
  int v113;
  std::string::size_type v114;
  std::regex_traits<char>::char_class_type v115;
  int v116;
  std::__node<char> *first;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  std::string::value_type *v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char v126;
  BOOL v127;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v128;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v129;
  std::__bracket_expression<char, std::regex_traits<char>>::__state *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136[3];
  __int16 __src;
  void *__p[3];

  v2 = a2;
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v25 = 0;
    negate = this->__negate_;
    goto LABEL_245;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_34;
  v6 = *current;
  LOBYTE(__src) = *current;
  v7 = current[1];
  HIBYTE(__src) = v7;
  if (this->__icase_)
  {
    LOBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(__src) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>(&__src, (uint64_t)&this->__traits_, __p, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    v27 = __p[1];
    operator delete(__p[0]);
    if (v27)
      goto LABEL_8;
LABEL_34:
    negate = 0;
    v25 = 1;
    v28 = *v2->__current_;
    LOBYTE(__src) = v28;
    if (!this->__icase_)
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!HIBYTE(__p[2]))
    goto LABEL_34;
LABEL_8:
  begin = this->__digraphs_.__begin_;
  v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    p_second = &begin->second;
    while (__src != *(p_second - 1) || HIBYTE(__src) != *p_second)
    {
      p_second += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
    goto LABEL_167;
  }
  memset(v136, 170, sizeof(v136));
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x2AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAA00AAAALL;
  LOWORD(__p[0]) = __src;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 2);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v14 = this->__ranges_.__begin_;
  v15 = HIBYTE(v136[2]);
  v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (SHIBYTE(v136[2]) >= 0)
    v19 = v136;
  else
    v19 = (void **)v136[0];
  v20 = HIBYTE(v136[2]);
  if (SHIBYTE(v136[2]) >= 0)
    v21 = (void *)HIBYTE(v136[2]);
  else
    v21 = v136[1];
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if ((unint64_t)v21 >= v61)
      v62 = v61;
    else
      v62 = (size_t)v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > (unint64_t)v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= (unint64_t)v21)
      v67 = (size_t)v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if ((unint64_t)v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  p_traits = &this->__traits_;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136[0]);
  negate = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_209;
  v133 = negate;
  v88 = v2;
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)p_traits, __p, __p);
  v89 = this->__equivalences_.__begin_;
  v90 = SHIBYTE(__p[2]);
  v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v94 = (void *)HIBYTE(__p[2]);
  else
    v94 = __p[1];
  if (SHIBYTE(__p[2]) < 0)
  {
    v135 = SHIBYTE(__p[2]);
    v103 = 0;
    v104 = __p[0];
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      size = HIBYTE(v89->__r_.__value_.__r.__words[2]);
      v107 = (char)size;
      if ((size & 0x80u) != 0)
        size = v89->__r_.__value_.__l.__size_;
      if (v94 == (void *)size)
      {
        v108 = v107 >= 0 ? v89 : (std::vector<std::string>::pointer)v89->__r_.__value_.__r.__words[0];
        if (!memcmp(v104, v108, (size_t)v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      ++v89;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!HIBYTE(__p[2]))
  {
    v114 = HIBYTE(v89->__r_.__value_.__r.__words[2]);
    if ((v114 & 0x80u) != 0)
      v114 = v89->__r_.__value_.__l.__size_;
    if (v114 != HIBYTE(__p[2]))
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = &v89[1].__r_.__value_.__s.__data_[8];
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = v122[15];
        v125 = *(_QWORD *)v122;
        v122 += 24;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == (void *)v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    negate = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = &v89[v95];
    v99 = (void *)HIBYTE(v98->__r_.__value_.__r.__words[2]);
    v100 = (char)v99;
    if ((char)v99 < 0)
      v99 = (void *)v98->__r_.__value_.__l.__size_;
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = (std::string *)v98->__r_.__value_.__r.__words[0];
      v101 = __p;
      v102 = HIBYTE(__p[2]);
      while (*(unsigned __int8 *)v101 == v98->__r_.__value_.__s.__data_[0])
      {
        v101 = (void **)((char *)v101 + 1);
        v98 = (std::string *)((char *)v98 + 1);
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p[0]);
  negate = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v111 = tab[__src];
      if (((v111 & mask) != 0 || __src == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((tab[HIBYTE(__src)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      neg_mask = this->__neg_mask_;
      if ((neg_mask & v111) != 0 || __src == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_226:
        v113 = negate;
LABEL_228:
        negate = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(__src)] & neg_mask) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = *v2->__current_;
  LOBYTE(__src) = v28;
  if (this->__icase_)
  {
LABEL_35:
    v28 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = this->__chars_.__begin_;
  v30 = this->__chars_.__end_ - v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    negate = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = this->__neg_mask_;
  if (v32 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v28 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v28] & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    end = this->__neg_chars_.__end_;
    v36 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v28, end - this->__neg_chars_.__begin_);
    v37 = v36 ? v36 : end;
    if ((v33 & 1) == 0 && v37 == end)
      goto LABEL_244;
  }
  v38 = this->__ranges_.__begin_;
  v39 = this->__ranges_.__end_;
  if (v38 == v39)
    goto LABEL_128;
  memset(v136, 170, sizeof(v136));
  if (!this->__collate_)
  {
    v40 = 1;
    HIBYTE(v136[2]) = 1;
    LOWORD(v136[0]) = v28;
    v41 = (char *)v39 - (char *)v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  __p[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  __p[2] = (void *)0x1AAAAAAAAAAAAAALL;
  __p[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  LOWORD(__p[0]) = v28;
  (*(void (**)(void **__return_ptr, const std::collate<char> *, void **, char *))(*(_QWORD *)this->__traits_.__col_
                                                                                           + 32))(v136, this->__traits_.__col_, __p, (char *)__p + 1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v38 = this->__ranges_.__begin_;
  v40 = HIBYTE(v136[2]);
  v41 = (char *)this->__ranges_.__end_ - (char *)v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = negate;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = v136;
  else
    v44 = (void **)v136[0];
  if ((v40 & 0x80u) == 0)
    v45 = (void *)v40;
  else
    v45 = v136[1];
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)&v38->second.__r_.__value_.__r.__words[2] + 7;
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if ((unint64_t)v45 >= v51)
      v52 = v51;
    else
      v52 = (size_t)v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= (unint64_t)v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= (unint64_t)v45)
        v57 = (size_t)v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          negate = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if ((unint64_t)v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  negate = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136[0]);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v28] & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  memset(__p, 170, sizeof(__p));
  std::regex_traits<char>::__transform_primary<char *>(&__src, (uint64_t)&this->__traits_, (_BYTE *)&__src + 1, __p);
  v71 = this->__equivalences_.__begin_;
  v72 = HIBYTE(__p[2]);
  v73 = (char *)this->__equivalences_.__end_ - (char *)v71;
  if (!v73)
  {
    if ((HIBYTE(__p[2]) & 0x80) != 0)
      operator delete(__p[0]);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = negate;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p[0];
  v77 = __p[1];
  if (SHIBYTE(__p[2]) >= 0)
    v78 = (void *)HIBYTE(__p[2]);
  else
    v78 = __p[1];
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = &v71[v74];
    v82 = (void *)HIBYTE(v81->__r_.__value_.__r.__words[2]);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = (void *)v81->__r_.__value_.__l.__size_;
    if (v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p[0]);
        v2 = v130;
        negate = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = &v71[v74];
    else
      v84 = (std::string *)v81->__r_.__value_.__r.__words[0];
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        negate = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)__p + v85) == v84->__r_.__value_.__s.__data_[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, (size_t)v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p[0]);
  v2 = v130;
  negate = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (negate == this->__negate_)
  {
    first = 0;
    v118 = -993;
  }
  else
  {
    v2->__current_ += v25;
    first = this->__first_;
    v118 = -995;
  }
  v2->__do_ = v118;
  v2->__node_ = first;
}

void sub_1BF5C1240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void std::regex_traits<char>::__lookup_collatename<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  std::string v20;
  _BYTE __dst[24];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __dst[23] = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 += v5;
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = operator new(v10 + 1);
  *(_QWORD *)&__dst[8] = v5;
  *(_QWORD *)&__dst[16] = v11 | 0x8000000000000000;
  *(_QWORD *)__dst = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *v9 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v12 = *(char **)__dst;
    if (!*(_QWORD *)&__dst[8])
      goto LABEL_18;
  }
  else
  {
    if (!__dst[23])
      return;
    v12 = __dst;
  }
  std::__get_collation_name(&v20, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  v13 = v20.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v20.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_16;
  if ((__dst[23] & 0x80000000) != 0)
  {
    v15 = *(_QWORD *)&__dst[8];
    v12 = *(char **)__dst;
    if (*(_QWORD *)&__dst[8] < 3uLL)
      goto LABEL_24;
LABEL_18:
    operator delete(v12);
    return;
  }
  v15 = __dst[23];
  if (__dst[23] < 3u)
  {
    v12 = __dst;
LABEL_24:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v20, *(_QWORD *)(a2 + 16), v12, &v12[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v20;
    if (*(char *)(a4 + 23) < 0)
    {
      v17 = *(_QWORD *)(a4 + 8);
      if (v17 == 1 || v17 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if (__dst[23] >= 0)
            v18 = __dst;
          else
            v18 = *(_BYTE **)__dst;
          if (__dst[23] >= 0)
            v19 = __dst[23];
          else
            v19 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>((void **)a4, v18, v19);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v16 = *(unsigned __int8 *)(a4 + 23);
      if (v16 == 1 || v16 == 12)
      {
        if (__dst != (_BYTE *)a4)
        {
          if ((__dst[23] & 0x80000000) != 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__dst, *(size_t *)&__dst[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__dst;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__dst[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
LABEL_16:
    if ((__dst[23] & 0x80000000) == 0)
      return;
    v12 = *(char **)__dst;
    goto LABEL_18;
  }
}

void sub_1BF5C1650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  size_t v5;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void *__dst[3];

  v5 = a3 - __src;
  memset(__dst, 170, sizeof(__dst));
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    HIBYTE(__dst[2]) = (_BYTE)a3 - (_BYTE)__src;
    v9 = __dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(v9, __src, v5);
    v9 = (void **)((char *)v9 + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  v9 = (void **)operator new(v10 + 1);
  __dst[1] = (void *)v5;
  __dst[2] = (void *)(v11 | 0x8000000000000000);
  __dst[0] = v9;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)v9 = 0;
  memset(a4, 170, 24);
  v12 = (char *)HIBYTE(__dst[2]);
  if (SHIBYTE(__dst[2]) >= 0)
    v13 = __dst;
  else
    v13 = (void **)__dst[0];
  if (SHIBYTE(__dst[2]) < 0)
    v12 = (char *)__dst[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, &v12[(_QWORD)v13]);
  v14 = *((unsigned __int8 *)a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = a4[1];
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = a4;
    else
      v16 = (_BYTE *)*a4;
    v16[11] = v16[3];
    if (SHIBYTE(__dst[2]) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
    goto LABEL_25;
  }
  *(_BYTE *)*a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(__dst[2]) < 0)
LABEL_26:
    operator delete(__dst[0]);
}

void sub_1BF5C1824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5C1878(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v4;
  int64_t v5;
  int v6;
  char *v7;
  char *v8;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  _BYTE *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  int v24;
  char *v25;
  uint64_t v26;
  int v27;
  int v28;
  std::basic_regex<char>::value_type *v29;
  char *v30;
  _BYTE *v31;
  int v32;
  void **v33;
  _BYTE *v34;
  char *v35;
  void *v37[2];
  uint64_t v38;
  void *v39[2];
  uint64_t v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  int64_t v44;

  v4 = a2;
  v5 = a2 - a3;
  if (a2 == a3)
    return a2;
  v6 = *a2;
  v7 = a2;
  if (v6 == 93)
    return v7;
  v8 = (char *)a4;
  v11 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v42 = 0;
  if (a2 + 1 == a3 || v6 != 91)
  {
LABEL_36:
    v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_39;
  }
  v12 = a2[1];
  if (v12 != 46)
  {
    if (v12 == 58)
    {
      v14 = (uint64_t)(a2 + 2);
      if (a3 - (v4 + 2) < 2)
        goto LABEL_91;
      v15 = 0;
      v16 = v5 + 4;
      v17 = (unsigned __int8 *)v4;
      v18 = v16;
      if (v4[2] == 58)
        goto LABEL_15;
      do
      {
        do
        {
          if (!v18)
            goto LABEL_91;
          v17 = (unsigned __int8 *)&v4[++v15];
          v18 = v16 + v15;
        }
        while (v4[v15 + 2] != 58);
LABEL_15:
        ;
      }
      while (v17[3] != 93);
      v19 = &v4[v15 + 2];
      if (v19 == a3)
LABEL_91:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      v20 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, v14, v19, *(_DWORD *)(a1 + 24) & 1);
      if (!v20)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
      v13 = 0;
      *((_DWORD *)v8 + 40) |= v20;
      v8 = &v4[v15 + 4];
      v7 = v4;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
    if (v12 == 61)
    {
      v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
      v13 = 0;
      v7 = v4;
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_71;
      goto LABEL_70;
    }
    v11 = 0;
    goto LABEL_36;
  }
  v21 = a2 + 2;
  if (a3 - (v4 + 2) < 2)
    goto LABEL_92;
  v22 = (unsigned __int8 *)(v4 + 2);
  v23 = (unsigned __int8 *)(v4 + 3);
  if (*v21 == 46)
    goto LABEL_24;
  do
  {
    do
    {
      if (a3 - 4 == v4)
        goto LABEL_92;
      ++v4;
      v22 = v23;
      v24 = *v23++;
    }
    while (v24 != 46);
LABEL_24:
    ;
  }
  while (*v23 != 93);
  if (v22 == (unsigned __int8 *)a3)
LABEL_92:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)v21, v4 + 2, (uint64_t)&v43);
  if (SHIBYTE(v42) < 0)
    operator delete(__p[0]);
  v42 = v44;
  *(_OWORD *)__p = v43;
  v25 = (char *)HIBYTE(v44);
  v11 = SHIBYTE(v44);
  v26 = *((_QWORD *)&v43 + 1);
  if (v44 < 0)
    v25 = (char *)__p[1];
  if ((unint64_t)(v25 - 1) >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  v4 = (char *)(v22 + 2);
  v27 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v44 >= 0)
    v26 = HIBYTE(v44);
  if (v26)
  {
    if (v4 == a3)
      goto LABEL_52;
    goto LABEL_51;
  }
LABEL_39:
  if ((v27 | 0x40) != 0x40)
  {
    LOBYTE(v28) = *v4;
LABEL_44:
    if (v11 < 0)
    {
      v31 = __p[0];
      __p[1] = (void *)1;
      *(_BYTE *)__p[0] = v28;
      v31[1] = 0;
      if (++v4 == a3)
        goto LABEL_52;
    }
    else
    {
      HIBYTE(v42) = 1;
      LOWORD(__p[0]) = v28;
      if (++v4 == a3)
        goto LABEL_52;
    }
    goto LABEL_51;
  }
  v28 = *v4;
  if (v28 != 92)
    goto LABEL_44;
  v29 = v4 + 1;
  if (v27)
    v30 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v29, a3, (uint64_t *)__p);
  else
    v30 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v29, (unsigned __int8 *)a3, (uint64_t)__p, (uint64_t)v8);
  v4 = v30;
  if (v30 == a3)
  {
LABEL_52:
    if (SHIBYTE(v42) < 0)
    {
      if (!__p[1])
        goto LABEL_69;
      if (__p[1] != (void *)1)
      {
        v33 = (void **)__p[0];
LABEL_68:
        std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)v8, *(char *)v33, *((char *)v33 + 1));
LABEL_69:
        v13 = 1;
        v7 = v4;
        if ((SHIBYTE(v42) & 0x80000000) == 0)
          goto LABEL_71;
        goto LABEL_70;
      }
      v33 = (void **)__p[0];
    }
    else
    {
      if (!HIBYTE(v42))
        goto LABEL_69;
      v33 = __p;
      if (HIBYTE(v42) != 1)
        goto LABEL_68;
    }
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v8, *(char *)v33);
    goto LABEL_69;
  }
LABEL_51:
  v32 = *v4;
  if (v32 == 93)
    goto LABEL_52;
  v34 = v4 + 1;
  if (v4 + 1 == a3 || v32 != 45 || *v34 == 93)
    goto LABEL_52;
  v43 = 0uLL;
  v44 = 0;
  v7 = v4 + 2;
  if (v4 + 2 == a3 || *v34 != 91 || *v7 != 46)
  {
    if ((v27 | 0x40) == 0x40)
    {
      LODWORD(v34) = *v34;
      if ((_DWORD)v34 == 92)
      {
        if (v27)
          v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4 + 2, a3, (uint64_t *)&v43);
        else
          v35 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)v4 + 2, (unsigned __int8 *)a3, (uint64_t)&v43, (uint64_t)v8);
        goto LABEL_81;
      }
    }
    else
    {
      LOBYTE(v34) = *v34;
    }
    HIBYTE(v44) = 1;
    LOWORD(v43) = v34;
    goto LABEL_82;
  }
  v35 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v4 + 3, a3, (uint64_t)&v43);
LABEL_81:
  v7 = v35;
LABEL_82:
  *(_OWORD *)v39 = *(_OWORD *)__p;
  v40 = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  *(_OWORD *)v37 = v43;
  v38 = v44;
  v43 = 0uLL;
  v44 = 0;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100]((uint64_t)v8, (char *)v39, (uint64_t)v37);
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
    if ((SHIBYTE(v40) & 0x80000000) == 0)
    {
LABEL_84:
      if ((SHIBYTE(v44) & 0x80000000) == 0)
        goto LABEL_85;
LABEL_89:
      operator delete((void *)v43);
      v13 = 1;
      if (SHIBYTE(v42) < 0)
        goto LABEL_70;
      goto LABEL_71;
    }
  }
  else if ((SHIBYTE(v40) & 0x80000000) == 0)
  {
    goto LABEL_84;
  }
  operator delete(v39[0]);
  if (SHIBYTE(v44) < 0)
    goto LABEL_89;
LABEL_85:
  v13 = 1;
  if (SHIBYTE(v42) < 0)
LABEL_70:
    operator delete(__p[0]);
LABEL_71:
  if ((v13 & 1) != 0)
    return v7;
  return v8;
}

void sub_1BF5C1DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 49) < 0)
  {
    operator delete(*(void **)(v28 - 72));
    if (a28 < 0)
    {
LABEL_5:
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  void **v12;
  unint64_t v13;
  __int128 v14;
  void *v15;
  void **v16;
  void **v17;
  void *__p[3];
  void *v20[3];

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_39;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  v9 = a2 + 1;
  if (*a2 != 61)
    goto LABEL_5;
LABEL_4:
  if (*v9 != 93)
  {
LABEL_5:
    while (a2 != v6)
    {
      ++v7;
      --v6;
      v8 = v9;
      v10 = *v9++;
      if (v10 == 61)
        goto LABEL_4;
    }
LABEL_39:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v8 == a3)
    goto LABEL_39;
  memset(v20, 170, sizeof(v20));
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v7, (uint64_t)v20);
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
  {
    v11 = (char *)HIBYTE(v20[2]);
    if (HIBYTE(v20[2]))
    {
      memset(__p, 170, sizeof(__p));
      v12 = v20;
      goto LABEL_14;
    }
LABEL_40:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = (char *)v20[1];
  if (!v20[1])
    goto LABEL_40;
  memset(__p, 170, sizeof(__p));
  v12 = (void **)v20[0];
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, (uint64_t)v12, &v11[(_QWORD)v12], (_BYTE **)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    if (__p[1])
    {
LABEL_16:
      v13 = *(_QWORD *)(a4 + 144);
      if (v13 >= *(_QWORD *)(a4 + 152))
      {
        *(_QWORD *)(a4 + 144) = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a4 + 136), (uint64_t)__p);
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      else
      {
        if ((HIBYTE(__p[2]) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 144), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(void **)(v13 + 16) = __p[2];
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a4 + 144) = v13 + 24;
        *(_QWORD *)(a4 + 144) = v13 + 24;
        if (SHIBYTE(__p[2]) < 0)
          goto LABEL_37;
      }
      goto LABEL_33;
    }
  }
  else if (HIBYTE(__p[2]))
  {
    goto LABEL_16;
  }
  v15 = (void *)HIBYTE(v20[2]);
  if (SHIBYTE(v20[2]) < 0)
    v15 = v20[1];
  if (v15 == (void *)2)
  {
    v17 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v17 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](a4, *(char *)v17, *((char *)v17 + 1));
  }
  else
  {
    if (v15 != (void *)1)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
    v16 = v20;
    if (SHIBYTE(v20[2]) < 0)
      v16 = (void **)v20[0];
    std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a4, *(char *)v16);
  }
  if (SHIBYTE(__p[2]) < 0)
  {
LABEL_37:
    operator delete(__p[0]);
    if (SHIBYTE(v20[2]) < 0)
      goto LABEL_38;
    return v7 + 2;
  }
LABEL_33:
  if ((SHIBYTE(v20[2]) & 0x80000000) == 0)
    return v7 + 2;
LABEL_38:
  operator delete(v20[0]);
  return v7 + 2;
}

void sub_1BF5C20B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v20 + 144) = v21;
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  v8 = a2 + 1;
  if (*a2 != 46)
    goto LABEL_5;
LABEL_4:
  if (*v8 != 93)
  {
LABEL_5:
    while (a2 != v5)
    {
      ++v6;
      --v5;
      v7 = v8;
      v9 = *v8++;
      if (v9 == 46)
        goto LABEL_4;
    }
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  }
  if (v7 == a3)
    goto LABEL_15;
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, (uint64_t)a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *result;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  switch(*a2)
  {
    case 'D':
      *(_DWORD *)(a5 + 164) |= 0x400u;
      result = a2 + 1;
      break;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      goto LABEL_8;
    case 'S':
      *(_DWORD *)(a5 + 164) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    case 'b':
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      result = a2 + 1;
      break;
    case 'd':
      *(_DWORD *)(a5 + 160) |= 0x400u;
      result = a2 + 1;
      break;
    case 's':
      *(_DWORD *)(a5 + 160) |= 0x4000u;
      result = a2 + 1;
      break;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
      result = a2 + 1;
      break;
    default:
      if (*a2)
      {
LABEL_8:
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, a2, a3, (uint64_t *)a4);
      }
      else
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        result = a2 + 1;
      }
      break;
  }
  return result;
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3, uint64_t *a4)
{
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type *v8;
  std::basic_regex<char>::value_type v9;
  int v10;
  std::basic_regex<char>::value_type v11;

  if (a2 == a3)
LABEL_70:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  switch(*a2)
  {
    case '"':
    case '/':
    case '\\':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v5;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
        return a2 + 1;
      }
    case 'a':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 7;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 7);
        return a2 + 1;
      }
    case 'b':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 8;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 8);
        return a2 + 1;
      }
    case 'f':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 12;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 12);
        return a2 + 1;
      }
    case 'n':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 10;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 10);
        return a2 + 1;
      }
    case 'r':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 13;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 13);
        return a2 + 1;
      }
    case 't':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 9;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 9);
        return a2 + 1;
      }
    case 'v':
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 11;
        return a2 + 1;
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, 11);
        return a2 + 1;
      }
    default:
      if ((v5 & 0xF8) != 0x30)
        goto LABEL_70;
      v7 = *a2 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_42:
        if (a4)
          goto LABEL_43;
LABEL_69:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
        return v8;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_42;
      v7 = *v8 + 8 * v7 - 48;
      if (a2 + 2 == a3)
      {
        v8 = a3;
        if (a4)
          goto LABEL_43;
        goto LABEL_69;
      }
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      if (!a4)
        goto LABEL_69;
LABEL_43:
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v7;
      *((_BYTE *)a4 + 1) = 0;
      return v8;
  }
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_1BF5C2CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF5C2CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
LABEL_67:
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5C30F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  char *v9;
  char *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  std::string v27;
  char __s[24];

  v5 = (unint64_t)&a3[-a2];
  memset(__s, 170, sizeof(__s));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 <= 0x16)
  {
    __s[23] = (_BYTE)a3 - a2;
    v9 = __s;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v16 = v5 | 7;
  v17 = v16 + 1;
  v9 = (char *)operator new(v16 + 1);
  *(_QWORD *)&__s[8] = v5;
  *(_QWORD *)&__s[16] = v17 | 0x8000000000000000;
  *(_QWORD *)__s = v9;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)&v9[-a2] < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
    do
    {
LABEL_15:
      v18 = *v11++;
      *v10++ = v18;
    }
    while (v11 != a3);
    goto LABEL_16;
  }
  v10 = &v9[v5 & 0xFFFFFFFFFFFFFFE0];
  v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a2 + 16);
  v13 = v9 + 16;
  v14 = v5 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *(v13 - 1) = *(v12 - 1);
    *v13 = v15;
    v12 += 2;
    v13 += 2;
    v14 -= 32;
  }
  while (v14);
  if (v5 != (v5 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  *v10 = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    if (!*(_QWORD *)&__s[8])
      goto LABEL_29;
  }
  else
  {
    if (!__s[23])
      return;
    v19 = __s;
  }
  std::__get_collation_name(&v27, v19);
  *(_OWORD *)a4 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
  v20 = v27.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21)
  {
LABEL_23:
    if ((__s[23] & 0x80000000) == 0)
      return;
    v19 = *(char **)__s;
LABEL_29:
    operator delete(v19);
    return;
  }
  if (__s[23] < 0)
  {
    v19 = *(char **)__s;
    v22 = *(_QWORD *)&__s[8];
    if (*(_QWORD *)&__s[8] >= 3uLL)
      goto LABEL_29;
    goto LABEL_31;
  }
  v22 = __s[23];
  if (__s[23] < 3u)
  {
    v19 = __s;
LABEL_31:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v27, *(_QWORD *)(a1 + 16), v19, &v19[v22]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v27;
    if (*(char *)(a4 + 23) < 0)
    {
      v24 = *(_QWORD *)(a4 + 8);
      if (v24 == 1 || v24 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] >= 0)
            v25 = __s;
          else
            v25 = *(char **)__s;
          if (__s[23] >= 0)
            v26 = __s[23];
          else
            v26 = *(_QWORD *)&__s[8];
          std::string::__assign_no_alias<false>((void **)a4, v25, v26);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(a4 + 23);
      if (v23 == 1 || v23 == 12)
      {
        if (__s != (char *)a4)
        {
          if (__s[23] < 0)
          {
            std::string::__assign_no_alias<true>((_QWORD *)a4, *(void **)__s, *(size_t *)&__s[8]);
          }
          else
          {
            *(_OWORD *)a4 = *(_OWORD *)__s;
            *(_QWORD *)(a4 + 16) = *(_QWORD *)&__s[16];
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
    goto LABEL_23;
  }
}

void sub_1BF5C33C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _BYTE **a4@<X8>)
{
  unint64_t v5;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  _BYTE *v21;
  int v22;
  _BYTE *v23;
  void *__p[3];

  v5 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v5;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  memset(a4, 170, 24);
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v19[(_QWORD)v20]);
  v21 = (_BYTE *)*((unsigned __int8 *)a4 + 23);
  v22 = (char)v21;
  if ((char)v21 < 0)
    v21 = a4[1];
  if (v21 == (_BYTE *)1)
    goto LABEL_32;
  if (v21 != (_BYTE *)12)
  {
    if (v22 < 0)
    {
      **a4 = 0;
      a4[1] = 0;
      if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p[0]);
      return;
    }
    *(_BYTE *)a4 = 0;
    *((_BYTE *)a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = a4;
  else
    v23 = *a4;
  v23[11] = v23[3];
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_35;
}

void sub_1BF5C35FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  void **v14;
  std::string *v16;
  std::string *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (std::string *)&v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 1;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    v11 = v10 + 1;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    v10[-1].__r_.__value_.__r.__words[2] = *((_QWORD *)v4 - 1);
    *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v12;
    --v10;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = (char *)v10;
  a1[1] = (char *)v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1BF5C37D8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5C3888(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, BOOL a4)
{
  unint64_t v4;
  _OWORD *v9;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  void **v20;
  void **v21;
  uint64_t classname;
  void *__p[3];

  v4 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v4 > 0x16)
  {
    v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v16 = v4 | 7;
    v17 = v16 + 1;
    v9 = operator new(v16 + 1);
    __p[1] = (void *)v4;
    __p[2] = (void *)(v17 | 0x8000000000000000);
    __p[0] = v9;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = v9;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v9 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)v9 - a2 < 0x20)
  {
    v10 = v9;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)v9 + (v4 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = v9 + 1;
    v14 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v19 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v20, &v19[(_QWORD)v20]);
  if (SHIBYTE(__p[2]) >= 0)
    v21 = __p;
  else
    v21 = (void **)__p[0];
  classname = std::__get_classname((const char *)v21, a4);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1BF5C3A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *v7;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  void **v18;
  void *__p[3];

  v3 = (unint64_t)&a3[-a2];
  memset(__p, 170, sizeof(__p));
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    v7 = operator new(v14 + 1);
    __p[1] = (void *)v3;
    __p[2] = (void *)(v15 | 0x8000000000000000);
    __p[0] = v7;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = v7;
    goto LABEL_16;
  }
  HIBYTE(__p[2]) = (_BYTE)a3 - a2;
  v7 = __p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)v7 - a2 < 0x20)
  {
    v8 = v7;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)v7 + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = v7 + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = (char *)HIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (SHIBYTE(__p[2]) < 0)
    v17 = (char *)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v17[(_QWORD)v18]);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1BF5C4034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5C4088(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string,std::string>>::__push_back_slow_path<std::pair<std::string,std::string>>(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  void *v17;
  std::__node<char> *v18;
  std::__node<char> *v19;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = operator new(0x10uLL);
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new(0x38uLL);
  LODWORD(first) = this->__loop_count_;
  v18 = __s->__first_;
  *(_QWORD *)v17 = &unk_1E79148B0;
  *((_QWORD *)v17 + 1) = v18;
  *((_QWORD *)v17 + 2) = v14;
  *((_QWORD *)v17 + 3) = __min;
  *((_QWORD *)v17 + 4) = __max;
  *((_DWORD *)v17 + 10) = (_DWORD)first;
  *((_DWORD *)v17 + 11) = v9;
  *((_DWORD *)v17 + 12) = v8;
  *((_BYTE *)v17 + 52) = __greedy;
  __s->__first_ = 0;
  v19 = (std::__node<char> *)operator new(0x10uLL);
  v19->__vftable = (std::__node<char>_vtbl *)&unk_1E7914940;
  v19[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v19;
  this->__end_ = (std::__owns_one_state<char> *)*((_QWORD *)v17 + 2);
  __s->__first_ = (std::__node<char> *)v17;
  this->__loop_count_ = (_DWORD)first + 1;
}

void sub_1BF5C449C(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);

  std::__loop<char>::~__loop(v1);
  _Unwind_Resume(a1);
}

void sub_1BF5C44B0(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  uint64_t v2;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5C4520(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5C456C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7914910;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7914910;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__loop<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t std::__loop<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7914910;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7914910;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7914910;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *__p = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E7914910;
  v2 = __p[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = __p[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  operator delete(__p);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8C10C](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BF5C4B3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  int v8;
  std::basic_regex<char> *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  int v16;
  std::basic_regex<char> *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)a2, a3);
  if ((char *)a2 != v6 || (char *)a2 == a3 || (char *)(a2 + 1) == a3 || *(_BYTE *)a2 != 92)
    return v6;
  v8 = *(unsigned __int8 *)(a2 + 1);
  if (v8 == 40)
  {
    v9 = (std::basic_regex<char> *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new(0x18uLL);
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *v10 = &unk_1E7914820;
      v10[1] = v13;
      *((_DWORD *)v10 + 4) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (std::basic_regex<char> *)a3)
        goto LABEL_23;
      v14 = v9;
      v15 = *(std::__owns_one_state<char> **)(a1 + 56);
      v16 = *(_DWORD *)(a1 + 28);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, v14, a3);
      if (v14 == v17)
        break;
      v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v17, (std::basic_regex<char> *)a3, v15, (v16 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    while (v14 != v9);
    if ((char *)&v14->__traits_.__loc_.__locale_ + 1 == a3
      || LOBYTE(v14->__traits_.__loc_.__locale_) != 92
      || BYTE1(v14->__traits_.__loc_.__locale_) != 41)
    {
LABEL_23:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    v6 = (char *)v14 + 2 * (BYTE1(v14->__traits_.__loc_.__locale_) == 41);
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v18 = operator new(0x18uLL);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = *(_QWORD *)(v19 + 8);
      *v18 = &unk_1E7914868;
      v18[1] = v20;
      *((_DWORD *)v18 + 4) = v11;
      *(_QWORD *)(v19 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v6;
    }
    return v6;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v6;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref((std::basic_regex<char> *)a1, v8 - 48);
  return (char *)(a2 + 2);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::__owns_one_state<char> *a4, size_t __mexp_begin, size_t __mexp_end)
{
  int locale_low;
  unsigned __int8 *v9;
  std::basic_regex<char> *v10;
  int v11;
  int v12;
  std::basic_regex<char> *v13;
  int v14;
  std::basic_regex<char> *v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;

  if (this == a3)
    return this;
  locale_low = LOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low == 42)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  v9 = (unsigned __int8 *)a3;
  if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3
    || locale_low != 92
    || BYTE1(this->__traits_.__loc_.__locale_) != 123)
  {
    return this;
  }
  v10 = (std::basic_regex<char> *)((char *)this + 2 * (BYTE1(this->__traits_.__loc_.__locale_) == 123));
  if (v10 == a3)
    goto LABEL_45;
  v11 = LOBYTE(v10->__traits_.__loc_.__locale_);
  if ((v11 & 0xF8) != 0x30 && (v11 & 0xFE) != 0x38)
    goto LABEL_45;
  v12 = v11 - 48;
  v13 = (std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1);
  if ((std::basic_regex<char> *)((char *)&v10->__traits_.__loc_.__locale_ + 1) == a3)
  {
LABEL_15:
    v13 = a3;
  }
  else
  {
    while (1)
    {
      v14 = LOBYTE(v13->__traits_.__loc_.__locale_);
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
        break;
      if (v12 >= 214748364)
        goto LABEL_45;
      v12 = v14 + 10 * v12 - 48;
      v13 = (std::basic_regex<char> *)((char *)v13 + 1);
      if (v13 == a3)
        goto LABEL_15;
    }
  }
  if (v13 == v10)
    goto LABEL_45;
  if (v13 == a3)
LABEL_46:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 1);
  v16 = LOBYTE(v13->__traits_.__loc_.__locale_);
  if (v16 != 44)
  {
    if (v15 != a3 && v16 == 92 && LOBYTE(v15->__traits_.__loc_.__locale_) == 125)
    {
      v19 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v12, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v19;
    }
    goto LABEL_46;
  }
  if (v15 == a3)
    goto LABEL_46;
  v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
  if ((v17 & 0xF8) == 0x30 || (v17 & 0xFE) == 0x38)
  {
    v18 = v17 - 48;
    v15 = (std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2);
    if ((std::basic_regex<char> *)((char *)&v13->__traits_.__loc_.__locale_ + 2) == a3)
    {
LABEL_37:
      v15 = a3;
      goto LABEL_40;
    }
    while (1)
    {
      v17 = LOBYTE(v15->__traits_.__loc_.__locale_);
      if ((v17 & 0xF8) != 0x30 && (v17 & 0xFE) != 0x38)
        break;
      if (v18 >= 214748364)
        goto LABEL_45;
      v18 = v17 + 10 * v18 - 48;
      v15 = (std::basic_regex<char> *)((char *)v15 + 1);
      if (v15 == a3)
        goto LABEL_37;
    }
  }
  else
  {
    v18 = -1;
  }
  if (v15 == a3)
  {
    v20 = (unsigned __int8 *)v15;
    v15 = a3;
    v9 = v20;
  }
  else if ((std::basic_regex<char> *)((char *)&v15->__traits_.__loc_.__locale_ + 1) == a3 || v17 != 92)
  {
    v9 = (unsigned __int8 *)v15;
  }
  else
  {
    v9 = (unsigned __int8 *)v15 + 2 * (BYTE1(v15->__traits_.__loc_.__locale_) == 125);
  }
LABEL_40:
  if (v15 == (std::basic_regex<char> *)v9)
    goto LABEL_46;
  if (v18 != -1)
  {
    if (v18 >= v12)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, v18, a4, __mexp_begin, __mexp_end, 1);
      return (std::basic_regex<char> *)v9;
    }
LABEL_45:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, v12, 0xFFFFFFFFFFFFFFFFLL, a4, __mexp_begin, __mexp_end, 1);
  return (std::basic_regex<char> *)v9;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v5;
  char *v6;
  int v9;
  std::__node<char> *v10;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v6 = a2 + 1;
  v5 = *a2;
  if (a2 + 1 == a3 && v5 == 36)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  if ((v5 - 46) > 0x2E || ((1 << (v5 - 46)) & 0x600000000001) == 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v5);
    return a2 + 1;
  }
  else if (v6 != a3
         && v5 == 92
         && (v9 = *v6, (v9 - 36) <= 0x3A)
         && ((1 << (v9 - 36)) & 0x580000000000441) != 0)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
    return a2 + 2;
  }
  else
  {
    if (*a2 != 46)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
    v10 = (std::__node<char> *)operator new(0x10uLL);
    end = this->__end_;
    first = end->__first_;
    v10->__vftable = (std::__node<char>_vtbl *)&unk_1E7914A18;
    v10[1].__vftable = (std::__node<char>_vtbl *)first;
    end->__first_ = v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***__p)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = __p[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  operator delete(__p);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  std::basic_regex<char> *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int locale_low;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::basic_regex<char> *v22;
  std::basic_regex<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  if (v8 == a2)
  {
    v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char>::value_type *)a2, (std::basic_regex<char>::value_type *)a3);
    if (v8 == a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        v8 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, (char *)a2, (char *)a3);
      }
      else
      {
        v9 = operator new(0x10uLL);
        v10 = *(_QWORD *)(a1 + 56);
        v11 = *(_QWORD *)(v10 + 8);
        *v9 = &unk_1E7914A18;
        v9[1] = v11;
        *(_QWORD *)(v10 + 8) = v9;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      }
    }
  }
  if (v8 != a2 || v8 == a3)
  {
LABEL_23:
    if (v8 != a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    return a2;
  }
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v19 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v18 = operator new(0x18uLL);
        v19 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v19;
        v20 = *(_QWORD *)(a1 + 56);
        v21 = *(_QWORD *)(v20 + 8);
        *v18 = &unk_1E7914820;
        v18[1] = v21;
        *((_DWORD *)v18 + 4) = v19;
        *(_QWORD *)(v20 + 8) = v18;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v22 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v22 == a3 || (v23 = v22, LOBYTE(v22->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v24 = operator new(0x18uLL);
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *v24 = &unk_1E7914868;
        v24[1] = v26;
        *((_DWORD *)v24 + 4) = v19;
        *(_QWORD *)(v25 + 8) = v24;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v8 = (std::basic_regex<char> *)((char *)&v23->__traits_.__loc_.__locale_ + 1);
      goto LABEL_23;
    case '^':
      v13 = operator new(0x18uLL);
      v14 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v15 = *(_QWORD *)(a1 + 56);
LABEL_14:
      v17 = *(_QWORD *)(v15 + 8);
      *v13 = v16 + 16;
      v13[1] = v17;
      *((_BYTE *)v13 + 16) = v14;
      *(_QWORD *)(v15 + 8) = v13;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v8 = (std::basic_regex<char> *)((char *)&a2->__traits_.__loc_.__locale_ + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return a2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  if (this == a3)
    return this;
  switch(LOBYTE(this->__traits_.__loc_.__locale_))
  {
    case '$':
    case '(':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
      return this;
    case ')':
      if (a1->__open_count_)
        return this;
      break;
    default:
      break;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
  return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
}

std::basic_regex<char>::value_type *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char>::value_type *a2, std::basic_regex<char>::value_type *a3)
{
  std::basic_regex<char>::value_type *v3;
  std::basic_regex<char>::value_type *v4;
  std::basic_regex<char>::value_type v5;
  std::basic_regex<char>::value_type *result;
  _BOOL4 v7;
  uint64_t v8;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  switch(*v4)
  {
    case '$':
    case '(':
    case ')':
    case '*':
    case '+':
    case '.':
    case '?':
    case '[':
    case '\\':
    case '^':
    case '{':
    case '|':
    case '}':
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v5);
      v3 += 2;
      return v3;
    default:
      if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
      {
        result = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
      }
      else
      {
        v7 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v5);
        v8 = 2;
        if (!v7)
          v8 = 0;
        result = &v3[v8];
      }
      break;
  }
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  int v12;
  const char *i;
  std::vector<std::csub_match>::pointer begin;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) != 0)goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = (char *)&a2->first + 1; i != (const char *)a3; ++i)
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
          }
          else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)i, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, i, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      }
      std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0))goto LABEL_28;
        }
        else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a3, (uint64_t)a3, (uint64_t *)this, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    this->__end_ = this->__begin_;
    return result;
  }
  if ((std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0) & 1) == 0)goto LABEL_13;
LABEL_28:
  if (this->__end_ == this->__begin_)
    begin = (std::vector<std::csub_match>::pointer)v11;
  else
    begin = this->__begin_;
  first = (std::sub_match<const char *> *)begin->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)begin->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)begin->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *this, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::vector<std::ssub_match>::pointer v25;
  std::sub_match<std::__wrap_iter<const char *>> *v26;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  begin = this->__begin_;
  end = this->__end_;
  v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      end = (std::vector<std::ssub_match>::pointer)((char *)begin + 8 * ((a4[1] - *a4) >> 3));
      this->__end_ = end;
    }
  }
  else
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v11 - v14);
    begin = this->__begin_;
    end = this->__end_;
  }
  if (end != begin)
  {
    v15 = 0;
    v16 = 0;
    v18 = *a4;
    v17 = a4[1];
    do
    {
      v19 = 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3);
      v20 = (_QWORD *)(v18 + v15 * 24);
      if (v19 <= v16)
        v21 = a4 + 3;
      else
        v21 = v20;
      begin[v15].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v21 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v16)
        v22 = (uint64_t)(a4 + 3);
      else
        v22 = *a4 + v15 * 24;
      this->__begin_[v15].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *(_QWORD *)(v22 + 8) - v10);
      v18 = *a4;
      v17 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v17 - *a4) >> 3) <= v16)
        v23 = (uint64_t)(a4 + 3);
      else
        v23 = *a4 + v15 * 24;
      v24 = *(_BYTE *)(v23 + 16);
      begin = this->__begin_;
      v25 = this->__end_;
      this->__begin_[v15].matched = v24;
      ++v16;
      ++v15;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)begin) >> 3));
  }
  this[1].__begin_ = a3;
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  v26 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  this[2].__begin_ = v26;
  this[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(this[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  this[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  this[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(this[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    this[4].__end_ = v26;
  LOBYTE(this[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::vector<std::pair<unsigned long, const char *>> *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void *v78;
  void *v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **v85;
  void **v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t *v92;
  uint64_t v93;
  char v94;
  _BYTE v97[96];
  __int128 v98;
  __int128 v99;
  __int128 v100;

  v99 = 0u;
  v100 = 0u;
  v98 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v85 = (void **)*((_QWORD *)&v98 + 1);
    v86 = (void **)v99;
    *((_QWORD *)&v100 + 1) = 0;
    v87 = v99 - *((_QWORD *)&v98 + 1);
    if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v85);
      v86 = (void **)v99;
      v85 = (void **)(*((_QWORD *)&v98 + 1) + 8);
      *((_QWORD *)&v98 + 1) = v85;
      v87 = v99 - (_QWORD)v85;
    }
    while ((_QWORD)v99 - (_QWORD)v85 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v97 = 0;
  memset(&v97[8], 0, 85);
  std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
  v11 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v100 + *((_QWORD *)&v100 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v97[16];
  *(_OWORD *)v11 = *(_OWORD *)v97;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v97[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  memset(&v97[56], 0, 24);
  v13 = *(_QWORD *)&v97[80];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)&v97[85];
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v100 + 1);
  v14 = v100;
  v16 = ++*((_QWORD *)&v100 + 1);
  v17 = *((_QWORD *)&v98 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v100 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = (std::vector<std::pair<unsigned long, const char *>> *)(v23 + 56);
  v25 = v26;
  v27 = ((uint64_t)v24->__end_ - v26) >> 4;
  v92 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      v24->__end_ = (std::vector<std::pair<unsigned long, const char *>>::pointer)(v25 + 16 * v18);
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(v24, v18 - v27);
    v16 = *((_QWORD *)&v100 + 1);
    v14 = v100;
    v17 = *((_QWORD *)&v98 + 1);
  }
  v93 = 0;
  v94 = 0;
  v28 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v35 = v16 + v100 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v65 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v66 = v93;
        if ((v94 & (v93 >= v65)) == 0)
          v66 = v65;
        if (v66 == v32)
        {
          v67 = (void **)*((_QWORD *)&v98 + 1);
          v68 = v99;
          if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          {
            *((_QWORD *)&v100 + 1) = 0;
            v82 = 0;
          }
          else
          {
            v69 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((unint64_t)v100 / 0x2A));
            v70 = (_QWORD *)(*v69 + 96 * ((unint64_t)v100 % 0x2A));
            v71 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v100 + 1) + (_QWORD)v100) % 0x2AuLL);
            if (v70 != (_QWORD *)v71)
            {
              do
              {
                v72 = (void *)v70[7];
                if (v72)
                {
                  v70[8] = v72;
                  operator delete(v72);
                }
                v73 = (void *)v70[4];
                if (v73)
                {
                  v70[5] = v73;
                  operator delete(v73);
                }
                v70 += 12;
                if ((_QWORD *)((char *)v70 - *v69) == (_QWORD *)4032)
                {
                  v74 = (_QWORD *)v69[1];
                  ++v69;
                  v70 = v74;
                }
              }
              while (v70 != (_QWORD *)v71);
              v67 = (void **)*((_QWORD *)&v98 + 1);
              v68 = v99;
            }
            *((_QWORD *)&v100 + 1) = 0;
            v82 = v68 - (_QWORD)v67;
            if (v82 >= 0x11)
            {
              do
              {
                operator delete(*v67);
                v67 = (void **)(*((_QWORD *)&v98 + 1) + 8);
                *((_QWORD *)&v98 + 1) = v67;
                v82 = v99 - (_QWORD)v67;
              }
              while ((_QWORD)v99 - (_QWORD)v67 > 0x10uLL);
            }
          }
          if (v82 >> 3 == 1)
          {
            v83 = 21;
          }
          else
          {
            if (v82 >> 3 != 2)
            {
LABEL_76:
              v94 = 1;
              v93 = a3 - a2;
              goto LABEL_8;
            }
            v83 = 42;
          }
          *(_QWORD *)&v100 = v83;
          goto LABEL_76;
        }
        v93 = v66;
        v75 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v76 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v75 / 0x2A));
        v77 = v75 % 0x2A;
        v78 = *(void **)(v76 + 96 * (v75 % 0x2A) + 56);
        if (v78)
        {
          *(_QWORD *)(v76 + 96 * v77 + 64) = v78;
          operator delete(v78);
        }
        v79 = *(void **)(v76 + 96 * v77 + 32);
        if (v79)
        {
          *(_QWORD *)(v76 + 96 * v77 + 40) = v79;
          operator delete(v79);
        }
        v80 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v81 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v80 = 0;
        if ((unint64_t)(v80 - (*((_QWORD *)&v81 + 1) + v81) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        v94 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
          continue;
        if ((v94 & 1) != 0)
        {
          v84 = *v92;
          *(_QWORD *)v84 = a2;
          *(_QWORD *)(v84 + 8) = a2 + v93;
          v6 = 1;
          *(_BYTE *)(v84 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v85 = (void **)*((_QWORD *)&v98 + 1);
        v86 = (void **)v99;
        *((_QWORD *)&v100 + 1) = 0;
        v87 = v99 - *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 - *((_QWORD *)&v98 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v88 = v87 >> 3;
        if (v88 == 1)
        {
          v89 = 21;
LABEL_85:
          *(_QWORD *)&v100 = v89;
        }
        else if (v88 == 2)
        {
          v89 = 42;
          goto LABEL_85;
        }
        if (v85 != v86)
        {
          do
          {
            v90 = *v85++;
            operator delete(v90);
          }
          while (v85 != v86);
          if ((_QWORD)v99 != *((_QWORD *)&v98 + 1))
            *(_QWORD *)&v99 = v99 + ((*((_QWORD *)&v98 + 1) - v99 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v98)
          operator delete((void *)v98);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v100;
        if (!(_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_front_capacity((uint64_t)&v98);
          v49 = v100;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = v100 - 1;
        ++*((_QWORD *)&v100 + 1);
        v56 = v55 + v100;
        v57 = (v55 + (uint64_t)v100) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v100 + 1) + v100 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v98 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v48 = v100;
        --*((_QWORD *)&v100 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v99 - 8));
          *(_QWORD *)&v99 = v99 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        *(_QWORD *)&v58 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v58 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v97[64] = v58;
        *(_OWORD *)&v97[80] = v58;
        *(_OWORD *)&v97[32] = v58;
        *(_OWORD *)&v97[48] = v58;
        *(_OWORD *)v97 = v58;
        *(_OWORD *)&v97[16] = v58;
        std::__state<char>::__state((uint64_t)v97, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v97[80] + 24))(*(_QWORD *)&v97[80], 0, v97);
        v59 = *((_QWORD *)&v98 + 1);
        if ((_QWORD)v99 == *((_QWORD *)&v98 + 1))
          v60 = 0;
        else
          v60 = 42 * ((uint64_t)(v99 - *((_QWORD *)&v98 + 1)) >> 3) - 1;
        v61 = *((_QWORD *)&v100 + 1) + v100;
        if (v60 == *((_QWORD *)&v100 + 1) + (_QWORD)v100)
        {
          std::deque<std::__state<char>>::__add_back_capacity((uint64_t)&v98);
          v59 = *((_QWORD *)&v98 + 1);
          v61 = *((_QWORD *)&v100 + 1) + v100;
        }
        v62 = *(_QWORD *)(v59 + 8 * (v61 / 0x2A)) + 96 * (v61 % 0x2A);
        v63 = *(_OWORD *)&v97[16];
        *(_OWORD *)v62 = *(_OWORD *)v97;
        *(_OWORD *)(v62 + 16) = v63;
        *(_QWORD *)(v62 + 40) = 0;
        *(_QWORD *)(v62 + 48) = 0;
        *(_QWORD *)(v62 + 32) = 0;
        *(_OWORD *)(v62 + 32) = *(_OWORD *)&v97[32];
        *(_QWORD *)(v62 + 48) = *(_QWORD *)&v97[48];
        memset(&v97[32], 0, 24);
        *(_QWORD *)(v62 + 56) = 0;
        *(_QWORD *)(v62 + 64) = 0;
        *(_QWORD *)(v62 + 72) = 0;
        *(_OWORD *)(v62 + 56) = *(_OWORD *)&v97[56];
        *(_QWORD *)(v62 + 72) = *(_QWORD *)&v97[72];
        memset(&v97[56], 0, 24);
        v64 = *(_QWORD *)&v97[80];
        *(_QWORD *)(v62 + 85) = *(_QWORD *)&v97[85];
        *(_QWORD *)(v62 + 80) = v64;
        ++*((_QWORD *)&v100 + 1);
        if (*(_QWORD *)&v97[56])
        {
          *(_QWORD *)&v97[64] = *(_QWORD *)&v97[56];
          operator delete(*(void **)&v97[56]);
        }
        if (*(_QWORD *)&v97[32])
        {
          *(_QWORD *)&v97[40] = *(_QWORD *)&v97[32];
          operator delete(*(void **)&v97[32]);
        }
        goto LABEL_8;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
  }
}

void sub_1BF5C6390(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1BF5C63A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::__state<char>::~__state((uint64_t *)va);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_1BF5C63EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1BF5C6400(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  const char *v20;
  BOOL v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  void *v27;
  void *v28;
  __int128 v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  const char *v58;
  const char *v59;
  char v60;
  _BYTE v62[96];
  std::vector<std::csub_match>::value_type __x;
  _BYTE v64[40];
  void *v65[2];
  _BYTE v66[40];
  char *v67;
  char *v68;
  unint64_t v69;

  v67 = 0;
  v68 = 0;
  v69 = 0;
  *(_DWORD *)&v66[36] = -1431655766;
  *(_QWORD *)v64 = 0xAAAAAAAA00000000;
  memset(&v64[8], 0, 32);
  *(_OWORD *)v65 = 0u;
  memset(v66, 0, 36);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  __x.second = a3;
  *(_QWORD *)&__x.matched = 0xAAAAAAAAAAAAAA00;
  __x.first = a3;
  *(_DWORD *)v62 = 0;
  memset(&v62[8], 0, 85);
  v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
  if (*(_QWORD *)&v62[56])
  {
    *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
    operator delete(*(void **)&v62[56]);
  }
  if (*(_QWORD *)&v62[32])
  {
    *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
    operator delete(*(void **)&v62[32]);
  }
  v12 = v68;
  *((_DWORD *)v68 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    std::vector<std::sub_match<char const*>>::__append((std::vector<std::csub_match> *)(v12 - 64), v14 - v15, &__x);
    v12 = v68;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append((std::vector<std::pair<unsigned long, const char *>> *)(v12 - 40), v17 - v18);
    v12 = v68;
  }
  v60 = 0;
  v19 = 0;
  v20 = (const char *)(a3 - a2);
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v59 = 0;
  *(v12 - 4) = a6;
  v58 = a3;
  do
  {
    v21 = (++v19 & 0xFFF) != 0 || (int)(v19 >> 12) < (int)v20;
    if (!v21)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v23 = v12 - 16;
    v22 = *((_QWORD *)v12 - 2);
    v24 = v12 - 96;
    if (v22)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v12 - 96);
    switch(*(_DWORD *)v24)
    {
      case 0xFFFFFC18:
        v25 = (const char *)*((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v25 == a2 || (a5 & 0x1000) != 0 && v25 != v58)
          goto LABEL_29;
        v33 = &v25[-*((_QWORD *)v12 - 11)];
        v34 = v59;
        if ((v60 & ((uint64_t)v59 >= (uint64_t)v33)) == 0)
        {
          v35 = *((_OWORD *)v12 - 5);
          *(_OWORD *)v64 = *(_OWORD *)v24;
          *(_OWORD *)&v64[16] = v35;
          if (v64 != v24)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char **)&v64[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((uint64_t)v66, *((const double **)v12 - 5), *((const double **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(_QWORD *)v23;
          *(_QWORD *)&v66[29] = *(_QWORD *)(v12 - 11);
          *(_QWORD *)&v66[24] = v36;
          v34 = v33;
        }
        v37 = v68;
        if (v34 == v20)
        {
          v38 = v67;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v68 = v38;
          v60 = 1;
          v59 = v20;
        }
        else
        {
          v59 = v34;
          v41 = (void *)*((_QWORD *)v68 - 5);
          if (v41)
          {
            *((_QWORD *)v68 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v68 = v37 - 96;
          v60 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v26 = v68;
        v27 = (void *)*((_QWORD *)v68 - 5);
        if (v27)
        {
          *((_QWORD *)v68 - 4) = v27;
          operator delete(v27);
        }
        v28 = (void *)*((_QWORD *)v26 - 8);
        if (v28)
        {
          *((_QWORD *)v26 - 7) = v28;
          operator delete(v28);
        }
        v68 = v26 - 96;
        break;
      case 0xFFFFFC20:
        *(_QWORD *)&v29 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)&v62[64] = v29;
        *(_OWORD *)&v62[80] = v29;
        *(_OWORD *)&v62[32] = v29;
        *(_OWORD *)&v62[48] = v29;
        *(_OWORD *)v62 = v29;
        *(_OWORD *)&v62[16] = v29;
        std::__state<char>::__state((uint64_t)v62, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v23 + 24))(*(_QWORD *)v23, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)&v62[80] + 24))(*(_QWORD *)&v62[80], 0, v62);
        v30 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v68 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v67, (uint64_t)v62);
          if (*(_QWORD *)&v62[56])
          {
            *(_QWORD *)&v62[64] = *(_QWORD *)&v62[56];
            operator delete(*(void **)&v62[56]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v62[16];
          *(_OWORD *)v68 = *(_OWORD *)v62;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v62[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v62[48];
          memset(&v62[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)&v62[56];
          *((_QWORD *)v30 + 9) = *(_QWORD *)&v62[72];
          memset(&v62[56], 0, 24);
          v32 = *(_QWORD *)&v62[80];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)&v62[85];
          *((_QWORD *)v30 + 10) = v32;
          v68 = v30 + 96;
        }
        if (*(_QWORD *)&v62[32])
        {
          *(_QWORD *)&v62[40] = *(_QWORD *)&v62[32];
          operator delete(*(void **)&v62[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v12 = v68;
  }
  while (v67 != v68);
  if ((v60 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = *(void **)v66;
    if (!*(_QWORD *)v66)
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = &v59[(_QWORD)a2];
  *(_BYTE *)(v43 + 16) = 1;
  if (v65[0] != *(void **)&v64[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v65[0] - *(_QWORD *)&v64[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v64[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v21 = v44 > v46++;
    }
    while (v21);
  }
  v49 = 1;
  v50 = *(void **)v66;
  if (*(_QWORD *)v66)
  {
LABEL_64:
    *(_QWORD *)&v66[8] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v64[32])
  {
    v65[0] = *(void **)&v64[32];
    operator delete(*(void **)&v64[32]);
  }
  v51 = v67;
  if (v67)
  {
    v52 = v68;
    v53 = v67;
    if (v68 != v67)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v67;
    }
    v68 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_1BF5C69C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a35);
  std::vector<std::__state<char>>::~vector[abi:ne180100]((void **)(v35 - 120));
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::clear(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **std::deque<std::__state<char>>::~deque[abi:ne180100](void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  std::deque<std::__state<char>>::clear(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::deque<std::__state<char>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  BOOL v38;
  int64_t v39;
  unint64_t v40;
  char *v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v32 = (v5 - v9) >> 2;
      if (v5 == v9)
        v32 = 1;
      if (!(v32 >> 61))
      {
        v33 = v32 >> 2;
        v34 = 8 * v32;
        v35 = (char *)operator new(8 * v32);
        v36 = &v35[8 * v33];
        v37 = &v35[v34];
        v39 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v39 & 0xFFFFFFFFFFFFFFF8];
          v40 = v39 - 8;
          if ((unint64_t)(v39 - 8) >= 0x38)
          {
            v73 = &v35[8 * v33];
            v41 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v40 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v41 = &v36[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v41 = &v35[8 * v33];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v41 = v80;
            v41 += 8;
          }
          while (v41 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v89);
    v42 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v42 + 1);
    v8 = *v42;
    *(_QWORD *)(a1 + 8) = v42 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v43 = (v5 - v9) >> 2;
      if (v5 == v9)
        v43 = 1;
      if (!(v43 >> 61))
      {
        v44 = v43 >> 2;
        v45 = 8 * v43;
        v35 = (char *)operator new(8 * v43);
        v36 = &v35[8 * v44];
        v37 = &v35[v45];
        v46 = v5 - v7;
        v38 = v5 == v7;
        v5 = v36;
        if (!v38)
        {
          v5 = &v36[v46 & 0xFFFFFFFFFFFFFFF8];
          v47 = v46 - 8;
          if ((unint64_t)(v46 - 8) >= 0x38)
          {
            v81 = &v35[8 * v44];
            v48 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v47 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v48 = &v36[v83];
              v7 += v83;
              v84 = (__int128 *)(v42 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v48 = &v35[8 * v44];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v48 = v88;
            v48 += 8;
          }
          while (v48 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v35;
        *(_QWORD *)(a1 + 8) = v36;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v37;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v30 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v49 = 1;
      else
        v49 = v20 >> 2;
      if (v49 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(8 * v49);
      v28 = &v27[8 * v49];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v27;
      *(_QWORD *)v27 = v30;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v31 = v21 + 2;
      if (v21 >= -1)
        v31 = v21 + 1;
      v27 -= 8 * (v31 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    goto LABEL_49;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
  {
    do
    {
LABEL_49:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v25)
            v57 = 1;
          else
            v57 = (v28 - v25) >> 2;
          if (v57 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v58 = (char *)operator new(8 * v57);
          v59 = v58;
          v60 = (v57 + 3) >> 2;
          v27 = &v58[8 * v60];
          v61 = v29 - v25;
          v38 = v29 == v25;
          v29 = v27;
          if (!v38)
          {
            v29 = &v27[v61 & 0xFFFFFFFFFFFFFFF8];
            v62 = v61 - 8;
            v63 = &v58[8 * v60];
            v64 = v25;
            if (v62 < 0x38)
              goto LABEL_89;
            v65 = 8 * v60;
            v63 = &v58[8 * v60];
            v64 = v25;
            if ((unint64_t)(v63 - v25) < 0x20)
              goto LABEL_89;
            v66 = (v62 >> 3) + 1;
            v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
            v63 = &v27[v67];
            v64 = &v25[v67];
            v68 = (__int128 *)(v25 + 16);
            v69 = &v58[v65 + 16];
            v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v71 = *v68;
              *((_OWORD *)v69 - 1) = *(v68 - 1);
              *(_OWORD *)v69 = v71;
              v68 += 2;
              v69 += 32;
              v70 -= 4;
            }
            while (v70);
            if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_89:
              do
              {
                v72 = *(_QWORD *)v64;
                v64 += 8;
                *(_QWORD *)v63 = v72;
                v63 += 8;
              }
              while (v63 != v29);
            }
          }
          v28 = &v58[8 * v57];
          operator delete(v25);
          v25 = v59;
        }
        else
        {
          v53 = (v28 - v29) >> 3;
          if (v53 >= -1)
            v54 = v53 + 1;
          else
            v54 = v53 + 2;
          v55 = v54 >> 1;
          v27 = &v25[8 * (v54 >> 1)];
          v56 = v25;
          if (v29 != v25)
          {
            memmove(v27, v25, v29 - v25);
            v56 = v29;
          }
          v29 = (char *)v56 + 8 * v55;
        }
      }
      v52 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v27 - 1) = v52;
      v27 -= 8;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
  }
LABEL_45:
  v51 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v51)
    operator delete(v51);
}

void sub_1BF5C7130(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void std::deque<std::__state<char>>::__add_front_capacity(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  BOOL v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  void *v46;
  void *v47;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v47 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((char **)a1, &v47);
      v43 = *(_QWORD *)(a1 + 16);
      v47 = *(void **)(v43 - 8);
      *(_QWORD *)(a1 + 16) = v43 - 8;
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v47 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((void **)a1, &v47);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_45:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_45;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    if (v3 != v2)
    {
LABEL_16:
      v17 = v12;
      while (1)
      {
        if (v16 == v15)
        {
          if (v17 <= v12)
          {
            if (v16 == v12)
              v26 = 1;
            else
              v26 = (v16 - v12) >> 2;
            if (v26 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v27 = (char *)operator new(8 * v26);
            v28 = v27;
            v29 = v26 >> 2;
            v18 = &v27[8 * (v26 >> 2)];
            v31 = v16 - v17;
            v30 = v16 == v17;
            v16 = v18;
            if (!v30)
            {
              v16 = &v18[v31 & 0xFFFFFFFFFFFFFFF8];
              v32 = v31 - 8;
              if (v32 < 0x38 || (v33 = 8 * v29, (unint64_t)(&v27[8 * v29] - v17) < 0x20))
              {
                v34 = &v27[8 * (v26 >> 2)];
                v35 = v17;
                goto LABEL_35;
              }
              v37 = (v32 >> 3) + 1;
              v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
              v34 = &v18[v38];
              v35 = &v17[v38];
              v39 = (__int128 *)(v17 + 16);
              v40 = &v27[v33 + 16];
              v41 = v37 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v42 = *v39;
                *((_OWORD *)v40 - 1) = *(v39 - 1);
                *(_OWORD *)v40 = v42;
                v39 += 2;
                v40 += 32;
                v41 -= 4;
              }
              while (v41);
              if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_35:
                  v36 = *(_QWORD *)v35;
                  v35 += 8;
                  *(_QWORD *)v34 = v36;
                  v34 += 8;
                }
                while (v34 != v16);
              }
            }
            v15 = &v27[8 * v26];
            if (v12)
              operator delete(v12);
            v12 = v28;
            goto LABEL_18;
          }
          v20 = (v17 - v12) >> 3;
          if (v20 >= -1)
            v21 = v20 + 1;
          else
            v21 = v20 + 2;
          v22 = v21 >> 1;
          v23 = &v17[-8 * (v21 >> 1)];
          v24 = v16;
          if (v16 != v17)
          {
            memmove(v23, v17, v16 - v17);
            v24 = v17;
          }
          v25 = -v22;
          v15 = v16;
          v16 = &v23[v16 - v17];
          v18 = &v24[8 * v25];
        }
        else
        {
          v18 = v17;
        }
LABEL_18:
        v19 = *v3++;
        *(_QWORD *)v16 = v19;
        v16 += 8;
        v17 = v18;
        if (v3 == *(uint64_t **)(a1 + 16))
          goto LABEL_48;
      }
    }
  }
  else
  {
    v44 = (char *)operator new(8uLL);
    v15 = v44 + 8;
    operator delete(v12);
    v3 = *(uint64_t **)(a1 + 8);
    v45 = *(uint64_t **)(a1 + 16);
    v12 = v44;
    *(_QWORD *)v44 = v14;
    v16 = v44 + 8;
    if (v3 != v45)
      goto LABEL_16;
  }
  v18 = v12;
LABEL_48:
  v46 = *(void **)a1;
  *(_QWORD *)a1 = v12;
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v15;
  if (v16 - v18 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v46)
LABEL_50:
      operator delete(v46);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v46)
      goto LABEL_50;
  }
}

void sub_1BF5C77E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(uint64_t a1, const double *a2, const double *a3, size_t __sz)
{
  uint64_t v8;
  double *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double *v13;
  double *v14;
  int64_t v15;
  _QWORD *v16;
  double *v17;
  int64_t v18;
  unint64_t v19;
  const double *v20;
  unint64_t v21;
  double *v22;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  const double *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  BOOL v37;
  char v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  const double *v42;
  double *v43;
  uint64_t v44;
  const double *v45;
  double *v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  char v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  const double *v56;
  double *v57;
  uint64_t v58;
  const double *v59;
  double *v60;
  float64x2x2_t v61;
  float64x2x2_t v62;
  float64x2x2_t v63;
  float64x2x2_t v64;

  v8 = *(_QWORD *)(a1 + 16);
  result = *(double **)a1;
  if (__sz > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz >> 60)
      goto LABEL_62;
    v10 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v10 = __sz;
    v37 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v11 = 0xFFFFFFFFFFFFFFFLL;
    if (!v37)
      v11 = v10;
    if (v11 >> 60)
LABEL_62:
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    v13 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v12];
    v14 = result;
    if (a2 != a3)
    {
      result = (double *)memcpy(result, a2, ((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0);
      v14 = (double *)((char *)v13 + (((char *)a3 - (char *)a2) & 0xFFFFFFFFFFFFFFF0));
    }
    v15 = (char *)v14 - (char *)v13;
    v16 = (_QWORD *)(a1 + 8);
    goto LABEL_29;
  }
  v17 = *(double **)(a1 + 8);
  v16 = (_QWORD *)(a1 + 8);
  v13 = v17;
  v18 = (char *)v17 - (char *)result;
  v19 = ((char *)v17 - (char *)result) >> 4;
  if (v19 >= __sz)
  {
    if (a2 == a3)
    {
      v30 = (char *)result;
    }
    else
    {
      v29 = (char *)a3 - (char *)a2 - 16;
      if (v29 < 0xF0
        || ((v47 = v29 & 0xFFFFFFFFFFFFFFF0 | 8,
             v48 = (char *)result + v47,
             v49 = (unint64_t)a2 + v47,
             v50 = (v29 & 0xFFFFFFFFFFFFFFF0) + 16,
             result + 1 < (const double *)((char *)a2 + v50))
          ? (v51 = a2 + 1 >= (double *)((char *)result + v50))
          : (v51 = 1),
            v51 ? (v52 = 0) : (v52 = 1),
            v48 > (char *)a2 ? (v53 = (unint64_t)result >= v49) : (v53 = 1),
            !v53 || (v52 & 1) != 0))
      {
        v30 = (char *)result;
        v31 = a2;
      }
      else
      {
        v54 = (v29 >> 4) + 1;
        v55 = 2 * (v54 & 0x1FFFFFFFFFFFFFFCLL);
        v30 = (char *)&result[v55];
        v31 = &a2[v55];
        v56 = a2 + 4;
        v57 = result + 4;
        v58 = v54 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v59 = v56 - 4;
          v62 = vld2q_f64(v59);
          v64 = vld2q_f64(v56);
          v60 = v57 - 4;
          vst2q_f64(v60, v62);
          vst2q_f64(v57, v64);
          v56 += 8;
          v57 += 8;
          v58 -= 4;
        }
        while (v58);
        if (v54 == (v54 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_28;
      }
      do
      {
        v32 = *(_QWORD *)v31;
        v33 = *((_QWORD *)v31 + 1);
        v31 += 2;
        *(_QWORD *)v30 = v32;
        *((_QWORD *)v30 + 1) = v33;
        v30 += 16;
      }
      while (v31 != a3);
    }
LABEL_28:
    v15 = v30 - (char *)result;
    v13 = result;
    goto LABEL_29;
  }
  v20 = &a2[2 * v19];
  if (v13 != result)
  {
    v21 = v18 - 16;
    if ((unint64_t)(v18 - 16) < 0xF0
      || ((v34 = v18 & 0xFFFFFFFFFFFFFFF0,
           v35 = (char *)result + v34 - 8,
           v36 = (unint64_t)a2 + v34 - 8,
           result + 1 < (const double *)((char *)a2 + v34))
        ? (v37 = a2 + 1 >= (double *)((char *)result + v34))
        : (v37 = 1),
          v37 ? (v38 = 0) : (v38 = 1),
          v35 > (char *)a2 ? (v39 = (unint64_t)result >= v36) : (v39 = 1),
          !v39 || (v38 & 1) != 0))
    {
      v22 = result;
      v23 = a2;
    }
    else
    {
      v40 = (v21 >> 4) + 1;
      v41 = 2 * (v40 & 0x1FFFFFFFFFFFFFFCLL);
      v22 = &result[v41];
      v23 = &a2[v41];
      v42 = a2 + 4;
      v43 = result + 4;
      v44 = v40 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v45 = v42 - 4;
        v61 = vld2q_f64(v45);
        v63 = vld2q_f64(v42);
        v46 = v43 - 4;
        vst2q_f64(v46, v61);
        vst2q_f64(v43, v63);
        v42 += 8;
        v43 += 8;
        v44 -= 4;
      }
      while (v44);
      if (v40 == (v40 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_18;
    }
    do
    {
      v24 = *(_QWORD *)v23;
      v25 = *((_QWORD *)v23 + 1);
      v23 += 2;
      *(_QWORD *)v22 = v24;
      *((_QWORD *)v22 + 1) = v25;
      v22 += 2;
    }
    while (v23 != v20);
  }
LABEL_18:
  v26 = v13;
  if (v20 != a3)
  {
    v27 = v13;
    do
    {
      v28 = *(_OWORD *)v20;
      v20 += 2;
      *(_OWORD *)v27 = v28;
      v27 += 2;
      v26 += 2;
    }
    while (v20 != a3);
  }
  v15 = (char *)v26 - (char *)v13;
LABEL_29:
  *v16 = (char *)v13 + v15;
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  std::sub_match<std::__wrap_iter<const char *>> *value;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::sub_match<std::__wrap_iter<const char *>> *v11;
  std::vector<std::ssub_match>::size_type v12;
  std::sub_match<std::__wrap_iter<const char *>> *v13;
  std::vector<std::ssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const char *>> *v15;
  std::sub_match<std::__wrap_iter<const char *>> *v16;
  std::vector<std::ssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v18;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= __n)
  {
    if (__n)
    {
      v11 = &end[__n];
      v12 = 24 * __n;
      do
      {
        end->first.__i_ = 0;
        end->second.__i_ = 0;
        end->matched = 0;
        ++end;
        v12 -= 24;
      }
      while (v12);
      end = v11;
    }
    this->__end_ = end;
  }
  else
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
    v7 = v6 + __n;
    if (v6 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
    if (2 * v8 > v7)
      v7 = 2 * v8;
    if (v8 >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v7;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v13 = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v6];
    v14 = 24 * __n;
    v15 = &v13[__n];
    v16 = v13;
    do
    {
      v16->first.__i_ = 0;
      v16->second.__i_ = 0;
      v16->matched = 0;
      ++v16;
      v14 -= 24;
    }
    while (v14);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(_QWORD *)&v13[-1].matched = *(_QWORD *)&end[-1].matched;
        v13[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v18;
        --v13;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v13;
    this->__end_ = v15;
    this->__end_cap_.__value_ = (std::sub_match<std::__wrap_iter<const char *>> *)&v10[24 * v9];
    if (end)
      operator delete(end);
  }
}

uint64_t _GLOBAL__sub_I_ResetInfo_cpp()
{
  char *v0;
  unint64_t v1;
  std::string *v2;
  void **v3;
  void *v5[2];
  char v6;
  _DWORD v7[2];
  void *v8[2];
  char v9;
  int v10;
  void *v11;
  __int128 v12;
  int v13;
  void *v14;
  __int128 v15;
  int v16;
  void *v17;
  __int128 v18;
  int v19;
  void *v20;
  __int128 v21;
  int v22;
  void *v23;
  __int128 v24;
  int v25;
  void *v26;
  __int128 v27;
  int v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  void *v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  void *v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  void *v61[3];
  int v62;
  void *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  void *v67[2];
  char v68;
  int v69;
  void *__p;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &ResetInfo::sPatternMasks, &dword_1BF566000);
  v6 = 15;
  strcpy((char *)v5, ".*\\[abmtool\\].*");
  v7[0] = 1;
  v9 = 14;
  strcpy((char *)v8, ".*\\[bbutil\\].*");
  v10 = 1;
  v11 = operator new(0x50uLL);
  v12 = xmmword_1BF73D640;
  strcpy((char *)v11, ".*AP forced coredump via SPMI - Please analyze reason from AP perspective.*");
  v13 = 1;
  v14 = operator new(0x19uLL);
  v15 = xmmword_1BF73D650;
  strcpy((char *)v14, ".*(after OTASP/OTAPA).*");
  v16 = 1;
  v17 = operator new(0x38uLL);
  v18 = xmmword_1BF73D660;
  strcpy((char *)v17, ".*Carrier bundle updated settings that require reset");
  v19 = 1;
  v20 = operator new(0x28uLL);
  v21 = xmmword_1BF73A760;
  strcpy((char *)v20, ".*Manually Triggering BB Core Dump");
  v22 = 1;
  v23 = operator new(0x28uLL);
  v24 = xmmword_1BF73D670;
  strcpy((char *)v23, ".*modem manager triggered reset.*");
  v25 = 1;
  v26 = operator new(0x38uLL);
  v27 = xmmword_1BF73D680;
  strcpy((char *)v26, ".*User requested to change Baseband field test config");
  v28 = 1;
  v29 = operator new(0x28uLL);
  v30 = 33;
  v31 = 0x8000000000000028;
  strcpy((char *)v29, ".*applebbproxy setup AT interface");
  v32 = 1;
  v33 = operator new(0x28uLL);
  v34 = 36;
  v35 = 0x8000000000000028;
  strcpy((char *)v33, ".*Resetting Baseband after restore.*");
  v36 = 1;
  v37 = operator new(0x30uLL);
  v38 = 42;
  v39 = 0x8000000000000030;
  strcpy((char *)v37, ".*Resetting baseband after pushing files.*");
  v40 = 1;
  v41 = operator new(0x40uLL);
  v42 = 59;
  v43 = 0x8000000000000040;
  strcpy((char *)v41, ".*Resetting Baseband after successful restore of carrier NV");
  v44 = 1;
  v45 = operator new(0x30uLL);
  v46 = 41;
  v47 = 0x8000000000000030;
  strcpy((char *)v45, ".*Resetting modem from WirelessAutomation");
  v48 = 1;
  v49 = operator new(0x20uLL);
  v50 = 25;
  v51 = 0x8000000000000020;
  strcpy((char *)v49, ".*Requesting Soft Reset.*");
  v52 = 1;
  v53 = operator new(0x30uLL);
  v54 = 42;
  v55 = 0x8000000000000030;
  strcpy((char *)v53, ".*AP-triggered((?!: locationd PDS).*|(.*))");
  v56 = 1;
  v59 = 0x8000000000000038;
  v57 = operator new(0x38uLL);
  v58 = 50;
  strcpy((char *)v57, ".*User ((requested state)|(Triggered Core))dump.*");
  v60 = 1;
  HIBYTE(v61[2]) = 19;
  strcpy((char *)v61, ".*SIM APNs change.*");
  v62 = 1;
  v63 = operator new(0x28uLL);
  v65 = 0x8000000000000028;
  v64 = 34;
  strcpy((char *)v63, ".*AttachAPN Push to force detach.*");
  v66 = 1;
  v68 = 14;
  strcpy((char *)v67, ".*CSIM reset.*");
  v69 = 1;
  __p = operator new(0x20uLL);
  v72 = 0x8000000000000020;
  v71 = 25;
  strcpy((char *)__p, ".*com\\.apple\\.symptomsd.*");
  v73 = 1;
  qword_1ED70F738 = 0;
  qword_1ED70F740 = 0;
  kDefaultPatternMasks = 0;
  v0 = (char *)operator new(0x280uLL);
  v1 = 0;
  kDefaultPatternMasks = (uint64_t)v0;
  qword_1ED70F738 = (uint64_t)v0;
  qword_1ED70F740 = (uint64_t)(v0 + 640);
  do
  {
    v2 = (std::string *)&v0[v1 * 4];
    v3 = &v5[v1 / 2];
    if (*(&v6 + v1 * 4) < 0)
    {
      std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)*v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v2->__r_.__value_.__r.__words[2] = (std::string::size_type)v3[2];
    }
    *(_DWORD *)&v0[v1 * 4 + 24] = v7[v1];
    v1 += 8;
  }
  while (v1 != 160);
  qword_1ED70F738 = (uint64_t)(v0 + 640);
  if (SHIBYTE(v72) < 0)
  {
    operator delete(__p);
    if ((v68 & 0x80000000) == 0)
    {
LABEL_8:
      if ((SHIBYTE(v65) & 0x80000000) == 0)
        goto LABEL_9;
      goto LABEL_29;
    }
  }
  else if ((v68 & 0x80000000) == 0)
  {
    goto LABEL_8;
  }
  operator delete(v67[0]);
  if ((SHIBYTE(v65) & 0x80000000) == 0)
  {
LABEL_9:
    if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v63);
  if ((SHIBYTE(v61[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v59) & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(v61[0]);
  if ((SHIBYTE(v59) & 0x80000000) == 0)
  {
LABEL_11:
    if ((SHIBYTE(v55) & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(v57);
  if ((SHIBYTE(v55) & 0x80000000) == 0)
  {
LABEL_12:
    if ((SHIBYTE(v51) & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(v53);
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
LABEL_13:
    if ((SHIBYTE(v47) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(v49);
  if ((SHIBYTE(v47) & 0x80000000) == 0)
  {
LABEL_14:
    if ((SHIBYTE(v43) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(v45);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v39) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(v41);
  if ((SHIBYTE(v39) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v35) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(v37);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(v33);
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
LABEL_18:
    if ((SHIBYTE(v27) & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v29);
  if ((SHIBYTE(v27) & 0x80000000) == 0)
  {
LABEL_19:
    if ((SHIBYTE(v24) & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(v26);
  if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
LABEL_20:
    if ((SHIBYTE(v21) & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_41;
  }
LABEL_40:
  operator delete(v23);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
LABEL_21:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(v20);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_22:
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(v17);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_23:
    if ((SHIBYTE(v12) & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(v14);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 0x80000000) == 0)
      goto LABEL_25;
LABEL_45:
    operator delete(v8[0]);
    if ((v6 & 0x80000000) == 0)
      return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1BF566000);
LABEL_46:
    operator delete(v5[0]);
    return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1BF566000);
  }
LABEL_44:
  operator delete(v11);
  if (v9 < 0)
    goto LABEL_45;
LABEL_25:
  if (v6 < 0)
    goto LABEL_46;
  return __cxa_atexit((void (*)(void *))std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100], &kDefaultPatternMasks, &dword_1BF566000);
}

void sub_1BF5C865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;

  std::__exception_guard_exceptions<std::vector<ResetInfo::RegexPatternAndReasonMask>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](&a10);
  if (SLOBYTE(STACK[0x28F]) < 0)
  {
    operator delete((void *)STACK[0x278]);
    if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((SLOBYTE(STACK[0x26F]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x258]);
  if ((SLOBYTE(STACK[0x24F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  operator delete((void *)STACK[0x238]);
  if ((SLOBYTE(STACK[0x22F]) & 0x80000000) == 0)
  {
LABEL_5:
    if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  operator delete((void *)STACK[0x218]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((a84 & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(a85);
  if ((a84 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a82 & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_28;
  }
LABEL_27:
  operator delete(a83);
  if ((a82 & 0x80000000) == 0)
  {
LABEL_8:
    if ((a80 & 0x80000000) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(a81);
  if ((a80 & 0x80000000) == 0)
  {
LABEL_9:
    if ((a78 & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(a79);
  if ((a78 & 0x80000000) == 0)
  {
LABEL_10:
    if ((a76 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_31;
  }
LABEL_30:
  operator delete(a77);
  if ((a76 & 0x80000000) == 0)
  {
LABEL_11:
    if ((a74 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_32;
  }
LABEL_31:
  operator delete(a75);
  if ((a74 & 0x80000000) == 0)
  {
LABEL_12:
    if ((a72 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_33;
  }
LABEL_32:
  operator delete(a73);
  if ((a72 & 0x80000000) == 0)
  {
LABEL_13:
    if ((a66 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_34;
  }
LABEL_33:
  operator delete(a68);
  if ((a66 & 0x80000000) == 0)
  {
LABEL_14:
    if ((a59 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_35;
  }
LABEL_34:
  operator delete(a61);
  if ((a59 & 0x80000000) == 0)
  {
LABEL_15:
    if ((a52 & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_35:
  operator delete(a54);
  if ((a52 & 0x80000000) == 0)
  {
LABEL_16:
    if ((a45 & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(a47);
  if ((a45 & 0x80000000) == 0)
  {
LABEL_17:
    if ((a38 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_38;
  }
LABEL_37:
  operator delete(a40);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_18:
    if ((a31 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_39;
  }
LABEL_38:
  operator delete(a33);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_19:
    if ((a24 & 0x80000000) == 0)
      goto LABEL_20;
    goto LABEL_40;
  }
LABEL_39:
  operator delete(a26);
  if ((a24 & 0x80000000) == 0)
  {
LABEL_20:
    if ((a17 & 0x80000000) == 0)
LABEL_42:
      _Unwind_Resume(a1);
LABEL_41:
    operator delete(a12);
    _Unwind_Resume(a1);
  }
LABEL_40:
  operator delete(a19);
  if ((a17 & 0x80000000) == 0)
    goto LABEL_42;
  goto LABEL_41;
}

uint64_t AudioManager::create@<X0>(AudioManager *this@<X0>, AudioManager **a2@<X8>)
{
  AudioManager *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = (AudioManager *)operator new(0x98uLL);
  AudioManager::AudioManager(v5, (const char *)this);
  v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)off_1E7914A60;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  v8 = (std::__shared_weak_count *)*((_QWORD *)v5 + 2);
  if (v8)
  {
    if (v8->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    *((_QWORD *)v5 + 1) = v5;
    *((_QWORD *)v5 + 2) = v6;
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_14:
  result = 0;
  *a2 = v5;
  a2[1] = (AudioManager *)v6;
  return result;
}

void sub_1BF5C89CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<AudioManager>::~unique_ptr[abi:ne180100]((AudioManager **)va);
  _Unwind_Resume(a1);
}

void sub_1BF5C89E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::init(AudioManager *this)
{
  return 1;
}

void AudioManager::AudioManager(AudioManager *this, const char *__s)
{
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string __dst;
  std::string v15;
  void *__p[2];
  int64_t v17;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v9 = std::string::append(&__dst, ".", 1uLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v15, "AudioManager", 0xCuLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger(this, "com.apple.telephony.abm", (const char *)v13);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_17:
    operator delete(v15.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
LABEL_18:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_17;
LABEL_14:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_18;
LABEL_15:
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_BYTE *)this + 56) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 120) = 0;
}

void sub_1BF5C8BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a15 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  if ((a15 & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(a10);
  _Unwind_Resume(exception_object);
}

void AudioManager::~AudioManager(AudioManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  uint64_t v6;
  uint64_t j;
  NSObject *v8;
  const void *v9;
  uint64_t v10;
  uint64_t k;
  NSObject *v12;
  const void *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  NSObject *v20;
  const void *v21;
  NSObject *v22;
  const void *v23;
  void *v24;
  char *v25;
  NSObject *v26;
  const void *v27;
  void *v28;
  char *v29;
  NSObject *v30;
  const void *v31;
  void *v32;
  char *v33;
  NSObject *v34;
  const void *v35;
  void *v36;

  v2 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 5) = v2;
  v6 = *((_QWORD *)this + 8);
  for (j = *((_QWORD *)this + 9); j != v6; j -= 16)
  {
    v8 = *(NSObject **)(j - 8);
    if (v8)
      dispatch_release(v8);
    v9 = *(const void **)(j - 16);
    if (v9)
      _Block_release(v9);
  }
  *((_QWORD *)this + 9) = v6;
  v10 = *((_QWORD *)this + 12);
  for (k = *((_QWORD *)this + 13); k != v10; k -= 16)
  {
    v12 = *(NSObject **)(k - 8);
    if (v12)
      dispatch_release(v12);
    v13 = *(const void **)(k - 16);
    if (v13)
      _Block_release(v13);
  }
  *((_QWORD *)this + 13) = v10;
  v14 = (char *)*((_QWORD *)this + 16);
  v15 = (char *)*((_QWORD *)this + 17);
  if (v15 == v14)
  {
    *((_QWORD *)this + 17) = v14;
    if (!v15)
      goto LABEL_24;
  }
  else
  {
    do
    {
      v20 = *((_QWORD *)v15 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v15 - 2);
      if (v21)
        _Block_release(v21);
      v15 -= 16;
    }
    while (v15 != v14);
    v15 = (char *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 17) = v14;
    if (!v15)
    {
LABEL_24:
      v16 = (char *)*((_QWORD *)this + 12);
      if (!v16)
        goto LABEL_25;
LABEL_45:
      v25 = (char *)*((_QWORD *)this + 13);
      if (v25 == v16)
      {
        *((_QWORD *)this + 13) = v16;
        operator delete(v16);
        v17 = (char *)*((_QWORD *)this + 8);
        if (v17)
          goto LABEL_54;
      }
      else
      {
        do
        {
          v26 = *((_QWORD *)v25 - 1);
          if (v26)
            dispatch_release(v26);
          v27 = (const void *)*((_QWORD *)v25 - 2);
          if (v27)
            _Block_release(v27);
          v25 -= 16;
        }
        while (v25 != v16);
        v28 = (void *)*((_QWORD *)this + 12);
        *((_QWORD *)this + 13) = v16;
        operator delete(v28);
        v17 = (char *)*((_QWORD *)this + 8);
        if (v17)
          goto LABEL_54;
      }
LABEL_26:
      v18 = (char *)*((_QWORD *)this + 4);
      if (!v18)
        goto LABEL_27;
LABEL_63:
      v33 = (char *)*((_QWORD *)this + 5);
      if (v33 == v18)
      {
        *((_QWORD *)this + 5) = v18;
        operator delete(v18);
        v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        if (!v19)
          goto LABEL_72;
      }
      else
      {
        do
        {
          v34 = *((_QWORD *)v33 - 1);
          if (v34)
            dispatch_release(v34);
          v35 = (const void *)*((_QWORD *)v33 - 2);
          if (v35)
            _Block_release(v35);
          v33 -= 16;
        }
        while (v33 != v18);
        v36 = (void *)*((_QWORD *)this + 4);
        *((_QWORD *)this + 5) = v18;
        operator delete(v36);
        v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        if (!v19)
LABEL_72:
          JUMPOUT(0x1C3B8B74CLL);
      }
LABEL_28:
      std::__shared_weak_count::__release_weak(v19);
      goto LABEL_72;
    }
  }
  if (v14 == v15)
  {
    *((_QWORD *)this + 17) = v15;
    operator delete(v14);
    v16 = (char *)*((_QWORD *)this + 12);
    if (v16)
      goto LABEL_45;
  }
  else
  {
    do
    {
      v22 = *((_QWORD *)v14 - 1);
      if (v22)
        dispatch_release(v22);
      v23 = (const void *)*((_QWORD *)v14 - 2);
      if (v23)
        _Block_release(v23);
      v14 -= 16;
    }
    while (v14 != v15);
    v24 = (void *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 17) = v15;
    operator delete(v24);
    v16 = (char *)*((_QWORD *)this + 12);
    if (v16)
      goto LABEL_45;
  }
LABEL_25:
  v17 = (char *)*((_QWORD *)this + 8);
  if (!v17)
    goto LABEL_26;
LABEL_54:
  v29 = (char *)*((_QWORD *)this + 9);
  if (v29 == v17)
  {
    *((_QWORD *)this + 9) = v17;
    operator delete(v17);
    v18 = (char *)*((_QWORD *)this + 4);
    if (v18)
      goto LABEL_63;
  }
  else
  {
    do
    {
      v30 = *((_QWORD *)v29 - 1);
      if (v30)
        dispatch_release(v30);
      v31 = (const void *)*((_QWORD *)v29 - 2);
      if (v31)
        _Block_release(v31);
      v29 -= 16;
    }
    while (v29 != v17);
    v32 = (void *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 9) = v17;
    operator delete(v32);
    v18 = (char *)*((_QWORD *)this + 4);
    if (v18)
      goto LABEL_63;
  }
LABEL_27:
  v19 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v19)
    goto LABEL_72;
  goto LABEL_28;
}

uint64_t AudioManager::getAudioOutputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t AudioManager::getAudioInputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 24);
}

void AudioManager::registerAudioInputCallback(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  NSObject *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  NSObject *v26;
  const void *v27;
  char *v28;
  BOOL v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  double *v35;
  const double *v36;
  uint64_t v37;
  float64x2x2_t v38;

  v5 = (_QWORD *)a1[5];
  v4 = a1[6];
  if ((unint64_t)v5 < v4)
  {
    v6 = *(void **)a2;
    if (*(_QWORD *)a2)
      v6 = _Block_copy(v6);
    v7 = *(NSObject **)(a2 + 8);
    *v5 = v6;
    v5[1] = v7;
    if (v7)
      dispatch_retain(v7);
    v8 = v5 + 2;
    goto LABEL_35;
  }
  v9 = a1[4];
  v10 = (char *)v5 - v9;
  v11 = ((uint64_t)v5 - v9) >> 4;
  if ((unint64_t)(v11 + 1) >> 60)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v12 = v4 - v9;
  v13 = v12 >> 3;
  if (v12 >> 3 <= (unint64_t)(v11 + 1))
    v13 = v11 + 1;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
    v14 = 0xFFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
  {
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_19;
    goto LABEL_18;
  }
  v15 = 0;
  v16 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_18:
    v16 = _Block_copy(v16);
LABEL_19:
  v17 = *(NSObject **)(a2 + 8);
  v18 = &v15[16 * v11];
  *(_QWORD *)v18 = v16;
  *((_QWORD *)v18 + 1) = v17;
  if (v17)
    dispatch_retain(v17);
  v19 = &v15[16 * v14];
  v8 = v18 + 16;
  v20 = (char *)a1[4];
  v21 = (char *)a1[5];
  if (v21 == v20)
  {
    a1[4] = v18;
    a1[5] = v8;
    a1[6] = v19;
  }
  else
  {
    v22 = v21 - v20 - 16;
    if (v22 < 0xD0)
      goto LABEL_23;
    v28 = &v21[-(v22 & 0xFFFFFFFFFFFFFFF0)];
    v29 = &v10[(_QWORD)v15 - 8 - (v22 & 0xFFFFFFFFFFFFFFF0)] >= v21 || v28 - 8 >= v18;
    v30 = !v29;
    if (v28 - 16 < &v10[(_QWORD)v15 - 8] && &v10[(_QWORD)v15 - (v22 & 0xFFFFFFFFFFFFFFF0) - 16] < v21 - 8)
      goto LABEL_23;
    if (v30)
      goto LABEL_23;
    v32 = (v22 >> 4) + 1;
    v33 = 16 * (v32 & 0x1FFFFFFFFFFFFFFELL);
    v23 = &v18[-v33];
    v34 = &v21[-v33];
    v35 = (double *)(v18 - 32);
    v36 = (const double *)(v21 - 32);
    v37 = v32 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v38 = vld2q_f64(v36);
      vst2q_f64(v35, v38);
      *(_OWORD *)v36 = 0uLL;
      *((_OWORD *)v36 + 1) = 0uLL;
      v36 -= 4;
      v35 -= 4;
      v37 -= 2;
    }
    while (v37);
    v18 = v23;
    v21 = v34;
    if (v32 != (v32 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_23:
      v23 = v18;
      do
      {
        v24 = *((_OWORD *)v21 - 1);
        v21 -= 16;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
      }
      while (v21 != v20);
    }
    v21 = (char *)a1[4];
    v25 = (char *)a1[5];
    a1[4] = v23;
    a1[5] = v8;
    a1[6] = v19;
    while (v25 != v21)
    {
      v26 = *((_QWORD *)v25 - 1);
      if (v26)
        dispatch_release(v26);
      v27 = (const void *)*((_QWORD *)v25 - 2);
      if (v27)
        _Block_release(v27);
      v25 -= 16;
    }
  }
  if (v21)
    operator delete(v21);
LABEL_35:
  a1[5] = v8;
}

_QWORD *AudioManager::registerAudioOutputCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[9];
  if ((unint64_t)v4 >= a1[10])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(a1 + 8, (uint64_t)a2);
    a1[9] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[9] = v4 + 2;
  }
  return result;
}

_QWORD *AudioManager::registerAudioSpeakerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[13];
  if ((unint64_t)v4 >= a1[14])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 12, (uint64_t)a2);
    a1[13] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[13] = v4 + 2;
  }
  return result;
}

_QWORD *AudioManager::registerAudioWiredPortCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[17];
  if ((unint64_t)v4 >= a1[18])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(a1 + 16, (uint64_t)a2);
    a1[17] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[17] = v4 + 2;
  }
  return result;
}

uint64_t AudioManager::isAudioInputReportSupported(AudioManager *this)
{
  return 0;
}

BOOL AudioManager::isAudioOutputReportSupported(AudioManager *this)
{
  unsigned __int8 v1;
  capabilities::txpower *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_1ED70F758);
  if ((v1 & 1) == 0)
  {
    v3 = (capabilities::txpower *)__cxa_guard_acquire(&qword_1ED70F758);
    if ((_DWORD)v3)
    {
      _MergedGlobals = capabilities::txpower::supportedControlInput(v3);
      __cxa_guard_release(&qword_1ED70F758);
    }
  }
  return capabilities::txpower::operator&() != 0;
}

void sub_1BF5C9328(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1ED70F758);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::isAudioSpeakerSupported(AudioManager *this)
{
  unsigned __int8 v1;
  capabilities::txpower *v3;

  if ((v1 & 1) != 0)
    return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
  if (!(_DWORD)v3)
    return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
  AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported = capabilities::txpower::supportsAudioSpeaker(v3);
  return AudioManager::isAudioSpeakerSupported(void)::audioSpeakerSupported;
}

void sub_1BF5C93A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t AudioManager::isAudioWiredPortSupported(AudioManager *this)
{
  unsigned __int8 v1;
  capabilities::txpower *v3;

  if ((v1 & 1) != 0)
    return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
  if (!(_DWORD)v3)
    return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
  AudioManager::isAudioWiredPortSupported(void)::audioJackSupported = capabilities::txpower::supportsAudioJackReport(v3);
  return AudioManager::isAudioWiredPortSupported(void)::audioJackSupported;
}

void sub_1BF5C9420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void AudioManager::setAudioState(uint64_t a1, xpc::object *a2)
{
  NSObject *v4;
  void *v5;
  xpc_object_t value;
  char v7;
  int v8;
  int v9;
  xpc_object_t v10;
  char v11;
  int v12;
  char v13;
  int v14;
  void *v15;
  xpc_object_t v16;
  char v17;
  int v18;
  xpc_object_t v19;
  xpc_object_t v20;
  char v21;
  xpc_object_t v22;
  int v23;
  char v24;
  xpc_object_t v25;
  xpc_object_t *v26;
  char v27;
  xpc_object_t v28;
  char v29;
  xpc_object_t v30;
  int v31;
  void *v32;
  int v33;
  xpc_object_t v34;
  void *v35;
  int v36;
  xpc_object_t v37;
  size_t count;
  size_t v39;
  const char *v40;
  size_t v41;
  xpc_object_t v42;
  const char *v43;
  size_t v44;
  xpc_object_t v45;
  char v46;
  xpc_object_t *v47;
  xpc_object_t v48;
  size_t v49;
  _BOOL4 v50;
  _BOOL4 v51;
  size_t v52;
  BOOL v53;
  AudioManager *v54;
  xpc_object_t v55;
  xpc_object_t v56;
  xpc_object_t xarray;
  xpc_object_t v58;
  xpc_object_t object[3];
  _BYTE xdict[24];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v4 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEBUG))
  {
    xpc::object::to_string(a2);
    v26 = SHIBYTE(object[2]) >= 0 ? object : (xpc_object_t *)object[0];
    *(_DWORD *)xdict = 136315138;
    *(_QWORD *)&xdict[4] = v26;
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Setting Audio State: %s", xdict, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
  }
  *(_QWORD *)xdict = 0xAAAAAAAAAAAAAAAALL;
  v5 = (void *)*MEMORY[0x1E0CFB140];
  object[0] = a2;
  object[1] = v5;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, xdict);
  value = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E0CFB8C0]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v7 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if ((v7 & 1) != 0)
  {
    v8 = 0;
    LOBYTE(v9) = 1;
    if (*(_BYTE *)(a1 + 56) == 1)
      goto LABEL_14;
    goto LABEL_13;
  }
  v10 = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E0CFB768]);
  object[0] = v10;
  if (v10)
    xpc_retain(v10);
  else
    object[0] = xpc_null_create();
  v11 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if ((v11 & 1) != 0)
  {
    LOBYTE(v9) = 2;
    v8 = 1;
    if (*(_BYTE *)(a1 + 56) == 2)
      goto LABEL_14;
    goto LABEL_13;
  }
  v20 = xpc_dictionary_get_value(*(xpc_object_t *)xdict, (const char *)*MEMORY[0x1E0CFB528]);
  object[0] = v20;
  if (v20)
    xpc_retain(v20);
  else
    object[0] = xpc_null_create();
  v23 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v8 = 0;
  if (v23)
    v9 = 3;
  else
    v9 = 0;
  if (*(unsigned __int8 *)(a1 + 56) != v9)
  {
LABEL_13:
    *(_BYTE *)(a1 + 56) = v9;
    AudioManager::notifyAudioOutputClients((os_log_t *)a1);
  }
LABEL_14:
  v12 = *(unsigned __int8 *)(a1 + 88);
  if (*(_BYTE *)(a1 + 88))
    v13 = 0;
  else
    v13 = v8;
  if ((v13 & 1) != 0)
  {
    if (v12 == 1)
      goto LABEL_25;
LABEL_24:
    AudioManager::notifyAudioSpeakerClients((NSObject **)a1);
    goto LABEL_25;
  }
  if (*(_BYTE *)(a1 + 88))
    v14 = v8;
  else
    v14 = 0;
  if (v12 != v14)
    goto LABEL_24;
LABEL_25:
  v58 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v15 = (void *)*MEMORY[0x1E0CFB0C0];
  object[0] = a2;
  object[1] = v15;
  xpc::dict::object_proxy::operator xpc::dict((uint64_t)object, &v58);
  v16 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB280]);
  object[0] = v16;
  if (v16)
    xpc_retain(v16);
  else
    object[0] = xpc_null_create();
  v17 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  if ((v17 & 1) != 0)
  {
    v18 = 1;
  }
  else
  {
    v19 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB288]);
    object[0] = v19;
    if (v19)
      xpc_retain(v19);
    else
      object[0] = xpc_null_create();
    v21 = xpc::dyn_cast_or_default((xpc *)object, 0);
    xpc_release(object[0]);
    if ((v21 & 1) != 0)
    {
      v18 = 2;
    }
    else
    {
      v22 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB290]);
      object[0] = v22;
      if (v22)
        xpc_retain(v22);
      else
        object[0] = xpc_null_create();
      v24 = xpc::dyn_cast_or_default((xpc *)object, 0);
      xpc_release(object[0]);
      if ((v24 & 1) != 0)
      {
        v18 = 3;
      }
      else
      {
        v25 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB298]);
        object[0] = v25;
        if (v25)
          xpc_retain(v25);
        else
          object[0] = xpc_null_create();
        v27 = xpc::dyn_cast_or_default((xpc *)object, 0);
        xpc_release(object[0]);
        if ((v27 & 1) != 0)
        {
          v18 = 4;
        }
        else
        {
          v28 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB2A0]);
          object[0] = v28;
          if (v28)
            xpc_retain(v28);
          else
            object[0] = xpc_null_create();
          v29 = xpc::dyn_cast_or_default((xpc *)object, 0);
          xpc_release(object[0]);
          if ((v29 & 1) != 0)
          {
            v18 = 5;
          }
          else
          {
            v30 = xpc_dictionary_get_value(v58, (const char *)*MEMORY[0x1E0CFB2A8]);
            object[0] = v30;
            if (v30)
              xpc_retain(v30);
            else
              object[0] = xpc_null_create();
            v31 = xpc::dyn_cast_or_default((xpc *)object, 0);
            xpc_release(object[0]);
            if (v31)
              v18 = 6;
            else
              v18 = 0;
          }
        }
      }
    }
  }
  if (*(unsigned __int8 *)(a1 + 24) != v18)
  {
    *(_BYTE *)(a1 + 24) = v18;
    AudioManager::notifyAudioInputClients((os_log_t *)a1);
  }
  xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v32 = (void *)*MEMORY[0x1E0CFB648];
  object[0] = a2;
  object[1] = v32;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)object, &xarray);
  v33 = *(unsigned __int8 *)(a1 + 120);
  v34 = xarray;
  if (xarray)
  {
    xpc_retain(xarray);
LABEL_74:
    xpc_retain(v34);
    v35 = v34;
    goto LABEL_75;
  }
  v34 = xpc_null_create();
  if (v34)
    goto LABEL_74;
  v34 = xpc_null_create();
  v35 = 0;
LABEL_75:
  xpc_release(v35);
  v36 = v33 != 0;
  v37 = xarray;
  if (xarray)
    xpc_retain(xarray);
  else
    v37 = xpc_null_create();
  if (MEMORY[0x1C3B8CD78](xarray) == MEMORY[0x1E0C812C8])
  {
    count = xpc_array_get_count(xarray);
    if (v37)
      goto LABEL_80;
LABEL_82:
    v55 = xpc_null_create();
    goto LABEL_83;
  }
  count = 0;
  if (!v37)
    goto LABEL_82;
LABEL_80:
  xpc_retain(v37);
  v55 = v37;
LABEL_83:
  xpc_release(v37);
  v54 = (AudioManager *)a1;
  if (count || v34 != v55)
  {
    v39 = 0;
    v40 = (const char *)*MEMORY[0x1E0CFB2B0];
    v41 = count - 1;
    while (1)
    {
      while (1)
      {
        memset(object, 170, sizeof(object));
        v42 = xpc_array_get_value(v34, v39);
        v56 = v42;
        if (v42)
          xpc_retain(v42);
        else
          v56 = xpc_null_create();
        xpc::dyn_cast_or_default((xpc *)&v56, (const object *)"", v43);
        xpc_release(v56);
        v44 = strlen(v40);
        v45 = (xpc_object_t)v44;
        v46 = HIBYTE(object[2]);
        if (SHIBYTE(object[2]) < 0)
        {
          if (v44 == -1)
LABEL_110:
            std::string::__throw_out_of_range[abi:ne180100]();
          v47 = (xpc_object_t *)object[0];
          v48 = object[1];
        }
        else
        {
          if (v44 == -1)
            goto LABEL_110;
          v47 = object;
          v48 = (xpc_object_t)HIBYTE(object[2]);
        }
        v49 = (size_t)(v48 >= v45 ? v45 : v48);
        v50 = memcmp(v47, v40, v49) == 0;
        v51 = v48 == v45 && v50;
        if ((v46 & 0x80) == 0)
          break;
        operator delete(object[0]);
        v36 |= v51;
        v52 = v39 + 1;
        v53 = v41 == v39++;
        if (v53)
          goto LABEL_105;
      }
      v36 |= v51;
      v52 = v39 + 1;
      v53 = v41 == v39++;
      if (v53)
      {
LABEL_105:
        v39 = v52;
        if (v34 == v55)
          break;
      }
    }
  }
  xpc_release(v55);
  xpc_release(v34);
  if (*((_BYTE *)v54 + 120) != (v36 & 1))
  {
    *((_BYTE *)v54 + 120) = v36 & 1;
    AudioManager::notifyAudioWiredPortClients((NSObject **)v54);
  }
  xpc_release(xarray);
  xpc_release(v58);
  xpc_release(*(xpc_object_t *)xdict);
}

void sub_1BF5C9B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t a11, xpc_object_t a12, xpc_object_t a13, xpc_object_t object, uint64_t a15, uint64_t a16, xpc_object_t a17)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void AudioManager::notifyAudioOutputClients(os_log_t *this)
{
  NSObject *v2;
  unint64_t v3;
  const char *v4;
  os_log_t v5;
  os_log_t v6;
  void *v7;
  NSObject *isa;
  char v9;
  void *v10;
  const void *v11;
  void *v12;
  char v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((char *)this + 56);
    if (v3 > 3)
      v4 = "Unknown Audio Output";
    else
      v4 = off_1E7914B30[v3];
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Audio Output: %s", (uint8_t *)&v14, 0xCu);
  }
  v5 = this[8];
  v6 = this[9];
  if (v5 != v6)
  {
    while (v5->isa)
    {
      v7 = _Block_copy(v5->isa);
      isa = v5[1].isa;
      if (isa)
        goto LABEL_11;
LABEL_12:
      v9 = *((_BYTE *)this + 56);
      if (v7)
      {
        v10 = _Block_copy(v7);
        v11 = v10;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE_e5_v8__0l;
        if (v10)
        {
          v12 = _Block_copy(v10);
          v13 = 0;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v13 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE_e5_v8__0l;
      }
      aBlock = v12;
      v18 = v9;
      dispatch_async(isa, &v14);
      if (aBlock)
        _Block_release(aBlock);
      if ((v13 & 1) == 0)
        _Block_release(v11);
      if (isa)
        dispatch_release(isa);
      if (v7)
        _Block_release(v7);
      v5 += 2;
      if (v5 == v6)
        return;
    }
    v7 = 0;
    isa = v5[1].isa;
    if (!isa)
      goto LABEL_12;
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1BF5C9EF0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioSpeakerClients(NSObject **this)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *isa;
  char v8;
  void *v9;
  const void *v10;
  void *v11;
  char v12;
  __int128 v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  void *aBlock;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 88))
      v3 = "YES";
    else
      v3 = "NO";
    LODWORD(v13) = 136315138;
    *(_QWORD *)((char *)&v13 + 4) = v3;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Speaker State: %s", (uint8_t *)&v13, 0xCu);
  }
  v4 = this[12];
  v5 = this[13];
  if (v4 != v5)
  {
    while (v4->isa)
    {
      v6 = _Block_copy(v4->isa);
      isa = v4[1].isa;
      if (isa)
        goto LABEL_11;
LABEL_12:
      v8 = *((_BYTE *)this + 88);
      if (v6)
      {
        v9 = _Block_copy(v6);
        v10 = v9;
        *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v13 + 1) = 3321888768;
        v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
        if (v9)
        {
          v11 = _Block_copy(v9);
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v13 + 1) = 3321888768;
        v12 = 1;
        v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      }
      aBlock = v11;
      v17 = v8;
      dispatch_async(isa, &v13);
      if (aBlock)
        _Block_release(aBlock);
      if ((v12 & 1) == 0)
        _Block_release(v10);
      if (isa)
        dispatch_release(isa);
      if (v6)
        _Block_release(v6);
      v4 += 2;
      if (v4 == v5)
        return;
    }
    v6 = 0;
    isa = v4[1].isa;
    if (!isa)
      goto LABEL_12;
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1BF5CA110(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioInputClients(os_log_t *this)
{
  NSObject *v2;
  unint64_t v3;
  const char *v4;
  os_log_t v5;
  os_log_t v6;
  void *v7;
  NSObject *isa;
  char v9;
  void *v10;
  const void *v11;
  void *v12;
  char v13;
  __int128 v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  void *aBlock;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *((char *)this + 24);
    if (v3 > 6)
      v4 = "Unknown Audio Input";
    else
      v4 = off_1E7914B50[v3];
    LODWORD(v14) = 136315138;
    *(_QWORD *)((char *)&v14 + 4) = v4;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Audio Input: %s", (uint8_t *)&v14, 0xCu);
  }
  v5 = this[4];
  v6 = this[5];
  if (v5 != v6)
  {
    while (v5->isa)
    {
      v7 = _Block_copy(v5->isa);
      isa = v5[1].isa;
      if (isa)
        goto LABEL_11;
LABEL_12:
      v9 = *((_BYTE *)this + 24);
      if (v7)
      {
        v10 = _Block_copy(v7);
        v11 = v10;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE_e5_v8__0l;
        if (v10)
        {
          v12 = _Block_copy(v10);
          v13 = 0;
        }
        else
        {
          v12 = 0;
          v13 = 1;
        }
      }
      else
      {
        v11 = 0;
        v12 = 0;
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 3321888768;
        v13 = 1;
        v15 = ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke;
        v16 = &__block_descriptor_41_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE_e5_v8__0l;
      }
      aBlock = v12;
      v18 = v9;
      dispatch_async(isa, &v14);
      if (aBlock)
        _Block_release(aBlock);
      if ((v13 & 1) == 0)
        _Block_release(v11);
      if (isa)
        dispatch_release(isa);
      if (v7)
        _Block_release(v7);
      v5 += 2;
      if (v5 == v6)
        return;
    }
    v7 = 0;
    isa = v5[1].isa;
    if (!isa)
      goto LABEL_12;
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1BF5CA338(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void AudioManager::notifyAudioWiredPortClients(NSObject **this)
{
  NSObject *v2;
  const char *v3;
  NSObject *v4;
  NSObject *v5;
  void *v6;
  NSObject *isa;
  char v8;
  void *v9;
  const void *v10;
  void *v11;
  char v12;
  __int128 v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  void *aBlock;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    if (*((_BYTE *)this + 120))
      v3 = "YES";
    else
      v3 = "NO";
    LODWORD(v13) = 136315138;
    *(_QWORD *)((char *)&v13 + 4) = v3;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Notifying Wired State: %s", (uint8_t *)&v13, 0xCu);
  }
  v4 = this[16];
  v5 = this[17];
  if (v4 != v5)
  {
    while (v4->isa)
    {
      v6 = _Block_copy(v4->isa);
      isa = v4[1].isa;
      if (isa)
        goto LABEL_11;
LABEL_12:
      v8 = *((_BYTE *)this + 120);
      if (v6)
      {
        v9 = _Block_copy(v6);
        v10 = v9;
        *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v13 + 1) = 3321888768;
        v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
        if (v9)
        {
          v11 = _Block_copy(v9);
          v12 = 0;
        }
        else
        {
          v11 = 0;
          v12 = 1;
        }
      }
      else
      {
        v10 = 0;
        v11 = 0;
        *(_QWORD *)&v13 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v13 + 1) = 3321888768;
        v12 = 1;
        v14 = ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke;
        v15 = &__block_descriptor_41_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE_e5_v8__0l;
      }
      aBlock = v11;
      v17 = v8;
      dispatch_async(isa, &v13);
      if (aBlock)
        _Block_release(aBlock);
      if ((v12 & 1) == 0)
        _Block_release(v10);
      if (isa)
        dispatch_release(isa);
      if (v6)
        _Block_release(v6);
      v4 += 2;
      if (v4 == v5)
        return;
    }
    v6 = 0;
    isa = v4[1].isa;
    if (!isa)
      goto LABEL_12;
LABEL_11:
    dispatch_retain(isa);
    goto LABEL_12;
  }
}

void sub_1BF5CA558(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t AudioManager::getCurrentAudioOutputState(AudioManager *this)
{
  return *((unsigned __int8 *)this + 56);
}

const char *AudioManager::toString(unsigned int a1)
{
  if (a1 > 3)
    return "Unknown Audio Output";
  else
    return off_1E7914B30[(char)a1];
}

{
  if (a1 > 6)
    return "Unknown Audio Input";
  else
    return off_1E7914B50[(char)a1];
}

void AudioManager::notifyClients(os_log_t *this)
{
  AudioManager::notifyAudioInputClients(this);
  AudioManager::notifyAudioOutputClients(this);
  AudioManager::notifyAudioSpeakerClients(this);
  AudioManager::notifyAudioWiredPortClients(this);
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(BOOL)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(BOOL)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v3 = a1[1] - *a1;
  v4 = (v3 >> 4) + 1;
  if (v4 >> 60)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v4)
    v4 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v4;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v3 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v3 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v3 - 8] && &v8[v3 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

AudioManager **std::unique_ptr<AudioManager>::~unique_ptr[abi:ne180100](AudioManager **a1)
{
  AudioManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    AudioManager::~AudioManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

AudioManager *std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::__on_zero_shared(uint64_t a1)
{
  AudioManager *result;

  result = *(AudioManager **)(a1 + 24);
  if (result)
    AudioManager::~AudioManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<AudioManager *,std::shared_ptr<AudioManager>::__shared_ptr_default_delete<AudioManager,AudioManager>,std::allocator<AudioManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF73D70DLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF73D70DLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF73D70DLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF73D70DLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager15AudioInputStateEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c75_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager15AudioInputStateEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN12AudioManager16AudioOutputStateEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c76_ZTSN8dispatch5blockIU13block_pointerFvN12AudioManager16AudioOutputStateEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvbEEclIJbEEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *__copy_helper_block_e8_32c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void TransportModule::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _QWORD v43[2];
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  void *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t block;
  uint64_t v53;
  _QWORD *(*v54)(uint64_t);
  void *v55;
  uint64_t v56;
  uint64_t **v57;

  *a3 = 0xAAAAAAAAAAAAAAAALL;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v6 = operator new(0xE8uLL);
  v7 = v6;
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v44 = v8;
  v45 = v9;
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  v12 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  v43[0] = v12;
  v43[1] = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  TransportModule::TransportModule((uint64_t)v6, &v44, v43);
  *a3 = v7;
  a3[1] = 0xAAAAAAAAAAAAAAAALL;
  v16 = (std::__shared_weak_count *)operator new(0x20uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__vftable = (std::__shared_weak_count_vtbl *)off_1E7914FC8;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  a3[1] = v16;
  v18 = (std::__shared_weak_count *)*((_QWORD *)v7 + 16);
  if (v18)
  {
    if (v18->__shared_owners_ != -1)
      goto LABEL_19;
    do
      v19 = __ldxr(v17);
    while (__stxr(v19 + 1, v17));
    v20 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    *((_QWORD *)v7 + 15) = v7;
    *((_QWORD *)v7 + 16) = v16;
    std::__shared_weak_count::__release_weak(v18);
  }
  else
  {
    do
      v22 = __ldxr(v17);
    while (__stxr(v22 + 1, v17));
    v23 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
    *((_QWORD *)v7 + 15) = v7;
    *((_QWORD *)v7 + 16) = v16;
  }
  do
    v25 = __ldaxr(v17);
  while (__stlxr(v25 - 1, v17));
  if (v25)
  {
LABEL_19:
    v26 = (_QWORD *)*a3;
    if (!*(_QWORD *)(*a3 + 104))
      goto LABEL_35;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
  std::__shared_weak_count::__release_weak(v16);
  v26 = (_QWORD *)*a3;
  if (!*(_QWORD *)(*a3 + 104))
    goto LABEL_35;
LABEL_20:
  v27 = (std::__shared_weak_count *)v26[16];
  if (!v27 || (v28 = v26[15], (v29 = std::__shared_weak_count::lock(v27)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v30 = v29;
  block = v28;
  v53 = (uint64_t)v29;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v26 + 7));
  v31 = v28 + 48;
  if (!v28)
    v31 = 0;
  v46 = v31;
  v47 = (uint64_t)v30;
  block = 0;
  v53 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v32 = (std::__shared_weak_count *)v47;
  if (v47)
  {
    v33 = (unint64_t *)(v47 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v36 = (unint64_t *)(v53 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_35:
  if (v13)
  {
    v38 = (unint64_t *)&v13->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  v40 = *a3;
  v41 = *a3 + 120;
  v46 = MEMORY[0x1E0C809B0];
  v47 = 0x40000000;
  v48 = ___ZN15TransportModule4initEv_block_invoke;
  v49 = &__block_descriptor_tmp_5;
  v50 = v40;
  v51 = &v46;
  block = MEMORY[0x1E0C809B0];
  v53 = 0x40000000;
  v54 = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v55 = &__block_descriptor_tmp_51_0;
  v56 = v41;
  v57 = &v51;
  v42 = *(NSObject **)(v40 + 136);
  if (*(_QWORD *)(v40 + 144))
    dispatch_async_and_wait(v42, &block);
  else
    dispatch_sync(v42, &block);
}

void sub_1BF5CAF0C()
{
  __break(1u);
}

void sub_1BF5CAF50()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF5CAF78);
}

void sub_1BF5CAF60()
{
  JUMPOUT(0x1BF5CAF7CLL);
}

void TransportModule::init(TransportModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15TransportModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15TransportModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_51_0;
  block[4] = (char *)this + 120;
  block[5] = &v4;
  v2 = (char *)this + 136;
  v1 = *((_QWORD *)this + 17);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t TransportModule::TransportModule(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned __int8 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  NSObject *initially_inactive;
  NSObject *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  xpc_object_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t v26;
  void *v27;
  xpc_object_t v28;
  void *v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v49;
  _BYTE v50[16];
  __int128 v51;
  uint64_t block;
  uint64_t v53;
  void (*v54)(uint64_t);
  void *v55;
  uint64_t *v56;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v6;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v6);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v5;
  }
  *(_QWORD *)a1 = off_1E7914B98;
  *(_QWORD *)(a1 + 48) = &unk_1E7914C08;
  v11 = (_QWORD *)(a1 + 48);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v50, "com.apple.telephony.abm", "ipc.mod");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block = MEMORY[0x1E0C809B0];
  v53 = 0x40000000;
  v54 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_13_8;
  v56 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_12;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v14 = GetABMLogServer(void)::sLogServer;
    v13 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_12:
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v18 = dispatch_queue_create_with_target_V2("ipc.mod", initially_inactive, 0);
  dispatch_set_qos_class_floor(v18, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v18);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v18;
  if (v18)
  {
    dispatch_retain(v18);
    *(_QWORD *)(a1 + 144) = 0;
    dispatch_release(v18);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
  }
  *(_QWORD *)(a1 + 48) = off_1E7914F88;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  *(_QWORD *)(a1 + 56) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 112) = v13;
  if (v13)
  {
    v19 = (unint64_t *)&v13->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v51);
    *v11 = off_1E7915018;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v51);
    *v11 = off_1E7915018;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v50);
  *(_QWORD *)a1 = off_1E7914B98;
  *(_QWORD *)(a1 + 48) = &unk_1E7914C08;
  *(_DWORD *)(a1 + 152) = 0;
  v22 = xpc_null_create();
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = *a3;
  *(_QWORD *)(a1 + 160) = v22;
  v23 = a3[1];
  *(_QWORD *)(a1 + 224) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = xpc_null_create();
  v27 = v26;
  *(_DWORD *)(a1 + 152) = 1;
  if (v26)
  {
    xpc_retain(v26);
    v28 = v27;
  }
  else
  {
    v28 = xpc_null_create();
  }
  v29 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = v28;
  xpc_release(v29);
  xpc_release(v27);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block = MEMORY[0x1E0C809B0];
  v53 = 0x40000000;
  v54 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v55 = &__block_descriptor_tmp_13_8;
  v56 = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v31 = GetABMLogServer(void)::sLogServer;
    v32 = unk_1ED70F6A0;
    v49 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_34;
LABEL_42:
    block = v31;
    v53 = v32;
    goto LABEL_43;
  }
  dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
  v31 = GetABMLogServer(void)::sLogServer;
  v32 = unk_1ED70F6A0;
  v49 = (std::__shared_weak_count *)unk_1ED70F6A0;
  if (!unk_1ED70F6A0)
    goto LABEL_42;
LABEL_34:
  v33 = (unint64_t *)(v32 + 8);
  do
    v34 = __ldxr(v33);
  while (__stxr(v34 + 1, v33));
  block = v31;
  v53 = v32;
  do
    v35 = __ldxr(v33);
  while (__stxr(v35 + 1, v33));
LABEL_43:
  data::TransportService::State::create((capabilities::abs *)&block, (uint64_t)&v51);
  v36 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v37 = (unint64_t *)(v53 + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v51;
  v51 = 0uLL;
  v40 = *(std::__shared_weak_count **)(a1 + 192);
  *(_OWORD *)(a1 + 184) = v39;
  if (v40)
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v49)
  {
    v46 = (unint64_t *)&v49->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return a1;
}

void sub_1BF5CB5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  Service *v19;
  _QWORD *v20;
  xpc_object_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a19;
  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v25);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v22);
  WakeReason::~WakeReason(v21);
  ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v20);
  Service::~Service(v19);
  _Unwind_Resume(a1);
}

void sub_1BF5CB654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  Service *v3;
  _QWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  uint64_t v15;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v4);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  Service::~Service(v3);
  _Unwind_Resume(a1);
}

void sub_1BF5CB690(_Unwind_Exception *a1)
{
  Service *v1;

  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void WakeReason::~WakeReason(xpc_object_t *this)
{
  xpc_release(this[1]);
  this[1] = 0;
}

_QWORD *ctu::SharedLoggable<TransportModule,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7914F88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7914F88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void TransportModule::~TransportModule(TransportModule *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint8_t v22[16];

  *(_QWORD *)this = off_1E7914B98;
  *((_QWORD *)this + 6) = &unk_1E7914C08;
  v2 = *((_QWORD *)this + 11);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Gone!", v22, 2u);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 24);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  xpc_release(*((xpc_object_t *)this + 20));
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 6) = off_1E7914F88;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v15 = *((_QWORD *)this + 18);
  if (v15)
    dispatch_release(v15);
  v16 = *((_QWORD *)this + 17);
  if (v16)
    dispatch_release(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  *(_QWORD *)this = off_1E79228B8;
  v18 = *((_QWORD *)this + 3);
  if (v18)
  {
    v19 = *((_QWORD *)this + 4);
    v20 = (void *)*((_QWORD *)this + 3);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v18;
    operator delete(v20);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

{
  void *v1;

  TransportModule::~TransportModule(this);
  operator delete(v1);
}

void `non-virtual thunk to'TransportModule::~TransportModule(TransportModule *this)
{
  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));
}

{
  void *v1;

  TransportModule::~TransportModule((TransportModule *)((char *)this - 48));
  operator delete(v1);
}

const char *TransportModule::getName(TransportModule *this)
{
  return "ipc.mod";
}

void ___ZN15TransportModule4initEv_block_invoke(uint64_t a1)
{
  TransportModule::configureWakeEventPktDelay_sync(*(TransportModule **)(a1 + 32));
}

void TransportModule::configureWakeEventPktDelay_sync(TransportModule *this)
{
  NSObject *v2;
  int *v3;
  char *v4;
  const char *v5;
  int v6;
  int *v7;
  char *v8;
  size_t v9;
  int v10;
  int v11;
  uint8_t buf[4];
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = -1431655766;
  v9 = 4;
  if (sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", &v11, &v9, 0, 0))
  {
    v2 = *((_QWORD *)this + 11);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    v3 = __error();
    v4 = strerror(*v3);
    *(_DWORD *)buf = 136315138;
    v13 = v4;
    v5 = "Failed to get current sysctl value, error: (%s)";
LABEL_7:
    _os_log_error_impl(&dword_1BF566000, v2, OS_LOG_TYPE_ERROR, v5, buf, 0xCu);
    return;
  }
  v10 = v11 | 0x8000;
  v6 = sysctlbyname("net.link.generic.system.port_used.wake_pkt_event_delay_if_families", 0, 0, &v10, 4uLL);
  v2 = *((_QWORD *)this + 11);
  if (v6)
  {
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      return;
    v7 = __error();
    v8 = strerror(*v7);
    *(_DWORD *)buf = 136315138;
    v13 = v8;
    v5 = "Failed to configure in-band wake packet event, error (%s)";
    goto LABEL_7;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Successfully configured in-band wake packet event", buf, 2u);
  }
}

_BYTE *TransportModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void TransportModule::shutdown(uint64_t a1, char a2, NSObject **a3)
{
  uint64_t *v4;
  NSObject *v5;
  _QWORD v6[5];
  dispatch_group_t group;
  char v8;

  v4 = (uint64_t *)(a1 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 1174405120;
  v6[2] = ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v6[3] = &__block_descriptor_tmp_3_0;
  v5 = *a3;
  v6[4] = a1;
  group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v8 = a2;
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v4, (uint64_t)v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN15TransportModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[21];
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    (*(void (**)(_QWORD))(*(_QWORD *)v1[21] + 56))(v1[21]);
  }
  v3 = (std::__shared_weak_count *)v1[22];
  v1[21] = 0;
  v1[22] = 0;
  if (!v3)
    goto LABEL_7;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v6)
      return;
  }
  else
  {
LABEL_7:
    v6 = (std::__shared_weak_count *)v1[26];
    v1[25] = 0;
    v1[26] = 0;
    if (!v6)
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void std::shared_ptr<TransportService>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void TransportModule::initialize(_QWORD *a1, NSObject **a2)
{
  uint64_t *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD v15[5];
  dispatch_group_t group;

  v3 = a1 + 15;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 1174405120;
  v15[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke;
  v15[3] = &__block_descriptor_tmp_21_1;
  v4 = *a2;
  v15[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<TransportModule>::execute_wrapped(v3, (uint64_t)v15);
  v5 = (std::__shared_weak_count *)a1[16];
  if (!v5 || (v6 = a1[15], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  v9 = operator new(8uLL);
  *v9 = a1;
  v10 = a1[17];
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = operator new(0x18uLL);
  *v13 = v9;
  v13[1] = v6;
  v13[2] = v8;
  dispatch_async_f(v10, v13, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<TransportModule>::execute_wrapped<TransportModule::initialize(dispatch::group_session)::$_0>(TransportModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<TransportModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<TransportModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  size_t v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  _QWORD v35[6];
  std::__shared_weak_count *v36;
  const void *v37;
  _QWORD v38[6];
  std::__shared_weak_count *v39;
  const void *v40;
  _QWORD aBlock[6];
  std::__shared_weak_count *v42;
  const void *v43;
  void **__dst;
  size_t v45;
  unint64_t v46;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 128);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 120), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = abm::kCommandNetworkInterfaceControl[0];
  v11 = strlen(abm::kCommandNetworkInterfaceControl[0]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v45 = v12;
    v46 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v46) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2;
  aBlock[3] = &__block_descriptor_tmp_6_0;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v42 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v43 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v43);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBD50];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBD50]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v22 = (void **)operator new(v23 + 1);
    v45 = v21;
    v46 = v24 | 0x8000000000000000;
    __dst = v22;
  }
  else
  {
    HIBYTE(v46) = v20;
    v22 = (void **)&__dst;
    if (!v20)
      goto LABEL_31;
  }
  memmove(v22, v19, v21);
LABEL_31:
  *((_BYTE *)v22 + v21) = 0;
  v38[0] = v16;
  v38[1] = 1174405120;
  v38[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7;
  v38[3] = &__block_descriptor_tmp_12;
  v38[4] = v1;
  v38[5] = v3;
  v39 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(v38);
  v40 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v40);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  v27 = (const void *)*MEMORY[0x1E0CFBD48];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBD48]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = (void **)operator new(v31 + 1);
    v45 = v29;
    v46 = v32 | 0x8000000000000000;
    __dst = v30;
  }
  else
  {
    HIBYTE(v46) = v28;
    v30 = (void **)&__dst;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, v29);
LABEL_45:
  *((_BYTE *)v30 + v29) = 0;
  v35[0] = v16;
  v35[1] = 1174405120;
  v35[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_13;
  v35[3] = &__block_descriptor_tmp_20_0;
  v35[4] = v1;
  v35[5] = v3;
  v36 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(v35);
  v37 = v34;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v37);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v46) < 0)
    operator delete(__dst);
  if (v36)
    std::__shared_weak_count::__release_weak(v36);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1BF5CC22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__shared_weak_count *v31;
  const void *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;

  if (v32)
    _Block_release(v32);
  if (a15)
  {
    std::__shared_weak_count::__release_weak(a15);
    if ((*(char *)(v33 - 105) & 0x80000000) == 0)
    {
LABEL_5:
      v35 = a23;
      if (!a23)
      {
LABEL_10:
        if (a31)
        {
          std::__shared_weak_count::__release_weak(a31);
          std::__shared_weak_count::__release_weak(v31);
          _Unwind_Resume(a1);
        }
        std::__shared_weak_count::__release_weak(v31);
        _Unwind_Resume(a1);
      }
LABEL_9:
      std::__shared_weak_count::__release_weak(v35);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v33 - 105) & 0x80000000) == 0)
  {
    goto LABEL_5;
  }
  operator delete(*(void **)(v33 - 128));
  v35 = a23;
  if (!a23)
    goto LABEL_10;
  goto LABEL_9;
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3;
      v14[3] = &__block_descriptor_tmp_4_0;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_3(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t value;
  size_t v7;
  void **v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t object;
  void *v13[3];
  unsigned int v14;
  xpc_object_t v15[4];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    v15[0] = v3;
  }
  else
  {
    v4 = xpc_null_create();
    v15[0] = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B8CD78](v4) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v4);
    goto LABEL_9;
  }
  v5 = xpc_null_create();
LABEL_8:
  v15[0] = v5;
LABEL_9:
  xpc_release(v4);
  v14 = -534716414;
  memset(v13, 170, sizeof(v13));
  value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), (const char *)*MEMORY[0x1E0CFAF10]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&v15[1], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  if (SHIBYTE(v13[2]) >= 0)
    v7 = HIBYTE(v13[2]);
  else
    v7 = (size_t)v13[1];
  if (v7 != strlen(abm::kActionConfigureDataThrottling))
    goto LABEL_26;
  v8 = SHIBYTE(v13[2]) >= 0 ? v13 : (void **)v13[0];
  if (memcmp(v8, abm::kActionConfigureDataThrottling, v7))
    goto LABEL_26;
  v9 = *(xpc_object_t *)(a1 + 40);
  v11 = v9;
  if (!v9)
  {
    v9 = xpc_null_create();
    v11 = v9;
    v10 = v15[0];
    if (v15[0])
      goto LABEL_22;
LABEL_24:
    v10 = xpc_null_create();
    goto LABEL_25;
  }
  xpc_retain(v9);
  v10 = v15[0];
  if (!v15[0])
    goto LABEL_24;
LABEL_22:
  xpc_retain(v10);
LABEL_25:
  TransportModule::configureDataThrottling_sync(v2, &v11);
  v14 = 0;
  xpc_release(v10);
  xpc_release(v9);
  v11 = 0;
LABEL_26:
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 48), &v14, v15);
  if (SHIBYTE(v13[2]) < 0)
    operator delete(v13[0]);
  xpc_release(v15[0]);
}

void sub_1BF5CC684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;

  xpc_release(v25);
  xpc_release(v24);
  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

xpc_object_t xpc::dict::object_proxy::operator xpc::object@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  xpc_object_t value;
  xpc_object_t result;

  value = xpc_dictionary_get_value(**(xpc_object_t **)a1, *(const char **)(a1 + 8));
  *a2 = value;
  if (value)
    return xpc_retain(value);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

uint64_t TransportModule::configureDataThrottling_sync(uint64_t a1, xpc_object_t *a2)
{
  NSObject *v4;
  xpc_object_t value;
  unsigned int v6;
  xpc_object_t v7;
  uint64_t v8;
  uint64_t *v9;
  xpc_object_t object[6];

  v4 = *(NSObject **)(a1 + 88);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(object[0]) = 0;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Configure data throttling", (uint8_t *)object, 2u);
  }
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFAF68]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v6 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFAF80]);
  object[0] = v7;
  if (v7)
    xpc_retain(v7);
  else
    object[0] = xpc_null_create();
  v8 = xpc::dyn_cast_or_default((xpc *)object, 0);
  xpc_release(object[0]);
  v9 = *(uint64_t **)(a1 + 184);
  if (v9)
  {
    object[0] = (xpc_object_t)MEMORY[0x1E0C809B0];
    object[1] = (xpc_object_t)0x40000000;
    object[2] = ___ZN4data16TransportService5State9setConfigENS0_16ThrottlingConfigE_block_invoke;
    object[3] = &__block_descriptor_tmp_25;
    object[4] = v9;
    object[5] = (xpc_object_t)(v6 | (unint64_t)(v8 << 32));
    ctu::SharedSynchronizable<data::TransportService::State>::execute_wrapped(v9 + 9, (uint64_t)object);
  }
  return 0;
}

void sub_1BF5CC934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15TransportModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_7(_QWORD *a1, void **a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  xpc_object_t object;
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_12:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZN15TransportModule10initializeEN8dispatch13group_sessionE_block_invoke_2_8;
      v14[3] = &__block_descriptor_tmp_11;
      v10 = *a2;
      v14[4] = v7;
      object = v10;
      if (v10)
      {
        xpc_retain(v10);
        v11 = *a3;
        if (!*a3)
          goto LABEL_9;
      }
      else
      {
        object = xpc_null_create();
        v11 = *a3;
        if (!*a3)
        {
LABEL_9:
          aBlock = v11;
          ctu::SharedSynchronizable<TransportModule>::execute_wrapped((uint64_t *)(v7 + 120), (uint64_t)v14);
          if (aBlock)
            _Block_release(aBlock);
          xpc_release(object);
          object = 0;
          goto LABEL_12;
        }
      }
      v11 = _Block_copy(v11);
      goto LABEL_9;
    }
  }
}

