void sub_1BF706F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a15 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a15 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

void sub_1BF707010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    JUMPOUT(0x1BF707000);
  JUMPOUT(0x1BF706FF0);
}

uint64_t PowerBudget::to_string@<X0>(PowerBudget *this@<X0>, _BYTE *a2@<X8>)
{
  __int128 v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;
  uint64_t v12;
  size_t v13;
  _BYTE *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  void *__src[2];
  void *__p[2];
  __int128 v27;
  __int128 v28;
  _OWORD v29[9];
  unint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v30 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[7] = v4;
  v29[8] = v4;
  v29[5] = v4;
  v29[6] = v4;
  v29[3] = v4;
  v29[4] = v4;
  v29[1] = v4;
  v29[2] = v4;
  v28 = v4;
  v29[0] = v4;
  *(_OWORD *)__p = v4;
  v27 = v4;
  v24 = v4;
  *(_OWORD *)__src = v4;
  v22 = v4;
  v23 = v4;
  v21 = v4;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"{ ", 2);
  v31[0] = off_1E7920848;
  v31[1] = &v21;
  v5 = v31;
  v32 = v31;
  v8 = *(char **)this;
  v6 = (char *)this + 8;
  v7 = v8;
  if (v8 == v6)
  {
    v12 = 4;
  }
  else
  {
    while ((*(unsigned int (**)(_QWORD *, char *, _QWORD *))(*v5 + 48))(v5, v7 + 28, (_QWORD *)v7 + 4))
    {
      v9 = (char *)*((_QWORD *)v7 + 1);
      v10 = v7;
      if (v9)
      {
        do
        {
          v7 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v10 + 2);
          v11 = *(_QWORD *)v7 == (_QWORD)v10;
          v10 = v7;
        }
        while (!v11);
      }
      if (v7 == v6)
        break;
      v5 = v32;
      if (!v32)
        std::__throw_bad_function_call[abi:ne180100]();
    }
    v5 = v32;
    if (v32 == v31)
    {
      v12 = 4;
      v5 = v31;
    }
    else
    {
      if (!v32)
        goto LABEL_17;
      v12 = 5;
    }
  }
  (*(void (**)(void))(*v5 + 8 * v12))();
LABEL_17:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"}", 1);
  if ((BYTE8(v28) & 0x10) != 0)
  {
    v14 = (_BYTE *)v28;
    if ((void *)v28 < __src[1])
    {
      *(void **)&v28 = __src[1];
      v14 = __src[1];
    }
    v15 = __src[0];
    v13 = v14 - (char *)__src[0];
    if ((unint64_t)(v14 - (char *)__src[0]) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_34;
  }
  else
  {
    if ((BYTE8(v28) & 8) == 0)
    {
      v13 = 0;
      a2[23] = 0;
      goto LABEL_30;
    }
    v15 = (const void *)*((_QWORD *)&v23 + 1);
    v13 = *((_QWORD *)&v24 + 1) - *((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v24 + 1) - *((_QWORD *)&v23 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_34:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v18 = operator new(v16 + 1);
    *((_QWORD *)a2 + 1) = v13;
    *((_QWORD *)a2 + 2) = v17 | 0x8000000000000000;
    *(_QWORD *)a2 = v18;
    a2 = v18;
    goto LABEL_29;
  }
  a2[23] = v13;
  if (v13)
LABEL_29:
    memmove(a2, v15, v13);
LABEL_30:
  a2[v13] = 0;
  *(_QWORD *)&v21 = *MEMORY[0x1E0DE4F50];
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v21 + *(_QWORD *)(v21 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v22 = v19;
  *((_QWORD *)&v22 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v27) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8C364](v29);
}

void sub_1BF7072D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF7072EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v11;
  uint64_t v12;

  v11 = *(_QWORD **)(v9 - 64);
  if (v11 == (_QWORD *)(v9 - 88))
  {
    v12 = 4;
    v11 = (_QWORD *)(v9 - 88);
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E79207C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E79207C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, char *a2, unsigned int *a3)
{
  uint64_t v5;
  id v6;
  unint64_t v7;

  if (*((_BYTE *)a3 + 4))
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(id *)(v5 + 24);
    if (!v6)
    {
      v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      *(_QWORD *)(v5 + 24) = v6;
      v7 = *a2;
      if (v7 > 2)
        return 1;
      goto LABEL_4;
    }
    v7 = *a2;
    if (v7 <= 2)
LABEL_4:
      objc_msgSend(v6, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *a3), **((_QWORD **)&unk_1E79208B8 + v7));
  }
  return 1;
}

uint64_t std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN11PowerBudget9getNSDictEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN11PowerBudget9getNSDictEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN11PowerBudget9getNSDictEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN11PowerBudget9getNSDictEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<PowerBudget::getNSDict(void)::$_0,std::allocator<PowerBudget::getNSDict(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

_QWORD *std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E7920848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E7920848;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::operator()(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v3;
  void **v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  unsigned __int8 v10;

  if (!*(_BYTE *)(a3 + 4))
    return 1;
  v3 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
  PowerBudget::asString(*a2, (char *)__p);
  v4 = (v10 & 0x80u) == 0 ? __p : (void **)__p[0];
  v5 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, (uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" = ", 3);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  if (((char)v10 & 0x80000000) == 0)
    return 1;
  operator delete(__p[0]);
  return 1;
}

void sub_1BF7075BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZNK11PowerBudget9to_stringEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZNK11PowerBudget9to_stringEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZNK11PowerBudget9to_stringEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK11PowerBudget9to_stringEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<PowerBudget::to_string(void)::$_0,std::allocator<PowerBudget::to_string(void)::$_0>,BOOL ()(abm::BasebandCPMSPowerBudgetScale const&,std::optional<unsigned int> const&)>::target_type()
{
}

void CircularFileLogWriter::create(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = operator new(0xB8uLL);
  CircularFileLogWriter::CircularFileLogWriter((uint64_t)v4, a1);
  *a2 = v4;
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_1E7920A70;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  a2[1] = v5;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v4 + 2);
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    *((_QWORD *)v4 + 1) = v4;
    *((_QWORD *)v4 + 2) = v5;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    *((_QWORD *)v4 + 1) = v4;
    *((_QWORD *)v4 + 2) = v5;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BF70775C(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF70777C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1BF707790(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::CircularFileLogWriter(uint64_t a1, __int128 *a2)
{
  NSObject *v4;
  NSObject *v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = MEMORY[0x1E0DE3B50] + 16;
  v4 = dispatch_queue_create("CircularFileLogWriter", 0);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
  {
    v5 = v4;
    dispatch_retain(v4);
    *(_QWORD *)(a1 + 32) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_QWORD *)a1 = off_1E79208E0;
  *(_QWORD *)(a1 + 40) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 72), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 72) = v7;
  }
  v8 = (std::string *)(a1 + 96);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v9 = a2[3];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 88);
  *(_OWORD *)(a1 + 120) = v10;
  *(_QWORD *)(a1 + 144) = 1;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return a1;
}

void sub_1BF7078E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  uint64_t v6;

  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(_QWORD *)(v1 + 40);
      *(_QWORD *)(v1 + 40) = 0;
      if (!v6)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  v6 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (!v6)
  {
LABEL_4:
    ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
    _Unwind_Resume(a1);
  }
LABEL_7:
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::open(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter4openEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_36;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_6;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

void ___ZN21CircularFileLogWriter4openEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v4;
  size_t v5;
  unint64_t v6;
  void **v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  uint64_t v23;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  timespec v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  DIR *v34;
  DIR *v35;
  dirent *v36;
  std::string __dst;
  stat v38;
  _QWORD v39[5];

  v39[2] = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 156) = 0;
  if (*(_QWORD *)(v1 + 40))
  {
    std::ostream::flush();
    v2 = *(_QWORD **)(v1 + 40);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    v3 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    *(_QWORD *)(v1 + 40) = 0;
  }
  *(_QWORD *)(v1 + 144) = *(_QWORD *)(v1 + 120) / *(_QWORD *)(v1 + 128);
  v4 = *(char *)(v1 + 95);
  if (v4 >= 0)
    v5 = *(unsigned __int8 *)(v1 + 95);
  else
    v5 = *(_QWORD *)(v1 + 80);
  v6 = v5 + 8;
  memset(&__dst, 170, sizeof(__dst));
  if (v5 + 8 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void **)(v1 + 72);
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v5 + 8;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v5 + 8;
    if (!v5)
      goto LABEL_21;
  }
  if (v4 >= 0)
    v11 = (void *)(v1 + 72);
  else
    v11 = *v7;
  memmove(p_dst, v11, v5);
LABEL_21:
  strcpy((char *)p_dst + v5, "/latest-");
  v12 = *(char *)(v1 + 71);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)(v1 + 48);
  else
    v13 = *(const std::string::value_type **)(v1 + 48);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(v1 + 71);
  else
    v14 = *(_QWORD *)(v1 + 56);
  v15 = std::string::append(&__dst, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(_QWORD *)&v38.st_uid = *((_QWORD *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)&v38.st_dev = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = *(char *)(v1 + 119);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)(v1 + 96);
  else
    v18 = *(const std::string::value_type **)(v1 + 96);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(v1 + 119);
  else
    v19 = *(_QWORD *)(v1 + 104);
  v20 = std::string::append((std::string *)&v38, v18, v19);
  v21 = v20->__r_.__value_.__r.__words[0];
  v39[0] = v20->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v39 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v1 + 183) < 0)
    operator delete(*(void **)(v1 + 160));
  v23 = v39[0];
  *(_QWORD *)(v1 + 160) = v21;
  *(_QWORD *)(v1 + 168) = v23;
  *(_QWORD *)(v1 + 175) = *(_QWORD *)((char *)v39 + 7);
  *(_BYTE *)(v1 + 183) = v22;
  if (SHIBYTE(v38.st_gid) < 0)
  {
    operator delete(*(void **)&v38.st_dev);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_37;
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_37:
  v24 = *(char *)(v1 + 95);
  if (v24 >= 0)
    v25 = *(unsigned __int8 *)(v1 + 95);
  else
    v25 = *(_QWORD *)(v1 + 80);
  v26 = v25 + 1;
  memset(&v38, 170, 24);
  if (v25 + 1 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    v27 = (char *)operator new(v30 + 1);
    v38.st_ino = v25 + 1;
    *(_QWORD *)&v38.st_uid = v31 | 0x8000000000000000;
    *(_QWORD *)&v38.st_dev = v27;
  }
  else
  {
    memset(&v38, 0, 24);
    v27 = (char *)&v38;
    HIBYTE(v38.st_gid) = v25 + 1;
    if (!v25)
    {
      LOWORD(v38.st_dev) = 47;
      if ((v24 & 0x80000000) == 0)
        goto LABEL_44;
      goto LABEL_57;
    }
  }
  if (v24 >= 0)
    v32 = (void *)(v1 + 72);
  else
    v32 = *v7;
  memmove(v27, v32, v25);
  *(_WORD *)&v27[v25] = 47;
  if (v24 < 0)
LABEL_57:
    operator delete(*v7);
LABEL_44:
  *(_OWORD *)v7 = *(_OWORD *)&v38.st_dev;
  *(_QWORD *)(v1 + 88) = *(_QWORD *)&v38.st_uid;
  v28.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v28.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v38.st_blksize = v28;
  *(timespec *)v38.st_qspare = v28;
  v38.st_birthtimespec = v28;
  *(timespec *)&v38.st_size = v28;
  v38.st_mtimespec = v28;
  v38.st_ctimespec = v28;
  *(timespec *)&v38.st_uid = v28;
  v38.st_atimespec = v28;
  *(timespec *)&v38.st_dev = v28;
  if (*(char *)(v1 + 95) >= 0)
    v29 = (const char *)(v1 + 72);
  else
    v29 = *(const char **)(v1 + 72);
  if (!stat(v29, &v38)
    && (*(char *)(v1 + 95) >= 0 ? (v33 = (const char *)(v1 + 72)) : (v33 = *(const char **)(v1 + 72)),
        (v34 = opendir(v33), (v35 = v34) != 0) && (v36 = readdir(v34), closedir(v35), v36)))
  {
    CircularFileLogWriter::getFileIndex_sync((CircularFileLogWriter *)v1, (unsigned int *)(v1 + 156), (unsigned int *)(v1 + 152));
  }
  else
  {
    support::fs::createDir((const char *)(v1 + 72), 0x1EDu, 1);
  }
  CircularFileLogWriter::openNewLog_sync((CircularFileLogWriter *)v1);
}

void sub_1BF707DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::close_sync(CircularFileLogWriter *this)
{
  uint64_t result;
  _QWORD *v3;

  *((_QWORD *)this + 19) = 0;
  result = *((_QWORD *)this + 5);
  if (!result)
  {
    *((_QWORD *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (std::filebuf::close())
  {
    result = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularFileLogWriter::getFileIndex_sync(CircularFileLogWriter *this, unsigned int *a2, unsigned int *a3)
{
  __int128 v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  std::sub_match<const char *> *v13;
  std::sub_match<const char *> *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  __int128 v18;
  const char *second;
  std::sub_match<const char *> *first;
  int v21;
  const char *v22;
  uint64_t v23;
  __int128 *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  std::string::value_type **v28;
  std::string::value_type *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string *v32;
  std::string::value_type *v33;
  __int128 *v34;
  std::string::size_type *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  std::string::value_type v40;
  unsigned int v41;
  unsigned int v42;
  void *v43;
  std::sub_match<const char *> *v44;
  std::__shared_weak_count *v45;
  void **v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unsigned int *v49;
  char v50;
  unsigned int v51;
  _BYTE v52[40];
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void *__p;
  std::sub_match<const char *> *v60;
  uint64_t v61;
  std::locale v62[2];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  std::string __str[2];
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;

  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v64 = v6;
  v65 = v6;
  *(_OWORD *)&v62[0].__locale_ = v6;
  v63 = v6;
  v52[23] = 10;
  strcpy(v52, "([0-9]{8})");
  v7 = *((char *)this + 119);
  if (v7 >= 0)
    v8 = (char *)this + 96;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 12);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 119);
  else
    v9 = *((_QWORD *)this + 13);
  v10 = std::string::append((std::string *)v52, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __str[0].__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((uint64_t)v62, (uint64_t)__str, 0);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str[0].__r_.__value_.__l.__data_);
    if ((v52[23] & 0x80000000) == 0)
      goto LABEL_9;
LABEL_66:
    operator delete(*(void **)v52);
    goto LABEL_9;
  }
  if ((v52[23] & 0x80000000) != 0)
    goto LABEL_66;
LABEL_9:
  __p = 0;
  v60 = 0;
  v61 = 0;
  support::fs::readDir((const char *)this + 72, (uint64_t)&__p);
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v53 = 0xAAAAAAAAAAAAAAAALL;
  v55 = 0xAAAAAAAAAAAAAA00;
  v57 = v12;
  v54 = 0;
  v56 = 0uLL;
  LOBYTE(v57) = 0;
  BYTE8(v57) = 0;
  v58 = 0;
  memset(v52, 0, sizeof(v52));
  v13 = (std::sub_match<const char *> *)__p;
  v14 = v60;
  if (__p == v60)
  {
    *a2 = 0;
    *a3 = 0;
    v44 = (std::sub_match<const char *> *)__p;
    if (!__p)
      goto LABEL_63;
    goto LABEL_68;
  }
  v49 = a2;
  v15 = 0;
  v16 = 0;
  v17 = 1;
  do
  {
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v72 = v18;
    v69 = 0xAAAAAAAAAAAAAA00;
    __str[1].__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAAAALL;
    v67 = 0;
    v68 = 0;
    v70 = 0;
    v71 = 0;
    LOBYTE(v72) = 0;
    BYTE8(v72) = 0;
    v73 = 0;
    memset(__str, 0, 41);
    second = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)second >= 0)
      first = v13;
    else
      first = (std::sub_match<const char *> *)v13->first;
    if ((char)second < 0)
      second = v13->second;
    v21 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v62, first, (std::sub_match<const char *> *)&second[(_QWORD)first], (std::vector<std::csub_match> *)__str, 0);
    v22 = (const char *)*((unsigned __int8 *)&v13->matched + 7);
    if ((char)v22 >= 0)
      v23 = (uint64_t)v13;
    else
      v23 = (uint64_t)v13->first;
    if ((char)v22 < 0)
      v22 = v13->second;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)v52, v23, (std::sub_match<std::__wrap_iter<const char *>> *)&v22[v23], (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
    {
      __str[0].__r_.__value_.__l.__size_ = __str[0].__r_.__value_.__r.__words[0];
      operator delete(__str[0].__r_.__value_.__l.__data_);
    }
    if (v21)
    {
      memset(__str, 170, 24);
      v24 = &v53;
      if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        v24 = (__int128 *)(*(_QWORD *)v52 + 16);
      if (!*(_BYTE *)v24)
      {
        memset(__str, 0, 24);
LABEL_50:
        v41 = std::stoul(__str, 0, 10);
        if ((v17 & 1) != 0)
          v42 = v41;
        else
          v42 = v16;
        if (v42 >= v41)
          v16 = v41;
        else
          v16 = v42;
        if (v15 < v41)
          v15 = v41 + 1;
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str[0].__r_.__value_.__l.__data_);
        v17 = 0;
        goto LABEL_12;
      }
      v50 = v17;
      v51 = v15;
      v25 = v16;
      v26 = (uint64_t *)&v52[24];
      if (*(_QWORD *)&v52[8] != *(_QWORD *)v52)
        v26 = *(uint64_t **)v52;
      v27 = *v26;
      v28 = (std::string::value_type **)(*(_QWORD *)v52 + 8);
      if (*(_QWORD *)&v52[8] == *(_QWORD *)v52)
        v28 = (std::string::value_type **)&v52[32];
      v29 = *v28;
      v30 = (std::string::size_type)&(*v28)[-v27];
      if (v30 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v30 > 0x16)
      {
        v38 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17)
          v38 = v30 | 7;
        v39 = v38 + 1;
        v31 = (std::string *)operator new(v38 + 1);
        __str[0].__r_.__value_.__l.__size_ = v30;
        __str[0].__r_.__value_.__r.__words[2] = v39 | 0x8000000000000000;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
        if ((std::string::value_type *)v27 != v29)
          goto LABEL_36;
      }
      else
      {
        *((_BYTE *)&__str[0].__r_.__value_.__s + 23) = *(_BYTE *)v28 - v27;
        v31 = __str;
        if ((std::string::value_type *)v27 != v29)
        {
LABEL_36:
          if (v30 < 0x20 || (unint64_t)v31 - v27 < 0x20)
          {
            v32 = v31;
            v33 = (std::string::value_type *)v27;
          }
          else
          {
            v32 = (std::string *)((char *)v31 + (v30 & 0xFFFFFFFFFFFFFFE0));
            v33 = (std::string::value_type *)(v27 + (v30 & 0xFFFFFFFFFFFFFFE0));
            v34 = (__int128 *)(v27 + 16);
            v35 = &v31->__r_.__value_.__r.__words[2];
            v36 = v30 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v37 = *v34;
              *((_OWORD *)v35 - 1) = *(v34 - 1);
              *(_OWORD *)v35 = v37;
              v34 += 2;
              v35 += 4;
              v36 -= 32;
            }
            while (v36);
            if (v30 == (v30 & 0x7FFFFFFFFFFFFFE0))
              goto LABEL_49;
          }
          do
          {
            v40 = *v33++;
            v32->__r_.__value_.__s.__data_[0] = v40;
            v32 = (std::string *)((char *)v32 + 1);
          }
          while (v33 != v29);
LABEL_49:
          v32->__r_.__value_.__s.__data_[0] = 0;
          v16 = v25;
          v17 = v50;
          v15 = v51;
          goto LABEL_50;
        }
      }
      v32 = v31;
      goto LABEL_49;
    }
LABEL_12:
    ++v13;
  }
  while (v13 != v14);
  v43 = *(void **)v52;
  *v49 = v16;
  *a3 = v15;
  if (v43)
  {
    *(_QWORD *)&v52[8] = v43;
    operator delete(v43);
  }
  v44 = (std::sub_match<const char *> *)__p;
  if (!__p)
  {
LABEL_63:
    v45 = (std::__shared_weak_count *)v65;
    if (!(_QWORD)v65)
      goto LABEL_79;
LABEL_75:
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
    goto LABEL_79;
  }
LABEL_68:
  v46 = (void **)v60;
  if (v60 == v44)
  {
    v60 = v44;
    operator delete(v44);
    v45 = (std::__shared_weak_count *)v65;
    if (!(_QWORD)v65)
      goto LABEL_79;
    goto LABEL_75;
  }
  do
  {
    if (*((char *)v46 - 1) < 0)
      operator delete(*(v46 - 3));
    v46 -= 3;
  }
  while (v46 != (void **)v44);
  v60 = v44;
  operator delete(__p);
  v45 = (std::__shared_weak_count *)v65;
  if ((_QWORD)v65)
    goto LABEL_75;
LABEL_79:
  std::locale::~locale(v62);
}

void sub_1BF70834C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,std::locale a36)
{
  std::vector<std::string>::~vector[abi:ne180100](&a33);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a36);
  _Unwind_Resume(a1);
}

void CircularFileLogWriter::openNewLog_sync(CircularFileLogWriter *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::ios_base *v17;
  uint64_t v18;
  std::string *v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;

  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 0;
    v4 = (char *)this + 160;
    v5 = (char *)this + 160;
    if ((*((char *)this + 183) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_31;
  }
  std::ostream::flush();
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (char *)this + 160;
  v5 = (char *)this + 160;
  if (*((char *)this + 183) < 0)
LABEL_31:
    v5 = *(const char **)v4;
LABEL_7:
  unlink(v5);
  v6 = *((unsigned int *)this + 38);
  *((_DWORD *)this + 38) = v6 + 1;
  CircularFileLogWriter::generateFileName_sync(this, v6, &v20);
  v7 = *((char *)this + 95);
  if (v7 >= 0)
    v8 = (char *)this + 72;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 9);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 95);
  else
    v9 = *((_QWORD *)this + 10);
  v10 = std::string::insert(&v20, 0, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v22 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v12 = operator new(0x238uLL);
  v13 = MEMORY[0x1E0DE4FB0];
  v14 = MEMORY[0x1E0DE4FB0] + 64;
  v12[52] = MEMORY[0x1E0DE4FB0] + 64;
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *v12 = v15;
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v15 - 24)) = v16;
  v17 = (std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24));
  std::ios_base::init(v17, v12 + 1);
  v17[1].__vftable = 0;
  v17[1].__fmtflags_ = -1;
  *v12 = v13 + 24;
  v12[52] = v14;
  MEMORY[0x1C3B8C178](v12 + 1);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)), *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 32) | 4);
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v12;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v12 = (_QWORD *)*((_QWORD *)this + 5);
  }
  if (v12[16])
  {
    support::fs::getFileName(&v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v20;
    else
      v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (*((char *)this + 183) < 0)
      v4 = *(const char **)v4;
    symlink((const char *)v19, v4);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  CircularFileLogWriter::clearOldLogs_sync(this);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
}

void sub_1BF708644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::close(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5closeEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_4_4;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_6;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t ___ZN21CircularFileLogWriter5closeEv_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;

  v1 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v1 + 152) = 0;
  result = *(_QWORD *)(v1 + 40);
  if (!result)
  {
    *(_QWORD *)(v1 + 40) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = *(_QWORD **)(v1 + 40);
  if (std::filebuf::close())
  {
    result = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 40) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularFileLogWriter::clear(CircularFileLogWriter *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN21CircularFileLogWriter5clearEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_5_12;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_6;
  block[4] = (char *)this + 8;
  block[5] = &v4;
  v2 = (char *)this + 24;
  v1 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t ___ZN21CircularFileLogWriter5clearEv_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::clear_sync(*(CircularFileLogWriter **)(a1 + 32));
}

uint64_t CircularFileLogWriter::clear_sync(CircularFileLogWriter *this)
{
  _QWORD *v2;
  uint64_t v3;
  const char **v4;

  *((_QWORD *)this + 19) = 0;
  if (!*((_QWORD *)this + 5))
  {
    *((_QWORD *)this + 5) = 0;
    goto LABEL_8;
  }
  std::ostream::flush();
  v2 = (_QWORD *)*((_QWORD *)this + 5);
  if (!std::filebuf::close())
  {
    std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 4);
    v3 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!v3)
      goto LABEL_8;
    goto LABEL_7;
  }
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
LABEL_7:
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
LABEL_8:
  v4 = (const char **)((char *)this + 160);
  if (*((char *)this + 183) < 0)
    unlink(*v4);
  else
    unlink((const char *)v4);
  return support::fs::removeDir((const char *)this + 72);
}

void CircularFileLogWriter::write(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD v11[6];
  std::__shared_weak_count *v12;

  v3 = (uint64_t *)(a1 + 8);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke;
  v11[3] = &__block_descriptor_tmp_6_9;
  v5 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  v11[4] = a1;
  v11[5] = v5;
  v12 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(v3, (uint64_t)v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void ___ZN21CircularFileLogWriter5writeENSt3__110shared_ptrIN3ctu10LogMessageEEE_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8[2];

  v2 = a1[4];
  v3 = (std::__shared_weak_count *)a1[6];
  v8[0] = a1[5];
  v8[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  CircularFileLogWriter::write_sync(v2, v8);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF708A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t CircularFileLogWriter::write_sync(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  CircularFileLogWriter *v3;
  uint64_t v4;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  size_t v23;
  std::locale::__imp *p_dst;
  uint64_t v25;
  const void **v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  std::locale::__imp *locale;
  uint64_t v31;
  const std::locale::facet *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  _OWORD v42[9];
  unint64_t v43;
  std::locale __dst;
  size_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (!*a2)
    return result;
  v3 = (CircularFileLogWriter *)result;
  v4 = *(_QWORD *)(result + 40);
  if (!v4 || !*(_QWORD *)(v4 + 128))
    return result;
  if (*(char *)(v2 + 71) < 0)
  {
    v6 = *(_QWORD *)(v2 + 56) + 1;
    if (v6 < 2)
      return result;
  }
  else
  {
    v6 = *(unsigned __int8 *)(v2 + 71) + 1;
    if (v6 < 2)
      return result;
  }
  v43 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v42[7] = v7;
  v42[8] = v7;
  v42[5] = v7;
  v42[6] = v7;
  v42[3] = v7;
  v42[4] = v7;
  v42[1] = v7;
  v42[2] = v7;
  v41 = v7;
  v42[0] = v7;
  *(_OWORD *)__p = v7;
  v40 = v7;
  v37 = v7;
  v38 = v7;
  v35 = v7;
  v36 = v7;
  v34 = v7;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v34);
  v8 = v35;
  *(_DWORD *)((char *)&v35 + *(_QWORD *)(v35 - 24) + 8) |= 4u;
  *(_QWORD *)((char *)&v35 + *(_QWORD *)(v8 - 24) + 16) = 3;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" [", 2);
  LOBYTE(__dst.__locale_) = ctu::asChar();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__dst, 1);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] ", 2);
  v13 = *(char *)(*a2 + 47);
  if (v13 >= 0)
    v14 = *a2 + 24;
  else
    v14 = *(_QWORD *)(*a2 + 24);
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(*a2 + 47);
  else
    v15 = *(_QWORD *)(*a2 + 32);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
  v17 = (char *)&v35 + *(_QWORD *)(v35 - 24);
  if ((v17[32] & 5) != 0)
  {
    v18 = v6 - 1;
    v19 = *((_QWORD *)v3 + 16);
    if (v6 - 1 > v19)
      goto LABEL_52;
LABEL_18:
    v20 = *((_QWORD *)v3 + 5) + *(_QWORD *)(**((_QWORD **)v3 + 5) - 24);
    if ((*(_BYTE *)(v20 + 32) & 5) != 0)
    {
      if (v18 - 1 <= v19)
      {
LABEL_23:
        if (*(char *)(*a2 + 71) < 0)
        {
          if (*(_QWORD *)(*a2 + 56))
            goto LABEL_27;
        }
        else if (*(_BYTE *)(*a2 + 71))
        {
LABEL_27:
          v21 = (_QWORD *)*((_QWORD *)v3 + 5);
          v22 = BYTE8(v41);
          if ((BYTE8(v41) & 0x10) == 0)
          {
LABEL_28:
            if ((v22 & 8) == 0)
            {
              v23 = 0;
              HIBYTE(v46) = 0;
              p_dst = (std::locale::__imp *)&__dst;
              goto LABEL_43;
            }
            v26 = (const void **)&v36 + 1;
            v25 = *((_QWORD *)&v37 + 1);
LABEL_35:
            v27 = *v26;
            v23 = v25 - (_QWORD)*v26;
            if (v23 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v23 >= 0x17)
            {
              v28 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v23 | 7) != 0x17)
                v28 = v23 | 7;
              v29 = v28 + 1;
              p_dst = (std::locale::__imp *)operator new(v28 + 1);
              v45 = v23;
              v46 = v29 | 0x8000000000000000;
              __dst.__locale_ = p_dst;
            }
            else
            {
              HIBYTE(v46) = v25 - *(_BYTE *)v26;
              p_dst = (std::locale::__imp *)&__dst;
              if (!v23)
                goto LABEL_43;
            }
            memmove(p_dst, v27, v23);
LABEL_43:
            *((_BYTE *)p_dst + v23) = 0;
            if (v46 >= 0)
              locale = (std::locale::__imp *)&__dst;
            else
              locale = __dst.__locale_;
            if (v46 >= 0)
              v31 = HIBYTE(v46);
            else
              v31 = v45;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)locale, v31);
            if (SHIBYTE(v46) < 0)
              operator delete(__dst.__locale_);
            std::ostream::write();
            std::ios_base::getloc((const std::ios_base *)(*((_QWORD *)v3 + 5) + *(_QWORD *)(**((_QWORD **)v3 + 5) - 24)));
            v32 = std::locale::use_facet(&__dst, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
            std::locale::~locale(&__dst);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_52;
          }
LABEL_31:
          v25 = v41;
          if ((unint64_t)v41 < *((_QWORD *)&v38 + 1))
          {
            *(_QWORD *)&v41 = *((_QWORD *)&v38 + 1);
            v25 = *((_QWORD *)&v38 + 1);
          }
          v26 = (const void **)&v38;
          goto LABEL_35;
        }
        v21 = (_QWORD *)*((_QWORD *)v3 + 5);
        v22 = BYTE8(v41);
        if ((BYTE8(v41) & 0x10) == 0)
          goto LABEL_28;
        goto LABEL_31;
      }
    }
    else
    {
      (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v20 + 40)
                                                                                          + 32))(&__dst, *(_QWORD *)(v20 + 40), 0, 1, 16);
      if (v47 + v18 <= *((_QWORD *)v3 + 16))
        goto LABEL_23;
    }
    CircularFileLogWriter::openNewLog_sync(v3);
    goto LABEL_23;
  }
  (*(void (**)(std::locale *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5) + 32))(&__dst, *((_QWORD *)v17 + 5), 0, 1, 16);
  v18 = v47 + v6;
  v19 = *((_QWORD *)v3 + 16);
  if (v47 + v6 <= v19)
    goto LABEL_18;
LABEL_52:
  *(_QWORD *)&v34 = *MEMORY[0x1E0DE4F50];
  v33 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)&v34 + *(_QWORD *)(v34 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v35 = v33;
  *((_QWORD *)&v35 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v40) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8C364](v42);
}

void sub_1BF708F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF708F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF708F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF708FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 217) < 0)
  {
    operator delete(*(void **)(v9 - 240));
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIN3ctu10LogMessageEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void CircularFileLogWriter::write(CircularFileLogWriter *this, const char *a2, uint64_t a3)
{
  NSObject *v3;
  char *v4;
  _QWORD v5[7];
  _QWORD *v6;
  _QWORD block[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke;
  v5[3] = &__block_descriptor_tmp_7_8;
  v5[4] = this;
  v5[5] = a2;
  v5[6] = a3;
  v6 = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_16_6;
  block[4] = (char *)this + 8;
  block[5] = &v6;
  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  if (*((_QWORD *)v4 + 1))
    dispatch_async_and_wait(v3, block);
  else
    dispatch_sync(v3, block);
}

uint64_t ___ZN21CircularFileLogWriter5writeEPKcm_block_invoke(uint64_t a1)
{
  return CircularFileLogWriter::write_sync(*(_QWORD *)(a1 + 32), *(const char **)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t CircularFileLogWriter::write_sync(uint64_t this, const char *a2, uint64_t a3)
{
  uint64_t v3;
  CircularFileLogWriter *v4;
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[16];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = a3;
    if (a3)
    {
      v4 = (CircularFileLogWriter *)this;
      v5 = *(_QWORD **)(this + 40);
      if (v5)
      {
        if (v5[16])
        {
          v6 = a2;
          if (*(_BYTE *)(this + 136))
          {
            while (1)
            {
              v9 = (char *)v5 + *(_QWORD *)(*v5 - 24);
              if ((v9[32] & 5) != 0)
              {
                v10 = *((_QWORD *)v4 + 16);
                if (v3 - 1 <= v10)
                  goto LABEL_20;
              }
              else
              {
                (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v9 + 5)
                                                                                               + 32))(v13, *((_QWORD *)v9 + 5), 0, 1, 16);
                v10 = *((_QWORD *)v4 + 16);
                if (v14 + v3 <= v10)
                  goto LABEL_20;
              }
              v11 = *((_QWORD *)v4 + 5) + *(_QWORD *)(**((_QWORD **)v4 + 5) - 24);
              if ((*(_BYTE *)(v11 + 32) & 5) != 0)
                break;
              (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 40)
                                                                                             + 32))(v13, *(_QWORD *)(v11 + 40), 0, 1, 16);
              v7 = v14;
              if (v10 != v14)
                goto LABEL_8;
LABEL_9:
              CircularFileLogWriter::openNewLog_sync(v4);
              v5 = (_QWORD *)*((_QWORD *)v4 + 5);
            }
            v7 = -1;
LABEL_8:
            v8 = v10 - v7;
            std::ostream::write();
            v6 += v8;
            v3 -= v8;
            goto LABEL_9;
          }
          v12 = (char *)v5 + *(_QWORD *)(*v5 - 24);
          if ((v12[32] & 5) != 0)
          {
            if ((unint64_t)(a3 - 1) <= *(_QWORD *)(this + 128))
              goto LABEL_20;
          }
          else
          {
            (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 5)
                                                                                           + 32))(v13, *((_QWORD *)v12 + 5), 0, 1, 16);
            if ((unint64_t)(v14 + v3) <= *((_QWORD *)v4 + 16))
            {
LABEL_20:
              this = *((_QWORD *)v4 + 5);
              if (this)
                return std::ostream::write();
              return this;
            }
          }
          CircularFileLogWriter::openNewLog_sync(v4);
          goto LABEL_20;
        }
      }
    }
  }
  return this;
}

void CircularFileLogWriter::setCapacity(CircularFileLogWriter *this, uint64_t a2)
{
  _QWORD v2[6];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke;
  v2[3] = &__block_descriptor_tmp_8_9;
  v2[4] = this;
  v2[5] = a2;
  ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped((uint64_t *)this + 1, (uint64_t)v2);
}

void ___ZN21CircularFileLogWriter11setCapacityEm_block_invoke(uint64_t a1)
{
  CircularFileLogWriter *v1;
  unint64_t v2;

  v1 = *(CircularFileLogWriter **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  *((_QWORD *)v1 + 15) = v2;
  *((_QWORD *)v1 + 18) = v2 / *((_QWORD *)v1 + 16);
  CircularFileLogWriter::clearOldLogs_sync(v1);
}

void CircularFileLogWriter::clearOldLogs_sync(CircularFileLogWriter *this)
{
  unsigned int v1;
  const std::string::value_type *v3;
  int v4;
  const std::string::value_type *v5;
  std::string::size_type v6;
  std::string *v7;
  std::error_code *v8;
  int v9;
  void *v10;
  const std::__fs::filesystem::path *v11;
  std::string v12;
  std::string v13;

  v1 = *((_DWORD *)this + 39);
  if (*((_QWORD *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1))
  {
    v3 = (char *)this + 72;
    do
    {
      *((_DWORD *)this + 39) = v1 + 1;
      CircularFileLogWriter::generateFileName_sync(this, v1, &v12);
      v4 = *((char *)this + 95);
      if (v4 >= 0)
        v5 = v3;
      else
        v5 = (const std::string::value_type *)*((_QWORD *)this + 9);
      if (v4 >= 0)
        v6 = *((unsigned __int8 *)this + 95);
      else
        v6 = *((_QWORD *)this + 10);
      v7 = std::string::insert(&v12, 0, v5, v6);
      v13 = *v7;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      v9 = SHIBYTE(v13.__r_.__value_.__r.__words[2]);
      v10 = (void *)v13.__r_.__value_.__r.__words[0];
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = (const std::__fs::filesystem::path *)&v13;
      else
        v11 = (const std::__fs::filesystem::path *)v13.__r_.__value_.__r.__words[0];
      if (remove(v11, v8))
        unlink((const char *)v11);
      if (v9 < 0)
        operator delete(v10);
      v1 = *((_DWORD *)this + 39);
    }
    while (*((_QWORD *)this + 18) < (unint64_t)(*((_DWORD *)this + 38) - v1));
  }
}

void sub_1BF7094B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CircularFileLogWriter::closeRunningLog_sync(CircularFileLogWriter *this)
{
  uint64_t result;
  _QWORD *v3;

  result = *((_QWORD *)this + 5);
  if (!result)
  {
    *((_QWORD *)this + 5) = 0;
    return result;
  }
  std::ostream::flush();
  v3 = (_QWORD *)*((_QWORD *)this + 5);
  if (std::filebuf::close())
  {
    result = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  std::ios_base::clear((std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 32) | 4);
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void CircularFileLogWriter::generateFileName_sync(CircularFileLogWriter *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  __int128 v5;
  int v6;
  size_t v7;
  unint64_t v8;
  std::string *p_dst;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  std::string *v14;
  __int128 v15;
  const std::string::value_type *v16;
  char *v17;
  const std::string::value_type *v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string __dst;
  std::string v24;
  char __s[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v27 = v5;
  v28 = v5;
  *(_OWORD *)__s = v5;
  v26 = v5;
  sprintf(__s, "%08zu", a2);
  v6 = *((char *)this + 71);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)this + 71);
  else
    v7 = *((_QWORD *)this + 7);
  v8 = v7 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 >= 0x17)
  {
    v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v10 = v8 | 7;
    v11 = v10 + 1;
    p_dst = (std::string *)operator new(v10 + 1);
    __dst.__r_.__value_.__l.__size_ = v7 + 1;
    __dst.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v7 + 1;
    if (!v7)
      goto LABEL_15;
  }
  if (v6 >= 0)
    v12 = (char *)this + 48;
  else
    v12 = (char *)*((_QWORD *)this + 6);
  memmove(p_dst, v12, v7);
LABEL_15:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v7) = 46;
  v13 = strlen(__s);
  v14 = std::string::append(&__dst, __s, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v18 = (const std::string::value_type *)*((_QWORD *)this + 12);
  v17 = (char *)this + 96;
  v16 = v18;
  v19 = v17[23];
  if (v19 >= 0)
    v20 = v17;
  else
    v20 = v16;
  if (v19 >= 0)
    v21 = v17[23];
  else
    v21 = *((_QWORD *)v17 + 1);
  v22 = std::string::append(&v24, v20, v21);
  *a3 = *v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_25:
    operator delete(__dst.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_25;
}

void sub_1BF709748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void CircularFileLogWriter::~CircularFileLogWriter(void **this)
{
  void *v1;

  CircularFileLogWriter::~CircularFileLogWriter(this);
  operator delete(v1);
}

{
  void *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = off_1E79208E0;
  if (*((char *)this + 183) < 0)
  {
    operator delete(this[20]);
    if ((*((char *)this + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else if ((*((char *)this + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[12]);
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*((char *)this + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_17;
  }
LABEL_16:
  operator delete(this[9]);
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = this[5];
    this[5] = 0;
    if (!v2)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_17:
  operator delete(this[6]);
  v2 = this[5];
  this[5] = 0;
  if (v2)
LABEL_6:
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
LABEL_7:
  v3 = this[4];
  if (v3)
    dispatch_release(v3);
  v4 = this[3];
  if (v4)
    dispatch_release(v4);
  v5 = (std::__shared_weak_count *)this[2];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<CircularFileLogWriter *,std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter *)#1},std::allocator<CircularFileLogWriter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110sha"
                                "red_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI21CircularFileLogWriterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<CircularFileLogWriter> ctu::SharedSynchronizable<CircularFileLogWriter>::make_shared_ptr<CircularFileLogWriter>(CircularFileLogWriter*)::{lambda(CircularFileLogWriter*)#1}::operator() const(CircularFileLogWriter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<CircularFileLogWriter>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7920AD8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI21CircularFileLogWriterE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__110shared_ptrIK21CircularFileLogWriterEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

PowerStats *PowerStats::create@<X0>(PowerStats **a1@<X8>)
{
  PowerStats *v3;
  PowerStats *result;

  v3 = (PowerStats *)operator new(0x88uLL);
  PowerStats::PowerStats(v3);
  *a1 = v3;
  result = (PowerStats *)operator new(0x20uLL);
  *(_QWORD *)result = off_1E7920B18;
  *((_QWORD *)result + 1) = 0;
  *((_QWORD *)result + 2) = 0;
  *((_QWORD *)result + 3) = v3;
  a1[1] = result;
  return result;
}

void sub_1BF709B24()
{
  PowerStats *v0;

  PowerStats::~PowerStats(v0);
}

void sub_1BF709B30(void *a1)
{
  _Unwind_Exception *v1;

  operator delete(a1);
  _Unwind_Resume(v1);
}

void sub_1BF709B3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void PowerStats::PowerStats(PowerStats *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v10;
  __int128 v11;
  _BYTE v12[8];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v11, "com.apple.telephony.abm", "power.stats");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger(this, (const ctu::OsLogLogger *)v12);
  MEMORY[0x1C3B8B74C](v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v11);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = (char *)this + 48;
  *(_QWORD *)((char *)this + 92) = 0x200000001;
  *((_DWORD *)this + 25) = -536870144;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, 0);
  *((_QWORD *)this + 5) = (char *)this + 48;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  v10 = 11;
  strcpy((char *)__p, "power.stats");
  AppleBasebandManager::create();
  v2 = v11;
  v11 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *(_OWORD *)((char *)this + 120) = v2;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_1BF709D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)&a9);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v17);
  dispatch::callback<void({block_pointer})(xpc::dict)>::~callback(v18);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy(v16, *(_QWORD **)(v15 + 48));
  MEMORY[0x1C3B8B74C](v15);
  _Unwind_Resume(a1);
}

const char *PowerStats::getName(PowerStats *this)
{
  return "power.stats";
}

void PowerStats::clear(PowerStats *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)((char *)this + 48);
  v1 = (_QWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, v1);
  *(v2 - 1) = v2;
  *v2 = 0;
  v2[1] = 0;
}

void PowerStats::~PowerStats(PowerStats *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  const void *v6;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *((_QWORD *)this + 14);
  if (v5)
    dispatch_release(v5);
  v6 = (const void *)*((_QWORD *)this + 13);
  if (v6)
    _Block_release(v6);
  std::__tree<std::__value_type<Timestamp::TimeDomain,timeval>,std::__map_value_compare<Timestamp::TimeDomain,std::__value_type<Timestamp::TimeDomain,timeval>,std::less<Timestamp::TimeDomain>,true>,std::allocator<std::__value_type<Timestamp::TimeDomain,timeval>>>::destroy((uint64_t)this + 40, *((_QWORD **)this + 6));
  JUMPOUT(0x1C3B8B74CLL);
}

void PowerStats::gotAssertion(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  std::string *v5;
  std::string v6;
  std::string v7;
  std::string v8;

  *(_BYTE *)(a1 + 88) = 1;
  v4 = *(_DWORD *)(a1 + 96);
  if (v4 == 1)
  {
    ++*(_DWORD *)(a1 + 16);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v6 = *(std::string *)a2;
    v5 = &v6;
    PowerStats::submitLowPowerEventMetric_sync(a1, 0, 1u, (const char *)&v6);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_18;
  }
  else if (!v4)
  {
    if (a3 == 1)
    {
      ++*(_DWORD *)(a1 + 12);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v8 = *(std::string *)a2;
      v5 = &v8;
      PowerStats::submitLowPowerEventMetric_sync(a1, 2u, 0, (const char *)&v8);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
        operator delete(v5->__r_.__value_.__l.__data_);
    }
    else
    {
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v7 = *(std::string *)a2;
      v5 = &v7;
      PowerStats::submitLowPowerEventMetric_sync(a1, 0, 0, (const char *)&v7);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
    }
  }
}

void PowerStats::submitLowPowerEventMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, const char *a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  _QWORD v30[4];
  void *aBlock;
  xpc_object_t object;

  v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power event stats", (uint8_t *)v30, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x1E0C812F8];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB510], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB520], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  if (a4[23] < 0)
    a4 = *(const char **)a4;
  v18 = xpc_string_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB270], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB020], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524464);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB0E8], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB018], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      v26 = v11;
      v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_34:
        v28 = _Block_copy(v27);
        goto LABEL_37;
      }
    }
    else
    {
      v26 = xpc_null_create();
      v27 = *(const void **)(a1 + 104);
      if (v27)
        goto LABEL_34;
    }
    v28 = 0;
LABEL_37:
    v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
    v30[3] = &__block_descriptor_tmp_37;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      object = v26;
      if (v26)
      {
LABEL_39:
        xpc_retain(v26);
LABEL_42:
        dispatch_async(v29, v30);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v28)
          _Block_release(v28);
        xpc_release(v26);
        goto LABEL_47;
      }
    }
    else
    {
      aBlock = 0;
      object = v26;
      if (v26)
        goto LABEL_39;
    }
    object = xpc_null_create();
    goto LABEL_42;
  }
LABEL_47:
  xpc_release(v13);
  xpc_release(v11);
}

uint64_t PowerStats::noPendingAssertion(uint64_t this)
{
  *(_BYTE *)(this + 88) = 0;
  return this;
}

void PowerStats::reportSystemStateChange(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t SystemTime;
  uint64_t v11;
  unsigned int v12;
  void *__p;
  char v14;
  uint8_t buf[16];

  v4 = *a3;
  *(_DWORD *)(a1 + 100) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 92) = v4;
  v5 = *((_DWORD *)a3 + 2);
  if (v5 == -536870112)
  {
    ++*(_DWORD *)(a1 + 24);
    SystemTime = TelephonyUtilGetSystemTime();
    *(_QWORD *)(a1 + 64) = SystemTime;
    v11 = *(_QWORD *)(a1 + 72);
    if (v11)
    {
      v12 = ((int)SystemTime - (int)v11) / 0x3E8u;
      *(_DWORD *)(a1 + 84) = v12;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 84);
    }
    PowerStats::submitWakeInfoMetric_sync(a1, *(_DWORD *)(a2 + 4) == 1, v12, *(_DWORD *)(a1 + 80));
    return;
  }
  if (v5 != -536870272)
    return;
  if (*((_DWORD *)a3 + 1) != 1)
  {
    ++*(_DWORD *)(a1 + 32);
    v7 = TelephonyUtilGetSystemTime();
    *(_QWORD *)(a1 + 72) = v7;
    v8 = *(_QWORD *)(a1 + 64);
    if (!v8)
      return;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 88))
  {
    v6 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BF566000, v6, OS_LOG_TYPE_DEFAULT, "#I Forced sleep while power assertion(s) held ", buf, 2u);
    }
    ++*(_DWORD *)(a1 + 20);
    v14 = 0;
    LOBYTE(__p) = 0;
    PowerStats::submitLowPowerEventMetric_sync(a1, 1u, 1u, (const char *)&__p);
    if (v14 < 0)
      operator delete(__p);
  }
  ++*(_DWORD *)(a1 + 28);
  v7 = TelephonyUtilGetSystemTime();
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
LABEL_14:
    *(_DWORD *)(a1 + 80) = ((int)v7 - (int)v8) / 0x3E8u;
}

void PowerStats::submitWakeInfoMetric_sync(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  NSObject *v8;
  xpc_object_t v9;
  uint64_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  const void *v27;
  void *v28;
  NSObject *v29;
  _QWORD v30[4];
  void *aBlock;
  xpc_object_t object;

  v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v30[0]) = 0;
    _os_log_impl(&dword_1BF566000, v8, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of wake info", (uint8_t *)v30, 2u);
  }
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = MEMORY[0x1E0C812F8];
  if (v9 || (v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v9) == v10)
    {
      xpc_retain(v9);
      v11 = v9;
    }
    else
    {
      v11 = xpc_null_create();
    }
  }
  else
  {
    v11 = xpc_null_create();
    v9 = 0;
  }
  xpc_release(v9);
  v12 = xpc_dictionary_create(0, 0, 0);
  if (v12 || (v12 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v12) == v10)
    {
      xpc_retain(v12);
      v13 = v12;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v12 = 0;
  }
  xpc_release(v12);
  v14 = xpc_int64_create(a2);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB9C0], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_int64_create(a3);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFBD70], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_int64_create(a4);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFBC78], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  v20 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v20)
    v20 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB020], v20);
  v21 = xpc_null_create();
  xpc_release(v20);
  xpc_release(v21);
  v22 = xpc_int64_create(524465);
  if (!v22)
    v22 = xpc_null_create();
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB0E8], v22);
  v23 = xpc_null_create();
  xpc_release(v22);
  xpc_release(v23);
  if (v13)
  {
    xpc_retain(v13);
    v24 = v13;
  }
  else
  {
    v24 = xpc_null_create();
  }
  xpc_dictionary_set_value(v11, (const char *)*MEMORY[0x1E0CFB018], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 112))
  {
    if (v11)
    {
      xpc_retain(v11);
      v26 = v11;
      v27 = *(const void **)(a1 + 104);
      if (v27)
      {
LABEL_32:
        v28 = _Block_copy(v27);
        goto LABEL_35;
      }
    }
    else
    {
      v26 = xpc_null_create();
      v27 = *(const void **)(a1 + 104);
      if (v27)
        goto LABEL_32;
    }
    v28 = 0;
LABEL_35:
    v29 = *(NSObject **)(a1 + 112);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 1174405120;
    v30[2] = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
    v30[3] = &__block_descriptor_tmp_37;
    if (v28)
    {
      aBlock = _Block_copy(v28);
      object = v26;
      if (v26)
      {
LABEL_37:
        xpc_retain(v26);
LABEL_40:
        dispatch_async(v29, v30);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v28)
          _Block_release(v28);
        xpc_release(v26);
        goto LABEL_45;
      }
    }
    else
    {
      aBlock = 0;
      object = v26;
      if (v26)
        goto LABEL_37;
    }
    object = xpc_null_create();
    goto LABEL_40;
  }
LABEL_45:
  xpc_release(v13);
  xpc_release(v11);
}

void PowerStats::setPowerdownMessage(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t value;
  const object *v4;
  const __CFArray *v5;
  CFTypeID v6;
  CFTypeRef v7;
  CFIndex v8;
  uint64_t **v9;
  CFIndex Count;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v12;
  CFTypeID v13;
  const __CFDictionary *v14;
  unsigned int Int;
  uint64_t v16;
  uint64_t *v17;
  uint64_t **v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  char v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t *v27;
  CFTypeRef cf[2];
  CFArrayRef theArray;
  xpc_object_t object;

  theArray = (CFArrayRef)0xAAAAAAAAAAAAAAAALL;
  value = xpc_dictionary_get_value(*a2, abm::kKeyPowerDownMessageList[0]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::bridge((xpc *)&object, v4);
  v5 = (const __CFArray *)cf[0];
  if (cf[0])
  {
    v6 = CFGetTypeID(cf[0]);
    if (v6 == CFArrayGetTypeID())
    {
      theArray = (CFArrayRef)cf[0];
      CFRetain(cf[0]);
      v7 = cf[0];
LABEL_8:
      CFRelease(v7);
      goto LABEL_9;
    }
  }
  v5 = 0;
  theArray = 0;
  v7 = cf[0];
  if (cf[0])
    goto LABEL_8;
LABEL_9:
  xpc_release(object);
  v8 = 0;
  v9 = (uint64_t **)(a1 + 48);
  while (1)
  {
    Count = CFArrayGetCount(v5);
    v5 = theArray;
    if (Count <= v8)
      break;
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v8);
    v12 = ValueAtIndex;
    if (!ValueAtIndex)
      goto LABEL_12;
    cf[0] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    cf[1] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
    v13 = CFGetTypeID(ValueAtIndex);
    if (v13 == CFDictionaryGetTypeID())
      v14 = v12;
    else
      v14 = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)cf, v14);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageQMISvc[0]);
    Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x1C3B8B878](&object);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&object, abm::kKeyPowerDownMessageId[0]);
    v16 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)cf, (const __CFString *)object);
    MEMORY[0x1C3B8B878](&object);
    v17 = *v9;
    v18 = (uint64_t **)(a1 + 48);
    v19 = (uint64_t *)(a1 + 48);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          v19 = v17;
          v20 = *((_DWORD *)v17 + 7);
          if (Int == v20)
            break;
          if (Int >= v20)
          {
            if (v20 >= Int)
              v24 = 1;
            else
              v24 = -1;
            if ((v24 & 0x80) == 0)
              goto LABEL_39;
            goto LABEL_35;
          }
LABEL_20:
          v17 = (uint64_t *)*v19;
          v18 = (uint64_t **)v19;
          if (!*v19)
            goto LABEL_37;
        }
        v21 = *((_DWORD *)v19 + 8);
        if (v16 < v21)
          goto LABEL_20;
        v22 = v21 == (_DWORD)v16;
        if (v21 >= v16)
          v23 = 1;
        else
          v23 = -1;
        if (v22)
          v23 = 0;
        if ((v23 & 0x80) == 0)
        {
LABEL_39:
          v25 = (char *)v19;
          goto LABEL_11;
        }
LABEL_35:
        v17 = (uint64_t *)v19[1];
        if (!v17)
        {
          v18 = (uint64_t **)(v19 + 1);
          break;
        }
      }
    }
LABEL_37:
    v25 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v25 + 28) = Int | (unint64_t)(v16 << 32);
    *((_DWORD *)v25 + 9) = 0;
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = v19;
    *v18 = (uint64_t *)v25;
    v26 = **(_QWORD **)(a1 + 40);
    v27 = (uint64_t *)v25;
    if (v26)
    {
      *(_QWORD *)(a1 + 40) = v26;
      v27 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 48), v27);
    ++*(_QWORD *)(a1 + 56);
    v5 = theArray;
LABEL_11:
    ++*((_DWORD *)v25 + 9);
    MEMORY[0x1C3B8B8B4](cf);
LABEL_12:
    ++v8;
  }
  if (theArray)
    CFRelease(theArray);
}

void sub_1BF70ADC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void PowerStats::submitLowPowerStatsMetric_sync(os_log_t *this)
{
  NSObject *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  os_log_t v21;
  NSObject *v22;
  unsigned int v23;
  const char *v24;
  int64_t isa_low;
  int64_t isa_high;
  int64_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  xpc_object_t v37;
  NSObject *isa;
  NSObject *v39;
  BOOL v40;
  xpc_object_t v41;
  void *v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  os_log_t v53;
  void *v54;
  NSObject *v55;
  os_log_t *v56;
  void *v57;
  xpc_object_t xdict;
  char *v59;
  char *v60;
  char *key;
  xpc_object_t xarray;
  uint8_t buf[8];
  uint64_t v64;
  void (*v65)(uint64_t);
  void *v66;
  void *aBlock;
  xpc_object_t object;

  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting AWD of low power stats", buf, 2u);
  }
  v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (v3 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v3) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v3);
      v4 = v3;
    }
    else
    {
      v4 = xpc_null_create();
    }
  }
  else
  {
    v4 = xpc_null_create();
    v3 = 0;
  }
  xpc_release(v3);
  v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (v5 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v5) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v5);
      v6 = v5;
    }
    else
    {
      v6 = xpc_null_create();
    }
  }
  else
  {
    v6 = xpc_null_create();
    v5 = 0;
  }
  xpc_release(v5);
  v7 = xpc_int64_create(*((unsigned int *)this + 3));
  if (!v7)
    v7 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFBBC0], v7);
  v8 = xpc_null_create();
  xpc_release(v7);
  xpc_release(v8);
  v9 = xpc_int64_create((*((_DWORD *)this + 4) + *((_DWORD *)this + 2)));
  if (!v9)
    v9 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB518], v9);
  v10 = xpc_null_create();
  xpc_release(v9);
  xpc_release(v10);
  v11 = xpc_int64_create(*((unsigned int *)this + 5));
  if (!v11)
    v11 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB8B8], v11);
  v12 = xpc_null_create();
  xpc_release(v11);
  xpc_release(v12);
  v13 = xpc_int64_create(*((unsigned int *)this + 6));
  if (!v13)
    v13 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB200], v13);
  v14 = xpc_null_create();
  xpc_release(v13);
  xpc_release(v14);
  v15 = xpc_int64_create(*((unsigned int *)this + 8));
  if (!v15)
    v15 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB638], v15);
  v16 = xpc_null_create();
  xpc_release(v15);
  xpc_release(v16);
  v17 = xpc_int64_create(*((unsigned int *)this + 7));
  if (!v17)
    v17 = xpc_null_create();
  xpc_dictionary_set_value(v6, (const char *)*MEMORY[0x1E0CFB740], v17);
  v18 = xpc_null_create();
  xpc_release(v17);
  xpc_release(v18);
  v19 = xpc_array_create(0, 0);
  if (v19 || (v19 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v19) == MEMORY[0x1E0C812C8])
    {
      xpc_retain(v19);
      v20 = v19;
    }
    else
    {
      v20 = xpc_null_create();
    }
  }
  else
  {
    v20 = xpc_null_create();
    v19 = 0;
  }
  xpc_release(v19);
  xarray = v20;
  v57 = v4;
  xdict = v6;
  v21 = this[5];
  v56 = this;
  v22 = (this + 6);
  if (v21 == (os_log_t)(this + 6))
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    key = (char *)*MEMORY[0x1E0CFB8B0];
    v60 = (char *)*MEMORY[0x1E0CFB750];
    v59 = (char *)*MEMORY[0x1E0CFB1F8];
    v24 = (const char *)*MEMORY[0x1E0CFB1F0];
    do
    {
      isa_high = HIDWORD(v21[3].isa);
      isa_low = LODWORD(v21[4].isa);
      v27 = HIDWORD(v21[4].isa);
      v28 = xpc_dictionary_create(0, 0, 0);
      if (v28 || (v28 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v28) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v28);
          v29 = v28;
        }
        else
        {
          v29 = xpc_null_create();
        }
      }
      else
      {
        v29 = xpc_null_create();
        v28 = 0;
      }
      xpc_release(v28);
      v30 = xpc_int64_create(0);
      if (!v30)
        v30 = xpc_null_create();
      xpc_dictionary_set_value(v29, key, v30);
      v31 = xpc_null_create();
      xpc_release(v30);
      xpc_release(v31);
      v32 = xpc_int64_create(isa_high);
      if (!v32)
        v32 = xpc_null_create();
      xpc_dictionary_set_value(v29, v60, v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      v34 = xpc_int64_create(isa_low);
      if (!v34)
        v34 = xpc_null_create();
      xpc_dictionary_set_value(v29, v59, v34);
      v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
      v36 = xpc_int64_create(v27);
      if (!v36)
        v36 = xpc_null_create();
      xpc_dictionary_set_value(v29, v24, v36);
      v37 = xpc_null_create();
      xpc_release(v36);
      xpc_release(v37);
      xpc_array_append_value(xarray, v29);
      xpc_release(v29);
      isa = v21[1].isa;
      if (isa)
      {
        do
        {
          v39 = isa;
          isa = isa->isa;
        }
        while (isa);
      }
      else
      {
        do
        {
          v39 = v21[2].isa;
          v40 = v39->isa == (Class)v21;
          v21 = v39;
        }
        while (!v40);
      }
      v23 += v27;
      v21 = v39;
    }
    while (v39 != v22);
  }
  if (xarray)
  {
    xpc_retain(xarray);
    v41 = xarray;
    v42 = xdict;
  }
  else
  {
    v42 = xdict;
    v41 = xpc_null_create();
  }
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E0CFB748], v41);
  v43 = xpc_null_create();
  xpc_release(v41);
  xpc_release(v43);
  v44 = xpc_int64_create(v23);
  if (!v44)
    v44 = xpc_null_create();
  xpc_dictionary_set_value(v42, (const char *)*MEMORY[0x1E0CFBAD8], v44);
  v45 = xpc_null_create();
  xpc_release(v44);
  xpc_release(v45);
  v46 = xpc_string_create((const char *)*MEMORY[0x1E0CFC190]);
  if (!v46)
    v46 = xpc_null_create();
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E0CFB020], v46);
  v47 = xpc_null_create();
  xpc_release(v46);
  xpc_release(v47);
  v48 = xpc_int64_create(524466);
  if (!v48)
    v48 = xpc_null_create();
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E0CFB0E8], v48);
  v49 = xpc_null_create();
  xpc_release(v48);
  xpc_release(v49);
  if (v42)
  {
    xpc_retain(v42);
    v50 = v42;
  }
  else
  {
    v50 = xpc_null_create();
  }
  xpc_dictionary_set_value(v57, (const char *)*MEMORY[0x1E0CFB018], v50);
  v51 = xpc_null_create();
  xpc_release(v50);
  xpc_release(v51);
  if (v56[13] && v56[14])
  {
    if (v57)
    {
      xpc_retain(v57);
      v52 = v57;
      v53 = v56[13];
      if (v53)
      {
LABEL_73:
        v54 = _Block_copy(v53);
        goto LABEL_76;
      }
    }
    else
    {
      v52 = xpc_null_create();
      v53 = v56[13];
      if (v53)
        goto LABEL_73;
    }
    v54 = 0;
LABEL_76:
    v55 = v56[14];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v64 = 1174405120;
    v65 = ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0;
    v66 = &__block_descriptor_tmp_37;
    if (v54)
    {
      aBlock = _Block_copy(v54);
      object = v52;
      if (v52)
      {
LABEL_78:
        xpc_retain(v52);
LABEL_81:
        dispatch_async(v55, buf);
        xpc_release(object);
        object = 0;
        if (aBlock)
          _Block_release(aBlock);
        if (v54)
          _Block_release(v54);
        xpc_release(v52);
        goto LABEL_86;
      }
    }
    else
    {
      aBlock = 0;
      object = v52;
      if (v52)
        goto LABEL_78;
    }
    object = xpc_null_create();
    goto LABEL_81;
  }
LABEL_86:
  xpc_release(xarray);
  xpc_release(v42);
  xpc_release(v57);
}

void sub_1BF70B7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  xpc_release(v16);
  xpc_release(object);
  xpc_release(a12);
  xpc_release(a11);
  _Unwind_Resume(a1);
}

void PowerStats::reportStats(os_log_t *this, int a2)
{
  if (a2 == 524466)
    PowerStats::submitLowPowerStatsMetric_sync(this);
}

void PowerStats::registerStatsHandler(uint64_t a1, uint64_t a2)
{
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;

  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = *(const void **)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v4;
  if (v5)
    _Block_release(v5);
  v6 = *(NSObject **)(a2 + 8);
  if (v6)
    dispatch_retain(v6);
  v7 = *(NSObject **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v6;
  if (v7)
    dispatch_release(v7);
}

void PowerStats::dumpState(os_log_t *this)
{
  NSObject *v2;
  _QWORD *v3;
  char *v4;
  os_log_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  int isa_high;
  int isa;
  int v19;
  NSObject *v20;
  NSObject *v21;
  BOOL v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I --------------- ABM Power state ---------------", buf, 2u);
    v2 = *this;
    v3 = &loc_1BF73A000;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
LABEL_3:
      v4 = "N5boost6detail17sp_counted_impl_pINS_8signals26detail12grouped_listIiNSt3__14lessIiEENS_10shared_ptrINS3_15co"
           "nnection_bodyINS5_4pairINS3_15slot_meta_groupENS_8optionalIiEEEENS2_4slotIFvbENS_8functionISG_EEEENS2_5mutexEEEEEEEEE"
         + 226;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else
  {
    v3 = (_QWORD *)&loc_1BF73A000;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_3;
  }
  v7 = *((_DWORD *)this + 3);
  *(_DWORD *)buf = v3[284];
  v24 = v7;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Idle sleep reverted due to BB events: %u", buf, 8u);
  v2 = *this;
  v4 = "";
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_4:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v8 = *((_DWORD *)this + 2);
  v9 = *((_DWORD *)this + 4);
  *(_DWORD *)buf = *((_QWORD *)v4 + 167);
  v24 = v8;
  v25 = 1024;
  v26 = v9;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I BB events deferred on idle sleep: %u, on forced sleep: %u", buf, 0xEu);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_5:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  v10 = *((_DWORD *)this + 5);
  *(_DWORD *)buf = v3[284];
  v24 = v10;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Forced sleep during BB event handling: %u", buf, 8u);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_6:
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_7;
    goto LABEL_14;
  }
LABEL_13:
  v12 = *((_DWORD *)this + 7);
  v11 = *((_DWORD *)this + 8);
  v13 = *((_DWORD *)this + 6);
  *(_DWORD *)buf = 67109632;
  v24 = v11;
  v25 = 1024;
  v26 = v12;
  v27 = 1024;
  v28 = v13;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Number of idle sleeps: %u, forced sleeps: %u, wakes: %u", buf, 0x14u);
  v2 = *this;
  if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
  {
LABEL_7:
    v5 = this[5];
    v6 = (this + 6);
    if (v5 == (os_log_t)(this + 6))
      return;
    goto LABEL_17;
  }
LABEL_14:
  v14 = *((_DWORD *)this + 20);
  v15 = *((_DWORD *)this + 21);
  *(_DWORD *)buf = *((_QWORD *)v4 + 167);
  v24 = v14;
  v25 = 1024;
  v26 = v15;
  _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Last wake duration: %u, sleep duration: %u", buf, 0xEu);
  v5 = this[5];
  v6 = (this + 6);
  if (v5 == (os_log_t)(this + 6))
    return;
  do
  {
LABEL_17:
    v16 = *this;
    if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    {
      isa = (int)v5[4].isa;
      isa_high = HIDWORD(v5[4].isa);
      v19 = HIDWORD(v5[3].isa);
      *(_DWORD *)buf = 67109632;
      v24 = v19;
      v25 = 1024;
      v26 = isa;
      v27 = 1024;
      v28 = isa_high;
      _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Received message QMI_SVC 0x%x, ID 0x%x, %u times after powerdown", buf, 0x14u);
    }
    v20 = v5[1].isa;
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = v20->isa;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = v5[2].isa;
        v22 = v21->isa == (Class)v5;
        v5 = v21;
      }
      while (!v22);
    }
    v5 = v21;
  }
  while (v21 != v6);
}

void std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

PowerStats *std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__on_zero_shared(uint64_t a1)
{
  PowerStats *result;

  result = *(PowerStats **)(a1 + 24);
  if (result)
    PowerStats::~PowerStats(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PowerStats *,std::shared_ptr<PowerStats>::__shared_ptr_default_delete<PowerStats,PowerStats>,std::allocator<PowerStats>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF745592)
    return a1 + 24;
  if (((v3 & 0x80000001BF745592 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF745592))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF745592 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void ___ZNK8dispatch8callbackIU13block_pointerFvN3xpc4dictEEEclIJS2_EEEvDpT__block_invoke_0(uint64_t a1)
{
  dispatch::block<void({block_pointer})(xpc::dict)>::operator()<xpc::dict const&>((uint64_t *)(a1 + 32), (void **)(a1 + 40));
}

uint64_t __cxx_global_var_init_14()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::power::assertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::power::assertion,ctu::power::assertion,ctu::PthreadMutexGuardPolicy<ctu::power::assertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void BootControllerLegacy::BootControllerLegacy(BootControllerLegacy *this)
{
  uint64_t v1;

  BootController::BootController(this);
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)v1 = off_1E7920B98;
  *(_BYTE *)(v1 + 104) = 1;
}

{
  uint64_t v1;

  BootController::BootController(this);
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)v1 = off_1E7920B98;
  *(_BYTE *)(v1 + 104) = 1;
}

BOOL BootControllerLegacy::prepare(capabilities::radio *a1, std::string *a2)
{
  timespec v4;
  void **v5;
  int v6;
  NSObject *v7;
  _BOOL8 v8;
  void **v10;
  void *__p[3];
  stat v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  memset(__p, 170, sizeof(__p));
  capabilities::radio::personalizedFirmwarePath(a1);
  v4.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v4.tv_nsec = 0xAAAAAAAAAAAAAAAALL;
  *(timespec *)&v12.st_blksize = v4;
  *(timespec *)v12.st_qspare = v4;
  v12.st_birthtimespec = v4;
  *(timespec *)&v12.st_size = v4;
  v12.st_mtimespec = v4;
  v12.st_ctimespec = v4;
  *(timespec *)&v12.st_uid = v4;
  v12.st_atimespec = v4;
  *(timespec *)&v12.st_dev = v4;
  if (SHIBYTE(__p[2]) >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = stat((const char *)v5, &v12);
  if (v6)
  {
    v7 = *((_QWORD *)a1 + 5);
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (v8)
    {
      v10 = __p;
      if (SHIBYTE(__p[2]) < 0)
        v10 = (void **)__p[0];
      v12.st_dev = 136315138;
      *(_QWORD *)&v12.st_mode = v10;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed to find the firmware in \"%s\"", (uint8_t *)&v12, 0xCu);
    }
    capabilities::trace::allowed((capabilities::trace *)v8);
    std::string::__assign_external(a2, "Baseband Firmware Path Not Found", 0x20uLL);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  return v6 == 0;
}

void sub_1BF70BF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BootControllerLegacy::bootModem(uint64_t a1, uint64_t a2)
{
  ctu::XpcJetsamAssertion *v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  const void *v16;
  unsigned __int8 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t (***v28)(void *, _QWORD);
  _BYTE *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  const char *v35;
  const __CFString *v36;
  const __CFString *v37;
  CFTypeID v38;
  CFTypeID TypeID;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  const __CFAllocator *v43;
  CFNumberRef v44;
  uint64_t v45;
  CFDictionaryRef v46;
  int v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  CFTypeRef v52;
  char *v53;
  NSObject *v54;
  void *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  CFTypeRef *v60;
  uint8_t *v61;
  CFTypeRef v62[2];
  const __CFString *v63;
  CFDictionaryRef v64;
  CFNumberRef v65;
  int valuePtr;
  const __CFString *v67;
  CFTypeRef cf;
  void *v69[3];
  void *__p[2];
  char v71;
  unint64_t v72;
  unint64_t v73;
  void *values[2];
  const __CFString *v75;
  uint64_t v76;
  uint8_t buf[16];
  const __CFString *v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v72 = 0xAAAAAAAAAAAAAAAALL;
  v73 = 0xAAAAAAAAAAAAAAAALL;
  v4 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v5 = xmmword_1ED70F3D8;
  if (!(_QWORD)xmmword_1ED70F3D8)
  {
    ctu::XpcJetsamAssertion::create_default_global(v4);
    v6 = *(_OWORD *)values;
    values[0] = 0;
    values[1] = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F3D8 + 1);
    xmmword_1ED70F3D8 = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 = xmmword_1ED70F3D8;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F3D8 + 1);
  *(_QWORD *)buf = v5;
  *(_QWORD *)&buf[8] = *((_QWORD *)&xmmword_1ED70F3D8 + 1);
  if (*((_QWORD *)&xmmword_1ED70F3D8 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&xmmword_1ED70F3D8 + 1) + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v71 = 13;
  strcpy((char *)__p, "Booting modem");
  ctu::XpcJetsamAssertion::createActivity();
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  BYTE5(v69[2]) = -86;
  HIWORD(v69[2]) = 5290;
  strcpy((char *)v69, "boot::debugArguments");
  if (*(char *)(a2 + 23) < 0)
  {
    *(_QWORD *)(a2 + 8) = 7;
    v15 = *(char **)a2;
  }
  else
  {
    *(_BYTE *)(a2 + 23) = 7;
    v15 = (char *)a2;
  }
  strcpy(v15, "unknown");
  cf = 0;
  v16 = (const void *)BBUpdaterExtremeCreate();
  if (!v16)
  {
    std::string::__assign_external((std::string *)a2, "failed creating BBUpdaterExtremeRef", 0x23uLL);
    v29 = (_BYTE *)(a1 + 104);
    if (*(_BYTE *)(a1 + 104))
      goto LABEL_89;
    goto LABEL_72;
  }
  v17 = atomic_load((unsigned __int8 *)&_MergedGlobals_9);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_9))
  {
    __cxa_atexit((void (*)(void *))std::weak_ptr<BootControllerLegacy>::~weak_ptr, &qword_1ED70F868, &dword_1BF566000);
    __cxa_guard_release(&_MergedGlobals_9);
  }
  v18 = *(std::__shared_weak_count **)(a1 + 96);
  if (!v18 || (v19 = *(_QWORD *)(a1 + 88), (v20 = std::__shared_weak_count::lock(v18)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v21 = v20;
  p_shared_weak_owners = (unint64_t *)&v20->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v24 = (std::__shared_weak_count *)qword_1ED70F870;
  qword_1ED70F868 = v19;
  qword_1ED70F870 = (uint64_t)v21;
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  v25 = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!(_QWORD)xmmword_1ED70F248)
  {
    v28 = (uint64_t (***)(void *, _QWORD))operator new(0x18uLL);
    MEMORY[0x1C3B8B8C0](v28, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v27 = (unint64_t *)operator new(0x20uLL);
    *v27 = (unint64_t)&unk_1E7919E70;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = (unint64_t)v28;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    *(_QWORD *)&xmmword_1ED70F248 = v28;
    *((_QWORD *)&xmmword_1ED70F248 + 1) = v27;
    if (!v30)
    {
      values[0] = v28;
      values[1] = v27;
LABEL_42:
      v33 = v27 + 1;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
      goto LABEL_44;
    }
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v27 = (unint64_t *)*((_QWORD *)&xmmword_1ED70F248 + 1);
  v28 = (uint64_t (***)(void *, _QWORD))xmmword_1ED70F248;
  *(_OWORD *)values = xmmword_1ED70F248;
  if (*((_QWORD *)&xmmword_1ED70F248 + 1))
    goto LABEL_42;
LABEL_44:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (SHIBYTE(v69[2]) >= 0)
    v35 = (const char *)v69;
  else
    v35 = (const char *)v69[0];
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)buf, v35);
  v36 = (const __CFString *)(**v28)(v28, *(_QWORD *)buf);
  v37 = v36;
  if (v36)
  {
    v38 = CFGetTypeID(v36);
    TypeID = CFStringGetTypeID();
    CFRelease(v37);
    MEMORY[0x1C3B8B878](buf);
    if (v38 == TypeID)
    {
      v40 = (std::__shared_weak_count *)values[1];
      if (!values[1])
        goto LABEL_57;
      goto LABEL_53;
    }
  }
  else
  {
    MEMORY[0x1C3B8B878](buf);
  }
  v37 = CFSTR("-l 0xffffffdf -v 0 -N");
  v40 = (std::__shared_weak_count *)values[1];
  if (!values[1])
    goto LABEL_57;
LABEL_53:
  v41 = (unint64_t *)&v40->__shared_owners_;
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
LABEL_57:
  v67 = v37;
  CFRetain(v37);
  valuePtr = 1;
  v43 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v44 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberIntType, &valuePtr);
  v65 = v44;
  v45 = *MEMORY[0x1E0C9AE50];
  values[0] = *(void **)MEMORY[0x1E0C9AE50];
  values[1] = v44;
  if (!*(_BYTE *)(a1 + 80))
    v45 = *MEMORY[0x1E0C9AE40];
  v75 = v37;
  v76 = v45;
  v46 = CFDictionaryCreate(v43, (const void **)&BootControllerLegacy::bootModem(std::string &)::keys, (const void **)values, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v64 = v46;
  v47 = BBUpdaterSetOptions();
  if (!v47)
  {
    memset(buf, 0, sizeof(buf));
    v78 = 0;
    ctu::cf::assign();
    *(_OWORD *)v62 = *(_OWORD *)buf;
    v63 = v78;
    v48 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      v60 = v62;
      if (SHIBYTE(v63) < 0)
        v60 = (CFTypeRef *)v62[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v60;
      _os_log_error_impl(&dword_1BF566000, v48, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      {
LABEL_65:
        *(_OWORD *)a2 = *(_OWORD *)v62;
        *(_QWORD *)(a2 + 16) = v63;
        CFRelease(cf);
        cf = 0;
        if (!v46)
          goto LABEL_67;
        goto LABEL_66;
      }
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      goto LABEL_65;
    }
    operator delete(*(void **)a2);
    goto LABEL_65;
  }
  if (v46)
LABEL_66:
    CFRelease(v46);
LABEL_67:
  if (v44)
    CFRelease(v44);
  CFRelease(v37);
  v29 = (_BYTE *)(a1 + 104);
  if (!*(_BYTE *)(a1 + 104))
  {
LABEL_72:
    if (TelephonyBasebandPowerOnModem())
    {
      v62[0] = 0;
      goto LABEL_74;
    }
    if (*(char *)(a2 + 23) < 0)
    {
      *(_QWORD *)(a2 + 8) = 21;
      v53 = *(char **)a2;
    }
    else
    {
      *(_BYTE *)(a2 + 23) = 21;
      v53 = (char *)a2;
    }
    strcpy(v53, "failed power on modem");
LABEL_89:
    v62[0] = 0;
    goto LABEL_90;
  }
  v62[0] = 0;
  if (!v47)
  {
LABEL_90:
    v54 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0)
        v55 = (void *)a2;
      else
        v55 = *(void **)a2;
      LODWORD(values[0]) = 136446210;
      *(void **)((char *)values + 4) = v55;
      _os_log_impl(&dword_1BF566000, v54, OS_LOG_TYPE_DEFAULT, "#I boot failed due to %{public}s", (uint8_t *)values, 0xCu);
    }
    v51 = 0;
    *v29 = 0;
    v52 = v62[0];
    if (v62[0])
      goto LABEL_96;
    goto LABEL_97;
  }
LABEL_74:
  v49 = BBUpdaterExecCommand();
  if (!v49 && cf)
  {
    values[0] = 0;
    values[1] = 0;
    v75 = 0;
    ctu::cf::assign();
    *(_OWORD *)buf = *(_OWORD *)values;
    v78 = v75;
    v50 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      v61 = buf;
      if (SHIBYTE(v78) < 0)
        v61 = *(uint8_t **)buf;
      LODWORD(values[0]) = 136315138;
      *(void **)((char *)values + 4) = v61;
      _os_log_error_impl(&dword_1BF566000, v50, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)values, 0xCu);
      if ((*(char *)(a2 + 23) & 0x80000000) == 0)
        goto LABEL_79;
    }
    else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_79:
      *(_OWORD *)a2 = *(_OWORD *)buf;
      *(_QWORD *)(a2 + 16) = v78;
      CFRelease(cf);
      cf = 0;
      goto LABEL_90;
    }
    operator delete(*(void **)a2);
    goto LABEL_79;
  }
  if (!v49)
    goto LABEL_90;
  if (!v62[0])
  {
    std::string::__assign_external((std::string *)a2, "BBUpdaterExecCommand failed returning output", 0x2CuLL);
    goto LABEL_90;
  }
  BootControllerLegacy::printOutput((BootControllerLegacy *)a1, v62[0]);
  values[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  values[1] = (void *)0xAAAAAAAAAAAAAAAALL;
  ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)values, (const __CFDictionary *)v62[0]);
  if ((ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)values, CFSTR("done")) & 1) == 0)
  {
    std::string::__assign_external((std::string *)a2, "output did not return done", 0x1AuLL);
    MEMORY[0x1C3B8B8B4](values);
    goto LABEL_90;
  }
  MEMORY[0x1C3B8B8B4](values);
  *(_BYTE *)(a1 + 80) = 0;
  v51 = 1;
  *v29 = 0;
  v52 = v62[0];
  if (v62[0])
  {
LABEL_96:
    CFRelease(v52);
    v62[0] = 0;
  }
LABEL_97:
  if (v16)
    CFRelease(v16);
  if (SHIBYTE(v69[2]) < 0)
    operator delete(v69[0]);
  v56 = (std::__shared_weak_count *)v73;
  if (v73)
  {
    v57 = (unint64_t *)(v73 + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  return v51;
}

void sub_1BF70C81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void BootControllerLegacy::handleError(BootControllerLegacy *this@<X0>, _OWORD *a2@<X8>)
{
  NSObject *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(a2, 170, 24);
  v7 = 0uLL;
  v8 = 0;
  ctu::cf::assign();
  *a2 = 0uLL;
  *((_QWORD *)a2 + 2) = v8;
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *(_OWORD **)a2;
    LODWORD(v7) = 136315138;
    *(_QWORD *)((char *)&v7 + 4) = v6;
    _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1BF70CA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BootControllerLegacy::printOutput(BootControllerLegacy *this, CFTypeRef cf)
{
  CFStringRef v3;
  NSObject *v4;
  void **v5;
  void *__p[2];
  uint64_t v7;
  CFStringRef v8;
  uint8_t buf[4];
  void **v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = CFCopyDescription(cf);
  v7 = 0;
  v8 = v3;
  __p[0] = 0;
  __p[1] = 0;
  ctu::cf::assign();
  v4 = *((_QWORD *)this + 5);
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    if ((SHIBYTE(v7) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_8:
    operator delete(__p[0]);
    if (!v3)
      return;
    goto LABEL_9;
  }
  v5 = __p;
  if (v7 < 0)
    v5 = (void **)__p[0];
  *(_DWORD *)buf = 136315138;
  v10 = v5;
  _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  if (SHIBYTE(v7) < 0)
    goto LABEL_8;
LABEL_3:
  if (v3)
LABEL_9:
    CFRelease(v3);
}

void sub_1BF70CB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void BootControllerLegacy::~BootControllerLegacy(BootControllerLegacy *this)
{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E79224E0;
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = &unk_1E791B2D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
}

{
  std::__shared_weak_count *v2;
  const void *v3;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E79224E0;
  v3 = (const void *)*((_QWORD *)this + 9);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)this = &unk_1E791B2D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(this);
}

uint64_t std::weak_ptr<BootControllerLegacy>::~weak_ptr(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t __cxx_global_var_init_15()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_24()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF566000);
  }
  return result;
}

const char *AccessoryModule::getName(AccessoryModule *this)
{
  return "accessories-new.mod";
}

void AccessoryModule::create(capabilities::abs *a1@<X0>, std::__shared_weak_count_vtbl **a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count_vtbl *v5;
  std::__shared_weak_count_vtbl *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *on_zero_shared;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  NSObject *get_deleter;
  uint64_t v22[2];
  _QWORD v23[5];
  _QWORD *v24;
  _QWORD block[6];

  *a2 = 0;
  a2[1] = 0;
  v4 = capabilities::abs::supportsAccessoryModule(a1);
  if ((v4 & 1) == 0)
  {
    capabilities::abs::supportedSARFeatures((capabilities::abs *)v4);
    if (!capabilities::abs::operator&())
      return;
  }
  v5 = (std::__shared_weak_count_vtbl *)operator new(0xA8uLL);
  v6 = v5;
  v7 = *(_QWORD *)a1;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  v22[0] = v7;
  v22[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  AccessoryModule::AccessoryModule((uint64_t)v5, v22);
  v11 = (std::__shared_weak_count *)operator new(0x20uLL);
  v11->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  v11->__vftable = (std::__shared_weak_count_vtbl *)off_1E7920E60;
  v11->__shared_weak_owners_ = 0;
  v11[1].__vftable = v6;
  on_zero_shared = (std::__shared_weak_count *)v6[1].__on_zero_shared;
  if (!on_zero_shared)
  {
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v6[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    do
LABEL_16:
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_19;
  }
  if (on_zero_shared->__shared_owners_ == -1)
  {
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v6[1].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v6;
    v6[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v11;
    std::__shared_weak_count::__release_weak(on_zero_shared);
    goto LABEL_16;
  }
LABEL_19:
  *a2 = v6;
  a2[1] = (std::__shared_weak_count_vtbl *)v11;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 0x40000000;
  v23[2] = ___ZN15AccessoryModule4initEv_block_invoke;
  v23[3] = &__block_descriptor_tmp_38;
  v23[4] = v6;
  v24 = v23;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_27_7;
  block[4] = (char *)v6 + 48;
  block[5] = &v24;
  get_deleter = v6[1].__get_deleter;
  if (v6[1].__on_zero_shared_weak)
    dispatch_async_and_wait(get_deleter, block);
  else
    dispatch_sync(get_deleter, block);
}

void sub_1BF70CF04(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[8], v1, (dispatch_function_t)std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF70CF24(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;

  __cxa_end_catch();
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF70CF7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF70CF90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AccessoryModule::init(AccessoryModule *this)
{
  NSObject *v1;
  char *v2;
  _QWORD v3[5];
  _QWORD *v4;
  _QWORD block[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___ZN15AccessoryModule4initEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_38;
  v3[4] = this;
  v4 = v3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  block[3] = &__block_descriptor_tmp_27_7;
  block[4] = (char *)this + 48;
  block[5] = &v4;
  v2 = (char *)this + 64;
  v1 = *((_QWORD *)this + 8);
  if (*((_QWORD *)v2 + 1))
    dispatch_async_and_wait(v1, block);
  else
    dispatch_sync(v1, block);
}

uint64_t AccessoryModule::AccessoryModule(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = off_1E79228B8;
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    std::__shared_weak_count::__release_weak(v4);
    *(_QWORD *)a1 = &unk_1E79133B0;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_QWORD *)a1 = &unk_1E79133B0;
    *(_QWORD *)(a1 + 8) = v3;
  }
  *(_QWORD *)a1 = off_1E7920C68;
  v9 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_UTILITY, 0);
  v10 = dispatch_queue_create("accessories-new.mod", v9);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v10;
  if (v10)
  {
    v11 = v10;
    dispatch_retain(v10);
    *(_QWORD *)(a1 + 72) = 0;
    dispatch_release(v11);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 80), "com.apple.telephony.abm", "accessories-new.mod");
  *(_QWORD *)a1 = off_1E7920C68;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  return a1;
}

void sub_1BF70D184(_Unwind_Exception *a1)
{
  Service *v1;
  _QWORD *v2;

  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  Service::~Service(v1);
  _Unwind_Resume(a1);
}

void AccessoryModule::~AccessoryModule(AccessoryModule *this)
{
  char *v2;
  NSObject *v3;
  AccessoryModule *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  std::__shared_weak_count *v21;
  uint8_t v22[16];

  *(_QWORD *)this = off_1E7920C68;
  v2 = (char *)this + 80;
  v3 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone", v22, 2u);
  }
  v4 = (AccessoryModule *)*((_QWORD *)this + 19);
  if (v4 == (AccessoryModule *)((char *)this + 128))
  {
    v5 = 4;
    v4 = (AccessoryModule *)((char *)this + 128);
  }
  else
  {
    if (!v4)
      goto LABEL_8;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_8:
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    v7 = *((_QWORD *)this + 14);
    v8 = (void *)*((_QWORD *)this + 13);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v6;
    operator delete(v8);
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (!v12)
    goto LABEL_23;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_23:
    MEMORY[0x1C3B8B74C](v2);
    v15 = *((_QWORD *)this + 9);
    if (!v15)
      goto LABEL_25;
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  MEMORY[0x1C3B8B74C](v2);
  v15 = *((_QWORD *)this + 9);
  if (v15)
LABEL_24:
    dispatch_release(v15);
LABEL_25:
  v16 = *((_QWORD *)this + 8);
  if (v16)
    dispatch_release(v16);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  *(_QWORD *)this = off_1E79228B8;
  v18 = *((_QWORD *)this + 3);
  if (v18)
  {
    v19 = *((_QWORD *)this + 4);
    v20 = (void *)*((_QWORD *)this + 3);
    if (v19 != v18)
    {
      do
      {
        if (*(char *)(v19 - 1) < 0)
          operator delete(*(void **)(v19 - 24));
        v19 -= 24;
      }
      while (v19 != v18);
      v20 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v18;
    operator delete(v20);
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
}

{
  void *v1;

  AccessoryModule::~AccessoryModule(this);
  operator delete(v1);
}

_BYTE *AccessoryModule::getShutdownStages@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *v3;
  _BYTE *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(1uLL);
  *a1 = v3;
  *v3 = 3;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void ___ZN15AccessoryModule4initEv_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t (***v12)(_QWORD, uint64_t);
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t v29;
  uint8_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint8_t **v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  NSObject *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  dispatch_object_t v64;
  dispatch_object_t v65;
  dispatch_object_t v66;
  dispatch_object_t object;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  uint8_t buf[8];
  std::__shared_weak_count *v77;
  std::__shared_weak_count_vtbl *v78;
  uint8_t *v79;
  std::__shared_weak_count_vtbl *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  _QWORD v83[3];
  _QWORD *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[10];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Initializing", buf, 2u);
  }
  v3 = (std::__shared_weak_count *)v1[7];
  if (!v3 || (v4 = v1[6], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (qword_1ED70F248)
  {
LABEL_12:
    v12 = (uint64_t (***)(_QWORD, uint64_t))qword_1ED70F248;
    v11 = off_1ED70F250;
    v68 = qword_1ED70F248;
    v69 = (std::__shared_weak_count *)off_1ED70F250;
    if (!off_1ED70F250)
      goto LABEL_22;
    goto LABEL_20;
  }
  v12 = (uint64_t (***)(_QWORD, uint64_t))operator new(0x18uLL);
  MEMORY[0x1C3B8B8C0](v12, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
  v11 = operator new(0x20uLL);
  *v11 = &unk_1E7919E70;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v12;
  v13 = (std::__shared_weak_count *)off_1ED70F250;
  qword_1ED70F248 = (uint64_t)v12;
  off_1ED70F250 = v11;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_12;
  }
  v68 = (uint64_t)v12;
  v69 = (std::__shared_weak_count *)v11;
LABEL_20:
  v16 = v11 + 1;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
LABEL_22:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  v18 = (const void *)*MEMORY[0x1E0CFB978];
  v19 = strlen((const char *)*MEMORY[0x1E0CFB978]);
  if (v19 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    v21 = operator new(v22 + 1);
    v77 = (std::__shared_weak_count *)v20;
    v78 = (std::__shared_weak_count_vtbl *)(v23 | 0x8000000000000000);
    *(_QWORD *)buf = v21;
    goto LABEL_29;
  }
  HIBYTE(v78) = v19;
  v21 = buf;
  if (v19)
LABEL_29:
    memmove(v21, v18, v20);
  *((_BYTE *)v21 + v20) = 0;
  v24 = Preferences::getPreference<BOOL>(v12, (const char *)buf, (ctu::cf *)(v1 + 20));
  if (SHIBYTE(v78) < 0)
  {
    operator delete(*(void **)buf);
    v25 = v69;
    if (!v69)
      goto LABEL_37;
  }
  else
  {
    v25 = v69;
    if (!v69)
      goto LABEL_37;
  }
  v26 = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((v24 & 1) != 0)
      goto LABEL_40;
    goto LABEL_38;
  }
LABEL_37:
  if ((v24 & 1) != 0)
    goto LABEL_40;
LABEL_38:
  v28 = v1[10];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v28, OS_LOG_TYPE_ERROR, "Failed getting AccessorySimulate status from ABMProperties", buf, 2u);
  }
  do
LABEL_40:
    v29 = __ldxr(p_shared_weak_owners);
  while (__stxr(v29 + 1, p_shared_weak_owners));
  v79 = 0;
  v30 = (uint8_t *)operator new(0x20uLL);
  *(_QWORD *)v30 = &off_1E7920EE8;
  *((_QWORD *)v30 + 1) = v1;
  *((_QWORD *)v30 + 2) = v4;
  *((_QWORD *)v30 + 3) = v6;
  v79 = v30;
  v31 = v1 + 16;
  v33 = v1 + 19;
  v32 = (_QWORD *)v1[19];
  v1[19] = 0;
  if (v32 == v1 + 16)
  {
    v34 = 4;
    v32 = v1 + 16;
  }
  else
  {
    if (!v32)
      goto LABEL_47;
    v34 = 5;
  }
  (*(void (**)(_QWORD *))(*v32 + 8 * v34))(v32);
  v30 = v79;
  v35 = (uint8_t **)(v1 + 19);
  if (!v79)
  {
LABEL_48:
    *v35 = 0;
    goto LABEL_49;
  }
  if (v79 != buf)
  {
LABEL_47:
    v35 = &v79;
    *v33 = (uint64_t)v30;
    goto LABEL_48;
  }
  *v33 = (uint64_t)v31;
  (*(void (**)(uint8_t *, _QWORD *))(*(_QWORD *)buf + 24))(buf, v1 + 16);
LABEL_49:
  v36 = v79;
  if (v79 == buf)
  {
    v37 = 4;
    v36 = buf;
  }
  else
  {
    if (!v79)
      goto LABEL_54;
    v37 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v36 + 8 * v37))();
LABEL_54:
  if (!*((_BYTE *)v1 + 160))
  {
    v39 = *v33;
    if (*v33)
    {
      if ((_QWORD *)v39 == v31)
      {
        v75 = v74;
        (*(void (**)(_QWORD *, _QWORD *))(*v31 + 24))(v1 + 16, v74);
LABEL_79:
        v46 = v1[8];
        v66 = v46;
        if (v46)
          dispatch_retain(v46);
        CoreAccessoriesDelegate::create(v74, &v66, (std::__shared_weak_count_vtbl **)buf);
        v47 = *v33;
        if (*v33)
        {
          if ((_QWORD *)v47 == v31)
          {
            v73 = v72;
            (*(void (**)(_QWORD *, _QWORD *))(*v31 + 24))(v1 + 16, v72);
LABEL_86:
            v48 = v1[8];
            v65 = v48;
            if (v48)
              dispatch_retain(v48);
            IOKitAccessoriesDelegate::create(v72, &v65, &v78);
            v49 = *v33;
            if (*v33)
            {
              if ((_QWORD *)v49 == v31)
              {
                v71 = v70;
                (*(void (**)(_QWORD *, _QWORD *))(*v31 + 24))(v1 + 16, v70);
LABEL_93:
                v50 = v1[8];
                v64 = v50;
                if (v50)
                  dispatch_retain(v50);
                IOPortUSBCAccessoriesDelegate::create(v70, &v64, &v80);
                std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>((uint64_t)(v1 + 13), buf, &v82, 3uLL);
                v51 = v81;
                if (v81)
                {
                  v52 = (unint64_t *)&v81->__shared_owners_;
                  do
                    v53 = __ldaxr(v52);
                  while (__stlxr(v53 - 1, v52));
                  if (!v53)
                  {
                    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                    std::__shared_weak_count::__release_weak(v51);
                  }
                }
                v54 = (std::__shared_weak_count *)v79;
                if (v79)
                {
                  v55 = (unint64_t *)(v79 + 8);
                  do
                    v56 = __ldaxr(v55);
                  while (__stlxr(v56 - 1, v55));
                  if (!v56)
                  {
                    ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                    std::__shared_weak_count::__release_weak(v54);
                  }
                }
                v57 = v77;
                if (v77)
                {
                  v58 = (unint64_t *)&v77->__shared_owners_;
                  do
                    v59 = __ldaxr(v58);
                  while (__stlxr(v59 - 1, v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                    std::__shared_weak_count::__release_weak(v57);
                  }
                }
                if (v64)
                  dispatch_release(v64);
                v60 = v71;
                if (v71 == v70)
                {
                  v61 = 4;
                  v60 = v70;
                }
                else
                {
                  if (!v71)
                    goto LABEL_117;
                  v61 = 5;
                }
                (*(void (**)(void))(*v60 + 8 * v61))();
LABEL_117:
                if (v65)
                  dispatch_release(v65);
                v62 = v73;
                if (v73 == v72)
                {
                  v63 = 4;
                  v62 = v72;
                }
                else
                {
                  if (!v73)
                    goto LABEL_124;
                  v63 = 5;
                }
                (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_124:
                if (v66)
                  dispatch_release(v66);
                v44 = v75;
                if (v75 == v74)
                {
                  v45 = 4;
                  v44 = v74;
                  goto LABEL_130;
                }
                goto LABEL_127;
              }
              v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
            }
            v71 = (_QWORD *)v49;
            goto LABEL_93;
          }
          v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
        }
        v73 = (_QWORD *)v47;
        goto LABEL_86;
      }
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 16))(v39);
    }
    v75 = (_QWORD *)v39;
    goto LABEL_79;
  }
  v38 = *v33;
  if (!*v33)
  {
LABEL_58:
    v84 = (_QWORD *)v38;
    goto LABEL_67;
  }
  if ((_QWORD *)v38 != v31)
  {
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
    goto LABEL_58;
  }
  v84 = v83;
  (*(void (**)(_QWORD *, _QWORD *))(*v31 + 24))(v1 + 16, v83);
LABEL_67:
  v40 = v1[8];
  object = v40;
  if (v40)
    dispatch_retain(v40);
  AccessorySimulatorDelegate::create(v83, &object, (std::__shared_weak_count_vtbl **)buf);
  std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>((uint64_t)(v1 + 13), buf, &v78, 1uLL);
  v41 = v77;
  if (v77)
  {
    v42 = (unint64_t *)&v77->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (object)
    dispatch_release(object);
  v44 = v84;
  if (v84 == v83)
  {
    v45 = 4;
    v44 = v83;
LABEL_130:
    (*(void (**)(void))(*v44 + 8 * v45))();
    goto LABEL_131;
  }
LABEL_127:
  if (v44)
  {
    v45 = 5;
    goto LABEL_130;
  }
LABEL_131:
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1BF70DB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, dispatch_object_t a11, dispatch_object_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void AccessoryModule::shutdown(uint64_t a1, uint64_t a2, NSObject **a3)
{
  uint64_t *v3;
  NSObject *v4;
  _QWORD v5[5];
  dispatch_group_t group;

  v3 = (uint64_t *)(a1 + 48);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN15AccessoryModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke;
  v5[3] = &__block_descriptor_tmp_4_5;
  v4 = *a3;
  v5[4] = a1;
  group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v3, (uint64_t)v5);
  if (group)
  {
    dispatch_group_leave(group);
    if (group)
      dispatch_release(group);
  }
}

void ___ZN15AccessoryModule8shutdownE13ShutdownStageN8dispatch13group_sessionE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 96);
  *(_QWORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 96) = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void AccessoryModule::initialize(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[7];
  if (!v4 || (v5 = a1[6], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[8];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped<AccessoryModule::initialize(dispatch::group_session)::$_0>(AccessoryModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AccessoryModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AccessoryModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void AccessoryModule::finishInitialization_sync(std::__shared_weak_count **this)
{
  const char *v2;
  size_t v3;
  void *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  CFTypeRef v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  const void *v24;
  size_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  NSObject *v32;
  _QWORD v33[6];
  std::__shared_weak_count *v34;
  void *aBlock;
  dispatch_object_t object;
  void *__p[2];
  unint64_t v38;
  CFTypeRef cf;
  void *__dst[2];
  unint64_t v41;
  __int128 v42;

  v2 = (const char *)((uint64_t (*)(std::__shared_weak_count **))(*this)->__shared_weak_owners_)(this);
  v3 = strlen(v2);
  if (v3 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v4 = (void *)v3;
  if (v3 >= 0x17)
  {
    v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v6 = v3 | 7;
    v7 = v6 + 1;
    v5 = (void **)operator new(v6 + 1);
    __dst[1] = v4;
    v41 = v7 | 0x8000000000000000;
    __dst[0] = v5;
  }
  else
  {
    HIBYTE(v41) = v3;
    v5 = __dst;
    if (!v3)
      goto LABEL_9;
  }
  memmove(v5, v2, (size_t)v4);
LABEL_9:
  *((_BYTE *)v4 + (_QWORD)v5) = 0;
  cf = 0;
  AppleBasebandManager::create();
  v8 = v42;
  v42 = 0uLL;
  v9 = this[12];
  *(_OWORD *)(this + 11) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (!*((_QWORD *)&v42 + 1))
    goto LABEL_18;
  v13 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
  {
LABEL_18:
    v15 = cf;
    if (!cf)
      goto LABEL_20;
    goto LABEL_19;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  v15 = cf;
  if (cf)
LABEL_19:
    CFRelease(v15);
LABEL_20:
  if (SHIBYTE(v41) < 0)
    operator delete(__dst[0]);
  v16 = this[7];
  if (!v16 || (v17 = this[6], (v18 = std::__shared_weak_count::lock(v16)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v19 = v18;
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (unint64_t *)&v18->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v24 = (const void *)*MEMORY[0x1E0CFBD68];
  v25 = strlen((const char *)*MEMORY[0x1E0CFBD68]);
  if (v25 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v26 = (void *)v25;
  if (v25 >= 0x17)
  {
    v28 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v25 | 7) != 0x17)
      v28 = v25 | 7;
    v29 = v28 + 1;
    v27 = operator new(v28 + 1);
    __p[1] = v26;
    v38 = v29 | 0x8000000000000000;
    __p[0] = v27;
  }
  else
  {
    HIBYTE(v38) = v25;
    v27 = __p;
    if (!v25)
      goto LABEL_38;
  }
  memmove(v27, v24, (size_t)v26);
LABEL_38:
  *((_BYTE *)v26 + (_QWORD)v27) = 0;
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 1174405120;
  v33[2] = ___ZN15AccessoryModule25finishInitialization_syncEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_6_10;
  v33[4] = this;
  v33[5] = v17;
  v34 = v19;
  do
    v30 = __ldxr(p_shared_weak_owners);
  while (__stxr(v30 + 1, p_shared_weak_owners));
  v31 = _Block_copy(v33);
  v32 = this[8];
  if (v32)
    dispatch_retain((dispatch_object_t)this[8]);
  aBlock = v31;
  object = v32;
  AppleBasebandManager::setEventHandler();
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  AppleBasebandManager::eventsOn((AppleBasebandManager *)this[11]);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  std::__shared_weak_count::__release_weak(v19);
}

void sub_1BF70E34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__shared_weak_count *v30;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v30);
  _Unwind_Resume(a1);
}

void ___ZN15AccessoryModule25finishInitialization_syncEv_block_invoke(_QWORD *a1, abm::client::Event **a2)
{
  std::__shared_weak_count *v3;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  CFTypeRef v8;
  size_t v9;
  void **v10;
  void **v11;
  void **v12;
  NSObject *v13;
  _QWORD *v14;
  _QWORD *j;
  NSObject *v16;
  _QWORD *v17;
  _QWORD *i;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  void *__p[2];
  uint64_t v24;
  _QWORD v25[2];
  CFTypeRef cf;
  std::__shared_weak_count *v28;
  uint64_t v29;

  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = (_QWORD *)a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    v28 = v6;
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        cf = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        abm::client::Event::getData(*a2);
        v8 = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
        if (ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
        {
          v25[0] = 0xAAAAAAAAAAAAAAAALL;
          v25[1] = 0xAAAAAAAAAAAAAAAALL;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v25, (const __CFDictionary *)0xAAAAAAAAAAAAAAAALL);
          __p[0] = 0;
          __p[1] = 0;
          v24 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v29, (const char *)*MEMORY[0x1E0CFB530]);
          ctu::cf::map_adapter::getString();
          MEMORY[0x1C3B8B878](&v29);
          v24 = v22;
          *(_OWORD *)__p = v21;
          if (v22 >= 0)
            v9 = HIBYTE(v22);
          else
            v9 = *((_QWORD *)&v21 + 1);
          if (v9 == strlen((const char *)*MEMORY[0x1E0CFB980])
            && (v22 >= 0 ? (v10 = __p) : (v10 = (void **)__p[0]), !memcmp(v10, (const void *)*MEMORY[0x1E0CFB980], v9)))
          {
            v16 = v5[10];
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v21) = 0;
              _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I Starting all delegates", (uint8_t *)&v21, 2u);
            }
            v17 = (_QWORD *)v5[13];
            for (i = (_QWORD *)v5[14]; v17 != i; v17 += 2)
              (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 32))(*v17);
          }
          else if (v9 == strlen((const char *)*MEMORY[0x1E0CFBB68])
                 && (v22 >= 0 ? (v11 = __p) : (v11 = (void **)__p[0]),
                     !memcmp(v11, (const void *)*MEMORY[0x1E0CFBB68], v9))
                 || v9 == strlen((const char *)*MEMORY[0x1E0CFBD98])
                 && (v22 >= 0 ? (v12 = __p) : (v12 = (void **)__p[0]),
                     !memcmp(v12, (const void *)*MEMORY[0x1E0CFBD98], v9)))
          {
            v13 = v5[10];
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v21) = 0;
              _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", (uint8_t *)&v21, 2u);
            }
            v14 = (_QWORD *)v5[13];
            for (j = (_QWORD *)v5[14]; v14 != j; v14 += 2)
              (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 40))(*v14);
          }
          if (SHIBYTE(v24) < 0)
            operator delete(__p[0]);
          MEMORY[0x1C3B8B8B4](v25);
          v8 = cf;
        }
        if (v8)
          CFRelease(v8);
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void AccessoryModule::startDelegates_sync(AccessoryModule *this)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint8_t v6[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting all delegates", v6, 2u);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 13);
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  while (v4 != v3)
  {
    v5 = *v4;
    v4 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
}

void AccessoryModule::stopDelegates_sync(AccessoryModule *this)
{
  NSObject *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint8_t v6[16];

  v2 = *((_QWORD *)this + 10);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", v6, 2u);
  }
  v4 = (uint64_t *)*((_QWORD *)this + 13);
  v3 = (uint64_t *)*((_QWORD *)this + 14);
  while (v4 != v3)
  {
    v5 = *v4;
    v4 += 2;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
}

uint64_t __copy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15AccessoryModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c40_ZTSNSt3__18weak_ptrI15AccessoryModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void AccessoryModule::handleAccessoryConnectionEvent_sync(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  NSObject *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  capabilities::abs *v22;
  capabilities::abs *v23;
  NSObject *v24;
  xpc_object_t v25;
  uint64_t v26;
  xpc_object_t v27;
  CommandDriverFactory *v28;
  uint64_t v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  const void *v44;
  int64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  const void *v52;
  int64_t v53;
  char *v54;
  char *v55;
  xpc_object_t v56;
  xpc_object_t v57;
  const void *v58;
  size_t v59;
  size_t v60;
  __int128 *p_buf;
  uint64_t v62;
  uint64_t v63;
  xpc_object_t v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t *v69;
  unint64_t v70;
  _QWORD v71[5];
  void *v72;
  void *v73;
  char *v74;
  void *v75;
  dispatch_object_t object;
  void *__p;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  void *v86;
  dispatch_object_t v87;
  xpc_object_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  _QWORD aBlock[6];
  std::__shared_weak_count *v92;
  capabilities::abs *v93;
  dispatch_object_t v94;
  __int128 buf;
  unint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 48);
  v5 = *(std::__shared_weak_count **)(a1 + 56);
  v6 = (uint64_t *)(a1 + 48);
  if (!v5 || (v10 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v11 = v10;
  p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (v15)
  {
    v16 = *a2;
    v17 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v16)
      v17 = 0;
    if (v17)
    {
LABEL_11:
      v18 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v16;
        _os_log_error_impl(&dword_1BF566000, v18, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_90;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v11);
    v16 = *a2;
    v19 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
    if (!v16)
      v19 = 0;
    if (v19)
      goto LABEL_11;
  }
  v93 = (capabilities::abs *)0xAAAAAAAAAAAAAAAALL;
  v94 = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v20 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_8_10;
  aBlock[4] = a1;
  aBlock[5] = v7;
  v92 = v11;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = (capabilities::abs *)_Block_copy(aBlock);
  v23 = v22;
  v24 = *(NSObject **)(a1 + 64);
  if (v24)
    dispatch_retain(*(dispatch_object_t *)(a1 + 64));
  v93 = v23;
  v94 = v24;
  capabilities::abs::supportedSARFeatures(v22);
  if (!capabilities::abs::operator&())
  {
    v89 = 0xAAAAAAAAAAAAAAAALL;
    v90 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
    v28 = (CommandDriverFactory *)pthread_mutex_lock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    v29 = off_1ED70F4D0;
    if (!off_1ED70F4D0)
    {
      CommandDriverFactory::create_default_global(v28);
      v30 = buf;
      buf = 0uLL;
      v31 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
      off_1ED70F4D0 = v30;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
      if (*((_QWORD *)&buf + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v29 = off_1ED70F4D0;
    }
    v37 = (std::__shared_weak_count *)*(&off_1ED70F4D0 + 1);
    v80 = v29;
    v81 = *(&off_1ED70F4D0 + 1);
    if (*(&off_1ED70F4D0 + 1))
    {
      v38 = (unint64_t *)(*(&off_1ED70F4D0 + 1) + 8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    pthread_mutex_unlock(&ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance);
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)v29 + 16))(&v82, v29);
    v89 = 0;
    v90 = 0;
    if (v83)
    {
      v90 = std::__shared_weak_count::lock(v83);
      if (v90)
        v89 = v82;
      if (v83)
        std::__shared_weak_count::__release_weak(v83);
    }
    if (v37)
    {
      v40 = (unint64_t *)&v37->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v42 = v89;
    if (v89)
    {
      __p = 0;
      v78 = 0;
      v79 = 0;
      v44 = *(const void **)a3;
      v43 = *(_QWORD *)(a3 + 8);
      v45 = v43 - *(_QWORD *)a3;
      if (v43 != *(_QWORD *)a3)
      {
        if (0xAAAAAAAAAAAAAAABLL * (v45 >> 2) > 0x1555555555555555)
          std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
        __p = operator new(v45);
        v79 = (char *)__p + 4 * (v45 >> 2);
        memcpy(__p, v44, v45);
        v78 = v79;
      }
      v46 = v93;
      if (v93)
        v46 = _Block_copy(v93);
      v75 = v46;
      object = v94;
      if (v94)
        dispatch_retain(v94);
      (*(void (**)(unint64_t, void **, void **))(*(_QWORD *)v42 + 376))(v42, &__p, &v75);
      if (object)
        dispatch_release(object);
      if (v75)
        _Block_release(v75);
      if (__p)
      {
        v78 = __p;
        operator delete(__p);
      }
    }
    v47 = v90;
    if (v90)
    {
      v48 = &v90->__shared_owners_;
      do
        v49 = __ldaxr((unint64_t *)v48);
      while (__stlxr(v49 - 1, (unint64_t *)v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    goto LABEL_79;
  }
  v25 = xpc_dictionary_create(0, 0, 0);
  v26 = MEMORY[0x1E0C812F8];
  if (v25 || (v25 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v25) == v26)
    {
      xpc_retain(v25);
      v27 = v25;
    }
    else
    {
      v27 = xpc_null_create();
    }
  }
  else
  {
    v27 = xpc_null_create();
    v25 = 0;
  }
  xpc_release(v25);
  v50 = MEMORY[0x1C3B8CD78](v27);
  if (v50 != v26)
  {
    v51 = *(NSObject **)(a1 + 80);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl(&dword_1BF566000, v51, OS_LOG_TYPE_ERROR, "Failed to create accessory input dictionary!", (uint8_t *)&buf, 2u);
    }
    goto LABEL_74;
  }
  v56 = xpc_data_create(*(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  if (!v56)
    v56 = xpc_null_create();
  xpc_dictionary_set_value(v27, (const char *)*MEMORY[0x1E0CFB208], v56);
  v57 = xpc_null_create();
  xpc_release(v56);
  xpc_release(v57);
  v89 = 0xAAAAAAAAAAAAAAAALL;
  v90 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v58 = (const void *)*MEMORY[0x1E0CFB998];
  v59 = strlen((const char *)*MEMORY[0x1E0CFB998]);
  if (v59 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v60 = v59;
  if (v59 >= 0x17)
  {
    v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v59 | 7) != 0x17)
      v62 = v59 | 7;
    v63 = v62 + 1;
    p_buf = (__int128 *)operator new(v62 + 1);
    *((_QWORD *)&buf + 1) = v60;
    v96 = v63 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
    v20 = MEMORY[0x1E0C809B0];
  }
  else
  {
    HIBYTE(v96) = v59;
    p_buf = &buf;
    if (!v59)
      goto LABEL_101;
  }
  memmove(p_buf, v58, v60);
LABEL_101:
  *((_BYTE *)p_buf + v60) = 0;
  v88 = v27;
  if (v27)
  {
    xpc_retain(v27);
    v26 = MEMORY[0x1E0C812F8];
  }
  else
  {
    v64 = xpc_null_create();
    v26 = MEMORY[0x1E0C812F8];
    v88 = v64;
  }
  v86 = 0;
  v87 = 0;
  abm::client::Command::create();
  xpc_release(v88);
  v88 = 0;
  if (SHIBYTE(v96) < 0)
    operator delete((void *)buf);
  v84 = v89;
  v85 = v90;
  if (v90)
  {
    v65 = &v90->__shared_owners_;
    do
      v66 = __ldxr((unint64_t *)v65);
    while (__stxr(v66 + 1, (unint64_t *)v65));
  }
  AppleBasebandManager::perform();
  if (v85)
  {
    v67 = &v85->__shared_owners_;
    do
      v68 = __ldaxr((unint64_t *)v67);
    while (__stlxr(v68 - 1, (unint64_t *)v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (v90)
  {
    v69 = &v90->__shared_owners_;
    do
      v70 = __ldaxr((unint64_t *)v69);
    while (__stlxr(v70 - 1, (unint64_t *)v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
LABEL_74:
  xpc_release(v27);
  if (v50 == v26)
  {
LABEL_79:
    v71[0] = v20;
    v71[1] = 1174405120;
    v71[2] = ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke_9;
    v71[3] = &__block_descriptor_tmp_19_6;
    v71[4] = a1;
    v72 = 0;
    v73 = 0;
    v74 = 0;
    v52 = *(const void **)a3;
    v53 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    if (v53)
    {
      if (0xAAAAAAAAAAAAAAABLL * (v53 >> 2) > 0x1555555555555555)
        std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
      v54 = (char *)operator new(v53);
      v55 = &v54[4 * (v53 >> 2)];
      v72 = v54;
      v74 = v55;
      memcpy(v54, v52, v53);
      v73 = v55;
    }
    ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v6, (uint64_t)v71);
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
    }
    if (v94)
      dispatch_release(v94);
    if (v93)
      _Block_release(v93);
    goto LABEL_88;
  }
  if (v94)
    dispatch_release(v94);
  if (v93)
    _Block_release(v93);
LABEL_88:
  if (v92)
    std::__shared_weak_count::__release_weak(v92);
LABEL_90:
  std::__shared_weak_count::__release_weak(v11);
}

void sub_1BF70F06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,xpc_object_t object,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[5])
      {
        v8 = *a2;
        v9 = ctu::SharedRef<__CFError,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFError>::get;
        if (!*a2)
          v9 = 0;
        v10 = *(NSObject **)(v5 + 80);
        if (v9)
        {
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v13 = 138412290;
            v14 = v8;
            _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Failed sending accessory info update: %@", (uint8_t *)&v13, 0xCu);
          }
        }
        else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Success sending accessory info update", (uint8_t *)&v13, 2u);
        }
      }
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

uint64_t ___ZN15AccessoryModule35handleAccessoryConnectionEvent_syncEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS5_9allocatorIS8_EEEE_block_invoke_9(_QWORD *a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const char *v22;
  size_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  const char *v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  const char *v46;
  size_t v47;
  NSObject *v48;
  size_t v49;
  void **p_dst;
  uint64_t v51;
  const void **v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  xpc_object_t v59;
  xpc_object_t v60;
  const char *v61;
  xpc_object_t v62;
  xpc_object_t v63;
  const char *v64;
  xpc_object_t v65;
  xpc_object_t v66;
  const char *v67;
  xpc_object_t v68;
  xpc_object_t v69;
  const char *v70;
  xpc_object_t v71;
  xpc_object_t v72;
  const char *v73;
  xpc_object_t v74;
  xpc_object_t v75;
  const char *v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  xpc_object_t v92;
  xpc_object_t v93;
  xpc_object_t v94;
  size_t v95;
  size_t v96;
  void **v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v101;
  const char *v102;
  char *v103;
  const char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *string;
  char *v113;
  char *v114;
  char *v115;
  char *v116;
  char *key;
  char *__s;
  int v119;
  const void *v120;
  xpc_object_t object;
  void **__dst;
  size_t v123;
  int64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 __p;
  __int128 v131;
  unint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint8_t buf[4];
  void **v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v132 = 0xAAAAAAAAAAAAAAAALL;
  v142 = v3;
  v141 = v3;
  v140 = v3;
  v139 = v3;
  v138 = v3;
  v137 = v3;
  v136 = v3;
  v135 = v3;
  v134 = v3;
  v131 = v3;
  __p = v3;
  v129 = v3;
  v128 = v3;
  v127 = v3;
  v126 = v3;
  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v133 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v125 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v125 + *(_QWORD *)(v125 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v125 + *(_QWORD *)(v125 - 24));
  std::ios_base::init(v7, &v126);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v125 = v4 + 24;
  v133 = v5;
  std::streambuf::basic_streambuf();
  v101 = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)&v126 = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v131 = 0u;
  LODWORD(v132) = 16;
  v8 = a1[5];
  v9 = a1[6];
  if (v8 != v9)
  {
    v10 = (const char *)*MEMORY[0x1E0CFB340];
    key = (char *)*MEMORY[0x1E0CFB428];
    v116 = (char *)*MEMORY[0x1E0CFB418];
    v115 = (char *)*MEMORY[0x1E0CFB420];
    v114 = (char *)*MEMORY[0x1E0CFB7B8];
    v113 = (char *)*MEMORY[0x1E0CFBA08];
    string = (char *)*MEMORY[0x1E0CFB368];
    v111 = (char *)*MEMORY[0x1E0CFB3E8];
    v110 = (char *)*MEMORY[0x1E0CFB658];
    v119 = 1;
    v108 = (char *)*MEMORY[0x1E0CFBCB8];
    v109 = (char *)*MEMORY[0x1E0CFB3F0];
    v106 = (char *)*MEMORY[0x1E0CFB9D8];
    v107 = (char *)*MEMORY[0x1E0CFB278];
    v104 = (const char *)*MEMORY[0x1E0CFB020];
    v105 = (char *)*MEMORY[0x1E0CFAFE8];
    v103 = (char *)*MEMORY[0x1E0CFB018];
    __s = (char *)*MEMORY[0x1E0CFB5E0];
    v102 = (const char *)*MEMORY[0x1E0CFB340];
    while (1)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v125, (uint64_t)"[", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] Accessory Info:", 17);
      LOBYTE(__dst) = 10;
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&__dst, 1);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"    ", 4);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ID:           ", 14);
      v16 = (const char *)abm::asString();
      v17 = strlen(v16);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      LOBYTE(__dst) = 10;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&__dst, 1);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"    ", 4);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"State:        ", 14);
      v22 = (const char *)abm::asString();
      v23 = strlen(v22);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      LOBYTE(__dst) = 10;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&__dst, 1);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"    ", 4);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Color:        ", 14);
      v28 = (const char *)abm::asString();
      v29 = strlen(v28);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      LOBYTE(__dst) = 10;
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)&__dst, 1);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"    ", 4);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Power:        ", 14);
      v34 = (const char *)abm::asString();
      v35 = strlen(v34);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      LOBYTE(__dst) = 10;
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)&__dst, 1);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"    ", 4);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Material:     ", 14);
      v40 = (const char *)abm::asString();
      v41 = strlen(v40);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
      LOBYTE(__dst) = 10;
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)&__dst, 1);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"    ", 4);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Connection:   ", 14);
      v46 = (const char *)abm::asString();
      v47 = strlen(v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
      v48 = *(NSObject **)(v2 + 80);
      if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      if ((v132 & 0x10) != 0)
        break;
      if ((v132 & 8) != 0)
      {
        v51 = v128;
        v52 = (const void **)&v127;
        goto LABEL_10;
      }
      v49 = 0;
      HIBYTE(v124) = 0;
      p_dst = (void **)&__dst;
LABEL_19:
      *((_BYTE *)p_dst + v49) = 0;
      v58 = (void **)&__dst;
      if (v124 < 0)
        v58 = __dst;
      *(_DWORD *)buf = 136315138;
      v144 = v58;
      _os_log_impl(&dword_1BF566000, v48, OS_LOG_TYPE_DEFAULT, "#I Sending accessory info update:\n%s", buf, 0xCu);
      if (SHIBYTE(v124) < 0)
        operator delete(__dst);
LABEL_23:
      v59 = xpc_dictionary_create(0, 0, 0);
      if (v59 || (v59 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v59) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v59);
          v60 = v59;
        }
        else
        {
          v60 = xpc_null_create();
        }
      }
      else
      {
        v60 = xpc_null_create();
        v59 = 0;
      }
      xpc_release(v59);
      v61 = (const char *)abm::asString();
      v62 = xpc_string_create(v61);
      if (!v62)
        v62 = xpc_null_create();
      xpc_dictionary_set_value(v60, v10, v62);
      v63 = xpc_null_create();
      xpc_release(v62);
      xpc_release(v63);
      v64 = (const char *)abm::asString();
      v65 = xpc_string_create(v64);
      if (!v65)
        v65 = xpc_null_create();
      xpc_dictionary_set_value(v60, key, v65);
      v66 = xpc_null_create();
      xpc_release(v65);
      xpc_release(v66);
      v67 = (const char *)abm::asString();
      v68 = xpc_string_create(v67);
      if (!v68)
        v68 = xpc_null_create();
      xpc_dictionary_set_value(v60, v116, v68);
      v69 = xpc_null_create();
      xpc_release(v68);
      xpc_release(v69);
      v70 = (const char *)abm::asString();
      v71 = xpc_string_create(v70);
      if (!v71)
        v71 = xpc_null_create();
      xpc_dictionary_set_value(v60, v115, v71);
      v72 = xpc_null_create();
      xpc_release(v71);
      xpc_release(v72);
      v73 = (const char *)abm::asString();
      v74 = xpc_string_create(v73);
      if (!v74)
        v74 = xpc_null_create();
      xpc_dictionary_set_value(v60, v114, v74);
      v75 = xpc_null_create();
      xpc_release(v74);
      xpc_release(v75);
      v76 = (const char *)abm::asString();
      v77 = xpc_string_create(v76);
      if (!v77)
        v77 = xpc_null_create();
      xpc_dictionary_set_value(v60, v113, v77);
      v78 = xpc_null_create();
      xpc_release(v77);
      xpc_release(v78);
      v79 = xpc_dictionary_create(0, 0, 0);
      if (v79 || (v79 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v79) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v79);
          v80 = v79;
        }
        else
        {
          v80 = xpc_null_create();
        }
      }
      else
      {
        v80 = xpc_null_create();
        v79 = 0;
      }
      xpc_release(v79);
      v81 = xpc_string_create(string);
      if (!v81)
        v81 = xpc_null_create();
      xpc_dictionary_set_value(v80, v111, v81);
      v82 = xpc_null_create();
      xpc_release(v81);
      xpc_release(v82);
      v83 = xpc_string_create(v110);
      if (!v83)
        v83 = xpc_null_create();
      xpc_dictionary_set_value(v80, v109, v83);
      v84 = xpc_null_create();
      xpc_release(v83);
      xpc_release(v84);
      v85 = xpc_string_create(v108);
      if (!v85)
        v85 = xpc_null_create();
      xpc_dictionary_set_value(v80, v107, v85);
      v86 = xpc_null_create();
      xpc_release(v85);
      xpc_release(v86);
      if (v60)
      {
        xpc_retain(v60);
        v87 = v60;
      }
      else
      {
        v87 = xpc_null_create();
      }
      xpc_dictionary_set_value(v80, v106, v87);
      v88 = xpc_null_create();
      xpc_release(v87);
      xpc_release(v88);
      v89 = xpc_dictionary_create(0, 0, 0);
      if (v89 || (v89 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v89) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v89);
          v90 = v89;
        }
        else
        {
          v90 = xpc_null_create();
        }
      }
      else
      {
        v90 = xpc_null_create();
        v89 = 0;
      }
      xpc_release(v89);
      v91 = xpc_string_create(v105);
      if (!v91)
        v91 = xpc_null_create();
      xpc_dictionary_set_value(v90, v104, v91);
      v92 = xpc_null_create();
      xpc_release(v91);
      xpc_release(v92);
      if (v80)
      {
        xpc_retain(v80);
        v93 = v80;
      }
      else
      {
        v93 = xpc_null_create();
      }
      xpc_dictionary_set_value(v90, v103, v93);
      v94 = xpc_null_create();
      xpc_release(v93);
      xpc_release(v94);
      v95 = strlen(__s);
      if (v95 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v96 = v95;
      if (v95 >= 0x17)
      {
        v98 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v95 | 7) != 0x17)
          v98 = v95 | 7;
        v99 = v98 + 1;
        v97 = (void **)operator new(v98 + 1);
        v123 = v96;
        v124 = v99 | 0x8000000000000000;
        __dst = v97;
      }
      else
      {
        HIBYTE(v124) = v95;
        v97 = (void **)&__dst;
        if (!v95)
        {
          LOBYTE(__dst) = 0;
          object = v90;
          if (!v90)
            goto LABEL_76;
          goto LABEL_71;
        }
      }
      memmove(v97, __s, v96);
      *((_BYTE *)v97 + v96) = 0;
      object = v90;
      if (!v90)
      {
LABEL_76:
        object = xpc_null_create();
        goto LABEL_77;
      }
LABEL_71:
      xpc_retain(v90);
LABEL_77:
      v120 = 0;
      Service::runCommand(v2, (uint64_t)&__dst, &object, &v120);
      xpc_release(object);
      object = 0;
      if (SHIBYTE(v124) < 0)
        operator delete(__dst);
      xpc_release(v90);
      xpc_release(v80);
      xpc_release(v60);
      ++v119;
      v8 += 12;
      if (v8 == v9)
        goto LABEL_80;
    }
    v51 = *((_QWORD *)&v131 + 1);
    v52 = (const void **)&v128 + 1;
    if (*((_QWORD *)&v131 + 1) < (unint64_t)v129)
    {
      *((_QWORD *)&v131 + 1) = v129;
      v51 = v129;
      v52 = (const void **)&v128 + 1;
    }
LABEL_10:
    v53 = *v52;
    v49 = v51 - (_QWORD)*v52;
    if (v49 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v49 >= 0x17)
    {
      v54 = v9;
      v55 = v2;
      v56 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v49 | 7) != 0x17)
        v56 = v49 | 7;
      v57 = v56 + 1;
      p_dst = (void **)operator new(v56 + 1);
      v123 = v49;
      v124 = v57 | 0x8000000000000000;
      __dst = p_dst;
      v2 = v55;
      v9 = v54;
    }
    else
    {
      HIBYTE(v124) = v51 - *(_BYTE *)v52;
      p_dst = (void **)&__dst;
      if (!v49)
        goto LABEL_18;
    }
    memmove(p_dst, v53, v49);
LABEL_18:
    v10 = v102;
    goto LABEL_19;
  }
LABEL_80:
  v125 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v125 + *(_QWORD *)(v125 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v126 = v101;
  if (SBYTE7(v131) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8C364](&v133);
}

void sub_1BF70FF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](a11);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  v3 = *(_BYTE **)(a2 + 40);
  v2 = *(_BYTE **)(a2 + 48);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = result;
    if (0xAAAAAAAAAAAAAAABLL * (v4 >> 2) >= 0x1555555555555556)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v6 = (char *)operator new(v4);
    v5[5] = v6;
    v5[6] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[7] = v7;
    result = memcpy(v6, v3, v4);
    v5[6] = v7;
  }
  return result;
}

void sub_1BF7101CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(uint64_t a1, _QWORD *a2, _QWORD *a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;

  v6 = a2;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(char **)a1;
  if (__sz > (v8 - *(_QWORD *)a1) >> 4)
  {
    if (v9)
    {
      v10 = *(char **)(a1 + 8);
      v11 = *(char **)a1;
      if (v10 != v9)
      {
        do
        {
          v12 = (std::__shared_weak_count *)*((_QWORD *)v10 - 1);
          if (v12)
          {
            p_shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(p_shared_owners);
            while (__stlxr(v14 - 1, p_shared_owners));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          v10 -= 16;
        }
        while (v10 != v9);
        v11 = *(char **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v33 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v33 = __sz;
    v34 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0;
    v35 = 0xFFFFFFFFFFFFFFFLL;
    if (!v34)
      v35 = v33;
    if (v35 >> 60)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v36 = 2 * v35;
    v37 = operator new(16 * v35);
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 8) = v37;
    *(_QWORD *)(a1 + 16) = &v37[v36];
    while (v6 != a3)
    {
      v38 = v6[1];
      *v37 = *v6;
      v37[1] = v38;
      if (v38)
      {
        v39 = (unint64_t *)(v38 + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v6 += 2;
      v37 += 2;
    }
    *(_QWORD *)(a1 + 8) = v37;
    return;
  }
  v15 = *(char **)(a1 + 8);
  v16 = (v15 - v9) >> 4;
  if (v16 < __sz)
  {
    v17 = &a2[2 * v16];
    if (v15 == v9)
    {
      v18 = *(char **)a1;
      if (v17 == a3)
      {
LABEL_57:
        *(_QWORD *)(a1 + 8) = v18;
        return;
      }
    }
    else
    {
      do
      {
        v20 = *v6;
        v19 = v6[1];
        if (v19)
        {
          v21 = (unint64_t *)(v19 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
        *(_QWORD *)v9 = v20;
        *((_QWORD *)v9 + 1) = v19;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        v6 += 2;
        v9 += 16;
      }
      while (v6 != v17);
      v9 = *(char **)(a1 + 8);
      v18 = v9;
      if (v17 == a3)
        goto LABEL_57;
    }
    v18 = v9;
    do
    {
      v41 = v17[1];
      *(_QWORD *)v18 = *v17;
      *((_QWORD *)v18 + 1) = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 8);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      v17 += 2;
      v18 += 16;
    }
    while (v17 != a3);
    goto LABEL_57;
  }
  if (a2 != a3)
  {
    do
    {
      v27 = *v6;
      v26 = v6[1];
      if (v26)
      {
        v28 = (unint64_t *)(v26 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = v27;
      *((_QWORD *)v9 + 1) = v26;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v6 += 2;
      v9 += 16;
    }
    while (v6 != a3);
    v15 = *(char **)(a1 + 8);
  }
  while (v15 != v9)
  {
    v44 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v15 -= 16;
  }
  *(_QWORD *)(a1 + 8) = v9;
}

void std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 64), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<AccessoryModule *,std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule *)#1},std::allocator<AccessoryModule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15AccessoryModuleE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<AccessoryModule> ctu::SharedSynchronizable<AccessoryModule>::make_shared_ptr<AccessoryModule>(AccessoryModule*)::{lambda(AccessoryModule*)#1}::operator() const(AccessoryModule*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E7920EA8;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI15AccessoryModuleE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15AccessoryModuleEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__110shared_ptrIK15AccessoryModuleEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_QWORD *_ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E7920EE8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEED0Ev(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  *__p = &off_1E7920EE8;
  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

char *_ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E7920EE8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7__cloneEPNS0_6__baseISG_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E7920EE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEEclEOSA_OSF_(_QWORD *a1, const void **a2, uint64_t a3)
{
  const void *v4;
  _BYTE *v5;
  _BYTE *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  int64_t v11;
  char *v12;
  char *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[5];
  CFTypeRef cf;
  void *__p;
  void *v19;
  char *v20;

  v4 = *a2;
  *a2 = 0;
  v5 = *(_BYTE **)a3;
  v6 = *(_BYTE **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v7 = (std::__shared_weak_count *)a1[3];
  if (v7)
  {
    v8 = a1[1];
    v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      v10 = v9;
      if (a1[2])
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 1174405120;
        v16[2] = ___ZZZN15AccessoryModule4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS6_9allocatorIS9_EEEE_block_invoke;
        v16[3] = &__block_descriptor_tmp_26_4;
        v16[4] = v8;
        cf = v4;
        if (v4)
          CFRetain(v4);
        __p = 0;
        v19 = 0;
        v20 = 0;
        v11 = v6 - v5;
        if (v6 != v5)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v11 >> 2) >= 0x1555555555555556)
            std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
          v12 = (char *)operator new(v11);
          v13 = &v12[4 * (v11 >> 2)];
          __p = v12;
          v20 = v13;
          memcpy(v12, v5, v11);
          v19 = v13;
        }
        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v8 + 48), (uint64_t)v16);
        if (__p)
        {
          v19 = __p;
          operator delete(__p);
        }
        if (cf)
          CFRelease(cf);
      }
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (v5)
    operator delete(v5);
  if (v4)
    CFRelease(v4);
}

void sub_1BF710A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef cf, void *__p, uint64_t a17)
{
  const void *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v22;

  if (__p)
    operator delete(__p);
  if (cf)
    CFRelease(cf);
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (v22)
  {
    if (!v18)
      goto LABEL_9;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
    if (!v18)
    {
LABEL_9:
      if (!v17)
LABEL_14:
        _Unwind_Resume(exception_object);
LABEL_13:
      CFRelease(v17);
      goto LABEL_14;
    }
  }
  operator delete(v18);
  if (!v17)
    goto LABEL_14;
  goto LABEL_13;
}

uint64_t _ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN15AccessoryModule4initEvEUb_E3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN15AccessoryModule4initEvEUb_E3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN15AccessoryModule4initEvEUb_E3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN15AccessoryModule4initEvEUb_E3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *_ZNKSt3__110__function6__funcIZZN15AccessoryModule4initEvEUb_E3__0NS_9allocatorIS3_EEFvN3ctu2cf11CFSharedRefI9__CFErrorEENS_6vectorIN3abm13AccessoryInfoENS4_ISD_EEEEEE11target_typeEv()
{
  return &_ZTIZZN15AccessoryModule4initEvEUb_E3__0;
}

void ___ZZZN15AccessoryModule4initEvEUb_ENK3__0clEN3ctu2cf11CFSharedRefI9__CFErrorEENSt3__16vectorIN3abm13AccessoryInfoENS6_9allocatorIS9_EEEE_block_invoke(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  const void *v11;

  v3 = a1[4];
  v2 = (const void *)a1[5];
  v11 = v2;
  if (v2)
    CFRetain(v2);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v5 = (_BYTE *)a1[6];
  v4 = (_BYTE *)a1[7];
  v6 = v4 - v5;
  if (v4 == v5)
  {
    v7 = 0;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 2) >= 0x1555555555555556)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v6);
    v8 = v7;
    v10 = &v7[4 * (v6 >> 2)];
    memcpy(v7, v5, v6);
    v9 = v10;
  }
  AccessoryModule::handleAccessoryConnectionEvent_sync(v3, (uint64_t *)&v11, (uint64_t)&v8);
  if (v7)
    operator delete(v7);
  if (v2)
    CFRelease(v2);
}

void sub_1BF710C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  void *v12;

  if (v12)
    operator delete(v12);
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(&a12);
  _Unwind_Resume(a1);
}

const void *__copy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(_QWORD *a1, _QWORD *a2)
{
  const void *result;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;

  result = (const void *)a2[5];
  a1[5] = result;
  if (result)
    result = CFRetain(result);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  v6 = (_BYTE *)a2[6];
  v5 = (_BYTE *)a2[7];
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(v7);
    a1[6] = v8;
    a1[7] = v8;
    v9 = &v8[4 * (v7 >> 2)];
    a1[8] = v9;
    result = memcpy(v8, v6, v7);
    a1[7] = v9;
  }
  return result;
}

void sub_1BF710D34(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void **v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  ctu::cf::CFSharedRef<__CFError>::~CFSharedRef(v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c38_ZTSN3ctu2cf11CFSharedRefI9__CFErrorEE48c61_ZTSNSt3__16vectorIN3abm13AccessoryInfoENS_9allocatorIS2_EEEE(_QWORD *a1)
{
  void *v2;
  const void *v3;

  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  v3 = (const void *)a1[5];
  if (v3)
    CFRelease(v3);
}

void dispatch::async<void ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped<AccessoryModule::initialize(dispatch::group_session)::$_0>(AccessoryModule::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<AccessoryModule::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<AccessoryModule::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  size_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  size_t v21;
  void *p_p;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const void *v27;
  size_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  NSObject *v35;
  NSObject *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t *v41;
  void *__p;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  const void *v49;
  void *v50[2];
  unint64_t v51;
  void **__dst;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  const void *v59;
  _QWORD aBlock[6];
  std::__shared_weak_count *v61;
  const void *v62;

  v41 = *(uint64_t **)a1;
  v1 = **(_QWORD **)a1;
  v2 = *(std::__shared_weak_count **)(v1 + 56);
  if (!v2 || (v3 = *(_QWORD *)(v1 + 48), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = (const void *)*MEMORY[0x1E0CFBFB8];
  v11 = strlen((const char *)*MEMORY[0x1E0CFBFB8]);
  if (v11 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v53 = v12;
    v54 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v54) = v11;
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v12);
LABEL_17:
  *((_BYTE *)p_dst + v12) = 0;
  v16 = (void **)MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1174405120;
  aBlock[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_31_4;
  aBlock[4] = v1;
  aBlock[5] = v3;
  v61 = v5;
  do
    v17 = __ldxr(p_shared_weak_owners);
  while (__stxr(v17 + 1, p_shared_weak_owners));
  v18 = _Block_copy(aBlock);
  v62 = v18;
  Service::registerCommandHandler(v1, (uint64_t)&__dst, &v62);
  if (v18)
    _Block_release(v18);
  if (SHIBYTE(v54) < 0)
    operator delete(__dst);
  v19 = (const void *)*MEMORY[0x1E0CFBFC8];
  v20 = strlen((const char *)*MEMORY[0x1E0CFBFC8]);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v21 = v20;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    p_p = operator new(v23 + 1);
    v43 = v21;
    v44 = v24 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v44) = v20;
    p_p = &__p;
    if (!v20)
      goto LABEL_31;
  }
  memmove(p_p, v19, v21);
LABEL_31:
  *((_BYTE *)p_p + v21) = 0;
  __dst = v16;
  v53 = 1174405120;
  v54 = (unint64_t)___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_32;
  v55 = &__block_descriptor_tmp_43_1;
  v56 = v1;
  v57 = v3;
  v58 = v5;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v26 = _Block_copy(&__dst);
  v59 = v26;
  Service::registerCommandHandler(v1, (uint64_t)&__p, &v59);
  if (v26)
    _Block_release(v26);
  if (SHIBYTE(v44) < 0)
    operator delete(__p);
  v27 = (const void *)*MEMORY[0x1E0CFBA98];
  v28 = strlen((const char *)*MEMORY[0x1E0CFBA98]);
  if (v28 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v29 = (void *)v28;
  if (v28 >= 0x17)
  {
    v31 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17)
      v31 = v28 | 7;
    v32 = v31 + 1;
    v30 = operator new(v31 + 1);
    v50[1] = v29;
    v51 = v32 | 0x8000000000000000;
    v50[0] = v30;
  }
  else
  {
    HIBYTE(v51) = v28;
    v30 = v50;
    if (!v28)
      goto LABEL_45;
  }
  memmove(v30, v27, (size_t)v29);
LABEL_45:
  *((_BYTE *)v29 + (_QWORD)v30) = 0;
  __p = v16;
  v43 = 1174405120;
  v44 = (unint64_t)___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_44;
  v45 = &__block_descriptor_tmp_47_3;
  v46 = v1;
  v47 = v3;
  v48 = v5;
  do
    v33 = __ldxr(p_shared_weak_owners);
  while (__stxr(v33 + 1, p_shared_weak_owners));
  v34 = _Block_copy(&__p);
  v49 = v34;
  Service::registerCommandHandler(v1, (uint64_t)v50, &v49);
  if (v34)
    _Block_release(v34);
  if (SHIBYTE(v51) < 0)
    operator delete(v50[0]);
  AccessoryModule::finishInitialization_sync((std::__shared_weak_count **)v1);
  if (v48)
    std::__shared_weak_count::__release_weak(v48);
  if (v58)
    std::__shared_weak_count::__release_weak(v58);
  if (v61)
    std::__shared_weak_count::__release_weak(v61);
  std::__shared_weak_count::__release_weak(v5);
  v35 = v41[1];
  if (v35)
  {
    dispatch_group_leave(v35);
    v36 = v41[1];
    if (v36)
      dispatch_release(v36);
  }
  operator delete(v41);
  v37 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  operator delete(a1);
}

void sub_1BF711204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, _QWORD *__p, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  std::__shared_weak_count *v45;
  NSObject *v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;

  if (a20)
    std::__shared_weak_count::__release_weak(a20);
  if (a37)
    std::__shared_weak_count::__release_weak(a37);
  if (a45)
    std::__shared_weak_count::__release_weak(a45);
  std::__shared_weak_count::__release_weak(v45);
  v47 = __p[1];
  if (v47)
  {
    dispatch_group_leave(v47);
    v48 = __p[1];
    if (v48)
      dispatch_release(v48);
  }
  operator delete(__p);
  v49 = (std::__shared_weak_count *)a9[2];
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  operator delete(a9);
  _Unwind_Resume(a1);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke(_QWORD *a1, uint64_t a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD v12[5];
  void *aBlock;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v6 = a1[4];
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      if (a1[5])
      {
        v12[0] = MEMORY[0x1E0C809B0];
        v12[1] = 1174405120;
        v12[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
        v12[3] = &__block_descriptor_tmp_29_3;
        v12[4] = v6;
        v9 = *a3;
        if (*a3)
          v9 = _Block_copy(v9);
        aBlock = v9;
        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v6 + 48), (uint64_t)v12);
        if (aBlock)
          _Block_release(aBlock);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  xpc_object_t *v16;
  uint64_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  void *v22;
  xpc_object_t *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  unsigned int v26;
  xpc_object_t object[4];
  std::string __dst;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2))
  {
    LOWORD(v26) = abm::AccessorySimulate::create((abm::AccessorySimulate *)*(unsigned __int8 *)(v2 + 160));
    abm::AccessorySimulate::toDict((abm::AccessorySimulate *)&v26);
    v7 = *(_QWORD *)(a1 + 40);
    object[0] = __dst.__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    (*(void (**)(uint64_t, _QWORD, xpc_object_t *))(v7 + 16))(v7, 0, object);
    xpc_release(object[0]);
    xpc_release(__dst.__r_.__value_.__l.__data_);
    return;
  }
  memset(object, 170, 24);
  v3 = (const void *)*MEMORY[0x1E0CFBFB8];
  v4 = strlen((const char *)*MEMORY[0x1E0CFBFB8]);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_10:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, " rejected; ABM is shutting down ");
  v11 = std::string::append(&__dst, v10, 0x20uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  object[2] = (xpc_object_t)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)object = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  operator delete(v10);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v13 = *(NSObject **)(v2 + 80);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
LABEL_16:
    v16 = object;
    if (SHIBYTE(object[2]) < 0)
      v16 = (xpc_object_t *)object[0];
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
    _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
    v17 = *(_QWORD *)(a1 + 40);
    v14 = (uint64_t *)(a1 + 40);
    if (!v17)
      goto LABEL_35;
    goto LABEL_19;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  v13 = *(NSObject **)(v2 + 80);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    goto LABEL_16;
LABEL_13:
  v15 = *(_QWORD *)(a1 + 40);
  v14 = (uint64_t *)(a1 + 40);
  if (v15)
  {
LABEL_19:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v18 = (xpc_object_t)HIBYTE(object[2]);
    if (SHIBYTE(object[2]) < 0)
      v18 = object[1];
    if (v18)
    {
      v19 = xpc_dictionary_create(0, 0, 0);
      if (v19 || (v19 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v19) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v19);
          v20 = v19;
        }
        else
        {
          v20 = xpc_null_create();
        }
      }
      else
      {
        v20 = xpc_null_create();
        v19 = 0;
      }
      xpc_release(v19);
      v21 = xpc_null_create();
      v22 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      xpc_release(v22);
      xpc_release(v21);
      if (SHIBYTE(object[2]) >= 0)
        v23 = object;
      else
        v23 = (xpc_object_t *)object[0];
      v24 = xpc_string_create((const char *)v23);
      if (!v24)
        v24 = xpc_null_create();
      xpc_dictionary_set_value(v20, (const char *)*MEMORY[0x1E0CFB0D0], v24);
      v25 = xpc_null_create();
      xpc_release(v24);
      xpc_release(v25);
    }
    v26 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v14, &v26, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_35:
  if (SHIBYTE(object[2]) < 0)
    operator delete(object[0]);
}

void sub_1BF7117F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, xpc_object_t object, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_32(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *aBlock;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_33;
      v14[3] = &__block_descriptor_tmp_42_0;
      v14[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v7 + 48), (uint64_t)v14);
      xpc_release(object);
      object = 0;
      if (aBlock)
        _Block_release(aBlock);
      goto LABEL_11;
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_33(_QWORD *a1)
{
  uint64_t *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  int v20;
  void **v21;
  uint64_t v22;
  void *v23;
  xpc_object_t v24;
  xpc_object_t v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  xpc_object_t v31;
  void *v32;
  void **v33;
  xpc_object_t v34;
  xpc_object_t v35;
  unint64_t *v36;
  unint64_t v37;
  const char *v38;
  size_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _BOOL4 v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t (***v49)(_QWORD, uint64_t);
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  size_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  NSObject *v64;
  const char *v65;
  _QWORD *v66;
  _QWORD *i;
  xpc_object_t v68;
  uint64_t v69;
  xpc_object_t v70;
  _QWORD v71[5];
  xpc_object_t object;
  unsigned int v73;
  std::string __dst;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)a1[4];
  if (!(*(unsigned int (**)(uint64_t *))(*v2 + 88))(v2))
  {
    v7 = (void *)a1[6];
    object = v7;
    if (v7)
      xpc_retain(v7);
    else
      object = xpc_null_create();
    v16 = abm::AccessorySimulate::create();
    xpc_release(object);
    object = 0;
    if ((v16 & 0x100) == 0)
    {
      v17 = 3760250880;
      v18 = v2[10];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        v19 = "Failed setting AccessorySimulate status, bad argument";
LABEL_115:
        _os_log_error_impl(&dword_1BF566000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)__p, 2u);
        goto LABEL_112;
      }
      goto LABEL_112;
    }
    v20 = v16 & 1;
    if (v20 == *((unsigned __int8 *)v2 + 160))
    {
LABEL_21:
      v17 = 0;
      goto LABEL_112;
    }
    pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
    if (!(_QWORD)xmmword_1ED70F248)
    {
      v27 = operator new(0x18uLL);
      MEMORY[0x1C3B8B8C0](v27, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
      v26 = operator new(0x20uLL);
      *v26 = &unk_1E7919E70;
      v26[1] = 0;
      v26[2] = 0;
      v26[3] = v27;
      v28 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
      *(_QWORD *)&xmmword_1ED70F248 = v27;
      *((_QWORD *)&xmmword_1ED70F248 + 1) = v26;
      if (!v28)
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
LABEL_53:
        v36 = v26 + 1;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
LABEL_55:
        pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
        v38 = (const char *)*MEMORY[0x1E0CFB978];
        v39 = strlen((const char *)*MEMORY[0x1E0CFB978]);
        if (v39 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v40 = (void *)v39;
        if (v39 >= 0x17)
        {
          v42 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v39 | 7) != 0x17)
            v42 = v39 | 7;
          v43 = v42 + 1;
          v41 = operator new(v42 + 1);
          __p[1] = v40;
          __p[2] = (void *)(v43 | 0x8000000000000000);
          __p[0] = v41;
        }
        else
        {
          HIBYTE(__p[2]) = v39;
          v41 = __p;
          if (!v39)
          {
LABEL_63:
            *((_BYTE *)v40 + (_QWORD)v41) = 0;
            if (SHIBYTE(__p[2]) >= 0)
              v44 = (char *)__p;
            else
              v44 = (char *)__p[0];
            v45 = ctu::cf::plist_adapter::set<BOOL>((uint64_t)v27, v20, v44, 1);
            if (SHIBYTE(__p[2]) < 0)
              operator delete(__p[0]);
            if (__dst.__r_.__value_.__l.__size_)
            {
              v46 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                (*(void (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__size_ + 16))(__dst.__r_.__value_.__l.__size_);
                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
              }
            }
            if (!v45)
              goto LABEL_111;
            pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
            if (!(_QWORD)xmmword_1ED70F248)
            {
              v49 = (uint64_t (***)(_QWORD, uint64_t))operator new(0x18uLL);
              MEMORY[0x1C3B8B8C0](v49, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
              v48 = operator new(0x20uLL);
              *v48 = &unk_1E7919E70;
              v48[1] = 0;
              v48[2] = 0;
              v48[3] = v49;
              v50 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_1ED70F248 + 1);
              *(_QWORD *)&xmmword_1ED70F248 = v49;
              *((_QWORD *)&xmmword_1ED70F248 + 1) = v48;
              if (!v50)
              {
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
                __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
LABEL_83:
                v53 = v48 + 1;
                do
                  v54 = __ldxr(v53);
                while (__stxr(v54 + 1, v53));
LABEL_85:
                pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
                v55 = strlen(v38);
                if (v55 > 0x7FFFFFFFFFFFFFF7)
                  std::string::__throw_length_error[abi:ne180100]();
                v56 = (void *)v55;
                if (v55 >= 0x17)
                {
                  v58 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v55 | 7) != 0x17)
                    v58 = v55 | 7;
                  v59 = v58 + 1;
                  v57 = operator new(v58 + 1);
                  __p[1] = v56;
                  __p[2] = (void *)(v59 | 0x8000000000000000);
                  __p[0] = v57;
                }
                else
                {
                  HIBYTE(__p[2]) = v55;
                  v57 = __p;
                  if (!v55)
                  {
LABEL_93:
                    *((_BYTE *)v56 + (_QWORD)v57) = 0;
                    v60 = Preferences::getPreference<BOOL>(v49, (const char *)__p, (ctu::cf *)(v2 + 20));
                    if (SHIBYTE(__p[2]) < 0)
                      operator delete(__p[0]);
                    if (__dst.__r_.__value_.__l.__size_)
                    {
                      v61 = (unint64_t *)(__dst.__r_.__value_.__l.__size_ + 8);
                      do
                        v62 = __ldaxr(v61);
                      while (__stlxr(v62 - 1, v61));
                      if (!v62)
                      {
                        (*(void (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__size_
                                                                       + 16))(__dst.__r_.__value_.__l.__size_);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
                      }
                    }
                    if (v60)
                    {
                      v63 = *((unsigned __int8 *)v2 + 160);
                      if (v20 == v63)
                      {
                        v64 = v2[10];
                        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                        {
                          v65 = "Enabling";
                          if (!v63)
                            v65 = "Disabling";
                          LODWORD(__p[0]) = 136315138;
                          *(void **)((char *)__p + 4) = (void *)v65;
                          _os_log_impl(&dword_1BF566000, v64, OS_LOG_TYPE_DEFAULT, "#I %s accessory simulation", (uint8_t *)__p, 0xCu);
                          v64 = v2[10];
                        }
                        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                        {
                          LOWORD(__p[0]) = 0;
                          _os_log_impl(&dword_1BF566000, v64, OS_LOG_TYPE_DEFAULT, "#I Stopping all delegates", (uint8_t *)__p, 2u);
                        }
                        v66 = (_QWORD *)v2[13];
                        for (i = (_QWORD *)v2[14]; v66 != i; v66 += 2)
                          (*(void (**)(_QWORD))(*(_QWORD *)*v66 + 40))(*v66);
                        v71[0] = MEMORY[0x1E0C809B0];
                        v71[1] = 0x40000000;
                        v71[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_36;
                        v71[3] = &__block_descriptor_tmp_41_3;
                        v71[4] = v2;
                        ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped(v2 + 6, (uint64_t)v71);
                        goto LABEL_21;
                      }
                    }
LABEL_111:
                    v17 = 3760250880;
                    v18 = v2[10];
                    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__p[0]) = 0;
                      v19 = "Failed setting AccessorySimulate status to preferences";
                      goto LABEL_115;
                    }
LABEL_112:
                    v68 = xpc_null_create();
                    v69 = a1[5];
                    __p[0] = v68;
                    v70 = xpc_null_create();
                    (*(void (**)(uint64_t, uint64_t, void **))(v69 + 16))(v69, v17, __p);
                    xpc_release(__p[0]);
                    xpc_release(v70);
                    return;
                  }
                }
                memmove(v57, v38, (size_t)v56);
                goto LABEL_93;
              }
              p_shared_owners = (unint64_t *)&v50->__shared_owners_;
              do
                v52 = __ldaxr(p_shared_owners);
              while (__stlxr(v52 - 1, p_shared_owners));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
                std::__shared_weak_count::__release_weak(v50);
              }
            }
            v48 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
            v49 = (uint64_t (***)(_QWORD, uint64_t))xmmword_1ED70F248;
            *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1ED70F248;
            if (!*((_QWORD *)&xmmword_1ED70F248 + 1))
              goto LABEL_85;
            goto LABEL_83;
          }
        }
        memmove(v41, v38, (size_t)v40);
        goto LABEL_63;
      }
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v26 = (_QWORD *)*((_QWORD *)&xmmword_1ED70F248 + 1);
    v27 = (void *)xmmword_1ED70F248;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = xmmword_1ED70F248;
    if (!*((_QWORD *)&xmmword_1ED70F248 + 1))
      goto LABEL_55;
    goto LABEL_53;
  }
  memset(__p, 170, 24);
  v3 = (const void *)*MEMORY[0x1E0CFBFC8];
  v4 = strlen((const char *)*MEMORY[0x1E0CFBFC8]);
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_11;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_11:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = (char *)operator new(0x28uLL);
  strcpy(v10, " rejected; ABM is shutting down ");
  v11 = std::string::append(&__dst, v10, 0x20uLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  __p[2] = (void *)v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  operator delete(v10);
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v13 = v2[10];
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
LABEL_23:
    v21 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v21 = (void **)__p[0];
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
    _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
    v22 = a1[5];
    v14 = a1 + 5;
    if (!v22)
      goto LABEL_50;
    goto LABEL_26;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  v13 = v2[10];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    goto LABEL_23;
LABEL_14:
  v15 = a1[5];
  v14 = a1 + 5;
  if (v15)
  {
LABEL_26:
    __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v23 = (void *)HIBYTE(__p[2]);
    if (SHIBYTE(__p[2]) < 0)
      v23 = __p[1];
    if (v23)
    {
      v24 = xpc_dictionary_create(0, 0, 0);
      if (v24 || (v24 = xpc_null_create()) != 0)
      {
        if (MEMORY[0x1C3B8CD78](v24) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v24);
          v25 = v24;
        }
        else
        {
          v25 = xpc_null_create();
        }
      }
      else
      {
        v25 = xpc_null_create();
        v24 = 0;
      }
      xpc_release(v24);
      v31 = xpc_null_create();
      v32 = (void *)__dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      xpc_release(v32);
      xpc_release(v31);
      if (SHIBYTE(__p[2]) >= 0)
        v33 = __p;
      else
        v33 = (void **)__p[0];
      v34 = xpc_string_create((const char *)v33);
      if (!v34)
        v34 = xpc_null_create();
      xpc_dictionary_set_value(v25, (const char *)*MEMORY[0x1E0CFB0D0], v34);
      v35 = xpc_null_create();
      xpc_release(v34);
      xpc_release(v35);
    }
    v73 = -534716415;
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v14, &v73, (void **)&__dst.__r_.__value_.__l.__data_);
    xpc_release(__dst.__r_.__value_.__l.__data_);
  }
LABEL_50:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_36(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  NSObject *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  __int128 v28;
  const char *v29;
  uint64_t v30;
  size_t v31;
  void **p_dst;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  xpc_object_t v38;
  xpc_object_t v39;
  const void *v40;
  size_t v41;
  size_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const void *v47;
  xpc_object_t v48;
  void **__dst;
  size_t v50;
  int64_t v51;
  dispatch_object_t v52;
  dispatch_object_t v53;
  dispatch_object_t object;
  uint8_t buf[16];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  _OWORD v63[9];
  unint64_t v64;
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 160))
  {
    v2 = *(_QWORD *)(v1 + 152);
    if (v2)
    {
      if (v2 == v1 + 128)
      {
        v70 = v69;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 24))(v2, v69);
        goto LABEL_11;
      }
      v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    }
    v70 = (_QWORD *)v2;
LABEL_11:
    v5 = *(NSObject **)(v1 + 64);
    object = v5;
    if (v5)
      dispatch_retain(v5);
    AccessorySimulatorDelegate::create(v69, &object, (std::__shared_weak_count_vtbl **)buf);
    std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(v1 + 104, buf, &v56, 1uLL);
    v6 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v7 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (object)
      dispatch_release(object);
    v9 = v70;
    if (v70 == v69)
    {
      (*(void (**)(void))(v69[0] + 32))();
      if (!*(_QWORD *)(v1 + 88))
        return;
      goto LABEL_58;
    }
    if (v70)
      goto LABEL_22;
    goto LABEL_57;
  }
  v3 = v1 + 128;
  v4 = *(_QWORD *)(v1 + 152);
  if (!v4)
    goto LABEL_9;
  if (v4 != v3)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
LABEL_9:
    v68 = (_QWORD *)v4;
    goto LABEL_27;
  }
  v68 = v67;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v1 + 128, v67);
LABEL_27:
  v10 = *(NSObject **)(v1 + 64);
  v53 = v10;
  if (v10)
    dispatch_retain(v10);
  CoreAccessoriesDelegate::create(v67, &v53, (std::__shared_weak_count_vtbl **)buf);
  v11 = *(_QWORD *)(v1 + 152);
  if (!v11)
    goto LABEL_32;
  if (v11 != v3)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
LABEL_32:
    v66 = (_QWORD *)v11;
    goto LABEL_34;
  }
  v66 = v65;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 24))(v1 + 128, v65);
LABEL_34:
  v12 = *(NSObject **)(v1 + 64);
  v52 = v12;
  if (v12)
    dispatch_retain(v12);
  IOKitAccessoriesDelegate::create(v65, &v52, (std::__shared_weak_count_vtbl **)&v56);
  std::vector<std::shared_ptr<AccessoriesDelegateBase>>::__assign_with_size[abi:ne180100]<std::shared_ptr<AccessoriesDelegateBase> const*,std::shared_ptr<AccessoriesDelegateBase> const*>(v1 + 104, buf, &v57, 2uLL);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v52)
    dispatch_release(v52);
  v19 = v66;
  if (v66 == v65)
  {
    v20 = 4;
    v19 = v65;
    goto LABEL_52;
  }
  if (v66)
  {
    v20 = 5;
LABEL_52:
    (*(void (**)(void))(*v19 + 8 * v20))();
  }
  if (v53)
    dispatch_release(v53);
  v9 = v68;
  if (v68 == v67)
  {
    (*(void (**)(void))(v67[0] + 32))();
    if (!*(_QWORD *)(v1 + 88))
      return;
    goto LABEL_58;
  }
  if (v68)
  {
LABEL_22:
    (*(void (**)(_QWORD *))(*v9 + 40))(v9);
    if (!*(_QWORD *)(v1 + 88))
      return;
    goto LABEL_58;
  }
LABEL_57:
  if (!*(_QWORD *)(v1 + 88))
    return;
LABEL_58:
  v21 = *(NSObject **)(v1 + 80);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEFAULT, "#I Requesting modem soft reset due to accessory mode change", buf, 2u);
  }
  v22 = xpc_dictionary_create(0, 0, 0);
  if (v22 || (v22 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v22) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v22);
      v23 = v22;
    }
    else
    {
      v23 = xpc_null_create();
    }
  }
  else
  {
    v23 = xpc_null_create();
    v22 = 0;
  }
  xpc_release(v22);
  v24 = xpc_string_create((const char *)*MEMORY[0x1E0CFB598]);
  if (!v24)
    v24 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB538], v24);
  v25 = xpc_null_create();
  xpc_release(v24);
  xpc_release(v25);
  v26 = xpc_string_create((const char *)*MEMORY[0x1E0CFBFA0]);
  if (!v26)
    v26 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB8D0], v26);
  v27 = xpc_null_create();
  xpc_release(v26);
  xpc_release(v27);
  v64 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v28 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v63[7] = v28;
  v63[8] = v28;
  v63[5] = v28;
  v63[6] = v28;
  v63[3] = v28;
  v63[4] = v28;
  v63[1] = v28;
  v63[2] = v28;
  v62 = v28;
  v63[0] = v28;
  *(_OWORD *)__p = v28;
  v61 = v28;
  v58 = v28;
  v59 = v28;
  v56 = v28;
  v57 = v28;
  *(_OWORD *)buf = v28;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"User requested to ", 18);
  if (*(_BYTE *)(v1 + 160))
    v29 = "enable";
  else
    v29 = "disable";
  if (*(_BYTE *)(v1 + 160))
    v30 = 6;
  else
    v30 = 7;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)v29, v30);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Accessory Simulation", 20);
  if ((BYTE8(v62) & 0x10) != 0)
  {
    v33 = v62;
    if ((unint64_t)v62 < *((_QWORD *)&v59 + 1))
    {
      *(_QWORD *)&v62 = *((_QWORD *)&v59 + 1);
      v33 = *((_QWORD *)&v59 + 1);
    }
    v34 = (const void *)v59;
    v31 = v33 - v59;
    if ((unint64_t)(v33 - v59) > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_115;
  }
  else
  {
    if ((BYTE8(v62) & 8) == 0)
    {
      v31 = 0;
      HIBYTE(v51) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_91;
    }
    v34 = (const void *)*((_QWORD *)&v57 + 1);
    v31 = *((_QWORD *)&v58 + 1) - *((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v58 + 1) - *((_QWORD *)&v57 + 1) > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_115:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v31 >= 0x17)
  {
    v35 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v31 | 7) != 0x17)
      v35 = v31 | 7;
    v36 = v35 + 1;
    p_dst = (void **)operator new(v35 + 1);
    v50 = v31;
    v51 = v36 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_90;
  }
  HIBYTE(v51) = v31;
  p_dst = (void **)&__dst;
  if (v31)
LABEL_90:
    memmove(p_dst, v34, v31);
LABEL_91:
  *((_BYTE *)p_dst + v31) = 0;
  if (v51 >= 0)
    v37 = (const char *)&__dst;
  else
    v37 = (const char *)__dst;
  v38 = xpc_string_create(v37);
  if (!v38)
    v38 = xpc_null_create();
  xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB788], v38);
  v39 = xpc_null_create();
  xpc_release(v38);
  xpc_release(v39);
  if (SHIBYTE(v51) < 0)
    operator delete(__dst);
  v40 = (const void *)*MEMORY[0x1E0CFB4E0];
  v41 = strlen((const char *)*MEMORY[0x1E0CFB4E0]);
  if (v41 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v42 = v41;
  if (v41 >= 0x17)
  {
    v44 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v41 | 7) != 0x17)
      v44 = v41 | 7;
    v45 = v44 + 1;
    v43 = (void **)operator new(v44 + 1);
    v50 = v42;
    v51 = v45 | 0x8000000000000000;
    __dst = v43;
LABEL_106:
    memmove(v43, v40, v42);
    *((_BYTE *)v43 + v42) = 0;
    v48 = v23;
    if (v23)
      goto LABEL_102;
LABEL_107:
    v48 = xpc_null_create();
    goto LABEL_108;
  }
  HIBYTE(v51) = v41;
  v43 = (void **)&__dst;
  if (v41)
    goto LABEL_106;
  LOBYTE(__dst) = 0;
  v48 = v23;
  if (!v23)
    goto LABEL_107;
LABEL_102:
  xpc_retain(v23);
LABEL_108:
  v47 = 0;
  Service::runCommand(v1, (uint64_t)&__dst, &v48, &v47);
  xpc_release(v48);
  v48 = 0;
  if (SHIBYTE(v51) < 0)
    operator delete(__dst);
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
  v46 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v56 = v46;
  *((_QWORD *)&v56 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v61) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8C364](v63);
  xpc_release(v23);
}

void sub_1BF712C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t object, dispatch_object_t a18, dispatch_object_t a19, char a20)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_44(_QWORD *a1, void **a2, const void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  void *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD v14[5];
  void *aBlock;
  xpc_object_t object;

  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      if (!a1[5])
      {
LABEL_11:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        return;
      }
      v14[0] = MEMORY[0x1E0C809B0];
      v14[1] = 1174405120;
      v14[2] = ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_45;
      v14[3] = &__block_descriptor_tmp_46_2;
      v14[4] = v7;
      if (*a3)
      {
        v10 = _Block_copy(*a3);
        v11 = *a2;
        aBlock = v10;
        object = v11;
        if (v11)
        {
LABEL_6:
          xpc_retain(v11);
          goto LABEL_9;
        }
      }
      else
      {
        v11 = *a2;
        aBlock = 0;
        object = v11;
        if (v11)
          goto LABEL_6;
      }
      object = xpc_null_create();
LABEL_9:
      ctu::SharedSynchronizable<AccessoryModule>::execute_wrapped((uint64_t *)(v7 + 48), (uint64_t)v14);
      xpc_release(object);
      object = 0;
      if (aBlock)
        _Block_release(aBlock);
      goto LABEL_11;
    }
  }
}

void ___ZZN15AccessoryModule10initializeEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2_45(_QWORD *a1)
{
  _QWORD *v2;
  const void *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  xpc_object_t *v8;
  const char *v9;
  xpc_object_t value;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  void *v21;
  xpc_object_t v22;
  xpc_object_t v23;
  std::string *v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  xpc_object_t v31;
  uint64_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  void *v35;
  void **v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  std::string v40;
  xpc_object_t object;
  void *__p[4];
  std::string __dst;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)a1[4];
  if ((*(unsigned int (**)(_QWORD *))(*v2 + 88))(v2))
  {
    memset(__p, 170, 24);
    v3 = (const void *)*MEMORY[0x1E0CFBA98];
    v4 = strlen((const char *)*MEMORY[0x1E0CFBA98]);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v11 = v4 | 7;
      v12 = v11 + 1;
      p_dst = (std::string *)operator new(v11 + 1);
      __dst.__r_.__value_.__l.__size_ = v5;
      __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
      p_dst = &__dst;
      if (!v4)
      {
LABEL_14:
        p_dst->__r_.__value_.__s.__data_[v5] = 0;
        v13 = (char *)operator new(0x28uLL);
        strcpy(v13, " rejected; ABM is shutting down ");
        v14 = std::string::append(&__dst, v13, 0x20uLL);
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        operator delete(v13);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          v16 = v2[10];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
LABEL_16:
            v18 = a1[5];
            v17 = a1 + 5;
            if (!v18)
            {
LABEL_62:
              if (SHIBYTE(__p[2]) < 0)
                operator delete(__p[0]);
              return;
            }
LABEL_22:
            __dst.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAAALL;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
            v21 = (void *)HIBYTE(__p[2]);
            if (SHIBYTE(__p[2]) < 0)
              v21 = __p[1];
            if (v21)
            {
              v22 = xpc_dictionary_create(0, 0, 0);
              if (v22 || (v22 = xpc_null_create()) != 0)
              {
                if (MEMORY[0x1C3B8CD78](v22) == MEMORY[0x1E0C812F8])
                {
                  xpc_retain(v22);
                  v23 = v22;
                }
                else
                {
                  v23 = xpc_null_create();
                }
              }
              else
              {
                v23 = xpc_null_create();
                v22 = 0;
              }
              xpc_release(v22);
              v34 = xpc_null_create();
              v35 = (void *)__dst.__r_.__value_.__r.__words[0];
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
              xpc_release(v35);
              xpc_release(v34);
              if (SHIBYTE(__p[2]) >= 0)
                v36 = __p;
              else
                v36 = (void **)__p[0];
              v37 = xpc_string_create((const char *)v36);
              if (!v37)
                v37 = xpc_null_create();
              xpc_dictionary_set_value(v23, (const char *)*MEMORY[0x1E0CFB0D0], v37);
              v38 = xpc_null_create();
              xpc_release(v37);
              xpc_release(v38);
            }
            LODWORD(object) = -534716415;
            dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int,xpc::dict&>(v17, (unsigned int *)&object, (void **)&__dst.__r_.__value_.__l.__data_);
            xpc_release(__dst.__r_.__value_.__l.__data_);
            goto LABEL_62;
          }
        }
        else
        {
          v16 = v2[10];
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            goto LABEL_16;
        }
        v19 = __p;
        if (SHIBYTE(__p[2]) < 0)
          v19 = (void **)__p[0];
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
        _os_log_impl(&dword_1BF566000, v16, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&__dst, 0xCu);
        v20 = a1[5];
        v17 = a1 + 5;
        if (!v20)
          goto LABEL_62;
        goto LABEL_22;
      }
    }
    memmove(p_dst, v3, v5);
    goto LABEL_14;
  }
  v7 = 3760250880;
  v8 = (xpc_object_t *)(a1 + 6);
  if (MEMORY[0x1C3B8CD78](a1[6]) == MEMORY[0x1E0C812F8])
  {
    v9 = (const char *)*MEMORY[0x1E0CFBA98];
    if (xpc_dictionary_get_value(*v8, (const char *)*MEMORY[0x1E0CFBA98]))
    {
      memset(&__dst, 170, sizeof(__dst));
      value = xpc_dictionary_get_value(*v8, v9);
      object = value;
      if (value)
        xpc_retain(value);
      else
        object = xpc_null_create();
      __p[1] = 0;
      __p[2] = 0;
      xpc::dyn_cast_or_default();
      xpc_release(object);
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      __p[0] = a1 + 6;
      v24 = &__dst;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      __p[1] = v24;
      xpc::dict::object_proxy::operator xpc::dict((uint64_t)__p, &object);
      v25 = (uint64_t *)v2[13];
      v26 = (uint64_t *)v2[14];
      if (v25 == v26)
      {
        v30 = 0;
      }
      else
      {
        v27 = 0;
        do
        {
          v28 = *v25;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v40, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
          else
            v40 = __dst;
          v39 = object;
          if (object)
            xpc_retain(object);
          else
            v39 = xpc_null_create();
          v29 = (*(uint64_t (**)(uint64_t, std::string *, xpc_object_t *))(*(_QWORD *)v28 + 24))(v28, &v40, &v39);
          xpc_release(v39);
          v39 = 0;
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40.__r_.__value_.__l.__data_);
          if (v29)
            v27 = 1;
          v25 += 2;
        }
        while (v25 != v26);
        v30 = v27;
      }
      xpc_release(object);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (v30)
        v7 = 0;
      else
        v7 = 3760250880;
    }
  }
  v31 = xpc_null_create();
  v32 = a1[5];
  __p[0] = v31;
  v33 = xpc_null_create();
  (*(void (**)(uint64_t, uint64_t, void **))(v32 + 16))(v32, v7, __p);
  xpc_release(__p[0]);
  xpc_release(v33);
}

void sub_1BF7134DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t __cxx_global_var_init_20()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF566000);
  }
  return result;
}

{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMProperties>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t __cxx_global_var_init_21_0()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<CommandDriverFactory>::~PthreadMutexGuardPolicy, &ctu::Singleton<CommandDriverFactory,CommandDriverFactory,ctu::PthreadMutexGuardPolicy<CommandDriverFactory>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void abm::AWDHelperSetConnection(uint64_t *a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  __int128 v15;

  v1 = a1[1];
  v13 = *a1;
  v14 = (std::__shared_weak_count *)v1;
  if (v1)
  {
    v2 = (unint64_t *)(v1 + 8);
    do
      v3 = __ldxr(v2);
    while (__stxr(v3 + 1, v2));
  }
  abm::AWDHelper::create(&v13, &v15);
  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v4 = (std::__shared_weak_count *)off_1ED70F390;
  *(_OWORD *)&qword_1ED70F388 = v15;
  v15 = 0uLL;
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF7137CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF7137E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t abm::isWISServerAvailable(abm *this)
{
  return 1;
}

void abm::AWDHelper::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = operator new(0x10uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *v4 = v6;
    v4[1] = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    *v4 = v6;
    v4[1] = 0;
  }
  *a2 = v4;
  v11 = operator new(0x20uLL);
  *v11 = off_1E7921108;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = v5;
  a2[1] = v11;
  if (v7)
  {
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF7138E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v13;

  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  operator delete(v10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void abm::AWDHelperGetConnection(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;

  pthread_mutex_lock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v3 = (_QWORD *)qword_1ED70F388;
  if (!qword_1ED70F388)
  {
    abm::AWDHelper::create_default_global(&v19);
    v4 = v19;
    v19 = 0uLL;
    v5 = (std::__shared_weak_count *)off_1ED70F390;
    *(_OWORD *)&qword_1ED70F388 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v3 = (_QWORD *)qword_1ED70F388;
  }
  v11 = (std::__shared_weak_count *)off_1ED70F390;
  if (off_1ED70F390)
  {
    v12 = (unint64_t *)((char *)off_1ED70F390 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  v14 = v3[1];
  *a1 = *v3;
  a1[1] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  if (v11)
  {
    v17 = (unint64_t *)&v11->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF713A8C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance);
  _Unwind_Resume(a1);
}

uint64_t ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = *(_QWORD **)(a1 + 24);
  if (v1)
  {
    v2 = (std::__shared_weak_count *)v1[1];
    if (!v2)
      goto LABEL_6;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      operator delete(v1);
    }
    else
    {
LABEL_6:
      operator delete(v1);
    }
  }
}

uint64_t std::__shared_ptr_pointer<abm::AWDHelper *,std::shared_ptr<abm::AWDHelper>::__shared_ptr_default_delete<abm::AWDHelper,abm::AWDHelper>,std::allocator<abm::AWDHelper>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF7459DDLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF7459DDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF7459DDLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF7459DDLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void abm::AWDHelper::create_default_global(_QWORD *a1@<X8>)
{
  wis::WISServerConnection *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  wis::WISServerConnection *v13;
  std::__shared_weak_count *v14;
  wis::WISServerConnection *v15;
  std::__shared_weak_count *v16;

  v3 = (wis::WISServerConnection *)operator new(0x10uLL);
  wis::WISServerConnection::WISServerConnection(v3);
  v15 = v3;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7921158;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)v3;
  v16 = v4;
  v13 = v3;
  v14 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  abm::AWDHelper::create((uint64_t *)&v13, a1);
  v7 = v14;
  if (v14)
  {
    v8 = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF713D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  if (*(_QWORD *)(a1 + 24))
  {
    v1 = (void *)MEMORY[0x1C3B8BD1C]();
    operator delete(v1);
  }
}

uint64_t std::__shared_ptr_pointer<wis::WISServerConnection *,std::shared_ptr<wis::WISServerConnection>::__shared_ptr_default_delete<wis::WISServerConnection,wis::WISServerConnection>,std::allocator<wis::WISServerConnection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF745AB3)
    return a1 + 24;
  if (((v3 & 0x80000001BF745AB3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF745AB3))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF745AB3 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t __cxx_global_var_init_16()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<abm::AWDHelper>::~PthreadMutexGuardPolicy, &ctu::Singleton<abm::AWDHelper,abm::AWDHelper,ctu::PthreadMutexGuardPolicy<abm::AWDHelper>>::sInstance, &dword_1BF566000);
  }
  return result;
}

BasebandTransportICE *BasebandTransportICE::BasebandTransportICE(BasebandTransportICE *a1, uint64_t *a2, NSObject **a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  dispatch_object_t object;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = (std::__shared_weak_count *)a2[1];
  v13 = *a2;
  v14 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *a3;
  object = v7;
  if (v7)
    dispatch_retain(v7);
  BasebandTransport::BasebandTransport((uint64_t)a1, &v13, &object);
  if (object)
    dispatch_release(object);
  v8 = v14;
  if (v14)
  {
    v9 = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = off_1E79211A8;
  *((_QWORD *)a1 + 54) = 0;
  *((_QWORD *)a1 + 58) = 0;
  *((_QWORD *)a1 + 62) = 0;
  *((_QWORD *)a1 + 63) = 0;
  *((_QWORD *)a1 + 64) = dispatch_queue_create("BasebandTransportARI", 0);
  BasebandTransportICE::configurePhysical(a1);
  return a1;
}

void sub_1BF713FB0(_Unwind_Exception *a1)
{
  BasebandTransport *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v7 = *((_QWORD *)v1 + 64);
  if (v7)
    dispatch_release(v7);
  if ((_QWORD *)*v5 == v4)
  {
    v8 = 4;
  }
  else
  {
    if (!*v5)
      goto LABEL_8;
    v8 = 5;
    v4 = (_QWORD *)*v5;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v8))(v4);
LABEL_8:
  v9 = (_QWORD *)*((_QWORD *)v1 + 58);
  if (v9 == v3)
  {
    v10 = 4;
  }
  else
  {
    if (!v9)
      goto LABEL_13;
    v10 = 5;
    v3 = (_QWORD *)*((_QWORD *)v1 + 58);
  }
  (*(void (**)(_QWORD *))(*v3 + 8 * v10))(v3);
LABEL_13:
  v11 = (_QWORD *)*((_QWORD *)v1 + 54);
  if (v11 == v2)
  {
    v12 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_18;
    v12 = 5;
    v2 = (_QWORD *)*((_QWORD *)v1 + 54);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v12))(v2);
LABEL_18:
  BasebandTransport::~BasebandTransport(v1);
  _Unwind_Resume(a1);
}

void sub_1BF714060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t (***BasebandTransportICE::configurePhysical(BasebandTransportICE *this))()
{
  NSObject *v2;
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t (**v9)();
  BasebandTransportICE *v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I using physical pipe...", (uint8_t *)&v9, 2u);
  }
  v9 = off_1E79214F0;
  v10 = this;
  v11 = &v9;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v9, (_QWORD *)this + 59);
  v3 = v11;
  if (v11 == &v9)
  {
    v4 = 4;
    v3 = &v9;
  }
  else
  {
    if (!v11)
      goto LABEL_8;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_8:
  v9 = off_1E7921570;
  v10 = this;
  v11 = &v9;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v9, (_QWORD *)this + 55);
  v5 = v11;
  if (v11 == &v9)
  {
    v6 = 4;
    v5 = &v9;
  }
  else
  {
    if (!v11)
      goto LABEL_13;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_13:
  v9 = off_1E79215F0;
  v10 = this;
  v11 = &v9;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v9, (_QWORD *)this + 51);
  result = v11;
  if (v11 == &v9)
  {
    v8 = 4;
    result = &v9;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (uint64_t (***)())(*result)[v8]();
}

uint64_t (***BasebandTransportICE::configureARIPipe(BasebandTransportICE *this))()
{
  NSObject *v2;
  uint64_t (***v3)();
  uint64_t v4;
  uint64_t (***v5)();
  uint64_t v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t (**v9)();
  BasebandTransportICE *v10;
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I using ARI client pipe...", (uint8_t *)&v9, 2u);
  }
  v9 = off_1E79212F8;
  v10 = this;
  v11 = &v9;
  std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](&v9, (_QWORD *)this + 59);
  v3 = v11;
  if (v11 == &v9)
  {
    v4 = 4;
    v3 = &v9;
  }
  else
  {
    if (!v11)
      goto LABEL_8;
    v4 = 5;
  }
  (*v3)[v4]();
LABEL_8:
  v9 = off_1E7921388;
  v11 = &v9;
  std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v9, (_QWORD *)this + 55);
  v5 = v11;
  if (v11 == &v9)
  {
    v6 = 4;
    v5 = &v9;
  }
  else
  {
    if (!v11)
      goto LABEL_13;
    v6 = 5;
  }
  (*v5)[v6]();
LABEL_13:
  v9 = off_1E7921418;
  v10 = this;
  v11 = &v9;
  std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](&v9, (_QWORD *)this + 51);
  result = v11;
  if (v11 == &v9)
  {
    v8 = 4;
    result = &v9;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
  }
  return (uint64_t (***)())(*result)[v8]();
}

uint64_t BasebandTransportICE::open(BasebandTransport *a1, uint64_t *a2, const void **a3)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  void *v9;
  BOOL v10;
  _BOOL8 v11;
  NSObject *v12;
  __int128 v13;
  void *v14;
  void *v16;
  __int128 v17[2];
  uint64_t v18;
  void *v19;
  __int128 v20[2];
  uint64_t v21;
  uint8_t buf[16];
  void *v23;
  __int128 v24[2];
  uint64_t v25;

  if (*(_DWORD *)a2 != 8)
  {
    v8 = *((_OWORD *)a2 + 1);
    v17[0] = *(_OWORD *)a2;
    v17[1] = v8;
    v18 = a2[4];
    if (*a3)
      v9 = _Block_copy(*a3);
    else
      v9 = 0;
    v16 = v9;
    v11 = BasebandTransport::open(a1, v17, &v16);
    if (v9)
      _Block_release(v9);
    goto LABEL_23;
  }
  v6 = *a2;
  v24[1] = *((_OWORD *)a2 + 1);
  v25 = a2[4];
  *(_QWORD *)&v24[0] = v6;
  *((_QWORD *)&v24[0] + 1) = 1;
  if (*a3)
    v7 = _Block_copy(*a3);
  else
    v7 = 0;
  v23 = v7;
  v10 = BasebandTransport::open(a1, v24, &v23);
  if (v7)
    _Block_release(v7);
  if (v10)
  {
    v11 = 1;
LABEL_23:
    BasebandTransportICE::configurePhysical(a1);
    return v11;
  }
  v12 = *((_QWORD *)a1 + 5);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEFAULT, "#I Physical transport not available.  Trying ARI pipe...", buf, 2u);
  }
  v13 = *((_OWORD *)a2 + 1);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v13;
  v21 = a2[4];
  if (*a3)
    v14 = _Block_copy(*a3);
  else
    v14 = 0;
  v19 = v14;
  v11 = BasebandTransportICE::openARIClientPipe((uint64_t)a1, v20, &v19);
  if (v14)
    _Block_release(v14);
  if (!v11)
    goto LABEL_23;
  BasebandTransportICE::configureARIPipe(a1);
  return 1;
}

void sub_1BF714510(_Unwind_Exception *exception_object)
{
  const void *v1;

  if (v1)
    _Block_release(v1);
  _Unwind_Resume(exception_object);
}

BOOL BasebandTransportICE::openARIClientPipe(uint64_t a1, __int128 *a2, void **a3)
{
  _QWORD *v3;
  __int128 v6;
  __int128 v7;
  void *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  int *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int v19;
  _BOOL8 v20;
  NSObject *v21;
  const char *v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t v26;
  _QWORD v27[2];
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = a2[1];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 32);
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  v8 = *a3;
  if (*a3)
    v8 = _Block_copy(v8);
  v9 = *(const void **)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v8;
  if (v9)
    _Block_release(v9);
  *(_DWORD *)(a1 + 504) = 0;
  v10 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v10 || (v11 = *(_QWORD *)(a1 + 72), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  v14 = (int *)(a1 + 504);
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v19 = AriHost::RegisterClient((AriHost *)"ipc.bb", (const char *)(a1 + 504), *(int **)(a1 + 512), (dispatch_queue_s *)(1000 * *((_DWORD *)a2 + 2)));
  if (v19)
  {
    v20 = 0;
    v21 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
  }
  else
  {
    v3 = v27;
    v27[0] = v11;
    v27[1] = v13;
    do
      v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    v20 = AriHost::SetRTEventHandler() == 0;
    v21 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
  }
  v22 = "fail";
  v23 = *v14;
  if (v20)
    v22 = "success";
  *(_DWORD *)buf = 136315394;
  v29 = v22;
  v30 = 1024;
  v31 = v23;
  _os_log_impl(&dword_1BF566000, v21, OS_LOG_TYPE_DEFAULT, "#I ARI pipe open %s ctx 0x%x", buf, 0x12u);
LABEL_18:
  if (!v19)
  {
    v24 = (std::__shared_weak_count *)v3[1];
    if (v24)
      std::__shared_weak_count::__release_weak(v24);
  }
  std::__shared_weak_count::__release_weak(v13);
  return v20;
}

void sub_1BF7147AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__shared_weak_count *v16;

  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

uint64_t BasebandTransportICE::write(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  uint64_t v6;
  int v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  const unsigned __int8 *v12;

  v12 = a2;
  v10 = a4;
  v11 = a3;
  v9 = a5;
  v8 = a6;
  v6 = *((_QWORD *)this + 54);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, const unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::read(BasebandTransportICE *this, unsigned __int8 *a2, uint64_t a3, unsigned int *a4, char a5, int a6)
{
  uint64_t v6;
  int v8;
  char v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned __int8 *v12;

  v12 = a2;
  v10 = a4;
  v11 = a3;
  v9 = a5;
  v8 = a6;
  v6 = *((_QWORD *)this + 58);
  if (!v6)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, unsigned __int8 **, uint64_t *, unsigned int **, char *, int *))(*(_QWORD *)v6 + 48))(v6, &v12, &v11, &v10, &v9, &v8);
}

uint64_t BasebandTransportICE::close_sync(BasebandTransportICE *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 62);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t ___ZN20BasebandTransportICE17openARIClientPipeEN17BasebandTransport10ParametersEN8dispatch5blockIU13block_pointerFvPhjEEE_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE __p[12];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = v4;
  if (a1[5])
  {
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = "ipc.bb";
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Got AriHost::ARI_RT_REINIT callback for %s", __p, 0xCu);
    }
    v12 = 6;
    strcpy(__p, "ipc.bb");
    AriHost::ReRegisterClient();
    if (v12 < 0)
      operator delete(*(void **)__p);
    v7 = 0;
  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

void sub_1BF714A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL BasebandTransportICE::writeARIClientPipe(BasebandTransportICE *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  int started;
  std::__shared_weak_count *v16;
  NSObject *v17;
  unint64_t v18;
  uint8_t buf[4];
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v5 || (v8 = std::__shared_weak_count::lock(v5)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
  {
    if (*((_DWORD *)this + 127))
    {
      do
LABEL_9:
        v14 = __ldxr(p_shared_weak_owners);
      while (__stxr(v14 + 1, p_shared_weak_owners));
      started = AriHost::Send();
      v16 = v9;
      goto LABEL_11;
    }
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
    if (*((_DWORD *)this + 127))
      goto LABEL_9;
  }
  do
    v18 = __ldxr(p_shared_weak_owners);
  while (__stxr(v18 + 1, p_shared_weak_owners));
  started = AriHost::StartStream();
  v16 = v9;
LABEL_11:
  std::__shared_weak_count::__release_weak(v16);
  if (started)
  {
    v17 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      v21 = a3;
      _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Failed to send %zu bytes on ARI pipe", buf, 0xCu);
    }
  }
  else if (a4)
  {
    *a4 = a3;
  }
  std::__shared_weak_count::__release_weak(v9);
  return started == 0;
}

void sub_1BF714C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  std::__shared_weak_count *v22;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke(_QWORD *a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD block[6];
  int v15;

  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return 0xFFFFFFFFLL;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2;
    block[3] = &__block_descriptor_tmp_5_13;
    block[4] = v7;
    block[5] = a2;
    v15 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    v10 = 0;
  }
  else
  {
    v10 = 0xFFFFFFFFLL;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v10;
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *__p;
  _BYTE *v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    v4 = __p;
    v5 = v11 - (_BYTE *)__p;
    if (*(_BYTE *)(v2 + 136))
    {
      v6 = malloc_type_malloc(v11 - (_BYTE *)__p, 0x6FF6341AuLL);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v7 = *(const void **)(a1 + 40);
    v8 = *(unsigned int *)(a1 + 48);
    if (*(_BYTE *)(v2 + 136))
    {
      v9 = malloc_type_malloc(v8, 0x6FF6341AuLL);
      memcpy(v9, v7, v8);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
  }
}

void sub_1BF714EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::sendToDataHandler(BasebandTransportICE *this, unsigned __int8 *a2, size_t size)
{
  void *v6;

  if (!*((_BYTE *)this + 136))
    return (*(uint64_t (**)(void))(*((_QWORD *)this + 18) + 16))();
  v6 = malloc_type_malloc(size, 0x6FF6341AuLL);
  memcpy(v6, a2, size);
  return (*(uint64_t (**)(void))(*((_QWORD *)this + 18) + 16))();
}

uint64_t ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_8(_QWORD *a1, AriMsg *a2, unsigned int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  int BufCtx;
  NSObject *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD block[6];
  unsigned int v17;
  std::__shared_weak_count *v19;
  uint8_t buf[4];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (!v4)
    return 0xFFFFFFFFLL;
  v7 = a1[4];
  v8 = std::__shared_weak_count::lock(v4);
  v19 = v8;
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = v8;
  if (a1[5])
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_9;
    block[3] = &__block_descriptor_tmp_10_6;
    block[4] = v7;
    block[5] = a2;
    v17 = a3;
    dispatch_async(*(dispatch_queue_t *)(v7 + 152), block);
    BufCtx = AriMsg::GetBufCtx(a2, (const unsigned __int8 *)a3);
    *(_DWORD *)(v7 + 508) = BufCtx;
    v11 = *(NSObject **)(v7 + 40);
    v12 = 0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v21 = BufCtx;
      _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I bypass will use ctx id 0x%x", buf, 8u);
      v12 = 0;
    }
  }
  else
  {
    v12 = 0xFFFFFFFFLL;
  }
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return v12;
}

void sub_1BF7150B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void ___ZN20BasebandTransportICE18writeARIClientPipeEPKhmPjbj_block_invoke_2_9(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  size_t v5;
  void *v6;
  const void *v7;
  size_t v8;
  void *v9;
  void *__p;
  _BYTE *v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD, void **))(*(_QWORD *)v3 + 8))(v3, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 48), &__p);
    v4 = __p;
    v5 = v11 - (_BYTE *)__p;
    if (*(_BYTE *)(v2 + 136))
    {
      v6 = malloc_type_malloc(v11 - (_BYTE *)__p, 0x6FF6341AuLL);
      memcpy(v6, v4, v5);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v7 = *(const void **)(a1 + 40);
    v8 = *(unsigned int *)(a1 + 48);
    if (*(_BYTE *)(v2 + 136))
    {
      v9 = malloc_type_malloc(v8, 0x6FF6341AuLL);
      memcpy(v9, v7, v8);
    }
    (*(void (**)(void))(*(_QWORD *)(v2 + 144) + 16))();
  }
}

void sub_1BF7151F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BasebandTransportICE::closeARIClientPipe_sync(BasebandTransportICE *this)
{
  AriHost::EndStream((AriHost *)*((unsigned int *)this + 127));
  *((_DWORD *)this + 127) = 0;
  AriHost::DeregisterClient((AriHost *)*((unsigned int *)this + 126));
  *((_DWORD *)this + 126) = 0;
  return 1;
}

void BasebandTransportICE::~BasebandTransportICE(BasebandTransportICE *this)
{
  NSObject *v2;
  BasebandTransportICE *v3;
  uint64_t v4;
  BasebandTransportICE *v5;
  uint64_t v6;
  BasebandTransportICE *v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E79211A8;
  v2 = *((_QWORD *)this + 64);
  if (v2)
    dispatch_release(v2);
  v3 = (BasebandTransportICE *)*((_QWORD *)this + 62);
  if (v3 == (BasebandTransportICE *)((char *)this + 472))
  {
    v4 = 4;
    v3 = (BasebandTransportICE *)((char *)this + 472);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (BasebandTransportICE *)*((_QWORD *)this + 58);
  if (v5 == (BasebandTransportICE *)((char *)this + 440))
  {
    v6 = 4;
    v5 = (BasebandTransportICE *)((char *)this + 440);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  v7 = (BasebandTransportICE *)*((_QWORD *)this + 54);
  if (v7 == (BasebandTransportICE *)((char *)this + 408))
  {
    v8 = 4;
    v7 = (BasebandTransportICE *)((char *)this + 408);
    goto LABEL_17;
  }
  if (v7)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  BasebandTransport::~BasebandTransport(this);
}

{
  NSObject *v2;
  BasebandTransportICE *v3;
  uint64_t v4;
  BasebandTransportICE *v5;
  uint64_t v6;
  BasebandTransportICE *v7;
  uint64_t v8;
  void *v9;

  *(_QWORD *)this = off_1E79211A8;
  v2 = *((_QWORD *)this + 64);
  if (v2)
    dispatch_release(v2);
  v3 = (BasebandTransportICE *)*((_QWORD *)this + 62);
  if (v3 == (BasebandTransportICE *)((char *)this + 472))
  {
    v4 = 4;
    v3 = (BasebandTransportICE *)((char *)this + 472);
  }
  else
  {
    if (!v3)
      goto LABEL_8;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_8:
  v5 = (BasebandTransportICE *)*((_QWORD *)this + 58);
  if (v5 == (BasebandTransportICE *)((char *)this + 440))
  {
    v6 = 4;
    v5 = (BasebandTransportICE *)((char *)this + 440);
  }
  else
  {
    if (!v5)
      goto LABEL_13;
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_13:
  v7 = (BasebandTransportICE *)*((_QWORD *)this + 54);
  if (v7 == (BasebandTransportICE *)((char *)this + 408))
  {
    v8 = 4;
    v7 = (BasebandTransportICE *)((char *)this + 408);
    goto LABEL_17;
  }
  if (v7)
  {
    v8 = 5;
LABEL_17:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  BasebandTransport::~BasebandTransport(this);
  operator delete(v9);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E79212F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E79212F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  AriHost::EndStream((AriHost *)*(unsigned int *)(v1 + 508));
  *(_DWORD *)(v1 + 508) = 0;
  AriHost::DeregisterClient((AriHost *)*(unsigned int *)(v1 + 504));
  *(_DWORD *)(v1 + 504) = 0;
  return 1;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_0,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(void)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BF715684(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1E7921388;
  return result;
}

void std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E7921388;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  **a4 = 0;
  return 0;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_1,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BF7158FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E7921418;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E7921418;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int **a4)
{
  BasebandTransportICE *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  NSObject *v8;
  uint64_t v9;
  _BOOL8 v10;
  _QWORD v12[10];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  void *__p;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD block[6];

  v4 = *(BasebandTransportICE **)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x4002000000;
  v21[3] = __Block_byref_object_copy__6;
  v21[4] = __Block_byref_object_dispose__6;
  v23 = 0;
  v24 = 0;
  __p = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = v5;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = v6;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZZN20BasebandTransportICE16configureARIPipeEvENK3__2clEPKhmPjbj_block_invoke;
  v12[3] = &unk_1E7921490;
  v12[8] = v5;
  v12[9] = v6;
  v12[4] = v21;
  v12[5] = &v17;
  v12[6] = &v13;
  v12[7] = v4;
  v25 = v12;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI17BasebandTransportE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke_0;
  block[3] = &__block_descriptor_tmp_14_3;
  block[4] = (char *)v4 + 72;
  block[5] = &v25;
  v8 = *((_QWORD *)v4 + 11);
  if (*((_QWORD *)v4 + 12))
  {
    dispatch_async_and_wait(v8, block);
    v9 = v14[3];
    if (v9)
    {
LABEL_3:
      v10 = BasebandTransportICE::writeARIClientPipe(v4, (const unsigned __int8 *)v18[3], v9, v7);
      goto LABEL_6;
    }
  }
  else
  {
    dispatch_sync(v8, block);
    v9 = v14[3];
    if (v9)
      goto LABEL_3;
  }
  v10 = 1;
LABEL_6:
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1BF715ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE16configureARIPipeEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE16configureARIPipeEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE16configureARIPipeEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configureARIPipe(void)::$_2,std::allocator<BasebandTransportICE::configureARIPipe(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

_QWORD *std::__function::__value_func<BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 170, 24);
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BF715DB8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E79214F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E79214F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return BasebandTransport::close_sync(*(BasebandTransport **)(a1 + 8));
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_0")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_0"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_0,std::allocator<BasebandTransportICE::configurePhysical(void)::$_0>,BOOL ()(void)>::target_type()
{
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E7921570;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E7921570;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, unsigned __int8 **a2, unint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::read(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_1")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_1"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_1,std::allocator<BasebandTransportICE::configurePhysical(void)::$_1>,BOOL ()(unsigned char *,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

_QWORD *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_1E79215F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_1E79215F0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::operator()(uint64_t a1, const unsigned __int8 **a2, uint64_t *a3, unsigned int **a4)
{
  return BasebandTransport::write(*(BasebandTransport **)(a1 + 8), *a2, *a3, *a4);
}

uint64_t std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN20BasebandTransportICE17configurePhysicalEvE3$_2")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN20BasebandTransportICE17configurePhysicalEvE3$_2"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN20BasebandTransportICE17configurePhysicalEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<BasebandTransportICE::configurePhysical(void)::$_2,std::allocator<BasebandTransportICE::configurePhysical(void)::$_2>,BOOL ()(unsigned char const*,unsigned long,unsigned int *,BOOL,unsigned int)>::target_type()
{
}

_QWORD *util::GuaranteedCallback::GuaranteedCallback(_QWORD *a1, const void **a2, NSObject **a3, uint64_t a4)
{
  void *v7;
  NSObject *v8;
  dispatch_source_t v9;
  NSObject *v10;

  *a1 = 0;
  a1[1] = 0;
  if (*a2)
  {
    v7 = _Block_copy(*a2);
    v8 = *a3;
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = *a3;
  if (*a3)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a4;
  a1[5] = 0;
  v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, 0);
  v10 = a1[5];
  a1[5] = v9;
  if (v10)
    dispatch_release(v10);
  a1[6] = 0;
  return a1;
}

{
  void *v7;
  NSObject *v8;
  dispatch_source_t v9;
  NSObject *v10;

  *a1 = 0;
  a1[1] = 0;
  if (*a2)
  {
    v7 = _Block_copy(*a2);
    v8 = *a3;
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  v8 = *a3;
  if (*a3)
LABEL_3:
    dispatch_retain(v8);
LABEL_4:
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = a4;
  a1[5] = 0;
  v9 = dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, 0);
  v10 = a1[5];
  a1[5] = v9;
  if (v10)
    dispatch_release(v10);
  a1[6] = 0;
  return a1;
}

void util::GuaranteedCallback::~GuaranteedCallback(dispatch_source_t *this)
{
  NSObject *v2;
  NSObject *v3;
  dispatch_source_t v4;
  std::__shared_weak_count *v5;

  dispatch_source_cancel(this[5]);
  v2 = this[5];
  if (v2)
    dispatch_release(v2);
  v3 = this[3];
  if (v3)
    dispatch_release(v3);
  v4 = this[2];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)this[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

{
  NSObject *v2;
  NSObject *v3;
  dispatch_source_t v4;
  std::__shared_weak_count *v5;

  dispatch_source_cancel(this[5]);
  v2 = this[5];
  if (v2)
    dispatch_release(v2);
  v3 = this[3];
  if (v3)
    dispatch_release(v3);
  v4 = this[2];
  if (v4)
    _Block_release(v4);
  v5 = (std::__shared_weak_count *)this[1];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void util::GuaranteedCallback::create(void **a1@<X0>, dispatch_object_t *a2@<X1>, uint64_t a3@<X2>, util::GuaranteedCallback **a4@<X8>)
{
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  void *v11;
  util::GuaranteedCallback *v12;
  void *v13;
  unint64_t v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;

  *a4 = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  a4[1] = (util::GuaranteedCallback *)0xAAAAAAAAAAAAAAAALL;
  v7 = *a1;
  v8 = (std::__shared_weak_count *)operator new(0x50uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_1E79216D0;
  if (v7)
    v7 = _Block_copy(v7);
  v10 = *a2;
  if (*a2)
    dispatch_retain(*a2);
  if (v7)
  {
    v11 = _Block_copy(v7);
    v12 = (util::GuaranteedCallback *)&v8[1];
    if (!v10)
      goto LABEL_8;
    goto LABEL_7;
  }
  v11 = 0;
  v12 = (util::GuaranteedCallback *)&v8[1];
  if (v10)
LABEL_7:
    dispatch_retain(v10);
LABEL_8:
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  if (v11)
  {
    v13 = _Block_copy(v11);
    if (v10)
      goto LABEL_10;
LABEL_15:
    v8[1].__shared_weak_owners_ = (uint64_t)v13;
    v8[2].__vftable = 0;
    v8[2].__shared_owners_ = a3;
    v8[2].__shared_weak_owners_ = (uint64_t)dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, 0);
    v8[3].__vftable = 0;
    if (!v11)
      goto LABEL_17;
    goto LABEL_16;
  }
  v13 = 0;
  if (!v10)
    goto LABEL_15;
LABEL_10:
  dispatch_retain(v10);
  v8[1].__shared_weak_owners_ = (uint64_t)v13;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v8[2].__shared_owners_ = a3;
  v8[2].__shared_weak_owners_ = (uint64_t)dispatch_source_create(MEMORY[0x1E0C80DD0], 1uLL, 0, 0);
  v8[3].__vftable = 0;
  dispatch_release(v10);
  if (v11)
LABEL_16:
    _Block_release(v11);
LABEL_17:
  if (v10)
    dispatch_release(v10);
  if (v7)
    _Block_release(v7);
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  do
    v16 = __ldxr(p_shared_weak_owners);
  while (__stxr(v16 + 1, p_shared_weak_owners));
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&v8[1];
  v8[1].__shared_owners_ = (uint64_t)v8;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  *a4 = v12;
  a4[1] = (util::GuaranteedCallback *)v8;
  util::GuaranteedCallback::start(v12);
}

void sub_1BF71644C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void util::GuaranteedCallback::start(util::GuaranteedCallback *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  unint64_t v11;
  NSObject *v12;
  dispatch_time_t v13;
  _QWORD handler[6];
  std::__shared_weak_count *v15;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (!v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
  do
    v7 = __ldxr(p_shared_weak_owners);
  while (__stxr(v7 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v5);
  }
  v10 = *((_QWORD *)this + 5);
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 1174405120;
  handler[2] = ___ZN4util18GuaranteedCallback5startEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_40;
  handler[4] = this;
  handler[5] = v3;
  v15 = v5;
  do
    v11 = __ldxr(p_shared_weak_owners);
  while (__stxr(v11 + 1, p_shared_weak_owners));
  dispatch_source_set_event_handler(v10, handler);
  v12 = *((_QWORD *)this + 5);
  v13 = dispatch_time(0, 1000000 * *((_QWORD *)this + 4));
  dispatch_source_set_timer(v12, v13, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  dispatch_activate(*((dispatch_object_t *)this + 5));
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  std::__shared_weak_count::__release_weak(v5);
}

void ___ZN4util18GuaranteedCallback5startEv_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::ios_base *v10;
  uint64_t v11;
  _QWORD *v12;
  std::string::size_type v13;
  std::string *p_dst;
  std::__shared_weak_count *v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __dst;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *__p[2];
  __int128 v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::__shared_weak_count *v43;
  _QWORD block[5];
  std::string v45;
  int v46;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    return;
  v3 = a1[4];
  v4 = std::__shared_weak_count::lock(v2);
  v43 = v4;
  if (!v4)
    return;
  if (!a1[5])
  {
    v15 = v4;
LABEL_27:
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    return;
  }
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v31 = 0xAAAAAAAAAAAAAAAALL;
  v41 = v5;
  v40 = v5;
  v39 = v5;
  v38 = v5;
  v37 = v5;
  v36 = v5;
  v35 = v5;
  v34 = v5;
  v33 = v5;
  v30 = v5;
  *(_OWORD *)__p = v5;
  v28 = v5;
  v27 = v5;
  v26 = v5;
  v25 = v5;
  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v32 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v9;
  v10 = (std::ios_base *)((char *)&v24 + *(_QWORD *)(v24 - 24));
  std::ios_base::init(v10, &v25);
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  v24 = v6 + 24;
  v32 = v7;
  std::streambuf::basic_streambuf();
  v11 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&v25 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v30 = 0u;
  LODWORD(v31) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"gave up after ", 14);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" milliseconds", 13);
  if ((v31 & 0x10) != 0)
  {
    v16 = *((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1) < (unint64_t)v28)
    {
      *((_QWORD *)&v30 + 1) = v28;
      v16 = v28;
    }
    v17 = (const void *)*((_QWORD *)&v27 + 1);
    v13 = v16 - *((_QWORD *)&v27 + 1);
    if ((unint64_t)(v16 - *((_QWORD *)&v27 + 1)) >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_33;
  }
  else
  {
    if ((v31 & 8) == 0)
    {
      v13 = 0;
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_18;
    }
    v17 = (const void *)v26;
    v13 = v27 - v26;
    if ((_QWORD)v27 - (_QWORD)v26 >= 0x7FFFFFFFFFFFFFF8uLL)
LABEL_33:
      std::string::__throw_length_error[abi:ne180100]();
  }
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    p_dst = (std::string *)operator new(v18 + 1);
    __dst.__r_.__value_.__l.__size_ = v13;
    __dst.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_17;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
  p_dst = &__dst;
  if (v13)
LABEL_17:
    memmove(p_dst, v17, v13);
LABEL_18:
  p_dst->__r_.__value_.__s.__data_[v13] = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_4;
  block[4] = v3;
  v46 = -534716413;
  v20 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v45 = __dst;
  if (*(_QWORD *)(v3 + 48) == -1)
  {
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_23;
LABEL_35:
    operator delete(v45.__r_.__value_.__l.__data_);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_36;
  }
  dispatch_once((dispatch_once_t *)(v3 + 48), block);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_35;
LABEL_23:
  if ((v20 & 0x80000000) == 0)
    goto LABEL_24;
LABEL_36:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_24:
  v24 = *v8;
  *(uint64_t *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = v8[3];
  *(_QWORD *)&v25 = v11 + 16;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](&v32);
  v15 = v43;
  if (v43)
    goto LABEL_27;
}

void sub_1BF716904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;

  operator delete(v13);
  std::ostringstream::~ostringstream((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v14 - 168);
  _Unwind_Resume(a1);
}

void sub_1BF716928(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](v1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v2 - 168);
  _Unwind_Resume(a1);
}

void sub_1BF716958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v5 - 168);
  _Unwind_Resume(a1);
}

void util::GuaranteedCallback::run(uint64_t a1, int a2, uint64_t a3)
{
  dispatch_once_t *v3;
  _QWORD block[5];
  std::string __p;
  int v6;

  v3 = (dispatch_once_t *)(a1 + 48);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_3_4;
  block[4] = a1;
  v6 = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    if (*v3 == -1)
    {
LABEL_3:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
LABEL_7:
      operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    __p = *(std::string *)a3;
    if (*v3 == -1)
      goto LABEL_3;
  }
  dispatch_once(v3, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_7;
}

uint64_t __copy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN4util18GuaranteedCallbackEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSNSt3__18weak_ptrIN4util18GuaranteedCallbackEEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN4util18GuaranteedCallback3runEiNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  int v2;
  const void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  const void *v7;
  NSObject *v8;
  std::string v9;
  _QWORD block[4];
  void *aBlock;
  std::string __p;
  int v13;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_DWORD *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
    v3 = *(const void **)(v1 + 16);
    if (v3)
      goto LABEL_3;
  }
  else
  {
    v9 = *(std::string *)(a1 + 40);
    v3 = *(const void **)(v1 + 16);
    if (v3)
    {
LABEL_3:
      v4 = _Block_copy(v3);
      goto LABEL_6;
    }
  }
  v4 = 0;
LABEL_6:
  v5 = *(NSObject **)(v1 + 24);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK8dispatch8callbackIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJiS7_EEEvDpT__block_invoke;
  block[3] = &__block_descriptor_tmp_5_14;
  if (v4)
  {
    aBlock = _Block_copy(v4);
    v13 = v2;
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_8:
      __p = v9;
      goto LABEL_11;
    }
  }
  else
  {
    aBlock = 0;
    v13 = v2;
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_8;
  }
  std::string::__init_copy_ctor_external(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
LABEL_11:
  dispatch_async(v5, block);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v6 = aBlock;
    if (!aBlock)
      goto LABEL_16;
    goto LABEL_15;
  }
  v6 = aBlock;
  if (aBlock)
LABEL_15:
    _Block_release(v6);
LABEL_16:
  if (v4)
    _Block_release(v4);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    v7 = *(const void **)(v1 + 16);
    *(_QWORD *)(v1 + 16) = 0;
    if (!v7)
      goto LABEL_23;
    goto LABEL_22;
  }
  v7 = *(const void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v7)
LABEL_22:
    _Block_release(v7);
LABEL_23:
  v8 = *(NSObject **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v8)
    dispatch_release(v8);
}

void sub_1BF716BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock)
{
  const void *v19;

  if (aBlock)
    _Block_release(aBlock);
  if (v19)
    _Block_release(v19);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E79216D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E79216D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper,std::allocator<util::GuaranteedCallback::create(dispatch::block<void({block_pointer})(int,std::string)>,dispatch::queue,std::chrono::duration<long long,std::ratio<1l,1000l>>)::wrapper>>::__on_zero_shared(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const void *v4;
  std::__shared_weak_count *v5;

  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 64));
  v2 = *(NSObject **)(a1 + 64);
  if (v2)
    dispatch_release(v2);
  v3 = *(NSObject **)(a1 + 48);
  if (v3)
    dispatch_release(v3);
  v4 = *(const void **)(a1 + 40);
  if (v4)
    _Block_release(v4);
  v5 = *(std::__shared_weak_count **)(a1 + 32);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

void ___ZNK8dispatch8callbackIU13block_pointerFviNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEclIJiS7_EEEvDpT__block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string __p;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned int *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  else
    __p = *(std::string *)(a1 + 40);
  (*(void (**)(uint64_t, uint64_t, std::string *))(v1 + 16))(v1, v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF716D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *abm::asString(unsigned int a1)
{
  if (a1 > 9)
    return "Unknown";
  else
    return off_1E7921778[a1];
}

{
  if (a1 > 3)
    return "Unknown";
  else
    return off_1E79217C8[a1];
}

const char *abm::asString(int a1)
{
  if ((a1 - 1) > 2)
    return "Unknown";
  else
    return off_1E79217E8[a1 - 1];
}

{
  if ((a1 - 1) > 2)
    return "Unknown";
  else
    return off_1E7921800[a1 - 1];
}

_QWORD *support::log::delegate::context::create@<X0>(support::log::delegate::context *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v5;
  _QWORD *result;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  a2[1] = 0xAAAAAAAAAAAAAAAALL;
  v5 = operator new(0x10uLL);
  *v5 = off_1E7921828;
  v5[1] = this;
  *a2 = v5;
  result = operator new(0x20uLL);
  *result = off_1E7921A80;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = result;
  return result;
}

void sub_1BF716E80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *support::log::delegate::context::context(_QWORD *this, void *a2)
{
  *this = off_1E7921828;
  this[1] = a2;
  return this;
}

{
  *this = off_1E7921828;
  this[1] = a2;
  return this;
}

uint64_t support::log::delegate::delegate(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *(_QWORD *)result = &unk_1E7921848;
  *(_QWORD *)(result + 8) = v3;
  *(_QWORD *)(result + 16) = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t support::log::delegate::get_context@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 16) = 0;
  if (*(_BYTE *)(this + 24))
  {
    v2 = *(_QWORD *)(this + 16);
    *(_QWORD *)a2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(a2 + 8) = v2;
    if (v2)
    {
      v3 = (unint64_t *)(v2 + 16);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
    *(_BYTE *)(a2 + 16) = 1;
  }
  return this;
}

uint64_t support::log::manager::parameters::parameters(uint64_t result, char a2)
{
  *(_QWORD *)result = &off_1E7921878;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

{
  *(_QWORD *)result = &off_1E7921878;
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t support::log::manager::parameters::parameters(uint64_t this)
{
  *(_QWORD *)this = &off_1E7921878;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

{
  *(_QWORD *)this = &off_1E7921878;
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::parameters::set_defaults(uint64_t this)
{
  *(_BYTE *)(this + 8) = 3;
  return this;
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, _QWORD *a4)
{
  std::string *v7;
  const char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string::value_type __s[23];
  char v17;
  std::string v18;

  *(_QWORD *)a1 = off_1E7921890;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  v18 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v17 = 12;
  strcpy(__s, ".log_manager");
  v7 = std::string::append(&v18, __s, 0xCuLL);
  v8 = (const char *)(a1 + 72);
  v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 72) = v9;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v17 & 0x80000000) == 0)
  {
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_8:
    operator delete(v18.__r_.__value_.__l.__data_);
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  operator delete(*(void **)__s);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_8;
LABEL_3:
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_9:
  v8 = *(const char **)v8;
LABEL_4:
  *(_QWORD *)(a1 + 96) = os_log_create("com.apple.telephony.basebandservices", v8);
  *(_QWORD *)(a1 + 104) = &off_1E7921878;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 120) = a1 + 120;
  *(_QWORD *)(a1 + 128) = a1 + 120;
  *(_QWORD *)(a1 + 136) = 0;
  v10 = a4[2];
  if (v10)
  {
    v12 = *a4;
    v11 = (uint64_t *)a4[1];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(*a4 + 8);
    **(_QWORD **)(v12 + 8) = v13;
    v14 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(v14 + 8) = v11;
    *v11 = v14;
    *(_QWORD *)(a1 + 120) = v12;
    *(_QWORD *)(v12 + 8) = a1 + 120;
    *(_QWORD *)(a1 + 136) = v10;
    a4[2] = 0;
  }
  return a1;
}

void sub_1BF717108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::mutex *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
    {
LABEL_3:
      std::mutex::~mutex(v21);
      _Unwind_Resume(a1);
    }
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  std::mutex::~mutex(v21);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::manager(uint64_t a1, std::string *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  std::string __p;

  __p = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  support::log::manager::manager(a1, &__p, a3, &v15);
  if (v17)
  {
    v6 = v15;
    v7 = v16;
    v8 = *v16;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)(v15 + 8);
    **(_QWORD **)(v6 + 8) = v8;
    v17 = 0;
    if (v7 != &v15)
    {
      do
      {
        v10 = (uint64_t *)v7[1];
        v9 = v7[2];
        v7[2] = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
        operator delete(v7);
        v7 = v10;
      }
      while (v10 != &v15);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*a4)
      return a1;
    goto LABEL_10;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (*a4)
  {
LABEL_10:
    std::mutex::lock((std::mutex *)(a1 + 8));
    v11 = operator new(0x18uLL);
    v12 = *a4;
    *a4 = 0;
    v13 = *(_QWORD *)(a1 + 120);
    v11[1] = a1 + 120;
    v11[2] = v12;
    *v11 = v13;
    *(_QWORD *)(v13 + 8) = v11;
    *(_QWORD *)(a1 + 120) = v11;
    ++*(_QWORD *)(a1 + 136);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  return a1;
}

void sub_1BF717290(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1BF7172B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t *std::list<std::unique_ptr<support::log::delegate>>::~list(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != a1);
    }
  }
  return a1;
}

void support::log::manager::add_delegate(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  std::mutex *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)a1;
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = operator new(0x18uLL);
  v6 = *a2;
  *a2 = 0;
  v7 = v3[15];
  v3 += 15;
  v5[1] = v3;
  v5[2] = v6;
  *v5 = v7;
  *(_QWORD *)(v7 + 8) = v5;
  *v3 = v5;
  ++v3[2];
  std::mutex::unlock(v4);
}

void sub_1BF7173C4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::~manager(support::log::manager *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7921890;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7921890;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7921890;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void sub_1BF7175BC(_Unwind_Exception *a1)
{
  support::log::manager *v1;
  std::mutex *v2;

  std::mutex::unlock(v2);
  support::log::manager::~manager(v1);
  _Unwind_Resume(a1);
}

void sub_1BF7175E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_1E7921B68;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF717770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void support::log::manager::create(std::string *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8;
  _QWORD *v9;
  std::string __p;

  *a4 = 0xAAAAAAAAAAAAAAAALL;
  a4[1] = 0xAAAAAAAAAAAAAAAALL;
  v8 = operator new(0x90uLL);
  __p = *a1;
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  support::log::manager::manager((uint64_t)v8, &__p, a2, a3);
  *a4 = v8;
  v9 = operator new(0x20uLL);
  *v9 = off_1E7921B68;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  a4[1] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF717884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t support::log::manager::get_level(support::log::manager *this)
{
  return *((unsigned __int8 *)this + 112);
}

void support::log::manager::set_level(uint64_t a1, unsigned int a2)
{
  std::mutex *v4;
  NSObject *v5;
  unint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v5 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(unsigned __int8 *)(a1 + 112);
    if (v6 > 6)
    {
      v7 = "???";
      if (a2 > 6)
        goto LABEL_4;
    }
    else
    {
      if (a2 > 6)
      {
LABEL_4:
        v8 = "???";
LABEL_7:
        v9 = 136315394;
        v10 = v7;
        v11 = 2080;
        v12 = v8;
        _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "setting log level %s -> %s", (uint8_t *)&v9, 0x16u);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  *(_BYTE *)(a1 + 112) = a2;
  std::mutex::unlock(v4);
}

uint64_t support::log::manager::get_log_buffer(support::log::manager *this)
{
  char *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EF57DCB8)
    goto LABEL_2;
  v1 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = off_1E7921AD0;
  *((_QWORD *)v1 + 3) = off_1E7921B20;
  v2 = (uint64_t)(v1 + 24);
  *((_QWORD *)v1 + 4) = 850045863;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *((_QWORD *)v1 + 14) = 0;
  *((_QWORD *)v1 + 13) = 0;
  *((_QWORD *)v1 + 11) = 0;
  *((_QWORD *)v1 + 12) = v1 + 104;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  v3 = (std::__shared_weak_count *)off_1EF57DCC0;
  qword_1EF57DCB8 = (uint64_t)(v1 + 24);
  off_1EF57DCC0 = v1;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
LABEL_2:
    v2 = qword_1EF57DCB8;
    v1 = (char *)off_1EF57DCC0;
    if (!off_1EF57DCC0)
      goto LABEL_11;
  }
  v6 = (unint64_t *)(v1 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  std::mutex::lock((std::mutex *)(v2 + 8));
  v8 = *(_QWORD *)(v2 + 136);
  if (v8)
  {
    v9 = (_QWORD *)(v2 + 128);
    v10 = *(void ***)(v2 + 104);
    v11 = (*(_QWORD **)((char *)v10 + ((*(_QWORD *)(v2 + 128) >> 6) & 0x3FFFFFFFFFFFFF8)))[*(_QWORD *)(v2 + 128) & 0x1FFLL];
    v12 = *(_QWORD *)(v2 + 128) + 1;
    *(_QWORD *)(v2 + 128) = v12;
    *(_QWORD *)(v2 + 136) = v8 - 1;
    if (v12 >= 0x400)
    {
      operator delete(*v10);
      *(_QWORD *)(v2 + 104) += 8;
      v13 = -512;
LABEL_25:
      *v9 += v13;
    }
  }
  else
  {
    v14 = malloc_type_malloc(0x400uLL, 0x45F1E4C6uLL);
    v11 = (uint64_t)v14;
    if (v14)
    {
      v16 = (uint64_t **)(v2 + 80);
      v15 = *(uint64_t **)(v2 + 80);
      if (!v15)
      {
        v17 = (uint64_t **)(v2 + 80);
LABEL_22:
        v19 = (uint64_t *)operator new(0x28uLL);
        v19[4] = v11;
        *v19 = 0;
        v19[1] = 0;
        v19[2] = (uint64_t)v17;
        *v16 = v19;
        v20 = **(_QWORD **)(v2 + 72);
        if (v20)
        {
          *(_QWORD *)(v2 + 72) = v20;
          v19 = *v16;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 80), v19);
        v9 = (_QWORD *)(v2 + 88);
        v13 = 1;
        goto LABEL_25;
      }
      while (1)
      {
        while (1)
        {
          v17 = (uint64_t **)v15;
          v18 = v15[4];
          if ((unint64_t)v14 >= v18)
            break;
          v15 = *v17;
          v16 = v17;
          if (!*v17)
            goto LABEL_22;
        }
        if (v18 >= (unint64_t)v14)
          break;
        v15 = v17[1];
        if (!v15)
        {
          v16 = v17 + 1;
          goto LABEL_22;
        }
      }
    }
  }
  std::mutex::unlock((std::mutex *)(v2 + 8));
  if (!v1)
    return v11;
  v21 = (unint64_t *)(v1 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return v11;
  (*(void (**)(char *))(*(_QWORD *)v1 + 16))(v1);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v1);
  return v11;
}

void sub_1BF717C5C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  _Unwind_Resume(a1);
}

void support::log::manager::release_log_buffer(support::log::manager *this, char *a2)
{
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  BOOL v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::mutex *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  void *v59;
  unint64_t v60;
  char *v61;
  void *v62;
  char *v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  BOOL v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  size_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  __int128 *v146;
  _OWORD *v147;
  uint64_t v148;
  __int128 v149;
  uint64_t v150;
  std::runtime_error *exception;
  void *v152;
  std::__shared_weak_count *v153;
  std::__shared_weak_count *v154;

  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EF57DCB8)
  {
    v3 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = off_1E7921AD0;
    *((_QWORD *)v3 + 3) = off_1E7921B20;
    v4 = (uint64_t)(v3 + 24);
    *((_QWORD *)v3 + 4) = 850045863;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 11) = 0;
    *((_QWORD *)v3 + 12) = v3 + 104;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    v5 = (std::__shared_weak_count *)off_1EF57DCC0;
    qword_1EF57DCB8 = (uint64_t)(v3 + 24);
    off_1EF57DCC0 = v3;
    if (!v5)
    {
LABEL_9:
      v8 = (unint64_t *)(v3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
      goto LABEL_11;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v4 = qword_1EF57DCB8;
  v3 = (char *)off_1EF57DCC0;
  if (off_1EF57DCC0)
    goto LABEL_9;
LABEL_11:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v12 = *(_QWORD **)(v4 + 80);
  v11 = v4 + 80;
  v10 = v12;
  if (!v12)
    goto LABEL_22;
  v13 = (_QWORD *)v11;
  do
  {
    v14 = v10[4];
    v15 = v14 >= (unint64_t)a2;
    if (v14 >= (unint64_t)a2)
      v16 = v10;
    else
      v16 = v10 + 1;
    if (v15)
      v13 = v10;
    v10 = (_QWORD *)*v16;
  }
  while (*v16);
  if (v13 == (_QWORD *)v11 || v13[4] > (unint64_t)a2)
LABEL_22:
    v13 = (_QWORD *)v11;
  if (!v3)
    goto LABEL_27;
  v17 = (unint64_t *)(v3 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_27:
    if (v13 != (_QWORD *)v11)
      goto LABEL_28;
LABEL_32:
    free(a2);
    return;
  }
  (*(void (**)(char *))(*(_QWORD *)v3 + 16))(v3);
  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v3);
  if (v13 == (_QWORD *)v11)
    goto LABEL_32;
LABEL_28:
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (qword_1EF57DCB8)
    goto LABEL_29;
  v19 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *(_QWORD *)v19 = off_1E7921AD0;
  *((_QWORD *)v19 + 3) = off_1E7921B20;
  *((_QWORD *)v19 + 4) = 850045863;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 72) = 0u;
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 13) = 0;
  *((_QWORD *)v19 + 11) = 0;
  *((_QWORD *)v19 + 12) = v19 + 104;
  *(_OWORD *)(v19 + 120) = 0u;
  *(_OWORD *)(v19 + 136) = 0u;
  *(_OWORD *)(v19 + 152) = 0u;
  v20 = (std::__shared_weak_count *)off_1EF57DCC0;
  qword_1EF57DCB8 = (uint64_t)(v19 + 24);
  off_1EF57DCC0 = v19;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
LABEL_29:
    v19 = (char *)off_1EF57DCC0;
    v153 = (std::__shared_weak_count *)off_1EF57DCC0;
    if (!off_1EF57DCC0)
      goto LABEL_41;
    goto LABEL_39;
  }
  v153 = (std::__shared_weak_count *)v19;
LABEL_39:
  v23 = (unint64_t *)(v19 + 8);
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
LABEL_41:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  pthread_mutex_lock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  if (!qword_1EF57DCB8)
  {
    v25 = (char *)operator new(0xA8uLL);
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = off_1E7921AD0;
    *((_QWORD *)v25 + 3) = off_1E7921B20;
    v26 = (uint64_t)(v25 + 24);
    *((_QWORD *)v25 + 4) = 850045863;
    *(_OWORD *)(v25 + 40) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *(_OWORD *)(v25 + 72) = 0u;
    *((_QWORD *)v25 + 14) = 0;
    *((_QWORD *)v25 + 13) = 0;
    *((_QWORD *)v25 + 11) = 0;
    *((_QWORD *)v25 + 12) = v25 + 104;
    *(_OWORD *)(v25 + 120) = 0u;
    *(_OWORD *)(v25 + 136) = 0u;
    *(_OWORD *)(v25 + 152) = 0u;
    v27 = (std::__shared_weak_count *)off_1EF57DCC0;
    qword_1EF57DCB8 = (uint64_t)(v25 + 24);
    off_1EF57DCC0 = v25;
    if (!v27)
    {
      v154 = (std::__shared_weak_count *)v25;
LABEL_50:
      v30 = (unint64_t *)(v25 + 8);
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      goto LABEL_52;
    }
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v26 = qword_1EF57DCB8;
  v25 = (char *)off_1EF57DCC0;
  v154 = (std::__shared_weak_count *)off_1EF57DCC0;
  if (off_1EF57DCC0)
    goto LABEL_50;
LABEL_52:
  pthread_mutex_unlock(&ctu::Singleton<support::log::buffer,support::log::buffer,ctu::PthreadMutexGuardPolicy<support::log::buffer>>::sInstance);
  v32 = (std::mutex *)(v26 + 8);
  std::mutex::lock((std::mutex *)(v26 + 8));
  v33 = *(_QWORD **)(v26 + 80);
  if (!v33)
    goto LABEL_186;
  v34 = v26 + 80;
  do
  {
    v35 = v33[4];
    v36 = v35 >= (unint64_t)a2;
    if (v35 >= (unint64_t)a2)
      v37 = v33;
    else
      v37 = v33 + 1;
    if (v36)
      v34 = (uint64_t)v33;
    v33 = (_QWORD *)*v37;
  }
  while (*v37);
  if (v34 == v26 + 80 || *(_QWORD *)(v34 + 32) > (unint64_t)a2)
  {
LABEL_186:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempting to put back a buffer the instance does not own");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], MEMORY[0x1E0DE4338]);
  }
  v38 = *(char **)(v26 + 112);
  v39 = *(char **)(v26 + 104);
  v40 = v38 - v39;
  if (v38 == v39)
    v41 = 0;
  else
    v41 = ((v38 - v39) << 6) - 1;
  v43 = *(_QWORD *)(v26 + 128);
  v42 = *(_QWORD *)(v26 + 136);
  v44 = v42 + v43;
  if (v41 == v42 + v43)
  {
    if (v43 >= 0x200)
    {
      *(_QWORD *)(v26 + 128) = v43 - 512;
      v45 = v39 + 8;
      v46 = *(_QWORD *)v39;
      *(_QWORD *)(v26 + 104) = v39 + 8;
      if (v38 != *(char **)(v26 + 120))
      {
LABEL_157:
        *(_QWORD *)v38 = v46;
        goto LABEL_158;
      }
      v47 = *(char **)(v26 + 96);
      if (v45 > v47)
      {
        v48 = (v45 - v47) >> 3;
        if (v48 >= -1)
          v49 = v48 + 1;
        else
          v49 = v48 + 2;
        v50 = v49 >> 1;
        v51 = -v50;
        v52 = &v45[-8 * v50];
        v53 = v38 - v45;
        if (v38 != v45)
        {
          memmove(&v45[-8 * v50], v45, v38 - v45);
          v38 = *(char **)(v26 + 104);
        }
        v54 = &v38[8 * v51];
        v38 = &v52[v53];
        *(_QWORD *)(v26 + 104) = v54;
        *(_QWORD *)(v26 + 112) = &v52[v53];
        goto LABEL_157;
      }
      if (v38 == v47)
        v66 = 1;
      else
        v66 = (v38 - v47) >> 2;
      if (!(v66 >> 61))
      {
        v67 = (char *)operator new(8 * v66);
        v68 = &v67[8 * (v66 >> 2)];
        v70 = v38 - v45;
        v69 = v38 == v45;
        v38 = v68;
        if (v69)
          goto LABEL_155;
        v38 = &v68[v70 & 0xFFFFFFFFFFFFFFF8];
        v71 = v70 - 8;
        if (v71 >= 0x38)
        {
          v123 = &v67[8 * (v66 >> 2)];
          v72 = v123;
          if ((unint64_t)(v123 - v45) >= 0x20)
          {
            v124 = (v71 >> 3) + 1;
            v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
            v72 = &v68[v125];
            v45 += v125;
            v126 = (__int128 *)(v39 + 24);
            v127 = v123 + 16;
            v128 = v124 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v129 = *v126;
              *(v127 - 1) = *(v126 - 1);
              *v127 = v129;
              v126 += 2;
              v127 += 2;
              v128 -= 4;
            }
            while (v128);
            if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_155:
              *(_QWORD *)(v26 + 96) = v67;
              *(_QWORD *)(v26 + 104) = v68;
              *(_QWORD *)(v26 + 112) = v38;
              *(_QWORD *)(v26 + 120) = &v67[8 * v66];
              if (v47)
              {
                operator delete(v47);
                v38 = *(char **)(v26 + 112);
              }
              goto LABEL_157;
            }
          }
        }
        else
        {
          v72 = &v67[8 * (v66 >> 2)];
        }
        do
        {
          v130 = *(_QWORD *)v45;
          v45 += 8;
          *(_QWORD *)v72 = v130;
          v72 += 8;
        }
        while (v72 != v38);
        goto LABEL_155;
      }
LABEL_188:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v55 = v40 >> 3;
    v56 = *(char **)(v26 + 120);
    v57 = *(char **)(v26 + 96);
    if (v40 >> 3 >= (unint64_t)((v56 - v57) >> 3))
    {
      if (v56 == v57)
        v60 = 1;
      else
        v60 = (v56 - v57) >> 2;
      if (!(v60 >> 61))
      {
        v61 = (char *)operator new(8 * v60);
        v62 = operator new(0x1000uLL);
        v63 = &v61[8 * v55];
        v64 = &v61[8 * v60];
        if (v55 == v60)
        {
          v152 = v62;
          if (v40 < 1)
          {
            if (v38 == v39)
              v74 = 1;
            else
              v74 = v40 >> 2;
            if (v74 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v63 = (char *)operator new(8 * v74);
            v64 = &v63[8 * v74];
            operator delete(v61);
            v39 = *(char **)(v26 + 104);
            v38 = *(char **)(v26 + 112);
            v61 = v63;
          }
          else
          {
            v65 = v55 + 2;
            if (v55 >= -1)
              v65 = v55 + 1;
            v63 -= 8 * (v65 >> 1);
          }
          v62 = v152;
        }
        *(_QWORD *)v63 = v62;
        v75 = v63 + 8;
        if (v38 != v39)
        {
          do
          {
            if (v63 == v61)
            {
              if (v75 >= v64)
              {
                if (v64 == v61)
                  v82 = 1;
                else
                  v82 = (v64 - v61) >> 2;
                if (v82 >> 61)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v83 = (char *)operator new(8 * v82);
                v84 = v83;
                v85 = (v82 + 3) >> 2;
                v63 = &v83[8 * v85];
                v86 = v75 - v61;
                v69 = v75 == v61;
                v75 = v63;
                if (!v69)
                {
                  v75 = &v63[v86 & 0xFFFFFFFFFFFFFFF8];
                  v87 = v86 - 8;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if (v87 < 0x38)
                    goto LABEL_192;
                  v90 = 8 * v85;
                  v88 = &v83[8 * v85];
                  v89 = v61;
                  if ((unint64_t)(v88 - v61) < 0x20)
                    goto LABEL_192;
                  v91 = (v87 >> 3) + 1;
                  v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                  v88 = &v63[v92];
                  v89 = &v61[v92];
                  v93 = (__int128 *)(v61 + 16);
                  v94 = &v83[v90 + 16];
                  v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v96 = *v93;
                    *((_OWORD *)v94 - 1) = *(v93 - 1);
                    *(_OWORD *)v94 = v96;
                    v93 += 2;
                    v94 += 32;
                    v95 -= 4;
                  }
                  while (v95);
                  if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_192:
                    do
                    {
                      v97 = *(_QWORD *)v89;
                      v89 += 8;
                      *(_QWORD *)v88 = v97;
                      v88 += 8;
                    }
                    while (v88 != v75);
                  }
                }
                v64 = &v83[8 * v82];
                operator delete(v61);
                v61 = v84;
              }
              else
              {
                v78 = (v64 - v75) >> 3;
                if (v78 >= -1)
                  v79 = v78 + 1;
                else
                  v79 = v78 + 2;
                v80 = v79 >> 1;
                v63 = &v61[8 * (v79 >> 1)];
                v81 = v61;
                if (v75 != v61)
                {
                  memmove(v63, v61, v75 - v61);
                  v81 = v75;
                }
                v75 = (char *)v81 + 8 * v80;
              }
            }
            v77 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *((_QWORD *)v63 - 1) = v77;
            v63 -= 8;
          }
          while (v38 != *(char **)(v26 + 104));
        }
        v76 = *(void **)(v26 + 96);
        *(_QWORD *)(v26 + 96) = v61;
        *(_QWORD *)(v26 + 104) = v63;
        *(_QWORD *)(v26 + 112) = v75;
        *(_QWORD *)(v26 + 120) = v64;
        v32 = (std::mutex *)(v26 + 8);
        if (v76)
          operator delete(v76);
        goto LABEL_159;
      }
      goto LABEL_188;
    }
    v58 = operator new(0x1000uLL);
    v59 = v58;
    if (v56 != v38)
    {
      *(_QWORD *)v38 = v58;
LABEL_158:
      *(_QWORD *)(v26 + 112) += 8;
LABEL_159:
      v39 = *(char **)(v26 + 104);
      v42 = *(_QWORD *)(v26 + 136);
      v44 = *(_QWORD *)(v26 + 128) + v42;
      goto LABEL_160;
    }
    if (v39 == v57)
    {
      if (v38 == v39)
        v98 = 1;
      else
        v98 = (v56 - v39) >> 2;
      if (v98 >> 61)
        goto LABEL_188;
      v99 = (char *)operator new(8 * v98);
      v100 = (v98 + 3) >> 2;
      v73 = &v99[8 * v100];
      v101 = v73;
      if (v38 != v39)
      {
        v101 = &v73[8 * v55];
        v102 = &v99[8 * v100];
        v103 = v39;
        if ((unint64_t)(v40 - 8) < 0x38)
          goto LABEL_193;
        v104 = &v99[8 * v100];
        v102 = v104;
        v103 = v39;
        if ((unint64_t)(v104 - v39) < 0x20)
          goto LABEL_193;
        v105 = ((unint64_t)(v40 - 8) >> 3) + 1;
        v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
        v102 = &v73[v106];
        v103 = &v39[v106];
        v107 = (__int128 *)(v39 + 16);
        v108 = v104 + 16;
        v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v110 = *v107;
          *(v108 - 1) = *(v107 - 1);
          *v108 = v110;
          v107 += 2;
          v108 += 2;
          v109 -= 4;
        }
        while (v109);
        if (v105 != (v105 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_193:
          do
          {
            v111 = *(_QWORD *)v103;
            v103 += 8;
            *(_QWORD *)v102 = v111;
            v102 += 8;
          }
          while (v102 != v101);
        }
      }
      *(_QWORD *)(v26 + 96) = v99;
      *(_QWORD *)(v26 + 104) = v73;
      *(_QWORD *)(v26 + 112) = v101;
      *(_QWORD *)(v26 + 120) = &v99[8 * v98];
      if (v39)
      {
        operator delete(v39);
        v73 = *(char **)(v26 + 104);
      }
    }
    else
    {
      v73 = v39;
    }
    *((_QWORD *)v73 - 1) = v59;
    v112 = *(char **)(v26 + 104);
    v113 = *(char **)(v26 + 112);
    *(_QWORD *)(v26 + 104) = v112 - 8;
    v114 = *((_QWORD *)v112 - 1);
    *(_QWORD *)(v26 + 104) = v112;
    if (v113 != *(char **)(v26 + 120))
    {
LABEL_142:
      *(_QWORD *)v113 = v114;
      goto LABEL_158;
    }
    v115 = *(char **)(v26 + 96);
    if (v112 > v115)
    {
      v116 = (v112 - v115) >> 3;
      if (v116 >= -1)
        v117 = v116 + 1;
      else
        v117 = v116 + 2;
      v118 = v117 >> 1;
      v119 = -v118;
      v120 = &v112[-8 * v118];
      v121 = v113 - v112;
      if (v121)
      {
        memmove(&v112[-8 * v118], v112, v121);
        v112 = *(char **)(v26 + 104);
      }
      v122 = &v120[v121];
      *(_QWORD *)(v26 + 104) = &v112[8 * v119];
      *(_QWORD *)(v26 + 112) = v122;
      *(_QWORD *)v122 = v114;
      goto LABEL_158;
    }
    if (v113 == v115)
      v136 = 1;
    else
      v136 = (v113 - v115) >> 2;
    if (v136 >> 61)
      goto LABEL_188;
    v137 = (char *)operator new(8 * v136);
    v138 = &v137[8 * (v136 >> 2)];
    v139 = v113 - v112;
    v69 = v113 == v112;
    v113 = v138;
    if (!v69)
    {
      v113 = &v138[v139 & 0xFFFFFFFFFFFFFFF8];
      v140 = v139 - 8;
      if (v140 < 0x38)
      {
        v141 = &v137[8 * (v136 >> 2)];
        do
        {
LABEL_183:
          v150 = *(_QWORD *)v112;
          v112 += 8;
          *(_QWORD *)v141 = v150;
          v141 += 8;
        }
        while (v141 != v113);
        goto LABEL_184;
      }
      v142 = &v137[8 * (v136 >> 2)];
      v141 = v142;
      if ((unint64_t)(v142 - v112) < 0x20)
        goto LABEL_183;
      v143 = (v140 >> 3) + 1;
      v144 = 8 * (v143 & 0x3FFFFFFFFFFFFFFCLL);
      v141 = &v138[v144];
      v145 = &v112[v144];
      v146 = (__int128 *)(v112 + 16);
      v147 = v142 + 16;
      v148 = v143 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v149 = *v146;
        *(v147 - 1) = *(v146 - 1);
        *v147 = v149;
        v146 += 2;
        v147 += 2;
        v148 -= 4;
      }
      while (v148);
      v112 = v145;
      if (v143 != (v143 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_183;
    }
LABEL_184:
    *(_QWORD *)(v26 + 96) = v137;
    *(_QWORD *)(v26 + 104) = v138;
    *(_QWORD *)(v26 + 112) = v113;
    *(_QWORD *)(v26 + 120) = &v137[8 * v136];
    if (v115)
    {
      operator delete(v115);
      v113 = *(char **)(v26 + 112);
    }
    goto LABEL_142;
  }
LABEL_160:
  *(_QWORD *)(*(_QWORD *)&v39[(v44 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v44 & 0x1FF)) = a2;
  *(_QWORD *)(v26 + 136) = v42 + 1;
  std::mutex::unlock(v32);
  if (!v154)
    goto LABEL_164;
  v131 = (unint64_t *)&v154->__shared_owners_;
  do
    v132 = __ldaxr(v131);
  while (__stlxr(v132 - 1, v131));
  if (!v132)
  {
    ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
    std::__shared_weak_count::__release_weak(v154);
    v133 = v153;
    if (!v153)
      return;
  }
  else
  {
LABEL_164:
    v133 = v153;
    if (!v153)
      return;
  }
  v134 = (unint64_t *)&v133->__shared_owners_;
  do
    v135 = __ldaxr(v134);
  while (__stlxr(v135 - 1, v134));
  if (!v135)
  {
    ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
    std::__shared_weak_count::__release_weak(v133);
  }
}

void sub_1BF7187F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, std::mutex *a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  operator delete(__p);
  operator delete(v13);
  std::mutex::unlock(a10);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void support::log::manager::add_delegates(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::mutex *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 != a2)
  {
    v5 = (std::mutex *)(a1 + 8);
    v6 = a1 + 120;
    do
    {
      std::mutex::lock(v5);
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      v7[1] = v6;
      v7[2] = v8;
      v9 = *(_QWORD *)(a1 + 120);
      *v7 = v9;
      *(_QWORD *)(v9 + 8) = v7;
      *(_QWORD *)(a1 + 120) = v7;
      ++*(_QWORD *)(a1 + 136);
      std::mutex::unlock(v5);
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2 != a2);
  }
}

void sub_1BF71895C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void support::log::manager::set_defaults(support::log::manager *this)
{
  std::mutex *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 112) = 3;
  if (*((_QWORD *)this + 17))
  {
    v3 = (char *)this + 120;
    v4 = *((_QWORD *)this + 15);
    v5 = (char *)*((_QWORD *)this + 16);
    v6 = *(_QWORD *)v5;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v6;
    *((_QWORD *)this + 17) = 0;
    if (v5 != (char *)this + 120)
    {
      do
      {
        v8 = (char *)*((_QWORD *)v5 + 1);
        v7 = *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 2) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        operator delete(v5);
        v5 = v8;
      }
      while (v8 != v3);
    }
  }
  std::mutex::unlock(v2);
}

void support::log::manager::message_delegates(support::log::manager *a1, uint64_t a2, char *a3)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)((char *)a1 + 120);
  v5 = *((_QWORD *)a1 + 16);
  if ((support::log::manager *)v5 != (support::log::manager *)((char *)a1 + 120))
  {
    do
    {
      a1 = (support::log::manager *)(***(uint64_t (****)(_QWORD, uint64_t, char *))(v5 + 16))(*(_QWORD *)(v5 + 16), a2, a3);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while ((_QWORD *)v5 != v4);
  }
  support::log::manager::release_log_buffer(a1, a3);
}

void support::log::stdout_delegate::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *a2 = 0xAAAAAAAAAAAAAAAALL;
  v4 = operator new(0x20uLL);
  v5 = v4;
  v6 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[1] = v6;
    v4[2] = v7;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    *((_BYTE *)v4 + 24) = 1;
    std::__shared_weak_count::__release_weak(v7);
    *v5 = &off_1E79218C0;
    std::__shared_weak_count::__release_weak(v7);
    *a2 = v5;
  }
  else
  {
    v4[1] = v6;
    v4[2] = 0;
    *((_BYTE *)v4 + 24) = 1;
    *v4 = &off_1E79218C0;
    *a2 = v4;
  }
}

uint64_t support::log::stdout_delegate::stdout_delegate(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_1E7921848;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_1E79218C0;
  return a1;
}

{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
    *(_QWORD *)a1 = &unk_1E7921848;
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v3;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    *(_BYTE *)(a1 + 24) = 1;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_QWORD *)a1 = &off_1E79218C0;
  return a1;
}

double support::log::stdout_delegate::create@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v3;
  double result;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  v3 = operator new(0x20uLL);
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  *(_QWORD *)v3 = &off_1E79218C0;
  *a1 = v3;
  return result;
}

void support::log::stdout_delegate::message(uint64_t a1, uint64_t a2, const char *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD v8[3];

  if (a3)
  {
    memset(v8, 170, sizeof(v8));
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v8);
    if (LOBYTE(v8[2]))
    {
      if (!v8[1])
        return;
      v4 = std::__shared_weak_count::lock((std::__shared_weak_count *)v8[1]);
      if (v4)
      {
        v5 = v4;
        if (v8[0])
          fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s\n", a3);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C20], "%s\n", a3);
    }
    if (LOBYTE(v8[2]))
    {
      if (v8[1])
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8[1]);
    }
  }
}

support::log::manager_global *support::log::manager_global::manager_global(support::log::manager_global *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (**v11)(support::log::manager::parameters *__hidden);
  char v12;
  std::string __p;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&__p, "global");
  v10 = 0;
  v11 = &off_1E7921878;
  v12 = 3;
  v8 = (uint64_t)&v8;
  v9 = &v8;
  support::log::manager::manager((uint64_t)this, &__p, (uint64_t)&v11, &v8);
  if (v10)
  {
    v2 = v8;
    v3 = v9;
    v4 = *v9;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v8 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    v10 = 0;
    if (v3 != &v8)
    {
      do
      {
        v7 = (uint64_t *)v3[1];
        v6 = v3[2];
        v3[2] = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v3);
        v3 = v7;
      }
      while (v7 != &v8);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_1E79218F0;
  return this;
}

void sub_1BF718E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::list<std::unique_ptr<support::log::delegate>>::~list(&a9);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::descriptor::descriptor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t descriptor_instance;

  *a1 = off_1E7921920;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

{
  uint64_t descriptor_instance;

  *a1 = off_1E7921920;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance(a2, a3);
  a1[1] = descriptor_instance;
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance + 8;
  a1[4] = descriptor_instance + 32;
  a1[5] = descriptor_instance + 56;
  return a1;
}

uint64_t support::log::global_client_descriptor_manager::get_descriptor_instance(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  int v5;
  size_t v6;
  unint64_t v7;
  std::string *p_dst;
  uint64_t v9;
  uint64_t v10;
  const std::string::value_type *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  const char *v18;
  const char *v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t **v27;
  uint64_t *v28;
  void *v29;
  void **v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  const void **v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void **v39;
  void **v40;
  char *v41;
  std::string *v42;
  float v43;
  _QWORD *v44;
  _QWORD *v45;
  _BOOL8 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t prime;
  void *v50;
  void *v51;
  uint64_t v52;
  _QWORD **v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *i;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint8x8_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  void *v71;
  std::string v72;
  std::string v73;
  void *__p[3];
  std::string __dst;

  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_10);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_10))
  {
    *(_OWORD *)&qword_1ED70F890 = 0u;
    *(_OWORD *)&qword_1ED70F880 = 0u;
    dword_1ED70F8A0 = 1065353216;
    __cxa_guard_release(&_MergedGlobals_10);
  }
  std::mutex::lock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  memset(__p, 170, sizeof(__p));
  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 1;
  memset(&__dst, 170, sizeof(__dst));
  if (v6 + 1 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = v6 + 1;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6 + 1;
    if (!v6)
      goto LABEL_16;
  }
  if (v5 >= 0)
    v11 = (const std::string::value_type *)a1;
  else
    v11 = *(const std::string::value_type **)a1;
  memmove(p_dst, v11, v6);
LABEL_16:
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v6) = 44;
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = (const std::string::value_type *)a2;
  else
    v13 = *(const std::string::value_type **)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  v15 = std::string::append(&__dst, v13, v14);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __p[2] = (void *)v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
      goto LABEL_156;
  }
  else if (std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p))
  {
    goto LABEL_156;
  }
  v17 = (char *)operator new(0x40uLL);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v73 = *(std::string *)a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v72 = *(std::string *)a2;
  *(_QWORD *)v17 = off_1E7921A50;
  v18 = v17 + 8;
  *(std::string *)(v17 + 8) = v73;
  memset(&v73, 0, sizeof(v73));
  *(std::string *)(v17 + 32) = v72;
  memset(&v72, 0, sizeof(v72));
  if (v17[31] < 0)
  {
    v18 = *(const char **)v18;
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  else
  {
    v19 = v17 + 32;
    if ((v17[55] & 0x80000000) == 0)
      goto LABEL_34;
  }
  v19 = *(const char **)v19;
LABEL_34:
  *((_QWORD *)v17 + 7) = os_log_create(v18, v19);
  if (SHIBYTE(__p[2]) >= 0)
    v20 = (uint64_t *)__p;
  else
    v20 = (uint64_t *)__p[0];
  if (SHIBYTE(__p[2]) >= 0)
    v21 = HIBYTE(__p[2]);
  else
    v21 = (unint64_t)__p[1];
  v22 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, v20, v21);
  v23 = v22;
  v24 = qword_1ED70F888;
  if (qword_1ED70F888)
  {
    v25 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED70F888);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      v26 = v22;
      if (v22 >= qword_1ED70F888)
        v26 = v22 % qword_1ED70F888;
    }
    else
    {
      v26 = (qword_1ED70F888 - 1) & v22;
    }
    v27 = *(uint64_t ***)(qword_1ED70F880 + 8 * v26);
    if (v27)
    {
      v28 = *v27;
      if (*v27)
      {
        if (SHIBYTE(__p[2]) >= 0)
          v29 = (void *)HIBYTE(__p[2]);
        else
          v29 = __p[1];
        if (SHIBYTE(__p[2]) >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        if (v25.u32[0] < 2uLL)
        {
          while (1)
          {
            v36 = v28[1];
            if (v36 == v23)
            {
              v37 = *((unsigned __int8 *)v28 + 39);
              if ((v37 & 0x80u) == 0)
                v38 = (void *)*((unsigned __int8 *)v28 + 39);
              else
                v38 = (void *)v28[3];
              if (v38 == v29)
              {
                v39 = (const void **)(v28 + 2);
                if ((v37 & 0x80) != 0)
                {
                  if (!memcmp(*v39, v30, v28[3]))
                    goto LABEL_154;
                }
                else
                {
                  if (!*((_BYTE *)v28 + 39))
                    goto LABEL_154;
                  v40 = v30;
                  while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v40)
                  {
                    v39 = (const void **)((char *)v39 + 1);
                    v40 = (void **)((char *)v40 + 1);
                    if (!--v37)
                      goto LABEL_154;
                  }
                }
              }
            }
            else if ((v36 & (v24 - 1)) != v26)
            {
              goto LABEL_90;
            }
            v28 = (uint64_t *)*v28;
            if (!v28)
              goto LABEL_90;
          }
        }
        do
        {
          v31 = v28[1];
          if (v31 == v23)
          {
            v32 = *((unsigned __int8 *)v28 + 39);
            if ((v32 & 0x80u) == 0)
              v33 = (void *)*((unsigned __int8 *)v28 + 39);
            else
              v33 = (void *)v28[3];
            if (v33 == v29)
            {
              v34 = (const void **)(v28 + 2);
              if ((v32 & 0x80) != 0)
              {
                if (!memcmp(*v34, v30, v28[3]))
                  goto LABEL_154;
              }
              else
              {
                if (!*((_BYTE *)v28 + 39))
                  goto LABEL_154;
                v35 = v30;
                while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v35)
                {
                  v34 = (const void **)((char *)v34 + 1);
                  v35 = (void **)((char *)v35 + 1);
                  if (!--v32)
                    goto LABEL_154;
                }
              }
            }
          }
          else
          {
            if (v31 >= v24)
              v31 %= v24;
            if (v31 != v26)
              break;
          }
          v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
    }
  }
  else
  {
    v26 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_90:
  __dst.__r_.__value_.__r.__words[2] = 0xAAAAAAAAAAAAAA00;
  v41 = (char *)operator new(0x30uLL);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1ED70F890;
  *(_QWORD *)v41 = 0;
  *((_QWORD *)v41 + 1) = v23;
  v42 = (std::string *)(v41 + 16);
  if (SHIBYTE(__p[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v42, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v42->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((void **)v41 + 4) = __p[2];
  }
  *((_QWORD *)v41 + 5) = v17;
  __dst.__r_.__value_.__s.__data_[16] = 1;
  v43 = (float)(unint64_t)(qword_1ED70F898 + 1);
  if (!v24 || (float)(*(float *)&dword_1ED70F8A0 * (float)v24) < v43)
  {
    v46 = 1;
    if (v24 >= 3)
      v46 = (v24 & (v24 - 1)) != 0;
    v47 = v46 | (2 * v24);
    v48 = vcvtps_u32_f32(v43 / *(float *)&dword_1ED70F8A0);
    if (v47 <= v48)
      prime = v48;
    else
      prime = v47;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v24 = qword_1ED70F888;
    if (prime > qword_1ED70F888)
      goto LABEL_107;
    if (prime >= qword_1ED70F888)
      goto LABEL_140;
    v60 = vcvtps_u32_f32((float)(unint64_t)qword_1ED70F898 / *(float *)&dword_1ED70F8A0);
    if ((unint64_t)qword_1ED70F888 < 3
      || (v61 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED70F888), v61.i16[0] = vaddlv_u8(v61), v61.u32[0] > 1uLL))
    {
      v60 = std::__next_prime(v60);
    }
    else
    {
      v62 = 1 << -(char)__clz(v60 - 1);
      if (v60 >= 2)
        v60 = v62;
    }
    if (prime <= v60)
      prime = v60;
    if (prime >= v24)
    {
      v24 = qword_1ED70F888;
    }
    else
    {
      if (prime)
      {
LABEL_107:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v50 = operator new(8 * prime);
        v51 = (void *)qword_1ED70F880;
        qword_1ED70F880 = (uint64_t)v50;
        if (v51)
          operator delete(v51);
        v52 = 0;
        qword_1ED70F888 = prime;
        do
          *(_QWORD *)(qword_1ED70F880 + 8 * v52++) = 0;
        while (prime != v52);
        v53 = (_QWORD **)qword_1ED70F890;
        if (!qword_1ED70F890)
          goto LABEL_139;
        v54 = *(_QWORD *)(qword_1ED70F890 + 8);
        v55 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v56 = v54 & v55;
          *(_QWORD *)(qword_1ED70F880 + 8 * v56) = &qword_1ED70F890;
          for (i = *v53; *v53; i = *v53)
          {
            v58 = i[1] & v55;
            if (v58 == v56)
            {
              v53 = (_QWORD **)i;
            }
            else if (*(_QWORD *)(qword_1ED70F880 + 8 * v58))
            {
              *v53 = (_QWORD *)*i;
              v59 = 8 * v58;
              *i = **(_QWORD **)(qword_1ED70F880 + v59);
              **(_QWORD **)(qword_1ED70F880 + v59) = i;
            }
            else
            {
              *(_QWORD *)(qword_1ED70F880 + 8 * v58) = v53;
              v53 = (_QWORD **)i;
              v56 = v58;
            }
          }
LABEL_139:
          v24 = prime;
          goto LABEL_140;
        }
        if (v54 >= prime)
          v54 %= prime;
        *(_QWORD *)(qword_1ED70F880 + 8 * v54) = &qword_1ED70F890;
        v63 = *v53;
        if (!*v53)
          goto LABEL_139;
        while (1)
        {
          v65 = v63[1];
          if (v65 >= prime)
            v65 %= prime;
          if (v65 == v54)
            goto LABEL_133;
          if (*(_QWORD *)(qword_1ED70F880 + 8 * v65))
          {
            *v53 = (_QWORD *)*v63;
            v64 = 8 * v65;
            *v63 = **(_QWORD **)(qword_1ED70F880 + v64);
            **(_QWORD **)(qword_1ED70F880 + v64) = v63;
            v63 = v53;
LABEL_133:
            v53 = (_QWORD **)v63;
            v63 = (_QWORD *)*v63;
            if (!v63)
              goto LABEL_139;
          }
          else
          {
            *(_QWORD *)(qword_1ED70F880 + 8 * v65) = v53;
            v53 = (_QWORD **)v63;
            v63 = (_QWORD *)*v63;
            v54 = v65;
            if (!v63)
              goto LABEL_139;
          }
        }
      }
      v71 = (void *)qword_1ED70F880;
      qword_1ED70F880 = 0;
      if (v71)
        operator delete(v71);
      v24 = 0;
      qword_1ED70F888 = 0;
    }
LABEL_140:
    v66 = v24 - 1;
    if ((v24 & (v24 - 1)) != 0)
    {
      if (v23 >= v24)
      {
        v26 = v23 % v24;
        v44 = *(_QWORD **)(qword_1ED70F880 + 8 * (v23 % v24));
        v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v44)
          goto LABEL_96;
      }
      else
      {
        v26 = v23;
        v44 = *(_QWORD **)(qword_1ED70F880 + 8 * v23);
        v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
        if (v44)
          goto LABEL_96;
      }
    }
    else
    {
      v26 = v66 & v23;
      v44 = *(_QWORD **)(qword_1ED70F880 + 8 * (v66 & v23));
      v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
      if (v44)
        goto LABEL_96;
    }
LABEL_142:
    *v45 = qword_1ED70F890;
    qword_1ED70F890 = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(qword_1ED70F880 + 8 * v26) = &qword_1ED70F890;
    if (*(_QWORD *)__dst.__r_.__value_.__l.__data_)
    {
      v67 = *(_QWORD *)(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 8);
      if ((v24 & (v24 - 1)) != 0)
      {
        if (v67 >= v24)
          v67 %= v24;
      }
      else
      {
        v67 &= v24 - 1;
      }
      *(_QWORD *)(qword_1ED70F880 + 8 * v67) = __dst.__r_.__value_.__r.__words[0];
    }
    goto LABEL_153;
  }
  v44 = *(_QWORD **)(qword_1ED70F880 + 8 * v26);
  v45 = (_QWORD *)__dst.__r_.__value_.__r.__words[0];
  if (!v44)
    goto LABEL_142;
LABEL_96:
  *v45 = *v44;
  *v44 = __dst.__r_.__value_.__r.__words[0];
LABEL_153:
  ++qword_1ED70F898;
LABEL_154:
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v72.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_156:
      v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
      if (v68)
        goto LABEL_157;
LABEL_162:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  else if ((SHIBYTE(v73.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete(v73.__r_.__value_.__l.__data_);
  v68 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(__p);
  if (!v68)
    goto LABEL_162;
LABEL_157:
  v69 = v68[5];
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
  return v69;
}

void sub_1BF719798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)&a29);
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a21 & 0x80000000) == 0)
  {
LABEL_3:
    if ((a28 & 0x80000000) == 0)
    {
LABEL_8:
      std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
      _Unwind_Resume(a1);
    }
LABEL_7:
    operator delete(a23);
    std::mutex::unlock(&support::log::global_client_descriptor_manager::get_descriptor_instance(std::string const&,std::string const&)::sMutex);
    _Unwind_Resume(a1);
  }
  operator delete(a16);
  if ((a28 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL support::log::client::descriptor::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t descriptor_instance;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;

  *a1 = off_1E7921940;
  *(_OWORD *)v16 = *(_OWORD *)a2;
  v17 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v15 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_1E7921920;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v16, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v17) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v16[0]);
    if (a4)
      goto LABEL_4;
LABEL_7:
    pthread_mutex_lock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
    if (!qword_1EF57DD08)
    {
      v7 = operator new(0xA8uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = off_1E7921BB8;
      a4 = (uint64_t)(v7 + 3);
      support::log::manager_global::manager_global((support::log::manager_global *)(v7 + 3));
      v8 = (std::__shared_weak_count *)off_1EF57DD10;
      qword_1EF57DD08 = (uint64_t)(v7 + 3);
      off_1EF57DD10 = v7;
      if (!v8)
        goto LABEL_15;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    a4 = qword_1EF57DD08;
    v7 = off_1EF57DD10;
    if (!off_1EF57DD10)
    {
LABEL_17:
      pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
      a1[7] = a4;
      a1[8] = v7;
      goto LABEL_18;
    }
LABEL_15:
    v11 = v7 + 1;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    goto LABEL_6;
LABEL_3:
  if (!a4)
    goto LABEL_7;
LABEL_4:
  a1[7] = 0;
  a1[8] = 0;
LABEL_18:
  a1[9] = a4;
  return a1;
}

void sub_1BF719A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  pthread_mutex_unlock(&ctu::Singleton<support::log::manager_global,support::log::manager_global,ctu::PthreadMutexGuardPolicy<support::log::manager_global>>::sInstance);
  _Unwind_Resume(a1);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t descriptor_instance;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v10;
  unint64_t v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;

  *a1 = off_1E7921940;
  *(_OWORD *)v14 = *(_OWORD *)a2;
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v13 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a1[1] = off_1E7921920;
  descriptor_instance = support::log::global_client_descriptor_manager::get_descriptor_instance((uint64_t)v14, (uint64_t)__p);
  a1[2] = descriptor_instance;
  a1[3] = descriptor_instance;
  a1[4] = descriptor_instance + 8;
  a1[5] = descriptor_instance + 32;
  a1[6] = descriptor_instance + 56;
  if ((SHIBYTE(v13) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(v14[0]);
    v7 = *a4;
    v8 = a4[1];
    a1[7] = *a4;
    a1[8] = v8;
    if (!v8)
      goto LABEL_4;
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_6;
LABEL_3:
  v7 = *a4;
  v8 = a4[1];
  a1[7] = *a4;
  a1[8] = v8;
  if (!v8)
  {
LABEL_4:
    a1[9] = v7;
    return a1;
  }
LABEL_7:
  v10 = (unint64_t *)(v8 + 8);
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  a1[9] = a1[7];
  return a1;
}

void sub_1BF719BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *support::log::client::client(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

{
  void *__p[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;

  *(_OWORD *)v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)__p = *(_OWORD *)a3;
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  support::log::client::client(a1, (uint64_t)v7, (uint64_t)__p, 0);
  if (SHIBYTE(v6) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return a1;
  }
  else if ((SHIBYTE(v8) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(v7[0]);
  return a1;
}

void sub_1BF719CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_1BF719DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t support::log::client::get_manager(support::log::client *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t support::log::client::get_descriptor(support::log::client *this)
{
  return (uint64_t)this + 8;
}

void support::log::stdout_delegate::~stdout_delegate(support::log::stdout_delegate *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &unk_1E7921848;
  if (*((_BYTE *)this + 24))
  {
    v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v1)
      std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &unk_1E7921848;
  if (*((_BYTE *)this + 24))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
    if (v2)
      std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(this);
}

BOOL support::log::manager::should_log(uint64_t a1, unsigned int a2, os_log_t oslog)
{
  return *(unsigned __int8 *)(a1 + 112) >= a2 || os_log_type_enabled(oslog, support::log::sOSLogLevel[a2]);
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::buffer>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t ctu::PthreadMutexGuardPolicy<support::log::manager_global>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void support::log::manager_global::~manager_global(support::log::manager_global *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7921890;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;

  *(_QWORD *)this = off_1E7921890;
  if (*((_QWORD *)this + 17))
  {
    v2 = (char *)this + 120;
    v3 = *((_QWORD *)this + 15);
    v4 = (char *)*((_QWORD *)this + 16);
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v3 + 8);
    **(_QWORD **)(v3 + 8) = v5;
    *((_QWORD *)this + 17) = 0;
    if (v4 != (char *)this + 120)
    {
      do
      {
        v7 = (char *)*((_QWORD *)v4 + 1);
        v6 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void support::log::client::~client(support::log::client *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *(_QWORD *)this = off_1E7921940;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *(_QWORD *)this = off_1E7921940;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(this);
  }
  else
  {
LABEL_5:
    operator delete(this);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>>>::find<std::string>(_QWORD *a1)
{
  _BYTE *v1;
  int v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t *result;
  uint64_t **v11;
  uint64_t *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  v1 = a1;
  v2 = *((char *)a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if (v2 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  v5 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v24, v3, v4);
  v6 = qword_1ED70F888;
  if (!qword_1ED70F888)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1ED70F888);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    v9 = v5;
    if (v5 >= qword_1ED70F888)
      v9 = v5 % qword_1ED70F888;
  }
  else
  {
    v9 = (qword_1ED70F888 - 1) & v5;
  }
  v11 = *(uint64_t ***)(qword_1ED70F880 + 8 * v9);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = v1[23];
      if (v13 >= 0)
        v14 = v1[23];
      else
        v14 = *((_QWORD *)v1 + 1);
      if (v13 < 0)
        v1 = *(_BYTE **)v1;
      if (v8.u32[0] < 2uLL)
      {
        v15 = qword_1ED70F888 - 1;
        while (1)
        {
          v20 = v12[1];
          if (v20 == v7)
          {
            v21 = *((unsigned __int8 *)v12 + 39);
            if ((v21 & 0x80u) == 0)
              v22 = *((unsigned __int8 *)v12 + 39);
            else
              v22 = v12[3];
            if (v22 == v14)
            {
              if ((v21 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v1, v12[3]))
                  return v12;
              }
              else
              {
                if (!*((_BYTE *)v12 + 39))
                  return v12;
                v23 = 0;
                while (*((unsigned __int8 *)v12 + v23 + 16) == v1[v23])
                {
                  if (v21 == ++v23)
                    return v12;
                }
              }
            }
          }
          else if ((v20 & v15) != v9)
          {
            return 0;
          }
          result = 0;
          v12 = (uint64_t *)*v12;
          if (!v12)
            return result;
        }
      }
      while (1)
      {
        v16 = v12[1];
        if (v16 == v7)
        {
          v17 = *((unsigned __int8 *)v12 + 39);
          if ((v17 & 0x80u) == 0)
            v18 = *((unsigned __int8 *)v12 + 39);
          else
            v18 = v12[3];
          if (v18 == v14)
          {
            if ((v17 & 0x80) != 0)
            {
              if (!memcmp((const void *)v12[2], v1, v12[3]))
                return v12;
            }
            else
            {
              if (!*((_BYTE *)v12 + 39))
                return v12;
              v19 = 0;
              while (*((unsigned __int8 *)v12 + v19 + 16) == v1[v19])
              {
                if (v17 == ++v19)
                  return v12;
              }
            }
          }
        }
        else
        {
          if (v16 >= v6)
            v16 %= v6;
          if (v16 != v9)
            return 0;
        }
        result = 0;
        v12 = (uint64_t *)*v12;
        if (!v12)
          return result;
      }
    }
  }
  return 0;
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<support::log::global_client_descriptor>>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(_QWORD *)(v2 + 40);
      *(_QWORD *)(v2 + 40) = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void support::log::global_client_descriptor::~global_client_descriptor(void **this)
{
  *this = off_1E7921A50;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if ((*((char *)this + 31) & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(this[1]);
    return;
  }
  operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    goto LABEL_5;
}

{
  *this = off_1E7921A50;
  if (*((char *)this + 55) < 0)
  {
    operator delete(this[4]);
    if ((*((char *)this + 31) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(this[1]);
    operator delete(this);
    return;
  }
  if (*((char *)this + 31) < 0)
    goto LABEL_6;
LABEL_3:
  operator delete(this);
}

void std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::delegate::context *,std::shared_ptr<support::log::delegate::context>::__shared_ptr_default_delete<support::log::delegate::context,support::log::delegate::context>,std::allocator<support::log::delegate::context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF746231)
    return a1 + 24;
  if (((v3 & 0x80000001BF746231 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF746231))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF746231 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7921AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7921AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void support::log::buffer::~buffer(support::log::buffer *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_1E7921B20;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  BOOL v6;

  *(_QWORD *)this = off_1E7921B20;
  v2 = (char *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (char *)this + 80)
  {
    do
    {
      free(*((void **)v2 + 4));
      v4 = (char *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (char *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  std::deque<std::tuple<unsigned int,BOOL>>::~deque[abi:ne180100]((uint64_t)this + 96);
  std::__tree<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,std::__map_value_compare<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>,boost::signals2::detail::group_key_less<int,std::less<int>>,false>,std::allocator<std::__value_type<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,std::__list_iterator<boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group,boost::optional<int>>,boost::signals2::slot<void ()(void),boost::function<void ()(void)>>,boost::signals2::mutex>>,void *>>>>::destroy(*((_QWORD **)this + 10));
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  operator delete(this);
}

void std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<support::log::manager *,std::shared_ptr<support::log::manager>::__shared_ptr_default_delete<support::log::manager,support::log::manager>,std::allocator<support::log::manager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF7463BDLL)
    return a1 + 24;
  if (((v3 & 0x80000001BF7463BDLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF7463BDLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF7463BDLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7921BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<support::log::manager_global>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7921BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t std::__shared_ptr_emplace<support::log::manager_global>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t __cxx_global_var_init_17()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>::~PthreadMutexGuardPolicy, &ctu::Singleton<support::log::shared_stdio,support::log::shared_stdio,ctu::PthreadMutexGuardPolicy<support::log::shared_stdio>>::sInstance, &dword_1BF566000);
  }
  return result;
}

uint64_t awd::metrics::protobuf_ShutdownFile_CCMetricsABMPower_2eproto(awd::metrics *this)
{
  uint64_t result;

  if (awd::metrics::CommCenterPowerVotingRecord::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterPowerVotingRecord::default_instance_ + 8))(awd::metrics::CommCenterPowerVotingRecord::default_instance_);
  if (awd::metrics::CommCenterPowerTransitionSuccess::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterPowerTransitionSuccess::default_instance_ + 8))(awd::metrics::CommCenterPowerTransitionSuccess::default_instance_);
  if (awd::metrics::CommCenterPowerTransitionFailure::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterPowerTransitionFailure::default_instance_ + 8))(awd::metrics::CommCenterPowerTransitionFailure::default_instance_);
  if (awd::metrics::CommCenterMissedMTMessage::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterMissedMTMessage::default_instance_ + 8))(awd::metrics::CommCenterMissedMTMessage::default_instance_);
  if (awd::metrics::CommCenterLowPowerEvent::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterLowPowerEvent::default_instance_ + 8))(awd::metrics::CommCenterLowPowerEvent::default_instance_);
  if (awd::metrics::CommCenterWakeInfo::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterWakeInfo::default_instance_ + 8))(awd::metrics::CommCenterWakeInfo::default_instance_);
  if (awd::metrics::CommCenterLowPowerStats::default_instance_)
    (*(void (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterLowPowerStats::default_instance_ + 8))(awd::metrics::CommCenterLowPowerStats::default_instance_);
  result = awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  if (awd::metrics::CommCenterWakeReasonInfo::default_instance_)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)awd::metrics::CommCenterWakeReasonInfo::default_instance_
                                              + 8))(awd::metrics::CommCenterWakeReasonInfo::default_instance_);
  return result;
}

void awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(awd::metrics *this, uint64_t a2, uint64_t a3, const char *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  void (*v13)(void);

  if ((awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(void)::already_here & 1) == 0)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(void)::already_here = 1;
    wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/AppleBasebandServices_Manager/AppleBasebandManager/BasebandManager/Server/AWD/Generated/CCMetricsABMPower.pb.cc", a4);
    v4 = operator new(0x18uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = off_1E7921C08;
    awd::metrics::CommCenterPowerVotingRecord::default_instance_ = (uint64_t)v4;
    v5 = operator new(0x38uLL);
    v5[5] = 0;
    v5[6] = 0;
    *v5 = off_1E7921C80;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    *((_DWORD *)v5 + 8) = 0;
    awd::metrics::CommCenterPowerTransitionSuccess::default_instance_ = (uint64_t)v5;
    v6 = operator new(0x38uLL);
    v6[5] = 0;
    v6[6] = 0;
    *v6 = off_1E7921CF8;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    *((_DWORD *)v6 + 8) = 0;
    awd::metrics::CommCenterPowerTransitionFailure::default_instance_ = (uint64_t)v6;
    v7 = operator new(0x20uLL);
    *v7 = off_1E7921D70;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = 0;
    awd::metrics::CommCenterMissedMTMessage::default_instance_ = (uint64_t)v7;
    v8 = operator new(0x28uLL);
    *v8 = off_1E7921DE8;
    v8[1] = 0;
    v9 = MEMORY[0x1E0DE8338];
    v8[2] = 0;
    v8[3] = v9;
    v8[4] = 0;
    awd::metrics::CommCenterLowPowerEvent::default_instance_ = (uint64_t)v8;
    v10 = operator new(0x28uLL);
    *v10 = off_1E7921E60;
    v10[1] = 0;
    v10[2] = 0;
    v10[3] = 0;
    *((_DWORD *)v10 + 8) = 0;
    awd::metrics::CommCenterWakeInfo::default_instance_ = (uint64_t)v10;
    v11 = (char *)operator new(0x50uLL);
    *(_QWORD *)v11 = off_1E7921ED8;
    *((_QWORD *)v11 + 8) = 0;
    *((_DWORD *)v11 + 18) = 0;
    *(_OWORD *)(v11 + 8) = 0u;
    *(_OWORD *)(v11 + 24) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *((_DWORD *)v11 + 14) = 0;
    awd::metrics::CommCenterLowPowerStats::default_instance_ = (uint64_t)v11;
    v12 = operator new(0x68uLL);
    *v12 = off_1E7921F50;
    v12[1] = 0;
    *((_WORD *)v12 + 26) = 0;
    v12[2] = v9;
    v12[3] = v9;
    *((_DWORD *)v12 + 12) = 0;
    v12[4] = v9;
    v12[5] = v9;
    v12[7] = v9;
    v12[8] = v9;
    v12[9] = v9;
    v12[10] = 0;
    v12[11] = 0;
    *((_DWORD *)v12 + 24) = 0;
    awd::metrics::CommCenterWakeReasonInfo::default_instance_ = (uint64_t)v12;
    wireless_diagnostics::google::protobuf::internal::OnShutdown((wireless_diagnostics::google::protobuf::internal *)awd::metrics::protobuf_ShutdownFile_CCMetricsABMPower_2eproto, v13);
  }
}

_QWORD *awd::metrics::CommCenterPowerVotingRecord::CommCenterPowerVotingRecord(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E7921C08;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = off_1E7921C08;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::CommCenterPowerTransitionSuccess(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E7921C80;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E7921C80;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::CommCenterPowerTransitionFailure(uint64_t this)
{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E7921CF8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)this = off_1E7921CF8;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterMissedMTMessage::CommCenterMissedMTMessage(_QWORD *this)
{
  *this = off_1E7921D70;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = off_1E7921D70;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

_QWORD *awd::metrics::CommCenterLowPowerEvent::CommCenterLowPowerEvent(_QWORD *this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = off_1E7921DE8;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *this = off_1E7921DE8;
  this[1] = 0;
  this[2] = 0;
  this[3] = v1;
  this[4] = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::CommCenterWakeInfo(uint64_t this)
{
  *(_QWORD *)this = off_1E7921E60;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(_QWORD *)this = off_1E7921E60;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double awd::metrics::CommCenterLowPowerStats::CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this)
{
  double result;

  *(_QWORD *)this = off_1E7921ED8;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(_QWORD *)this = off_1E7921ED8;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::CommCenterWakeReasonInfo(uint64_t this)
{
  uint64_t v1;

  *(_QWORD *)this = off_1E7921F50;
  *(_QWORD *)(this + 8) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_WORD *)(this + 52) = 0;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = v1;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = v1;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

{
  uint64_t v1;

  *(_QWORD *)this = off_1E7921F50;
  *(_QWORD *)(this + 8) = 0;
  v1 = MEMORY[0x1E0DE8338];
  *(_WORD *)(this + 52) = 0;
  *(_QWORD *)(this + 16) = v1;
  *(_QWORD *)(this + 24) = v1;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = v1;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

BOOL awd::metrics::CommCenterMissedMTType_IsValid(awd::metrics *this)
{
  return this < 3;
}

BOOL awd::metrics::CommCenterSleepType_IsValid(awd::metrics *this)
{
  return this < 2;
}

BOOL awd::metrics::CommCenterLowPowerEventType_IsValid(awd::metrics *this)
{
  return this < 3;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

awd::metrics::CommCenterPowerVotingRecord *awd::metrics::CommCenterPowerVotingRecord::CommCenterPowerVotingRecord(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E7921C08;
  awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E7921C08;
  awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  return this;
}

void sub_1BF71AF1C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerVotingRecord::MergeFrom(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  int v4;
  int v5;
  int v6;
  _BYTE v7[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 20);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 20) & 1) != 0)
    {
      v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      v6 = *((_DWORD *)a2 + 3);
      *((_DWORD *)this + 5) |= 2u;
      *((_DWORD *)this + 3) = v6;
    }
  }
}

void sub_1BF71AFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71AFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71B034(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerVotingRecord::~CommCenterPowerVotingRecord(awd::metrics::CommCenterPowerVotingRecord *this)
{
  *(_QWORD *)this = off_1E7921C08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E7921C08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E7921C08;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::default_instance(awd::metrics::CommCenterPowerVotingRecord *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterPowerVotingRecord::default_instance_;
  if (!awd::metrics::CommCenterPowerVotingRecord::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerVotingRecord::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterPowerVotingRecord::New(awd::metrics::CommCenterPowerVotingRecord *this)
{
  _QWORD *result;

  result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  *result = off_1E7921C08;
  return result;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 20))
    *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(awd::metrics::CommCenterPowerVotingRecord *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  char *v6;
  uint64_t TagFallback;
  int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v6 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v6 >= *((_QWORD *)a2 + 2) || *v6 < 0)
        {
          TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        else
        {
          TagFallback = *v6;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((_QWORD *)a2 + 1) = v6 + 1;
          if (!(_DWORD)TagFallback)
            return 1;
        }
        if (TagFallback >> 3 != 1)
          break;
        v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v11 = (char *)*((_QWORD *)a2 + 1);
        v9 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v11 >= v9 || *v11 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          v9 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v12 < v9)
            goto LABEL_23;
        }
        else
        {
          *v4 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)a2 + 1) = v12;
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v12 < v9)
          {
LABEL_23:
            if (*v12 == 16)
            {
              v10 = v12 + 1;
              *((_QWORD *)a2 + 1) = v10;
              if ((unint64_t)v10 < v9)
                goto LABEL_25;
LABEL_28:
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
              if (!(_DWORD)result)
                return result;
              v15 = *((_QWORD *)a2 + 1);
              v14 = *((_QWORD *)a2 + 2);
              *((_DWORD *)this + 5) |= 2u;
              if (v15 == v14)
                goto LABEL_30;
            }
          }
        }
      }
      if (TagFallback >> 3 != 2)
        break;
      v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_18;
      v10 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      v9 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v10 >= v9)
        goto LABEL_28;
LABEL_25:
      if ((char)*v10 < 0)
        goto LABEL_28;
      *v5 = *v10;
      v13 = (char *)(v10 + 1);
      *((_QWORD *)a2 + 1) = v13;
      *((_DWORD *)this + 5) |= 2u;
      if (v13 == (char *)v9)
      {
LABEL_30:
        if (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    v8 = TagFallback & 7;
LABEL_18:
    if (v8 == 4)
      return 1;
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
  }
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 20);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::ByteSize(awd::metrics::CommCenterPowerVotingRecord *this)
{
  char v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  uint64_t v7;

  v2 = *((_BYTE *)this + 20);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 20) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 20) & 2) != 0)
      goto LABEL_11;
LABEL_6:
    *((_DWORD *)this + 4) = v3;
    return v3;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v5 < 0x80)
  {
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_11;
    goto LABEL_6;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
  if ((*((_DWORD *)this + 5) & 2) == 0)
    goto LABEL_6;
LABEL_11:
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6)
       + 1
       + v3;
  else
    v7 = (v3 + 2);
  *((_DWORD *)this + 4) = v7;
  return v7;
}

void awd::metrics::CommCenterPowerVotingRecord::CopyFrom(awd::metrics::CommCenterPowerVotingRecord *this, const awd::metrics::CommCenterPowerVotingRecord *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerVotingRecord *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterPowerVotingRecord::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::IsInitialized(awd::metrics::CommCenterPowerVotingRecord *this)
{
  return 1;
}

awd::metrics::CommCenterPowerVotingRecord *awd::metrics::CommCenterPowerVotingRecord::Swap(awd::metrics::CommCenterPowerVotingRecord *this, awd::metrics::CommCenterPowerVotingRecord *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return this;
}

char *awd::metrics::CommCenterPowerVotingRecord::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF746470;
  strcpy(result, "awd.metrics.CommCenterPowerVotingRecord");
  return result;
}

_QWORD *awd::metrics::CommCenterPowerTransitionSuccess::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

awd::metrics::CommCenterPowerTransitionSuccess *awd::metrics::CommCenterPowerTransitionSuccess::CommCenterPowerTransitionSuccess(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_1E7921C80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_1E7921C80;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  return this;
}

void sub_1BF71B540(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  uint64_t v4;
  awd::metrics::CommCenterPowerVotingRecord *v5;
  uint64_t v6;
  uint64_t v7;
  const awd::metrics::CommCenterPowerVotingRecord *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BYTE v16[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    v4 = 0;
    do
    {
      while (1)
      {
        v8 = *(const awd::metrics::CommCenterPowerVotingRecord **)(*((_QWORD *)a2 + 2) + 8 * v4);
        v9 = *((_DWORD *)this + 7);
        v10 = *((int *)this + 6);
        if ((int)v10 >= v9)
          break;
        v11 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v10 + 1;
        awd::metrics::CommCenterPowerVotingRecord::MergeFrom(*(awd::metrics::CommCenterPowerVotingRecord **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 6))
          goto LABEL_11;
      }
      if (v9 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16));
        v9 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v9 + 1;
      v5 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)v5 = off_1E7921C08;
      v6 = *((_QWORD *)this + 2);
      v7 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v7 + 1;
      *(_QWORD *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterPowerVotingRecord::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  LOBYTE(v12) = *((_BYTE *)a2 + 52);
  if ((_BYTE)v12)
  {
    if ((*((_BYTE *)a2 + 52) & 1) != 0)
    {
      v14 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 13) |= 1u;
      *((_DWORD *)this + 2) = v14;
      v12 = *((_DWORD *)a2 + 13);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 8) == 0)
          return;
        goto LABEL_15;
      }
    }
    else if ((*((_BYTE *)a2 + 52) & 2) == 0)
    {
      goto LABEL_14;
    }
    v15 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 2u;
    *((_DWORD *)this + 3) = v15;
    if ((*((_DWORD *)a2 + 13) & 8) == 0)
      return;
LABEL_15:
    v13 = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 13) |= 8u;
    *((_QWORD *)this + 5) = v13;
  }
}

void sub_1BF71B718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71B72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71B784(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;

  v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  v6 = *(void **)(v1 + 16);
  if (v6)
    operator delete[](v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionSuccess::~CommCenterPowerTransitionSuccess(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7921C80;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7921C80;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E7921C80;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v6);
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::default_instance(awd::metrics::CommCenterPowerTransitionSuccess *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterPowerTransitionSuccess::default_instance_;
  if (!awd::metrics::CommCenterPowerTransitionSuccess::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerTransitionSuccess::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterPowerTransitionSuccess::New(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  _QWORD *result;

  result = operator new(0x38uLL);
  result[5] = 0;
  result[6] = 0;
  *result = off_1E7921C80;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 52))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 40) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::MergePartialFromCodedStream(awd::metrics::CommCenterPowerTransitionSuccess *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unint64_t *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  awd::metrics::CommCenterPowerVotingRecord *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t result;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = (awd::metrics::CommCenterPowerTransitionSuccess *)((char *)this + 16);
  v7 = (unint64_t *)((char *)this + 40);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
        goto LABEL_30;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
LABEL_30:
        if (*v14 < 0)
        {
LABEL_33:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v23)
            continue;
        }
        else
        {
          *v5 = *v14;
          v22 = v14 + 1;
          *((_QWORD *)a2 + 1) = v22;
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v11)
            continue;
        }
        if (*v22 != 26)
          continue;
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_21;
        v15 = *((_DWORD *)this + 7);
        v16 = *((int *)this + 6);
        if ((int)v16 < v15)
          goto LABEL_19;
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v20 >= v19)
          goto LABEL_56;
        goto LABEL_53;
      default:
        v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
    do
    {
      *((_QWORD *)a2 + 1) = v22 + 1;
      v15 = *((_DWORD *)this + 7);
      v16 = *((int *)this + 6);
      if ((int)v16 < v15)
      {
LABEL_19:
        v17 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v16 + 1;
        v18 = *(awd::metrics::CommCenterPowerVotingRecord **)(v17 + 8 * v16);
      }
      else
      {
LABEL_37:
        if (v15 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
          v15 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v15 + 1;
        v18 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_QWORD *)v18 = off_1E7921C08;
        v24 = *((_QWORD *)this + 2);
        v25 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25) = v18;
      }
      v36 = -1431655766;
      v26 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))
          return 0;
      }
      else
      {
        v36 = *v26;
        *((_QWORD *)a2 + 1) = v26 + 1;
      }
      v27 = *((_DWORD *)a2 + 14);
      v28 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v27 + 1;
      if (v27 >= v28)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(v18, a2)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v29 = *((_DWORD *)a2 + 14);
      v30 = __OFSUB__(v29, 1);
      v31 = v29 - 1;
      if (v31 < 0 == v30)
        *((_DWORD *)a2 + 14) = v31;
      v22 = (_BYTE *)*((_QWORD *)a2 + 1);
      v19 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v22 >= v19)
        goto LABEL_2;
      v32 = *v22;
    }
    while (v32 == 26);
    if (v32 != 32)
      continue;
    v20 = v22 + 1;
    *((_QWORD *)a2 + 1) = v20;
    if ((unint64_t)v20 >= v19)
      break;
LABEL_53:
    if ((char)*v20 < 0)
      break;
    *v7 = *v20;
    v33 = (char *)(v20 + 1);
    *((_QWORD *)a2 + 1) = v33;
    *((_DWORD *)this + 13) |= 8u;
    if (v33 == (char *)v19)
      goto LABEL_58;
  }
LABEL_56:
  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
  if ((_DWORD)result)
  {
    v35 = *((_QWORD *)a2 + 1);
    v34 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 13) |= 8u;
    if (v35 != v34)
      goto LABEL_2;
LABEL_58:
    if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
      goto LABEL_2;
    *((_DWORD *)a2 + 8) = 0;
    result = 1;
    *((_BYTE *)a2 + 36) = 1;
  }
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
    if (*(int *)(v5 + 24) < 1)
      goto LABEL_9;
LABEL_7:
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
    goto LABEL_9;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(int *)(v5 + 24) >= 1)
    goto LABEL_7;
LABEL_9:
  if ((*(_BYTE *)(v5 + 52) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 40), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::ByteSize(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;

  LOBYTE(v2) = *((_BYTE *)this + 52);
  if (!(_BYTE)v2)
  {
    v6 = *((_DWORD *)this + 6);
    v5 = v6;
    if (v6 < 1)
      goto LABEL_35;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_4;
LABEL_13:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v8 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      if ((*((_DWORD *)this + 13) & 8) != 0)
        goto LABEL_17;
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0)
        goto LABEL_17;
    }
LABEL_5:
    v4 = *((_DWORD *)this + 6);
    v5 = (v4 + v3);
    if (v4 < 1)
      goto LABEL_35;
    goto LABEL_18;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v7 >= 0x80)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_4:
  if ((v2 & 8) == 0)
    goto LABEL_5;
LABEL_17:
  v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 5));
  v10 = *((_DWORD *)this + 6);
  v5 = (v10 + v3 + v9 + 1);
  if (v10 >= 1)
  {
LABEL_18:
    for (i = 0; i < *((int *)this + 6); ++i)
    {
      while (1)
      {
        v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
        if (!*(_BYTE *)(v13 + 20))
        {
          LODWORD(v12) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          goto LABEL_20;
        }
        if ((*(_BYTE *)(v13 + 20) & 1) != 0)
          break;
        v12 = 0;
        if ((*(_BYTE *)(v13 + 20) & 2) == 0)
          goto LABEL_24;
LABEL_30:
        v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 12);
        if (v15 < 0x80)
        {
          v12 = (v12 + 2);
          *(_DWORD *)(v13 + 16) = v12;
          if (v12 >= 0x80)
            goto LABEL_34;
          goto LABEL_20;
        }
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15)
            + 1
            + v12;
        *(_DWORD *)(v13 + 16) = v12;
        if (v12 < 0x80)
          goto LABEL_20;
LABEL_34:
        v5 = (_DWORD)v12
           + (_DWORD)v5
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
        if (++i >= *((int *)this + 6))
          goto LABEL_35;
      }
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 8);
      if (v14 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
        if ((*(_DWORD *)(v13 + 20) & 2) != 0)
          goto LABEL_30;
      }
      else
      {
        v12 = 2;
        if ((*(_BYTE *)(v13 + 20) & 2) != 0)
          goto LABEL_30;
      }
LABEL_24:
      *(_DWORD *)(v13 + 16) = v12;
      if (v12 >= 0x80)
        goto LABEL_34;
LABEL_20:
      v5 = (v12 + v5 + 1);
    }
  }
LABEL_35:
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void awd::metrics::CommCenterPowerTransitionSuccess::CopyFrom(awd::metrics::CommCenterPowerTransitionSuccess *this, const awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerTransitionSuccess *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterPowerTransitionSuccess::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::IsInitialized(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  return 1;
}

awd::metrics::CommCenterPowerTransitionSuccess *awd::metrics::CommCenterPowerTransitionSuccess::Swap(awd::metrics::CommCenterPowerTransitionSuccess *this, awd::metrics::CommCenterPowerTransitionSuccess *a2)
{
  awd::metrics::CommCenterPowerTransitionSuccess *v3;
  int v4;
  int v5;
  uint64_t v6;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    v5 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    this = (awd::metrics::CommCenterPowerTransitionSuccess *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v6 = *((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

double awd::metrics::CommCenterPowerTransitionSuccess::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF746480;
  strcpy(v3, "awd.metrics.CommCenterPowerTransitionSuccess");
  return *(double *)"ransitionSuccess";
}

_QWORD *awd::metrics::CommCenterPowerTransitionFailure::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

awd::metrics::CommCenterPowerTransitionFailure *awd::metrics::CommCenterPowerTransitionFailure::CommCenterPowerTransitionFailure(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_1E7921CF8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  return this;
}

{
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = off_1E7921CF8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  return this;
}

void sub_1BF71C22C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 16);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  uint64_t v4;
  awd::metrics::CommCenterPowerVotingRecord *v5;
  uint64_t v6;
  uint64_t v7;
  const awd::metrics::CommCenterPowerVotingRecord *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  _BYTE v16[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    v4 = 0;
    do
    {
      while (1)
      {
        v8 = *(const awd::metrics::CommCenterPowerVotingRecord **)(*((_QWORD *)a2 + 2) + 8 * v4);
        v9 = *((_DWORD *)this + 7);
        v10 = *((int *)this + 6);
        if ((int)v10 >= v9)
          break;
        v11 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v10 + 1;
        awd::metrics::CommCenterPowerVotingRecord::MergeFrom(*(awd::metrics::CommCenterPowerVotingRecord **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 6))
          goto LABEL_11;
      }
      if (v9 == *((_DWORD *)this + 8))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16));
        v9 = *((_DWORD *)this + 7);
      }
      *((_DWORD *)this + 7) = v9 + 1;
      v5 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)v5 = off_1E7921C08;
      v6 = *((_QWORD *)this + 2);
      v7 = *((int *)this + 6);
      *((_DWORD *)this + 6) = v7 + 1;
      *(_QWORD *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterPowerVotingRecord::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 6));
  }
LABEL_11:
  LOBYTE(v12) = *((_BYTE *)a2 + 52);
  if ((_BYTE)v12)
  {
    if ((*((_BYTE *)a2 + 52) & 1) != 0)
    {
      v14 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 13) |= 1u;
      *((_DWORD *)this + 2) = v14;
      v12 = *((_DWORD *)a2 + 13);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 8) == 0)
          return;
        goto LABEL_15;
      }
    }
    else if ((*((_BYTE *)a2 + 52) & 2) == 0)
    {
      goto LABEL_14;
    }
    v15 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 13) |= 2u;
    *((_DWORD *)this + 3) = v15;
    if ((*((_DWORD *)a2 + 13) & 8) == 0)
      return;
LABEL_15:
    v13 = *((_QWORD *)a2 + 5);
    *((_DWORD *)this + 13) |= 8u;
    *((_QWORD *)this + 5) = v13;
  }
}

void sub_1BF71C404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71C418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71C470(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;

  v3 = *(_DWORD *)(v1 + 28);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(v1 + 28);
      }
    }
  }
  v6 = *(void **)(v1 + 16);
  if (v6)
    operator delete[](v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterPowerTransitionFailure::~CommCenterPowerTransitionFailure(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7921CF8;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7921CF8;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E7921CF8;
  v2 = *((_DWORD *)this + 7);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 7);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 2);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v6);
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::default_instance(awd::metrics::CommCenterPowerTransitionFailure *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterPowerTransitionFailure::default_instance_;
  if (!awd::metrics::CommCenterPowerTransitionFailure::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterPowerTransitionFailure::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterPowerTransitionFailure::New(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  _QWORD *result;

  result = operator new(0x38uLL);
  result[5] = 0;
  result[6] = 0;
  *result = off_1E7921CF8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 52))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 40) = 0;
  }
  if (*(int *)(this + 24) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  *(_DWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::MergePartialFromCodedStream(awd::metrics::CommCenterPowerTransitionFailure *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v6;
  unint64_t *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  awd::metrics::CommCenterPowerVotingRecord *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t result;
  _BYTE *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = (awd::metrics::CommCenterPowerTransitionFailure *)((char *)this + 16);
  v7 = (unint64_t *)((char *)this + 40);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 13) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
        goto LABEL_30;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
LABEL_30:
        if (*v14 < 0)
        {
LABEL_33:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v22 = (_BYTE *)*((_QWORD *)a2 + 1);
          v23 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v23)
            continue;
        }
        else
        {
          *v5 = *v14;
          v22 = v14 + 1;
          *((_QWORD *)a2 + 1) = v22;
          *((_DWORD *)this + 13) |= 2u;
          if ((unint64_t)v22 >= v11)
            continue;
        }
        if (*v22 != 26)
          continue;
        break;
      case 3u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_21;
        v15 = *((_DWORD *)this + 7);
        v16 = *((int *)this + 6);
        if ((int)v16 < v15)
          goto LABEL_19;
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v20 >= v19)
          goto LABEL_56;
        goto LABEL_53;
      default:
        v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
    do
    {
      *((_QWORD *)a2 + 1) = v22 + 1;
      v15 = *((_DWORD *)this + 7);
      v16 = *((int *)this + 6);
      if ((int)v16 < v15)
      {
LABEL_19:
        v17 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v16 + 1;
        v18 = *(awd::metrics::CommCenterPowerVotingRecord **)(v17 + 8 * v16);
      }
      else
      {
LABEL_37:
        if (v15 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
          v15 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v15 + 1;
        v18 = (awd::metrics::CommCenterPowerVotingRecord *)operator new(0x18uLL);
        *((_QWORD *)v18 + 1) = 0;
        *((_QWORD *)v18 + 2) = 0;
        *(_QWORD *)v18 = off_1E7921C08;
        v24 = *((_QWORD *)this + 2);
        v25 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v25 + 1;
        *(_QWORD *)(v24 + 8 * v25) = v18;
      }
      v36 = -1431655766;
      v26 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))
          return 0;
      }
      else
      {
        v36 = *v26;
        *((_QWORD *)a2 + 1) = v26 + 1;
      }
      v27 = *((_DWORD *)a2 + 14);
      v28 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v27 + 1;
      if (v27 >= v28)
        return 0;
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!awd::metrics::CommCenterPowerVotingRecord::MergePartialFromCodedStream(v18, a2)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      v29 = *((_DWORD *)a2 + 14);
      v30 = __OFSUB__(v29, 1);
      v31 = v29 - 1;
      if (v31 < 0 == v30)
        *((_DWORD *)a2 + 14) = v31;
      v22 = (_BYTE *)*((_QWORD *)a2 + 1);
      v19 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v22 >= v19)
        goto LABEL_2;
      v32 = *v22;
    }
    while (v32 == 26);
    if (v32 != 32)
      continue;
    v20 = v22 + 1;
    *((_QWORD *)a2 + 1) = v20;
    if ((unint64_t)v20 >= v19)
      break;
LABEL_53:
    if ((char)*v20 < 0)
      break;
    *v7 = *v20;
    v33 = (char *)(v20 + 1);
    *((_QWORD *)a2 + 1) = v33;
    *((_DWORD *)this + 13) |= 8u;
    if (v33 == (char *)v19)
      goto LABEL_58;
  }
LABEL_56:
  result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v7);
  if ((_DWORD)result)
  {
    v35 = *((_QWORD *)a2 + 1);
    v34 = *((_QWORD *)a2 + 2);
    *((_DWORD *)this + 13) |= 8u;
    if (v35 != v34)
      goto LABEL_2;
LABEL_58:
    if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
      goto LABEL_2;
    *((_DWORD *)a2 + 8) = 0;
    result = 1;
    *((_BYTE *)a2 + 36) = 1;
  }
  return result;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 52);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
    if (*(int *)(v5 + 24) < 1)
      goto LABEL_9;
LABEL_7:
    v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
    goto LABEL_9;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if (*(int *)(v5 + 24) >= 1)
    goto LABEL_7;
LABEL_9:
  if ((*(_BYTE *)(v5 + 52) & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_QWORD *)(v5 + 40), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::ByteSize(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  int v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;

  LOBYTE(v2) = *((_BYTE *)this + 52);
  if (!(_BYTE)v2)
  {
    v6 = *((_DWORD *)this + 6);
    v5 = v6;
    if (v6 < 1)
      goto LABEL_35;
    goto LABEL_18;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_4;
LABEL_13:
    v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v8 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8) + 1;
      if ((*((_DWORD *)this + 13) & 8) != 0)
        goto LABEL_17;
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0)
        goto LABEL_17;
    }
LABEL_5:
    v4 = *((_DWORD *)this + 6);
    v5 = (v4 + v3);
    if (v4 < 1)
      goto LABEL_35;
    goto LABEL_18;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
  if (v7 >= 0x80)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    v2 = *((_DWORD *)this + 13);
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    v3 = 2;
    if ((v2 & 2) != 0)
      goto LABEL_13;
  }
LABEL_4:
  if ((v2 & 8) == 0)
    goto LABEL_5;
LABEL_17:
  v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 5));
  v10 = *((_DWORD *)this + 6);
  v5 = (v10 + v3 + v9 + 1);
  if (v10 >= 1)
  {
LABEL_18:
    for (i = 0; i < *((int *)this + 6); ++i)
    {
      while (1)
      {
        v13 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
        if (!*(_BYTE *)(v13 + 20))
        {
          LODWORD(v12) = 0;
          *(_DWORD *)(v13 + 16) = 0;
          goto LABEL_20;
        }
        if ((*(_BYTE *)(v13 + 20) & 1) != 0)
          break;
        v12 = 0;
        if ((*(_BYTE *)(v13 + 20) & 2) == 0)
          goto LABEL_24;
LABEL_30:
        v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 12);
        if (v15 < 0x80)
        {
          v12 = (v12 + 2);
          *(_DWORD *)(v13 + 16) = v12;
          if (v12 >= 0x80)
            goto LABEL_34;
          goto LABEL_20;
        }
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15)
            + 1
            + v12;
        *(_DWORD *)(v13 + 16) = v12;
        if (v12 < 0x80)
          goto LABEL_20;
LABEL_34:
        v5 = (_DWORD)v12
           + (_DWORD)v5
           + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
        if (++i >= *((int *)this + 6))
          goto LABEL_35;
      }
      v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v13 + 8);
      if (v14 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14) + 1;
        if ((*(_DWORD *)(v13 + 20) & 2) != 0)
          goto LABEL_30;
      }
      else
      {
        v12 = 2;
        if ((*(_BYTE *)(v13 + 20) & 2) != 0)
          goto LABEL_30;
      }
LABEL_24:
      *(_DWORD *)(v13 + 16) = v12;
      if (v12 >= 0x80)
        goto LABEL_34;
LABEL_20:
      v5 = (v12 + v5 + 1);
    }
  }
LABEL_35:
  *((_DWORD *)this + 12) = v5;
  return v5;
}

void awd::metrics::CommCenterPowerTransitionFailure::CopyFrom(awd::metrics::CommCenterPowerTransitionFailure *this, const awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterPowerTransitionFailure *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterPowerTransitionFailure::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::IsInitialized(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  return 1;
}

awd::metrics::CommCenterPowerTransitionFailure *awd::metrics::CommCenterPowerTransitionFailure::Swap(awd::metrics::CommCenterPowerTransitionFailure *this, awd::metrics::CommCenterPowerTransitionFailure *a2)
{
  awd::metrics::CommCenterPowerTransitionFailure *v3;
  int v4;
  int v5;
  uint64_t v6;

  if (a2 != this)
  {
    v3 = this;
    v4 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    v5 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    this = (awd::metrics::CommCenterPowerTransitionFailure *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v6 = *((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

double awd::metrics::CommCenterPowerTransitionFailure::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF746480;
  strcpy(v3, "awd.metrics.CommCenterPowerTransitionFailure");
  return *(double *)"ransitionFailure";
}

_QWORD *awd::metrics::CommCenterMissedMTMessage::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

awd::metrics::CommCenterMissedMTMessage *awd::metrics::CommCenterMissedMTMessage::CommCenterMissedMTMessage(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  *(_QWORD *)this = off_1E7921D70;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E7921D70;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  return this;
}

void sub_1BF71CF08(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterMissedMTMessage::MergeFrom(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BYTE v9[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 1u;
      *((_DWORD *)this + 2) = v6;
      v4 = *((_DWORD *)a2 + 7);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*((_BYTE *)a2 + 28) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 3);
    *((_DWORD *)this + 7) |= 2u;
    *((_DWORD *)this + 3) = v7;
    v4 = *((_DWORD *)a2 + 7);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v8 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 7) |= 4u;
    *((_DWORD *)this + 4) = v8;
    if ((*((_DWORD *)a2 + 7) & 8) == 0)
      return;
LABEL_8:
    v5 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 7) |= 8u;
    *((_DWORD *)this + 5) = v5;
  }
}

void sub_1BF71D00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71D020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71D068(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterMissedMTMessage::~CommCenterMissedMTMessage(awd::metrics::CommCenterMissedMTMessage *this)
{
  *(_QWORD *)this = off_1E7921D70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E7921D70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E7921D70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::default_instance(awd::metrics::CommCenterMissedMTMessage *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterMissedMTMessage::default_instance_;
  if (!awd::metrics::CommCenterMissedMTMessage::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterMissedMTMessage::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterMissedMTMessage::New(awd::metrics::CommCenterMissedMTMessage *this)
{
  _QWORD *result;

  result = operator new(0x20uLL);
  *result = off_1E7921D70;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 28))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::MergePartialFromCodedStream(awd::metrics::CommCenterMissedMTMessage *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v4 = (unsigned int *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 12);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (unsigned int *)((char *)this + 20);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
        goto LABEL_30;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
LABEL_30:
        if ((*v14 & 0x80000000) == 0)
        {
          *v5 = *v14;
          v17 = v14 + 1;
          *((_QWORD *)a2 + 1) = v17;
          *((_DWORD *)this + 7) |= 2u;
          if ((unint64_t)v17 < v11)
            goto LABEL_35;
          continue;
        }
LABEL_33:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 7) |= 2u;
        if ((unint64_t)v17 >= v11)
          continue;
LABEL_35:
        if (*v17 != 24)
          continue;
        v15 = v17 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11)
          goto LABEL_40;
LABEL_37:
        if ((*v15 & 0x80000000) == 0)
        {
          *v6 = *v15;
          v18 = v15 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 7) |= 4u;
          if ((unint64_t)v18 < v11)
            goto LABEL_42;
          continue;
        }
LABEL_40:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!(_DWORD)result)
          return result;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 7) |= 4u;
        if ((unint64_t)v18 >= v11)
          continue;
LABEL_42:
        if (*v18 != 32)
          continue;
        v16 = v18 + 1;
        *((_QWORD *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v11)
          goto LABEL_47;
LABEL_44:
        if ((*v16 & 0x80000000) == 0)
        {
          *v7 = *v16;
          v19 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)a2 + 1) = v19;
          *((_DWORD *)this + 7) |= 8u;
          if (v19 == (unsigned __int8 *)v11)
            goto LABEL_49;
          continue;
        }
LABEL_47:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
        if (!(_DWORD)result)
          return result;
        v21 = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 7) |= 8u;
        if (v21 != v20)
          continue;
LABEL_49:
        if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_40;
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v11)
          goto LABEL_47;
        goto LABEL_44;
      default:
        v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
  }
}

unsigned int *awd::metrics::CommCenterMissedMTMessage::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = this;
  v6 = this[7];
  if ((v6 & 1) != 0)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (uint64_t)a2, a4);
    v6 = v5[7];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], (uint64_t)a2, a4);
  v6 = v5[7];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], (uint64_t)a2, a4);
  }
LABEL_8:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], (uint64_t)a2, a4);
  if ((v5[7] & 8) != 0)
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterMissedMTMessage::ByteSize(awd::metrics::CommCenterMissedMTMessage *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  uint64_t v10;

  LOBYTE(v2) = *((_BYTE *)this + 28);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v5 >= 0x80)
    {
      v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      v2 = *((_DWORD *)this + 7);
      if ((v2 & 2) == 0)
        goto LABEL_15;
    }
    else
    {
      v3 = 2;
      if ((v2 & 2) == 0)
        goto LABEL_15;
    }
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 28) & 2) == 0)
      goto LABEL_15;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    v2 = *((_DWORD *)this + 7);
  }
  else
  {
    v7 = 2;
  }
  v3 = (v7 + v3);
LABEL_15:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0)
      goto LABEL_22;
LABEL_6:
    *((_DWORD *)this + 6) = v3;
    return v3;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v8 < 0x80)
  {
    v3 = (v3 + 2);
    if ((v2 & 8) != 0)
      goto LABEL_22;
    goto LABEL_6;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
     + 1
     + v3;
  if ((*((_DWORD *)this + 7) & 8) == 0)
    goto LABEL_6;
LABEL_22:
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v9 >= 0x80)
    v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9)
        + 1
        + v3;
  else
    v10 = (v3 + 2);
  *((_DWORD *)this + 6) = v10;
  return v10;
}

void awd::metrics::CommCenterMissedMTMessage::CopyFrom(awd::metrics::CommCenterMissedMTMessage *this, const awd::metrics::CommCenterMissedMTMessage *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterMissedMTMessage *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterMissedMTMessage::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterMissedMTMessage::IsInitialized(awd::metrics::CommCenterMissedMTMessage *this)
{
  return 1;
}

awd::metrics::CommCenterMissedMTMessage *awd::metrics::CommCenterMissedMTMessage::Swap(awd::metrics::CommCenterMissedMTMessage *this, awd::metrics::CommCenterMissedMTMessage *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (a2 != this)
  {
    v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    v4 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v5;
    v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
    v7 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v7;
  }
  return this;
}

char *awd::metrics::CommCenterMissedMTMessage::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF746490;
  strcpy(result, "awd.metrics.CommCenterMissedMTMessage");
  return result;
}

_QWORD *awd::metrics::CommCenterLowPowerEvent::SharedCtor(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = MEMORY[0x1E0DE8338];
  this[4] = 0;
  return this;
}

awd::metrics::CommCenterLowPowerEvent *awd::metrics::CommCenterLowPowerEvent::CommCenterLowPowerEvent(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E7921DE8;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E7921DE8;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  *((_QWORD *)this + 4) = 0;
  awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  return this;
}

void sub_1BF71D798(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerEvent::MergeFrom(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  void **v8;
  void **v9;
  char v10;
  __int128 v11;
  void *v12;
  size_t v13;
  char v14[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 36);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 36) & 1) != 0)
    {
      v5 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((_QWORD *)this + 1) = v5;
      v4 = *((_DWORD *)a2 + 9);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_11;
      }
    }
    else if ((*((_BYTE *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    v6 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 9) |= 2u;
    *((_DWORD *)this + 4) = v6;
    v4 = *((_DWORD *)a2 + 9);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        return;
LABEL_12:
      v8 = (void **)*((_QWORD *)a2 + 3);
      *((_DWORD *)this + 9) |= 8u;
      v9 = (void **)*((_QWORD *)this + 3);
      if (v9 == (void **)MEMORY[0x1E0DE8338])
      {
        v9 = (void **)operator new(0x18uLL);
        v9[1] = 0;
        v9[2] = 0;
        *v9 = 0;
        *((_QWORD *)this + 3) = v9;
      }
      if (v9 != v8)
      {
        v10 = *((_BYTE *)v8 + 23);
        if (*((char *)v9 + 23) < 0)
        {
          if (v10 >= 0)
            v12 = v8;
          else
            v12 = *v8;
          if (v10 >= 0)
            v13 = *((unsigned __int8 *)v8 + 23);
          else
            v13 = (size_t)v8[1];
          std::string::__assign_no_alias<false>(v9, v12, v13);
        }
        else if ((*((_BYTE *)v8 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v9, *v8, (size_t)v8[1]);
        }
        else
        {
          v11 = *(_OWORD *)v8;
          v9[2] = v8[2];
          *(_OWORD *)v9 = v11;
        }
      }
      return;
    }
LABEL_11:
    v7 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 9) |= 4u;
    *((_DWORD *)this + 5) = v7;
    if ((*((_DWORD *)a2 + 9) & 8) == 0)
      return;
    goto LABEL_12;
  }
}

void sub_1BF71D934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71D948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71D99C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerEvent::~CommCenterLowPowerEvent(awd::metrics::CommCenterLowPowerEvent *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E7921DE8;
  v2 = *((_QWORD *)this + 3);
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E7921DE8;
  v2 = *((_QWORD *)this + 3);
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t v2;
  void *v4;

  *(_QWORD *)this = off_1E7921DE8;
  v2 = *((_QWORD *)this + 3);
  if (v2 != MEMORY[0x1E0DE8338] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    operator delete((void *)v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v4);
}

void awd::metrics::CommCenterLowPowerEvent::SharedDtor(awd::metrics::CommCenterLowPowerEvent *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1 != MEMORY[0x1E0DE8338] && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      operator delete(*(void **)v1);
      operator delete((void *)v1);
    }
    else
    {
      operator delete(*((void **)this + 3));
    }
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::default_instance(awd::metrics::CommCenterLowPowerEvent *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterLowPowerEvent::default_instance_;
  if (!awd::metrics::CommCenterLowPowerEvent::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterLowPowerEvent::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterLowPowerEvent::New(awd::metrics::CommCenterLowPowerEvent *this)
{
  _QWORD *result;
  uint64_t v2;

  result = operator new(0x28uLL);
  v2 = MEMORY[0x1E0DE8338];
  *result = off_1E7921DE8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v2;
  result[4] = 0;
  return result;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;

  v1 = *(_BYTE *)(this + 36);
  if (!v1)
    goto LABEL_6;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  if ((v1 & 8) == 0)
    goto LABEL_6;
  v2 = *(_QWORD *)(this + 24);
  if (v2 == MEMORY[0x1E0DE8338])
    goto LABEL_6;
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
LABEL_6:
    *(_DWORD *)(this + 36) = 0;
    return this;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::MergePartialFromCodedStream(awd::metrics::CommCenterLowPowerEvent *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t result;
  _BYTE *v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 < v11 && (*v12 & 0x80000000) == 0)
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
          goto LABEL_33;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if ((_DWORD)result)
        {
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
LABEL_33:
          if (*v13 != 16)
            continue;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
          if ((unint64_t)v14 >= v11)
            goto LABEL_38;
          goto LABEL_35;
        }
        break;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_38;
LABEL_35:
        if (*v14 < 0)
        {
LABEL_38:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v18 >= v11)
            continue;
        }
        else
        {
          *v5 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 9) |= 2u;
          if ((unint64_t)v18 >= v11)
            continue;
        }
        if (*v18 != 24)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11)
          goto LABEL_45;
LABEL_42:
        if (*v15 < 0)
        {
LABEL_45:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v19 = (_BYTE *)*((_QWORD *)a2 + 1);
          v21 = *((_QWORD *)a2 + 2);
          v20 = *((_DWORD *)this + 9) | 4;
          *((_DWORD *)this + 9) = v20;
          if ((unint64_t)v19 >= v21)
            continue;
        }
        else
        {
          *v6 = *v15;
          v19 = v15 + 1;
          *((_QWORD *)a2 + 1) = v19;
          v20 = *((_DWORD *)this + 9) | 4;
          *((_DWORD *)this + 9) = v20;
          if ((unint64_t)v19 >= v11)
            continue;
        }
        if (*v19 == 34)
        {
          *((_QWORD *)a2 + 1) = v19 + 1;
          *((_DWORD *)this + 9) = v20 | 8;
          if (*((_QWORD *)this + 3) == v7)
          {
LABEL_22:
            v16 = operator new(0x18uLL);
            v16[1] = 0;
            v16[2] = 0;
            *v16 = 0;
            *((_QWORD *)this + 3) = v16;
          }
LABEL_23:
          result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
          if (!(_DWORD)result)
            return result;
          if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
        }
        continue;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_28;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_45;
        goto LABEL_42;
      case 4u:
        v10 = TagFallback & 7;
        if (v10 != 2)
          goto LABEL_28;
        *((_DWORD *)this + 9) |= 8u;
        if (*((_QWORD *)this + 3) == v7)
          goto LABEL_22;
        goto LABEL_23;
      default:
        v10 = TagFallback & 7;
LABEL_28:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
    return result;
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = v5[9];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  v6 = v5[9];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  if ((v5[9] & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::ByteSize(awd::metrics::CommCenterLowPowerEvent *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;

  LOBYTE(v2) = *((_BYTE *)this + 36);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 36) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 9);
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 36) & 2) == 0)
      goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 9);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0)
      goto LABEL_19;
LABEL_6:
    *((_DWORD *)this + 8) = v3;
    return v3;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 < 0x80)
  {
    v3 = (v3 + 2);
    if ((v2 & 8) != 0)
      goto LABEL_19;
    goto LABEL_6;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
     + 1
     + v3;
  if ((*((_DWORD *)this + 9) & 8) == 0)
    goto LABEL_6;
LABEL_19:
  v8 = *((_QWORD *)this + 3);
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = v9;
  v11 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = v11;
  if (v12 >= 0x80)
  {
    v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v12);
    v9 = *(unsigned __int8 *)(v8 + 23);
    v11 = *(_QWORD *)(v8 + 8);
    v10 = *(_BYTE *)(v8 + 23);
  }
  else
  {
    v13 = 1;
  }
  if (v10 < 0)
    v9 = v11;
  v14 = v3 + v13 + v9;
  *((_DWORD *)this + 8) = v14 + 1;
  return (v14 + 1);
}

void awd::metrics::CommCenterLowPowerEvent::CopyFrom(awd::metrics::CommCenterLowPowerEvent *this, const awd::metrics::CommCenterLowPowerEvent *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterLowPowerEvent *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterLowPowerEvent::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterLowPowerEvent::IsInitialized(awd::metrics::CommCenterLowPowerEvent *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterLowPowerEvent::Swap(uint64_t this, awd::metrics::CommCenterLowPowerEvent *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2 != (awd::metrics::CommCenterLowPowerEvent *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    v3 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

char *awd::metrics::CommCenterLowPowerEvent::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF742FF0;
  strcpy(result, "awd.metrics.CommCenterLowPowerEvent");
  return result;
}

uint64_t awd::metrics::CommCenterWakeInfo::SharedCtor(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

awd::metrics::CommCenterWakeInfo *awd::metrics::CommCenterWakeInfo::CommCenterWakeInfo(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  *(_QWORD *)this = off_1E7921E60;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E7921E60;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  return this;
}

void sub_1BF71E264(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeInfo::MergeFrom(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE v9[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v4)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      *((_QWORD *)this + 1) = v6;
      v4 = *((_DWORD *)a2 + 8);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0)
          goto LABEL_7;
        goto LABEL_12;
      }
    }
    else if ((*((_BYTE *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    v7 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 8) |= 2u;
    *((_DWORD *)this + 4) = v7;
    v4 = *((_DWORD *)a2 + 8);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0)
        return;
      goto LABEL_8;
    }
LABEL_12:
    v8 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 8) |= 4u;
    *((_DWORD *)this + 5) = v8;
    if ((*((_DWORD *)a2 + 8) & 8) == 0)
      return;
LABEL_8:
    v5 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 8) |= 8u;
    *((_DWORD *)this + 6) = v5;
  }
}

void sub_1BF71E368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71E37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71E3C8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeInfo::~CommCenterWakeInfo(awd::metrics::CommCenterWakeInfo *this)
{
  *(_QWORD *)this = off_1E7921E60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E7921E60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v1;

  *(_QWORD *)this = off_1E7921E60;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v1);
}

uint64_t awd::metrics::CommCenterWakeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::default_instance(awd::metrics::CommCenterWakeInfo *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterWakeInfo::default_instance_;
  if (!awd::metrics::CommCenterWakeInfo::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterWakeInfo::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterWakeInfo::New(awd::metrics::CommCenterWakeInfo *this)
{
  _QWORD *result;

  result = operator new(0x28uLL);
  *result = off_1E7921E60;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  *((_DWORD *)result + 8) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeInfo::Clear(uint64_t this)
{
  if (*(_BYTE *)(this + 32))
  {
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::MergePartialFromCodedStream(awd::metrics::CommCenterWakeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  char *v8;
  uint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 16);
  v6 = (unsigned int *)((char *)this + 20);
  v7 = (unsigned int *)((char *)this + 24);
  while (2)
  {
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v13 = (_BYTE *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        else
        {
          *v4 = *v12;
          v13 = v12 + 1;
          *((_QWORD *)a2 + 1) = v13;
          *((_DWORD *)this + 8) |= 1u;
          if ((unint64_t)v13 >= v11)
            continue;
        }
        if (*v13 != 16)
          continue;
        v14 = v13 + 1;
        *((_QWORD *)a2 + 1) = v14;
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
        goto LABEL_30;
      case 2u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 >= v11)
          goto LABEL_33;
LABEL_30:
        if ((*v14 & 0x80000000) == 0)
        {
          *v5 = *v14;
          v17 = v14 + 1;
          *((_QWORD *)a2 + 1) = v17;
          *((_DWORD *)this + 8) |= 2u;
          if ((unint64_t)v17 < v11)
            goto LABEL_35;
          continue;
        }
LABEL_33:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
        if (!(_DWORD)result)
          return result;
        v17 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 8) |= 2u;
        if ((unint64_t)v17 >= v11)
          continue;
LABEL_35:
        if (*v17 != 24)
          continue;
        v15 = v17 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v11)
          goto LABEL_40;
LABEL_37:
        if ((*v15 & 0x80000000) == 0)
        {
          *v6 = *v15;
          v18 = v15 + 1;
          *((_QWORD *)a2 + 1) = v18;
          *((_DWORD *)this + 8) |= 4u;
          if ((unint64_t)v18 < v11)
            goto LABEL_42;
          continue;
        }
LABEL_40:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
        if (!(_DWORD)result)
          return result;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 8) |= 4u;
        if ((unint64_t)v18 >= v11)
          continue;
LABEL_42:
        if (*v18 != 32)
          continue;
        v16 = v18 + 1;
        *((_QWORD *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v11)
          goto LABEL_47;
LABEL_44:
        if ((*v16 & 0x80000000) == 0)
        {
          *v7 = *v16;
          v19 = (unsigned __int8 *)(v16 + 1);
          *((_QWORD *)a2 + 1) = v19;
          *((_DWORD *)this + 8) |= 8u;
          if (v19 == (unsigned __int8 *)v11)
            goto LABEL_49;
          continue;
        }
LABEL_47:
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
        if (!(_DWORD)result)
          return result;
        v21 = *((_QWORD *)a2 + 1);
        v20 = *((_QWORD *)a2 + 2);
        *((_DWORD *)this + 8) |= 8u;
        if (v21 != v20)
          continue;
LABEL_49:
        if (!*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          continue;
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      case 3u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v15 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v11)
          goto LABEL_40;
        goto LABEL_37;
      case 4u:
        v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_21;
        v16 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v11)
          goto LABEL_47;
        goto LABEL_44;
      default:
        v10 = TagFallback & 7;
LABEL_21:
        if (v10 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
  }
}

uint64_t awd::metrics::CommCenterWakeInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  unsigned int *v5;
  unsigned int v6;

  v5 = (unsigned int *)this;
  v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[4], (uint64_t)a2, a4);
  v6 = v5[8];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], (uint64_t)a2, a4);
  }
LABEL_8:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  if ((v5[8] & 8) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterWakeInfo::ByteSize(awd::metrics::CommCenterWakeInfo *this)
{
  int v2;
  uint64_t v3;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  uint64_t v9;

  LOBYTE(v2) = *((_BYTE *)this + 32);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 32) & 2) == 0)
      goto LABEL_12;
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v5 >= 0x80)
  {
    v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    v2 = *((_DWORD *)this + 8);
  }
  else
  {
    v6 = 2;
  }
  v3 = (v6 + v3);
LABEL_12:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) != 0)
      goto LABEL_19;
LABEL_6:
    *((_DWORD *)this + 7) = v3;
    return v3;
  }
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
  if (v7 < 0x80)
  {
    v3 = (v3 + 2);
    if ((v2 & 8) != 0)
      goto LABEL_19;
    goto LABEL_6;
  }
  v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7)
     + 1
     + v3;
  if ((*((_DWORD *)this + 8) & 8) == 0)
    goto LABEL_6;
LABEL_19:
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v8 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8)
       + 1
       + v3;
  else
    v9 = (v3 + 2);
  *((_DWORD *)this + 7) = v9;
  return v9;
}

void awd::metrics::CommCenterWakeInfo::CopyFrom(awd::metrics::CommCenterWakeInfo *this, const awd::metrics::CommCenterWakeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterWakeInfo *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterWakeInfo::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterWakeInfo::IsInitialized(awd::metrics::CommCenterWakeInfo *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterWakeInfo::Swap(uint64_t this, awd::metrics::CommCenterWakeInfo *a2)
{
  uint64_t v2;

  if (a2 != (awd::metrics::CommCenterWakeInfo *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
  }
  return this;
}

double awd::metrics::CommCenterWakeInfo::GetTypeName@<D0>(uint64_t a1@<X8>)
{
  char *v3;

  v3 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v3;
  *(_OWORD *)(a1 + 8) = xmmword_1BF73EFD0;
  strcpy(v3, "awd.metrics.CommCenterWakeInfo");
  return *(double *)"mmCenterWakeInfo";
}

double awd::metrics::CommCenterLowPowerStats::SharedCtor(awd::metrics::CommCenterLowPowerStats *this)
{
  double result;

  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

awd::metrics::CommCenterLowPowerStats *awd::metrics::CommCenterLowPowerStats::CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  *(_QWORD *)this = off_1E7921ED8;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  return this;
}

{
  *(_QWORD *)this = off_1E7921ED8;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  return this;
}

void sub_1BF71EB08(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::RepeatedPtrField<awd::metrics::CrashReasonType>::~RepeatedPtrField((uint64_t)v1 + 40);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerStats::MergeFrom(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  uint64_t v4;
  awd::metrics::CommCenterMissedMTMessage *v5;
  uint64_t v6;
  uint64_t v7;
  const awd::metrics::CommCenterMissedMTMessage *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BYTE v21[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterLowPowerStats *)((char *)this + 40));
  if (*((int *)a2 + 12) >= 1)
  {
    v4 = 0;
    do
    {
      while (1)
      {
        v8 = *(const awd::metrics::CommCenterMissedMTMessage **)(*((_QWORD *)a2 + 5) + 8 * v4);
        v9 = *((_DWORD *)this + 13);
        v10 = *((int *)this + 12);
        if ((int)v10 >= v9)
          break;
        v11 = *((_QWORD *)this + 5);
        *((_DWORD *)this + 12) = v10 + 1;
        awd::metrics::CommCenterMissedMTMessage::MergeFrom(*(awd::metrics::CommCenterMissedMTMessage **)(v11 + 8 * v10), v8);
        if (++v4 >= *((int *)a2 + 12))
          goto LABEL_11;
      }
      if (v9 == *((_DWORD *)this + 14))
      {
        wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((awd::metrics::CommCenterLowPowerStats *)((char *)this + 40));
        v9 = *((_DWORD *)this + 13);
      }
      *((_DWORD *)this + 13) = v9 + 1;
      v5 = (awd::metrics::CommCenterMissedMTMessage *)operator new(0x20uLL);
      *(_QWORD *)v5 = off_1E7921D70;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *((_QWORD *)v5 + 3) = 0;
      v6 = *((_QWORD *)this + 5);
      v7 = *((int *)this + 12);
      *((_DWORD *)this + 12) = v7 + 1;
      *(_QWORD *)(v6 + 8 * v7) = v5;
      awd::metrics::CommCenterMissedMTMessage::MergeFrom(v5, v8);
      ++v4;
    }
    while (v4 < *((int *)a2 + 12));
  }
LABEL_11:
  LOBYTE(v12) = *((_BYTE *)a2 + 72);
  if ((_BYTE)v12)
  {
    if ((*((_BYTE *)a2 + 72) & 1) != 0)
    {
      v14 = *((_QWORD *)a2 + 1);
      *((_DWORD *)this + 18) |= 1u;
      *((_QWORD *)this + 1) = v14;
      v12 = *((_DWORD *)a2 + 18);
      if ((v12 & 2) == 0)
      {
LABEL_14:
        if ((v12 & 4) == 0)
          goto LABEL_15;
        goto LABEL_24;
      }
    }
    else if ((*((_BYTE *)a2 + 72) & 2) == 0)
    {
      goto LABEL_14;
    }
    v15 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 18) |= 2u;
    *((_DWORD *)this + 4) = v15;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 4) == 0)
    {
LABEL_15:
      if ((v12 & 8) == 0)
        goto LABEL_16;
      goto LABEL_25;
    }
LABEL_24:
    v16 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 18) |= 4u;
    *((_DWORD *)this + 5) = v16;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 8) == 0)
    {
LABEL_16:
      if ((v12 & 0x10) == 0)
        goto LABEL_17;
      goto LABEL_26;
    }
LABEL_25:
    v17 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 18) |= 8u;
    *((_DWORD *)this + 6) = v17;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x10) == 0)
    {
LABEL_17:
      if ((v12 & 0x20) == 0)
        goto LABEL_18;
      goto LABEL_27;
    }
LABEL_26:
    v18 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 18) |= 0x10u;
    *((_DWORD *)this + 7) = v18;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x20) == 0)
    {
LABEL_18:
      if ((v12 & 0x40) == 0)
        goto LABEL_19;
      goto LABEL_28;
    }
LABEL_27:
    v19 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 18) |= 0x20u;
    *((_DWORD *)this + 8) = v19;
    v12 = *((_DWORD *)a2 + 18);
    if ((v12 & 0x40) == 0)
    {
LABEL_19:
      if ((v12 & 0x80) == 0)
        return;
      goto LABEL_20;
    }
LABEL_28:
    v20 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 18) |= 0x40u;
    *((_DWORD *)this + 9) = v20;
    if ((*((_DWORD *)a2 + 18) & 0x80) == 0)
      return;
LABEL_20:
    v13 = *((_DWORD *)a2 + 16);
    *((_DWORD *)this + 18) |= 0x80u;
    *((_DWORD *)this + 16) = v13;
  }
}

void sub_1BF71ED80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71ED94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF71EDFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;

  v3 = *(_DWORD *)(v1 + 52);
  if (v3 >= 1)
  {
    for (i = 0; i < v3; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * i);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *(_DWORD *)(v1 + 52);
      }
    }
  }
  v6 = *(void **)(v1 + 40);
  if (v6)
    operator delete[](v6);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterLowPowerStats::~CommCenterLowPowerStats(awd::metrics::CommCenterLowPowerStats *this)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7921ED8;
  v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 13);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E7921ED8;
  v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 13);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  int v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void *v6;

  *(_QWORD *)this = off_1E7921ED8;
  v2 = *((_DWORD *)this + 13);
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        v2 = *((_DWORD *)this + 13);
      }
    }
  }
  v5 = (void *)*((_QWORD *)this + 5);
  if (v5)
    operator delete[](v5);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v6);
}

uint64_t awd::metrics::CommCenterLowPowerStats::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::default_instance(awd::metrics::CommCenterLowPowerStats *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterLowPowerStats::default_instance_;
  if (!awd::metrics::CommCenterLowPowerStats::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterLowPowerStats::default_instance_;
  }
  return result;
}

double awd::metrics::CommCenterLowPowerStats::New(awd::metrics::CommCenterLowPowerStats *this)
{
  char *v1;
  double result;

  v1 = (char *)operator new(0x50uLL);
  *(_QWORD *)v1 = off_1E7921ED8;
  *((_QWORD *)v1 + 8) = 0;
  *((_DWORD *)v1 + 18) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *((_DWORD *)v1 + 14) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterLowPowerStats::Clear(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = this;
  if (*(_BYTE *)(this + 72))
  {
    *(_DWORD *)(this + 64) = 0;
    *(_OWORD *)(this + 8) = 0u;
    *(_OWORD *)(this + 24) = 0u;
  }
  if (*(int *)(this + 48) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 48));
  }
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::MergePartialFromCodedStream(awd::metrics::CommCenterLowPowerStats *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  char *v9;
  uint64_t TagFallback;
  int v11;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t result;
  _BYTE *v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;
  _BYTE *v27;
  _BYTE *v28;
  _BYTE *v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  awd::metrics::CommCenterMissedMTMessage *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  _BYTE *v43;
  unint64_t *v44;
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;

  v46 = (unsigned int *)((char *)this + 16);
  v47 = (unsigned int *)((char *)this + 20);
  v4 = (unsigned int *)((char *)this + 24);
  v5 = (unsigned int *)((char *)this + 28);
  v6 = (unsigned int *)((char *)this + 32);
  v7 = (unsigned int *)((char *)this + 36);
  v8 = (unsigned int *)((char *)this + 64);
  v44 = (unint64_t *)((char *)this + 8);
  v45 = (awd::metrics::CommCenterLowPowerStats *)((char *)this + 40);
LABEL_2:
  while (2)
  {
    v9 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v9 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v13 = (char *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v44);
          if (!(_DWORD)result)
            return result;
          v14 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v14 >= v12)
            continue;
        }
        else
        {
          *v44 = *v13;
          v14 = v13 + 1;
          *((_QWORD *)a2 + 1) = v14;
          *((_DWORD *)this + 18) |= 1u;
          if ((unint64_t)v14 >= v12)
            continue;
        }
        if (*v14 != 16)
          continue;
        v15 = v14 + 1;
        *((_QWORD *)a2 + 1) = v15;
        if ((unint64_t)v15 >= v12)
          goto LABEL_44;
        goto LABEL_41;
      case 2u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v15 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v15 >= v12)
          goto LABEL_44;
LABEL_41:
        if ((char)*v15 < 0)
        {
LABEL_44:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v46);
          if (!(_DWORD)result)
            return result;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 2u;
          if ((unint64_t)v23 < v12)
            goto LABEL_46;
          continue;
        }
        *v46 = *v15;
        v23 = v15 + 1;
        *((_QWORD *)a2 + 1) = v23;
        *((_DWORD *)this + 18) |= 2u;
        if ((unint64_t)v23 >= v12)
          continue;
LABEL_46:
        if (*v23 != 24)
          continue;
        v16 = v23 + 1;
        *((_QWORD *)a2 + 1) = v16;
        if ((unint64_t)v16 >= v12)
          goto LABEL_51;
LABEL_48:
        if ((char)*v16 < 0)
        {
LABEL_51:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v47);
          if (!(_DWORD)result)
            return result;
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 4u;
          if ((unint64_t)v24 < v12)
            goto LABEL_53;
          continue;
        }
        *v47 = *v16;
        v24 = v16 + 1;
        *((_QWORD *)a2 + 1) = v24;
        *((_DWORD *)this + 18) |= 4u;
        if ((unint64_t)v24 >= v12)
          continue;
LABEL_53:
        if (*v24 != 32)
          continue;
        v17 = v24 + 1;
        *((_QWORD *)a2 + 1) = v17;
        if ((unint64_t)v17 >= v12)
          goto LABEL_58;
LABEL_55:
        if ((char)*v17 < 0)
        {
LABEL_58:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!(_DWORD)result)
            return result;
          v25 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 8u;
          if ((unint64_t)v25 < v12)
            goto LABEL_60;
          continue;
        }
        *v4 = *v17;
        v25 = v17 + 1;
        *((_QWORD *)a2 + 1) = v25;
        *((_DWORD *)this + 18) |= 8u;
        if ((unint64_t)v25 >= v12)
          continue;
LABEL_60:
        if (*v25 != 40)
          continue;
        v18 = v25 + 1;
        *((_QWORD *)a2 + 1) = v18;
        if ((unint64_t)v18 >= v12)
          goto LABEL_65;
LABEL_62:
        if ((char)*v18 < 0)
        {
LABEL_65:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v26 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x10u;
          if ((unint64_t)v26 < v12)
            goto LABEL_67;
          continue;
        }
        *v5 = *v18;
        v26 = v18 + 1;
        *((_QWORD *)a2 + 1) = v26;
        *((_DWORD *)this + 18) |= 0x10u;
        if ((unint64_t)v26 >= v12)
          continue;
LABEL_67:
        if (*v26 != 48)
          continue;
        v19 = v26 + 1;
        *((_QWORD *)a2 + 1) = v19;
        if ((unint64_t)v19 >= v12)
          goto LABEL_72;
LABEL_69:
        if ((char)*v19 < 0)
        {
LABEL_72:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x20u;
          if ((unint64_t)v27 < v12)
            goto LABEL_74;
          continue;
        }
        *v6 = *v19;
        v27 = v19 + 1;
        *((_QWORD *)a2 + 1) = v27;
        *((_DWORD *)this + 18) |= 0x20u;
        if ((unint64_t)v27 >= v12)
          continue;
LABEL_74:
        if (*v27 != 56)
          continue;
        v20 = v27 + 1;
        *((_QWORD *)a2 + 1) = v20;
LABEL_76:
        if ((unint64_t)v20 >= v12 || (char)*v20 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)a2 + 1);
          v12 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x40u;
          if ((unint64_t)v28 < v12)
            goto LABEL_82;
          continue;
        }
        *v7 = *v20;
        v28 = v20 + 1;
        *((_QWORD *)a2 + 1) = v28;
        *((_DWORD *)this + 18) |= 0x40u;
        if ((unint64_t)v28 >= v12)
          continue;
LABEL_82:
        if (*v28 != 64)
          continue;
        v21 = v28 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_84:
        if ((unint64_t)v21 >= v12 || (char)*v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v30 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 18) |= 0x80u;
          if ((unint64_t)v29 < v30)
            goto LABEL_90;
          continue;
        }
        *v8 = *v21;
        v29 = v21 + 1;
        *((_QWORD *)a2 + 1) = v29;
        *((_DWORD *)this + 18) |= 0x80u;
        if ((unint64_t)v29 >= v12)
          continue;
LABEL_90:
        if (*v29 != 74)
          continue;
        while (1)
        {
          *((_QWORD *)a2 + 1) = v29 + 1;
LABEL_92:
          v31 = *((_DWORD *)this + 13);
          v32 = *((int *)this + 12);
          if ((int)v32 >= v31)
          {
            if (v31 == *((_DWORD *)this + 14))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v45);
              v31 = *((_DWORD *)this + 13);
            }
            *((_DWORD *)this + 13) = v31 + 1;
            v34 = (awd::metrics::CommCenterMissedMTMessage *)operator new(0x20uLL);
            *(_QWORD *)v34 = off_1E7921D70;
            *((_QWORD *)v34 + 1) = 0;
            *((_QWORD *)v34 + 2) = 0;
            *((_QWORD *)v34 + 3) = 0;
            v35 = *((_QWORD *)this + 5);
            v36 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v36 + 1;
            *(_QWORD *)(v35 + 8 * v36) = v34;
          }
          else
          {
            v33 = *((_QWORD *)this + 5);
            *((_DWORD *)this + 12) = v32 + 1;
            v34 = *(awd::metrics::CommCenterMissedMTMessage **)(v33 + 8 * v32);
          }
          v48 = -1431655766;
          v37 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v37 >= *((_QWORD *)a2 + 2) || *v37 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0;
          }
          else
          {
            v48 = *v37;
            *((_QWORD *)a2 + 1) = v37 + 1;
          }
          v38 = *((_DWORD *)a2 + 14);
          v39 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v38 + 1;
          if (v38 >= v39)
            return 0;
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!awd::metrics::CommCenterMissedMTMessage::MergePartialFromCodedStream(v34, a2)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          v40 = *((_DWORD *)a2 + 14);
          v41 = __OFSUB__(v40, 1);
          v42 = v40 - 1;
          if (v42 < 0 == v41)
            *((_DWORD *)a2 + 14) = v42;
          v29 = (_BYTE *)*((_QWORD *)a2 + 1);
          v43 = (_BYTE *)*((_QWORD *)a2 + 2);
          if (v29 >= v43 || *v29 != 74)
          {
            if (v29 == v43 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              result = 1;
              *((_BYTE *)a2 + 36) = 1;
              return result;
            }
            goto LABEL_2;
          }
        }
      case 3u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v16 >= v12)
          goto LABEL_51;
        goto LABEL_48;
      case 4u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v17 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v17 >= v12)
          goto LABEL_58;
        goto LABEL_55;
      case 5u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v18 >= v12)
          goto LABEL_65;
        goto LABEL_62;
      case 6u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v19 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v19 >= v12)
          goto LABEL_72;
        goto LABEL_69;
      case 7u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v20 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_76;
      case 8u:
        v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_34;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
        v12 = *((_QWORD *)a2 + 2);
        goto LABEL_84;
      case 9u:
        v11 = TagFallback & 7;
        if (v11 != 2)
          goto LABEL_34;
        goto LABEL_92;
      default:
        v11 = TagFallback & 7;
LABEL_34:
        if (v11 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0;
        continue;
    }
  }
}

uint64_t awd::metrics::CommCenterLowPowerStats::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = this;
  v6 = *(_DWORD *)(this + 72);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 24), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 36), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x80) == 0)
  {
LABEL_9:
    if (*(int *)(v5 + 48) < 1)
      return this;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  if (*(int *)(v5 + 48) < 1)
    return this;
LABEL_19:
  v7 = 0;
  do
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8 * v7++), a2, a4);
  while (v7 < *(int *)(v5 + 48));
  return this;
}

uint64_t awd::metrics::CommCenterLowPowerStats::ByteSize(awd::metrics::CommCenterLowPowerStats *this)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;

  LOBYTE(v2) = *((_BYTE *)this + 72);
  if (!(_BYTE)v2)
  {
    v4 = *((_DWORD *)this + 12);
    v5 = v4;
    if (v4 < 1)
      goto LABEL_48;
    goto LABEL_44;
  }
  if ((*((_BYTE *)this + 72) & 1) != 0)
  {
    v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                     + 1))
       + 1;
    v2 = *((_DWORD *)this + 18);
    if ((v2 & 2) == 0)
      goto LABEL_12;
  }
  else
  {
    v3 = 0;
    if ((*((_BYTE *)this + 72) & 2) == 0)
      goto LABEL_12;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
    v2 = *((_DWORD *)this + 18);
  }
  else
  {
    v7 = 2;
  }
  v3 += v7;
LABEL_12:
  if ((v2 & 4) != 0)
  {
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
      v2 = *((_DWORD *)this + 18);
      v3 += v10 + 1;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      v3 += 2;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
LABEL_14:
    if ((v2 & 0x10) == 0)
      goto LABEL_15;
LABEL_28:
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if (v13 >= 0x80)
    {
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
      v2 = *((_DWORD *)this + 18);
      v3 += v14 + 1;
      if ((v2 & 0x20) != 0)
        goto LABEL_32;
    }
    else
    {
      v3 += 2;
      if ((v2 & 0x20) != 0)
        goto LABEL_32;
    }
LABEL_16:
    if ((v2 & 0x40) == 0)
      goto LABEL_17;
LABEL_36:
    v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v17 >= 0x80)
    {
      v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17) + 1;
      if ((*((_DWORD *)this + 18) & 0x80) != 0)
        goto LABEL_40;
    }
    else
    {
      v3 += 2;
      if ((v2 & 0x80) != 0)
        goto LABEL_40;
    }
LABEL_18:
    v8 = *((_DWORD *)this + 12);
    v5 = (v8 + v3);
    if (v8 < 1)
      goto LABEL_48;
    goto LABEL_44;
  }
  if ((v2 & 8) == 0)
    goto LABEL_14;
LABEL_24:
  v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v11 >= 0x80)
  {
    v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    v2 = *((_DWORD *)this + 18);
    v3 += v12 + 1;
    if ((v2 & 0x10) != 0)
      goto LABEL_28;
  }
  else
  {
    v3 += 2;
    if ((v2 & 0x10) != 0)
      goto LABEL_28;
  }
LABEL_15:
  if ((v2 & 0x20) == 0)
    goto LABEL_16;
LABEL_32:
  v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v15 >= 0x80)
  {
    v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
    v2 = *((_DWORD *)this + 18);
    v3 += v16 + 1;
    if ((v2 & 0x40) != 0)
      goto LABEL_36;
  }
  else
  {
    v3 += 2;
    if ((v2 & 0x40) != 0)
      goto LABEL_36;
  }
LABEL_17:
  if ((v2 & 0x80) == 0)
    goto LABEL_18;
LABEL_40:
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 16);
  if (v18 >= 0x80)
  {
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
    v21 = *((_DWORD *)this + 12);
    v5 = (v21 + v20 + 1 + v3);
    if (v21 < 1)
      goto LABEL_48;
  }
  else
  {
    v19 = *((_DWORD *)this + 12);
    v5 = (v19 + v3 + 2);
    if (v19 < 1)
      goto LABEL_48;
  }
LABEL_44:
  v22 = 0;
  do
  {
    while (1)
    {
      v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)awd::metrics::CommCenterMissedMTMessage::ByteSize(*(awd::metrics::CommCenterMissedMTMessage **)(*((_QWORD *)this + 5) + 8 * v22));
      if (v23 < 0x80)
        break;
      v5 = (_DWORD)v23
         + (_DWORD)v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
      if (++v22 >= *((int *)this + 12))
        goto LABEL_48;
    }
    v5 = ((_DWORD)v23 + v5 + 1);
    ++v22;
  }
  while (v22 < *((int *)this + 12));
LABEL_48:
  *((_DWORD *)this + 17) = v5;
  return v5;
}

void awd::metrics::CommCenterLowPowerStats::CopyFrom(awd::metrics::CommCenterLowPowerStats *this, const awd::metrics::CommCenterLowPowerStats *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterLowPowerStats *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterLowPowerStats::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterLowPowerStats::IsInitialized(awd::metrics::CommCenterLowPowerStats *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterLowPowerStats::Swap(uint64_t this, awd::metrics::CommCenterLowPowerStats *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  if (a2 != (awd::metrics::CommCenterLowPowerStats *)this)
  {
    v3 = this;
    v4 = *(_QWORD *)(this + 8);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v4;
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    v5 = *(_DWORD *)(v3 + 72);
    *(_DWORD *)(v3 + 72) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v5;
    v6 = *(_DWORD *)(v3 + 68);
    *(_DWORD *)(v3 + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v6;
  }
  return this;
}

char *awd::metrics::CommCenterLowPowerStats::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF742FF0;
  strcpy(result, "awd.metrics.CommCenterLowPowerStats");
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SharedCtor(uint64_t this)
{
  uint64_t v1;

  v1 = MEMORY[0x1E0DE8338];
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = v1;
  *(_WORD *)(this + 52) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 24) = v1;
  *(_QWORD *)(this + 32) = v1;
  *(_QWORD *)(this + 40) = v1;
  *(_QWORD *)(this + 56) = v1;
  *(_QWORD *)(this + 64) = v1;
  *(_QWORD *)(this + 72) = v1;
  *(_QWORD *)(this + 80) = 0;
  *(_QWORD *)(this + 88) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

awd::metrics::CommCenterWakeReasonInfo *awd::metrics::CommCenterWakeReasonInfo::CommCenterWakeReasonInfo(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E7921F50;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_WORD *)this + 26) = 0;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = v3;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = v3;
  *((_QWORD *)this + 5) = v3;
  *((_QWORD *)this + 7) = v3;
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  return this;
}

{
  uint64_t v3;

  *(_QWORD *)this = off_1E7921F50;
  *((_QWORD *)this + 1) = 0;
  v3 = MEMORY[0x1E0DE8338];
  *((_WORD *)this + 26) = 0;
  *((_QWORD *)this + 2) = v3;
  *((_QWORD *)this + 3) = v3;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = v3;
  *((_QWORD *)this + 5) = v3;
  *((_QWORD *)this + 7) = v3;
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 9) = v3;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  return this;
}

void sub_1BF71FD44(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeReasonInfo::MergeFrom(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  int v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  char v9;
  __int128 v10;
  int v11;
  void *v12;
  size_t v13;
  char v14;
  void **v15;
  void **v16;
  char v17;
  __int128 v18;
  int v19;
  void *v20;
  size_t v21;
  int v22;
  void **v23;
  void **v24;
  char v25;
  __int128 v26;
  void *v27;
  size_t v28;
  void **v29;
  void **v30;
  char v31;
  __int128 v32;
  void *v33;
  size_t v34;
  void **v35;
  void **v36;
  char v37;
  __int128 v38;
  int v39;
  void *v40;
  size_t v41;
  void **v42;
  void **v43;
  char v44;
  __int128 v45;
  int v46;
  void *v47;
  size_t v48;
  int v49;
  void **v50;
  void **v51;
  char v52;
  __int128 v53;
  int v54;
  void *v55;
  size_t v56;
  int v57;
  int v58;
  char v59;
  char v60[48];

  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v60);
  }
  LOBYTE(v4) = *((_BYTE *)a2 + 96);
  if (!(_BYTE)v4)
  {
LABEL_91:
    v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0)
      return;
    goto LABEL_92;
  }
  if ((*((_BYTE *)a2 + 96) & 1) != 0)
  {
    v5 = *((_QWORD *)a2 + 1);
    *((_DWORD *)this + 24) |= 1u;
    *((_QWORD *)this + 1) = v5;
    v4 = *((_DWORD *)a2 + 24);
  }
  v6 = (void **)MEMORY[0x1E0DE8338];
  if ((v4 & 2) != 0)
  {
    v7 = (void **)*((_QWORD *)a2 + 2);
    *((_DWORD *)this + 24) |= 2u;
    v8 = (void **)*((_QWORD *)this + 2);
    if (v8 == v6)
    {
      v8 = (void **)operator new(0x18uLL);
      v8[1] = 0;
      v8[2] = 0;
      *v8 = 0;
      *((_QWORD *)this + 2) = v8;
    }
    if (v8 != v7)
    {
      v9 = *((_BYTE *)v7 + 23);
      if ((*((char *)v8 + 23) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)v7 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v8, *v7, (size_t)v7[1]);
          v11 = *((_DWORD *)a2 + 24);
          if ((v11 & 4) == 0)
            goto LABEL_23;
        }
        else
        {
          v10 = *(_OWORD *)v7;
          v8[2] = v7[2];
          *(_OWORD *)v8 = v10;
          v11 = *((_DWORD *)a2 + 24);
          if ((v11 & 4) == 0)
            goto LABEL_23;
        }
        goto LABEL_22;
      }
      if (v9 >= 0)
        v12 = v7;
      else
        v12 = *v7;
      if (v9 >= 0)
        v13 = *((unsigned __int8 *)v7 + 23);
      else
        v13 = (size_t)v7[1];
      std::string::__assign_no_alias<false>(v8, v12, v13);
    }
  }
  v11 = *((_DWORD *)a2 + 24);
  if ((v11 & 4) != 0)
  {
LABEL_22:
    v14 = *((_BYTE *)a2 + 52);
    *((_DWORD *)this + 24) |= 4u;
    *((_BYTE *)this + 52) = v14;
    v11 = *((_DWORD *)a2 + 24);
  }
LABEL_23:
  if ((v11 & 8) != 0)
  {
    v15 = (void **)*((_QWORD *)a2 + 3);
    *((_DWORD *)this + 24) |= 8u;
    v16 = (void **)*((_QWORD *)this + 3);
    if (v16 == v6)
    {
      v16 = (void **)operator new(0x18uLL);
      v16[1] = 0;
      v16[2] = 0;
      *v16 = 0;
      *((_QWORD *)this + 3) = v16;
    }
    if (v16 != v15)
    {
      v17 = *((_BYTE *)v15 + 23);
      if ((*((char *)v16 + 23) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)v15 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v16, *v15, (size_t)v15[1]);
          v19 = *((_DWORD *)a2 + 24);
          if ((v19 & 0x10) == 0)
            goto LABEL_40;
        }
        else
        {
          v18 = *(_OWORD *)v15;
          v16[2] = v15[2];
          *(_OWORD *)v16 = v18;
          v19 = *((_DWORD *)a2 + 24);
          if ((v19 & 0x10) == 0)
            goto LABEL_40;
        }
        goto LABEL_39;
      }
      if (v17 >= 0)
        v20 = v15;
      else
        v20 = *v15;
      if (v17 >= 0)
        v21 = *((unsigned __int8 *)v15 + 23);
      else
        v21 = (size_t)v15[1];
      std::string::__assign_no_alias<false>(v16, v20, v21);
    }
  }
  v19 = *((_DWORD *)a2 + 24);
  if ((v19 & 0x10) != 0)
  {
LABEL_39:
    v22 = *((_DWORD *)a2 + 12);
    *((_DWORD *)this + 24) |= 0x10u;
    *((_DWORD *)this + 12) = v22;
    v19 = *((_DWORD *)a2 + 24);
  }
LABEL_40:
  if ((v19 & 0x20) == 0)
    goto LABEL_55;
  v23 = (void **)*((_QWORD *)a2 + 4);
  *((_DWORD *)this + 24) |= 0x20u;
  v24 = (void **)*((_QWORD *)this + 4);
  if (v24 == v6)
  {
    v24 = (void **)operator new(0x18uLL);
    v24[1] = 0;
    v24[2] = 0;
    *v24 = 0;
    *((_QWORD *)this + 4) = v24;
  }
  if (v24 == v23)
  {
LABEL_55:
    if ((*((_BYTE *)a2 + 96) & 0x40) == 0)
      goto LABEL_76;
    goto LABEL_56;
  }
  v25 = *((_BYTE *)v23 + 23);
  if (*((char *)v24 + 23) < 0)
  {
    if (v25 >= 0)
      v27 = v23;
    else
      v27 = *v23;
    if (v25 >= 0)
      v28 = *((unsigned __int8 *)v23 + 23);
    else
      v28 = (size_t)v23[1];
    std::string::__assign_no_alias<false>(v24, v27, v28);
    goto LABEL_55;
  }
  if ((*((_BYTE *)v23 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v24, *v23, (size_t)v23[1]);
    if ((*((_BYTE *)a2 + 96) & 0x40) == 0)
      goto LABEL_76;
  }
  else
  {
    v26 = *(_OWORD *)v23;
    v24[2] = v23[2];
    *(_OWORD *)v24 = v26;
    if ((*((_BYTE *)a2 + 96) & 0x40) == 0)
      goto LABEL_76;
  }
LABEL_56:
  v29 = (void **)*((_QWORD *)a2 + 5);
  *((_DWORD *)this + 24) |= 0x40u;
  v30 = (void **)*((_QWORD *)this + 5);
  if (v30 == v6)
  {
    v30 = (void **)operator new(0x18uLL);
    v30[1] = 0;
    v30[2] = 0;
    *v30 = 0;
    *((_QWORD *)this + 5) = v30;
  }
  if (v30 != v29)
  {
    v31 = *((_BYTE *)v29 + 23);
    if (*((char *)v30 + 23) < 0)
    {
      if (v31 >= 0)
        v33 = v29;
      else
        v33 = *v29;
      if (v31 >= 0)
        v34 = *((unsigned __int8 *)v29 + 23);
      else
        v34 = (size_t)v29[1];
      std::string::__assign_no_alias<false>(v30, v33, v34);
    }
    else if ((*((_BYTE *)v29 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(v30, *v29, (size_t)v29[1]);
    }
    else
    {
      v32 = *(_OWORD *)v29;
      v30[2] = v29[2];
      *(_OWORD *)v30 = v32;
    }
  }
LABEL_76:
  if ((*((_BYTE *)a2 + 96) & 0x80) == 0)
    goto LABEL_91;
  v35 = (void **)*((_QWORD *)a2 + 7);
  *((_DWORD *)this + 24) |= 0x80u;
  v36 = (void **)*((_QWORD *)this + 7);
  if (v36 == v6)
  {
    v36 = (void **)operator new(0x18uLL);
    v36[1] = 0;
    v36[2] = 0;
    *v36 = 0;
    *((_QWORD *)this + 7) = v36;
  }
  if (v36 == v35)
    goto LABEL_91;
  v37 = *((_BYTE *)v35 + 23);
  if (*((char *)v36 + 23) < 0)
  {
    if (v37 >= 0)
      v40 = v35;
    else
      v40 = *v35;
    if (v37 >= 0)
      v41 = *((unsigned __int8 *)v35 + 23);
    else
      v41 = (size_t)v35[1];
    std::string::__assign_no_alias<false>(v36, v40, v41);
    goto LABEL_91;
  }
  if ((*((_BYTE *)v35 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v36, *v35, (size_t)v35[1]);
    v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0)
      return;
  }
  else
  {
    v38 = *(_OWORD *)v35;
    v36[2] = v35[2];
    *(_OWORD *)v36 = v38;
    v39 = *((_DWORD *)a2 + 24);
    if ((v39 & 0xFF00) == 0)
      return;
  }
LABEL_92:
  if ((v39 & 0x100) != 0)
  {
    v42 = (void **)*((_QWORD *)a2 + 8);
    *((_DWORD *)this + 24) |= 0x100u;
    v43 = (void **)*((_QWORD *)this + 8);
    if (v43 == (void **)MEMORY[0x1E0DE8338])
    {
      v43 = (void **)operator new(0x18uLL);
      v43[1] = 0;
      v43[2] = 0;
      *v43 = 0;
      *((_QWORD *)this + 8) = v43;
    }
    if (v43 != v42)
    {
      v44 = *((_BYTE *)v42 + 23);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
      {
        if ((*((_BYTE *)v42 + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v43, *v42, (size_t)v42[1]);
          v46 = *((_DWORD *)a2 + 24);
          if ((v46 & 0x200) == 0)
            goto LABEL_109;
        }
        else
        {
          v45 = *(_OWORD *)v42;
          v43[2] = v42[2];
          *(_OWORD *)v43 = v45;
          v46 = *((_DWORD *)a2 + 24);
          if ((v46 & 0x200) == 0)
            goto LABEL_109;
        }
        goto LABEL_108;
      }
      if (v44 >= 0)
        v47 = v42;
      else
        v47 = *v42;
      if (v44 >= 0)
        v48 = *((unsigned __int8 *)v42 + 23);
      else
        v48 = (size_t)v42[1];
      std::string::__assign_no_alias<false>(v43, v47, v48);
    }
  }
  v46 = *((_DWORD *)a2 + 24);
  if ((v46 & 0x200) != 0)
  {
LABEL_108:
    v49 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 24) |= 0x200u;
    *((_DWORD *)this + 20) = v49;
    v46 = *((_DWORD *)a2 + 24);
  }
LABEL_109:
  if ((v46 & 0x400) == 0)
    goto LABEL_124;
  v50 = (void **)*((_QWORD *)a2 + 9);
  *((_DWORD *)this + 24) |= 0x400u;
  v51 = (void **)*((_QWORD *)this + 9);
  if (v51 == (void **)MEMORY[0x1E0DE8338])
  {
    v51 = (void **)operator new(0x18uLL);
    v51[1] = 0;
    v51[2] = 0;
    *v51 = 0;
    *((_QWORD *)this + 9) = v51;
  }
  if (v51 == v50)
  {
LABEL_124:
    v54 = *((_DWORD *)a2 + 24);
    if ((v54 & 0x800) != 0)
      goto LABEL_133;
    goto LABEL_125;
  }
  v52 = *((_BYTE *)v50 + 23);
  if (*((char *)v51 + 23) < 0)
  {
    if (v52 >= 0)
      v55 = v50;
    else
      v55 = *v50;
    if (v52 >= 0)
      v56 = *((unsigned __int8 *)v50 + 23);
    else
      v56 = (size_t)v50[1];
    std::string::__assign_no_alias<false>(v51, v55, v56);
    goto LABEL_124;
  }
  if ((*((_BYTE *)v50 + 23) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v51, *v50, (size_t)v50[1]);
    v54 = *((_DWORD *)a2 + 24);
    if ((v54 & 0x800) != 0)
      goto LABEL_133;
LABEL_125:
    if ((v54 & 0x1000) != 0)
      goto LABEL_134;
    goto LABEL_126;
  }
  v53 = *(_OWORD *)v50;
  v51[2] = v50[2];
  *(_OWORD *)v51 = v53;
  v54 = *((_DWORD *)a2 + 24);
  if ((v54 & 0x800) == 0)
    goto LABEL_125;
LABEL_133:
  v57 = *((_DWORD *)a2 + 21);
  *((_DWORD *)this + 24) |= 0x800u;
  *((_DWORD *)this + 21) = v57;
  v54 = *((_DWORD *)a2 + 24);
  if ((v54 & 0x1000) != 0)
  {
LABEL_134:
    v58 = *((_DWORD *)a2 + 22);
    *((_DWORD *)this + 24) |= 0x1000u;
    *((_DWORD *)this + 22) = v58;
    if ((*((_DWORD *)a2 + 24) & 0x2000) != 0)
      goto LABEL_135;
    return;
  }
LABEL_126:
  if ((v54 & 0x2000) != 0)
  {
LABEL_135:
    v59 = *((_BYTE *)a2 + 53);
    *((_DWORD *)this + 24) |= 0x2000u;
    *((_BYTE *)this + 53) = v59;
  }
}

void sub_1BF7202EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF720300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_1BF72036C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite *v1;

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void awd::metrics::CommCenterWakeReasonInfo::~CommCenterWakeReasonInfo(awd::metrics::CommCenterWakeReasonInfo *this)
{
  *(_QWORD *)this = off_1E7921F50;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  *(_QWORD *)this = off_1E7921F50;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  void *v2;

  *(_QWORD *)this = off_1E7921F50;
  awd::metrics::CommCenterWakeReasonInfo::SharedDtor(this);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
  operator delete(v2);
}

void awd::metrics::CommCenterWakeReasonInfo::SharedDtor(awd::metrics::CommCenterWakeReasonInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;

  v2 = *((_QWORD *)this + 2);
  v3 = MEMORY[0x1E0DE8338];
  if (v2 == MEMORY[0x1E0DE8338] || v2 == 0)
  {
    v5 = *((_QWORD *)this + 3);
    if (v5 != MEMORY[0x1E0DE8338] && v5 != 0)
      goto LABEL_29;
LABEL_11:
    v7 = *((_QWORD *)this + 4);
    if (v7 != v3 && v7 != 0)
      goto LABEL_35;
LABEL_16:
    v9 = *((_QWORD *)this + 5);
    if (v9 != v3 && v9 != 0)
      goto LABEL_41;
LABEL_21:
    v11 = *((_QWORD *)this + 7);
    if (v11 == v3)
      goto LABEL_48;
    goto LABEL_44;
  }
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  operator delete((void *)v2);
  v5 = *((_QWORD *)this + 3);
  if (v5 == v3 || v5 == 0)
    goto LABEL_11;
LABEL_29:
  if (*(char *)(v5 + 23) < 0)
    operator delete(*(void **)v5);
  operator delete((void *)v5);
  v7 = *((_QWORD *)this + 4);
  if (v7 == v3 || v7 == 0)
    goto LABEL_16;
LABEL_35:
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  operator delete((void *)v7);
  v9 = *((_QWORD *)this + 5);
  if (v9 == v3 || v9 == 0)
    goto LABEL_21;
LABEL_41:
  if (*(char *)(v9 + 23) < 0)
    operator delete(*(void **)v9);
  operator delete((void *)v9);
  v11 = *((_QWORD *)this + 7);
  if (v11 != v3)
  {
LABEL_44:
    if (v11)
    {
      if (*(char *)(v11 + 23) < 0)
        operator delete(*(void **)v11);
      operator delete((void *)v11);
    }
  }
LABEL_48:
  v15 = *((_QWORD *)this + 8);
  if (v15 != v3 && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    operator delete((void *)v15);
  }
  v16 = *((_QWORD *)this + 9);
  if (v16 != v3 && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    operator delete((void *)v16);
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 92) = a2;
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::default_instance(awd::metrics::CommCenterWakeReasonInfo *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;

  result = awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  if (!awd::metrics::CommCenterWakeReasonInfo::default_instance_)
  {
    awd::metrics::protobuf_AddDesc_CCMetricsABMPower_2eproto(0, a2, a3, a4);
    return awd::metrics::CommCenterWakeReasonInfo::default_instance_;
  }
  return result;
}

_QWORD *awd::metrics::CommCenterWakeReasonInfo::New(awd::metrics::CommCenterWakeReasonInfo *this)
{
  _QWORD *result;
  uint64_t v2;

  result = operator new(0x68uLL);
  *result = off_1E7921F50;
  result[1] = 0;
  v2 = MEMORY[0x1E0DE8338];
  *((_WORD *)result + 26) = 0;
  result[2] = v2;
  result[3] = v2;
  *((_DWORD *)result + 12) = 0;
  result[4] = v2;
  result[5] = v2;
  result[7] = v2;
  result[8] = v2;
  result[9] = v2;
  result[10] = 0;
  result[11] = 0;
  *((_DWORD *)result + 24) = 0;
  return result;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::Clear(uint64_t this)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_BYTE *)(this + 96);
  if (!v1)
    goto LABEL_28;
  *(_QWORD *)(this + 8) = 0;
  v2 = MEMORY[0x1E0DE8338];
  if ((v1 & 2) == 0 || (v3 = *(_QWORD *)(this + 16), v3 == MEMORY[0x1E0DE8338]))
  {
LABEL_6:
    *(_BYTE *)(this + 52) = 0;
    if ((*(_BYTE *)(this + 96) & 8) == 0)
      goto LABEL_13;
    goto LABEL_7;
  }
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    goto LABEL_6;
  }
  **(_BYTE **)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(this + 52) = 0;
  if ((*(_BYTE *)(this + 96) & 8) == 0)
    goto LABEL_13;
LABEL_7:
  v4 = *(_QWORD *)(this + 24);
  if (v4 != v2)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_13:
  *(_DWORD *)(this + 48) = 0;
  if ((*(_BYTE *)(this + 96) & 0x20) == 0 || (v5 = *(_QWORD *)(this + 32), v5 == v2))
  {
LABEL_17:
    if ((*(_BYTE *)(this + 96) & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_18;
  }
  if ((*(char *)(v5 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    goto LABEL_17;
  }
  **(_BYTE **)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  if ((*(_BYTE *)(this + 96) & 0x40) == 0)
    goto LABEL_24;
LABEL_18:
  v6 = *(_QWORD *)(this + 40);
  if (v6 != v2)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
LABEL_24:
  if ((*(_BYTE *)(this + 96) & 0x80) != 0)
  {
    v7 = *(_QWORD *)(this + 56);
    if (v7 != v2)
    {
      if (*(char *)(v7 + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v8 = *(_DWORD *)(this + 96);
        if ((v8 & 0xFF00) != 0)
          goto LABEL_29;
LABEL_39:
        *(_DWORD *)(this + 96) = 0;
        return this;
      }
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
    }
  }
LABEL_28:
  v8 = *(_DWORD *)(this + 96);
  if ((v8 & 0xFF00) == 0)
    goto LABEL_39;
LABEL_29:
  if ((v8 & 0x100) != 0)
  {
    v9 = *(_QWORD *)(this + 64);
    if (v9 != MEMORY[0x1E0DE8338])
    {
      if (*(char *)(v9 + 23) < 0)
      {
        **(_BYTE **)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_DWORD *)(this + 80) = 0;
        if ((*(_BYTE *)(this + 97) & 4) == 0)
          goto LABEL_41;
        goto LABEL_34;
      }
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
    }
  }
  *(_DWORD *)(this + 80) = 0;
  if ((*(_BYTE *)(this + 97) & 4) == 0)
  {
LABEL_41:
    *(_DWORD *)(this + 84) = 0;
    *(_DWORD *)(this + 88) = 0;
    *(_BYTE *)(this + 53) = 0;
    *(_DWORD *)(this + 96) = 0;
    return this;
  }
LABEL_34:
  v10 = *(_QWORD *)(this + 72);
  if (v10 == MEMORY[0x1E0DE8338])
    goto LABEL_41;
  if (*(char *)(v10 + 23) < 0)
  {
    **(_BYTE **)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v10 = 0;
    *(_BYTE *)(v10 + 23) = 0;
  }
  *(_DWORD *)(this + 84) = 0;
  *(_DWORD *)(this + 88) = 0;
  *(_BYTE *)(this + 53) = 0;
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::MergePartialFromCodedStream(awd::metrics::CommCenterWakeReasonInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  unint64_t *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  char *v10;
  uint64_t TagFallback;
  int v12;
  unint64_t v13;
  char *v14;
  _BYTE *v15;
  int v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  unsigned int v22;
  _BYTE *v23;
  _QWORD *v24;
  unint64_t v25;
  _BYTE *v26;
  char *v27;
  _BYTE *v28;
  int v29;
  _QWORD *v30;
  _BYTE *v31;
  _QWORD *v32;
  _BYTE *v33;
  _QWORD *v34;
  _BYTE *v35;
  _QWORD *v36;
  unint64_t v37;
  _BYTE *v38;
  char *v39;
  _BYTE *v40;
  int v41;
  _QWORD *v42;
  unint64_t v43;
  _BYTE *v44;
  char *v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  unint64_t v49;
  _BYTE *v50;
  unint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  unsigned int v57;

  v4 = (unint64_t *)((char *)this + 8);
  v5 = (unsigned int *)((char *)this + 48);
  v6 = (unsigned int *)((char *)this + 80);
  v7 = (unsigned int *)((char *)this + 84);
  v8 = (unsigned int *)((char *)this + 88);
  v9 = MEMORY[0x1E0DE8338];
  while (2)
  {
    v10 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
    {
      TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v10 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v14 = (char *)*((_QWORD *)a2 + 1);
        v13 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v14 < v13 && (*v14 & 0x80000000) == 0)
        {
          *v4 = *v14;
          v15 = v14 + 1;
          *((_QWORD *)a2 + 1) = v15;
          v16 = *((_DWORD *)this + 24) | 1;
          *((_DWORD *)this + 24) = v16;
          if ((unint64_t)v15 >= v13)
            continue;
          goto LABEL_132;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if ((_DWORD)result)
        {
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          v55 = *((_QWORD *)a2 + 2);
          v16 = *((_DWORD *)this + 24) | 1;
          *((_DWORD *)this + 24) = v16;
          if ((unint64_t)v15 >= v55)
            continue;
LABEL_132:
          if (*v15 != 18)
            continue;
          *((_QWORD *)a2 + 1) = v15 + 1;
          *((_DWORD *)this + 24) = v16 | 2;
          if (*((_QWORD *)this + 2) != v9)
            goto LABEL_17;
          goto LABEL_16;
        }
        break;
      case 2u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_89;
        *((_DWORD *)this + 24) |= 2u;
        if (*((_QWORD *)this + 2) == v9)
        {
LABEL_16:
          v17 = operator new(0x18uLL);
          v17[1] = 0;
          v17[2] = 0;
          *v17 = 0;
          *((_QWORD *)this + 2) = v17;
        }
LABEL_17:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v20 = (_BYTE *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v20 >= v19 || *v20 != 24)
          continue;
        v21 = v20 + 1;
        *((_QWORD *)a2 + 1) = v21;
LABEL_23:
        v57 = -1431655766;
        if ((unint64_t)v21 >= v19 || *v21 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v57);
          if (!(_DWORD)result)
            return result;
          v22 = v57;
          v23 = (_BYTE *)*((_QWORD *)a2 + 1);
          v19 = *((_QWORD *)a2 + 2);
        }
        else
        {
          v22 = *v21;
          v23 = v21 + 1;
          *((_QWORD *)a2 + 1) = v23;
        }
        *((_BYTE *)this + 52) = v22 != 0;
        v54 = *((_DWORD *)this + 24) | 4;
        *((_DWORD *)this + 24) = v54;
        if ((unint64_t)v23 >= v19 || *v23 != 34)
          continue;
        *((_QWORD *)a2 + 1) = v23 + 1;
        *((_DWORD *)this + 24) = v54 | 8;
        if (*((_QWORD *)this + 3) == v9)
        {
LABEL_28:
          v24 = operator new(0x18uLL);
          v24[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          *((_QWORD *)this + 3) = v24;
        }
LABEL_29:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v26 = (_BYTE *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v26 >= v25 || *v26 != 40)
          continue;
        v27 = v26 + 1;
        *((_QWORD *)a2 + 1) = v27;
        if ((unint64_t)v27 >= v25)
          goto LABEL_106;
LABEL_36:
        if (*v27 < 0)
        {
LABEL_106:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!(_DWORD)result)
            return result;
          v28 = (_BYTE *)*((_QWORD *)a2 + 1);
          v51 = *((_QWORD *)a2 + 2);
          v29 = *((_DWORD *)this + 24) | 0x10;
          *((_DWORD *)this + 24) = v29;
          if ((unint64_t)v28 >= v51)
            continue;
        }
        else
        {
          *v5 = *v27;
          v28 = v27 + 1;
          *((_QWORD *)a2 + 1) = v28;
          v29 = *((_DWORD *)this + 24) | 0x10;
          *((_DWORD *)this + 24) = v29;
          if ((unint64_t)v28 >= v25)
            continue;
        }
        if (*v28 != 50)
          continue;
        *((_QWORD *)a2 + 1) = v28 + 1;
        *((_DWORD *)this + 24) = v29 | 0x20;
        if (*((_QWORD *)this + 4) == v9)
        {
LABEL_41:
          v30 = operator new(0x18uLL);
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          *((_QWORD *)this + 4) = v30;
        }
LABEL_42:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v31 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v31 >= *((_QWORD *)a2 + 2) || *v31 != 58)
          continue;
        *((_QWORD *)a2 + 1) = v31 + 1;
LABEL_47:
        *((_DWORD *)this + 24) |= 0x40u;
        if (*((_QWORD *)this + 5) == v9)
        {
          v32 = operator new(0x18uLL);
          v32[1] = 0;
          v32[2] = 0;
          *v32 = 0;
          *((_QWORD *)this + 5) = v32;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v33 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 != 66)
          continue;
        *((_QWORD *)a2 + 1) = v33 + 1;
LABEL_54:
        *((_DWORD *)this + 24) |= 0x80u;
        if (*((_QWORD *)this + 7) == v9)
        {
          v34 = operator new(0x18uLL);
          v34[1] = 0;
          v34[2] = 0;
          *v34 = 0;
          *((_QWORD *)this + 7) = v34;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v35 = (_BYTE *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v35 >= *((_QWORD *)a2 + 2) || *v35 != 74)
          continue;
        *((_QWORD *)a2 + 1) = v35 + 1;
LABEL_61:
        *((_DWORD *)this + 24) |= 0x100u;
        if (*((_QWORD *)this + 8) == v9)
        {
          v36 = operator new(0x18uLL);
          v36[1] = 0;
          v36[2] = 0;
          *v36 = 0;
          *((_QWORD *)this + 8) = v36;
        }
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v38 = (_BYTE *)*((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v38 >= v37 || *v38 != 80)
          continue;
        v39 = v38 + 1;
        *((_QWORD *)a2 + 1) = v39;
        if ((unint64_t)v39 >= v37)
          goto LABEL_93;
LABEL_70:
        if (*v39 < 0)
        {
LABEL_93:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!(_DWORD)result)
            return result;
          v40 = (_BYTE *)*((_QWORD *)a2 + 1);
          v49 = *((_QWORD *)a2 + 2);
          v41 = *((_DWORD *)this + 24) | 0x200;
          *((_DWORD *)this + 24) = v41;
          if ((unint64_t)v40 >= v49)
            continue;
        }
        else
        {
          *v6 = *v39;
          v40 = v39 + 1;
          *((_QWORD *)a2 + 1) = v40;
          v41 = *((_DWORD *)this + 24) | 0x200;
          *((_DWORD *)this + 24) = v41;
          if ((unint64_t)v40 >= v37)
            continue;
        }
        if (*v40 != 90)
          continue;
        *((_QWORD *)a2 + 1) = v40 + 1;
        *((_DWORD *)this + 24) = v41 | 0x400;
        if (*((_QWORD *)this + 9) == v9)
        {
LABEL_75:
          v42 = operator new(0x18uLL);
          v42[1] = 0;
          v42[2] = 0;
          *v42 = 0;
          *((_QWORD *)this + 9) = v42;
        }
LABEL_76:
        result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString();
        if (!(_DWORD)result)
          return result;
        v44 = (_BYTE *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v44 >= v43 || *v44 != 96)
          continue;
        v45 = v44 + 1;
        *((_QWORD *)a2 + 1) = v45;
        if ((unint64_t)v45 >= v43)
          goto LABEL_98;
LABEL_83:
        if (*v45 < 0)
        {
LABEL_98:
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v46 = (_BYTE *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 24) |= 0x800u;
          if ((unint64_t)v46 >= v43)
            continue;
        }
        else
        {
          *v7 = *v45;
          v46 = v45 + 1;
          *((_QWORD *)a2 + 1) = v46;
          *((_DWORD *)this + 24) |= 0x800u;
          if ((unint64_t)v46 >= v43)
            continue;
        }
        if (*v46 != 104)
          continue;
        v47 = v46 + 1;
        *((_QWORD *)a2 + 1) = v47;
LABEL_102:
        if ((unint64_t)v47 >= v43 || *v47 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
          if (!(_DWORD)result)
            return result;
          v50 = (_BYTE *)*((_QWORD *)a2 + 1);
          v43 = *((_QWORD *)a2 + 2);
          *((_DWORD *)this + 24) |= 0x1000u;
          if ((unint64_t)v50 >= v43)
            continue;
        }
        else
        {
          *v8 = *v47;
          v50 = v47 + 1;
          *((_QWORD *)a2 + 1) = v50;
          *((_DWORD *)this + 24) |= 0x1000u;
          if ((unint64_t)v50 >= v43)
            continue;
        }
        if (*v50 == 112)
        {
          v48 = v50 + 1;
          *((_QWORD *)a2 + 1) = v48;
LABEL_115:
          v56 = -1431655766;
          if ((unint64_t)v48 >= v43 || *v48 < 0)
          {
            result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v56);
            if (!(_DWORD)result)
              return result;
            v52 = v56;
            v53 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
            v43 = *((_QWORD *)a2 + 2);
          }
          else
          {
            v52 = *v48;
            v53 = (unsigned __int8 *)(v48 + 1);
            *((_QWORD *)a2 + 1) = v53;
          }
          *((_BYTE *)this + 53) = v52 != 0;
          *((_DWORD *)this + 24) |= 0x2000u;
          if (v53 == (unsigned __int8 *)v43 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
        }
        continue;
      case 3u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v21 = (char *)*((_QWORD *)a2 + 1);
        v19 = *((_QWORD *)a2 + 2);
        goto LABEL_23;
      case 4u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_89;
        *((_DWORD *)this + 24) |= 8u;
        if (*((_QWORD *)this + 3) == v9)
          goto LABEL_28;
        goto LABEL_29;
      case 5u:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v27 = (char *)*((_QWORD *)a2 + 1);
        v25 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v27 < v25)
          goto LABEL_36;
        goto LABEL_106;
      case 6u:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_89;
        *((_DWORD *)this + 24) |= 0x20u;
        if (*((_QWORD *)this + 4) == v9)
          goto LABEL_41;
        goto LABEL_42;
      case 7u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_47;
        goto LABEL_89;
      case 8u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_54;
        goto LABEL_89;
      case 9u:
        v12 = TagFallback & 7;
        if (v12 == 2)
          goto LABEL_61;
        goto LABEL_89;
      case 0xAu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v39 = (char *)*((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v39 < v37)
          goto LABEL_70;
        goto LABEL_93;
      case 0xBu:
        v12 = TagFallback & 7;
        if (v12 != 2)
          goto LABEL_89;
        *((_DWORD *)this + 24) |= 0x400u;
        if (*((_QWORD *)this + 9) == v9)
          goto LABEL_75;
        goto LABEL_76;
      case 0xCu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v45 = (char *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v45 < v43)
          goto LABEL_83;
        goto LABEL_98;
      case 0xDu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v47 = (char *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_102;
      case 0xEu:
        v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_89;
        v48 = (char *)*((_QWORD *)a2 + 1);
        v43 = *((_QWORD *)a2 + 2);
        goto LABEL_115;
      default:
        v12 = TagFallback & 7;
LABEL_89:
        if (v12 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0)continue;
        return 0;
    }
    return result;
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;

  v5 = this;
  v6 = *(_DWORD *)(this + 96);
  if ((v6 & 1) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(_QWORD *)(this + 8), (uint64_t)a2, a4);
    v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_18;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 52), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_20;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_21;
  }
LABEL_20:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_22;
  }
LABEL_21:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_26;
  }
LABEL_25:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 80), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_27;
  }
LABEL_26:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString();
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_14;
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0)
      return this;
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned __int8 *)(v5 + 53), (uint64_t)a2, a4);
  }
LABEL_28:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 96) & 0x2000) != 0)
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned __int8 *)(v5 + 53), (uint64_t)a2, a4);
  return this;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::ByteSize(awd::metrics::CommCenterWakeReasonInfo *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  uint64_t v44;
  int v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v50;
  int v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  int v53;

  v2 = *((_DWORD *)this + 24);
  if (!(_BYTE)v2)
  {
    v3 = 0;
    if ((v2 & 0xFF00) == 0)
      goto LABEL_106;
LABEL_67:
    if ((v2 & 0x100) != 0)
    {
      v36 = *((_QWORD *)this + 8);
      v37 = *(unsigned __int8 *)(v36 + 23);
      v38 = v37;
      v39 = *(_QWORD *)(v36 + 8);
      if ((v37 & 0x80u) == 0)
        v40 = *(unsigned __int8 *)(v36 + 23);
      else
        v40 = v39;
      if (v40 >= 0x80)
      {
        v41 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v40);
        v37 = *(unsigned __int8 *)(v36 + 23);
        v39 = *(_QWORD *)(v36 + 8);
        v2 = *((_DWORD *)this + 24);
        v38 = *(_BYTE *)(v36 + 23);
      }
      else
      {
        v41 = 1;
      }
      if (v38 < 0)
        v37 = v39;
      LODWORD(v3) = v3 + v41 + v37 + 1;
      if ((v2 & 0x200) == 0)
      {
LABEL_69:
        if ((v2 & 0x400) == 0)
          goto LABEL_70;
LABEL_86:
        v44 = *((_QWORD *)this + 9);
        v45 = *(unsigned __int8 *)(v44 + 23);
        v46 = v45;
        v47 = *(_QWORD *)(v44 + 8);
        if ((v45 & 0x80u) == 0)
          v48 = *(unsigned __int8 *)(v44 + 23);
        else
          v48 = v47;
        if (v48 >= 0x80)
        {
          v49 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v48);
          v45 = *(unsigned __int8 *)(v44 + 23);
          v47 = *(_QWORD *)(v44 + 8);
          v2 = *((_DWORD *)this + 24);
          v46 = *(_BYTE *)(v44 + 23);
        }
        else
        {
          v49 = 1;
        }
        if (v46 < 0)
          v45 = v47;
        LODWORD(v3) = v3 + v49 + v45 + 1;
        if ((v2 & 0x800) == 0)
        {
LABEL_71:
          if ((v2 & 0x1000) == 0)
            goto LABEL_103;
          goto LABEL_99;
        }
LABEL_95:
        v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
        if (v50 >= 0x80)
        {
          v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50);
          v2 = *((_DWORD *)this + 24);
          LODWORD(v3) = v51 + 1 + v3;
          if ((v2 & 0x1000) == 0)
            goto LABEL_103;
        }
        else
        {
          LODWORD(v3) = v3 + 2;
          if ((v2 & 0x1000) == 0)
          {
LABEL_103:
            if ((v2 & 0x2000) != 0)
              v3 = (v3 + 2);
            else
              v3 = v3;
            goto LABEL_106;
          }
        }
LABEL_99:
        v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
        if (v52 >= 0x80)
        {
          v53 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52) + 1;
          v2 = *((_DWORD *)this + 24);
        }
        else
        {
          v53 = 2;
        }
        LODWORD(v3) = v53 + v3;
        goto LABEL_103;
      }
    }
    else if ((v2 & 0x200) == 0)
    {
      goto LABEL_69;
    }
    v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 20);
    if (v42 >= 0x80)
    {
      v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42);
      v2 = *((_DWORD *)this + 24);
      LODWORD(v3) = v43 + 1 + v3;
      if ((v2 & 0x400) != 0)
        goto LABEL_86;
    }
    else
    {
      LODWORD(v3) = v3 + 2;
      if ((v2 & 0x400) != 0)
        goto LABEL_86;
    }
LABEL_70:
    if ((v2 & 0x800) == 0)
      goto LABEL_71;
    goto LABEL_95;
  }
  if ((v2 & 1) != 0)
  {
    LODWORD(v3) = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                              + 1))
                + 1;
    v2 = *((_DWORD *)this + 24);
    if ((v2 & 2) == 0)
      goto LABEL_17;
  }
  else
  {
    LODWORD(v3) = 0;
    if ((v2 & 2) == 0)
      goto LABEL_17;
  }
  v4 = *((_QWORD *)this + 2);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = v7;
  if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v8);
    v5 = *(unsigned __int8 *)(v4 + 23);
    v7 = *(_QWORD *)(v4 + 8);
    v2 = *((_DWORD *)this + 24);
    v6 = *(_BYTE *)(v4 + 23);
  }
  else
  {
    v9 = 1;
  }
  if (v6 < 0)
    v5 = v7;
  LODWORD(v3) = v3 + v9 + v5 + 1;
LABEL_17:
  if ((v2 & 4) != 0)
    v3 = (v3 + 2);
  else
    v3 = v3;
  if ((v2 & 8) == 0)
  {
    if ((v2 & 0x10) == 0)
      goto LABEL_22;
LABEL_36:
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if (v16 >= 0x80)
    {
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      v2 = *((_DWORD *)this + 24);
      v3 = (v3 + v17 + 1);
      if ((v2 & 0x20) != 0)
        goto LABEL_40;
    }
    else
    {
      v3 = (v3 + 2);
      if ((v2 & 0x20) != 0)
        goto LABEL_40;
    }
LABEL_23:
    if ((v2 & 0x40) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
  v10 = *((_QWORD *)this + 3);
  v11 = *(unsigned __int8 *)(v10 + 23);
  v12 = v11;
  v13 = *(_QWORD *)(v10 + 8);
  if ((v11 & 0x80u) == 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = v13;
  if (v14 >= 0x80)
  {
    v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v14);
    v11 = *(unsigned __int8 *)(v10 + 23);
    v13 = *(_QWORD *)(v10 + 8);
    v2 = *((_DWORD *)this + 24);
    v12 = *(_BYTE *)(v10 + 23);
  }
  else
  {
    v15 = 1;
  }
  if (v12 < 0)
    v11 = v13;
  v3 = (v3 + v15 + v11 + 1);
  if ((v2 & 0x10) != 0)
    goto LABEL_36;
LABEL_22:
  if ((v2 & 0x20) == 0)
    goto LABEL_23;
LABEL_40:
  v18 = *((_QWORD *)this + 4);
  v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = v21;
  if (v22 >= 0x80)
  {
    v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v22);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v21 = *(_QWORD *)(v18 + 8);
    v2 = *((_DWORD *)this + 24);
    v20 = *(_BYTE *)(v18 + 23);
  }
  else
  {
    v23 = 1;
  }
  if (v20 < 0)
    v19 = v21;
  v3 = (v3 + v23 + v19 + 1);
  if ((v2 & 0x40) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_49:
  v24 = *((_QWORD *)this + 5);
  v25 = *(unsigned __int8 *)(v24 + 23);
  v26 = v25;
  v27 = *(_QWORD *)(v24 + 8);
  if ((v25 & 0x80u) == 0)
    v28 = *(unsigned __int8 *)(v24 + 23);
  else
    v28 = v27;
  if (v28 >= 0x80)
  {
    v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v28);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v27 = *(_QWORD *)(v24 + 8);
    v2 = *((_DWORD *)this + 24);
    v26 = *(_BYTE *)(v24 + 23);
  }
  else
  {
    v29 = 1;
  }
  if (v26 < 0)
    v25 = v27;
  v3 = (v3 + v29 + v25 + 1);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0xFF00) == 0)
      goto LABEL_106;
    goto LABEL_67;
  }
LABEL_58:
  v30 = *((_QWORD *)this + 7);
  v31 = *(unsigned __int8 *)(v30 + 23);
  v32 = v31;
  v33 = *(_QWORD *)(v30 + 8);
  if ((v31 & 0x80u) == 0)
    v34 = *(unsigned __int8 *)(v30 + 23);
  else
    v34 = v33;
  if (v34 >= 0x80)
  {
    v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v33 = *(_QWORD *)(v30 + 8);
    v2 = *((_DWORD *)this + 24);
    v32 = *(_BYTE *)(v30 + 23);
  }
  else
  {
    v35 = 1;
  }
  if (v32 < 0)
    v31 = v33;
  v3 = (v3 + v35 + v31 + 1);
  if ((v2 & 0xFF00) != 0)
    goto LABEL_67;
LABEL_106:
  *((_DWORD *)this + 23) = v3;
  return v3;
}

void awd::metrics::CommCenterWakeReasonInfo::CopyFrom(awd::metrics::CommCenterWakeReasonInfo *this, const awd::metrics::CommCenterWakeReasonInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(awd::metrics::CommCenterWakeReasonInfo *))(*(_QWORD *)this + 32))(this);
    awd::metrics::CommCenterWakeReasonInfo::MergeFrom(this, a2);
  }
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::IsInitialized(awd::metrics::CommCenterWakeReasonInfo *this)
{
  return 1;
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::Swap(uint64_t this, awd::metrics::CommCenterWakeReasonInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != (awd::metrics::CommCenterWakeReasonInfo *)this)
  {
    v2 = *(_QWORD *)(this + 8);
    v3 = *(_QWORD *)(this + 16);
    v4 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 1);
    *(_QWORD *)(this + 16) = v4;
    *((_QWORD *)a2 + 1) = v2;
    *((_QWORD *)a2 + 2) = v3;
    LOBYTE(v2) = *(_BYTE *)(this + 52);
    *(_BYTE *)(this + 52) = *((_BYTE *)a2 + 52);
    *((_BYTE *)a2 + 52) = v2;
    v5 = *(_QWORD *)(this + 24);
    *(_QWORD *)(this + 24) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v5;
    v6 = *(_QWORD *)(this + 32);
    *(_QWORD *)(this + 32) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v6;
    v7 = *(_QWORD *)(this + 40);
    *(_QWORD *)(this + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v7;
    v8 = *(_QWORD *)(this + 56);
    *(_QWORD *)(this + 56) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v8;
    v9 = *(_QWORD *)(this + 64);
    *(_QWORD *)(this + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 80);
    *(_DWORD *)(this + 80) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = v9;
    v10 = *(_QWORD *)(this + 72);
    *(_QWORD *)(this + 72) = *((_QWORD *)a2 + 9);
    *((_QWORD *)a2 + 9) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 84);
    *(_DWORD *)(this + 84) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 88);
    *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = v10;
    LOBYTE(v10) = *(_BYTE *)(this + 53);
    *(_BYTE *)(this + 53) = *((_BYTE *)a2 + 53);
    *((_BYTE *)a2 + 53) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 96);
    *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
    *((_DWORD *)a2 + 24) = v10;
    LODWORD(v10) = *(_DWORD *)(this + 92);
    *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
    *((_DWORD *)a2 + 23) = v10;
  }
  return this;
}

char *awd::metrics::CommCenterWakeReasonInfo::GetTypeName@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_1BF744410;
  strcpy(result, "awd.metrics.CommCenterWakeReasonInfo");
  return result;
}

uint64_t awd::metrics::CommCenterPowerVotingRecord::GetCachedSize(awd::metrics::CommCenterPowerVotingRecord *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t awd::metrics::CommCenterPowerTransitionSuccess::GetCachedSize(awd::metrics::CommCenterPowerTransitionSuccess *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t awd::metrics::CommCenterPowerTransitionFailure::GetCachedSize(awd::metrics::CommCenterPowerTransitionFailure *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t awd::metrics::CommCenterMissedMTMessage::GetCachedSize(awd::metrics::CommCenterMissedMTMessage *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t awd::metrics::CommCenterLowPowerEvent::GetCachedSize(awd::metrics::CommCenterLowPowerEvent *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t awd::metrics::CommCenterWakeInfo::GetCachedSize(awd::metrics::CommCenterWakeInfo *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t awd::metrics::CommCenterLowPowerStats::GetCachedSize(awd::metrics::CommCenterLowPowerStats *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t awd::metrics::CommCenterWakeReasonInfo::GetCachedSize(awd::metrics::CommCenterWakeReasonInfo *this)
{
  return *((unsigned int *)this + 23);
}

void StatsAWD::create(uint64_t *a1@<X8>)
{
  StatsAWD *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (StatsAWD *)operator new(0x78uLL);
  StatsAWD::StatsAWD(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  std::shared_ptr<StatsAWD>::shared_ptr[abi:ne180100]<StatsAWD,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1},void>(a1, (uint64_t)v3);
  ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a1);
  v4 = *a1;
  if (*a1)
  {
    abm::AWDHelperGetConnection(&v12);
    v5 = v12;
    v12 = 0uLL;
    v6 = *(std::__shared_weak_count **)(v4 + 112);
    *(_OWORD *)(v4 + 104) = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void sub_1BF7218B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF7218C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_1BF7218DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  v2 = v1;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void StatsAWD::init(StatsAWD *this)
{
  __int128 v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  abm::AWDHelperGetConnection(&v9);
  v2 = v9;
  v9 = 0uLL;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  *(_OWORD *)((char *)this + 104) = v2;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (!*((_QWORD *)&v9 + 1))
      return;
  }
  else
  {
LABEL_5:
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
    if (!*((_QWORD *)&v9 + 1))
      return;
  }
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void StatsAWD::StatsAWD(StatsAWD *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  _BYTE v11[16];
  dispatch_object_t object[5];

  *(_QWORD *)this = off_1E7922088;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v11, "com.apple.telephony.abm", "stats.awd");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_8;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = unk_1ED70F6A0;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v3 = unk_1ED70F6A0;
    v9 = GetABMLogServer(void)::sLogServer;
    v10 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  object[0] = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable((_QWORD *)this + 9, "stats.awd", QOS_CLASS_DEFAULT, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v11, &v9);
  *(_QWORD *)this = off_1E79221E8;
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v11);
  *(_QWORD *)this = off_1E7922088;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
}

void sub_1BF721B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF721B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

const char *StatsAWD::getName(StatsAWD *this)
{
  return "stats.awd";
}

void StatsAWD::~StatsAWD(StatsAWD *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E7922088;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E7922158;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 12);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E7922088;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E7922158;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 12);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  NSObject *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)this = off_1E7922088;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)this = off_1E7922158;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v5 = *((_QWORD *)this + 12);
  if (v5)
    dispatch_release(v5);
  v6 = *((_QWORD *)this + 11);
  if (v6)
    dispatch_release(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  operator delete(this);
}

void StatsAWD::submit_sync(uint64_t a1, int a2, xpc_object_t *a3)
{
  wis::MetricFactory *SharedMetricFactory;
  uint64_t v7;
  wis::MetricContainer *v8;
  xpc_object_t v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  NSObject *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  uint64_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  uint64_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  uint64_t v28;
  xpc_object_t v29;
  int v30;
  wis *v31;
  uint64_t v32;
  int v33;
  wis *v34;
  uint64_t v35;
  int v36;
  wis *v37;
  uint64_t v38;
  xpc_object_t v39;
  int v40;
  wis *v41;
  uint64_t v42;
  int v43;
  wis *v44;
  uint64_t v45;
  _BOOL4 v46;
  wis *v47;
  uint64_t v48;
  int v49;
  wis *v50;
  uint64_t v51;
  int v52;
  wis *v53;
  uint64_t v54;
  _BOOL4 v55;
  wis *v56;
  uint64_t WISTimestamp;
  int v58;
  NSObject *v59;
  uint8_t *v60;
  wis::MetricContainer *v61;
  uint8_t buf[8];
  char v63;
  uint8_t v64[8];
  __int16 v65;
  uint8_t *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 104))
  {
    v10 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v11 = "Failed: AWD connection setup failed";
    v12 = v10;
    v13 = 2;
    goto LABEL_137;
  }
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)a1);
  v7 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory);
  v61 = (wis::MetricContainer *)v7;
  if (!v7)
  {
    v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_debug_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEBUG, "#D Failed to get the metric of 0x%x", buf, 8u);
    }
    return;
  }
  v8 = (wis::MetricContainer *)v7;
  if (a2 <= 524463)
  {
    switch(a2)
    {
      case 524310:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x48uLL);
        v22 = MEMORY[0x1E0DE8338];
        *(_QWORD *)v17 = off_1E791D028;
        *((_QWORD *)v17 + 1) = v22;
        *((_WORD *)v17 + 20) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v22;
        *((_QWORD *)v17 + 4) = v22;
        *((_DWORD *)v17 + 11) = 0;
        *((_QWORD *)v17 + 6) = v22;
        *((_QWORD *)v17 + 7) = 0;
        *((_QWORD *)v17 + 8) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9 && MEMORY[0x1C3B8CD78](v9) == MEMORY[0x1E0C812F8])
        {
          xpc_retain(v9);
          v39 = v9;
        }
        else
        {
          v39 = xpc_null_create();
          *(_QWORD *)v64 = v39;
        }
        v55 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, (xpc_object_t *)v64);
        xpc_release(v39);
        if (v55)
        {
          if ((v17[69] & 1) != 0)
          {
            WISTimestamp = *((_QWORD *)v17 + 7);
          }
          else
          {
            WISTimestamp = wis::getWISTimestamp(v56);
            *((_DWORD *)v17 + 17) |= 0x100u;
            *((_QWORD *)v17 + 7) = WISTimestamp;
          }
          wis::MetricContainer::storeMetric(v61, WISTimestamp, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524365:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x30uLL);
        *(_QWORD *)v17 = off_1E791CE48;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 5) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = 0;
        *((_DWORD *)v17 + 8) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v27 = v9;
        }
        else
        {
          v27 = xpc_null_create();
          *(_QWORD *)v64 = v27;
        }
        v49 = StatsAWD::fillMetric_sync(a1, (int **)buf, v64);
        xpc_release(v27);
        if (v49)
        {
          if ((v17[44] & 1) != 0)
          {
            v51 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v51 = wis::getWISTimestamp(v50);
            *((_DWORD *)v17 + 11) |= 1u;
            *((_QWORD *)v17 + 1) = v51;
          }
          wis::MetricContainer::storeMetric(v61, v51, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524384:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x30uLL);
        *(_QWORD *)v17 = off_1E791CD58;
        *((_QWORD *)v17 + 1) = 0;
        *((_QWORD *)v17 + 4) = 0;
        *((_DWORD *)v17 + 10) = 0;
        *((_QWORD *)v17 + 2) = 0;
        *(_QWORD *)(v17 + 21) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v20 = v9;
        }
        else
        {
          v20 = xpc_null_create();
          *(_QWORD *)v64 = v20;
        }
        v33 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v20);
        if (v33)
        {
          if ((v17[40] & 1) != 0)
          {
            v35 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v35 = wis::getWISTimestamp(v34);
            *((_DWORD *)v17 + 10) |= 1u;
            *((_QWORD *)v17 + 1) = v35;
          }
          wis::MetricContainer::storeMetric(v61, v35, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      default:
LABEL_32:
        v15 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = a2;
          _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, "Failed to setup metric id (0x%x)", buf, 8u);
        }
        wis::MetricContainer::~MetricContainer(v8);
        goto LABEL_133;
    }
  }
  else
  {
    switch(a2)
    {
      case 524464:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x28uLL);
        *(_QWORD *)v17 = off_1E7921DE8;
        *((_QWORD *)v17 + 1) = 0;
        v18 = MEMORY[0x1E0DE8338];
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = v18;
        *((_QWORD *)v17 + 4) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v19 = v9;
        }
        else
        {
          v19 = xpc_null_create();
          *(_QWORD *)v64 = v19;
        }
        v30 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v19);
        if (v30)
        {
          if ((v17[36] & 1) != 0)
          {
            v32 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v32 = wis::getWISTimestamp(v31);
            *((_DWORD *)v17 + 9) |= 1u;
            *((_QWORD *)v17 + 1) = v32;
          }
          wis::MetricContainer::storeMetric(v61, v32, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524465:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x28uLL);
        *((_QWORD *)v17 + 1) = 0;
        *(_QWORD *)v17 = off_1E7921E60;
        *((_QWORD *)v17 + 2) = 0;
        *((_QWORD *)v17 + 3) = 0;
        *((_DWORD *)v17 + 8) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v23 = v9;
        }
        else
        {
          v23 = xpc_null_create();
          *(_QWORD *)v64 = v23;
        }
        v40 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v23);
        if (v40)
        {
          if ((v17[32] & 1) != 0)
          {
            v42 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v42 = wis::getWISTimestamp(v41);
            *((_DWORD *)v17 + 8) |= 1u;
            *((_QWORD *)v17 + 1) = v42;
          }
          wis::MetricContainer::storeMetric(v61, v42, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524466:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x50uLL);
        *(_QWORD *)v17 = off_1E7921ED8;
        *(_OWORD *)(v17 + 8) = 0u;
        *((_QWORD *)v17 + 8) = 0;
        *((_DWORD *)v17 + 18) = 0;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *((_DWORD *)v17 + 14) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v24 = v9;
        }
        else
        {
          v24 = xpc_null_create();
          *(_QWORD *)v64 = v24;
        }
        v43 = StatsAWD::fillMetric_sync(a1, (int **)buf, (void **)v64);
        xpc_release(v24);
        if (v43)
        {
          if ((v17[72] & 1) != 0)
          {
            v45 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v45 = wis::getWISTimestamp(v44);
            *((_DWORD *)v17 + 18) |= 1u;
            *((_QWORD *)v17 + 1) = v45;
          }
          wis::MetricContainer::storeMetric(v61, v45, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      case 524467:
        v9 = *a3;
        if (*a3)
          xpc_retain(*a3);
        else
          v9 = xpc_null_create();
        v17 = (char *)operator new(0x68uLL);
        *(_QWORD *)v17 = off_1E7921F50;
        *((_QWORD *)v17 + 1) = 0;
        v25 = MEMORY[0x1E0DE8338];
        *((_WORD *)v17 + 26) = 0;
        *((_QWORD *)v17 + 2) = v25;
        *((_QWORD *)v17 + 3) = v25;
        *((_DWORD *)v17 + 12) = 0;
        *((_QWORD *)v17 + 4) = v25;
        *((_QWORD *)v17 + 5) = v25;
        *((_QWORD *)v17 + 7) = v25;
        *((_QWORD *)v17 + 8) = v25;
        *((_QWORD *)v17 + 9) = v25;
        *((_QWORD *)v17 + 10) = 0;
        *((_QWORD *)v17 + 11) = 0;
        *((_DWORD *)v17 + 24) = 0;
        *(_QWORD *)buf = v17;
        *(_QWORD *)v64 = v9;
        if (v9)
        {
          xpc_retain(v9);
          v26 = v9;
        }
        else
        {
          v26 = xpc_null_create();
          *(_QWORD *)v64 = v26;
        }
        v46 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
        xpc_release(v26);
        if (v46)
        {
          if ((v17[96] & 1) != 0)
          {
            v48 = *((_QWORD *)v17 + 1);
          }
          else
          {
            v48 = wis::getWISTimestamp(v47);
            *((_DWORD *)v17 + 24) |= 1u;
            *((_QWORD *)v17 + 1) = v48;
          }
          wis::MetricContainer::storeMetric(v61, v48, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
        }
        break;
      default:
        if (a2 == 524539)
        {
          v9 = *a3;
          if (*a3)
            xpc_retain(*a3);
          else
            v9 = xpc_null_create();
          v17 = (char *)operator new(0x28uLL);
          *(_QWORD *)v17 = off_1E791CEC0;
          *((_QWORD *)v17 + 1) = 0;
          v28 = MEMORY[0x1E0DE8338];
          *((_QWORD *)v17 + 2) = MEMORY[0x1E0DE8338];
          *((_QWORD *)v17 + 3) = v28;
          *((_QWORD *)v17 + 4) = 0;
          *(_QWORD *)buf = v17;
          *(_QWORD *)v64 = v9;
          if (v9)
          {
            xpc_retain(v9);
            v29 = v9;
          }
          else
          {
            v29 = xpc_null_create();
            *(_QWORD *)v64 = v29;
          }
          v52 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
          xpc_release(v29);
          if (v52)
          {
            if ((v17[36] & 1) != 0)
            {
              v54 = *((_QWORD *)v17 + 1);
            }
            else
            {
              v54 = wis::getWISTimestamp(v53);
              *((_DWORD *)v17 + 9) |= 1u;
              *((_QWORD *)v17 + 1) = v54;
            }
            wis::MetricContainer::storeMetric(v61, v54, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
          }
        }
        else
        {
          if (a2 != 524584)
            goto LABEL_32;
          v9 = *a3;
          if (*a3)
            xpc_retain(*a3);
          else
            v9 = xpc_null_create();
          v17 = (char *)operator new(0x20uLL);
          *(_QWORD *)v17 = off_1E791CFB0;
          *((_QWORD *)v17 + 1) = 0;
          *((_QWORD *)v17 + 2) = 0;
          *((_QWORD *)v17 + 3) = 0;
          *(_QWORD *)buf = v17;
          *(_QWORD *)v64 = v9;
          if (v9)
          {
            xpc_retain(v9);
            v21 = v9;
          }
          else
          {
            v21 = xpc_null_create();
            *(_QWORD *)v64 = v21;
          }
          v36 = StatsAWD::fillMetric_sync(a1, (uint64_t *)buf, v64);
          xpc_release(v21);
          if (v36)
          {
            if ((v17[28] & 1) != 0)
            {
              v38 = *((_QWORD *)v17 + 1);
            }
            else
            {
              v38 = wis::getWISTimestamp(v37);
              *((_DWORD *)v17 + 7) |= 1u;
              *((_QWORD *)v17 + 1) = v38;
            }
            wis::MetricContainer::storeMetric(v61, v38, *(unsigned int *)v61, (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
          }
        }
        break;
    }
  }
  (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
  xpc_release(v9);
  v58 = wis::WISServerConnection::SubmitMetric(*(wis::WISServerConnection **)(a1 + 104), v61);
  v59 = *(NSObject **)(a1 + 40);
  if (!v58)
  {
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    v11 = "Failed to submit metric id (0x%x)";
    v12 = v59;
    v13 = 8;
LABEL_137:
    _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return;
  }
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((xpc::object *)a3);
    v60 = v63 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)v64 = 67109378;
    *(_DWORD *)&v64[4] = a2;
    v65 = 2082;
    v66 = v60;
    _os_log_impl(&dword_1BF566000, v59, OS_LOG_TYPE_DEFAULT, "#I Submitted AWD metric (0x%x) with data: %{public}s", v64, 0x12u);
    if (v63 < 0)
    {
      v16 = *(void **)buf;
LABEL_133:
      operator delete(v16);
    }
  }
}

void sub_1BF722948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  xpc_release(v2);
  std::unique_ptr<wis::MetricContainer>::~unique_ptr[abi:ne180100]((wis::MetricContainer **)va);
  _Unwind_Resume(a1);
}

wis::MetricContainer **std::unique_ptr<wis::MetricContainer>::~unique_ptr[abi:ne180100](wis::MetricContainer **a1)
{
  wis::MetricContainer *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    wis::MetricContainer::~MetricContainer(v2);
    operator delete(v3);
  }
  return a1;
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  char v22;
  char *v23;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  xpc_object_t *v29;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8CD78](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8CD78](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in boot time handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB260];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB260])
    || (v9 = (const char *)*MEMORY[0x1E0CFB320], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB320]))
    || (v10 = (const char *)*MEMORY[0x1E0CFB268], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB268])))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      v14 = 0;
      goto LABEL_15;
    }
    v23 = (char *)MEMORY[0x1C3B8CCDC](v5);
    memset(object, 170, 24);
    v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v25 = (void *)v24;
    if (v24 >= 0x17)
    {
      v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v27 = v24 | 7;
      v28 = v27 + 1;
      v26 = operator new(v27 + 1);
      object[1] = v25;
      object[2] = (xpc_object_t)(v28 | 0x8000000000000000);
      object[0] = v26;
    }
    else
    {
      HIBYTE(object[2]) = v24;
      v26 = object;
      if (!v24)
        goto LABEL_32;
    }
    memcpy(v26, v23, (size_t)v25);
LABEL_32:
    *((_BYTE *)v25 + (_QWORD)v26) = 0;
    free(v23);
    v29 = object;
    if (SHIBYTE(object[2]) < 0)
      v29 = (xpc_object_t *)object[0];
    *(_DWORD *)buf = 136315138;
    v32 = v29;
    _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of boot time is missing: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_14;
  }
  v11 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 40) |= 4u;
  *(_DWORD *)(v11 + 24) = v16;
  xpc_release(object[0]);
  v17 = *a2;
  v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18)
    xpc_retain(v18);
  else
    object[0] = xpc_null_create();
  v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 40) |= 2u;
  *(_QWORD *)(v17 + 16) = v19;
  xpc_release(object[0]);
  v20 = *a2;
  v21 = xpc_dictionary_get_value(v5, v10);
  object[0] = v21;
  if (v21)
    xpc_retain(v21);
  else
    object[0] = xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v20 + 40) |= 8u;
  *(_BYTE *)(v20 + 28) = v22;
  xpc_release(object[0]);
  v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t *v23;
  void *v24;
  __int128 v25;
  xpc_object_t *v26;
  xpc_object_t v27;
  char *v28;
  size_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  xpc_object_t *v34;
  xpc_object_t object[4];
  _BYTE v36[24];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8CD78](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8CD78](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in low power event handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB510];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB510])
    || (v9 = (const char *)*MEMORY[0x1E0CFB520], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB520]))
    || (v10 = (const char *)*MEMORY[0x1E0CFB270], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB270])))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      v14 = 0;
      goto LABEL_15;
    }
    v28 = (char *)MEMORY[0x1C3B8CCDC](v5);
    memset(object, 170, 24);
    v29 = strlen(v28);
    if (v29 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v30 = (void *)v29;
    if (v29 >= 0x17)
    {
      v32 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17)
        v32 = v29 | 7;
      v33 = v32 + 1;
      v31 = operator new(v32 + 1);
      object[1] = v30;
      object[2] = (xpc_object_t)(v33 | 0x8000000000000000);
      object[0] = v31;
    }
    else
    {
      HIBYTE(object[2]) = v29;
      v31 = object;
      if (!v29)
        goto LABEL_48;
    }
    memcpy(v31, v28, (size_t)v30);
LABEL_48:
    *((_BYTE *)v30 + (_QWORD)v31) = 0;
    free(v28);
    v34 = object;
    if (SHIBYTE(object[2]) < 0)
      v34 = (xpc_object_t *)object[0];
    *(_DWORD *)v36 = 136315138;
    *(_QWORD *)&v36[4] = v34;
    _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of low power event is missing: %s", v36, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_14;
  }
  v11 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 36) |= 2u;
  *(_DWORD *)(v11 + 16) = v16;
  xpc_release(object[0]);
  v17 = *a2;
  v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18)
    xpc_retain(v18);
  else
    object[0] = xpc_null_create();
  v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 36) |= 4u;
  *(_DWORD *)(v17 + 20) = v19;
  xpc_release(object[0]);
  v20 = *a2;
  v21 = xpc_dictionary_get_value(v5, v10);
  *(_QWORD *)v36 = v21;
  if (v21)
    xpc_retain(v21);
  else
    *(_QWORD *)v36 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)v36, (const object *)"", v22);
  *(_DWORD *)(v20 + 36) |= 8u;
  v23 = *(xpc_object_t **)(v20 + 24);
  if (v23 == (xpc_object_t *)MEMORY[0x1E0DE8338])
  {
    v23 = (xpc_object_t *)operator new(0x18uLL);
    *v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
    *(_QWORD *)(v20 + 24) = v23;
    v24 = (void *)HIBYTE(object[2]);
    if ((*((char *)v23 + 23) & 0x80000000) == 0)
    {
LABEL_26:
      if ((v24 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v23, object[0], (size_t)object[1]);
      }
      else
      {
        v25 = *(_OWORD *)object;
        v23[2] = object[2];
        *(_OWORD *)v23 = v25;
      }
      goto LABEL_41;
    }
LABEL_29:
    if ((char)v24 >= 0)
      v26 = object;
    else
      v26 = (xpc_object_t *)object[0];
    if ((char)v24 >= 0)
      v27 = v24;
    else
      v27 = object[1];
    std::string::__assign_no_alias<false>(v23, v26, (size_t)v27);
    goto LABEL_41;
  }
  if (v23 != object)
  {
    v24 = (void *)HIBYTE(object[2]);
    if ((*((char *)v23 + 23) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_29;
  }
LABEL_41:
  if (SHIBYTE(object[2]) < 0)
    operator delete(object[0]);
  xpc_release(*(xpc_object_t *)v36);
  v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  xpc_object_t value;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  xpc_object_t v18;
  int v19;
  uint64_t v20;
  xpc_object_t v21;
  int v22;
  char *v23;
  size_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  xpc_object_t *v29;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8CD78](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8CD78](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in wake info handling", (uint8_t *)object, 2u);
    }
    goto LABEL_14;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB9C0];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB9C0])
    || (v9 = (const char *)*MEMORY[0x1E0CFBD70], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBD70]))
    || (v10 = (const char *)*MEMORY[0x1E0CFBC78], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBC78])))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      v14 = 0;
      goto LABEL_15;
    }
    v23 = (char *)MEMORY[0x1C3B8CCDC](v5);
    memset(object, 170, 24);
    v24 = strlen(v23);
    if (v24 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v25 = (void *)v24;
    if (v24 >= 0x17)
    {
      v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17)
        v27 = v24 | 7;
      v28 = v27 + 1;
      v26 = operator new(v27 + 1);
      object[1] = v25;
      object[2] = (xpc_object_t)(v28 | 0x8000000000000000);
      object[0] = v26;
    }
    else
    {
      HIBYTE(object[2]) = v24;
      v26 = object;
      if (!v24)
        goto LABEL_32;
    }
    memcpy(v26, v23, (size_t)v25);
LABEL_32:
    *((_BYTE *)v25 + (_QWORD)v26) = 0;
    free(v23);
    v29 = object;
    if (SHIBYTE(object[2]) < 0)
      v29 = (xpc_object_t *)object[0];
    *(_DWORD *)buf = 136315138;
    v32 = v29;
    _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of wake info is missing: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_14;
  }
  v11 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v16 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v11 + 32) |= 2u;
  *(_DWORD *)(v11 + 16) = v16;
  xpc_release(object[0]);
  v17 = *a2;
  v18 = xpc_dictionary_get_value(v5, v9);
  object[0] = v18;
  if (v18)
    xpc_retain(v18);
  else
    object[0] = xpc_null_create();
  v19 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v17 + 32) |= 4u;
  *(_DWORD *)(v17 + 20) = v19;
  xpc_release(object[0]);
  v20 = *a2;
  v21 = xpc_dictionary_get_value(v5, v10);
  object[0] = v21;
  if (v21)
    xpc_retain(v21);
  else
    object[0] = xpc_null_create();
  v22 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v20 + 32) |= 8u;
  *(_DWORD *)(v20 + 24) = v22;
  xpc_release(object[0]);
  v14 = 1;
LABEL_15:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  void **v16;
  void **v17;
  void *v18;
  __int128 v19;
  void **v20;
  void *v21;
  uint64_t v22;
  xpc_object_t v23;
  const char *v24;
  void **v25;
  void *v26;
  __int128 v27;
  void **v28;
  void *v29;
  char *v30;
  size_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void *__p[4];
  _BYTE object[24];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8CD78](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8CD78](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in bb trace handling", (uint8_t *)__p, 2u);
    }
    goto LABEL_13;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB760];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB760])
    || (v9 = (const char *)*MEMORY[0x1E0CFB9C8], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB9C8])))
  {
    v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      v14 = 0;
      goto LABEL_14;
    }
    v30 = (char *)MEMORY[0x1C3B8CCDC](v5);
    memset(__p, 170, 24);
    v31 = strlen(v30);
    if (v31 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v32 = (void *)v31;
    if (v31 >= 0x17)
    {
      v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v34 = v31 | 7;
      v35 = v34 + 1;
      v33 = operator new(v34 + 1);
      __p[1] = v32;
      __p[2] = (void *)(v35 | 0x8000000000000000);
      __p[0] = v33;
    }
    else
    {
      HIBYTE(__p[2]) = v31;
      v33 = __p;
      if (!v31)
        goto LABEL_60;
    }
    memcpy(v33, v30, (size_t)v32);
LABEL_60:
    *((_BYTE *)v32 + (_QWORD)v33) = 0;
    free(v30);
    v36 = __p;
    if (SHIBYTE(__p[2]) < 0)
      v36 = (void **)__p[0];
    *(_DWORD *)object = 136315138;
    *(_QWORD *)&object[4] = v36;
    _os_log_error_impl(&dword_1BF566000, v13, OS_LOG_TYPE_ERROR, "Failed: One of elements of bb trace is missing: %s", object, 0xCu);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    goto LABEL_13;
  }
  v10 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  *(_QWORD *)object = value;
  if (value)
    xpc_retain(value);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v12);
  *(_DWORD *)(v10 + 36) |= 2u;
  v16 = *(void ***)(v10 + 16);
  v17 = (void **)MEMORY[0x1E0DE8338];
  if (v16 == (void **)MEMORY[0x1E0DE8338])
  {
    v16 = (void **)operator new(0x18uLL);
    *v16 = 0;
    v16[1] = 0;
    v16[2] = 0;
    *(_QWORD *)(v10 + 16) = v16;
    v18 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v16 + 23) & 0x80000000) == 0)
    {
LABEL_19:
      if ((v18 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v16, __p[0], (size_t)__p[1]);
      }
      else
      {
        v19 = *(_OWORD *)__p;
        v16[2] = __p[2];
        *(_OWORD *)v16 = v19;
      }
      goto LABEL_30;
    }
  }
  else
  {
    if (v16 == __p)
      goto LABEL_30;
    v18 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v16 + 23) & 0x80000000) == 0)
      goto LABEL_19;
  }
  if ((char)v18 >= 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if ((char)v18 >= 0)
    v21 = v18;
  else
    v21 = __p[1];
  std::string::__assign_no_alias<false>(v16, v20, (size_t)v21);
LABEL_30:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  xpc_release(*(xpc_object_t *)object);
  v22 = *a2;
  v23 = xpc_dictionary_get_value(v5, v9);
  *(_QWORD *)object = v23;
  if (v23)
    xpc_retain(v23);
  else
    *(_QWORD *)object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)object, (const object *)"", v24);
  *(_DWORD *)(v22 + 36) |= 4u;
  v25 = *(void ***)(v22 + 24);
  if (v25 == v17)
  {
    v25 = (void **)operator new(0x18uLL);
    *v25 = 0;
    v25[1] = 0;
    v25[2] = 0;
    *(_QWORD *)(v22 + 24) = v25;
    v26 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v25 + 23) & 0x80000000) == 0)
    {
LABEL_38:
      if ((v26 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v25, __p[0], (size_t)__p[1]);
      }
      else
      {
        v27 = *(_OWORD *)__p;
        v25[2] = __p[2];
        *(_OWORD *)v25 = v27;
      }
      goto LABEL_49;
    }
LABEL_41:
    if ((char)v26 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((char)v26 >= 0)
      v29 = v26;
    else
      v29 = __p[1];
    std::string::__assign_no_alias<false>(v25, v28, (size_t)v29);
    goto LABEL_49;
  }
  if (v25 != __p)
  {
    v26 = (void *)HIBYTE(__p[2]);
    if ((*((char *)v25 + 23) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_41;
  }
LABEL_49:
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  xpc_release(*(xpc_object_t *)object);
  v14 = 1;
LABEL_14:
  xpc_release(v5);
  return v14;
}

{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  xpc_object_t value;
  NSObject *v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  xpc_object_t v17;
  int v18;
  char *v19;
  size_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  xpc_object_t *v25;
  xpc_object_t object[4];
  uint8_t buf[4];
  xpc_object_t *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8CD78](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8CD78](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(object[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in Accessory Information reporting.", (uint8_t *)object, 2u);
    }
    goto LABEL_13;
  }
  v8 = (const char *)*MEMORY[0x1E0CFB3D0];
  if (!xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB3D0])
    || (v9 = (const char *)*MEMORY[0x1E0CFB4F8], !xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB4F8])))
  {
    v12 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      v13 = 0;
      goto LABEL_14;
    }
    v19 = (char *)MEMORY[0x1C3B8CCDC](v5);
    memset(object, 170, 24);
    v20 = strlen(v19);
    if (v20 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v21 = (void *)v20;
    if (v20 >= 0x17)
    {
      v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v20 | 7) != 0x17)
        v23 = v20 | 7;
      v24 = v23 + 1;
      v22 = operator new(v23 + 1);
      object[1] = v21;
      object[2] = (xpc_object_t)(v24 | 0x8000000000000000);
      object[0] = v22;
    }
    else
    {
      HIBYTE(object[2]) = v20;
      v22 = object;
      if (!v20)
        goto LABEL_28;
    }
    memcpy(v22, v19, (size_t)v21);
LABEL_28:
    *((_BYTE *)v21 + (_QWORD)v22) = 0;
    free(v19);
    v25 = object;
    if (SHIBYTE(object[2]) < 0)
      v25 = (xpc_object_t *)object[0];
    *(_DWORD *)buf = 136315138;
    v28 = v25;
    _os_log_error_impl(&dword_1BF566000, v12, OS_LOG_TYPE_ERROR, "Failed: One of elements is missing in Accessory Information reporting: %s", buf, 0xCu);
    if (SHIBYTE(object[2]) < 0)
      operator delete(object[0]);
    goto LABEL_13;
  }
  v10 = *a2;
  value = xpc_dictionary_get_value(v5, v8);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  v15 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v10 + 28) |= 2u;
  *(_DWORD *)(v10 + 16) = v15;
  xpc_release(object[0]);
  v16 = *a2;
  v17 = xpc_dictionary_get_value(v5, v9);
  object[0] = v17;
  if (v17)
    xpc_retain(v17);
  else
    object[0] = xpc_null_create();
  v18 = xpc::dyn_cast_or_default((xpc *)object, 0);
  *(_DWORD *)(v16 + 28) |= 4u;
  *(_DWORD *)(v16 + 20) = v18;
  xpc_release(object[0]);
  v13 = 1;
LABEL_14:
  xpc_release(v5);
  return v13;
}

void sub_1BF722FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  xpc_object_t value;
  const char *v11;
  uint8_t *v12;
  uint8_t *v13;
  size_t v14;
  __int128 v15;
  uint8_t *v16;
  size_t v17;
  uint64_t v18;
  xpc_object_t v19;
  char v20;
  uint64_t v21;
  xpc_object_t v22;
  const char *v23;
  uint8_t *v24;
  size_t v25;
  __int128 v26;
  uint8_t *v27;
  size_t v28;
  uint64_t v29;
  xpc_object_t v30;
  int v31;
  uint64_t v32;
  xpc_object_t v33;
  const char *v34;
  uint8_t *v35;
  size_t v36;
  __int128 v37;
  uint8_t *v38;
  size_t v39;
  uint64_t v40;
  xpc_object_t v41;
  const char *v42;
  uint8_t *v43;
  size_t v44;
  __int128 v45;
  uint8_t *v46;
  size_t v47;
  uint64_t v48;
  xpc_object_t v49;
  const char *v50;
  uint8_t *v51;
  size_t v52;
  __int128 v53;
  uint8_t *v54;
  size_t v55;
  uint64_t v56;
  xpc_object_t v57;
  const char *v58;
  uint8_t *v59;
  size_t v60;
  __int128 v61;
  uint8_t *v62;
  size_t v63;
  uint64_t v64;
  xpc_object_t v65;
  int v66;
  uint64_t v67;
  xpc_object_t v68;
  const char *v69;
  uint8_t *v70;
  size_t v71;
  __int128 v72;
  uint8_t *v73;
  size_t v74;
  uint64_t v75;
  xpc_object_t v76;
  int v77;
  uint64_t v78;
  xpc_object_t v79;
  int v80;
  uint64_t v81;
  xpc_object_t v82;
  char v83;
  xpc_object_t object;
  uint8_t buf[16];
  uint64_t v87;

  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812F8];
  if (*a3 && MEMORY[0x1C3B8CD78](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  v7 = MEMORY[0x1C3B8CD78](v5);
  if (v7 != v6)
  {
    v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Invalid AWD Wake Reason Info dictionary", buf, 2u);
    }
    goto LABEL_160;
  }
  v9 = *a2;
  value = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBF68]);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v11);
  *(_DWORD *)(v9 + 96) |= 2u;
  v12 = *(uint8_t **)(v9 + 16);
  v13 = (uint8_t *)MEMORY[0x1E0DE8338];
  if (v12 == (uint8_t *)MEMORY[0x1E0DE8338])
  {
    v12 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *(_QWORD *)(v9 + 16) = v12;
    v14 = HIBYTE(v87);
    if (((char)v12[23] & 0x80000000) == 0)
    {
LABEL_14:
      if ((v14 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v12, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v15 = *(_OWORD *)buf;
        *((_QWORD *)v12 + 2) = v87;
        *(_OWORD *)v12 = v15;
      }
      goto LABEL_25;
    }
  }
  else
  {
    if (v12 == buf)
      goto LABEL_25;
    v14 = HIBYTE(v87);
    if (((char)v12[23] & 0x80000000) == 0)
      goto LABEL_14;
  }
  if ((v14 & 0x80u) == 0)
    v16 = buf;
  else
    v16 = *(uint8_t **)buf;
  if ((v14 & 0x80u) == 0)
    v17 = v14;
  else
    v17 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v12, v16, v17);
LABEL_25:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v18 = *a2;
  v19 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBE58]);
  *(_QWORD *)buf = v19;
  if (v19)
    xpc_retain(v19);
  else
    *(_QWORD *)buf = xpc_null_create();
  v20 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v18 + 96) |= 4u;
  *(_BYTE *)(v18 + 52) = v20;
  xpc_release(*(xpc_object_t *)buf);
  v21 = *a2;
  v22 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFC018]);
  object = v22;
  if (v22)
    xpc_retain(v22);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v23);
  *(_DWORD *)(v21 + 96) |= 8u;
  v24 = *(uint8_t **)(v21 + 24);
  if (v24 == v13)
  {
    v24 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v24 = 0;
    *((_QWORD *)v24 + 1) = 0;
    *((_QWORD *)v24 + 2) = 0;
    *(_QWORD *)(v21 + 24) = v24;
    v25 = HIBYTE(v87);
    if (((char)v24[23] & 0x80000000) == 0)
    {
LABEL_36:
      if ((v25 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v24, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v26 = *(_OWORD *)buf;
        *((_QWORD *)v24 + 2) = v87;
        *(_OWORD *)v24 = v26;
      }
      goto LABEL_47;
    }
  }
  else
  {
    if (v24 == buf)
      goto LABEL_47;
    v25 = HIBYTE(v87);
    if (((char)v24[23] & 0x80000000) == 0)
      goto LABEL_36;
  }
  if ((v25 & 0x80u) == 0)
    v27 = buf;
  else
    v27 = *(uint8_t **)buf;
  if ((v25 & 0x80u) == 0)
    v28 = v25;
  else
    v28 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v24, v27, v28);
LABEL_47:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v29 = *a2;
  v30 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBEF8]);
  *(_QWORD *)buf = v30;
  if (v30)
    xpc_retain(v30);
  else
    *(_QWORD *)buf = xpc_null_create();
  v31 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v29 + 96) |= 0x10u;
  *(_DWORD *)(v29 + 48) = v31;
  xpc_release(*(xpc_object_t *)buf);
  v32 = *a2;
  v33 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBD80]);
  object = v33;
  if (v33)
    xpc_retain(v33);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v34);
  *(_DWORD *)(v32 + 96) |= 0x20u;
  v35 = *(uint8_t **)(v32 + 32);
  if (v35 == v13)
  {
    v35 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = 0;
    *((_QWORD *)v35 + 2) = 0;
    *(_QWORD *)(v32 + 32) = v35;
    v36 = HIBYTE(v87);
    if (((char)v35[23] & 0x80000000) == 0)
    {
LABEL_58:
      if ((v36 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v35, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v37 = *(_OWORD *)buf;
        *((_QWORD *)v35 + 2) = v87;
        *(_OWORD *)v35 = v37;
      }
      goto LABEL_69;
    }
  }
  else
  {
    if (v35 == buf)
      goto LABEL_69;
    v36 = HIBYTE(v87);
    if (((char)v35[23] & 0x80000000) == 0)
      goto LABEL_58;
  }
  if ((v36 & 0x80u) == 0)
    v38 = buf;
  else
    v38 = *(uint8_t **)buf;
  if ((v36 & 0x80u) == 0)
    v39 = v36;
  else
    v39 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v35, v38, v39);
LABEL_69:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v40 = *a2;
  v41 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBF00]);
  object = v41;
  if (v41)
    xpc_retain(v41);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v42);
  *(_DWORD *)(v40 + 96) |= 0x40u;
  v43 = *(uint8_t **)(v40 + 40);
  if (v43 == v13)
  {
    v43 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v43 = 0;
    *((_QWORD *)v43 + 1) = 0;
    *((_QWORD *)v43 + 2) = 0;
    *(_QWORD *)(v40 + 40) = v43;
    v44 = HIBYTE(v87);
    if (((char)v43[23] & 0x80000000) == 0)
    {
LABEL_77:
      if ((v44 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v43, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v45 = *(_OWORD *)buf;
        *((_QWORD *)v43 + 2) = v87;
        *(_OWORD *)v43 = v45;
      }
      goto LABEL_88;
    }
  }
  else
  {
    if (v43 == buf)
      goto LABEL_88;
    v44 = HIBYTE(v87);
    if (((char)v43[23] & 0x80000000) == 0)
      goto LABEL_77;
  }
  if ((v44 & 0x80u) == 0)
    v46 = buf;
  else
    v46 = *(uint8_t **)buf;
  if ((v44 & 0x80u) == 0)
    v47 = v44;
  else
    v47 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v43, v46, v47);
LABEL_88:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v48 = *a2;
  v49 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBE50]);
  object = v49;
  if (v49)
    xpc_retain(v49);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v50);
  *(_DWORD *)(v48 + 96) |= 0x80u;
  v51 = *(uint8_t **)(v48 + 56);
  if (v51 == v13)
  {
    v51 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v51 = 0;
    *((_QWORD *)v51 + 1) = 0;
    *((_QWORD *)v51 + 2) = 0;
    *(_QWORD *)(v48 + 56) = v51;
    v52 = HIBYTE(v87);
    if (((char)v51[23] & 0x80000000) == 0)
    {
LABEL_96:
      if ((v52 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v51, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v53 = *(_OWORD *)buf;
        *((_QWORD *)v51 + 2) = v87;
        *(_OWORD *)v51 = v53;
      }
      goto LABEL_107;
    }
  }
  else
  {
    if (v51 == buf)
      goto LABEL_107;
    v52 = HIBYTE(v87);
    if (((char)v51[23] & 0x80000000) == 0)
      goto LABEL_96;
  }
  if ((v52 & 0x80u) == 0)
    v54 = buf;
  else
    v54 = *(uint8_t **)buf;
  if ((v52 & 0x80u) == 0)
    v55 = v52;
  else
    v55 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v51, v54, v55);
LABEL_107:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v56 = *a2;
  v57 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBDC8]);
  object = v57;
  if (v57)
    xpc_retain(v57);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v58);
  *(_DWORD *)(v56 + 96) |= 0x100u;
  v59 = *(uint8_t **)(v56 + 64);
  if (v59 == v13)
  {
    v59 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v59 = 0;
    *((_QWORD *)v59 + 1) = 0;
    *((_QWORD *)v59 + 2) = 0;
    *(_QWORD *)(v56 + 64) = v59;
    v60 = HIBYTE(v87);
    if (((char)v59[23] & 0x80000000) == 0)
    {
LABEL_115:
      if ((v60 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v59, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v61 = *(_OWORD *)buf;
        *((_QWORD *)v59 + 2) = v87;
        *(_OWORD *)v59 = v61;
      }
      goto LABEL_126;
    }
  }
  else
  {
    if (v59 == buf)
      goto LABEL_126;
    v60 = HIBYTE(v87);
    if (((char)v59[23] & 0x80000000) == 0)
      goto LABEL_115;
  }
  if ((v60 & 0x80u) == 0)
    v62 = buf;
  else
    v62 = *(uint8_t **)buf;
  if ((v60 & 0x80u) == 0)
    v63 = v60;
  else
    v63 = *(_QWORD *)&buf[8];
  std::string::__assign_no_alias<false>((void **)v59, v62, v63);
LABEL_126:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v64 = *a2;
  v65 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBAE0]);
  *(_QWORD *)buf = v65;
  if (v65)
    xpc_retain(v65);
  else
    *(_QWORD *)buf = xpc_null_create();
  v66 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v64 + 96) |= 0x200u;
  *(_DWORD *)(v64 + 80) = v66;
  xpc_release(*(xpc_object_t *)buf);
  v67 = *a2;
  v68 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBC88]);
  object = v68;
  if (v68)
    xpc_retain(v68);
  else
    object = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, (const object *)"Unknown", v69);
  *(_DWORD *)(v67 + 96) |= 0x400u;
  v70 = *(uint8_t **)(v67 + 72);
  if (v70 == v13)
  {
    v70 = (uint8_t *)operator new(0x18uLL);
    *(_QWORD *)v70 = 0;
    *((_QWORD *)v70 + 1) = 0;
    *((_QWORD *)v70 + 2) = 0;
    *(_QWORD *)(v67 + 72) = v70;
    v71 = HIBYTE(v87);
    if (((char)v70[23] & 0x80000000) == 0)
    {
LABEL_137:
      if ((v71 & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v70, *(void **)buf, *(size_t *)&buf[8]);
      }
      else
      {
        v72 = *(_OWORD *)buf;
        *((_QWORD *)v70 + 2) = v87;
        *(_OWORD *)v70 = v72;
      }
      goto LABEL_148;
    }
LABEL_140:
    if ((v71 & 0x80u) == 0)
      v73 = buf;
    else
      v73 = *(uint8_t **)buf;
    if ((v71 & 0x80u) == 0)
      v74 = v71;
    else
      v74 = *(_QWORD *)&buf[8];
    std::string::__assign_no_alias<false>((void **)v70, v73, v74);
    goto LABEL_148;
  }
  if (v70 != buf)
  {
    v71 = HIBYTE(v87);
    if (((char)v70[23] & 0x80000000) == 0)
      goto LABEL_137;
    goto LABEL_140;
  }
LABEL_148:
  if (SHIBYTE(v87) < 0)
    operator delete(*(void **)buf);
  xpc_release(object);
  v75 = *a2;
  v76 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBD78]);
  *(_QWORD *)buf = v76;
  if (v76)
    xpc_retain(v76);
  else
    *(_QWORD *)buf = xpc_null_create();
  v77 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v75 + 96) |= 0x800u;
  *(_DWORD *)(v75 + 84) = v77;
  xpc_release(*(xpc_object_t *)buf);
  v78 = *a2;
  v79 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFBC80]);
  *(_QWORD *)buf = v79;
  if (v79)
    xpc_retain(v79);
  else
    *(_QWORD *)buf = xpc_null_create();
  v80 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v78 + 96) |= 0x1000u;
  *(_DWORD *)(v78 + 88) = v80;
  xpc_release(*(xpc_object_t *)buf);
  v81 = *a2;
  v82 = xpc_dictionary_get_value(v5, (const char *)*MEMORY[0x1E0CFB9D0]);
  *(_QWORD *)buf = v82;
  if (v82)
    xpc_retain(v82);
  else
    *(_QWORD *)buf = xpc_null_create();
  v83 = xpc::dyn_cast_or_default((xpc *)buf, 0);
  *(_DWORD *)(v81 + 96) |= 0x2000u;
  *(_BYTE *)(v81 + 53) = v83;
  xpc_release(*(xpc_object_t *)buf);
LABEL_160:
  xpc_release(v5);
  return v7 == v6;
}

void sub_1BF72399C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;

  if (a16 < 0)
    operator delete(__p);
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, int **a2, _QWORD *a3)
{
  xpc_object_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  size_t count;
  xpc_object_t v12;
  uint64_t v13;
  const char *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  NSObject *v24;
  const char *v25;
  char *v26;
  size_t v27;
  size_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  xpc_object_t value;
  const char *v34;
  void **v35;
  size_t v36;
  __int128 v37;
  _BYTE *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  xpc_object_t v43;
  int v44;
  xpc_object_t v45;
  const char *v46;
  void **v47;
  size_t v48;
  __int128 v49;
  _BYTE *v50;
  size_t v51;
  uint64_t v52;
  const char *v53;
  xpc_object_t v54;
  int **v55;
  _BYTE __dst[24];
  xpc_object_t xdict;
  xpc_object_t object;
  uint64_t v59;
  _BYTE buf[12];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = (xpc_object_t)*a3;
  v6 = MEMORY[0x1E0C812C8];
  if (*a3 && MEMORY[0x1C3B8CD78](*a3) == v6)
    xpc_retain(v5);
  else
    v5 = xpc_null_create();
  if (MEMORY[0x1C3B8CD78](v5) != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__dst = 0;
      _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, "Failed: Expected data needs to be dictionary in bb crash handling", __dst, 2u);
    }
    v8 = 0;
    goto LABEL_25;
  }
  if (v5)
  {
    xpc_retain(v5);
    object = v5;
    v9 = v5;
LABEL_12:
    xpc_retain(v9);
    goto LABEL_13;
  }
  v9 = xpc_null_create();
  object = v9;
  if (v9)
    goto LABEL_12;
  v9 = 0;
  object = xpc_null_create();
LABEL_13:
  v59 = 0;
  xpc_release(v9);
  if (v5)
  {
    xpc_retain(v5);
    v10 = v5;
  }
  else
  {
    v10 = xpc_null_create();
  }
  if (MEMORY[0x1C3B8CD78](v5) == v6)
  {
    count = xpc_array_get_count(v5);
    if (v10)
      goto LABEL_18;
LABEL_20:
    v12 = xpc_null_create();
    goto LABEL_21;
  }
  count = 0;
  if (!v10)
    goto LABEL_20;
LABEL_18:
  xpc_retain(v10);
  v12 = v10;
LABEL_21:
  xpc_release(v10);
  v13 = v59;
  if (v59 != count || object != v12)
  {
    v55 = a2;
    v15 = (const char *)*MEMORY[0x1E0CFB758];
    v16 = (const char *)*MEMORY[0x1E0CFB640];
    v17 = (const char *)*MEMORY[0x1E0CFB3E0];
    while (1)
    {
      xdict = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)__dst = &object;
      *(_QWORD *)&__dst[8] = v13;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)__dst, &xdict);
      if (MEMORY[0x1C3B8CD78](xdict) == MEMORY[0x1E0C812F8]
        && xpc_dictionary_get_value(xdict, v15)
        && xpc_dictionary_get_value(xdict, v16)
        && xpc_dictionary_get_value(xdict, v17))
      {
        v19 = *v55;
        v20 = (*v55)[7];
        v21 = (*v55)[6];
        if ((int)v21 >= v20)
        {
          if (v20 == v19[8])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v19 + 4));
            v20 = v19[7];
          }
          v19[7] = v20 + 1;
          v23 = operator new(0x28uLL);
          *v23 = off_1E791CDD0;
          v30 = MEMORY[0x1E0DE8338];
          v23[1] = MEMORY[0x1E0DE8338];
          v23[2] = v30;
          v23[3] = 0;
          *((_DWORD *)v23 + 8) = 0;
          v31 = *((_QWORD *)v19 + 2);
          v32 = v19[6];
          v19[6] = v32 + 1;
          *(_QWORD *)(v31 + 8 * v32) = v23;
LABEL_49:
          value = xpc_dictionary_get_value(xdict, v15);
          *(_QWORD *)buf = value;
          if (value)
            xpc_retain(value);
          else
            *(_QWORD *)buf = xpc_null_create();
          xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v34);
          *((_DWORD *)v23 + 8) |= 1u;
          v35 = (void **)v23[1];
          if (v35 == (void **)MEMORY[0x1E0DE8338])
          {
            v35 = (void **)operator new(0x18uLL);
            *v35 = 0;
            v35[1] = 0;
            v35[2] = 0;
            v23[1] = v35;
            v36 = __dst[23];
            if ((*((char *)v35 + 23) & 0x80000000) == 0)
              goto LABEL_55;
          }
          else
          {
            if (v35 == (void **)__dst)
              goto LABEL_75;
            v36 = __dst[23];
            if ((*((char *)v35 + 23) & 0x80000000) == 0)
            {
LABEL_55:
              if ((v36 & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v35, *(void **)__dst, *(size_t *)&__dst[8]);
              }
              else
              {
                v37 = *(_OWORD *)__dst;
                v35[2] = *(void **)&__dst[16];
                *(_OWORD *)v35 = v37;
              }
              goto LABEL_75;
            }
          }
          if ((v36 & 0x80u) == 0)
            v38 = __dst;
          else
            v38 = *(_BYTE **)__dst;
          if ((v36 & 0x80u) == 0)
            v39 = v36;
          else
            v39 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>(v35, v38, v39);
LABEL_75:
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          xpc_release(*(xpc_object_t *)buf);
          v43 = xpc_dictionary_get_value(xdict, v16);
          *(_QWORD *)__dst = v43;
          if (v43)
            xpc_retain(v43);
          else
            *(_QWORD *)__dst = xpc_null_create();
          v44 = xpc::dyn_cast_or_default((xpc *)__dst, 0);
          *((_DWORD *)v23 + 8) |= 2u;
          *((_DWORD *)v23 + 6) = v44;
          xpc_release(*(xpc_object_t *)__dst);
          v45 = xpc_dictionary_get_value(xdict, v17);
          *(_QWORD *)buf = v45;
          if (v45)
            xpc_retain(v45);
          else
            *(_QWORD *)buf = xpc_null_create();
          xpc::dyn_cast_or_default((xpc *)buf, (const object *)"", v46);
          *((_DWORD *)v23 + 8) |= 4u;
          v47 = (void **)v23[2];
          if (v47 == (void **)MEMORY[0x1E0DE8338])
          {
            v47 = (void **)operator new(0x18uLL);
            *v47 = 0;
            v47[1] = 0;
            v47[2] = 0;
            v23[2] = v47;
            v48 = __dst[23];
            if ((*((char *)v47 + 23) & 0x80000000) == 0)
              goto LABEL_86;
          }
          else
          {
            if (v47 == (void **)__dst)
            {
LABEL_97:
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              xpc_release(*(xpc_object_t *)buf);
              v8 = 1;
              goto LABEL_30;
            }
            v48 = __dst[23];
            if ((*((char *)v47 + 23) & 0x80000000) == 0)
            {
LABEL_86:
              if ((v48 & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(v47, *(void **)__dst, *(size_t *)&__dst[8]);
              }
              else
              {
                v49 = *(_OWORD *)__dst;
                v47[2] = *(void **)&__dst[16];
                *(_OWORD *)v47 = v49;
              }
              goto LABEL_97;
            }
          }
          if ((v48 & 0x80u) == 0)
            v50 = __dst;
          else
            v50 = *(_BYTE **)__dst;
          if ((v48 & 0x80u) == 0)
            v51 = v48;
          else
            v51 = *(_QWORD *)&__dst[8];
          std::string::__assign_no_alias<false>(v47, v50, v51);
          goto LABEL_97;
        }
        v22 = *((_QWORD *)v19 + 2);
        v19[6] = v21 + 1;
        v23 = *(_QWORD **)(v22 + 8 * v21);
        if (v23)
          goto LABEL_49;
        v24 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__dst = 0;
          _os_log_error_impl(&dword_1BF566000, v24, OS_LOG_TYPE_ERROR, "Failed: Creating crash record", __dst, 2u);
        }
        v8 = 0;
      }
      else
      {
        v18 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v53 = v17;
          v52 = a1;
          v25 = v16;
          v54 = v12;
          v26 = (char *)MEMORY[0x1C3B8CCDC](xdict);
          memset(__dst, 170, sizeof(__dst));
          v27 = strlen(v26);
          if (v27 >= 0x7FFFFFFFFFFFFFF8)
            std::string::__throw_length_error[abi:ne180100]();
          v28 = v27;
          if (v27 >= 0x17)
          {
            v40 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v27 | 7) != 0x17)
              v40 = v27 | 7;
            v41 = v40 + 1;
            v29 = operator new(v40 + 1);
            *(_QWORD *)&__dst[8] = v28;
            *(_QWORD *)&__dst[16] = v41 | 0x8000000000000000;
            *(_QWORD *)__dst = v29;
          }
          else
          {
            __dst[23] = v27;
            v29 = __dst;
            if (!v27)
              goto LABEL_69;
          }
          memcpy(v29, v26, v28);
LABEL_69:
          v29[v28] = 0;
          free(v26);
          v42 = __dst;
          if (__dst[23] < 0)
            v42 = *(_BYTE **)__dst;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v42;
          _os_log_error_impl(&dword_1BF566000, v18, OS_LOG_TYPE_ERROR, "Failed: One of elements of bb crash is missing: %s", buf, 0xCu);
          if ((__dst[23] & 0x80000000) != 0)
            operator delete(*(void **)__dst);
          v8 = 0;
          v12 = v54;
          v16 = v25;
          a1 = v52;
          v17 = v53;
          goto LABEL_30;
        }
        v8 = 0;
      }
LABEL_30:
      xpc_release(xdict);
      if ((_DWORD)v8)
      {
        v13 = v59 + 1;
        v59 = v13;
        if (v13 != count || object != v12)
          continue;
      }
      goto LABEL_24;
    }
  }
  v8 = 1;
LABEL_24:
  xpc_release(v12);
  xpc_release(object);
LABEL_25:
  xpc_release(v5);
  return v8;
}

void sub_1BF7242F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,xpc_object_t a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (a24 < 0)
    operator delete(__p);
  xpc_release(*(xpc_object_t *)(v28 - 112));
  xpc_release(object);
  xpc_release(v27);
  xpc_release(a26);
  xpc_release(v26);
  _Unwind_Resume(a1);
}

uint64_t StatsAWD::fillMetric_sync(uint64_t a1, int **a2, void **a3)
{
  void *v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  xpc_object_t value;
  NSObject *v17;
  uint64_t v18;
  char *v20;
  size_t v21;
  size_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  int *v31;
  int v32;
  int *v33;
  int v34;
  int *v35;
  int v36;
  int *v37;
  int v38;
  void *count;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  xpc_object_t v52;
  int v53;
  xpc_object_t v54;
  int v55;
  xpc_object_t v56;
  int v57;
  xpc_object_t v58;
  int v59;
  NSObject *v60;
  int *v61;
  int v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  xpc_object_t object;
  xpc_object_t v67;
  uint64_t v68;
  xpc_object_t xarray;
  uint8_t buf[24];
  xpc_object_t xdict;
  uint8_t v72[4];
  uint8_t *v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  xdict = v5;
  v6 = MEMORY[0x1E0C812F8];
  if (v5 && MEMORY[0x1C3B8CD78](v5) == v6)
    xpc_retain(v5);
  else
    xdict = xpc_null_create();
  if (MEMORY[0x1C3B8CD78]() != v6)
  {
    v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
LABEL_20:
      v18 = 0;
      goto LABEL_21;
    }
    *(_WORD *)buf = 0;
    v8 = "Failed: Expected data needs to be dictionary in low power stats handling";
LABEL_8:
    _os_log_error_impl(&dword_1BF566000, v7, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    goto LABEL_20;
  }
  v9 = *MEMORY[0x1E0CFBBC0];
  if (!xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFBBC0])
    || (v10 = *MEMORY[0x1E0CFB518], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB518]))
    || (v11 = *MEMORY[0x1E0CFB8B8], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB8B8]))
    || (v12 = *MEMORY[0x1E0CFB200], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB200]))
    || (v13 = *MEMORY[0x1E0CFB638], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB638]))
    || (v14 = *MEMORY[0x1E0CFB740], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB740]))
    || (v15 = *MEMORY[0x1E0CFBAD8], !xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFBAD8])))
  {
    v17 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    v20 = (char *)MEMORY[0x1C3B8CCDC](xdict);
    memset(buf, 170, sizeof(buf));
    v21 = strlen(v20);
    if (v21 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v22 = v21;
    if (v21 >= 0x17)
    {
      v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v21 | 7) != 0x17)
        v24 = v21 | 7;
      v25 = v24 + 1;
      v23 = operator new(v24 + 1);
      *(_QWORD *)&buf[8] = v22;
      *(_QWORD *)&buf[16] = v25 | 0x8000000000000000;
      *(_QWORD *)buf = v23;
    }
    else
    {
      buf[23] = v21;
      v23 = buf;
      if (!v21)
        goto LABEL_30;
    }
    memcpy(v23, v20, v22);
LABEL_30:
    *((_BYTE *)v23 + v22) = 0;
    free(v20);
    v26 = buf;
    if ((buf[23] & 0x80u) != 0)
      v26 = *(uint8_t **)buf;
    LODWORD(v74) = 136315138;
    *(_QWORD *)((char *)&v74 + 4) = v26;
    _os_log_error_impl(&dword_1BF566000, v17, OS_LOG_TYPE_ERROR, "Failed: One of elements of low power stats is missing: %s", (uint8_t *)&v74, 0xCu);
    if ((char)buf[23] < 0)
      operator delete(*(void **)buf);
    goto LABEL_20;
  }
  v65 = *MEMORY[0x1E0CFB748];
  value = xpc_dictionary_get_value(xdict, (const char *)*MEMORY[0x1E0CFB748]);
  if (MEMORY[0x1C3B8CD78](value) != MEMORY[0x1E0C812C8])
  {
    v7 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      goto LABEL_20;
    *(_WORD *)buf = 0;
    v8 = "Failed: Expected data needs to be array in missed MT message handling";
    goto LABEL_8;
  }
  v64 = v15;
  v27 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v9;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v28 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v27[18] |= 4u;
  v27[5] = v28;
  xpc_release((xpc_object_t)v74);
  v29 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v10;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v30 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v29[18] |= 8u;
  v29[6] = v30;
  xpc_release((xpc_object_t)v74);
  v31 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v11;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v32 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v31[18] |= 0x10u;
  v31[7] = v32;
  xpc_release((xpc_object_t)v74);
  v33 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v12;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v34 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v33[18] |= 0x20u;
  v33[8] = v34;
  xpc_release((xpc_object_t)v74);
  v35 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v13;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v36 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v35[18] |= 0x40u;
  v35[9] = v36;
  xpc_release((xpc_object_t)v74);
  v37 = *a2;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v14;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
  v38 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
  v37[18] |= 0x80u;
  v37[16] = v38;
  xpc_release((xpc_object_t)v74);
  xarray = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)buf = &xdict;
  *(_QWORD *)&buf[8] = v65;
  xpc::dict::object_proxy::operator xpc::array((uint64_t)buf, &xarray);
  xpc::array::array((xpc_object_t *)buf, xarray);
  xpc::array::iterator::iterator((xpc_object_t *)&v74, *(xpc_object_t *)buf, 0);
  xpc_release(*(xpc_object_t *)buf);
  xpc::array::array((xpc_object_t *)buf, xarray);
  if (MEMORY[0x1C3B8CD78](xarray) == MEMORY[0x1E0C812C8])
    count = (void *)xpc_array_get_count(xarray);
  else
    count = 0;
  xpc::array::iterator::iterator(&v67, *(xpc_object_t *)buf, count);
  xpc_release(*(xpc_object_t *)buf);
  v40 = (const char *)*MEMORY[0x1E0CFB8B0];
  v41 = (const char *)*MEMORY[0x1E0CFB750];
  v42 = (const char *)*MEMORY[0x1E0CFB1F8];
  v43 = (const char *)*MEMORY[0x1E0CFB1F0];
  v44 = *((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1) == v68)
  {
LABEL_38:
    if ((xpc_object_t)v74 != v67)
      goto LABEL_39;
    xpc_release((xpc_object_t)v74);
    xpc_release((xpc_object_t)v74);
    v61 = *a2;
    *(_QWORD *)buf = &xdict;
    *(_QWORD *)&buf[8] = v64;
    xpc::dict::object_proxy::operator xpc::object((uint64_t)buf, &v74);
    v62 = xpc::dyn_cast_or_default((xpc *)&v74, 0);
    v61[18] |= 2u;
    v61[4] = v62;
    xpc_release((xpc_object_t)v74);
    v18 = 1;
  }
  else
  {
LABEL_39:
    while (1)
    {
      object = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)buf = &v74;
      *(_QWORD *)&buf[8] = v44;
      xpc::array::object_proxy::operator xpc::dict((uint64_t)buf, &object);
      if (MEMORY[0x1C3B8CD78](object) != v6
        || !xpc_dictionary_get_value(object, v40)
        || !xpc_dictionary_get_value(object, v41)
        || !xpc_dictionary_get_value(object, v42)
        || !xpc_dictionary_get_value(object, v43))
      {
        break;
      }
      v45 = *a2;
      v46 = (*a2)[13];
      v47 = (*a2)[12];
      if ((int)v47 >= v46)
      {
        if (v46 == v45[14])
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v45 + 10));
          v46 = v45[13];
        }
        v45[13] = v46 + 1;
        v49 = operator new(0x20uLL);
        *v49 = off_1E7921D70;
        v49[1] = 0;
        v49[2] = 0;
        v49[3] = 0;
        v50 = *((_QWORD *)v45 + 5);
        v51 = v45[12];
        v45[12] = v51 + 1;
        *(_QWORD *)(v50 + 8 * v51) = v49;
      }
      else
      {
        v48 = *((_QWORD *)v45 + 5);
        v45[12] = v47 + 1;
        v49 = *(_QWORD **)(v48 + 8 * v47);
      }
      v52 = xpc_dictionary_get_value(object, v40);
      *(_QWORD *)buf = v52;
      if (v52)
        xpc_retain(v52);
      else
        *(_QWORD *)buf = xpc_null_create();
      v53 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 1u;
      *((_DWORD *)v49 + 2) = v53;
      xpc_release(*(xpc_object_t *)buf);
      v54 = xpc_dictionary_get_value(object, v41);
      *(_QWORD *)buf = v54;
      if (v54)
        xpc_retain(v54);
      else
        *(_QWORD *)buf = xpc_null_create();
      v55 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 2u;
      *((_DWORD *)v49 + 3) = v55;
      xpc_release(*(xpc_object_t *)buf);
      v56 = xpc_dictionary_get_value(object, v42);
      *(_QWORD *)buf = v56;
      if (v56)
        xpc_retain(v56);
      else
        *(_QWORD *)buf = xpc_null_create();
      v57 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 4u;
      *((_DWORD *)v49 + 4) = v57;
      xpc_release(*(xpc_object_t *)buf);
      v58 = xpc_dictionary_get_value(object, v43);
      *(_QWORD *)buf = v58;
      if (v58)
        xpc_retain(v58);
      else
        *(_QWORD *)buf = xpc_null_create();
      v59 = xpc::dyn_cast_or_default((xpc *)buf, 0);
      *((_DWORD *)v49 + 7) |= 8u;
      *((_DWORD *)v49 + 5) = v59;
      xpc_release(*(xpc_object_t *)buf);
      xpc_release(object);
      v44 = *((_QWORD *)&v74 + 1) + 1;
      *((_QWORD *)&v74 + 1) = v44;
      if (v44 == v68)
        goto LABEL_38;
    }
    v60 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      xpc::dict::to_debug_string((xpc::dict *)&object, buf);
      v63 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v72 = 136315138;
      v73 = v63;
      _os_log_error_impl(&dword_1BF566000, v60, OS_LOG_TYPE_ERROR, "Failed: One of elements of missed MT message is missing: %s", v72, 0xCu);
      if ((char)buf[23] < 0)
        operator delete(*(void **)buf);
    }
    xpc_release(object);
    xpc_release(v67);
    xpc_release((xpc_object_t)v74);
    v18 = 0;
  }
  xpc_release(xarray);
LABEL_21:
  xpc_release(xdict);
  return v18;
}

void sub_1BF724D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t a12, uint64_t a13, xpc_object_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18, uint64_t a19, uint64_t a20,xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF725334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void sub_1BF725730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void sub_1BF725BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xpc_object_t object)
{
  void *v16;

  if (a14 < 0)
    operator delete(__p);
  xpc_release(object);
  xpc_release(v16);
  _Unwind_Resume(a1);
}

void sub_1BF725F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL StatsAWD::fillMetric_sync(uint64_t a1, uint64_t *a2, xpc_object_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  xpc_object_t value;
  const char *v10;
  std::string *v11;
  __int128 v12;
  xpc_object_t v13;
  int v14;
  xpc_object_t v15;
  int v16;
  xpc_object_t v17;
  int v18;
  xpc_object_t v19;
  int v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t v23;
  const char *v24;
  xpc_object_t v25;
  const char *v26;
  xpc_object_t v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  void **v34;
  void **v35;
  void *p_p;
  const char *v37;
  const char *v38;
  void **v39;
  xpc_object_t *v40;
  void **v41;
  uint64_t v42;
  void **v43;
  xpc_object_t *v44;
  void *v45;
  __int128 v46;
  void **v47;
  void *v48;
  uint64_t v49;
  int v50;
  xpc_object_t *v51;
  void *v52;
  __int128 v53;
  xpc_object_t *v54;
  xpc_object_t v55;
  uint64_t v56;
  void **v57;
  void *v58;
  __int128 v59;
  void **v60;
  void *v61;
  uint64_t v62;
  void **v63;
  void *v64;
  __int128 v65;
  void **v66;
  void *v67;
  uint64_t v68;
  uint64_t *v70;
  void *__p;
  char v72;
  void *v73[3];
  void *v74[3];
  xpc_object_t object[3];
  void *v76[4];
  std::string buf;
  const char *v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  xpc_object_t *v82;
  __int16 v83;
  void **v84;
  __int16 v85;
  void **v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v6 = MEMORY[0x1C3B8CD78](*a3);
  v7 = MEMORY[0x1E0C812F8];
  if (v6 == MEMORY[0x1E0C812F8])
  {
    memset(v76, 170, 24);
    value = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB788]);
    object[0] = value;
    if (value)
      xpc_retain(value);
    else
      object[0] = xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)object, (const object *)"no-reset-reason", v10);
    v11 = std::string::insert(&buf, 0, "modem reset: ", 0xDuLL);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v76[2] = (void *)v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)v76 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    xpc_release(object[0]);
    v13 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB780]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    if (v13)
      xpc_retain(v13);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v14 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v15 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFB040]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
    if (v15)
      xpc_retain(v15);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v16 = xpc::dyn_cast_or_default((xpc *)&buf, 0);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v17 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC1F0]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    if (v17)
      xpc_retain(v17);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v18 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)0xB);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v19 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC1F8]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
    if (v19)
      xpc_retain(v19);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v20 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)0xB);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(object, 170, sizeof(object));
    v21 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC230]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    if (v21)
      xpc_retain(v21);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"", v22);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(v74, 170, sizeof(v74));
    v23 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC238]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
    if (v23)
      xpc_retain(v23);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"", v24);
    xpc_release(buf.__r_.__value_.__l.__data_);
    memset(v73, 170, sizeof(v73));
    v25 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFC198]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
    if (v25)
      xpc_retain(v25);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    xpc::dyn_cast_or_default((xpc *)&buf, (const object *)"", v26);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v27 = xpc_dictionary_get_value(*a3, (const char *)*MEMORY[0x1E0CFAFE0]);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
    if (v27)
      xpc_retain(v27);
    else
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    v28 = xpc::dyn_cast_or_default((xpc *)&buf, (const object *)8);
    xpc_release(buf.__r_.__value_.__l.__data_);
    v29 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v70 = a2;
      v30 = v6;
      v31 = v20;
      v32 = v14;
      v33 = SHIBYTE(v76[2]);
      v34 = (void **)v76[0];
      abm::asString();
      v35 = v76;
      p_p = __p;
      v37 = "NO";
      if (v33 < 0)
        v35 = v34;
      if (v16)
        v38 = "YES";
      else
        v38 = "NO";
      LOBYTE(v14) = v32;
      if (v32)
        v37 = "YES";
      v39 = (void **)v74[0];
      if (v72 >= 0)
        p_p = &__p;
      v40 = object;
      if (SHIBYTE(object[2]) < 0)
        v40 = (xpc_object_t *)object[0];
      v41 = (void **)v73[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
      if (SHIBYTE(v74[2]) >= 0)
        v39 = v74;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      if (SHIBYTE(v73[2]) >= 0)
        v41 = v73;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v37;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v78 = v38;
      v79 = 2080;
      v80 = p_p;
      v81 = 2080;
      v82 = v40;
      v83 = 2080;
      v84 = v39;
      v85 = 2080;
      v86 = v41;
      _os_log_impl(&dword_1BF566000, v29, OS_LOG_TYPE_DEFAULT, "#I CCBasebandReset Metric Submission: Baseband Reset Reason: %s, Is MTBF: %s, Was In Voice Call: %s, RAT: %s, PLMN1: %s, PLMN2: %s, SKU: %s", (uint8_t *)&buf, 0x48u);
      if (v72 < 0)
        operator delete(__p);
      v7 = MEMORY[0x1E0C812F8];
      v20 = v31;
      v6 = v30;
      a2 = v70;
    }
    v42 = *a2;
    *(_DWORD *)(v42 + 68) = *(_DWORD *)(*a2 + 68) | 1;
    v43 = *(void ***)(v42 + 8);
    v44 = (xpc_object_t *)MEMORY[0x1E0DE8338];
    if (v43 == (void **)MEMORY[0x1E0DE8338])
    {
      v43 = (void **)operator new(0x18uLL);
      *v43 = 0;
      v43[1] = 0;
      v43[2] = 0;
      *(_QWORD *)(v42 + 8) = v43;
      v45 = (void *)HIBYTE(v76[2]);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
      {
LABEL_55:
        if ((v45 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v43, v76[0], (size_t)v76[1]);
        }
        else
        {
          v46 = *(_OWORD *)v76;
          v43[2] = v76[2];
          *(_OWORD *)v43 = v46;
        }
        goto LABEL_66;
      }
    }
    else
    {
      if (v43 == v76)
        goto LABEL_66;
      v45 = (void *)HIBYTE(v76[2]);
      if ((*((char *)v43 + 23) & 0x80000000) == 0)
        goto LABEL_55;
    }
    if ((char)v45 >= 0)
      v47 = v76;
    else
      v47 = (void **)v76[0];
    if ((char)v45 >= 0)
      v48 = v45;
    else
      v48 = v76[1];
    std::string::__assign_no_alias<false>(v43, v47, (size_t)v48);
LABEL_66:
    v49 = *a2;
    v50 = *(_DWORD *)(*a2 + 68);
    *(_BYTE *)(v49 + 41) = v14;
    *(_BYTE *)(v49 + 40) = v16;
    *(_DWORD *)(v49 + 16) = v18;
    *(_DWORD *)(v49 + 20) = v20;
    *(_DWORD *)(v49 + 68) = v50 | 0x21E;
    v51 = *(xpc_object_t **)(v49 + 24);
    if (v51 == v44)
    {
      v51 = (xpc_object_t *)operator new(0x18uLL);
      *v51 = 0;
      v51[1] = 0;
      v51[2] = 0;
      *(_QWORD *)(v49 + 24) = v51;
      v52 = (void *)HIBYTE(object[2]);
      if ((*((char *)v51 + 23) & 0x80000000) == 0)
      {
LABEL_69:
        if ((v52 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v51, object[0], (size_t)object[1]);
        }
        else
        {
          v53 = *(_OWORD *)object;
          v51[2] = object[2];
          *(_OWORD *)v51 = v53;
        }
        goto LABEL_80;
      }
    }
    else
    {
      if (v51 == object)
        goto LABEL_80;
      v52 = (void *)HIBYTE(object[2]);
      if ((*((char *)v51 + 23) & 0x80000000) == 0)
        goto LABEL_69;
    }
    if ((char)v52 >= 0)
      v54 = object;
    else
      v54 = (xpc_object_t *)object[0];
    if ((char)v52 >= 0)
      v55 = v52;
    else
      v55 = object[1];
    std::string::__assign_no_alias<false>(v51, v54, (size_t)v55);
LABEL_80:
    v56 = *a2;
    *(_DWORD *)(v56 + 68) = *(_DWORD *)(*a2 + 68) | 0x20;
    v57 = *(void ***)(v56 + 32);
    if (v57 == v44)
    {
      v57 = (void **)operator new(0x18uLL);
      *v57 = 0;
      v57[1] = 0;
      v57[2] = 0;
      *(_QWORD *)(v56 + 32) = v57;
      v58 = (void *)HIBYTE(v74[2]);
      if ((*((char *)v57 + 23) & 0x80000000) == 0)
      {
LABEL_83:
        if ((v58 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v57, v74[0], (size_t)v74[1]);
        }
        else
        {
          v59 = *(_OWORD *)v74;
          v57[2] = v74[2];
          *(_OWORD *)v57 = v59;
        }
        goto LABEL_94;
      }
    }
    else
    {
      if (v57 == v74)
        goto LABEL_94;
      v58 = (void *)HIBYTE(v74[2]);
      if ((*((char *)v57 + 23) & 0x80000000) == 0)
        goto LABEL_83;
    }
    if ((char)v58 >= 0)
      v60 = v74;
    else
      v60 = (void **)v74[0];
    if ((char)v58 >= 0)
      v61 = v58;
    else
      v61 = v74[1];
    std::string::__assign_no_alias<false>(v57, v60, (size_t)v61);
LABEL_94:
    v62 = *a2;
    *(_DWORD *)(v62 + 68) = *(_DWORD *)(*a2 + 68) | 0x40;
    v63 = *(void ***)(v62 + 48);
    if (v63 == v44)
    {
      v63 = (void **)operator new(0x18uLL);
      *v63 = 0;
      v63[1] = 0;
      v63[2] = 0;
      *(_QWORD *)(v62 + 48) = v63;
      v64 = (void *)HIBYTE(v73[2]);
      if ((*((char *)v63 + 23) & 0x80000000) == 0)
      {
LABEL_97:
        if ((v64 & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v63, v73[0], (size_t)v73[1]);
        }
        else
        {
          v65 = *(_OWORD *)v73;
          v63[2] = v73[2];
          *(_OWORD *)v63 = v65;
        }
        goto LABEL_108;
      }
    }
    else
    {
      if (v63 == v73)
        goto LABEL_108;
      v64 = (void *)HIBYTE(v73[2]);
      if ((*((char *)v63 + 23) & 0x80000000) == 0)
        goto LABEL_97;
    }
    if ((char)v64 >= 0)
      v66 = v73;
    else
      v66 = (void **)v73[0];
    if ((char)v64 >= 0)
      v67 = v64;
    else
      v67 = v73[1];
    std::string::__assign_no_alias<false>(v63, v66, (size_t)v67);
LABEL_108:
    v68 = *a2;
    *(_DWORD *)(v68 + 68) = *(_DWORD *)(*a2 + 68) | 0x80;
    *(_DWORD *)(v68 + 44) = v28;
    if (SHIBYTE(v73[2]) < 0)
    {
      operator delete(v73[0]);
      if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
      {
LABEL_110:
        if ((SHIBYTE(object[2]) & 0x80000000) == 0)
          goto LABEL_111;
        goto LABEL_115;
      }
    }
    else if ((SHIBYTE(v74[2]) & 0x80000000) == 0)
    {
      goto LABEL_110;
    }
    operator delete(v74[0]);
    if ((SHIBYTE(object[2]) & 0x80000000) == 0)
    {
LABEL_111:
      if ((SHIBYTE(v76[2]) & 0x80000000) == 0)
        return v6 == v7;
LABEL_116:
      operator delete(v76[0]);
      return v6 == v7;
    }
LABEL_115:
    operator delete(object[0]);
    if ((SHIBYTE(v76[2]) & 0x80000000) == 0)
      return v6 == v7;
    goto LABEL_116;
  }
  v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Failed to get the metric information for CCBasebandReset", (uint8_t *)&buf, 2u);
  }
  return v6 == v7;
}

void sub_1BF7267C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,xpc_object_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,xpc_object_t object,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "stats.awd");
}

uint64_t ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7922158;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7922158;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

xpc_object_t *xpc::array::array(xpc_object_t *a1, xpc_object_t object)
{
  *a1 = object;
  if (object)
    xpc_retain(object);
  else
    *a1 = xpc_null_create();
  return a1;
}

xpc_object_t *xpc::array::iterator::iterator(xpc_object_t *a1, xpc_object_t object, void *a3)
{
  *a1 = object;
  if (object)
    xpc_retain(object);
  else
    *a1 = xpc_null_create();
  a1[1] = a3;
  return a1;
}

void ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF726BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF726BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<StatsAWD>::shared_ptr[abi:ne180100]<StatsAWD,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922198;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF726CE0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1}::operator() const(StatsAWD*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF726D00(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1}::operator() const(StatsAWD*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<StatsAWD *,std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD *)#1},std::allocator<StatsAWD>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI8StatsAWDE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<StatsAWD> ctu::SharedSynchronizable<StatsAWD>::make_shared_ptr<StatsAWD>(StatsAWD*)::{lambda(StatsAWD*)#1}::operator() const(StatsAWD*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *ctu::Loggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7922158;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF726E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7922158;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<StatsAWD,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7922158;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<StatsAWD>::execute_wrapped<StatsAWD::submit(unsigned int,xpc::object)::$_0>(StatsAWD::submit(unsigned int,xpc::object)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<StatsAWD::submit(unsigned int,xpc::object)::$_0,dispatch_queue_s *::default_delete<StatsAWD::submit(unsigned int,xpc::object)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  void *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  xpc_object_t object;
  uint8_t buf[16];

  v2 = *(uint64_t **)a1;
  v3 = **(_QWORD **)a1;
  if (*(_QWORD *)(v3 + 104))
  {
    v4 = *((_DWORD *)v2 + 2);
    v5 = (void *)v2[2];
    object = v5;
    if (v5)
      xpc_retain(v5);
    else
      object = xpc_null_create();
    StatsAWD::submit_sync(v3, v4, &object);
    xpc_release(object);
  }
  else
  {
    v6 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Failed: AWD connection setup failed", buf, 2u);
    }
  }
  xpc_release((xpc_object_t)v2[2]);
  operator delete(v2);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  operator delete(a1);
}

void sub_1BF72703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  _QWORD *v10;
  xpc_object_t *v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  xpc_release(object);
  xpc_release(v11[2]);
  operator delete(v11);
  v13 = (std::__shared_weak_count *)v10[2];
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  operator delete(v10);
  _Unwind_Resume(a1);
}

void DataStallDetection::create(capabilities::abs *a1@<X0>, uint64_t *a2@<X8>)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  if (capabilities::abs::supportsRadioHealth(a1))
  {
    v4 = operator new(0xA0uLL);
    v5 = (uint64_t)v4;
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
    v12 = *(_QWORD *)a1;
    v13 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    DataStallDetection::DataStallDetection((uint64_t)v4, &v12);
    *a2 = 0xAAAAAAAAAAAAAAAALL;
    a2[1] = 0xAAAAAAAAAAAAAAAALL;
    std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(a2, v5);
    ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(*a2);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1BF72719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF7271B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF7271CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t DataStallDetection::DataStallDetection(uint64_t a1, _QWORD *a2)
{
  NSObject *initially_inactive;
  NSObject *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v47;
  _BYTE v48[16];
  _QWORD v49[2];
  __int128 v50;

  *(_QWORD *)a1 = off_1E7922228;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v48, "com.apple.telephony.abm", "net.stall");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v5 = dispatch_queue_create_with_target_V2("net.stall", initially_inactive, 0);
  dispatch_set_qos_class_floor(v5, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v5);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = v5;
  if (v5)
  {
    dispatch_retain(v5);
    *(_QWORD *)(a1 + 96) = 0;
    dispatch_release(v5);
  }
  else
  {
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_QWORD *)a1 = off_1E79223B8;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v50);
  *(_QWORD *)(a1 + 8) = &unk_1E7911E48;
  *(_QWORD *)(a1 + 56) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 64) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v49);
  *(_QWORD *)a1 = off_1E7922448;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v48);
  *(_QWORD *)a1 = off_1E7922228;
  *(_QWORD *)(a1 + 104) = *a2;
  v9 = a2[1];
  *(_QWORD *)(a1 + 112) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v12 = off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&v50);
    v13 = v50;
    v50 = 0uLL;
    v14 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v13;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v12 = off_1ED70F338;
  }
  v20 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v21 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v23 = *(_QWORD *)(*(_QWORD *)v12 + 208);
  if (v20)
  {
    v24 = (unint64_t *)&v20->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *(_QWORD *)(a1 + 120) = v23;
  v26 = _Block_copy(&__block_literal_global_6);
  v27 = *(_QWORD *)(a1 + 88);
  if (v27)
    dispatch_retain(*(dispatch_object_t *)(a1 + 88));
  *(_QWORD *)(a1 + 128) = v26;
  *(_QWORD *)(a1 + 136) = v27;
  v28 = (std::__shared_weak_count *)a2[1];
  v47 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  pthread_mutex_lock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  v31 = off_1ED70F338;
  if (!off_1ED70F338)
  {
    ABMServer::create_default_global(&v50);
    v32 = v50;
    v50 = 0uLL;
    v33 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
    off_1ED70F338 = v32;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
    if (*((_QWORD *)&v50 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v31 = off_1ED70F338;
  }
  v39 = (std::__shared_weak_count *)*(&off_1ED70F338 + 1);
  v49[0] = v31;
  v49[1] = *(&off_1ED70F338 + 1);
  if (*(&off_1ED70F338 + 1))
  {
    v40 = (unint64_t *)(*(&off_1ED70F338 + 1) + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  ctu::iokit::Controller::create();
  if (v39)
  {
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v47)
  {
    v44 = (unint64_t *)&v47->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return a1;
}

void sub_1BF727604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;

  pthread_mutex_unlock(&ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  dispatch::callback<void({block_pointer})(std::string)>::~callback((uint64_t)(v9 + 16));
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100](v10);
  ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(v9);
  _Unwind_Resume(a1);
}

void sub_1BF72769C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

const char *DataStallDetection::getName(DataStallDetection *this)
{
  return "net.stall";
}

_QWORD *ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E79223B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E79223B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void DataStallDetection::~DataStallDetection(DataStallDetection *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  __CFRunLoop *v5;
  NSObject *v6;
  NSObject *v7;
  __CFRunLoop *v8;
  const void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  NSObject *v13;
  const void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  NSObject *v19;
  std::__shared_weak_count *v20;
  _QWORD block[4];
  dispatch_group_t group;

  *(_QWORD *)this = off_1E7922228;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (__CFRunLoop *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_19;
  }
  else
  {
LABEL_5:
    v5 = (__CFRunLoop *)*((_QWORD *)this + 15);
    if (!v5)
      goto LABEL_19;
  }
  if (CFRunLoopIsWaiting(v5))
  {
    v6 = dispatch_group_create();
    v7 = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v7);
    }
    v8 = (__CFRunLoop *)*((_QWORD *)this + 15);
    v9 = (const void *)*MEMORY[0x1E0C9B280];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN18DataStallDetectionD2Ev_block_invoke;
    block[3] = &__block_descriptor_tmp_3_5;
    group = v7;
    if (v7)
    {
      dispatch_retain(v7);
      dispatch_group_enter(v7);
    }
    CFRunLoopPerformBlock(v8, v9, block);
    CFRunLoopWakeUp(*((CFRunLoopRef *)this + 15));
    if (group)
    {
      dispatch_group_leave(group);
      if (group)
        dispatch_release(group);
    }
    if (v7)
    {
      dispatch_group_leave(v7);
      dispatch_release(v7);
      dispatch_group_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v7);
    }
    else
    {
      dispatch_group_wait(0, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
LABEL_19:
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = *((_QWORD *)this + 17);
  if (v13)
    dispatch_release(v13);
  v14 = (const void *)*((_QWORD *)this + 16);
  if (v14)
    _Block_release(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)this = off_1E79223B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v18 = *((_QWORD *)this + 12);
  if (v18)
    dispatch_release(v18);
  v19 = *((_QWORD *)this + 11);
  if (v19)
    dispatch_release(v19);
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
}

{
  void *v1;

  DataStallDetection::~DataStallDetection(this);
  operator delete(v1);
}

void DataStallDetection::start(DataStallDetection *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  BOOL v22;
  NSObject *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  void *v32;
  _QWORD v33[5];
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36[2];
  NetworkStatsInterface *v37;
  unint64_t v38;
  void *v39;
  std::string *v40;
  unint64_t v41;
  _QWORD *v42;
  uint8_t buf[16];
  _BYTE v44[32];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v2 || (v3 = std::__shared_weak_count::lock(v2)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v4 = v3;
  p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v9 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v9, OS_LOG_TYPE_DEFAULT, "#I Start", buf, 2u);
  }
  v37 = (NetworkStatsInterface *)0xAAAAAAAAAAAAAAAALL;
  v38 = 0xAAAAAAAAAAAAAAAALL;
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  v36[0] = *((_QWORD *)this + 13);
  v36[1] = (uint64_t)v10;
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  NetworkStatsInterface::create(v36, (uint64_t *)&v37);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v34 = (_QWORD *)0xAAAAAAAAAAAAAAAALL;
  v35 = 0xAAAAAAAAAAAAAAAALL;
  NetworkStatsInterface::query(v37, &v34);
  v15 = v34 + 1;
  v16 = (_QWORD *)*v34;
  if ((_QWORD *)*v34 != v34 + 1)
  {
    do
    {
      *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)buf = v17;
      *(_OWORD *)v44 = v17;
      *(_OWORD *)&v44[16] = v17;
      *(_DWORD *)buf = *((_DWORD *)v16 + 8);
      v44[0] = *((_BYTE *)v16 + 48);
      *(_QWORD *)&buf[8] = v16[5];
      if (*((char *)v16 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v44[8], (const std::string::value_type *)v16[7], v16[8]);
      }
      else
      {
        *(_OWORD *)&v44[8] = *(_OWORD *)(v16 + 7);
        *(_QWORD *)&v44[24] = v16[9];
      }
      v18 = v40;
      if ((unint64_t)v40 >= v41)
      {
        v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v39, (uint64_t)&v44[8]);
        if ((v44[31] & 0x80000000) == 0)
          goto LABEL_30;
      }
      else if ((v44[31] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(v40, *(const std::string::value_type **)&v44[8], *(std::string::size_type *)&v44[16]);
        v40 = v18 + 1;
        if ((v44[31] & 0x80000000) == 0)
        {
LABEL_30:
          v20 = (_QWORD *)v16[1];
          if (!v20)
            goto LABEL_36;
          goto LABEL_34;
        }
      }
      else
      {
        v19 = *(_OWORD *)&v44[8];
        v40->__r_.__value_.__r.__words[2] = *(_QWORD *)&v44[24];
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        v40 = v18 + 1;
        if ((v44[31] & 0x80000000) == 0)
          goto LABEL_30;
      }
      operator delete(*(void **)&v44[8]);
      v20 = (_QWORD *)v16[1];
      if (!v20)
      {
        do
        {
LABEL_36:
          v21 = (_QWORD *)v16[2];
          v22 = *v21 == (_QWORD)v16;
          v16 = v21;
        }
        while (!v22);
        goto LABEL_21;
      }
      do
      {
LABEL_34:
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
LABEL_21:
      v16 = v21;
    }
    while (v21 != v15);
  }
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 0x40000000;
  v33[2] = ___ZN18DataStallDetection5startEv_block_invoke;
  v33[3] = &__block_descriptor_tmp_5_15;
  v33[4] = this;
  v42 = v33;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)v44 = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE20execute_wrapped_syncIRU13block_pointerFvvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  *(_QWORD *)&v44[8] = &__block_descriptor_tmp_9_10;
  *(_QWORD *)&v44[16] = (char *)this + 72;
  *(_QWORD *)&v44[24] = &v42;
  v23 = *((_QWORD *)this + 11);
  if (*((_QWORD *)this + 12))
  {
    dispatch_async_and_wait(v23, buf);
    v24 = (std::__shared_weak_count *)v35;
    if (!v35)
      goto LABEL_47;
  }
  else
  {
    dispatch_sync(v23, buf);
    v24 = (std::__shared_weak_count *)v35;
    if (!v35)
      goto LABEL_47;
  }
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
LABEL_47:
  v27 = (std::__shared_weak_count *)v38;
  if (v38)
  {
    v28 = (unint64_t *)(v38 + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::string *)v39;
  if (v39)
  {
    v31 = v40;
    v32 = v39;
    if (v40 != v39)
    {
      do
      {
        if (SHIBYTE(v31[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31[-1].__r_.__value_.__l.__data_);
        --v31;
      }
      while (v31 != v30);
      v32 = v39;
    }
    v40 = v30;
    operator delete(v32);
  }
  std::__shared_weak_count::__release_weak(v4);
}

void sub_1BF727D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__shared_weak_count *v33;

  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::vector<std::string>::~vector[abi:ne180100](&a21);
  std::__shared_weak_count::__release_weak(v33);
  _Unwind_Resume(a1);
}

void ___ZN18DataStallDetection5startEv_block_invoke(uint64_t a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Started", v2, 2u);
  }
}

void DataStallDetection::setCallback(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t *v5;
  NSObject *v6;
  _QWORD v7[5];
  void *aBlock;
  dispatch_object_t object;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_6_11;
  v7[4] = a1;
  v4 = *(void **)a2;
  if (*(_QWORD *)a2)
    v4 = _Block_copy(v4);
  v5 = (uint64_t *)(a1 + 72);
  v6 = *(NSObject **)(a2 + 8);
  aBlock = v4;
  object = v6;
  if (v6)
    dispatch_retain(v6);
  ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(v5, (uint64_t)v7);
  if (object)
    dispatch_release(object);
  if (aBlock)
    _Block_release(aBlock);
}

void ___ZN18DataStallDetection11setCallbackEN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEE_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  NSObject *v3;
  void *v4;
  const void *v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v8[16];

  v2 = (_QWORD *)a1[4];
  v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I setCallback", v8, 2u);
  }
  v4 = (void *)a1[5];
  if (v4)
    v4 = _Block_copy(v4);
  v5 = (const void *)v2[16];
  v2[16] = v4;
  if (v5)
    _Block_release(v5);
  v6 = a1[6];
  if (v6)
    dispatch_retain(v6);
  v7 = v2[17];
  v2[17] = v6;
  if (v7)
    dispatch_release(v7);
}

void __copy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;

  v4 = *(void **)(a2 + 40);
  if (v4)
    v4 = _Block_copy(v4);
  v5 = *(NSObject **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  if (v5)
    dispatch_retain(v5);
}

void __destroy_helper_block_e8_40c109_ZTSN8dispatch8callbackIU13block_pointerFvNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEE(uint64_t a1)
{
  NSObject *v2;
  const void *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(const void **)(a1 + 40);
  if (v3)
    _Block_release(v3);
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 9;
  strcpy(a1, "net.stall");
}

uint64_t ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E79223B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E79223B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void ctu::Loggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::connectToLogServer_sync(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v1 = a1 + 56;
  if (*(_QWORD *)(a1 + 56))
  {
    if (!*(_QWORD *)(a1 + 80) || (v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 80))) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v3 = v2;
    ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v1 - 48));
    ctu::TrackedLogger::registerLoggerToServer();
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BF728198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1BF7281B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<DataStallDetection>::shared_ptr[abi:ne180100]<DataStallDetection,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79223F8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 80);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 72) = a2;
    *(_QWORD *)(a2 + 80) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF7282D0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF7282F0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<DataStallDetection *,std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection *)#1},std::allocator<DataStallDetection>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared"
                                "_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI18DataStallDetectionE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<DataStallDetection> ctu::SharedSynchronizable<DataStallDetection>::make_shared_ptr<DataStallDetection>(DataStallDetection*)::{lambda(DataStallDetection*)#1}::operator() const(DataStallDetection*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ctu::SharedLoggable<DataStallDetection,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E79223B8;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void ctu::SharedSynchronizable<DataStallDetection>::execute_wrapped(uint64_t *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  NSObject *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD block[6];
  std::__shared_weak_count *v16;

  v3 = (std::__shared_weak_count *)a1[1];
  if (!v3 || (v5 = *a1, (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = a1[2];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E79224A0;
  block[5] = v5;
  v16 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  block[4] = a2;
  dispatch_async(v8, block);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

uint64_t ___ZNK3ctu20SharedSynchronizableI18DataStallDetectionE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c47_ZTSNSt3__110shared_ptrIK18DataStallDetectionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t __cxx_global_var_init_18()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ABMServer>::~PthreadMutexGuardPolicy, &ctu::Singleton<ABMServer,ABMServer,ctu::PthreadMutexGuardPolicy<ABMServer>>::sInstance, &dword_1BF566000);
  }
  return result;
}

void BootController::BootController(BootController *this)
{
  unsigned __int8 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t Controller;
  const void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  const char *v13;
  _QWORD block[5];

  *(_QWORD *)this = off_1E79224E0;
  v13 = "boot.ctrl";
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_13_8;
  block[4] = &GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v3 = unk_1ED70F6A0;
    v11 = GetABMLogServer(void)::sLogServer;
    v12 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, block);
    v3 = unk_1ED70F6A0;
    v11 = GetABMLogServer(void)::sLogServer;
    v12 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  v4 = (unint64_t *)(v3 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
LABEL_6:
  ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>>(this, &v13, &v11);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)this = off_1E79224E0;
  *((_BYTE *)this + 80) = 1;
  Controller = TelephonyBasebandCreateController();
  v10 = (const void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = Controller;
  if (v10)
    CFRelease(v10);
}

void sub_1BF7287EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  const void **v2;
  const void **v3;

  v3 = v2;
  ctu::cf::CFSharedRef<__TelephonyBasebandControllerHandle_tag>::~CFSharedRef(v3);
  *v1 = &unk_1E791B2D0;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  _Unwind_Resume(a1);
}

void sub_1BF72881C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const char *BootController::getName(BootController *this)
{
  return "boot.ctrl";
}

_QWORD *ctu::Loggable<BootController,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<char const*,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, const char **a2, _QWORD *a3)
{
  const char *v5;
  size_t v6;
  void *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *__dst[2];
  unint64_t v16;

  *a1 = &unk_1E791B2D0;
  v5 = *a2;
  v6 = strlen(*a2);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    v16 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v16) = v6;
  v8 = __dst;
  if (v6)
LABEL_8:
    memmove(v8, v5, (size_t)v7);
  *((_BYTE *)v7 + (_QWORD)v8) = 0;
  ctu::LoggerCommonBase::LoggerCommonBase();
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v11 = a3[1];
  a1[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_1BF728964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BootController::prepare()
{
  return 1;
}

uint64_t BootController::resetModem(BootController *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v2 = _os_activity_create(&dword_1BF566000, "Reset baseband", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Reset baseband", (uint8_t *)&state, 2u);
  }
  v4 = TelephonyBasebandResetModem();
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Failed Resetting Modem", (uint8_t *)&state, 2u);
      if (!v2)
        return v4;
      goto LABEL_6;
    }
  }
  if (v2)
LABEL_6:
    os_release(v2);
  return v4;
}

void sub_1BF728A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BootController::powerCycleModem(BootController *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v2 = _os_activity_create(&dword_1BF566000, "Powercycle baseband", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Powercycle baseband", (uint8_t *)&state, 2u);
  }
  v4 = TelephonyBasebandPowercycleModem();
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Failed to powercycle baseband", (uint8_t *)&state, 2u);
      if (!v2)
        return v4;
      goto LABEL_6;
    }
  }
  if (v2)
LABEL_6:
    os_release(v2);
  return v4;
}

void sub_1BF728BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BootController::powerOffModem(BootController *this)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  os_activity_scope_state_s state;

  v2 = _os_activity_create(&dword_1BF566000, "Poweroff baseband", MEMORY[0x1E0C80FC8], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v2, &state);
  os_activity_scope_leave(&state);
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(state.opaque[0]) = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Poweroff baseband", (uint8_t *)&state, 2u);
  }
  v4 = TelephonyBasebandPowerOnModem();
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(state.opaque[0]) = 0;
      _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Failed to poweroff baseband", (uint8_t *)&state, 2u);
      if (!v2)
        return v4;
      goto LABEL_6;
    }
  }
  if (v2)
LABEL_6:
    os_release(v2);
  return v4;
}

void sub_1BF728CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::os::scoped_activity::~scoped_activity((void **)va);
  _Unwind_Resume(a1);
}

void BootController::markNonvolatileDataErased(BootController *this)
{
  NSObject *v2;
  uint8_t v3[16];

  v2 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Marking EFS as erased", v3, 2u);
  }
  *((_BYTE *)this + 80) = 1;
}

uint64_t BootController::setManagerState(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v2 = TelephonyBasebandSetManagerState();
  if ((v2 & 1) != 0)
    return v2;
  v3 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    return v2;
  *(_WORD *)v5 = 0;
  _os_log_error_impl(&dword_1BF566000, v3, OS_LOG_TYPE_ERROR, "Failed to set manager state", v5, 2u);
  return v2;
}

uint64_t BootController::getManagerState(uint64_t a1)
{
  uint64_t ManagerState;
  NSObject *v3;
  uint8_t v5[16];

  ManagerState = TelephonyBasebandGetManagerState();
  if ((ManagerState & 1) != 0)
    return ManagerState;
  v3 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    return ManagerState;
  *(_WORD *)v5 = 0;
  _os_log_error_impl(&dword_1BF566000, v3, OS_LOG_TYPE_ERROR, "Failed to get manager state", v5, 2u);
  return ManagerState;
}

BOOL BootController::setBasebandState(capabilities::radio *a1)
{
  _BOOL8 result;
  NSObject *v3;
  uint8_t v4[16];

  if (!capabilities::radio::supportsBasebandStateController(a1))
    return 1;
  if ((TelephonyBasebandSetBasebandState() & 1) != 0)
    return 1;
  v3 = *((_QWORD *)a1 + 5);
  result = os_log_type_enabled(v3, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v4 = 0;
    _os_log_error_impl(&dword_1BF566000, v3, OS_LOG_TYPE_ERROR, "Failed to set baseband state", v4, 2u);
    return 0;
  }
  return result;
}

BOOL BootController::getBasebandState(capabilities::radio *a1, _DWORD *a2)
{
  _BOOL8 result;
  NSObject *v4;
  uint8_t v5[16];

  *a2 = 0;
  if (!capabilities::radio::supportsBasebandStateController(a1))
    return 1;
  if ((TelephonyBasebandGetBasebandState() & 1) != 0)
    return 1;
  v4 = *((_QWORD *)a1 + 5);
  result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_WORD *)v5 = 0;
    _os_log_error_impl(&dword_1BF566000, v4, OS_LOG_TYPE_ERROR, "Failed to get baseband state", v5, 2u);
    return 0;
  }
  return result;
}

_QWORD *Capabilities::create_default_global@<X0>(_QWORD *a1@<X8>)
{
  void *v3;
  _QWORD *result;

  v3 = operator new(1uLL);
  *a1 = v3;
  result = operator new(0x20uLL);
  *result = off_1E7922580;
  result[1] = 0;
  result[2] = 0;
  result[3] = v3;
  a1[1] = result;
  return result;
}

void sub_1BF729014(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::__on_zero_shared(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 24);
  if (v1)
    operator delete(v1);
}

uint64_t std::__shared_ptr_pointer<Capabilities *,std::shared_ptr<Capabilities>::__shared_ptr_default_delete<Capabilities,Capabilities>,std::allocator<Capabilities>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF746BD3)
    return a1 + 24;
  if (((v3 & 0x80000001BF746BD3 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF746BD3))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF746BD3 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t config::hw::watch(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v13;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70F478;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 144))(v2);
  v10 = result;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v10;
    }
  }
  return result;
}

void sub_1BF729224(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF729240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t config::hw::iPad(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v13;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70F478;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 136))(v2);
  v10 = result;
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      return v10;
    }
  }
  return result;
}

void sub_1BF7293A4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF7293C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::product(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70F478;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF72952C(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF729548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::deviceMaterial(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70F478;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF7296B4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF7296D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::getBootArgs(std::string *a1@<X8>)
{
  ctu::Gestalt *v3;
  uint64_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  const void *v18;
  const void *v19;
  int v20;
  const void *v21;
  unint64_t v22;
  size_t v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  __int128 v29;
  void *__p[2];
  uint64_t v31;
  _QWORD v32[5];

  memset(v32, 170, 24);
  v3 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v4 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v3);
    v5 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v6 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v4 = off_1ED70F478;
  }
  v9 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  v32[3] = v4;
  v32[4] = *(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v10 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v4 + 112))(v32, v4);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  HIBYTE(v31) = 9;
  strcpy((char *)__p, "boot-args");
  v14 = (uint64_t *)v32[1];
  if (v32[1])
  {
    while (1)
    {
      v16 = (uint64_t **)v14;
      v19 = (const void *)v14[4];
      v17 = v14 + 4;
      v18 = v19;
      v20 = *((char *)v17 + 23);
      if (v20 >= 0)
        v21 = v17;
      else
        v21 = v18;
      if (v20 >= 0)
        v22 = *((unsigned __int8 *)v17 + 23);
      else
        v22 = v17[1];
      if (v22 >= 9)
        v23 = 9;
      else
        v23 = v22;
      v24 = memcmp(__p, v21, v23);
      if (v24)
      {
        if (v24 < 0)
          goto LABEL_18;
LABEL_32:
        v25 = memcmp(v21, __p, v23);
        if (v25)
        {
          if ((v25 & 0x80000000) == 0)
            goto LABEL_43;
        }
        else if (v22 >= 9)
        {
LABEL_43:
          v26 = (char *)v16;
          if (*((char *)v16 + 79) < 0)
            goto LABEL_44;
LABEL_42:
          v29 = *(_OWORD *)(v26 + 56);
          a1->__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 9);
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v29;
          goto LABEL_45;
        }
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_39;
        }
      }
      else
      {
        if (v22 <= 9)
          goto LABEL_32;
LABEL_18:
        v14 = *v16;
        v15 = v16;
        if (!*v16)
          goto LABEL_39;
      }
    }
  }
  v15 = (uint64_t **)&v32[1];
  v16 = (uint64_t **)&v32[1];
LABEL_39:
  v26 = (char *)operator new(0x50uLL);
  *((_OWORD *)v26 + 2) = *(_OWORD *)__p;
  v27 = v31;
  __p[1] = 0;
  v31 = 0;
  __p[0] = 0;
  *((_QWORD *)v26 + 6) = v27;
  *((_QWORD *)v26 + 7) = 0;
  *((_QWORD *)v26 + 8) = 0;
  *((_QWORD *)v26 + 9) = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = v16;
  *v15 = (uint64_t *)v26;
  v28 = (uint64_t *)v26;
  if (*(_QWORD *)v32[0])
  {
    v32[0] = *(_QWORD *)v32[0];
    v28 = *v15;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v32[1], v28);
  ++v32[2];
  if ((v26[79] & 0x80000000) == 0)
    goto LABEL_42;
LABEL_44:
  std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v26 + 7), *((_QWORD *)v26 + 8));
LABEL_45:
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v32[1]);
}

void sub_1BF7299B4(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF7299D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF7299E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a16);
  _Unwind_Resume(a1);
}

void config::hw::regionCode(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70F478;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF729B60(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF729B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void config::hw::regionInfo(config::hw *this)
{
  ctu::Gestalt *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = off_1ED70F478;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF729CE8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF729D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t config::build::carrier(config::build *this)
{
  uint64_t result;

  result = TelephonyUtilIsCarrierBuild();
  if ((_DWORD)result)
    return TelephonyUtilIsInternalBuild() ^ 1;
  return result;
}

uint64_t config::build::internal_or_carrier(config::build *this)
{
  if ((TelephonyUtilIsInternalBuild() & 1) != 0)
    return 1;
  else
    return TelephonyUtilIsCarrierBuild();
}

void config::build::version(config::build *this)
{
  ctu::Gestalt *v1;
  void (***v2)(_QWORD);
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;

  v1 = (ctu::Gestalt *)pthread_mutex_lock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  v2 = (void (***)(_QWORD))off_1ED70F478;
  if (!off_1ED70F478)
  {
    ctu::Gestalt::create_default_global(v1);
    v3 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
    off_1ED70F478 = v11;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v2 = (void (***)(_QWORD))off_1ED70F478;
  }
  v6 = (std::__shared_weak_count *)*(&off_1ED70F478 + 1);
  if (*(&off_1ED70F478 + 1))
  {
    v7 = (unint64_t *)(*(&off_1ED70F478 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  (**v2)(v2);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF729EB8(_Unwind_Exception *a1)
{
  pthread_mutex_unlock(&ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance);
  _Unwind_Resume(a1);
}

void sub_1BF729ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

uint64_t __cxx_global_var_init_19()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::Gestalt>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::Gestalt,ctu::Gestalt,ctu::PthreadMutexGuardPolicy<ctu::Gestalt>>::sInstance, &dword_1BF566000);
  }
  return result;
}

std::__shared_weak_count_vtbl **TraceCAReporter::create@<X0>(uint64_t a1@<X8>)
{
  TraceCAReporter *v3;

  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  v3 = (TraceCAReporter *)operator new(0x68uLL);
  TraceCAReporter::TraceCAReporter(v3);
  *(_QWORD *)a1 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)(a1 + 8) = 0xAAAAAAAAAAAAAAAALL;
  return std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>((std::__shared_weak_count_vtbl **)a1, (std::__shared_weak_count_vtbl *)v3);
}

void sub_1BF729FDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void TraceCAReporter::TraceCAReporter(TraceCAReporter *this)
{
  NSObject *initially_inactive;
  NSObject *v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  int v8;
  std::string *v9;
  unint64_t size;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  char v18;
  std::string::size_type v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void **v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void **v29;
  std::string *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *v33;
  std::string *v34;
  float v35;
  float v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  size_t prime;
  int8x8_t v41;
  unint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  unint64_t v45;
  void ***v46;
  void **v47;
  unint64_t v48;
  const char *v49;
  size_t v50;
  size_t v51;
  void **p_dst;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  size_t v57;
  std::string::size_type v58;
  std::string *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  size_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  char *v69;
  void ***v70;
  void **__dst;
  char *v72;
  unint64_t v73;
  std::string v74;
  void *v75;
  size_t v76;
  unint64_t v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *__p;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v74, "com.apple.telephony.abm", "ca.trace.reporter");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v3 = dispatch_queue_create_with_target_V2("TraceCAReporter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((_QWORD *)this + 3) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((TraceCAReporter *)((char *)this + 32), (const ctu::OsLogLogger *)&__dst);
  MEMORY[0x1C3B8B74C](&__dst);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v74);
  v4 = (const char *)*MEMORY[0x1E0CFB170];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x1E0CFB170], MEMORY[0x1E0CFC090]);
  v68 = v4;
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v78, (char *)*MEMORY[0x1E0CFB178], MEMORY[0x1E0CFB668]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v82, (char *)*MEMORY[0x1E0CFBC00], MEMORY[0x1E0CFB908]);
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v86, (char *)*MEMORY[0x1E0CFB028], MEMORY[0x1E0CFB0C8]);
  v5 = 0;
  v6 = (_QWORD *)((char *)this + 64);
  v69 = (char *)this + 64;
  v70 = (void ***)((char *)this + 80);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 1065353216;
  do
  {
    v7 = &v74 + 2 * v5;
    v8 = SHIBYTE(v7->__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      v9 = &v74 + 2 * v5;
    else
      v9 = (std::string *)v7->__r_.__value_.__r.__words[0];
    if (v8 >= 0)
      size = HIBYTE(v7->__r_.__value_.__r.__words[2]);
    else
      size = v7->__r_.__value_.__l.__size_;
    v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&__dst, (uint64_t *)v9, size);
    v12 = v11;
    v13 = *((_QWORD *)this + 9);
    if (!v13)
    {
      v15 = 0xAAAAAAAAAAAAAAAALL;
      goto LABEL_63;
    }
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)v13);
    v14.i16[0] = vaddlv_u8(v14);
    if (v14.u32[0] > 1uLL)
    {
      v15 = v11;
      if (v11 >= v13)
        v15 = v11 % v13;
    }
    else
    {
      v15 = (v13 - 1) & v11;
    }
    v16 = *(uint64_t ***)(*v6 + 8 * v15);
    if (v16)
    {
      v17 = *v16;
      if (*v16)
      {
        v18 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        if (v18 >= 0)
          v19 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
        else
          v19 = v7->__r_.__value_.__l.__size_;
        if (v18 >= 0)
          v20 = &v74 + 2 * v5;
        else
          v20 = (std::string *)v7->__r_.__value_.__r.__words[0];
        if (v14.u32[0] < 2uLL)
        {
          while (1)
          {
            v26 = v17[1];
            if (v26 == v12)
            {
              v27 = *((unsigned __int8 *)v17 + 39);
              if ((v27 & 0x80u) == 0)
                v28 = *((unsigned __int8 *)v17 + 39);
              else
                v28 = v17[3];
              if (v28 == v19)
              {
                v29 = (const void **)(v17 + 2);
                if ((v27 & 0x80) != 0)
                {
                  if (!memcmp(*v29, v20, v17[3]))
                    goto LABEL_7;
                }
                else
                {
                  if (!*((_BYTE *)v17 + 39))
                    goto LABEL_7;
                  v30 = v20;
                  while (*(unsigned __int8 *)v29 == v30->__r_.__value_.__s.__data_[0])
                  {
                    v29 = (const void **)((char *)v29 + 1);
                    v30 = (std::string *)((char *)v30 + 1);
                    if (!--v27)
                      goto LABEL_7;
                  }
                }
              }
            }
            else if ((v26 & (v13 - 1)) != v15)
            {
              goto LABEL_62;
            }
            v17 = (uint64_t *)*v17;
            if (!v17)
              goto LABEL_62;
          }
        }
        while (1)
        {
          v21 = v17[1];
          if (v21 == v12)
          {
            v22 = *((unsigned __int8 *)v17 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v17 + 39);
            else
              v23 = v17[3];
            if (v23 == v19)
            {
              v24 = (const void **)(v17 + 2);
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp(*v24, v20, v17[3]))
                  goto LABEL_7;
              }
              else
              {
                if (!*((_BYTE *)v17 + 39))
                  goto LABEL_7;
                v25 = v20;
                while (*(unsigned __int8 *)v24 == v25->__r_.__value_.__s.__data_[0])
                {
                  v24 = (const void **)((char *)v24 + 1);
                  v25 = (std::string *)((char *)v25 + 1);
                  if (!--v22)
                    goto LABEL_7;
                }
              }
            }
          }
          else
          {
            if (v21 >= v13)
              v21 %= v13;
            if (v21 != v15)
            {
LABEL_62:
              v6 = (_QWORD *)((char *)this + 64);
              break;
            }
          }
          v17 = (uint64_t *)*v17;
          if (!v17)
            goto LABEL_62;
        }
      }
    }
LABEL_63:
    v73 = 0xAAAAAAAAAAAAAAAALL;
    v31 = operator new(0x40uLL);
    v32 = v31;
    __dst = (void **)v31;
    v72 = (char *)this + 80;
    LOBYTE(v73) = 0;
    *v31 = 0;
    v31[1] = v12;
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v31 + 2), v7->__r_.__value_.__l.__data_, v7->__r_.__value_.__l.__size_);
    }
    else
    {
      *((_OWORD *)v31 + 1) = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v31[4] = *((_QWORD *)&v7->__r_.__value_.__l + 2);
    }
    v33 = (std::string *)(v32 + 5);
    v34 = &v74 + 2 * v5 + 1;
    if (SHIBYTE(v7[1].__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v33, v34->__r_.__value_.__l.__data_, *(&v76 + 6 * v5));
    }
    else
    {
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v32[7] = *(&v77 + 6 * v5);
    }
    LOBYTE(v73) = 1;
    v35 = (float)(unint64_t)(*((_QWORD *)this + 11) + 1);
    v36 = *((float *)this + 24);
    if (v13 && (float)(v36 * (float)v13) >= v35)
      goto LABEL_97;
    v37 = (v13 & (v13 - 1)) != 0;
    if (v13 < 3)
      v37 = 1;
    v38 = v37 | (2 * v13);
    v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39)
      prime = v39;
    else
      prime = v38;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v41 = *(int8x8_t *)((char *)this + 72);
    if (prime > *(_QWORD *)&v41)
      goto LABEL_81;
    if (prime < *(_QWORD *)&v41)
    {
      v42 = vcvtps_u32_f32((float)*((unint64_t *)this + 11) / *((float *)this + 24));
      if (*(_QWORD *)&v41 < 3uLL || (v43 = (uint8x8_t)vcnt_s8(v41), v43.i16[0] = vaddlv_u8(v43), v43.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v42);
      }
      else
      {
        v44 = 1 << -(char)__clz(v42 - 1);
        if (v42 >= 2)
          v42 = v44;
      }
      if (prime <= v42)
        prime = v42;
      if (prime < *(_QWORD *)&v41)
LABEL_81:
        std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>((uint64_t)v6, prime);
    }
    v13 = *((_QWORD *)this + 9);
    v45 = v13 - 1;
    if ((v13 & (v13 - 1)) == 0)
    {
      v15 = v45 & v12;
      v46 = *(void ****)(*v6 + 8 * (v45 & v12));
      v47 = __dst;
      if (!v46)
        goto LABEL_98;
      goto LABEL_5;
    }
    if (v12 < v13)
    {
      v15 = v12;
LABEL_97:
      v46 = *(void ****)(*v6 + 8 * v15);
      v47 = __dst;
      if (!v46)
        goto LABEL_98;
      goto LABEL_5;
    }
    v15 = v12 % v13;
    v46 = *(void ****)(*v6 + 8 * (v12 % v13));
    v47 = __dst;
    if (!v46)
    {
LABEL_98:
      *v47 = *v70;
      *v70 = __dst;
      *(_QWORD *)(*v6 + 8 * v15) = v70;
      if (*__dst)
      {
        v48 = *((_QWORD *)*__dst + 1);
        if ((v13 & (v13 - 1)) != 0)
        {
          if (v48 >= v13)
            v48 %= v13;
        }
        else
        {
          v48 &= v13 - 1;
        }
        *(_QWORD *)(*v6 + 8 * v48) = __dst;
      }
      goto LABEL_6;
    }
LABEL_5:
    *v47 = *v46;
    *v46 = __dst;
LABEL_6:
    ++*((_QWORD *)this + 11);
LABEL_7:
    ++v5;
    v6 = (_QWORD *)((char *)this + 64);
  }
  while (v5 != 4);
  if ((v89 & 0x80000000) == 0)
  {
    v49 = v68;
    if ((v87 & 0x80000000) == 0)
      goto LABEL_108;
LABEL_133:
    operator delete(v86);
    if (v85 < 0)
      goto LABEL_134;
LABEL_109:
    if ((v83 & 0x80000000) == 0)
      goto LABEL_110;
LABEL_135:
    operator delete(v82);
    if (v81 < 0)
      goto LABEL_136;
LABEL_111:
    if ((v79 & 0x80000000) == 0)
      goto LABEL_112;
LABEL_137:
    operator delete(v78);
    if (SHIBYTE(v77) < 0)
      goto LABEL_138;
LABEL_113:
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_114;
LABEL_139:
    operator delete(v74.__r_.__value_.__l.__data_);
    goto LABEL_114;
  }
  operator delete(__p);
  v49 = v68;
  if (v87 < 0)
    goto LABEL_133;
LABEL_108:
  if ((v85 & 0x80000000) == 0)
    goto LABEL_109;
LABEL_134:
  operator delete(v84);
  if (v83 < 0)
    goto LABEL_135;
LABEL_110:
  if ((v81 & 0x80000000) == 0)
    goto LABEL_111;
LABEL_136:
  operator delete(v80);
  if (v79 < 0)
    goto LABEL_137;
LABEL_112:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
    goto LABEL_113;
LABEL_138:
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_139;
LABEL_114:
  gettimeofday((timeval *)this + 3, 0);
  v50 = strlen(v49);
  if (v50 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v51 = v50;
  if (v50 >= 0x17)
  {
    v53 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17)
      v53 = v50 | 7;
    v54 = v53 + 1;
    p_dst = (void **)operator new(v53 + 1);
    v72 = (char *)v51;
    v73 = v54 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_121;
  }
  HIBYTE(v73) = v50;
  p_dst = (void **)&__dst;
  if (v50)
LABEL_121:
    memmove(p_dst, v49, v51);
  *((_BYTE *)p_dst + v51) = 0;
  memset(&v74, 0, sizeof(v74));
  v55 = prop::bbtrace::get((char *)&__dst, (uint64_t)&v74);
  if ((_DWORD)v55)
    v55 = util::convert<BOOL>(&v74, (BOOL *)this + 40, 0);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73) < 0)
      goto LABEL_141;
  }
  else
  {
    if ((SHIBYTE(v73) & 0x80000000) == 0)
      goto LABEL_126;
LABEL_141:
    operator delete(__dst);
  }
LABEL_126:
  if (!capabilities::radio::maverick((capabilities::radio *)v55))
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>((uint64_t)&v74, (char *)*MEMORY[0x1E0D01AE8], MEMORY[0x1E0CFB670]);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
    goto LABEL_155;
  }
  v56 = (const void *)*MEMORY[0x1E0CF1210];
  v57 = strlen((const char *)*MEMORY[0x1E0CF1210]);
  if (v57 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v58 = v57;
  if (v57 >= 0x17)
  {
    v60 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v57 | 7) != 0x17)
      v60 = v57 | 7;
    v61 = v60 + 1;
    v59 = (std::string *)operator new(v60 + 1);
    v74.__r_.__value_.__l.__size_ = v58;
    v74.__r_.__value_.__r.__words[2] = v61 | 0x8000000000000000;
    v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
    goto LABEL_145;
  }
  *((_BYTE *)&v74.__r_.__value_.__s + 23) = v57;
  v59 = &v74;
  if (v57)
LABEL_145:
    memmove(v59, v56, v58);
  v59->__r_.__value_.__s.__data_[v58] = 0;
  v62 = &v75;
  v63 = (const void *)*MEMORY[0x1E0CFB670];
  v64 = strlen((const char *)*MEMORY[0x1E0CFB670]);
  if (v64 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v65 = v64;
  if (v64 >= 0x17)
  {
    v66 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v64 | 7) != 0x17)
      v66 = v64 | 7;
    v67 = v66 + 1;
    v62 = operator new(v66 + 1);
    v76 = v65;
    v77 = v67 | 0x8000000000000000;
    v75 = v62;
    goto LABEL_153;
  }
  HIBYTE(v77) = v64;
  if (v64)
LABEL_153:
    memmove(v62, v63, v65);
  *((_BYTE *)v62 + v65) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t)v69, (uint64_t)&v74, (uint64_t)&v74);
LABEL_155:
  if ((SHIBYTE(v77) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_159:
    operator delete(v74.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v75);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_159;
}

void sub_1BF72A95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;

  std::pair<std::string,std::string>::~pair((uint64_t)&__p);
  std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](a14);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v27);
  _Unwind_Resume(a1);
}

void sub_1BF72AA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  _QWORD *v19;
  char *v20;

  do
  {
    v20 -= 48;
    std::pair<std::string,std::string>::~pair((uint64_t)v20);
  }
  while (v20 != &a19);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v19);
  _Unwind_Resume(a1);
}

void sub_1BF72AB14(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t std::unordered_map<std::string,std::string>::~unordered_map[abi:ne180100](uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_10:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_10;
      }
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void TraceCAReporter::prepTraceStats(TraceCAReporter *a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t value;
  xpc_object_t v7;
  void **v8;
  const char *v9;
  NSObject *v10;
  xpc_object_t v11;
  uint64_t v12;
  xpc_object_t v13;
  xpc_object_t v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  void **v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t object[3];
  void *v37[3];
  __int128 __p;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  memset(v37, 170, sizeof(v37));
  value = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB550]);
  object[0] = value;
  if (value)
    xpc_retain(value);
  else
    object[0] = xpc_null_create();
  __p = 0uLL;
  v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  memset(object, 170, sizeof(object));
  v7 = xpc_dictionary_get_value(*a2, (const char *)*MEMORY[0x1E0CFB030]);
  v35 = v7;
  if (v7)
    xpc_retain(v7);
  else
    v35 = xpc_null_create();
  __p = 0uLL;
  v39 = 0;
  xpc::dyn_cast_or_default();
  xpc_release(v35);
  if (!TraceCAReporter::supportedTraceDomainToReport((uint64_t)a1, (char *)object))
    goto LABEL_14;
  if (SHIBYTE(v37[2]) >= 0)
    v8 = v37;
  else
    v8 = (void **)v37[0];
  v9 = (const char *)*MEMORY[0x1E0CFB170];
  if (strcasecmp((const char *)v8, (const char *)*MEMORY[0x1E0CFB170]))
  {
    v10 = *((_QWORD *)a1 + 4);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v8;
      _os_log_error_impl(&dword_1BF566000, v10, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&__p, 0xCu);
    }
LABEL_14:
    *a3 = xpc_null_create();
    goto LABEL_15;
  }
  v11 = xpc_dictionary_create(0, 0, 0);
  v12 = MEMORY[0x1E0C812F8];
  if (v11 || (v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C3B8CD78](v11) == v12)
    {
      xpc_retain(v11);
      v13 = v11;
    }
    else
    {
      v13 = xpc_null_create();
    }
  }
  else
  {
    v13 = xpc_null_create();
    v11 = 0;
  }
  xpc_release(v11);
  v14 = xpc_string_create((const char *)*MEMORY[0x1E0CFB900]);
  if (!v14)
    v14 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB278], v14);
  v15 = xpc_null_create();
  xpc_release(v14);
  xpc_release(v15);
  v16 = xpc_string_create((const char *)*MEMORY[0x1E0CFB2C0]);
  if (!v16)
    v16 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB3F0], v16);
  v17 = xpc_null_create();
  xpc_release(v16);
  xpc_release(v17);
  v18 = xpc_string_create((const char *)*MEMORY[0x1E0CFB368]);
  if (!v18)
    v18 = xpc_null_create();
  xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB3E8], v18);
  v19 = xpc_null_create();
  xpc_release(v18);
  xpc_release(v19);
  *(_QWORD *)&__p = 0xAAAAAAAAAAAAAAAALL;
  v20 = xpc_null_create();
  *(_QWORD *)&__p = v20;
  if (SHIBYTE(v37[2]) >= 0)
    v21 = v37;
  else
    v21 = (void **)v37[0];
  if (!strcasecmp((const char *)v21, v9))
  {
    v23 = *a2;
    v34 = v23;
    if (v23)
    {
      xpc_retain(v23);
    }
    else
    {
      v23 = xpc_null_create();
      v34 = v23;
    }
    TraceCAReporter::prepTraceStatsEnabled((uint64_t)a1, &v34, &v35);
    v22 = v35;
    v35 = xpc_null_create();
    *(_QWORD *)&__p = v22;
    xpc_release(v20);
    xpc_release(v35);
    v35 = 0;
    xpc_release(v23);
    v34 = 0;
  }
  else
  {
    v22 = v20;
  }
  if (MEMORY[0x1C3B8CD78](v22) == v12)
  {
    TraceCAReporter::gatherMissingBasebandTraceState(a1, (xpc_object_t *)&__p);
    v24 = (xpc_object_t)__p;
    if ((_QWORD)__p)
      xpc_retain((xpc_object_t)__p);
    else
      v24 = xpc_null_create();
    xpc_dictionary_set_value(v13, (const char *)*MEMORY[0x1E0CFB9D8], v24);
    v25 = xpc_null_create();
    xpc_release(v24);
    xpc_release(v25);
    *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
    v26 = xpc_dictionary_create(0, 0, 0);
    v27 = v26;
    if (v26)
    {
      *a3 = v26;
    }
    else
    {
      v27 = xpc_null_create();
      *a3 = v27;
      if (!v27)
      {
        v28 = xpc_null_create();
        v27 = 0;
        goto LABEL_53;
      }
    }
    if (MEMORY[0x1C3B8CD78](v27) == v12)
    {
      xpc_retain(v27);
LABEL_54:
      xpc_release(v27);
      v29 = xpc_string_create((const char *)*MEMORY[0x1E0CFAFE8]);
      if (!v29)
        v29 = xpc_null_create();
      v30 = *a3;
      xpc_dictionary_set_value(*a3, (const char *)*MEMORY[0x1E0CFB020], v29);
      v31 = xpc_null_create();
      xpc_release(v29);
      xpc_release(v31);
      if (v13)
      {
        xpc_retain(v13);
        v30 = *a3;
        v32 = v13;
      }
      else
      {
        v32 = xpc_null_create();
      }
      xpc_dictionary_set_value(v30, (const char *)*MEMORY[0x1E0CFB018], v32);
      v33 = xpc_null_create();
      xpc_release(v32);
      xpc_release(v33);
      v22 = (xpc_object_t)__p;
      goto LABEL_60;
    }
    v28 = xpc_null_create();
LABEL_53:
    *a3 = v28;
    goto LABEL_54;
  }
  *a3 = xpc_null_create();
LABEL_60:
  xpc_release(v22);
  xpc_release(v13);
LABEL_15:
  if ((SHIBYTE(object[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v37[2]) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(v37[0]);
    return;
  }
  operator delete(object[0]);
  if (SHIBYTE(v37[2]) < 0)
    goto LABEL_19;
}

void sub_1BF72B160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

BOOL TraceCAReporter::supportedTraceDomainToReport(uint64_t a1, char *a2)
{
  int v4;
  const char *v5;
  NSObject *v6;
  _BOOL8 result;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a2[23];
  if ((v4 & 0x80000000) == 0)
  {
    v5 = a2;
    if (strcasecmp(a2, (const char *)*MEMORY[0x1E0CFB088]))
      goto LABEL_3;
    return 1;
  }
  v5 = *(const char **)a2;
  if (!strcasecmp(*(const char **)a2, (const char *)*MEMORY[0x1E0CFB088]))
    return 1;
LABEL_3:
  if (!strcasecmp(v5, (const char *)*MEMORY[0x1E0D01A80]))
    return 1;
  v6 = *(NSObject **)(a1 + 32);
  result = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v8 = *(char **)a2;
    if (v4 >= 0)
      v8 = a2;
    v9 = 136315138;
    v10 = v8;
    _os_log_error_impl(&dword_1BF566000, v6, OS_LOG_TYPE_ERROR, "Trace domain %s is not supported to report to CA", (uint8_t *)&v9, 0xCu);
    return 0;
  }
  return result;
}

BOOL TraceCAReporter::supportedTracePropertyToReport(uint64_t a1, uint64_t a2)
{
  const char *v3;
  int v4;
  NSObject *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  v4 = strcasecmp(v3, (const char *)*MEMORY[0x1E0CFB170]);
  if (v4)
  {
    v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v7 = 136315138;
      v8 = v3;
      _os_log_error_impl(&dword_1BF566000, v5, OS_LOG_TYPE_ERROR, "Trace property %s is not supported to report to CA", (uint8_t *)&v7, 0xCu);
    }
  }
  return v4 == 0;
}

void TraceCAReporter::prepTraceStatsEnabled(uint64_t a1@<X0>, xpc_object_t *a2@<X1>, xpc_object_t *a3@<X8>)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  int v13;
  std::string::size_type size;
  std::string *v16;
  void *v18;
  unint64_t v19;
  int v20;
  uint8_t *v21;
  uint64_t v22;
  void **v23;
  int v24;
  int v25;
  int v26;
  _BOOL4 v27;
  NSObject *v29;
  xpc_object_t v30;
  NSObject *v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  const char *v35;
  xpc_object_t v36;
  xpc_object_t v37;
  xpc_object_t v38;
  void **v39;
  xpc_object_t v40;
  xpc_object_t v41;
  char *v42;
  std::string *v43;
  void **v44;
  BOOL v45;
  void *v46[2];
  char v47;
  void *__s1[3];
  void *v49[2];
  char v50;
  std::string v51;
  void *__p[2];
  char v53;
  char v54[24];
  uint8_t buf[23];
  unsigned __int8 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  memset(v54, 170, sizeof(v54));
  v6 = (char *)*MEMORY[0x1E0CFB550];
  v53 = 12;
  strcpy((char *)__p, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)v54, *a2, v6, (uint64_t)__p);
  if (v53 < 0)
    operator delete(__p[0]);
  memset(&v51, 170, sizeof(v51));
  v7 = (char *)*MEMORY[0x1E0CFB6A8];
  v50 = 12;
  strcpy((char *)v49, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)&v51, *a2, v7, (uint64_t)v49);
  if (v50 < 0)
    operator delete(v49[0]);
  memset(__s1, 170, sizeof(__s1));
  v8 = (char *)*MEMORY[0x1E0CFBF88];
  v47 = 12;
  strcpy((char *)v46, "NotSpecified");
  TraceCAReporter::getOrDefault<std::string>((uint64_t)__s1, *a2, v8, (uint64_t)v46);
  if (v47 < 0)
    operator delete(v46[0]);
  v9 = v54[23];
  v10 = v54[23];
  if (v54[23] < 0)
    v9 = *(_QWORD *)&v54[8];
  if (v9 == 12)
  {
    v11 = *(char **)v54;
    if (v54[23] >= 0)
      v11 = v54;
    v12 = *(_QWORD *)v11;
    v13 = *((_DWORD *)v11 + 2);
    if (v12 == 0x6963657053746F4ELL && v13 == 1684367718)
      goto LABEL_48;
  }
  size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v16 = &v51;
  }
  else
  {
    size = v51.__r_.__value_.__l.__size_;
    v16 = (std::string *)v51.__r_.__value_.__r.__words[0];
  }
  if (size == 12
    && v16->__r_.__value_.__r.__words[0] == 0x6963657053746F4ELL
    && LODWORD(v16->__r_.__value_.__r.__words[1]) == 1684367718)
  {
LABEL_48:
    v31 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v42 = *(char **)v54;
      if (v10 >= 0)
        v42 = v54;
      v43 = &v51;
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = (std::string *)v51.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v42;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v43;
      _os_log_error_impl(&dword_1BF566000, v31, OS_LOG_TYPE_ERROR, "Missing one of the key/value: key is %s, value is %s", buf, 0x16u);
    }
    goto LABEL_52;
  }
  if (!strcmp((const char *)v16, "default") && !defaults::bbtrace::get(v54, (std::string::size_type *)&v51))
  {
LABEL_52:
    v30 = xpc_null_create();
    goto LABEL_53;
  }
  v45 = 0;
  util::convert<BOOL>(&v51, &v45, 0);
  if (*(_BYTE *)(a1 + 40) != v45)
    goto LABEL_64;
  abm::asString();
  if (SHIBYTE(__s1[2]) >= 0)
    v18 = (void *)HIBYTE(__s1[2]);
  else
    v18 = __s1[1];
  v19 = v56;
  v20 = (char)v56;
  if ((v56 & 0x80u) != 0)
    v19 = *(_QWORD *)&buf[8];
  if (v18 != (void *)v19)
  {
    v27 = 1;
    if (((char)v56 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_63;
  }
  if ((v56 & 0x80u) == 0)
    v21 = buf;
  else
    v21 = *(uint8_t **)buf;
  if ((HIBYTE(__s1[2]) & 0x80) != 0)
  {
    v27 = memcmp(__s1[0], v21, (size_t)__s1[1]) != 0;
    if ((v20 & 0x80000000) == 0)
      goto LABEL_45;
    goto LABEL_63;
  }
  if (!HIBYTE(__s1[2]))
  {
    v27 = 0;
    if (((char)v56 & 0x80000000) == 0)
      goto LABEL_45;
LABEL_63:
    operator delete(*(void **)buf);
    if (v27)
      goto LABEL_46;
    goto LABEL_64;
  }
  v22 = HIBYTE(__s1[2]) - 1;
  v23 = __s1;
  do
  {
    v25 = *(unsigned __int8 *)v23;
    v23 = (void **)((char *)v23 + 1);
    v24 = v25;
    v26 = *v21++;
    v27 = v24 != v26;
  }
  while (v24 == v26 && v22-- != 0);
  if ((char)v56 < 0)
    goto LABEL_63;
LABEL_45:
  if (v27)
  {
LABEL_46:
    v29 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      v44 = __s1;
      if (SHIBYTE(__s1[2]) < 0)
        v44 = (void **)__s1[0];
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = v45;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = v44;
      _os_log_debug_impl(&dword_1BF566000, v29, OS_LOG_TYPE_DEBUG, "#D No state transistion, not reporting to CA(state: %d, triggerInterface: %s)", buf, 0x12u);
    }
    v30 = xpc_null_create();
LABEL_53:
    *a3 = v30;
    if ((SHIBYTE(__s1[2]) & 0x80000000) == 0)
      goto LABEL_55;
    goto LABEL_54;
  }
LABEL_64:
  *a3 = (xpc_object_t)0xAAAAAAAAAAAAAAAALL;
  v32 = xpc_dictionary_create(0, 0, 0);
  v33 = v32;
  if (v32)
  {
    *a3 = v32;
  }
  else
  {
    v33 = xpc_null_create();
    *a3 = v33;
    if (!v33)
    {
      v34 = xpc_null_create();
      v33 = 0;
      goto LABEL_71;
    }
  }
  if (MEMORY[0x1C3B8CD78](v33) == MEMORY[0x1E0C812F8])
  {
    xpc_retain(v33);
    goto LABEL_72;
  }
  v34 = xpc_null_create();
LABEL_71:
  *a3 = v34;
LABEL_72:
  xpc_release(v33);
  TraceCAReporter::gatherDurationInformation((TraceCAReporter *)a1, a3);
  if (*(_BYTE *)(a1 + 40))
    v35 = "On";
  else
    v35 = "Off";
  v36 = xpc_string_create(v35);
  if (!v36)
    v36 = xpc_null_create();
  v37 = *a3;
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CFC090], v36);
  v38 = xpc_null_create();
  xpc_release(v36);
  xpc_release(v38);
  if (SHIBYTE(__s1[2]) >= 0)
    v39 = __s1;
  else
    v39 = (void **)__s1[0];
  v40 = xpc_string_create((const char *)v39);
  if (!v40)
    v40 = xpc_null_create();
  xpc_dictionary_set_value(v37, (const char *)*MEMORY[0x1E0CFB678], v40);
  v41 = xpc_null_create();
  xpc_release(v40);
  xpc_release(v41);
  *(_BYTE *)(a1 + 40) = v45;
  if (SHIBYTE(__s1[2]) < 0)
LABEL_54:
    operator delete(__s1[0]);
LABEL_55:
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v54[23] & 0x80000000) == 0)
      return;
LABEL_59:
    operator delete(*(void **)v54);
    return;
  }
  operator delete(v51.__r_.__value_.__l.__data_);
  if (v54[23] < 0)
    goto LABEL_59;
}

void sub_1BF72BB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void TraceCAReporter::gatherMissingBasebandTraceState(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t *i;
  __int128 v11;
  std::string *v12;
  std::string *p_p;
  xpc_object_t v14;
  std::string *v15;
  xpc_object_t v16;
  std::string __p;
  void *v18[2];
  uint64_t v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  _BYTE v23[32];

  v4 = MEMORY[0x1C3B8CD78](*a2);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v6) == v5)
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = xpc_null_create();
    v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  for (i = (uint64_t *)*((_QWORD *)this + 10); i; i = (uint64_t *)*i)
  {
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v23 = v11;
    *(_OWORD *)&v23[16] = v11;
    v22 = v11;
    if (*((char *)i + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v22, (const std::string::value_type *)i[2], i[3]);
      if ((*((char *)i + 63) & 0x80000000) == 0)
      {
LABEL_14:
        *(_OWORD *)&v23[8] = *(_OWORD *)(i + 5);
        *(_QWORD *)&v23[24] = i[7];
        goto LABEL_17;
      }
    }
    else
    {
      v22 = *((_OWORD *)i + 1);
      *(_QWORD *)v23 = i[4];
      if ((*((char *)i + 63) & 0x80000000) == 0)
        goto LABEL_14;
    }
    std::string::__init_copy_ctor_external((std::string *)&v23[8], (const std::string::value_type *)i[5], i[6]);
LABEL_17:
    memset(&v21, 170, sizeof(v21));
    if ((v23[7] & 0x80000000) != 0)
    {
      std::string::__init_copy_ctor_external(&v21, (const std::string::value_type *)v22, *((std::string::size_type *)&v22 + 1));
    }
    else
    {
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v22;
      v21.__r_.__value_.__r.__words[2] = *(_QWORD *)v23;
    }
    memset(&v20, 170, sizeof(v20));
    if ((v23[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)&v23[8], *(std::string::size_type *)&v23[16]);
    else
      v20 = *(std::string *)&v23[8];
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v20;
    else
      v12 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if (xpc_dictionary_get_value(*a2, (const char *)v12))
    {
LABEL_37:
      if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_38;
      goto LABEL_44;
    }
    v18[0] = 0;
    v18[1] = 0;
    v19 = 0;
    prop::bbtrace::get((char *)&v21, (uint64_t)v18);
    TraceCAReporter::convertPlistValToCAInformation((char *)&v21, (uint64_t)v18, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v14 = xpc_string_create((const char *)p_p);
    if (!v14)
      v14 = xpc_null_create();
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v20;
    else
      v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
    xpc_dictionary_set_value(*a2, (const char *)v15, v14);
    v16 = xpc_null_create();
    xpc_release(v14);
    xpc_release(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v19) & 0x80000000) == 0)
        goto LABEL_37;
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      goto LABEL_37;
    }
    operator delete(v18[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_38:
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_39;
      goto LABEL_45;
    }
LABEL_44:
    operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_39:
      if ((v23[31] & 0x80000000) == 0)
        goto LABEL_40;
      goto LABEL_46;
    }
LABEL_45:
    operator delete(v21.__r_.__value_.__l.__data_);
    if ((v23[31] & 0x80000000) == 0)
    {
LABEL_40:
      if ((v23[7] & 0x80000000) != 0)
        goto LABEL_47;
      continue;
    }
LABEL_46:
    operator delete(*(void **)&v23[8]);
    if ((v23[7] & 0x80000000) != 0)
LABEL_47:
      operator delete((void *)v22);
  }
}

void sub_1BF72BF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((a23 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a30 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a23 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a18);
  if ((a30 & 0x80000000) == 0)
  {
LABEL_4:
    std::pair<std::string,std::string>::~pair((uint64_t)&a32);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(a25);
  std::pair<std::string,std::string>::~pair((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void TraceCAReporter::getOrDefault<std::string>(uint64_t a1, xpc_object_t xdict, char *key, uint64_t a4)
{
  xpc_object_t value;
  void *v7;
  int v8;
  xpc_object_t object;
  void *v10[6];

  memset(v10, 170, 24);
  value = xpc_dictionary_get_value(xdict, key);
  object = value;
  if (value)
    xpc_retain(value);
  else
    object = xpc_null_create();
  memset(&v10[3], 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(object);
  v7 = (void *)HIBYTE(v10[2]);
  v8 = SHIBYTE(v10[2]);
  if (SHIBYTE(v10[2]) < 0)
    v7 = v10[1];
  if (v7)
  {
    *(_OWORD *)a1 = *(_OWORD *)v10;
    *(void **)(a1 + 16) = v10[2];
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    if (v8 < 0)
      operator delete(v10[0]);
  }
}

void sub_1BF72C0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  xpc_release(object);
  _Unwind_Resume(a1);
}

double TraceCAReporter::gatherDurationInformation(TraceCAReporter *this, xpc_object_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  timeval *v10;
  uint64_t v11;
  xpc_object_t v12;
  xpc_object_t v13;
  double result;
  timeval v15;

  v4 = MEMORY[0x1C3B8CD78](*a2);
  v5 = MEMORY[0x1E0C812F8];
  if (v4 != MEMORY[0x1E0C812F8])
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6 || (v6 = xpc_null_create()) != 0)
    {
      if (MEMORY[0x1C3B8CD78](v6) == v5)
      {
        xpc_retain(v6);
        v7 = v6;
      }
      else
      {
        v7 = xpc_null_create();
      }
    }
    else
    {
      v7 = xpc_null_create();
      v6 = 0;
    }
    xpc_release(v6);
    v8 = xpc_null_create();
    v9 = *a2;
    *a2 = v7;
    xpc_release(v9);
    xpc_release(v8);
  }
  v15.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v15.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v15, 0);
  v11 = *((_QWORD *)this + 6);
  v10 = (timeval *)((char *)this + 48);
  v12 = xpc_int64_create(v15.tv_sec - v11);
  if (!v12)
    v12 = xpc_null_create();
  xpc_dictionary_set_value(*a2, (const char *)*MEMORY[0x1E0CFB348], v12);
  v13 = xpc_null_create();
  xpc_release(v12);
  xpc_release(v13);
  result = *(double *)&v15.tv_sec;
  *v10 = v15;
  return result;
}

std::string *TraceCAReporter::convertPlistValToCAInformation@<X0>(char *a1@<X1>, uint64_t a2@<X2>, std::string *a3@<X8>)
{
  char *v4;
  std::string *v5;
  std::string *result;
  uint64_t v7;
  _BYTE *v8;
  const std::string::value_type *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  const std::string::value_type *v13;
  int v14;

  v4 = a1;
  v5 = a3;
  memset(a3, 170, sizeof(std::string));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    if ((v4[23] & 0x80000000) == 0)
    {
LABEL_3:
      result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBC00]);
      if ((_DWORD)result)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    if ((a1[23] & 0x80000000) == 0)
      goto LABEL_3;
  }
  v4 = *(char **)v4;
  result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x1E0CFBC00]);
  if ((_DWORD)result)
  {
LABEL_4:
    if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB028]))
    {
      v14 = -1431655766;
      util::convert<int>((const std::string *)a2, &v14, 0);
      v13 = (const std::string::value_type *)trace::toString();
      return std::string::__assign_external(v5, v13);
    }
    else if (!strcasecmp(v4, (const char *)*MEMORY[0x1E0CFB170])
           || !strcasecmp(v4, (const char *)*MEMORY[0x1E0D01AE8])
           || (result = (std::string *)strcasecmp(v4, (const char *)*MEMORY[0x1E0CF1210]), !(_DWORD)result))
    {
      v7 = *(unsigned __int8 *)(a2 + 23);
      if (*(char *)(a2 + 23) < 0)
        v7 = *(_QWORD *)(a2 + 8);
      if (v7 == 1)
      {
        if (*(char *)(a2 + 23) >= 0)
          v8 = (_BYTE *)a2;
        else
          v8 = *(_BYTE **)a2;
        if (*v8 == 48)
          v9 = "Off";
        else
          v9 = "On";
      }
      else
      {
        v9 = "On";
      }
      return std::string::__assign_external(v5, v9);
    }
    return result;
  }
LABEL_19:
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (v10 == 1)
  {
    v12 = v11 >= 0 ? (_BYTE *)a2 : *(_BYTE **)a2;
    if (*v12 == 48)
    {
      if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
      {
        v5->__r_.__value_.__l.__size_ = 8;
        v5 = (std::string *)v5->__r_.__value_.__r.__words[0];
      }
      else
      {
        *((_BYTE *)&v5->__r_.__value_.__s + 23) = 8;
      }
      strcpy((char *)v5, "No limit");
    }
  }
  return result;
}

void sub_1BF72C478(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string const,std::string>::pair[abi:ne180100]<char const* const&,char const* const&,0>(uint64_t a1, char *__s, const char **a3)
{
  size_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = strlen(__s);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v10 | 0x8000000000000000;
    *(_QWORD *)a1 = v8;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = v6;
  v8 = (void *)a1;
  if (v6)
LABEL_8:
    memmove(v8, __s, v7);
  *((_BYTE *)v8 + v7) = 0;
  v11 = (void *)(a1 + 24);
  v12 = *a3;
  v13 = strlen(*a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v15 = v13 | 7;
    v16 = v15 + 1;
    v11 = operator new(v15 + 1);
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v16 | 0x8000000000000000;
    *(_QWORD *)(a1 + 24) = v11;
  }
  else
  {
    *(_BYTE *)(a1 + 47) = v13;
    if (!v13)
      goto LABEL_17;
  }
  memmove(v11, v12, v14);
LABEL_17:
  *((_BYTE *)v11 + v14) = 0;
  return a1;
}

void sub_1BF72C5D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count_vtbl **std::shared_ptr<TraceCAReporter>::shared_ptr[abi:ne180100]<TraceCAReporter,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1},void>(std::__shared_weak_count_vtbl **a1, std::__shared_weak_count_vtbl *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79225D0;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = a2;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  if (!a2)
    return a1;
  v6 = (std::__shared_weak_count *)a2->~__shared_weak_count_0;
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    a2->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
    a2->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF72C6FC(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF72C71C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 16), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<TraceCAReporter *,std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter *)#1},std::allocator<TraceCAReporter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_pt"
                                "rIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI15TraceCAReporterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void std::shared_ptr<TraceCAReporter> ctu::SharedSynchronizable<TraceCAReporter>::make_shared_ptr<TraceCAReporter>(TraceCAReporter*)::{lambda(TraceCAReporter*)#1}::operator() const(TraceCAReporter*)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  void **v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  void **v7;

  if (!a1)
    return;
  v2 = (void **)a1[10];
  if (v2)
  {
    do
    {
      v7 = (void **)*v2;
      if (*((char *)v2 + 63) < 0)
      {
        operator delete(v2[5]);
        if (*((char *)v2 + 39) < 0)
LABEL_17:
          operator delete(v2[2]);
      }
      else if (*((char *)v2 + 39) < 0)
      {
        goto LABEL_17;
      }
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[8];
  a1[8] = 0;
  if (v3)
    operator delete(v3);
  MEMORY[0x1C3B8B74C](a1 + 4);
  v4 = a1[3];
  if (v4)
    dispatch_release(v4);
  v5 = a1[2];
  if (v5)
    dispatch_release(v5);
  v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  operator delete(a1);
}

uint64_t *std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      if (*(char *)(v2 + 63) < 0)
      {
        operator delete(*(void **)(v2 + 40));
        if ((*(char *)(v2 + 39) & 0x80000000) == 0)
          goto LABEL_5;
      }
      else if ((*(char *)(v2 + 39) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 16));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void **v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  unsigned __int8 *i;
  char *v27;
  std::string *v28;
  float v29;
  float v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD v43[2];
  unint64_t v44;

  v4 = (_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v7 = v6;
  }
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)v43, (uint64_t *)a2, v7);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v12 = v8;
      if (v8 >= v10)
        v12 = v8 % v10;
    }
    else
    {
      v12 = (v10 - 1) & v8;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v4[23];
        if (v15 >= 0)
          v16 = v4[23];
        else
          v16 = *((_QWORD *)v4 + 1);
        if (v15 < 0)
          v4 = *(_BYTE **)v4;
        if (v11.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v14[1];
            if (v22 == v9)
            {
              v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v14 + 39);
              else
                v24 = v14[3];
              if (v24 == v16)
              {
                v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v4, v14[3]))
                    return;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return;
                  for (i = v4; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    v25 = (const void **)((char *)v25 + 1);
                    if (!--v23)
                      return;
                  }
                }
              }
            }
            else if ((v22 & (v10 - 1)) != v12)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v9)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v4, v14[3]))
                  return;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return;
                for (j = v4; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  v20 = (const void **)((char *)v20 + 1);
                  if (!--v18)
                    return;
                }
              }
            }
          }
          else
          {
            if (v17 >= v10)
              v17 %= v10;
            if (v17 != v12)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    v12 = 0xAAAAAAAAAAAAAAAALL;
  }
LABEL_51:
  v44 = 0xAAAAAAAAAAAAAA00;
  v27 = (char *)operator new(0x40uLL);
  v43[0] = v27;
  v43[1] = a1 + 16;
  *(_QWORD *)v27 = 0;
  *((_QWORD *)v27 + 1) = v9;
  v28 = (std::string *)(v27 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v27 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v27 + 40) = *(_OWORD *)(a3 + 24);
  *((_QWORD *)v27 + 7) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  LOBYTE(v44) = 1;
  v29 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v30 = *(float *)(a1 + 32);
  if (v10 && (float)(v30 * (float)v10) >= v29)
    goto LABEL_82;
  v31 = 1;
  if (v10 >= 3)
    v31 = (v10 & (v10 - 1)) != 0;
  v32 = v31 | (2 * v10);
  v33 = vcvtps_u32_f32(v29 / v30);
  if (v32 <= v33)
    prime = v33;
  else
    prime = v32;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v35 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v35)
    goto LABEL_66;
  if (prime < *(_QWORD *)&v35)
  {
    v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
    {
      v36 = std::__next_prime(v36);
    }
    else
    {
      v38 = 1 << -(char)__clz(v36 - 1);
      if (v36 >= 2)
        v36 = v38;
    }
    if (prime <= v36)
      prime = v36;
    if (prime < *(_QWORD *)&v35)
LABEL_66:
      std::__hash_table<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::__unordered_map_hasher<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::__unordered_map_equal<ctu::iokit::TelephonyIOKitPowerSource,std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>,std::equal_to<ctu::iokit::TelephonyIOKitPowerSource>,std::hash<ctu::iokit::TelephonyIOKitPowerSource>,true>,std::allocator<std::__hash_value_type<ctu::iokit::TelephonyIOKitPowerSource,abm::AccessoryInfo>>>::__do_rehash<true>(a1, prime);
  }
  v10 = *(_QWORD *)(a1 + 8);
  v39 = v10 - 1;
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v9 >= v10)
    {
      v12 = v9 % v10;
      v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v9 % v10));
      v41 = (_QWORD *)v43[0];
      if (!v40)
        goto LABEL_85;
      goto LABEL_83;
    }
    v12 = v9;
LABEL_82:
    v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
    v41 = (_QWORD *)v43[0];
    if (!v40)
      goto LABEL_85;
    goto LABEL_83;
  }
  v12 = v39 & v9;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v9));
  v41 = (_QWORD *)v43[0];
  if (!v40)
  {
LABEL_85:
    *v41 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v43[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v43[0])
    {
      v42 = *(_QWORD *)(*(_QWORD *)v43[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v42 >= v10)
          v42 %= v10;
      }
      else
      {
        v42 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v42) = v43[0];
    }
    goto LABEL_91;
  }
LABEL_83:
  *v41 = *v40;
  *v40 = v43[0];
LABEL_91:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BF72CD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BF72CD44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *BasebandCrashReasonFilter::create@<X0>(_QWORD *a1@<X8>)
{
  BasebandCrashReasonFilter *v3;

  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = (BasebandCrashReasonFilter *)operator new(0x60uLL);
  BasebandCrashReasonFilter::BasebandCrashReasonFilter(v3);
  *a1 = 0xAAAAAAAAAAAAAAAALL;
  a1[1] = 0xAAAAAAAAAAAAAAAALL;
  return std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(a1, (uint64_t)v3);
}

void sub_1BF72CDA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::~BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  char *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  std::__shared_weak_count *v12;
  uint8_t v13[16];

  *(_QWORD *)this = off_1E7922620;
  v2 = (char *)this + 40;
  v3 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1BF566000, v3, OS_LOG_TYPE_DEFAULT, "#I Gone!", v13, 2u);
  }
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = *((_QWORD *)this + 10);
    v6 = (void *)*((_QWORD *)this + 9);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 9) < 0)
          operator delete(*(void **)(v5 - 32));
        v5 -= 32;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v4;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    v8 = *((_QWORD *)this + 7);
    v9 = (void *)*((_QWORD *)this + 6);
    if (v8 != v7)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0)
          operator delete(*(void **)(v8 - 32));
        v8 -= 32;
      }
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v7;
    operator delete(v9);
  }
  MEMORY[0x1C3B8B74C](v2);
  v10 = *((_QWORD *)this + 4);
  if (v10)
    dispatch_release(v10);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    dispatch_release(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
}

{
  void *v1;

  BasebandCrashReasonFilter::~BasebandCrashReasonFilter(this);
  operator delete(v1);
}

void BasebandCrashReasonFilter::BasebandCrashReasonFilter(BasebandCrashReasonFilter *this)
{
  NSObject *initially_inactive;
  NSObject *v3;
  void **v4;
  NSObject *v5;
  void **v6;
  void **v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  void *v12;
  __int128 v13;
  char v14[8];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v12, "com.apple.telephony.abm", "bb.crashreason.fltr");
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v3 = dispatch_queue_create_with_target_V2("BasebandCrashReasonFilter", initially_inactive, 0);
  dispatch_set_qos_class_floor(v3, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v3);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    *((_QWORD *)this + 4) = 0;
    dispatch_release(v3);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger((BasebandCrashReasonFilter *)((char *)this + 40), (const ctu::OsLogLogger *)v14);
  MEMORY[0x1C3B8B74C](v14);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
  *(_QWORD *)this = off_1E7922620;
  *((_OWORD *)this + 3) = 0u;
  v4 = (void **)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  v5 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I initializing baseband crash reason patterns and masks from preferences file", (uint8_t *)&v12, 2u);
  }
  BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(this, &v12);
  v6 = (void **)*v4;
  if (*v4)
  {
    v7 = (void **)*((_QWORD *)this + 7);
    v8 = *v4;
    if (v7 != v6)
    {
      do
      {
        if (*((char *)v7 - 9) < 0)
          operator delete(*(v7 - 4));
        v7 -= 4;
      }
      while (v7 != v6);
      v8 = *v4;
    }
    *((_QWORD *)this + 7) = v6;
    operator delete(v8);
    *v4 = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  v9 = v12;
  *((_QWORD *)this + 6) = v12;
  v10 = (void *)v13;
  *(_OWORD *)((char *)this + 56) = v13;
  if (v10 == v9)
  {
    v11 = *((_QWORD *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I default pattern masks for baseband crash reason patterns and masks will be used", (uint8_t *)&v12, 2u);
    }
    std::vector<ResetInfo::RegexPatternAndReasonMask>::__assign_with_size[abi:ne180100]<ResetInfo::RegexPatternAndReasonMask*,ResetInfo::RegexPatternAndReasonMask*>((void **)this + 6, *((void ***)this + 9), *((char **)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 5);
  }
}

void sub_1BF72D108(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;

  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100]((void **)(v1 + 72));
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v3);
  ctu::SharedLoggable<AccessoriesDelegateBase,ctu::OsLogLogger>::~SharedLoggable(v2);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromPreferences(BasebandCrashReasonFilter *this@<X0>, void **a2@<X8>)
{
  _QWORD *v4;
  uint64_t (***v5)(_QWORD, uint64_t);
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  BOOL v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const __CFArray *v16;
  CFTypeRef v17;
  void **v18;
  void **i;
  NSObject *v20;
  CFArrayRef v21;
  void *__p[4];
  uint64_t v23;
  std::__shared_weak_count *v24;
  CFTypeRef cf;
  const __CFArray *v26;

  v26 = 0;
  cf = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  pthread_mutex_lock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  if (!qword_1ED70F248)
  {
    v5 = (uint64_t (***)(_QWORD, uint64_t))operator new(0x18uLL);
    MEMORY[0x1C3B8B8C0](v5, CFSTR("com.apple.AppleBasebandManager"), *MEMORY[0x1E0C9B260]);
    v4 = operator new(0x20uLL);
    *v4 = &unk_1E7919E70;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v5;
    v6 = (std::__shared_weak_count *)off_1ED70F250;
    qword_1ED70F248 = (uint64_t)v5;
    off_1ED70F250 = v4;
    if (!v6)
    {
      v23 = (uint64_t)v5;
      v24 = (std::__shared_weak_count *)v4;
LABEL_10:
      v9 = v4 + 1;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      goto LABEL_12;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v5 = (uint64_t (***)(_QWORD, uint64_t))qword_1ED70F248;
  v4 = off_1ED70F250;
  v23 = qword_1ED70F248;
  v24 = (std::__shared_weak_count *)off_1ED70F250;
  if (off_1ED70F250)
    goto LABEL_10;
LABEL_12:
  pthread_mutex_unlock(&ctu::Singleton<ABMProperties,ABMProperties,ctu::PthreadMutexGuardPolicy<ABMProperties>>::sInstance);
  __p[0] = operator new(0x28uLL);
  *(_OWORD *)&__p[1] = xmmword_1BF73EFE0;
  strcpy((char *)__p[0], "BasebandCrashReasonRegexPatterns");
  v11 = Preferences::getPreference<__CFArray const*>(v5, (const char *)__p, &v26);
  if (v26)
    v12 = v11;
  else
    v12 = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v13 = v24;
  if (!v24)
    goto LABEL_21;
  v14 = (unint64_t *)&v24->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v12)
      goto LABEL_22;
  }
  else
  {
LABEL_21:
    if (v12)
    {
LABEL_22:
      v16 = v26;
      v17 = cf;
      cf = v26;
      if (v17)
        CFRelease(v17);
      v21 = v16;
      if (v16)
        CFRetain(v16);
      BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v21, __p);
      v18 = (void **)*a2;
      if (*a2)
      {
        for (i = (void **)a2[1]; i != v18; i -= 4)
        {
          if (*((char *)i - 9) < 0)
            operator delete(*(i - 4));
        }
        operator delete(v18);
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      *(_OWORD *)a2 = *(_OWORD *)__p;
      a2[2] = __p[2];
      memset(__p, 0, 24);
      if (v16)
        CFRelease(v16);
      goto LABEL_38;
    }
  }
  v20 = *((_QWORD *)this + 5);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_1BF566000, v20, OS_LOG_TYPE_DEFAULT, "#I no baseband crash reason patterns entry found in ABMProperties", (uint8_t *)__p, 2u);
  }
LABEL_38:
  if (cf)
    CFRelease(cf);
}

uint64_t BasebandCrashReasonFilter::shouldSetSCD(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(2, a2, (__int128 **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::shouldSetCOF(uint64_t a1, uint64_t a2)
{
  return ResetInfo::reasonMatchesAtLeastOneApplicablePattern(4, a2, (__int128 **)(a1 + 48));
}

uint64_t BasebandCrashReasonFilter::readBasebandCrashReasonPatternsFromFactoryFile@<X0>(_QWORD *a1@<X8>)
{
  const __CFArray *v3;
  uint64_t v4;
  CFArrayRef v6;
  __CFString *v7[2];
  uint64_t v8;
  const __CFArray *v9;
  _QWORD v10[3];

  memset(v10, 170, sizeof(v10));
  MEMORY[0x1C3B8B8C0](v10, CFSTR("/AppleInternal/Cellular/Factory/BasebandCOFSCD.plist"), *MEMORY[0x1E0C9B260]);
  v9 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v7, "BasebandCrashReasonRegexPatterns");
  v3 = (const __CFArray *)ctu::cf::map_adapter::copyCFArrayRef((ctu::cf::map_adapter *)v10, v7[0]);
  MEMORY[0x1C3B8B878](v7);
  v9 = v3;
  v6 = v3;
  if (v3)
    CFRetain(v3);
  BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(&v6, (void **)v7);
  v4 = v8;
  *(_OWORD *)a1 = *(_OWORD *)v7;
  a1[2] = v4;
  v7[1] = 0;
  v8 = 0;
  v7[0] = 0;
  if (v3)
  {
    CFRelease(v3);
    CFRelease(v3);
  }
  return MEMORY[0x1C3B8B8CC](v10);
}

void sub_1BF72D5BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  const void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](v2);
  ctu::cf::CFSharedRef<__CFArray const>::~CFSharedRef((const void **)va1);
  MEMORY[0x1C3B8B8CC](v3 - 40);
  _Unwind_Resume(a1);
}

void BasebandCrashReasonFilter::convertBasebandCrashReasonPatternsFromCFSharedArrayToVector(CFArrayRef *a1@<X1>, void **a2@<X8>)
{
  CFArrayRef *v2;
  unint64_t Count;
  void **v4;
  void **v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  void **v12;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v15;
  CFTypeID v16;
  int Int;
  unint64_t v18;
  void **v19;
  __int128 v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  unint64_t v24;
  CFArrayRef *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  void **v33;
  int v34;
  std::string __p;
  int v37;
  std::string v38;
  _QWORD v39[2];
  const void *v40;
  uint64_t v41;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (!*a1)
    return;
  v2 = a1;
  Count = CFArrayGetCount(*a1);
  v4 = a2;
  v5 = (void **)*a2;
  if (Count > ((_BYTE *)a2[2] - (_BYTE *)*a2) >> 5)
  {
    v6 = (void **)a2[1];
    v7 = (char *)operator new(32 * Count);
    v8 = &v7[32 * Count];
    v9 = &v7[(char *)v6 - (char *)v5];
    if (v6 == v5)
    {
      v4 = a2;
      *a2 = v9;
      a2[1] = v9;
      a2[2] = v8;
      if (v5)
LABEL_12:
        operator delete(v5);
    }
    else
    {
      v10 = &v7[(char *)v6 - (char *)v5];
      do
      {
        v11 = *((_OWORD *)v6 - 2);
        *((_QWORD *)v10 - 2) = *(v6 - 2);
        *((_OWORD *)v10 - 2) = v11;
        *(v6 - 3) = 0;
        *(v6 - 2) = 0;
        *(v6 - 4) = 0;
        *((_DWORD *)v10 - 2) = *((_DWORD *)v6 - 2);
        v10 -= 32;
        v6 -= 4;
      }
      while (v6 != v5);
      v5 = (void **)*a2;
      v12 = (void **)a2[1];
      *a2 = v10;
      a2[1] = v9;
      a2[2] = v8;
      while (v12 != v5)
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      v4 = a2;
      if (v5)
        goto LABEL_12;
    }
  }
  if (Count)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*v2, i);
      v15 = ValueAtIndex;
      if (ValueAtIndex && (v16 = CFGetTypeID(ValueAtIndex), v16 == CFDictionaryGetTypeID()))
      {
        v40 = v15;
        CFRetain(v15);
      }
      else
      {
        v15 = 0;
        v40 = 0;
      }
      v39[0] = 0xAAAAAAAAAAAAAAAALL;
      v39[1] = 0xAAAAAAAAAAAAAAAALL;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v39, (const __CFDictionary *)v15);
      memset(&v38, 170, sizeof(v38));
      memset(&__p, 0, sizeof(__p));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v41, "BasebandCrashReasonRegexPattern");
      ctu::cf::map_adapter::getString();
      MEMORY[0x1C3B8B878](&v41);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "BasebandCrashReasonRegexPatternMask");
      Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v39, (const __CFString *)__p.__r_.__value_.__l.__data_);
      MEMORY[0x1C3B8B878](&__p);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
      else
        __p = v38;
      v37 = Int;
      v19 = (void **)v4[1];
      v18 = (unint64_t)v4[2];
      if ((unint64_t)v19 < v18)
      {
        v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v19[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v19 = v20;
        memset(&__p, 0, sizeof(__p));
        *((_DWORD *)v19 + 6) = v37;
        v4[1] = v19 + 4;
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_42;
        goto LABEL_50;
      }
      v21 = Count;
      v22 = (void **)*v4;
      v23 = ((char *)v19 - (char *)v22) >> 5;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 59)
        std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
      v25 = v2;
      v26 = v18 - (_QWORD)v22;
      if (v26 >> 4 > v24)
        v24 = v26 >> 4;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
        v27 = 0x7FFFFFFFFFFFFFFLL;
      else
        v27 = v24;
      if (v27 >> 59)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v28 = (char *)operator new(32 * v27);
      v29 = &v28[32 * v23];
      *(std::string *)v29 = __p;
      v30 = &v28[32 * v27];
      memset(&__p, 0, sizeof(__p));
      *((_DWORD *)v29 + 6) = Int;
      v31 = v29 + 32;
      if (v19 == v22)
      {
        v4 = a2;
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        v2 = v25;
        Count = v21;
        if (v19)
          goto LABEL_39;
      }
      else
      {
        do
        {
          v32 = *((_OWORD *)v19 - 2);
          *((_QWORD *)v29 - 2) = *(v19 - 2);
          *((_OWORD *)v29 - 2) = v32;
          *(v19 - 3) = 0;
          *(v19 - 2) = 0;
          *(v19 - 4) = 0;
          *((_DWORD *)v29 - 2) = *((_DWORD *)v19 - 2);
          v29 -= 32;
          v19 -= 4;
        }
        while (v19 != v22);
        v19 = (void **)*a2;
        v33 = (void **)a2[1];
        *a2 = v29;
        a2[1] = v31;
        a2[2] = v30;
        v2 = v25;
        for (Count = v21; v33 != v19; v33 -= 4)
        {
          if (*((char *)v33 - 9) < 0)
            operator delete(*(v33 - 4));
        }
        v4 = a2;
        if (v19)
LABEL_39:
          operator delete(v19);
      }
      v34 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v4[1] = v31;
      if (v34 < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_42:
          MEMORY[0x1C3B8B8B4](v39);
          if (!v15)
            continue;
LABEL_51:
          CFRelease(v15);
          continue;
        }
      }
      else if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_42;
      }
LABEL_50:
      operator delete(v38.__r_.__value_.__l.__data_);
      MEMORY[0x1C3B8B8B4](v39);
      if (v15)
        goto LABEL_51;
    }
  }
}

void sub_1BF72DA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_1BF72DA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,const void *a27)
{
  if (a24 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8B8B4](&a25);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a27);
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

void sub_1BF72DAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  std::vector<ResetInfo::RegexPatternAndReasonMask>::~vector[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<BasebandCrashReasonFilter>::shared_ptr[abi:ne180100]<BasebandCrashReasonFilter,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1},void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;

  *a1 = a2;
  v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_1E79226D8;
  v4->__shared_weak_owners_ = 0;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  a1[1] = v4;
  if (!a2)
    return a1;
  v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6)
  {
    if (v6->__shared_owners_ != -1)
      return a1;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v9 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    *(_QWORD *)(a2 + 8) = a2;
    *(_QWORD *)(a2 + 16) = v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void sub_1BF72DBF0(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF72DC10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 24), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<BasebandCrashReasonFilter *,std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter *)#1},std::allocator<BasebandCrashReasonFilter>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptr"
                     "IT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__11"
                                "0shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI25BasebandCrashReasonFilterE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<BasebandCrashReasonFilter> ctu::SharedSynchronizable<BasebandCrashReasonFilter>::make_shared_ptr<BasebandCrashReasonFilter>(BasebandCrashReasonFilter*)::{lambda(BasebandCrashReasonFilter*)#1}::operator() const(BasebandCrashReasonFilter*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void HandDetectionManager::create(char *a1@<X0>, NSObject **a2@<X1>, NSObject **a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, HandDetectionManager **a7@<X8>)
{
  HandDetectionManager *v14;
  NSObject *v15;
  NSObject *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  HandDetectionManager *v45;
  unint64_t v46;
  unsigned __int8 v47;
  NSObject *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  dispatch_object_t object;
  dispatch_object_t v58;
  HandDetectionManager *v59;
  unint64_t v60;
  uint8_t buf[8];

  v59 = (HandDetectionManager *)0xAAAAAAAAAAAAAAAALL;
  v60 = 0xAAAAAAAAAAAAAAAALL;
  v14 = (HandDetectionManager *)operator new(0xA0uLL);
  v15 = *a2;
  v58 = v15;
  if (v15)
    dispatch_retain(v15);
  v16 = *a3;
  object = v16;
  if (v16)
    dispatch_retain(v16);
  v17 = (std::__shared_weak_count *)a4[1];
  v55 = *a4;
  v56 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  v20 = (std::__shared_weak_count *)a5[1];
  v53 = *a5;
  v54 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *a6;
  v24 = (std::__shared_weak_count *)a6[1];
  v52[0] = v23;
  v52[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  HandDetectionManager::HandDetectionManager((uint64_t)v14, a1, &v58, &object, &v55, &v53, v52);
  v59 = v14;
  *(_QWORD *)buf = v14;
  v27 = (std::__shared_weak_count *)operator new(0x20uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__vftable = (std::__shared_weak_count_vtbl *)off_1E79227E8;
  v27->__shared_weak_owners_ = 0;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)v14;
  v60 = (unint64_t)v27;
  *(_QWORD *)buf = 0;
  v29 = (std::__shared_weak_count *)*((_QWORD *)v14 + 2);
  if (v29)
  {
    if (v29->__shared_owners_ != -1)
      goto LABEL_27;
    do
      v30 = __ldxr(v28);
    while (__stxr(v30 + 1, v28));
    p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
    *((_QWORD *)v14 + 1) = v14;
    *((_QWORD *)v14 + 2) = v27;
    std::__shared_weak_count::__release_weak(v29);
  }
  else
  {
    do
      v33 = __ldxr(v28);
    while (__stxr(v33 + 1, v28));
    v34 = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    *((_QWORD *)v14 + 1) = v14;
    *((_QWORD *)v14 + 2) = v27;
  }
  do
    v36 = __ldaxr(v28);
  while (__stlxr(v36 - 1, v28));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
LABEL_27:
  if (*(_QWORD *)buf)
    HandDetectionManager::~HandDetectionManager(*(HandDetectionManager **)buf);
  if (v24)
  {
    v37 = (unint64_t *)&v24->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v39 = v54;
  if (v54)
  {
    v40 = (unint64_t *)&v54->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v56;
  if (v56)
  {
    v43 = (unint64_t *)&v56->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (object)
    dispatch_release(object);
  if (v58)
    dispatch_release(v58);
  v45 = v59;
  if (v59 && (HandDetectionManager::init(v59) & 1) != 0)
  {
    v46 = v60;
    *a7 = v45;
    a7[1] = (HandDetectionManager *)v46;
    return;
  }
  {
    GetOsLogContext(void)::sOsLogContext = 0;
    qword_1ED70F6F8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE3768], &GetOsLogContext(void)::sOsLogContext, &dword_1BF566000);
  }
  if (GetOsLogContext(void)::onceToken == -1)
  {
    v48 = qword_1ED70F6F8;
    if (!os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
      goto LABEL_54;
LABEL_61:
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v48, OS_LOG_TYPE_ERROR, "Failed to create Power Source Manager!", buf, 2u);
    *a7 = 0;
    a7[1] = 0;
    v49 = (std::__shared_weak_count *)v60;
    if (!v60)
      return;
    goto LABEL_55;
  }
  dispatch_once(&GetOsLogContext(void)::onceToken, &__block_literal_global_3);
  v48 = qword_1ED70F6F8;
  if (os_log_type_enabled((os_log_t)qword_1ED70F6F8, OS_LOG_TYPE_ERROR))
    goto LABEL_61;
LABEL_54:
  *a7 = 0;
  a7[1] = 0;
  v49 = (std::__shared_weak_count *)v60;
  if (!v60)
    return;
LABEL_55:
  v50 = (unint64_t *)&v49->__shared_owners_;
  do
    v51 = __ldaxr(v50);
  while (__stlxr(v51 - 1, v50));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
}

void sub_1BF72E0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1BF72E0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, HandDetectionManager *a19)
{
  NSObject *v19;
  NSObject *v20;

  std::unique_ptr<HandDetectionManager>::~unique_ptr[abi:ne180100](&a19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (v20)
  {
    dispatch_release(v20);
    if (!v19)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  dispatch_release(v19);
  goto LABEL_6;
}

uint64_t HandDetectionManager::init(HandDetectionManager *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  NSObject *v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v19;
  uint64_t **v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  NSObject *v28;
  _QWORD *v29;
  void *v30;
  _QWORD *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[6];
  std::__shared_weak_count *v35;
  void *v36;
  _QWORD v37[6];
  std::__shared_weak_count *v38;
  void *v39;
  dispatch_object_t object;
  _QWORD v41[6];
  std::__shared_weak_count *v42;
  const void *v43;
  _QWORD aBlock[6];
  std::__shared_weak_count *v45;
  const void *v46;
  dispatch_object_t v47;
  uint8_t buf[16];

  v3 = *((_QWORD *)this + 1);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  if (!*((_QWORD *)this + 6))
  {
    v15 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_WORD *)buf = 0;
    v16 = "Failed to create hand detection manager";
    goto LABEL_24;
  }
  if (!*((_QWORD *)this + 9))
  {
    v15 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_WORD *)buf = 0;
    v16 = "Failed to create audio manager";
    goto LABEL_24;
  }
  if (!*((_QWORD *)this + 12))
  {
    v15 = *(NSObject **)this;
    if (!os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
      goto LABEL_25;
    *(_WORD *)buf = 0;
    v16 = "Failed to create proximity sensor instance";
LABEL_24:
    _os_log_error_impl(&dword_1BF566000, v15, OS_LOG_TYPE_ERROR, v16, buf, 2u);
LABEL_25:
    v17 = 0;
    if (!v2)
      return v17;
LABEL_26:
    std::__shared_weak_count::__release_weak(v2);
    return v17;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 15);
  v7 = MEMORY[0x1E0C809B0];
  if (v6)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1174405120;
    aBlock[2] = ___ZN20HandDetectionManager4initEv_block_invoke;
    aBlock[3] = &__block_descriptor_tmp_42;
    aBlock[4] = this;
    aBlock[5] = v3;
    v45 = v2;
    if (v2)
    {
      v8 = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = _Block_copy(aBlock);
    v11 = *((_QWORD *)this + 18);
    if (v11)
      dispatch_retain(*((dispatch_object_t *)this + 18));
    v46 = v10;
    v47 = v11;
    v12 = (_QWORD *)v6[4];
    if ((unint64_t)v12 >= v6[5])
    {
      v14 = std::vector<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)> const&>(v6 + 3, (uint64_t)&v46);
      goto LABEL_31;
    }
    if (v10)
    {
      v13 = _Block_copy(v10);
      v11 = v47;
      *v12 = v13;
      v12[1] = v11;
      if (!v11)
      {
LABEL_17:
        v14 = v12 + 2;
LABEL_31:
        v6[4] = v14;
        if (v47)
          dispatch_release(v47);
        if (v46)
          _Block_release(v46);
        if (v45)
          std::__shared_weak_count::__release_weak(v45);
        goto LABEL_37;
      }
    }
    else
    {
      *v12 = 0;
      v12[1] = v11;
      if (!v11)
        goto LABEL_17;
    }
    dispatch_retain(v11);
    goto LABEL_17;
  }
  v19 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1BF566000, v19, OS_LOG_TYPE_ERROR, "On-Body handler is not created", buf, 2u);
  }
LABEL_37:
  v20 = (uint64_t **)*((_QWORD *)this + 6);
  v41[0] = v7;
  v41[1] = 1174405120;
  v41[2] = ___ZN20HandDetectionManager4initEv_block_invoke_3;
  v41[3] = &__block_descriptor_tmp_5_16;
  v41[4] = this;
  v41[5] = v3;
  v42 = v2;
  if (v2)
  {
    v21 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = _Block_copy(v41);
  v43 = v23;
  CMHandDetectionDelegate::registerCallback(v20, &v43);
  if (v23)
    _Block_release(v23);
  v24 = (_QWORD *)*((_QWORD *)this + 9);
  v37[0] = v7;
  v37[1] = 1174405120;
  v37[2] = ___ZN20HandDetectionManager4initEv_block_invoke_6;
  v37[3] = &__block_descriptor_tmp_8_11;
  v37[4] = this;
  v37[5] = v3;
  v38 = v2;
  if (v2)
  {
    v25 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = _Block_copy(v37);
  v28 = *((_QWORD *)this + 18);
  if (v28)
    dispatch_retain(*((dispatch_object_t *)this + 18));
  v39 = v27;
  object = v28;
  v29 = (_QWORD *)v24[9];
  if ((unint64_t)v29 < v24[10])
  {
    if (v27)
    {
      v30 = _Block_copy(v27);
      v28 = object;
      *v29 = v30;
      v29[1] = v28;
      if (!v28)
      {
LABEL_51:
        v31 = v29 + 2;
        goto LABEL_53;
      }
    }
    else
    {
      *v29 = 0;
      v29[1] = v28;
      if (!v28)
        goto LABEL_51;
    }
    dispatch_retain(v28);
    goto LABEL_51;
  }
  v31 = std::vector<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)> const&>(v24 + 8, (uint64_t)&v39);
LABEL_53:
  v24[9] = v31;
  if (object)
    dispatch_release(object);
  if (v39)
    _Block_release(v39);
  v34[0] = v7;
  v34[1] = 1174405120;
  v34[2] = ___ZN20HandDetectionManager4initEv_block_invoke_9;
  v34[3] = &__block_descriptor_tmp_13_10;
  v34[4] = this;
  v34[5] = v3;
  v35 = v2;
  if (v2)
  {
    v32 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v36 = _Block_copy(v34);
  ctu::iokit::IOHIDController::registerProxCallback();
  if (v36)
    _Block_release(v36);
  ctu::iokit::IOHIDController::start(*((ctu::iokit::IOHIDController **)this + 12));
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  if (v38)
    std::__shared_weak_count::__release_weak(v38);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  v17 = 1;
  if (v2)
    goto LABEL_26;
  return v17;
}

void sub_1BF72E5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v35;

  dispatch::callback<void({block_pointer})(CMOnBodyDelegate::CMOnBodyResult,CMOnBodyDelegate::CMOnBodyResultConfidence)>::~callback(v33 - 128);
  v35 = *(std::__shared_weak_count **)(v33 - 136);
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  _Unwind_Resume(a1);
}

uint64_t HandDetectionManager::HandDetectionManager(uint64_t a1, char *__s, NSObject **a3, NSObject **a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  NSObject *v24;
  NSObject *v25;
  queue v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  NSObject *v36;
  NSObject *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  NSObject *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  __int128 v54;
  std::__shared_weak_count *v55;
  unint64_t *p_shared_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  dispatch_object_t v61;
  dispatch_object_t v62;
  dispatch_object_t v63;
  dispatch_object_t object;
  dispatch_object_t v65;
  std::string __dst;
  std::string v67;
  void *__p[2];
  int64_t v69;

  v14 = strlen(__s);
  if (v14 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    p_dst = (std::string *)operator new(v17 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v18 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_8:
    memcpy(p_dst, __s, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v19 = std::string::append(&__dst, ".", 1uLL);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = std::string::append(&v67, "HandDetectionManager", 0x14uLL);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v69 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (v69 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, "com.apple.telephony.abm", (const char *)v23);
  if ((SHIBYTE(v69) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v67.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
LABEL_69:
    operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_70;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_69;
LABEL_14:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_15;
LABEL_70:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_15:
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  v24 = *a3;
  v65 = v24;
  if (v24)
    dispatch_retain(v24);
  v25 = *a4;
  object = v25;
  if (v25)
    dispatch_retain(v25);
  CMHandDetectionDelegate::create(&v65, &object, (_QWORD *)(a1 + 48));
  if (object)
    dispatch_release(object);
  if (v65)
    dispatch_release(v65);
  *(_QWORD *)(a1 + 72) = *a5;
  v27 = a5[1];
  *(_QWORD *)(a1 + 80) = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  *(_QWORD *)(a1 + 96) = *a6;
  *(_BYTE *)(a1 + 88) = 0;
  v30 = a6[1];
  *(_QWORD *)(a1 + 104) = v30;
  if (v30)
  {
    v31 = (unint64_t *)(v30 + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  *(_QWORD *)(a1 + 120) = *a7;
  *(_BYTE *)(a1 + 112) = 0;
  v33 = a7[1];
  *(_QWORD *)(a1 + 128) = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  *(_DWORD *)(a1 + 136) = 1;
  v36 = *a3;
  *(_QWORD *)(a1 + 144) = *a3;
  if (v36)
    dispatch_retain(v36);
  *(_BYTE *)(a1 + 152) = 0;
  if (!*(_QWORD *)(a1 + 72))
  {
    AudioManager::create((AudioManager *)__s, (AudioManager **)__p);
    v54 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v55 = *(std::__shared_weak_count **)(a1 + 80);
    *(_OWORD *)(a1 + 72) = v54;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldaxr(p_shared_owners);
      while (__stlxr(v57 - 1, p_shared_owners));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v59 = (unint64_t *)((char *)__p[1] + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  if (!*(_QWORD *)(a1 + 96))
  {
    v37 = *a3;
    v63 = v37;
    if (v37)
      dispatch_retain(v37);
    v62 = 0;
    ctu::iokit::IOHIDController::create();
    v38 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v39 = *(std::__shared_weak_count **)(a1 + 104);
    *(_OWORD *)(a1 + 96) = v38;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v43 = (unint64_t *)((char *)__p[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v62)
      dispatch_release(v62);
    if (v63)
      dispatch_release(v63);
  }
  if (!*(_QWORD *)(a1 + 120))
  {
    v45 = *a3;
    v61 = v45;
    if (v45)
      dispatch_retain(v45);
    CMOnBodyDelegate::create(&v61, v26, __p);
    v46 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v47 = *(std::__shared_weak_count **)(a1 + 128);
    *(_OWORD *)(a1 + 120) = v46;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v51 = (unint64_t *)((char *)__p[1] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v61)
      dispatch_release(v61);
  }
  return a1;
}

void sub_1BF72EAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, dispatch_object_t a11, dispatch_object_t a12, dispatch_object_t a13)
{
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v20;
  std::__shared_weak_count *v21;

  v20 = *(NSObject **)(v13 + 144);
  if (v20)
    dispatch_release(v20);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v15);
  std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::~vector[abi:ne180100](v14);
  v21 = *(std::__shared_weak_count **)(v13 + 16);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  MEMORY[0x1C3B8B74C](v13);
  _Unwind_Resume(a1);
}

void sub_1BF72EBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
  {
    operator delete(__p);
    if (a25 < 0)
    {
LABEL_5:
      operator delete(a20);
      if ((a19 & 0x80000000) == 0)
LABEL_9:
        _Unwind_Resume(a1);
LABEL_8:
      operator delete(a14);
      _Unwind_Resume(a1);
    }
  }
  else if (a25 < 0)
  {
    goto LABEL_5;
  }
  if ((a19 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void **std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  NSObject *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = *((_QWORD *)v3 - 1);
        if (v5)
          dispatch_release(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          _Block_release(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void HandDetectionManager::~HandDetectionManager(HandDetectionManager *this)
{
  uint64_t v2;
  uint64_t i;
  NSObject *v4;
  const void *v5;
  ctu::iokit::IOHIDController *v6;
  uint64_t **v7;
  NSObject *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  NSObject *v24;
  const void *v25;
  std::__shared_weak_count *v26;
  uint64_t *v27;

  v2 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v2; i -= 16)
  {
    v4 = *(NSObject **)(i - 8);
    if (v4)
      dispatch_release(v4);
    v5 = *(const void **)(i - 16);
    if (v5)
      _Block_release(v5);
  }
  *((_QWORD *)this + 4) = v2;
  v6 = (ctu::iokit::IOHIDController *)*((_QWORD *)this + 12);
  if (v6)
    ctu::iokit::IOHIDController::stop(v6);
  v7 = (uint64_t **)*((_QWORD *)this + 6);
  if (v7)
  {
    v27 = *v7;
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v27, &v27);
    v27 = (uint64_t *)**((_QWORD **)this + 6);
    ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::shutdown(void)::{lambda(void)#1}>(v27, &v27);
  }
  v8 = *((_QWORD *)this + 18);
  if (v8)
    dispatch_release(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 13);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 7);
  if (!v18)
    goto LABEL_33;
  v19 = (unint64_t *)&v18->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    v21 = (char *)*((_QWORD *)this + 3);
    if (!v21)
      goto LABEL_43;
  }
  else
  {
LABEL_33:
    v21 = (char *)*((_QWORD *)this + 3);
    if (!v21)
      goto LABEL_43;
  }
  v22 = (char *)*((_QWORD *)this + 4);
  v23 = v21;
  if (v22 != v21)
  {
    do
    {
      v24 = *((_QWORD *)v22 - 1);
      if (v24)
        dispatch_release(v24);
      v25 = (const void *)*((_QWORD *)v22 - 2);
      if (v25)
        _Block_release(v25);
      v22 -= 16;
    }
    while (v22 != v21);
    v23 = (char *)*((_QWORD *)this + 3);
  }
  *((_QWORD *)this + 4) = v21;
  operator delete(v23);
LABEL_43:
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v26)
    std::__shared_weak_count::__release_weak(v26);
  JUMPOUT(0x1C3B8B74CLL);
}

void ___ZN20HandDetectionManager4initEv_block_invoke(_QWORD *a1, unsigned int a2, int a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    v7 = a1[4];
    v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      v9 = v8;
      v10 = a1[5];
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v10)
      {
        *(_DWORD *)(v7 + 136) = a2;
        v13 = *(NSObject **)v7;
        if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2)
            v14 = "Unknown";
          else
            v14 = off_1E7922858[a2];
          v15 = "Confidence Level Unknown";
          if (a3 == 1)
            v15 = "Confidence Level High";
          if (!a3)
            v15 = "Confidence Level Low";
          v16 = 136315394;
          v17 = v14;
          v18 = 2080;
          v19 = v15;
          _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I On Body Callback: OnBody: %s, confidence: %s", (uint8_t *)&v16, 0x16u);
        }
        HandDetectionManager::updateHandDetection((os_log_t *)v7);
      }
    }
  }
}

void HandDetectionManager::updateHandDetection(os_log_t *this)
{
  uint64_t v2;
  unsigned int v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  os_log_t v11;
  os_log_t v12;
  uint64_t v13;
  void *v14;
  NSObject *isa;
  void *v16;
  const void *v17;
  void *v18;
  char v19;
  _BYTE v20[24];
  const char *v21;
  _BYTE aBlock[12];
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *((char *)this + 88);
  if (v2 != 1 || *((_DWORD *)this + 34) != 1 || !*((_BYTE *)this + 112) || !*((_BYTE *)this + 152))
  {
    v3 = 0;
    v4 = *this;
    if (!os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
      goto LABEL_24;
LABEL_8:
    if (v2 > 3)
      v5 = "Unknown Audio Output";
    else
      v5 = off_1E7922888[v2];
    v6 = "On";
    if (*((_BYTE *)this + 112))
      v7 = "On";
    else
      v7 = "Off";
    v8 = *((int *)this + 34);
    if (v8 > 2)
    {
      v9 = "Unknown";
      if (!*((_BYTE *)this + 152))
        v6 = "Off";
      if (v3 > 2)
        goto LABEL_18;
    }
    else
    {
      v9 = off_1E7922858[v8];
      if (!*((_BYTE *)this + 152))
        v6 = "Off";
      if (v3 > 2)
      {
LABEL_18:
        v10 = "Unknown Hand Detection";
LABEL_23:
        *(_DWORD *)v20 = 136316162;
        *(_QWORD *)&v20[4] = v5;
        *(_WORD *)&v20[12] = 2080;
        *(_QWORD *)&v20[14] = v7;
        *(_WORD *)&v20[22] = 2080;
        v21 = v9;
        *(_WORD *)aBlock = 2080;
        *(_QWORD *)&aBlock[2] = v6;
        *(_WORD *)&aBlock[10] = 2080;
        v23 = v10;
        _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Audio State: %s, Proximity Sensor: %s, Motion State: %s, Tx State: %s -> Notifying Hand Detection: %s", v20, 0x34u);
        goto LABEL_24;
      }
    }
    v10 = off_1E7922870[v3];
    goto LABEL_23;
  }
  v3 = *((_DWORD *)this + 16);
  v4 = *this;
  if (os_log_type_enabled(*this, OS_LOG_TYPE_DEFAULT))
    goto LABEL_8;
LABEL_24:
  v11 = this[3];
  v12 = this[4];
  if (v11 != v12)
  {
    v13 = MEMORY[0x1E0C809B0];
    while (v11->isa)
    {
      v14 = _Block_copy(v11->isa);
      isa = v11[1].isa;
      if (isa)
        goto LABEL_29;
LABEL_30:
      if (v14)
      {
        v16 = _Block_copy(v14);
        v17 = v16;
        *(_QWORD *)v20 = v13;
        *(_QWORD *)&v20[8] = 1174405120;
        *(_QWORD *)&v20[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke;
        v21 = (const char *)&__block_descriptor_tmp_18_6;
        if (v16)
        {
          v18 = _Block_copy(v16);
          v19 = 0;
        }
        else
        {
          v18 = 0;
          v19 = 1;
        }
      }
      else
      {
        v17 = 0;
        v18 = 0;
        *(_QWORD *)v20 = v13;
        *(_QWORD *)&v20[8] = 1174405120;
        v19 = 1;
        *(_QWORD *)&v20[16] = ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke;
        v21 = (const char *)&__block_descriptor_tmp_18_6;
      }
      *(_QWORD *)aBlock = v18;
      *(_DWORD *)&aBlock[8] = v3;
      dispatch_async(isa, v20);
      if (*(_QWORD *)aBlock)
        _Block_release(*(const void **)aBlock);
      if ((v19 & 1) == 0)
        _Block_release(v17);
      if (isa)
        dispatch_release(isa);
      if (v14)
        _Block_release(v14);
      v11 += 2;
      if (v11 == v12)
        return;
    }
    v14 = 0;
    isa = v11[1].isa;
    if (!isa)
      goto LABEL_30;
LABEL_29:
    dispatch_retain(isa);
    goto LABEL_30;
  }
}

void sub_1BF72F2EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20HandDetectionManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20HandDetectionManagerEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void ___ZN20HandDetectionManager4initEv_block_invoke_3(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        v11 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 2)
            v12 = "Unknown Hand Detection";
          else
            v12 = off_1E7922870[a2];
          v13 = 136315138;
          v14 = v12;
          _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Hand Detection State: %s", (uint8_t *)&v13, 0xCu);
        }
        *(_DWORD *)(v5 + 64) = a2;
        HandDetectionManager::updateHandDetection((os_log_t *)v5);
      }
    }
  }
}

void ___ZN20HandDetectionManager4initEv_block_invoke_6(_QWORD *a1, unsigned int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  const char *v12;
  int v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        *(_BYTE *)(v5 + 88) = a2;
        v11 = *(NSObject **)v5;
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
        {
          if (a2 > 3)
            v12 = "Unknown Audio Output";
          else
            v12 = off_1E7922888[(char)a2];
          v13 = 136315138;
          v14 = v12;
          _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Audio State: %s", (uint8_t *)&v13, 0xCu);
        }
        HandDetectionManager::updateHandDetection((os_log_t *)v5);
      }
    }
  }
}

uint64_t dispatch::callback<void({block_pointer})(AudioManager::AudioOutputState)>::~callback(uint64_t a1)
{
  NSObject *v2;

  v2 = *(NSObject **)(a1 + 8);
  if (v2)
    dispatch_release(v2);
  if (*(_QWORD *)a1)
    _Block_release(*(const void **)a1);
  return a1;
}

void ___ZN20HandDetectionManager4initEv_block_invoke_9(_QWORD *a1, int a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int isProxCovered;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    v5 = a1[4];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      v8 = a1[5];
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v7);
      }
      if (v8)
      {
        isProxCovered = ctu::iokit::IOHIDController::isProxCovered(*(ctu::iokit::IOHIDController **)(v5 + 96));
        v12 = *(NSObject **)v5;
        if (!os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
        {
          if (*(unsigned __int8 *)(v5 + 112) == isProxCovered)
            return;
          goto LABEL_10;
        }
        v15 = "Off";
        if (isProxCovered)
          v15 = "On";
        v16 = 136315394;
        v17 = v15;
        v18 = 1024;
        v19 = a2;
        _os_log_debug_impl(&dword_1BF566000, v12, OS_LOG_TYPE_DEBUG, "#D Received proximity information: %s (mask: 0x%x)", (uint8_t *)&v16, 0x12u);
        if (*(unsigned __int8 *)(v5 + 112) != isProxCovered)
        {
LABEL_10:
          *(_BYTE *)(v5 + 112) = isProxCovered;
          v13 = *(NSObject **)v5;
          if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEFAULT))
          {
            v14 = "Off";
            if (isProxCovered)
              v14 = "On";
            v16 = 136315138;
            v17 = v14;
            _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Proximity Sensor: %s", (uint8_t *)&v16, 0xCu);
          }
          HandDetectionManager::updateHandDetection((os_log_t *)v5);
        }
      }
    }
  }
}

_QWORD *HandDetectionManager::registerCallback(_QWORD *a1, void **a2)
{
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  _QWORD *result;

  v4 = (_QWORD *)a1[4];
  if ((unint64_t)v4 >= a1[5])
  {
    result = std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(a1 + 3, (uint64_t)a2);
    a1[4] = result;
  }
  else
  {
    v5 = *a2;
    if (*a2)
      v5 = _Block_copy(v5);
    v6 = a2[1];
    *v4 = v5;
    v4[1] = v6;
    if (v6)
      dispatch_retain(v6);
    result = v4 + 2;
    a1[4] = v4 + 2;
  }
  return result;
}

void HandDetectionManager::setMotionParameter(uint64_t a1, ctu **a2)
{
  const void *v3;
  CFTypeID v4;
  const void *v5;
  CFTypeRef cf;

  if (!*(_QWORD *)(a1 + 120))
    goto LABEL_9;
  ctu::xpc_to_cf(*a2, a2);
  v3 = cf;
  if (cf && (v4 = CFGetTypeID(cf), v4 == CFDictionaryGetTypeID()))
  {
    CFRetain(cf);
    v5 = cf;
  }
  else
  {
    v3 = 0;
    v5 = cf;
    if (!cf)
      goto LABEL_7;
  }
  CFRelease(v5);
LABEL_7:
  CMOnBodyDelegate::setThresholds(*(CMOnBodyDelegate **)(a1 + 120), v3);
  if (v3)
    CFRelease(v3);
LABEL_9:
  HandDetectionManager::updateHandDetection((os_log_t *)a1);
}

void sub_1BF72F8B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF72F8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  ctu::cf::CFSharedRef<void const>::~CFSharedRef(&a9);
  _Unwind_Resume(a1);
}

void HandDetectionManager::setTxState(HandDetectionManager *this, int a2)
{
  NSObject *v4;
  uint64_t **v5;
  uint64_t *v6;
  const char *v7;
  NSObject *v8;
  uint8_t v9[24];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 152) = a2;
  v4 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_DEBUG))
  {
    v7 = "Off";
    if (a2)
      v7 = "On";
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)&v9[4] = v7;
    _os_log_debug_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEBUG, "#D Tx is %s", v9, 0xCu);
    v5 = (uint64_t **)*((_QWORD *)this + 6);
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = (uint64_t **)*((_QWORD *)this + 6);
    if (v5)
    {
LABEL_3:
      v6 = *v5;
      *(_QWORD *)v9 = *v5;
      if (a2)
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::start(void)::{lambda(void)#1}>(v6, v9);
      else
        ctu::SharedSynchronizable<CMHandDetectionHandler>::execute_wrapped<CMHandDetectionHandler::stop(void)::{lambda(void)#1}>(v6, v9);
      goto LABEL_11;
    }
  }
  v8 = *(NSObject **)this;
  if (os_log_type_enabled(*(os_log_t *)this, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v9 = 0;
    _os_log_error_impl(&dword_1BF566000, v8, OS_LOG_TYPE_ERROR, "Handed detection instance is not created yet", v9, 2u);
  }
LABEL_11:
  HandDetectionManager::updateHandDetection((os_log_t *)this);
}

_QWORD *std::vector<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)>>::__push_back_slow_path<dispatch::callback<void({block_pointer})(CMHandDetectionDelegate::CMHandDetectionResult)> const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  void *v9;
  NSObject *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  NSObject *v20;
  const void *v21;
  char *v23;
  BOOL v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double *v30;
  const double *v31;
  uint64_t v32;
  float64x2x2_t v33;

  v2 = a1[1] - *a1;
  v3 = (v2 >> 4) + 1;
  if (v3 >> 60)
    std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
  v6 = a1[2] - *a1;
  if (v6 >> 3 > v3)
    v3 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v7 = 0xFFFFFFFFFFFFFFFLL;
  else
    v7 = v3;
  if (!v7)
  {
    v8 = 0;
    v9 = *(void **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  if (v7 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v8 = (char *)operator new(16 * v7);
  v9 = *(void **)a2;
  if (*(_QWORD *)a2)
LABEL_12:
    v9 = _Block_copy(v9);
LABEL_13:
  v10 = *(NSObject **)(a2 + 8);
  v11 = &v8[16 * (v2 >> 4)];
  *(_QWORD *)v11 = v9;
  *((_QWORD *)v11 + 1) = v10;
  if (v10)
    dispatch_retain(v10);
  v12 = &v8[16 * v7];
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    v16 = (unint64_t)&v15[-*a1 - 16];
    if (v16 < 0xD0)
      goto LABEL_17;
    v23 = &v15[-(v16 & 0xFFFFFFFFFFFFFFF0)];
    v24 = &v8[v2 - 8 - (v16 & 0xFFFFFFFFFFFFFFF0)] >= v15 || v23 - 8 >= v11;
    v25 = !v24;
    if (v23 - 16 < &v8[v2 - 8] && &v8[v2 - (v16 & 0xFFFFFFFFFFFFFFF0) - 16] < v15 - 8)
      goto LABEL_17;
    if (v25)
      goto LABEL_17;
    v27 = (v16 >> 4) + 1;
    v28 = 16 * (v27 & 0x1FFFFFFFFFFFFFFELL);
    v17 = &v11[-v28];
    v29 = &v15[-v28];
    v30 = (double *)(v11 - 32);
    v31 = (const double *)(v15 - 32);
    v32 = v27 & 0x1FFFFFFFFFFFFFFELL;
    do
    {
      v33 = vld2q_f64(v31);
      vst2q_f64(v30, v33);
      *(_OWORD *)v31 = 0uLL;
      *((_OWORD *)v31 + 1) = 0uLL;
      v31 -= 4;
      v30 -= 4;
      v32 -= 2;
    }
    while (v32);
    v11 = v17;
    v15 = v29;
    if (v27 != (v27 & 0x1FFFFFFFFFFFFFFELL))
    {
LABEL_17:
      v17 = v11;
      do
      {
        v18 = *((_OWORD *)v15 - 1);
        v15 -= 16;
        *((_OWORD *)v17 - 1) = v18;
        v17 -= 16;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
      }
      while (v15 != v14);
    }
    v15 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v17;
    a1[1] = v13;
    a1[2] = v12;
    while (v19 != v15)
    {
      v20 = *((_QWORD *)v19 - 1);
      if (v20)
        dispatch_release(v20);
      v21 = (const void *)*((_QWORD *)v19 - 2);
      if (v21)
        _Block_release(v21);
      v19 -= 16;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

HandDetectionManager **std::unique_ptr<HandDetectionManager>::~unique_ptr[abi:ne180100](HandDetectionManager **a1)
{
  HandDetectionManager *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    HandDetectionManager::~HandDetectionManager(v2);
  return a1;
}

void std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

HandDetectionManager *std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::__on_zero_shared(uint64_t a1)
{
  HandDetectionManager *result;

  result = *(HandDetectionManager **)(a1 + 24);
  if (result)
    HandDetectionManager::~HandDetectionManager(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<HandDetectionManager *,std::shared_ptr<HandDetectionManager>::__shared_ptr_default_delete<HandDetectionManager,HandDetectionManager>,std::allocator<HandDetectionManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001BF746FE2)
    return a1 + 24;
  if (((v3 & 0x80000001BF746FE2 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001BF746FE2))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001BF746FE2 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

uint64_t ___ZNK8dispatch8callbackIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEclIJS2_EEEvDpT__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void *__copy_helper_block_e8_32c92_ZTSN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 32);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c92_ZTSN8dispatch5blockIU13block_pointerFvN23CMHandDetectionDelegate21CMHandDetectionResultEEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 32);
  if (v1)
    _Block_release(v1);
}

_QWORD *Service::Service(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_1E79228B8;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  return result;
}

void Service::~Service(Service *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;

  *(_QWORD *)this = off_1E79228B8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 4);
    v4 = (void *)*((_QWORD *)this + 3);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v2;
    operator delete(v4);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

std::__shared_weak_count *Service::getServiceManager@<X0>(Service *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *result;

  *a2 = 0;
  a2[1] = 0;
  result = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (result)
  {
    result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result)
      *a2 = *((_QWORD *)this + 1);
  }
  return result;
}

void Service::registerCommandHandler(uint64_t a1, uint64_t a2, const void **a3)
{
  unint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  void *v11;
  void *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *v15[3];

  v6 = *(_QWORD *)(a1 + 32);
  if (v6 >= *(_QWORD *)(a1 + 40))
  {
    *(_QWORD *)(a1 + 32) = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)(a1 + 24), a2);
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      return;
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a1 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      v7 = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(a2 + 16);
      *(_OWORD *)v6 = v7;
    }
    *(_QWORD *)(a1 + 32) = v6 + 24;
    *(_QWORD *)(a1 + 32) = v6 + 24;
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v8)
      return;
  }
  v9 = std::__shared_weak_count::lock(v8);
  v15[2] = v9;
  if (v9)
  {
    v10 = v9;
    v11 = *(void **)(a1 + 8);
    v15[1] = v11;
    if (v11)
    {
      if (*a3)
        v12 = _Block_copy(*a3);
      else
        v12 = 0;
      v15[0] = v12;
      ServiceManager::registerCommandHandler((uint64_t)v11, a2, v15);
      if (v12)
        _Block_release(v12);
    }
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF72FFA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = v1;
  _Unwind_Resume(a1);
}

void sub_1BF72FFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  const void *v11;

  if (v11)
    _Block_release(v11);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ServiceManager::registerCommandHandler(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4;
  void *v5;
  void *aBlock;

  v4 = *(_QWORD *)(a1 + 168);
  v5 = *a3;
  if (*a3)
    v5 = _Block_copy(v5);
  aBlock = v5;
  ServiceCtrl::registerCommandHandler(v4, a2, &aBlock);
  if (aBlock)
    _Block_release(aBlock);
}

void sub_1BF730030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void ServiceManager::broadcastEvent(uint64_t a1, uint64_t a2, const void **a3, void **a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 184);
  if (v4)
    dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v4, a2, a3, a4);
}

void Service::broadcastEvent(uint64_t a1, uint64_t a2, void **a3, const void **a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  void *v12;
  const object *v13;
  CFTypeRef v14;
  CFTypeID v15;
  CFTypeRef v16;
  void *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  const void *v22;
  std::string v23;
  xpc_object_t object;
  CFTypeRef cf;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    v9 = std::__shared_weak_count::lock(v5);
    v28 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      v27 = v11;
      if (!v11)
        goto LABEL_32;
      v26 = 0xAAAAAAAAAAAAAAAALL;
      v12 = *a3;
      object = v12;
      if (v12)
        xpc_retain(v12);
      else
        object = xpc_null_create();
      xpc::bridge((xpc *)&object, v13);
      v14 = cf;
      if (cf && (v15 = CFGetTypeID(cf), v15 == CFDictionaryGetTypeID()))
      {
        v26 = (unint64_t)v14;
        CFRetain(v14);
        v16 = cf;
        if (!cf)
        {
LABEL_13:
          xpc_release(object);
          if (*(char *)(a2 + 23) < 0)
            std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
          else
            v23 = *(std::string *)a2;
          v22 = v14;
          if (v14)
            CFRetain(v14);
          if (*a4)
          {
            v17 = _Block_copy(*a4);
            v21 = v17;
            v18 = *(_QWORD *)(v11 + 184);
            if (!v18)
            {
LABEL_23:
              if (v17)
                _Block_release(v17);
              if (v14)
                CFRelease(v14);
              if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v23.__r_.__value_.__l.__data_);
                if (!v14)
                  goto LABEL_32;
              }
              else if (!v14)
              {
LABEL_32:
                p_shared_owners = (unint64_t *)&v10->__shared_owners_;
                do
                  v20 = __ldaxr(p_shared_owners);
                while (__stlxr(v20 - 1, p_shared_owners));
                if (!v20)
                {
                  ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                  std::__shared_weak_count::__release_weak(v10);
                }
                return;
              }
              CFRelease(v14);
              goto LABEL_32;
            }
          }
          else
          {
            v17 = 0;
            v21 = 0;
            v18 = *(_QWORD *)(v11 + 184);
            if (!v18)
              goto LABEL_23;
          }
          dispatch::block<void({block_pointer})(std::string,ctu::cf::CFSharedRef<__CFDictionary const>,dispatch::block<void({block_pointer})(void)>)>::operator()<std::string const&,ctu::cf::CFSharedRef<__CFDictionary const>&,dispatch::block<void({block_pointer})(void)>&>(v18, (uint64_t)&v23, &v22, &v21);
          goto LABEL_23;
        }
      }
      else
      {
        v14 = 0;
        v26 = 0;
        v16 = cf;
        if (!cf)
          goto LABEL_13;
      }
      CFRelease(v16);
      goto LABEL_13;
    }
  }
}

void sub_1BF730244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22)
{
  ctu::cf::CFSharedRef<__CFDictionary const>::~CFSharedRef(&a19);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_1BF7302AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, char a17)
{
  xpc_release(object);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Service::getRegisteredCommands(Service *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *((_QWORD *)this + 3), *((_QWORD *)this + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3));
}

void ServiceManager::~ServiceManager(ServiceManager *this)
{
  const void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  NSObject *v21;
  NSObject *v22;
  std::__shared_weak_count *v23;

  *(_QWORD *)this = off_1E7922928;
  v2 = (const void *)*((_QWORD *)this + 23);
  if (v2)
    _Block_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 22);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 18);
  if (v6)
  {
    v7 = *((_QWORD *)this + 19);
    v8 = (void *)*((_QWORD *)this + 18);
    if (v7 != v6)
    {
      do
      {
        v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9)
        {
          v10 = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        v7 -= 16;
      }
      while (v7 != v6);
      v8 = (void *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v6;
    operator delete(v8);
  }
  v12 = *((_QWORD *)this + 15);
  if (v12)
  {
    v13 = *((_QWORD *)this + 16);
    v14 = (void *)*((_QWORD *)this + 15);
    if (v13 != v12)
    {
      do
      {
        v15 = *(std::__shared_weak_count **)(v13 - 8);
        if (v15)
        {
          v16 = (unint64_t *)&v15->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
        v13 -= 16;
      }
      while (v13 != v12);
      v14 = (void *)*((_QWORD *)this + 15);
    }
    *((_QWORD *)this + 16) = v12;
    operator delete(v14);
  }
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)this = off_1E7922A60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v21 = *((_QWORD *)this + 12);
  if (v21)
    dispatch_release(v21);
  v22 = *((_QWORD *)this + 11);
  if (v22)
    dispatch_release(v22);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
}

void ServiceManager::ServiceManager(ServiceManager *this, const char *a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _BYTE v13[16];
  dispatch_object_t object[5];

  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, "com.apple.telephony.abm", a2);
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  object[0] = (dispatch_object_t)MEMORY[0x1E0C809B0];
  object[1] = (dispatch_object_t)0x40000000;
  object[2] = (dispatch_object_t)___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  object[3] = (dispatch_object_t)&__block_descriptor_tmp_13_8;
  object[4] = (dispatch_object_t)&GetABMLogServer(void)::sLogServer;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v5 = unk_1ED70F6A0;
    v11 = GetABMLogServer(void)::sLogServer;
    v12 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, object);
    v5 = unk_1ED70F6A0;
    v11 = GetABMLogServer(void)::sLogServer;
    v12 = (std::__shared_weak_count *)unk_1ED70F6A0;
    if (!unk_1ED70F6A0)
      goto LABEL_6;
  }
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_6:
  object[0] = 0;
  ctu::SharedSynchronizable<NetworkStatsInterface>::SharedSynchronizable((_QWORD *)this + 9, a2, QOS_CLASS_DEFAULT, object);
  if (object[0])
    dispatch_release(object[0]);
  ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(this, (uint64_t)v13, &v11);
  *(_QWORD *)this = off_1E7922CF8;
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  *(_QWORD *)this = off_1E7922928;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 192) = 1;
}

void sub_1BF7306AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v2);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

void sub_1BF7306D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, dispatch_object_t object)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a12);
  _Unwind_Resume(a1);
}

void ServiceManager::init(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  const void *(__cdecl *v5)(const std::__shared_weak_count *__hidden, const std::type_info *);
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count_vtbl *v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  NSObject *initially_inactive;
  NSObject *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  _QWORD aBlock[5];
  void *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE v68[16];
  uint64_t block;
  uint64_t v70;
  void (*v71)(uint64_t);
  void *v72;
  uint64_t *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;

  v3 = (std::__shared_weak_count *)a1[10];
  if (!v3
    || (v5 = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))a1[9],
        (v6 = std::__shared_weak_count::lock(v3)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v7 = v6;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v64 = 0xAAAAAAAAAAAAAAAALL;
  v65 = (std::__shared_weak_count *)0xAAAAAAAAAAAAAAAALL;
  v12 = (std::__shared_weak_count_vtbl *)operator new(0x90uLL);
  v13 = v12;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7922AF0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v68, "com.apple.telephony.abm", "svc.ctrl");
  {
    __cxa_atexit((void (*)(void *))std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100], &GetABMLogServer(void)::sLogServer, &dword_1BF566000);
  }
  block = MEMORY[0x1E0C809B0];
  v70 = 0x40000000;
  v71 = ___ZL17sABMLogServerInitRNSt3__110shared_ptrIN3ctu9LogServerEEE_block_invoke;
  v72 = &__block_descriptor_tmp_13_8;
  v73 = &GetABMLogServer(void)::sLogServer;
  v61 = a2;
  if (sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce == -1)
  {
    v16 = GetABMLogServer(void)::sLogServer;
    v17 = (std::__shared_weak_count *)unk_1ED70F6A0;
    v66 = GetABMLogServer(void)::sLogServer;
    v67 = unk_1ED70F6A0;
    if (unk_1ED70F6A0)
      goto LABEL_14;
  }
  else
  {
    dispatch_once(&sABMLogServerInit(std::shared_ptr<ctu::LogServer> &)::sOnce, &block);
    v16 = GetABMLogServer(void)::sLogServer;
    v17 = (std::__shared_weak_count *)unk_1ED70F6A0;
    v66 = GetABMLogServer(void)::sLogServer;
    v67 = unk_1ED70F6A0;
    if (unk_1ED70F6A0)
    {
LABEL_14:
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
  }
  initially_inactive = dispatch_queue_attr_make_initially_inactive(0);
  v21 = dispatch_queue_create_with_target_V2("svc.ctrl", initially_inactive, 0);
  dispatch_set_qos_class_floor(v21, QOS_CLASS_DEFAULT, 0);
  dispatch_activate(v21);
  v13[1].__on_zero_shared_weak = 0;
  v13[2].~__shared_weak_count = 0;
  v13[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v21;
  if (v21)
  {
    dispatch_retain(v21);
    v13[2].__on_zero_shared = 0;
    dispatch_release(v21);
  }
  else
  {
    v13[2].__on_zero_shared = 0;
  }
  v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7922C00;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&block);
  v13->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_1E7911E48;
  v13[1].__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))v16;
  v13[1].__get_deleter = (const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *))v17;
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v74);
    v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7922BC0;
    do
      v24 = __ldaxr(v22);
    while (__stlxr(v24 - 1, v22));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v74);
    v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7922BC0;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v68);
  v13->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E7922AF0;
  v13[2].__get_deleter = v5;
  v13[2].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v7;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  v13[3].__on_zero_shared = 0;
  v13[3].~__shared_weak_count_0 = 0;
  v13[3].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&v13[3].~__shared_weak_count_0;
  v64 = (unint64_t)v13;
  v26 = (std::__shared_weak_count *)operator new(0x20uLL);
  v26->__shared_owners_ = 0;
  v27 = (unint64_t *)&v26->__shared_owners_;
  v26->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922AA0;
  v26->__shared_weak_owners_ = 0;
  v26[1].__vftable = v13;
  v65 = v26;
  v28 = (std::__shared_weak_count *)v13[2].~__shared_weak_count;
  if (v28)
  {
    if (v28->__shared_owners_ != -1)
      goto LABEL_41;
    do
      v29 = __ldxr(v27);
    while (__stxr(v29 + 1, v27));
    v30 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v13[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    v13[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
    std::__shared_weak_count::__release_weak(v28);
  }
  else
  {
    do
      v32 = __ldxr(v27);
    while (__stxr(v32 + 1, v27));
    v33 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v13[1].__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v13;
    v13[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v26;
  }
  do
    v35 = __ldaxr(v27);
  while (__stlxr(v35 - 1, v27));
  if (v35)
  {
LABEL_41:
    v36 = (_QWORD *)v64;
    if (!*(_QWORD *)(v64 + 56))
      goto LABEL_55;
    goto LABEL_42;
  }
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  v36 = (_QWORD *)v64;
  if (!*(_QWORD *)(v64 + 56))
    goto LABEL_55;
LABEL_42:
  v37 = (std::__shared_weak_count *)v36[10];
  if (!v37 || (v38 = v36[9], (v39 = std::__shared_weak_count::lock(v37)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v40 = v39;
  block = v38;
  v70 = (uint64_t)v39;
  ctu::LoggerCommonBase::getLogDomain((ctu::LoggerCommonBase *)(v36 + 1));
  v74 = v38;
  v75 = v40;
  block = 0;
  v70 = 0;
  ctu::TrackedLogger::registerLoggerToServer();
  v41 = v75;
  if (v75)
  {
    v42 = (unint64_t *)&v75->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)v70;
  if (v70)
  {
    v45 = (unint64_t *)(v70 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v36 = (_QWORD *)v64;
LABEL_55:
  std::__shared_weak_count::__release_weak(v7);
  v47 = v65;
  v64 = 0;
  v65 = 0;
  v48 = (std::__shared_weak_count *)a1[22];
  a1[21] = v36;
  a1[22] = v47;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (!v65)
    goto LABEL_64;
  v51 = &v65->__shared_owners_;
  do
    v52 = __ldaxr((unint64_t *)v51);
  while (__stlxr(v52 - 1, (unint64_t *)v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
    std::__shared_weak_count::__release_weak(v65);
    std::__shared_weak_count::__release_weak(v7);
    v53 = *v61;
    if (!*v61)
      return;
  }
  else
  {
LABEL_64:
    std::__shared_weak_count::__release_weak(v7);
    v53 = *v61;
    if (!*v61)
      return;
  }
  v54 = v61[1];
  if (v54)
  {
    v55 = (unint64_t *)(v54 + 8);
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  v57 = (std::__shared_weak_count *)a1[14];
  a1[13] = v53;
  a1[14] = v54;
  if (v57)
  {
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = a1[13];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN14ServiceManager4initENSt3__110shared_ptrI14PowerInterfaceEE_block_invoke;
  aBlock[3] = &__block_descriptor_tmp_43;
  aBlock[4] = a1;
  v63 = _Block_copy(aBlock);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v60 + 16))(v60, &v63);
  if (v63)
    _Block_release(v63);
}

void sub_1BF730D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *aBlock)
{
  if (aBlock)
    _Block_release(aBlock);
  _Unwind_Resume(exception_object);
}

void sub_1BF730D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100](v9 - 120);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<Registry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__shared_weak_count::__release_weak(v8);
  std::__shared_weak_count::__release_weak(v8);
  JUMPOUT(0x1BF730DECLL);
}

void sub_1BF730D50(void *a1)
{
  dispatch_queue_t *v1;

  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[11], v1, (dispatch_function_t)std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl*)#1}::operator() const(ServiceCtrl*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_1BF730D70()
{
  __cxa_end_catch();
  JUMPOUT(0x1BF730DDCLL);
}

void sub_1BF730D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  std::__shared_weak_count *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v13 - 120));
  ctu::SharedSynchronizable<data::TransportService::State>::~SharedSynchronizable(v12);
  std::shared_ptr<ctu::LogServer>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  std::__shared_weak_count::__release_weak(v10);
  operator delete(v11);
  JUMPOUT(0x1BF730DE4);
}

void sub_1BF730DC8()
{
  JUMPOUT(0x1BF730DE4);
}

void ___ZN14ServiceManager4initENSt3__110shared_ptrI14PowerInterfaceEE_block_invoke(uint64_t a1, int a2, NSObject **a3)
{
  _QWORD *v3;
  NSObject *v4;
  dispatch_object_t v5;
  dispatch_object_t v6;

  v3 = *(_QWORD **)(a1 + 32);
  if (a2 == 1)
  {
    v4 = *a3;
    v5 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
      ServiceManager::wake(v3, &v5);
      goto LABEL_7;
    }
    ServiceManager::wake(v3, &v5);
  }
  else if (!a2)
  {
    v4 = *a3;
    v6 = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
      ServiceManager::sleep(v3, &v6);
LABEL_7:
      dispatch_group_leave(v4);
      dispatch_release(v4);
      return;
    }
    ServiceManager::sleep(v3, &v6);
  }
}

void ServiceManager::sleep(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::sleep(dispatch::group_session)::$_0>(ServiceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ServiceManager::wake(_QWORD *a1, dispatch_object_t *a2)
{
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  NSObject *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;

  v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)a1[10];
  if (!v4 || (v5 = a1[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = a1;
  v8[1] = v3;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v10 = a1[11];
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v10, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::wake(dispatch::group_session)::$_0>(ServiceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void ServiceManager::createPowerAssertion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::string __p;

  v4 = *(_QWORD *)(a1 + 104);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v4 + 24))(v4, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF731144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServiceManager::releasePowerAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string __p;

  v2 = *(_QWORD *)(a1 + 104);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v2 + 32))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF7311E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ServiceCtrl::registerCommandHandler(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  std::string __p;
  void *aBlock;
  _QWORD block[6];

  v8 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v5 = *a3;
    if (!*a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  __p = *(std::string *)a2;
  v5 = *a3;
  if (*a3)
LABEL_5:
    v5 = _Block_copy(v5);
LABEL_6:
  aBlock = v5;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_22registerCommandHandlerERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvN3xpc4dictENSE_IU13block_pointerFviSG_EEEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSO__block_invoke;
  block[3] = &__block_descriptor_tmp_7_10;
  block[4] = a1 + 72;
  block[5] = &v8;
  v6 = *(NSObject **)(a1 + 88);
  if (!*(_QWORD *)(a1 + 96))
  {
    dispatch_sync(v6, block);
    v7 = aBlock;
    if (!aBlock)
      goto LABEL_11;
    goto LABEL_10;
  }
  dispatch_async_and_wait(v6, block);
  v7 = aBlock;
  if (aBlock)
LABEL_10:
    _Block_release(v7);
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ServiceManager::registerEventDispatcher(uint64_t a1, void **a2)
{
  void *v3;
  const void *v4;

  v3 = *a2;
  if (*a2)
    v3 = _Block_copy(v3);
  v4 = *(const void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v3;
  if (v4)
    _Block_release(v4);
}

void ServiceManager::initializeGlobalServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = dispatch_group_create();
  v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v6 || (v7 = *((_QWORD *)this + 9), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *v10 = this;
  v10[1] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = *((_QWORD *)this + 11);
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeGlobalServices(void)::$_0>(ServiceManager::initializeGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::initializeGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ServiceManager::shutdownGlobalServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _QWORD *v10;
  unint64_t *p_shared_owners;
  NSObject *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = dispatch_group_create();
  v5 = v4;
  *a2 = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v5);
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
  if (!v6 || (v7 = *((_QWORD *)this + 9), (v8 = std::__shared_weak_count::lock(v6)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v9 = v8;
  v10 = operator new(0x10uLL);
  *v10 = this;
  v10[1] = v5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v12 = *((_QWORD *)this + 11);
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  v14 = operator new(0x18uLL);
  *v14 = v10;
  v14[1] = v7;
  v14[2] = v9;
  dispatch_async_f(v12, v14, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownGlobalServices(void)::$_0>(ServiceManager::shutdownGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::shutdownGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void ServiceManager::initializeDynamicServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  dispatch_object_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  void *__p;
  __int128 v11;
  dispatch_object_t object;

  v4 = dispatch_group_create();
  *a2 = v4;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v5 = *((_QWORD *)this + 13);
  __p = operator new(0x30uLL);
  v11 = xmmword_1BF743170;
  strcpy((char *)__p, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v5 + 24))(&object, v5, &__p, 0);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  v6 = object;
  if (object)
    dispatch_retain(object);
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v7 = object;
  v8 = *((_QWORD *)this + 11);
  v9 = operator new(0x18uLL);
  *v9 = this;
  v9[1] = v6;
  v9[2] = v4;
  dispatch_group_notify_f(v7, v8, v9, (dispatch_function_t)dispatch::detail::group_notify<ServiceManager::initializeDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::initializeDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (object)
    dispatch_release(object);
}

void sub_1BF73165C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, dispatch_object_t object)
{
  NSObject *v19;

  ServiceManager::initializeDynamicServices(void)::$_0::~$_0((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  if (v19)
    dispatch_release(v19);
  _Unwind_Resume(a1);
}

uint64_t ServiceManager::initializeDynamicServices(void)::$_0::~$_0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = *(NSObject **)(a1 + 16);
    if (v3)
      dispatch_release(v3);
  }
  v4 = *(NSObject **)(a1 + 8);
  if (v4)
    dispatch_release(v4);
  return a1;
}

void ServiceManager::shutdownDynamicServices(ServiceManager *this@<X0>, NSObject **a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  dispatch_object_t v6;
  NSObject *v7;
  NSObject *v8;
  _QWORD *v9;
  void *__p;
  __int128 v11;
  dispatch_object_t object;

  v4 = dispatch_group_create();
  *a2 = v4;
  object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
  v5 = *((_QWORD *)this + 13);
  __p = operator new(0x30uLL);
  v11 = xmmword_1BF743170;
  strcpy((char *)__p, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void **, _QWORD))(*(_QWORD *)v5 + 24))(&object, v5, &__p, 0);
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  v6 = object;
  if (object)
    dispatch_retain(object);
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v7 = object;
  v8 = *((_QWORD *)this + 11);
  v9 = operator new(0x18uLL);
  *v9 = this;
  v9[1] = v6;
  v9[2] = v4;
  dispatch_group_notify_f(v7, v8, v9, (dispatch_function_t)dispatch::detail::group_notify<ServiceManager::shutdownDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::shutdownDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  if (object)
    dispatch_release(object);
}

void sub_1BF731804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, dispatch_object_t object)
{
  NSObject *v19;

  ServiceManager::initializeDynamicServices(void)::$_0::~$_0((uint64_t)&a10);
  if (object)
    dispatch_release(object);
  if (v19)
    dispatch_release(v19);
  _Unwind_Resume(a1);
}

_QWORD *ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7922A60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7922A60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::__on_zero_shared(uint64_t a1)
{
  dispatch_barrier_async_f(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 24) + 88), *(void **)(a1 + 24), (dispatch_function_t)std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl*)#1}::operator() const(ServiceCtrl*)::{lambda(void *)#1}::__invoke);
}

uint64_t std::__shared_ptr_pointer<ServiceCtrl *,std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl *)#1},std::allocator<ServiceCtrl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_")
    return a1 + 24;
  if (((v3 & (unint64_t)"ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN3ctu20SharedSynchronizableI11ServiceCtrlE15make_shared_ptrIS1_EENSt3__110shared_ptrIT_EEPS6_EUlPS1_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t std::shared_ptr<ServiceCtrl> ctu::SharedSynchronizable<ServiceCtrl>::make_shared_ptr<ServiceCtrl>(ServiceCtrl*)::{lambda(ServiceCtrl*)#1}::operator() const(ServiceCtrl*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void ServiceCtrl::~ServiceCtrl(char **this)
{
  void *v1;

  ServiceCtrl::~ServiceCtrl(this);
  operator delete(v1);
}

{
  std::__shared_weak_count *v2;
  NSObject *v3;
  NSObject *v4;
  std::__shared_weak_count *v5;

  *this = (char *)off_1E7922AF0;
  std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(this[16]);
  v2 = (std::__shared_weak_count *)this[14];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *this = (char *)off_1E7922C00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v3 = this[12];
  if (v3)
    dispatch_release(v3);
  v4 = this[11];
  if (v4)
    dispatch_release(v4);
  v5 = (std::__shared_weak_count *)this[10];
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::updateTrackedConfig()
{
  return ctu::LoggerCommonBase::setInheritedLogLevel();
}

void ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLoggerName(char *a1@<X8>)
{
  a1[23] = 8;
  strcpy(a1, "svc.ctrl");
}

uint64_t ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::getTrackedLogLevel(uint64_t a1)
{
  return ctu::LoggerCommonBase::getLocalLogLevel((ctu::LoggerCommonBase *)(a1 + 8));
}

_QWORD *ctu::SharedLoggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7922C00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7922C00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

_QWORD *ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7922C00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  return a1;
}

void ctu::Loggable<ServiceCtrl,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~Loggable(_QWORD *a1)
{
  *a1 = off_1E7922C00;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  operator delete(a1);
}

void std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(char *a1)
{
  const void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,dispatch::block<void({block_pointer})(xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)>>>>::destroy(*((_QWORD *)a1 + 1));
    v2 = (const void *)*((_QWORD *)a1 + 7);
    if (v2)
      _Block_release(v2);
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_22registerCommandHandlerERKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEN8dispatch5blockIU13block_pointerFvN3xpc4dictENSE_IU13block_pointerFviSG_EEEEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSO__block_invoke(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  const void *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  const void *v16;
  size_t v17;
  size_t v18;
  int v19;
  int v20;
  _QWORD *v21;
  std::string *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  const void *v26;

  v1 = *(uint64_t **)(a1 + 40);
  v2 = *v1;
  v3 = (const void *)v1[4];
  if (v3)
  {
    v4 = _Block_copy(v3);
    v5 = v1 + 1;
    v7 = (_QWORD *)(v2 + 128);
    v6 = *(_QWORD **)(v2 + 128);
    if (v6)
    {
LABEL_3:
      v8 = *((char *)v1 + 31);
      if (v8 >= 0)
        v9 = v5;
      else
        v9 = (const void *)v1[1];
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v1 + 31);
      else
        v10 = v1[2];
      while (1)
      {
        v11 = v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = v12;
        else
          v16 = v13;
        if (v15 >= 0)
          v17 = *((unsigned __int8 *)v12 + 23);
        else
          v17 = v12[1];
        if (v17 >= v10)
          v18 = v10;
        else
          v18 = v17;
        v19 = memcmp(v9, v16, v18);
        if (v19)
        {
          if (v19 < 0)
            goto LABEL_9;
LABEL_23:
          v20 = memcmp(v16, v9, v18);
          if (v20)
          {
            if ((v20 & 0x80000000) == 0)
              goto LABEL_38;
          }
          else if (v17 >= v10)
          {
LABEL_38:
            v26 = (const void *)v11[7];
            v11[7] = v4;
            if (v26)
              goto LABEL_39;
            return;
          }
          v6 = (_QWORD *)v11[1];
          if (!v6)
          {
            v7 = v11 + 1;
            goto LABEL_31;
          }
        }
        else
        {
          if (v10 >= v17)
            goto LABEL_23;
LABEL_9:
          v6 = (_QWORD *)*v11;
          v7 = v11;
          if (!*v11)
            goto LABEL_31;
        }
      }
    }
  }
  else
  {
    v4 = 0;
    v5 = v1 + 1;
    v7 = (_QWORD *)(v2 + 128);
    v6 = *(_QWORD **)(v2 + 128);
    if (v6)
      goto LABEL_3;
  }
  v11 = v7;
LABEL_31:
  v21 = operator new(0x40uLL);
  v22 = (std::string *)(v21 + 4);
  if (*((char *)v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v22, (const std::string::value_type *)v1[1], v1[2]);
  }
  else
  {
    v23 = *(_OWORD *)v5;
    v21[6] = v5[2];
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = v23;
  }
  v21[7] = 0;
  *v21 = 0;
  v21[1] = 0;
  v21[2] = v11;
  *v7 = v21;
  v24 = **(_QWORD **)(v2 + 120);
  v25 = v21;
  if (v24)
  {
    *(_QWORD *)(v2 + 120) = v24;
    v25 = (uint64_t *)*v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 128), v25);
  ++*(_QWORD *)(v2 + 136);
  v26 = (const void *)v21[7];
  v21[7] = v4;
  if (v26)
LABEL_39:
    _Block_release(v26);
}

void sub_1BF731D54(_Unwind_Exception *a1)
{
  const void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    _Block_release(v1);
  _Unwind_Resume(a1);
}

void ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_10(uint64_t a1, unsigned int a2, void **a3)
{
  unsigned int v3;

  v3 = a2;
  dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>((uint64_t *)(a1 + 32), &v3, a3);
}

void ___ZZN11ServiceCtrl13handleCommandERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEN3xpc4dictEN8dispatch5blockIU13block_pointerFviSA_EEEENKUlvE_clEv_block_invoke_12(uint64_t a1, unsigned int a2, void **a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;

  v9 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v6 = *(_QWORD *)(v4 + 40);
  v5 = (uint64_t *)(v4 + 40);
  if (v6)
  {
    dispatch::block<void({block_pointer})(int,xpc::dict)>::operator()<int &,xpc::dict&>(v5, &v9, a3);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(const void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = 0;
    if (v8)
      _Block_release(v8);
  }
}

uint64_t *std::unique_ptr<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1},std::default_delete<ServiceCtrl::handleCommand(std::string const&,xpc::dict,dispatch::block<void({block_pointer})(int,xpc::dict)>)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  const void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(const void **)(v2 + 40);
    if (v3)
      _Block_release(v3);
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(_QWORD *)(v2 + 32) = 0;
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

_QWORD *ctu::Loggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::Loggable<ctu::OsLogContext,std::shared_ptr<ctu::LogServer>>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9;
  _BYTE v10[16];

  *a1 = off_1E7922A60;
  ctu::OsLogContext::OsLogContext();
  ctu::OsLogContext::OsLogContext();
  ctu::LoggerCommonBase::LoggerCommonBase();
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[1] = &unk_1E7911E48;
  a1[7] = *a3;
  v5 = a3[1];
  a1[8] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  return a1;
}

void sub_1BF731F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ctu::SharedLoggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7922A60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void ctu::SharedLoggable<ServiceManager,ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>>::~SharedLoggable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  *a1 = off_1E7922A60;
  ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase();
  v2 = a1[12];
  if (v2)
    dispatch_release(v2);
  v3 = a1[11];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[10];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::sleep(dispatch::group_session)::$_0>(ServiceManager::sleep(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::sleep(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::sleep(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject **v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  size_t v18;
  __int128 *p_buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  dispatch_time_t v26;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::string *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  std::string *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::string *v40;
  std::string *v41;
  NSObject *v42;
  unint64_t v43;
  NSObject *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::string *p_p;
  std::__shared_weak_count *v51;
  uint64_t *v52;
  uint64_t **v53;
  std::string __p;
  dispatch_group_t group;
  uint8_t v56[4];
  unint64_t v57;
  __int16 v58;
  std::string *v59;
  __int128 v60;
  unint64_t v61;
  __int128 buf;
  unint64_t v63;
  uint64_t v64;

  v1 = a1;
  v64 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = atomic_load((unsigned __int8 *)(v3 + 192));
  v5 = *(NSObject **)(v3 + 40);
  if ((v4 & 1) == 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (uint64_t)(*(_QWORD *)(v3 + 152) - *(_QWORD *)(v3 + 144)) >> 4;
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Request %zd services to sleep", (uint8_t *)&buf, 0xCu);
    }
    v52 = v2;
    v53 = v1;
    v7 = dispatch_group_create();
    v8 = (std::__shared_weak_count *)operator new(0x38uLL);
    v9 = &v8->__vftable;
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D38;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v11 = (NSObject **)&v8[1];
    v51 = v8;
    if (v7)
    {
      dispatch_retain(v7);
      v9[4] = 0;
      v9[5] = 0;
      v9[6] = 0;
      dispatch_release(v7);
      v12 = *(_QWORD **)(v3 + 144);
      v13 = *(_QWORD **)(v3 + 152);
      if (v12 != v13)
        goto LABEL_12;
LABEL_33:
      v24 = *v11;
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
      v26 = dispatch_time(0, 1000000000 * v25);
      if (dispatch_group_wait(v24, v26))
      {
        v60 = 0uLL;
        v61 = 0;
        shared_owners = (uint64_t *)v51[1].__shared_owners_;
        shared_weak_owners = (uint64_t *)v51[1].__shared_weak_owners_;
        if (shared_owners == shared_weak_owners)
        {
          v29 = 0;
        }
        else
        {
          do
          {
            v30 = (std::__shared_weak_count *)shared_owners[1];
            if (v30)
            {
              v31 = std::__shared_weak_count::lock(v30);
              if (v31)
              {
                v32 = v31;
                v33 = *shared_owners;
                if (*shared_owners)
                {
                  v34 = (_OWORD *)*((_QWORD *)&v60 + 1);
                  if (*((_QWORD *)&v60 + 1) >= v61)
                  {
                    v36 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v60, v33);
                  }
                  else
                  {
                    if (*(char *)(v33 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(*((std::string **)&v60 + 1), *(const std::string::value_type **)v33, *(_QWORD *)(v33 + 8));
                    }
                    else
                    {
                      v35 = *(_OWORD *)v33;
                      *(_QWORD *)(*((_QWORD *)&v60 + 1) + 16) = *(_QWORD *)(v33 + 16);
                      *v34 = v35;
                    }
                    v36 = (std::string *)((char *)v34 + 24);
                  }
                  *((_QWORD *)&v60 + 1) = v36;
                }
                v37 = (unint64_t *)&v32->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
            }
            shared_owners += 2;
          }
          while (shared_owners != shared_weak_owners);
          v29 = (std::string *)v60;
        }
        v39 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v49 = *((_QWORD *)&v60 + 1);
          ctu::join<std::__wrap_iter<std::string *>>(&__p, v29, *((__int128 **)&v60 + 1));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v56 = 134218242;
          v57 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v29) >> 3);
          v58 = 2080;
          v59 = p_p;
          _os_log_error_impl(&dword_1BF566000, v39, OS_LOG_TYPE_ERROR, "Sleep TIMEOUT: %zd clients failed to complete sleep request: %s", v56, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v29 = (std::string *)v60;
          if (!(_QWORD)v60)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (v29)
        {
LABEL_54:
          v40 = (std::string *)*((_QWORD *)&v60 + 1);
          v41 = v29;
          if (*((std::string **)&v60 + 1) != v29)
          {
            do
            {
              if (SHIBYTE(v40[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v40[-1].__r_.__value_.__l.__data_);
              --v40;
            }
            while (v40 != v29);
            v41 = (std::string *)v60;
          }
          *((_QWORD *)&v60 + 1) = v29;
          operator delete(v41);
        }
      }
LABEL_61:
      v42 = *(NSObject **)(v3 + 40);
      v2 = v52;
      v1 = v53;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v60) = 0;
        _os_log_impl(&dword_1BF566000, v42, OS_LOG_TYPE_DEFAULT, "#I All services acknowledged for sleep request", (uint8_t *)&v60, 2u);
      }
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      goto LABEL_66;
    }
    v8[1].__shared_owners_ = 0;
    v8[1].__shared_weak_owners_ = 0;
    v8[2].__vftable = 0;
    v12 = *(_QWORD **)(v3 + 144);
    v13 = *(_QWORD **)(v3 + 152);
    if (v12 == v13)
      goto LABEL_33;
    while (1)
    {
LABEL_12:
      v14 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
        LODWORD(v60) = 136315138;
        *(_QWORD *)((char *)&v60 + 4) = v15;
        _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Requesting '%s' to sleep", (uint8_t *)&v60, 0xCu);
      }
      *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
      v16 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
      v17 = strlen(v16);
      if (v17 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v18 = v17;
      if (v17 >= 0x17)
        break;
      HIBYTE(v63) = v17;
      p_buf = &buf;
      if (v17)
        goto LABEL_21;
LABEL_22:
      *((_BYTE *)p_buf + v18) = 0;
      ctu::TrackedGroup::fork((NSObject **)&v60, (uint64_t)v11, (uint64_t)&buf);
      if (SHIBYTE(v63) < 0)
      {
        operator delete((void *)buf);
        v22 = *v12;
        v23 = v60;
        group = (dispatch_group_t)v60;
        if ((_QWORD)v60)
        {
LABEL_26:
          dispatch_retain(v23);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v22 = *v12;
        v23 = v60;
        group = (dispatch_group_t)v60;
        if ((_QWORD)v60)
          goto LABEL_26;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v22 + 48))(v22, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v23)
      {
        dispatch_group_leave(v23);
        dispatch_release(v23);
      }
      v12 += 2;
      if (v12 == v13)
        goto LABEL_33;
    }
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_buf = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&buf + 1) = v18;
    v63 = v21 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_21:
    memmove(p_buf, v16, v18);
    goto LABEL_22;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEBUG, "#D Server is down; ignoring sleep request",
      (uint8_t *)&buf,
      2u);
  }
LABEL_66:
  v44 = v2[1];
  if (v44)
  {
    dispatch_group_leave(v44);
    v45 = v2[1];
    if (v45)
      dispatch_release(v45);
  }
  operator delete(v2);
  v46 = (std::__shared_weak_count *)v1[2];
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  operator delete(v1);
}

void sub_1BF7325D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, _QWORD *a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_group_t group, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **__p,uint64_t a24)
{
  unint64_t *v24;
  std::__shared_weak_count *v25;
  void **v26;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void **v30;
  void **v31;
  unint64_t v32;
  NSObject *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (__p)
  {
    v30 = v26;
    v31 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  do
    v32 = __ldaxr(v24);
  while (__stlxr(v32 - 1, v24));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  v33 = a11[1];
  if (v33)
  {
    dispatch_group_leave(v33);
    v34 = a11[1];
    if (v34)
      dispatch_release(v34);
  }
  operator delete(a11);
  v35 = (std::__shared_weak_count *)a12[2];
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void ctu::TrackedGroup::fork(NSObject **a1, uint64_t a2, uint64_t a3)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  void *v9;
  void *v10;
  void *object[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_OWORD *)object = 0u;
  v12 = 0u;
  v13 = 0u;
  ctu::TrackedGroup::fork(a1, a2, (uint64_t)__p, (dispatch_group_t *)object);
  if (*((_QWORD *)&v13 + 1) && object[0])
  {
    v9 = object[0];
    v10 = object[1];
    (*(void (**)(void))(**((_QWORD **)&v13 + 1) + 48))();
  }
  if (object[1])
    os_release(object[1]);
  v3 = &v12;
  v4 = (__int128 *)*((_QWORD *)&v13 + 1);
  object[1] = 0;
  *((_QWORD *)&v13 + 1) = 0;
  if (v4 == &v12)
  {
    v5 = 4;
    v4 = &v12;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
    object[0] = 0;
    if (*((__int128 **)&v13 + 1) == &v12)
    {
      v6 = 4;
    }
    else
    {
      if (!*((_QWORD *)&v13 + 1))
        goto LABEL_15;
      v6 = 5;
      v3 = (__int128 *)*((_QWORD *)&v13 + 1);
    }
    (*(void (**)(__int128 *))(*(_QWORD *)v3 + 8 * v6))(v3);
LABEL_15:
    if ((SHIBYTE(v8) & 0x80000000) == 0)
      return;
    goto LABEL_16;
  }
  if (v4)
  {
    v5 = 5;
    goto LABEL_10;
  }
  object[0] = 0;
  if (SHIBYTE(v8) < 0)
LABEL_16:
    operator delete(__p[0]);
}

void sub_1BF7328BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::__on_zero_shared(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  NSObject *v6;

  v2 = a1[4];
  if (v2)
  {
    v3 = a1[5];
    v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  v6 = a1[3];
  if (v6)
    dispatch_release(v6);
}

void ctu::TrackedGroup::fork(NSObject **a1, uint64_t a2, uint64_t a3, dispatch_group_t *a4)
{
  NSObject *v8;
  NSObject *v9;
  char *v10;
  unint64_t *v11;
  NSObject *v12;
  NSObject *global_queue;
  NSObject *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *p_isa;
  dispatch_group_t v18;
  dispatch_group_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  __int128 v44;
  char *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  dispatch_group_t group[2];
  dispatch_group_t object;
  _QWORD v53[3];
  _QWORD *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v8 = dispatch_group_create();
  v9 = v8;
  *a1 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
    dispatch_release(v9);
  }
  v10 = (char *)operator new(0x30uLL);
  *((_QWORD *)v10 + 1) = 0;
  v11 = (unint64_t *)(v10 + 8);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = off_1E7922D88;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v10 + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)&v49 = v10 + 24;
  *((_QWORD *)&v49 + 1) = v10;
  v12 = *(NSObject **)a2;
  if (*(_QWORD *)a2)
  {
    dispatch_retain(*(dispatch_object_t *)a2);
    dispatch_group_enter(v12);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  v14 = global_queue;
  if (global_queue)
    dispatch_retain(global_queue);
  *(_QWORD *)&v50 = v10 + 24;
  *((_QWORD *)&v50 + 1) = v10;
  do
    v15 = __ldxr(v11);
  while (__stxr(v15 + 1, v11));
  group[0] = v12;
  if (v12)
  {
    dispatch_retain(v12);
    dispatch_group_enter(v12);
  }
  group[1] = *a4;
  object = a4[1];
  v16 = v53;
  p_isa = a4 + 2;
  v18 = a4[5];
  if (v18)
  {
    if (v18 == (dispatch_group_t)p_isa)
    {
      v54 = v53;
      (*(void (**)(dispatch_group_t *, _QWORD *))(*p_isa + 24))(a4 + 2, v53);
    }
    else
    {
      v54 = a4[5];
      a4[5] = 0;
    }
  }
  else
  {
    v54 = 0;
  }
  *a4 = 0;
  a4[1] = 0;
  v19 = a4[5];
  a4[5] = 0;
  if (v19 == (dispatch_group_t)p_isa)
  {
    v20 = 4;
  }
  else
  {
    if (!v19)
      goto LABEL_21;
    v20 = 5;
    p_isa = &v19->isa;
  }
  (*(void (**)(_QWORD *))(*p_isa + 8 * v20))(p_isa);
LABEL_21:
  v21 = (char *)operator new(0x48uLL);
  v22 = v21;
  *(_OWORD *)v21 = v50;
  *((_OWORD *)v21 + 1) = *(_OWORD *)group;
  v23 = v54;
  *((_QWORD *)v21 + 4) = object;
  if (v23)
  {
    if (v23 == v53)
    {
      *((_QWORD *)v21 + 8) = v21 + 40;
      (*(void (**)(_QWORD *))(v53[0] + 24))(v53);
    }
    else
    {
      *((_QWORD *)v21 + 8) = v23;
      v54 = 0;
    }
  }
  else
  {
    *((_QWORD *)v21 + 8) = 0;
  }
  v24 = v54;
  v54 = 0;
  if (v24 == v53)
  {
    v25 = 4;
    v24 = v53;
  }
  else
  {
    if (!v24)
      goto LABEL_31;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_31:
  dispatch_group_notify_f(v9, v14, v22, (dispatch_function_t)dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke);
  v26 = v54;
  v54 = 0;
  if (v26 == v53)
  {
    v27 = 4;
    v26 = v53;
  }
  else
  {
    if (!v26)
      goto LABEL_40;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
  if (v54 == v53)
  {
    v28 = 4;
  }
  else
  {
    if (!v54)
      goto LABEL_40;
    v28 = 5;
    v16 = v54;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v28))(v16);
LABEL_40:
  if (v14)
    dispatch_release(v14);
  v30 = *(char **)(a2 + 16);
  v29 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)v30 >= v29)
  {
    v34 = *(char **)(a2 + 8);
    v35 = (v30 - v34) >> 4;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 60)
      std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
    v37 = v29 - (_QWORD)v34;
    if (v37 >> 3 > v36)
      v36 = v37 >> 3;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
      v38 = 0xFFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v39 = (char *)operator new(16 * v38);
    v40 = &v39[16 * v35];
    *(_OWORD *)v40 = v49;
    if (*((_QWORD *)&v49 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 16);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      v34 = *(char **)(a2 + 8);
      v30 = *(char **)(a2 + 16);
    }
    v43 = &v39[16 * v38];
    v33 = v40 + 16;
    if (v30 == v34)
    {
      *(_QWORD *)(a2 + 8) = v40;
      *(_QWORD *)(a2 + 16) = v33;
      *(_QWORD *)(a2 + 24) = v43;
    }
    else
    {
      do
      {
        v44 = *((_OWORD *)v30 - 1);
        v30 -= 16;
        *((_OWORD *)v40 - 1) = v44;
        v40 -= 16;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
      }
      while (v30 != v34);
      v34 = *(char **)(a2 + 8);
      v45 = *(char **)(a2 + 16);
      *(_QWORD *)(a2 + 8) = v40;
      *(_QWORD *)(a2 + 16) = v33;
      *(_QWORD *)(a2 + 24) = v43;
      while (v45 != v34)
      {
        v46 = (std::__shared_weak_count *)*((_QWORD *)v45 - 1);
        if (v46)
          std::__shared_weak_count::__release_weak(v46);
        v45 -= 16;
      }
    }
    if (v34)
      operator delete(v34);
  }
  else
  {
    *(_OWORD *)v30 = v49;
    if (*((_QWORD *)&v49 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 16);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = v30 + 16;
  }
  *(_QWORD *)(a2 + 16) = v33;
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  if (*((_QWORD *)&v49 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v49 + 1) + 16))(*((_QWORD *)&v49 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v49 + 1));
    }
  }
}

void sub_1BF732EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}::~signpost_interval(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
  v2 = a1[2];
  if (v2)
  {
    dispatch_group_leave(v2);
    v3 = a1[2];
    if (v3)
      dispatch_release(v3);
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (!v4)
    return a1;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (v6)
    return a1;
  ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
  std::__shared_weak_count::__release_weak(v4);
  return a1;
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  if (a1)
  {
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
    v2 = a1[2];
    if (v2)
    {
      dispatch_group_leave(v2);
      v3 = a1[2];
      if (v3)
        dispatch_release(v3);
    }
    v4 = (std::__shared_weak_count *)a1[1];
    if (!v4)
      goto LABEL_9;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      operator delete(a1);
    }
    else
    {
LABEL_9:
      operator delete(a1);
    }
  }
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  ctu::os::signpost_interval *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 5);
  if (v2 && *(_QWORD *)this)
  {
    v3 = *((_QWORD *)this + 1);
    v10 = *(_QWORD *)this;
    v11 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v11, &v10);
  }
  v4 = (void *)*((_QWORD *)this + 1);
  if (v4)
    os_release(v4);
  v5 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 1) = 0;
  v6 = (ctu::os::signpost_interval *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6 == (ctu::os::signpost_interval *)((char *)this + 16))
  {
    v7 = 4;
    v6 = (ctu::os::signpost_interval *)((char *)this + 16);
  }
  else
  {
    if (!v6)
    {
      *(_QWORD *)this = 0;
      return;
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  v8 = (_QWORD *)*((_QWORD *)this + 5);
  *(_QWORD *)this = 0;
  if (v8 == v5)
  {
    v9 = 4;
  }
  else
  {
    if (!v8)
      return;
    v9 = 5;
    v5 = v8;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v9))(v5);
}

std::string *ctu::join<std::__wrap_iter<std::string *>>(std::string *__dst, std::string *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  std::string *j;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *i;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type size;
  std::string::value_type *v15;
  std::string::size_type v16;
  std::string::value_type __s[8];
  std::string::size_type v18;
  uint64_t v19;

  __dst->__r_.__value_.__r.__words[0] = 0;
  __dst->__r_.__value_.__l.__size_ = 0;
  __dst->__r_.__value_.__r.__words[2] = 0;
  if (a2 != (std::string *)a3)
  {
    v5 = __dst;
    if (a2 != __dst)
    {
      if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
      {
        __dst = (std::string *)std::string::__assign_no_alias<true>(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
      }
      else
      {
        v6 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
        __dst->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v6;
      }
    }
    if (",")
    {
      for (i = a2 + 1; i != (std::string *)a3; ++i)
      {
        HIBYTE(v19) = 1;
        memmove(__s, ",", 1uLL);
        __s[1] = 0;
        if (v19 >= 0)
          v15 = __s;
        else
          v15 = *(std::string::value_type **)__s;
        if (v19 >= 0)
          v16 = HIBYTE(v19);
        else
          v16 = v18;
        std::string::append(v5, v15, v16);
        if (SHIBYTE(v19) < 0)
          operator delete(*(void **)__s);
        v12 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
        if (v12 >= 0)
          v13 = (const std::string::value_type *)i;
        else
          v13 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
        if (v12 >= 0)
          size = HIBYTE(i->__r_.__value_.__r.__words[2]);
        else
          size = i->__r_.__value_.__l.__size_;
        __dst = std::string::append(v5, v13, size);
      }
    }
    else
    {
      for (j = a2 + 1; j != (std::string *)a3; ++j)
      {
        *(_QWORD *)__s = 0;
        v18 = 0;
        v19 = 0;
        std::string::append(v5, __s, 0);
        if (SHIBYTE(v19) < 0)
          operator delete(*(void **)__s);
        v8 = SHIBYTE(j->__r_.__value_.__r.__words[2]);
        if (v8 >= 0)
          v9 = (const std::string::value_type *)j;
        else
          v9 = (const std::string::value_type *)j->__r_.__value_.__r.__words[0];
        if (v8 >= 0)
          v10 = HIBYTE(j->__r_.__value_.__r.__words[2]);
        else
          v10 = j->__r_.__value_.__l.__size_;
        __dst = std::string::append(v5, v9, v10);
      }
    }
  }
  return __dst;
}

void sub_1BF73342C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
  {
    operator delete(*(void **)v15);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::wake(dispatch::group_session)::$_0>(ServiceManager::wake(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::wake(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<ServiceManager::wake(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  unint64_t *p_shared_owners;
  NSObject **v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  size_t v18;
  __int128 *p_buf;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  dispatch_time_t v26;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::string *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  std::string *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::string *v40;
  std::string *v41;
  NSObject *v42;
  unint64_t v43;
  NSObject *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::string *p_p;
  std::__shared_weak_count *v51;
  uint64_t *v52;
  uint64_t **v53;
  std::string __p;
  dispatch_group_t group;
  uint8_t v56[4];
  unint64_t v57;
  __int16 v58;
  std::string *v59;
  __int128 v60;
  unint64_t v61;
  __int128 buf;
  unint64_t v63;
  uint64_t v64;

  v1 = a1;
  v64 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  v4 = atomic_load((unsigned __int8 *)(v3 + 192));
  v5 = *(NSObject **)(v3 + 40);
  if ((v4 & 1) == 0)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (uint64_t)(*(_QWORD *)(v3 + 152) - *(_QWORD *)(v3 + 144)) >> 4;
      LODWORD(buf) = 134217984;
      *(_QWORD *)((char *)&buf + 4) = v6;
      _os_log_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEFAULT, "#I Request %zd services to wake", (uint8_t *)&buf, 0xCu);
    }
    v52 = v2;
    v53 = v1;
    v7 = dispatch_group_create();
    v8 = (std::__shared_weak_count *)operator new(0x38uLL);
    v9 = &v8->__vftable;
    v8->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    v8->__shared_weak_owners_ = 0;
    v8->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D38;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
    v11 = (NSObject **)&v8[1];
    v51 = v8;
    if (v7)
    {
      dispatch_retain(v7);
      v9[4] = 0;
      v9[5] = 0;
      v9[6] = 0;
      dispatch_release(v7);
      v12 = *(_QWORD **)(v3 + 144);
      v13 = *(_QWORD **)(v3 + 152);
      if (v12 != v13)
        goto LABEL_12;
LABEL_33:
      v24 = *v11;
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 104))(v3);
      v26 = dispatch_time(0, 2000000000 * v25);
      if (dispatch_group_wait(v24, v26))
      {
        v60 = 0uLL;
        v61 = 0;
        shared_owners = (uint64_t *)v51[1].__shared_owners_;
        shared_weak_owners = (uint64_t *)v51[1].__shared_weak_owners_;
        if (shared_owners == shared_weak_owners)
        {
          v29 = 0;
        }
        else
        {
          do
          {
            v30 = (std::__shared_weak_count *)shared_owners[1];
            if (v30)
            {
              v31 = std::__shared_weak_count::lock(v30);
              if (v31)
              {
                v32 = v31;
                v33 = *shared_owners;
                if (*shared_owners)
                {
                  v34 = (_OWORD *)*((_QWORD *)&v60 + 1);
                  if (*((_QWORD *)&v60 + 1) >= v61)
                  {
                    v36 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v60, v33);
                  }
                  else
                  {
                    if (*(char *)(v33 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(*((std::string **)&v60 + 1), *(const std::string::value_type **)v33, *(_QWORD *)(v33 + 8));
                    }
                    else
                    {
                      v35 = *(_OWORD *)v33;
                      *(_QWORD *)(*((_QWORD *)&v60 + 1) + 16) = *(_QWORD *)(v33 + 16);
                      *v34 = v35;
                    }
                    v36 = (std::string *)((char *)v34 + 24);
                  }
                  *((_QWORD *)&v60 + 1) = v36;
                }
                v37 = (unint64_t *)&v32->__shared_owners_;
                do
                  v38 = __ldaxr(v37);
                while (__stlxr(v38 - 1, v37));
                if (!v38)
                {
                  ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                  std::__shared_weak_count::__release_weak(v32);
                }
              }
            }
            shared_owners += 2;
          }
          while (shared_owners != shared_weak_owners);
          v29 = (std::string *)v60;
        }
        v39 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v49 = *((_QWORD *)&v60 + 1);
          ctu::join<std::__wrap_iter<std::string *>>(&__p, v29, *((__int128 **)&v60 + 1));
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v56 = 134218242;
          v57 = 0xAAAAAAAAAAAAAAABLL * ((v49 - (uint64_t)v29) >> 3);
          v58 = 2080;
          v59 = p_p;
          _os_log_error_impl(&dword_1BF566000, v39, OS_LOG_TYPE_ERROR, "Wake TIMEOUT: %zd clients failed to complete wake request: %s", v56, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v29 = (std::string *)v60;
          if (!(_QWORD)v60)
            goto LABEL_61;
          goto LABEL_54;
        }
        if (v29)
        {
LABEL_54:
          v40 = (std::string *)*((_QWORD *)&v60 + 1);
          v41 = v29;
          if (*((std::string **)&v60 + 1) != v29)
          {
            do
            {
              if (SHIBYTE(v40[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v40[-1].__r_.__value_.__l.__data_);
              --v40;
            }
            while (v40 != v29);
            v41 = (std::string *)v60;
          }
          *((_QWORD *)&v60 + 1) = v29;
          operator delete(v41);
        }
      }
LABEL_61:
      v42 = *(NSObject **)(v3 + 40);
      v2 = v52;
      v1 = v53;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v60) = 0;
        _os_log_impl(&dword_1BF566000, v42, OS_LOG_TYPE_DEFAULT, "#I All services acknowledged for wake request", (uint8_t *)&v60, 2u);
      }
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      goto LABEL_66;
    }
    v8[1].__shared_owners_ = 0;
    v8[1].__shared_weak_owners_ = 0;
    v8[2].__vftable = 0;
    v12 = *(_QWORD **)(v3 + 144);
    v13 = *(_QWORD **)(v3 + 152);
    if (v12 == v13)
      goto LABEL_33;
    while (1)
    {
LABEL_12:
      v14 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
        LODWORD(v60) = 136315138;
        *(_QWORD *)((char *)&v60 + 4) = v15;
        _os_log_impl(&dword_1BF566000, v14, OS_LOG_TYPE_DEFAULT, "#I Requesting '%s' to wake", (uint8_t *)&v60, 0xCu);
      }
      *(_QWORD *)&v60 = 0xAAAAAAAAAAAAAAAALL;
      v16 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v12 + 16))(*v12);
      v17 = strlen(v16);
      if (v17 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      v18 = v17;
      if (v17 >= 0x17)
        break;
      HIBYTE(v63) = v17;
      p_buf = &buf;
      if (v17)
        goto LABEL_21;
LABEL_22:
      *((_BYTE *)p_buf + v18) = 0;
      ctu::TrackedGroup::fork((NSObject **)&v60, (uint64_t)v11, (uint64_t)&buf);
      if (SHIBYTE(v63) < 0)
      {
        operator delete((void *)buf);
        v22 = *v12;
        v23 = v60;
        group = (dispatch_group_t)v60;
        if ((_QWORD)v60)
        {
LABEL_26:
          dispatch_retain(v23);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v22 = *v12;
        v23 = v60;
        group = (dispatch_group_t)v60;
        if ((_QWORD)v60)
          goto LABEL_26;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v22 + 56))(v22, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v23)
      {
        dispatch_group_leave(v23);
        dispatch_release(v23);
      }
      v12 += 2;
      if (v12 == v13)
        goto LABEL_33;
    }
    v20 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v20 = v17 | 7;
    v21 = v20 + 1;
    p_buf = (__int128 *)operator new(v20 + 1);
    *((_QWORD *)&buf + 1) = v18;
    v63 = v21 | 0x8000000000000000;
    *(_QWORD *)&buf = p_buf;
LABEL_21:
    memmove(p_buf, v16, v18);
    goto LABEL_22;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_debug_impl(&dword_1BF566000, v5, OS_LOG_TYPE_DEBUG, "#D Server is down; ignoring wake request",
      (uint8_t *)&buf,
      2u);
  }
LABEL_66:
  v44 = v2[1];
  if (v44)
  {
    dispatch_group_leave(v44);
    v45 = v2[1];
    if (v45)
      dispatch_release(v45);
  }
  operator delete(v2);
  v46 = (std::__shared_weak_count *)v1[2];
  if (v46)
  {
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  operator delete(v1);
}

void sub_1BF733A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, _QWORD *a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_group_t group, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **__p,uint64_t a24)
{
  unint64_t *v24;
  std::__shared_weak_count *v25;
  void **v26;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void **v30;
  void **v31;
  unint64_t v32;
  NSObject *v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;

  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v29 = __ldaxr(p_shared_owners);
  while (__stlxr(v29 - 1, p_shared_owners));
  if (!v29)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  if (__p)
  {
    v30 = v26;
    v31 = __p;
    if (v26 != __p)
    {
      do
      {
        if (*((char *)v30 - 1) < 0)
          operator delete(*(v30 - 3));
        v30 -= 3;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  do
    v32 = __ldaxr(v24);
  while (__stlxr(v32 - 1, v24));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  v33 = a11[1];
  if (v33)
  {
    dispatch_group_leave(v33);
    v34 = a11[1];
    if (v34)
      dispatch_release(v34);
  }
  operator delete(a11);
  v35 = (std::__shared_weak_count *)a12[2];
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  operator delete(a12);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeGlobalServices(void)::$_0>(ServiceManager::initializeGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::initializeGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v6;
  NSObject **v7;
  _QWORD *v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  _BYTE *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  dispatch_time_t v22;
  std::__shared_weak_count *v23;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::string *v30;
  __int128 v31;
  __int128 *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  std::ios_base *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  std::string *p_p;
  size_t v45;
  NSObject *v46;
  __int128 *v47;
  std::string *v48;
  void *v49;
  NSObject *v50;
  unint64_t v51;
  NSObject *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string::size_type v57;
  std::string *v58;
  uint64_t v59;
  const void **v60;
  const void *v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  _QWORD *v65;
  std::__shared_weak_count *v67;
  _QWORD *v68;
  std::string __p;
  void *v70;
  std::string *v71;
  unint64_t v72;
  dispatch_group_t group;
  void *__dst[2];
  unint64_t v75;
  uint8_t v76[4];
  std::string *v77;
  _BYTE buf[24];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v65 = (_QWORD *)*a1;
  v68 = *(_QWORD **)*a1;
  v1 = v68[5];
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2 = (uint64_t)(v68[16] - v68[15]) >> 4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v2;
    _os_log_impl(&dword_1BF566000, v1, OS_LOG_TYPE_DEFAULT, "#I Initializing %zd global services", buf, 0xCu);
  }
  v3 = dispatch_group_create();
  v4 = operator new(0x38uLL);
  v5 = v4;
  v4[1] = 0;
  v6 = v4 + 1;
  v4[2] = 0;
  *v4 = off_1E7922D38;
  v4[3] = v3;
  v7 = (NSObject **)(v4 + 3);
  v67 = (std::__shared_weak_count *)v4;
  if (!v3)
  {
    v4[4] = 0;
    v4[5] = 0;
    v4[6] = 0;
    v8 = (_QWORD *)v68[15];
    v9 = (_QWORD *)v68[16];
    if (v8 == v9)
      goto LABEL_30;
    while (1)
    {
LABEL_9:
      v10 = v68[5];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v11;
        _os_log_impl(&dword_1BF566000, v10, OS_LOG_TYPE_DEFAULT, "#I Initializing '%s'", buf, 0xCu);
      }
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      v12 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
      v13 = strlen(v12);
      if (v13 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v14 = (_BYTE *)v13;
      if (v13 >= 0x17)
        break;
      HIBYTE(v75) = v13;
      v15 = __dst;
      if (v13)
        goto LABEL_18;
LABEL_19:
      v14[(_QWORD)v15] = 0;
      ctu::TrackedGroup::fork((NSObject **)buf, (uint64_t)v7, (uint64_t)__dst);
      if (SHIBYTE(v75) < 0)
      {
        operator delete(__dst[0]);
        v18 = *v8;
        v19 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_23:
          dispatch_retain(v19);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v18 = *v8;
        v19 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_23;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v18 + 32))(v18, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v19)
      {
        dispatch_group_leave(v19);
        dispatch_release(v19);
      }
      v8 += 2;
      if (v8 == v9)
        goto LABEL_30;
    }
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    v15 = (void **)operator new(v16 + 1);
    __dst[1] = v14;
    v75 = v17 | 0x8000000000000000;
    __dst[0] = v15;
LABEL_18:
    memmove(v15, v12, (size_t)v14);
    goto LABEL_19;
  }
  dispatch_retain(v3);
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  dispatch_release(v3);
  v8 = (_QWORD *)v68[15];
  v9 = (_QWORD *)v68[16];
  if (v8 != v9)
    goto LABEL_9;
LABEL_30:
  v20 = *v7;
  v21 = (*(uint64_t (**)(_QWORD *))(*v68 + 88))(v68);
  v22 = dispatch_time(0, 1000000000 * v21);
  v23 = v67;
  if (!dispatch_group_wait(v20, v22))
    goto LABEL_63;
  v70 = 0;
  v71 = 0;
  v72 = 0;
  shared_owners = (uint64_t *)v67[1].__shared_owners_;
  shared_weak_owners = (uint64_t *)v67[1].__shared_weak_owners_;
  while (shared_owners != shared_weak_owners)
  {
    v26 = (std::__shared_weak_count *)shared_owners[1];
    if (v26)
    {
      v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        v28 = v27;
        v29 = *shared_owners;
        if (*shared_owners)
        {
          v30 = v71;
          if ((unint64_t)v71 >= v72)
          {
            v32 = (__int128 *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v70, v29);
          }
          else
          {
            if (*(char *)(v29 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v71, *(const std::string::value_type **)v29, *(_QWORD *)(v29 + 8));
            }
            else
            {
              v31 = *(_OWORD *)v29;
              v71->__r_.__value_.__r.__words[2] = *(_QWORD *)(v29 + 16);
              *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
            }
            v32 = (__int128 *)&v30[1];
          }
          v71 = (std::string *)v32;
        }
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
    shared_owners += 2;
  }
  *(_QWORD *)&v35 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v35 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v84 = 0xAAAAAAAAAAAAAAAALL;
  v94 = v35;
  v93 = v35;
  v92 = v35;
  v91 = v35;
  v90 = v35;
  v89 = v35;
  v88 = v35;
  v87 = v35;
  v86 = v35;
  v83 = v35;
  v82 = v35;
  v81 = v35;
  v80 = v35;
  v79 = v35;
  *(_OWORD *)&buf[8] = v35;
  v36 = MEMORY[0x1E0DE4FE0];
  v37 = MEMORY[0x1E0DE4FE0] + 64;
  v85 = MEMORY[0x1E0DE4FE0] + 64;
  v38 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v39 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)buf = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v39;
  v40 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v40, &buf[8]);
  v40[1].__vftable = 0;
  v40[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v36 + 24;
  v85 = v37;
  std::streambuf::basic_streambuf();
  v41 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  v82 = 0u;
  v83 = 0u;
  LODWORD(v84) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Initialization TIMEOUT: ", 24);
  v42 = (_QWORD *)std::ostream::operator<<();
  v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" clients failed to complete init stage: ", 40);
  p_p = &__p;
  ctu::join<std::__wrap_iter<std::string *>>(&__p, (std::string *)v70, (__int128 *)v71);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v45 = strlen((const char *)p_p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)p_p, v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = v68[5];
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    if ((v84 & 0x10) != 0)
    {
      v59 = *((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1) < (unint64_t)v81)
      {
        *((_QWORD *)&v83 + 1) = v81;
        v59 = v81;
      }
      v60 = (const void **)&v80 + 1;
    }
    else
    {
      if ((v84 & 8) == 0)
      {
        v57 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v58 = &__p;
        goto LABEL_92;
      }
      v60 = (const void **)&v79;
      v59 = v80;
    }
    v61 = *v60;
    v57 = v59 - (_QWORD)*v60;
    if (v57 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v57 >= 0x17)
    {
      v62 = (v57 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v57 | 7) != 0x17)
        v62 = v57 | 7;
      v63 = v62 + 1;
      v58 = (std::string *)operator new(v62 + 1);
      __p.__r_.__value_.__l.__size_ = v57;
      __p.__r_.__value_.__r.__words[2] = v63 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v59 - *(_BYTE *)v60;
      v58 = &__p;
      if (!v57)
        goto LABEL_92;
    }
    memmove(v58, v61, v57);
LABEL_92:
    v58->__r_.__value_.__s.__data_[v57] = 0;
    v64 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v76 = 136315138;
    v77 = v64;
    _os_log_error_impl(&dword_1BF566000, v46, OS_LOG_TYPE_ERROR, "%s", v76, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v23 = v67;
  }
  *(_QWORD *)buf = *v38;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v38[3];
  *(_QWORD *)&buf[8] = v41 + 16;
  if (SBYTE7(v83) < 0)
    operator delete((void *)v82);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](&v85);
  v47 = (__int128 *)v70;
  if (v70)
  {
    v48 = v71;
    v49 = v70;
    if (v71 != v70)
    {
      do
      {
        if (SHIBYTE(v48[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48[-1].__r_.__value_.__l.__data_);
        --v48;
      }
      while (v48 != (std::string *)v47);
      v49 = v70;
    }
    v71 = (std::string *)v47;
    operator delete(v49);
  }
LABEL_63:
  v50 = v68[5];
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v50, OS_LOG_TYPE_DEFAULT, "#I All global services initialized", buf, 2u);
  }
  do
    v51 = __ldaxr(v6);
  while (__stlxr(v51 - 1, v6));
  if (!v51)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  v52 = v65[1];
  if (v52)
  {
    dispatch_group_leave(v52);
    v53 = v65[1];
    if (v53)
      dispatch_release(v53);
  }
  operator delete(v65);
  v54 = (std::__shared_weak_count *)a1[2];
  if (v54)
  {
    v55 = (unint64_t *)&v54->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  operator delete(a1);
}

void sub_1BF734430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void **__p,uint64_t a24,uint64_t a25,dispatch_group_t group,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  unint64_t *v49;
  std::__shared_weak_count *v50;
  void **v51;
  unint64_t *p_shared_owners;
  unint64_t v54;
  void **v55;
  void **v56;
  unint64_t v57;
  NSObject *v58;
  NSObject *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;

  p_shared_owners = (unint64_t *)&v50->__shared_owners_;
  do
    v54 = __ldaxr(p_shared_owners);
  while (__stlxr(v54 - 1, p_shared_owners));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  if (__p)
  {
    v55 = v51;
    v56 = __p;
    if (v51 != __p)
    {
      do
      {
        if (*((char *)v55 - 1) < 0)
          operator delete(*(v55 - 3));
        v55 -= 3;
      }
      while (v55 != __p);
      v56 = __p;
    }
    operator delete(v56);
  }
  do
    v57 = __ldaxr(v49);
  while (__stlxr(v57 - 1, v49));
  if (!v57)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  v58 = a10[1];
  if (v58)
  {
    dispatch_group_leave(v58);
    v59 = a10[1];
    if (v59)
      dispatch_release(v59);
  }
  operator delete(a10);
  v60 = a11;
  v61 = (std::__shared_weak_count *)a11[2];
  if (v61)
  {
    v62 = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    v60 = a11;
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  operator delete(v60);
  _Unwind_Resume(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownGlobalServices(void)::$_0>(ServiceManager::shutdownGlobalServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownGlobalServices(void)::$_0,dispatch_queue_s *::default_delete<ServiceManager::shutdownGlobalServices(void)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  _QWORD *v1;
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  NSObject **v8;
  _QWORD *v9;
  _QWORD *v10;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  _BYTE *v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  dispatch_time_t v23;
  std::__shared_weak_count *v24;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  __int128 *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  std::ios_base *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  std::string *p_p;
  size_t v46;
  NSObject *v47;
  __int128 *v48;
  std::string *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  std::string *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  unint64_t v63;
  NSObject *v64;
  NSObject *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::string::size_type v73;
  std::string *v74;
  uint64_t v75;
  const void **v76;
  const void *v77;
  uint64_t v78;
  std::string *v79;
  _QWORD *v80;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::string __p;
  void *v85;
  std::string *v86;
  unint64_t v87;
  dispatch_group_t group;
  void *__dst[2];
  unint64_t v90;
  uint8_t v91[4];
  std::string *v92;
  uint8_t buf[24];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  unint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v80 = (_QWORD *)*a1;
  v1 = *(_QWORD **)*a1;
  v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (uint64_t)(v1[16] - v1[15]) >> 4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Shutdown %zd global services", buf, 0xCu);
  }
  v4 = dispatch_group_create();
  v5 = operator new(0x38uLL);
  v6 = v5;
  v5[1] = 0;
  v7 = v5 + 1;
  v5[2] = 0;
  *v5 = off_1E7922D38;
  v5[3] = v4;
  v8 = (NSObject **)(v5 + 3);
  v82 = (std::__shared_weak_count *)v5;
  if (!v4)
  {
    v5[4] = 0;
    v5[5] = 0;
    v5[6] = 0;
    v9 = (_QWORD *)v1[15];
    v10 = (_QWORD *)v1[16];
    if (v9 == v10)
      goto LABEL_30;
    while (1)
    {
LABEL_9:
      v11 = v1[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v12;
        _os_log_impl(&dword_1BF566000, v11, OS_LOG_TYPE_DEFAULT, "#I Shutdown global service '%s'", buf, 0xCu);
      }
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      v13 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
      v14 = strlen(v13);
      if (v14 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v15 = (_BYTE *)v14;
      if (v14 >= 0x17)
        break;
      HIBYTE(v90) = v14;
      v16 = __dst;
      if (v14)
        goto LABEL_18;
LABEL_19:
      v15[(_QWORD)v16] = 0;
      ctu::TrackedGroup::fork((NSObject **)buf, (uint64_t)v8, (uint64_t)__dst);
      if (SHIBYTE(v90) < 0)
      {
        operator delete(__dst[0]);
        v19 = *v9;
        v20 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_23:
          dispatch_retain(v20);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v19 = *v9;
        v20 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_23;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v19 + 64))(v19, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v20)
      {
        dispatch_group_leave(v20);
        dispatch_release(v20);
      }
      v9 += 2;
      if (v9 == v10)
        goto LABEL_30;
    }
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (void **)operator new(v17 + 1);
    __dst[1] = v15;
    v90 = v18 | 0x8000000000000000;
    __dst[0] = v16;
LABEL_18:
    memmove(v16, v13, (size_t)v15);
    goto LABEL_19;
  }
  dispatch_retain(v4);
  v6[4] = 0;
  v6[5] = 0;
  v6[6] = 0;
  dispatch_release(v4);
  v9 = (_QWORD *)v1[15];
  v10 = (_QWORD *)v1[16];
  if (v9 != v10)
    goto LABEL_9;
LABEL_30:
  v21 = *v8;
  v22 = (*(uint64_t (**)(_QWORD *))(*v1 + 112))(v1);
  v23 = dispatch_time(0, 1000000000 * v22);
  v24 = v82;
  if (!dispatch_group_wait(v21, v23))
    goto LABEL_63;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  shared_owners = (uint64_t *)v82[1].__shared_owners_;
  shared_weak_owners = (uint64_t *)v82[1].__shared_weak_owners_;
  while (shared_owners != shared_weak_owners)
  {
    v27 = (std::__shared_weak_count *)shared_owners[1];
    if (v27)
    {
      v28 = std::__shared_weak_count::lock(v27);
      if (v28)
      {
        v29 = v28;
        v30 = *shared_owners;
        if (*shared_owners)
        {
          v31 = v86;
          if ((unint64_t)v86 >= v87)
          {
            v33 = (__int128 *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v85, v30);
          }
          else
          {
            if (*(char *)(v30 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)v30, *(_QWORD *)(v30 + 8));
            }
            else
            {
              v32 = *(_OWORD *)v30;
              v86->__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
            }
            v33 = (__int128 *)&v31[1];
          }
          v86 = (std::string *)v33;
        }
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
    }
    shared_owners += 2;
  }
  *(_QWORD *)&v36 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v99 = 0xAAAAAAAAAAAAAAAALL;
  v109 = v36;
  v108 = v36;
  v107 = v36;
  v106 = v36;
  v105 = v36;
  v104 = v36;
  v103 = v36;
  v102 = v36;
  v101 = v36;
  v98 = v36;
  v97 = v36;
  v96 = v36;
  v95 = v36;
  v94 = v36;
  *(_OWORD *)&buf[8] = v36;
  v37 = MEMORY[0x1E0DE4FE0];
  v38 = MEMORY[0x1E0DE4FE0] + 64;
  v100 = MEMORY[0x1E0DE4FE0] + 64;
  v39 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v40 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)buf = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v40;
  v41 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v41, &buf[8]);
  v41[1].__vftable = 0;
  v41[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v37 + 24;
  v100 = v38;
  std::streambuf::basic_streambuf();
  v42 = MEMORY[0x1E0DE4FB8];
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  v97 = 0u;
  v98 = 0u;
  LODWORD(v99) = 16;
  v24 = v82;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Shutdown global service: TIMEOUT: ", 34);
  v43 = (_QWORD *)std::ostream::operator<<();
  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" clients failed to complete shutdown: ", 38);
  p_p = &__p;
  ctu::join<std::__wrap_iter<std::string *>>(&__p, (std::string *)v85, (__int128 *)v86);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v46 = strlen((const char *)p_p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)p_p, v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = v1[5];
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    if ((v99 & 0x10) != 0)
    {
      v75 = *((_QWORD *)&v98 + 1);
      if (*((_QWORD *)&v98 + 1) < (unint64_t)v96)
      {
        *((_QWORD *)&v98 + 1) = v96;
        v75 = v96;
      }
      v76 = (const void **)&v95 + 1;
    }
    else
    {
      if ((v99 & 8) == 0)
      {
        v73 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v74 = &__p;
        goto LABEL_118;
      }
      v76 = (const void **)&v94;
      v75 = v95;
    }
    v77 = *v76;
    v73 = v75 - (_QWORD)*v76;
    if (v73 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v73 >= 0x17)
    {
      v78 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v73 | 7) != 0x17)
        v78 = v73 | 7;
      v83 = v78 + 1;
      v74 = (std::string *)operator new(v78 + 1);
      __p.__r_.__value_.__l.__size_ = v73;
      __p.__r_.__value_.__r.__words[2] = v83 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v75 - *(_BYTE *)v76;
      v74 = &__p;
      if (!v73)
        goto LABEL_118;
    }
    memmove(v74, v77, v73);
LABEL_118:
    v74->__r_.__value_.__s.__data_[v73] = 0;
    v79 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v79 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)v91 = 136315138;
    v92 = v79;
    _os_log_error_impl(&dword_1BF566000, v47, OS_LOG_TYPE_ERROR, "%s", v91, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v24 = v82;
  }
  *(_QWORD *)buf = *v39;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v39[3];
  *(_QWORD *)&buf[8] = v42 + 16;
  if (SBYTE7(v98) < 0)
    operator delete((void *)v97);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364](&v100);
  v48 = (__int128 *)v85;
  if (v85)
  {
    v49 = v86;
    v50 = v85;
    if (v86 != v85)
    {
      do
      {
        if (SHIBYTE(v49[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49[-1].__r_.__value_.__l.__data_);
        --v49;
      }
      while (v49 != (std::string *)v48);
      v50 = v85;
    }
    v86 = (std::string *)v48;
    operator delete(v50);
  }
LABEL_63:
  v51 = v1[16];
  if (v51 != v1[15])
  {
    do
    {
      v53 = v51;
      v54 = *(_QWORD *)(v51 - 16);
      v51 -= 16;
      memset(buf, 0, sizeof(buf));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(buf, *(_QWORD *)(v54 + 24), *(_QWORD *)(v54 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v54 + 32) - *(_QWORD *)(v54 + 24)) >> 3));
      v55 = v1[21];
      v86 = 0;
      v87 = 0;
      v85 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v85, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
      ServiceCtrl::clearCommandHandlers(v55, (uint64_t)v85, (uint64_t)v86);
      v56 = (__int128 *)v85;
      if (v85)
      {
        v57 = v86;
        v58 = v85;
        if (v86 != v85)
        {
          do
          {
            if (SHIBYTE(v57[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v57[-1].__r_.__value_.__l.__data_);
            --v57;
          }
          while (v57 != (std::string *)v56);
          v58 = v85;
        }
        v86 = (std::string *)v56;
        operator delete(v58);
      }
      v59 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v60 = *(_QWORD *)&buf[8];
        v52 = *(void **)buf;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          do
          {
            if (*(char *)(v60 - 1) < 0)
              operator delete(*(void **)(v60 - 24));
            v60 -= 24;
          }
          while (v60 != v59);
          v52 = *(void **)buf;
        }
        *(_QWORD *)&buf[8] = v59;
        operator delete(v52);
      }
    }
    while (v51 != v1[15]);
    v61 = v1[16];
    if (v61 != v51)
    {
      do
      {
        v70 = *(std::__shared_weak_count **)(v61 - 8);
        if (v70)
        {
          v71 = (unint64_t *)&v70->__shared_owners_;
          do
            v72 = __ldaxr(v71);
          while (__stlxr(v72 - 1, v71));
          if (!v72)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        v69 = v61 == v53;
        v61 -= 16;
      }
      while (!v69);
    }
  }
  v1[16] = v51;
  v62 = v1[5];
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v62, OS_LOG_TYPE_DEFAULT, "#I All global services have shutdown", buf, 2u);
  }
  do
    v63 = __ldaxr(v7);
  while (__stlxr(v63 - 1, v7));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  v64 = v80[1];
  if (v64)
  {
    dispatch_group_leave(v64);
    v65 = v80[1];
    if (v65)
      dispatch_release(v65);
  }
  operator delete(v80);
  v66 = (std::__shared_weak_count *)a1[2];
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  operator delete(a1);
}

void sub_1BF734FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, _QWORD *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void **__p,uint64_t a22,uint64_t a23,dispatch_group_t group,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  unint64_t *v47;
  std::__shared_weak_count *v48;
  void **v49;
  unint64_t *p_shared_owners;
  unint64_t v52;
  void **v53;
  void **v54;
  unint64_t v55;
  NSObject *v56;
  NSObject *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;

  p_shared_owners = (unint64_t *)&v48->__shared_owners_;
  do
    v52 = __ldaxr(p_shared_owners);
  while (__stlxr(v52 - 1, p_shared_owners));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  if (__p)
  {
    v53 = v49;
    v54 = __p;
    if (v49 != __p)
    {
      do
      {
        if (*((char *)v53 - 1) < 0)
          operator delete(*(v53 - 3));
        v53 -= 3;
      }
      while (v53 != __p);
      v54 = __p;
    }
    operator delete(v54);
  }
  do
    v55 = __ldaxr(v47);
  while (__stlxr(v55 - 1, v47));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  v56 = a10[1];
  if (v56)
  {
    dispatch_group_leave(v56);
    v57 = a10[1];
    if (v57)
      dispatch_release(v57);
  }
  operator delete(a10);
  v58 = (std::__shared_weak_count *)a11[2];
  if (v58)
  {
    v59 = (unint64_t *)&v58->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void ServiceCtrl::clearCommandHandlers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void *__p;
  void **v11;
  uint64_t v12;
  _QWORD block[6];

  v4 = a1 + 72;
  v9 = a1;
  __p = 0;
  v11 = 0;
  v12 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p, a2, a3, 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3));
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_20clearCommandHandlersENSt3__16vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke;
  block[3] = &__block_descriptor_tmp_19_7;
  block[4] = v4;
  block[5] = &v9;
  v5 = *(NSObject **)(a1 + 88);
  if (*(_QWORD *)(a1 + 96))
  {
    dispatch_async_and_wait(v5, block);
    v6 = (void **)__p;
    if (!__p)
      return;
  }
  else
  {
    dispatch_sync(v5, block);
    v6 = (void **)__p;
    if (!__p)
      return;
  }
  v7 = v11;
  v8 = v6;
  if (v11 != v6)
  {
    do
    {
      if (*((char *)v7 - 1) < 0)
        operator delete(*(v7 - 3));
      v7 -= 3;
    }
    while (v7 != v6);
    v8 = __p;
  }
  v11 = v6;
  operator delete(v8);
}

void ___ZNK3ctu20SharedSynchronizableI11ServiceCtrlE20execute_wrapped_syncIZNS1_20clearCommandHandlersENSt3__16vectorINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS9_ISB_EEEEEUlvE_EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSF__block_invoke(uint64_t a1)
{
  _QWORD *v1;
  const void **v2;
  const void **v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  const void *v14;

  v1 = *(_QWORD **)(a1 + 40);
  v2 = (const void **)v1[1];
  v3 = (const void **)v1[2];
  if (v2 != v3)
  {
    v4 = *v1;
    v5 = (uint64_t **)(*v1 + 120);
    v6 = *v1 + 128;
    do
    {
      v7 = std::__tree<std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,xpc::dict>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,xpc::dict>>>>::find<std::string>((uint64_t)v5, v2);
      if ((uint64_t *)v6 != v7)
      {
        v8 = v7;
        v9 = (uint64_t *)v7[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          v11 = v7;
          do
          {
            v10 = (uint64_t *)v11[2];
            v12 = *v10 == (_QWORD)v11;
            v11 = v10;
          }
          while (!v12);
        }
        if (*v5 == v7)
          *v5 = v10;
        v13 = *(uint64_t **)(v4 + 128);
        --*(_QWORD *)(v4 + 136);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v13, v8);
        v14 = (const void *)v8[7];
        if (v14)
          _Block_release(v14);
        if (*((char *)v8 + 55) < 0)
          operator delete((void *)v8[4]);
        operator delete(v8);
      }
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void dispatch::detail::group_notify<ServiceManager::initializeDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::initializeDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  _QWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;

  v2 = *(_QWORD **)a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3)
  {
    dispatch_retain(*((dispatch_object_t *)a1 + 2));
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)v2[10];
  if (!v4 || (v5 = v2[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = v2;
  v8[1] = v3;
  v9 = v2[11];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v14 = *((_QWORD *)a1 + 2);
  if (v14)
  {
    dispatch_group_leave(v14);
    v15 = *((_QWORD *)a1 + 2);
    if (v15)
      dispatch_release(v15);
  }
  v16 = *((_QWORD *)a1 + 1);
  if (v16)
    dispatch_release(v16);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::initializeDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  NSObject **v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  size_t v16;
  _BYTE *v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  dispatch_time_t v25;
  intptr_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  __int128 *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  std::ios_base *v43;
  _QWORD *v44;
  _QWORD *v45;
  std::string *p_p;
  size_t v47;
  NSObject *v48;
  __int128 *v49;
  std::string *v50;
  void *v51;
  NSObject *v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  _QWORD *v55;
  unint64_t *v56;
  NSObject **v57;
  _QWORD *v58;
  _QWORD *v59;
  NSObject *v60;
  uint64_t v61;
  const char *v62;
  size_t v63;
  __int128 *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  NSObject *v70;
  uint64_t v71;
  dispatch_time_t v72;
  intptr_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  uint64_t v80;
  _OWORD *size;
  __int128 v82;
  std::string *v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  std::ios_base *v91;
  _QWORD *v92;
  _QWORD *v93;
  std::string *v94;
  size_t v95;
  NSObject *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  void *v99;
  NSObject *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  NSObject *v104;
  NSObject *v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::string::size_type v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  uint64_t v113;
  const void **v114;
  uint64_t v115;
  const void **v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  std::string *v120;
  const void *v121;
  uint64_t v122;
  uint64_t v123;
  std::string *v124;
  std::__shared_weak_count *v125;
  uint64_t *v126;
  uint64_t **v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  dispatch_group_t object;
  std::string __p;
  void *v132;
  std::string *v133;
  unint64_t v134;
  dispatch_group_t group;
  void *__dst[2];
  unint64_t v137;
  uint8_t v138[4];
  std::string *v139;
  std::string v140;
  _BYTE buf[24];
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = **a1;
  (***(void (****)(_QWORD))(v3 + 104))(*(_QWORD *)(v3 + 104));
  v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = (uint64_t)(*(_QWORD *)(v3 + 152) - *(_QWORD *)(v3 + 144)) >> 4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v5;
    _os_log_impl(&dword_1BF566000, v4, OS_LOG_TYPE_DEFAULT, "#I Initializing %zd services", buf, 0xCu);
  }
  v126 = v2;
  v127 = a1;
  v6 = dispatch_group_create();
  v7 = (std::__shared_weak_count *)operator new(0x38uLL);
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D38;
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v9 = (NSObject **)&v7[1];
  v125 = v7;
  if (!v6)
  {
    v7[1].__shared_owners_ = 0;
    v7[1].__shared_weak_owners_ = 0;
    v7[2].__vftable = 0;
    v11 = *(_QWORD **)(v3 + 144);
    v12 = *(_QWORD **)(v3 + 152);
    v129 = v3;
    if (v11 == v12)
      goto LABEL_30;
    while (1)
    {
LABEL_9:
      v13 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 16))(*v11);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v14;
        _os_log_impl(&dword_1BF566000, v13, OS_LOG_TYPE_DEFAULT, "#I Initializing '%s'", buf, 0xCu);
      }
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      v15 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 16))(*v11);
      v16 = strlen(v15);
      if (v16 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v17 = (_BYTE *)v16;
      if (v16 >= 0x17)
        break;
      HIBYTE(v137) = v16;
      v18 = __dst;
      if (v16)
        goto LABEL_18;
LABEL_19:
      v3 = v129;
      v17[(_QWORD)v18] = 0;
      ctu::TrackedGroup::fork((NSObject **)buf, (uint64_t)v9, (uint64_t)__dst);
      if (SHIBYTE(v137) < 0)
      {
        operator delete(__dst[0]);
        v21 = *v11;
        v22 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_23:
          dispatch_retain(v22);
          if (group)
            dispatch_group_enter(group);
        }
      }
      else
      {
        v21 = *v11;
        v22 = *(NSObject **)buf;
        group = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_23;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v21 + 32))(v21, &group);
      if (group)
      {
        dispatch_group_leave(group);
        if (group)
          dispatch_release(group);
      }
      if (v22)
      {
        dispatch_group_leave(v22);
        dispatch_release(v22);
      }
      v11 += 2;
      if (v11 == v12)
        goto LABEL_30;
    }
    v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (void **)operator new(v19 + 1);
    __dst[1] = v17;
    v137 = v20 | 0x8000000000000000;
    __dst[0] = v18;
LABEL_18:
    memmove(v18, v15, (size_t)v17);
    goto LABEL_19;
  }
  v10 = &v7->__vftable;
  dispatch_retain(v6);
  v10[4] = 0;
  v10[5] = 0;
  v10[6] = 0;
  dispatch_release(v6);
  v11 = *(_QWORD **)(v3 + 144);
  v12 = *(_QWORD **)(v3 + 152);
  v129 = v3;
  if (v11 != v12)
    goto LABEL_9;
LABEL_30:
  v23 = *v9;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 88))(v3);
  v25 = dispatch_time(0, 1000000000 * v24);
  v26 = dispatch_group_wait(v23, v25);
  v27 = MEMORY[0x1E0DE4FE0];
  v28 = (_QWORD *)MEMORY[0x1E0DE4F60];
  if (!v26)
    goto LABEL_63;
  v132 = 0;
  v133 = 0;
  v134 = 0;
  shared_owners = (uint64_t *)v125[1].__shared_owners_;
  shared_weak_owners = (uint64_t *)v125[1].__shared_weak_owners_;
  while (shared_owners != shared_weak_owners)
  {
    v31 = (std::__shared_weak_count *)shared_owners[1];
    if (v31)
    {
      v32 = std::__shared_weak_count::lock(v31);
      if (v32)
      {
        v33 = v32;
        v34 = *shared_owners;
        if (*shared_owners)
        {
          v35 = v133;
          if ((unint64_t)v133 >= v134)
          {
            v37 = (__int128 *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)&v132, v34);
          }
          else
          {
            if (*(char *)(v34 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v133, *(const std::string::value_type **)v34, *(_QWORD *)(v34 + 8));
            }
            else
            {
              v36 = *(_OWORD *)v34;
              v133->__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 + 16);
              *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
            }
            v37 = (__int128 *)&v35[1];
          }
          v133 = (std::string *)v37;
        }
        v38 = (unint64_t *)&v33->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    shared_owners += 2;
  }
  *(_QWORD *)&v40 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v147 = v40;
  v156 = v40;
  v155 = v40;
  v154 = v40;
  v153 = v40;
  v152 = v40;
  v151 = v40;
  v150 = v40;
  v149 = v40;
  v148 = v40;
  v146 = v40;
  v145 = v40;
  v144 = v40;
  v143 = v40;
  v142 = v40;
  *(_OWORD *)&buf[8] = v40;
  v41 = v28[1];
  v42 = v28[2];
  *((_QWORD *)&v147 + 1) = v27 + 64;
  *(_QWORD *)buf = v41;
  *(_QWORD *)&buf[*(_QWORD *)(v41 - 24)] = v42;
  v43 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v43, &buf[8]);
  v43[1].__vftable = 0;
  v43[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v27 + 24;
  *((_QWORD *)&v147 + 1) = v27 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  v145 = 0u;
  v146 = 0u;
  LODWORD(v147) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Initialization TIMEOUT: ", 24);
  v44 = (_QWORD *)std::ostream::operator<<();
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" clients failed to complete init stage: ", 40);
  p_p = &__p;
  ctu::join<std::__wrap_iter<std::string *>>(&__p, (std::string *)v132, (__int128 *)v133);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  v47 = strlen((const char *)p_p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_p, v47);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v48 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    if ((v147 & 0x10) != 0)
    {
      v113 = *((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1) < (unint64_t)v144)
      {
        *((_QWORD *)&v146 + 1) = v144;
        v113 = v144;
      }
      v114 = (const void **)&v143 + 1;
    }
    else
    {
      if ((v147 & 8) == 0)
      {
        v109 = 0;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        v110 = &__p;
LABEL_166:
        v110->__r_.__value_.__s.__data_[v109] = 0;
        v120 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v120 = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(v140.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v140.__r_.__value_.__r.__words + 4) = (std::string::size_type)v120;
        _os_log_error_impl(&dword_1BF566000, v48, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v140, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v28 = (_QWORD *)MEMORY[0x1E0DE4F60];
        goto LABEL_53;
      }
      v114 = (const void **)&v142;
      v113 = v143;
    }
    v117 = *v114;
    v109 = v113 - (_QWORD)*v114;
    if (v109 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v109 >= 0x17)
    {
      v118 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v109 | 7) != 0x17)
        v118 = v109 | 7;
      v119 = v118 + 1;
      v110 = (std::string *)operator new(v118 + 1);
      __p.__r_.__value_.__l.__size_ = v109;
      __p.__r_.__value_.__r.__words[2] = v119 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
    }
    else
    {
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v113 - *(_BYTE *)v114;
      v110 = &__p;
      if (!v109)
        goto LABEL_165;
    }
    memmove(v110, v117, v109);
LABEL_165:
    v3 = v129;
    goto LABEL_166;
  }
LABEL_53:
  *(_QWORD *)buf = *v28;
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v28[3];
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v146) < 0)
    operator delete((void *)v145);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364]((char *)&v147 + 8);
  v49 = (__int128 *)v132;
  if (v132)
  {
    v50 = v133;
    v51 = v132;
    if (v133 != v132)
    {
      do
      {
        if (SHIBYTE(v50[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50[-1].__r_.__value_.__l.__data_);
        --v50;
      }
      while (v50 != (std::string *)v49);
      v51 = v132;
    }
    v133 = (std::string *)v49;
    operator delete(v51);
  }
LABEL_63:
  v52 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v52, OS_LOG_TYPE_DEFAULT, "#I All services initialized; Starting them now!", buf, 2u);
  }
  v53 = dispatch_group_create();
  v54 = (std::__shared_weak_count *)operator new(0x38uLL);
  v55 = &v54->__vftable;
  v54->__shared_owners_ = 0;
  v56 = (unint64_t *)&v54->__shared_owners_;
  v54->__shared_weak_owners_ = 0;
  v54->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D38;
  v54[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
  v57 = (NSObject **)&v54[1];
  v128 = v54;
  if (!v53)
  {
    v54[1].__shared_owners_ = 0;
    v54[1].__shared_weak_owners_ = 0;
    v54[2].__vftable = 0;
    v58 = *(_QWORD **)(v3 + 144);
    v59 = *(_QWORD **)(v3 + 152);
    if (v58 == v59)
      goto LABEL_92;
    while (1)
    {
LABEL_71:
      v60 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        v61 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 16))(*v58);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v61;
        _os_log_impl(&dword_1BF566000, v60, OS_LOG_TYPE_DEFAULT, "#I Starting '%s'", buf, 0xCu);
      }
      *(_QWORD *)buf = 0xAAAAAAAAAAAAAAAALL;
      v62 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 16))(*v58);
      v63 = strlen(v62);
      if (v63 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v64 = (__int128 *)v63;
      if (v63 >= 0x17)
        break;
      HIBYTE(v134) = v63;
      v65 = &v132;
      if (v63)
        goto LABEL_80;
LABEL_81:
      *((_BYTE *)v64 + (_QWORD)v65) = 0;
      ctu::TrackedGroup::fork((NSObject **)buf, (uint64_t)v57, (uint64_t)&v132);
      if (SHIBYTE(v134) < 0)
      {
        operator delete(v132);
        v68 = *v58;
        v69 = *(NSObject **)buf;
        object = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
        {
LABEL_85:
          dispatch_retain(v69);
          if (object)
            dispatch_group_enter(object);
        }
      }
      else
      {
        v68 = *v58;
        v69 = *(NSObject **)buf;
        object = *(dispatch_group_t *)buf;
        if (*(_QWORD *)buf)
          goto LABEL_85;
      }
      (*(void (**)(uint64_t, dispatch_group_t *))(*(_QWORD *)v68 + 40))(v68, &object);
      if (object)
      {
        dispatch_group_leave(object);
        if (object)
          dispatch_release(object);
      }
      if (v69)
      {
        dispatch_group_leave(v69);
        dispatch_release(v69);
      }
      v58 += 2;
      v3 = v129;
      if (v58 == v59)
        goto LABEL_92;
    }
    v66 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v63 | 7) != 0x17)
      v66 = v63 | 7;
    v67 = v66 + 1;
    v65 = operator new(v66 + 1);
    v133 = (std::string *)v64;
    v134 = v67 | 0x8000000000000000;
    v132 = v65;
LABEL_80:
    memmove(v65, v62, (size_t)v64);
    goto LABEL_81;
  }
  dispatch_retain(v53);
  v55[4] = 0;
  v55[5] = 0;
  v55[6] = 0;
  dispatch_release(v53);
  v58 = *(_QWORD **)(v3 + 144);
  v59 = *(_QWORD **)(v3 + 152);
  if (v58 != v59)
    goto LABEL_71;
LABEL_92:
  atomic_store(0, (unsigned __int8 *)(v3 + 192));
  v70 = *v57;
  v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v3);
  v72 = dispatch_time(0, 1000000000 * v71);
  v73 = dispatch_group_wait(v70, v72);
  v74 = MEMORY[0x1E0DE4F60];
  if (!v73)
    goto LABEL_125;
  memset(&__p, 0, sizeof(__p));
  v75 = (uint64_t *)v128[1].__shared_owners_;
  v76 = (uint64_t *)v128[1].__shared_weak_owners_;
  while (v75 != v76)
  {
    v77 = (std::__shared_weak_count *)v75[1];
    if (v77)
    {
      v78 = std::__shared_weak_count::lock(v77);
      if (v78)
      {
        v79 = v78;
        v80 = *v75;
        if (*v75)
        {
          size = (_OWORD *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            v83 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&__p.__r_.__value_.__l.__data_, v80);
          }
          else
          {
            if (*(char *)(v80 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, *(const std::string::value_type **)v80, *(_QWORD *)(v80 + 8));
            }
            else
            {
              v82 = *(_OWORD *)v80;
              *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v80 + 16);
              *size = v82;
            }
            v83 = (std::string *)((char *)size + 24);
          }
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v83;
        }
        v84 = (unint64_t *)&v79->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
    }
    v75 += 2;
  }
  *(_QWORD *)&v86 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v86 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v147 = v86;
  v156 = v86;
  v155 = v86;
  v154 = v86;
  v153 = v86;
  v152 = v86;
  v151 = v86;
  v150 = v86;
  v149 = v86;
  v148 = v86;
  v146 = v86;
  v145 = v86;
  v144 = v86;
  v143 = v86;
  v142 = v86;
  *(_OWORD *)&buf[8] = v86;
  v87 = MEMORY[0x1E0DE4FE0];
  v88 = MEMORY[0x1E0DE4FE0] + 64;
  v89 = *(_QWORD *)(v74 + 8);
  v90 = *(_QWORD *)(v74 + 16);
  *((_QWORD *)&v147 + 1) = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)buf = v89;
  *(_QWORD *)&buf[*(_QWORD *)(v89 - 24)] = v90;
  v91 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
  std::ios_base::init(v91, &buf[8]);
  v91[1].__vftable = 0;
  v91[1].__fmtflags_ = -1;
  *(_QWORD *)buf = v87 + 24;
  *((_QWORD *)&v147 + 1) = v88;
  std::streambuf::basic_streambuf();
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  v145 = 0u;
  v146 = 0u;
  LODWORD(v147) = 16;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Start TIMEOUT: ", 15);
  v92 = (_QWORD *)std::ostream::operator<<();
  v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" clients failed to complete start stage: ", 41);
  v94 = &v140;
  ctu::join<std::__wrap_iter<std::string *>>(&v140, (std::string *)__p.__r_.__value_.__l.__data_, (__int128 *)__p.__r_.__value_.__l.__size_);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v94 = (std::string *)v140.__r_.__value_.__r.__words[0];
  v95 = strlen((const char *)v94);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v94, v95);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  v96 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
  {
    if ((v147 & 0x10) != 0)
    {
      v115 = *((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1) < (unint64_t)v144)
      {
        *((_QWORD *)&v146 + 1) = v144;
        v115 = v144;
      }
      v116 = (const void **)&v143 + 1;
    }
    else
    {
      if ((v147 & 8) == 0)
      {
        v111 = 0;
        *((_BYTE *)&v140.__r_.__value_.__s + 23) = 0;
        v112 = &v140;
        goto LABEL_180;
      }
      v116 = (const void **)&v142;
      v115 = v143;
    }
    v121 = *v116;
    v111 = v115 - (_QWORD)*v116;
    if (v111 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    if (v111 >= 0x17)
    {
      v122 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v111 | 7) != 0x17)
        v122 = v111 | 7;
      v123 = v122 + 1;
      v112 = (std::string *)operator new(v122 + 1);
      v140.__r_.__value_.__l.__size_ = v111;
      v140.__r_.__value_.__r.__words[2] = v123 | 0x8000000000000000;
      v140.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
    }
    else
    {
      *((_BYTE *)&v140.__r_.__value_.__s + 23) = v115 - *(_BYTE *)v116;
      v112 = &v140;
      if (!v111)
        goto LABEL_180;
    }
    memmove(v112, v121, v111);
LABEL_180:
    v112->__r_.__value_.__s.__data_[v111] = 0;
    v124 = &v140;
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v124 = (std::string *)v140.__r_.__value_.__r.__words[0];
    *(_DWORD *)v138 = 136315138;
    v139 = v124;
    _os_log_error_impl(&dword_1BF566000, v96, OS_LOG_TYPE_ERROR, "%s", v138, 0xCu);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v140.__r_.__value_.__l.__data_);
    v3 = v129;
  }
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v146) < 0)
    operator delete((void *)v145);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8C364]((char *)&v147 + 8);
  v97 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v98 = __p.__r_.__value_.__l.__size_;
    v99 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v98 - 1) < 0)
          operator delete(*(void **)(v98 - 24));
        v98 -= 24;
      }
      while (v98 != v97);
      v99 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v97;
    operator delete(v99);
  }
LABEL_125:
  v100 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BF566000, v100, OS_LOG_TYPE_DEFAULT, "#I All services started", buf, 2u);
  }
  v101 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)buf = operator new(0x30uLL);
  *(_OWORD *)&buf[8] = xmmword_1BF743170;
  strcpy(*(char **)buf, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v101 + 32))(v101, buf);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  do
    v102 = __ldaxr(v56);
  while (__stlxr(v102 - 1, v56));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
    std::__shared_weak_count::__release_weak(v128);
  }
  do
    v103 = __ldaxr(p_shared_owners);
  while (__stlxr(v103 - 1, p_shared_owners));
  if (!v103)
  {
    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
    std::__shared_weak_count::__release_weak(v125);
  }
  v104 = v126[1];
  if (v104)
  {
    dispatch_group_leave(v104);
    v105 = v126[1];
    if (v105)
      dispatch_release(v105);
  }
  operator delete(v126);
  v106 = (std::__shared_weak_count *)v127[2];
  if (v106)
  {
    v107 = (unint64_t *)&v106->__shared_owners_;
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  operator delete(v127);
}

void sub_1BF7364B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, _QWORD *a10, _QWORD *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_group_t group, void **__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_group_t object,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  unint64_t *v62;
  unint64_t *v63;
  std::__shared_weak_count *v64;
  void **v65;
  unint64_t *p_shared_owners;
  unint64_t v68;
  void **v69;
  void **v70;
  unint64_t v71;
  unint64_t v72;
  NSObject *v73;
  NSObject *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;

  p_shared_owners = (unint64_t *)&v64->__shared_owners_;
  do
    v68 = __ldaxr(p_shared_owners);
  while (__stlxr(v68 - 1, p_shared_owners));
  if (!v68)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  if (__p)
  {
    v69 = v65;
    v70 = __p;
    if (v65 != __p)
    {
      do
      {
        if (*((char *)v69 - 1) < 0)
          operator delete(*(v69 - 3));
        v69 -= 3;
      }
      while (v69 != __p);
      v70 = __p;
    }
    operator delete(v70);
  }
  do
    v71 = __ldaxr(v63);
  while (__stlxr(v71 - 1, v63));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
    std::__shared_weak_count::__release_weak(a12);
  }
  do
    v72 = __ldaxr(v62);
  while (__stlxr(v72 - 1, v62));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
    std::__shared_weak_count::__release_weak(a9);
  }
  v73 = a10[1];
  if (v73)
  {
    dispatch_group_leave(v73);
    v74 = a10[1];
    if (v74)
      dispatch_release(v74);
  }
  operator delete(a10);
  v75 = (std::__shared_weak_count *)a11[2];
  if (v75)
  {
    v76 = (unint64_t *)&v75->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  operator delete(a11);
  _Unwind_Resume(a1);
}

void dispatch::detail::group_notify<ServiceManager::shutdownDynamicServices(void)::$_0>(dispatch_group_s *,dispatch_queue_s *,ServiceManager::shutdownDynamicServices(void)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  _QWORD *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;

  v2 = *(_QWORD **)a1;
  v3 = *((_QWORD *)a1 + 2);
  if (v3)
  {
    dispatch_retain(*((dispatch_object_t *)a1 + 2));
    dispatch_group_enter(v3);
  }
  v4 = (std::__shared_weak_count *)v2[10];
  if (!v4 || (v5 = v2[9], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = operator new(0x10uLL);
  *v8 = v2;
  v8[1] = v3;
  v9 = v2[11];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = operator new(0x18uLL);
  *v12 = v8;
  v12[1] = v5;
  v12[2] = v7;
  dispatch_async_f(v9, v12, (dispatch_function_t)dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v14 = *((_QWORD *)a1 + 2);
  if (v14)
  {
    dispatch_group_leave(v14);
    v15 = *((_QWORD *)a1 + 2);
    if (v15)
      dispatch_release(v15);
  }
  v16 = *((_QWORD *)a1 + 1);
  if (v16)
    dispatch_release(v16);
  operator delete(a1);
}

void dispatch::async<void ctu::SharedSynchronizable<ServiceManager>::execute_wrapped<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>(ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1},dispatch_queue_s *::default_delete<ServiceManager::shutdownDynamicServices(void)::$_0::operator() const(void)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(std::__shared_weak_count **a1)
{
  std::__shared_weak_count_vtbl *v1;
  NSObject *v2;
  uint64_t v3;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned int v8;
  _QWORD *v9;
  _QWORD **v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  _QWORD *v31;
  void (__cdecl *v32)(std::__shared_weak_count *__hidden);
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD **v52;
  NSObject *v53;
  std::__shared_weak_count *v54;
  _QWORD *v55;
  unint64_t *p_shared_owners;
  NSObject **v57;
  _QWORD *v58;
  _QWORD *v59;
  NSObject *v60;
  unint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  size_t v65;
  size_t v66;
  __int128 *p_dst;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  NSObject *v77;
  uint64_t v78;
  dispatch_time_t v79;
  uint64_t *shared_owners;
  uint64_t *shared_weak_owners;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  _OWORD *v86;
  __int128 v87;
  std::string *v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  std::ios_base *v92;
  _QWORD *v93;
  unint64_t v94;
  const char *v95;
  size_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  std::string *v100;
  size_t v101;
  NSObject *v102;
  NSObject *v103;
  unint64_t v104;
  const char *v105;
  uint64_t v106;
  uint8_t *v107;
  const void *v108;
  std::string::size_type v109;
  std::string *v110;
  uint64_t v111;
  uint64_t v112;
  std::string *v113;
  void **v114;
  void **v115;
  void *v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD **v119;
  void *v120;
  void (__cdecl *v121)(std::__shared_weak_count *__hidden);
  uint64_t v122;
  uint64_t v123;
  void **v124;
  void **v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  void (__cdecl *v129)(std::__shared_weak_count *__hidden);
  const void *(__cdecl *get_deleter)(const std::__shared_weak_count *__hidden, const std::type_info *);
  NSObject *v131;
  NSObject *v132;
  NSObject *v133;
  std::__shared_weak_count **v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  unsigned __int8 *v150;
  std::__shared_weak_count_vtbl *v151;
  std::string v152;
  dispatch_group_t group;
  __int128 __dst;
  unint64_t v155;
  dispatch_object_t object;
  _QWORD **v157;
  _QWORD *v158;
  uint64_t v159;
  void *__p[2];
  void *v161;
  uint8_t v162[16];
  uint8_t buf[56];
  __int128 v164;
  __int128 v165;
  __int128 v166;
  unint64_t v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v141 = *a1;
  v1 = (*a1)->__vftable;
  v2 = v1[1].~__shared_weak_count;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = ((char *)v1[3].__on_zero_shared_weak - (char *)v1[3].__get_deleter) >> 4;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v3;
    _os_log_impl(&dword_1BF566000, v2, OS_LOG_TYPE_DEFAULT, "#I Shutdown %zd dynamic services", buf, 0xCu);
  }
  atomic_store(1u, (unsigned __int8 *)&v1[4].__on_zero_shared_weak);
  v158 = 0;
  v159 = 0;
  v151 = v1;
  v157 = &v158;
  on_zero_shared_weak = v1[3].__on_zero_shared_weak;
  if (on_zero_shared_weak == (void (__cdecl *)(std::__shared_weak_count *__hidden))v1[3].__get_deleter)
    goto LABEL_191;
  while (2)
  {
    memset(buf, 170, 24);
    v5 = *((_QWORD *)on_zero_shared_weak - 2);
    on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)on_zero_shared_weak - 16);
    (*(void (**)(uint8_t *__return_ptr))(*(_QWORD *)v5 + 24))(buf);
    v6 = *(unsigned __int8 **)buf;
    v7 = *(unsigned __int8 **)&buf[8];
    v150 = *(unsigned __int8 **)&buf[8];
    if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    {
      if (*(_QWORD *)buf)
        goto LABEL_73;
      goto LABEL_5;
    }
    do
    {
      while (1)
      {
        v8 = *v6;
        v9 = v158;
        v10 = &v158;
LABEL_12:
        v11 = v10;
        if (v9)
          break;
LABEL_17:
        v13 = operator new(0x40uLL);
        v14 = v13;
        *((_BYTE *)v13 + 32) = v8;
        v13[6] = 0;
        v13[7] = 0;
        v13[5] = 0;
        *v13 = 0;
        v13[1] = 0;
        v13[2] = v10;
        *v11 = v13;
        v15 = v13;
        if (*v157)
        {
          v157 = (_QWORD **)*v157;
          v15 = (_QWORD *)*v11;
        }
        v16 = v158;
        v17 = v15 == v158;
        *((_BYTE *)v15 + 24) = v15 == v158;
        if (!v17)
        {
          do
          {
            v18 = v15[2];
            if (*(_BYTE *)(v18 + 24))
              break;
            v19 = *(_QWORD **)(v18 + 16);
            v20 = *v19;
            if (*v19 == v18)
            {
              v23 = v19[1];
              if (!v23 || (v24 = *(unsigned __int8 *)(v23 + 24), v21 = (_BYTE *)(v23 + 24), v24))
              {
                if (*(_QWORD **)v18 == v15)
                {
                  *(_BYTE *)(v18 + 24) = 1;
                  *((_BYTE *)v19 + 24) = 0;
                  v27 = *(_QWORD *)(v18 + 8);
                  *v19 = v27;
                  if (v27)
                    goto LABEL_34;
                }
                else
                {
                  v25 = *(uint64_t **)(v18 + 8);
                  v26 = *v25;
                  *(_QWORD *)(v18 + 8) = *v25;
                  if (v26)
                  {
                    *(_QWORD *)(v26 + 16) = v18;
                    v19 = *(_QWORD **)(v18 + 16);
                  }
                  v25[2] = (uint64_t)v19;
                  *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * (**(_QWORD **)(v18 + 16) != v18)) = v25;
                  *v25 = v18;
                  *(_QWORD *)(v18 + 16) = v25;
                  v19 = (_QWORD *)v25[2];
                  v18 = *v19;
                  *((_BYTE *)v25 + 24) = 1;
                  *((_BYTE *)v19 + 24) = 0;
                  v27 = *(_QWORD *)(v18 + 8);
                  *v19 = v27;
                  if (v27)
LABEL_34:
                    *(_QWORD *)(v27 + 16) = v19;
                }
                *(_QWORD *)(v18 + 16) = v19[2];
                *(_QWORD *)(v19[2] + 8 * (*(_QWORD *)v19[2] != (_QWORD)v19)) = v18;
                *(_QWORD *)(v18 + 8) = v19;
LABEL_42:
                v19[2] = v18;
                break;
              }
            }
            else if (!v20 || (v22 = *(unsigned __int8 *)(v20 + 24), v21 = (_BYTE *)(v20 + 24), v22))
            {
              if (*(_QWORD **)v18 == v15)
              {
                v51 = v15[1];
                *(_QWORD *)v18 = v51;
                if (v51)
                {
                  *(_QWORD *)(v51 + 16) = v18;
                  v19 = *(_QWORD **)(v18 + 16);
                }
                v15[2] = v19;
                *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * (**(_QWORD **)(v18 + 16) != v18)) = v15;
                v15[1] = v18;
                *(_QWORD *)(v18 + 16) = v15;
                v19 = (_QWORD *)v15[2];
                *((_BYTE *)v15 + 24) = 1;
                *((_BYTE *)v19 + 24) = 0;
                v18 = v19[1];
                v31 = *(_QWORD **)v18;
                v19[1] = *(_QWORD *)v18;
                if (v31)
LABEL_40:
                  v31[2] = v19;
              }
              else
              {
                *(_BYTE *)(v18 + 24) = 1;
                *((_BYTE *)v19 + 24) = 0;
                v18 = v19[1];
                v31 = *(_QWORD **)v18;
                v19[1] = *(_QWORD *)v18;
                if (v31)
                  goto LABEL_40;
              }
              *(_QWORD *)(v18 + 16) = v19[2];
              *(_QWORD *)(v19[2] + 8 * (*(_QWORD *)v19[2] != (_QWORD)v19)) = v18;
              *(_QWORD *)v18 = v19;
              goto LABEL_42;
            }
            *(_BYTE *)(v18 + 24) = 1;
            v15 = v19;
            *((_BYTE *)v19 + 24) = v19 == v16;
            *v21 = 1;
          }
          while (v19 != v16);
        }
        ++v159;
        v28 = *(_QWORD *)on_zero_shared_weak;
        v30 = (char *)v13[6];
        v29 = (char *)v13[7];
        if (v30 >= v29)
          goto LABEL_44;
LABEL_9:
        *(_QWORD *)v30 = v28;
        v14[6] = v30 + 8;
        if (++v6 == v7)
          goto LABEL_72;
      }
      while (1)
      {
        v10 = (_QWORD **)v9;
        v12 = *((unsigned __int8 *)v9 + 32);
        if (v8 < v12)
        {
          v9 = *v10;
          goto LABEL_12;
        }
        if (v12 >= v8)
          break;
        v9 = v10[1];
        if (!v9)
        {
          v11 = v10 + 1;
          goto LABEL_17;
        }
      }
      v14 = v10;
      v28 = *(_QWORD *)on_zero_shared_weak;
      v30 = (char *)v10[6];
      v29 = (char *)v10[7];
      if (v30 < v29)
        goto LABEL_9;
LABEL_44:
      v32 = on_zero_shared_weak;
      v33 = (char *)v14[5];
      v34 = (v30 - v33) >> 3;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 61)
        std::vector<dispatch::callback<void({block_pointer})(OBDManager::OBDState,OBDManager::TunerState)>>::__throw_length_error[abi:ne180100]();
      v36 = v29 - v33;
      if (v36 >> 2 > v35)
        v35 = v36 >> 2;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
        v37 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        if (v37 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = (char *)operator new(8 * v37);
        v39 = &v38[8 * v34];
        *(_QWORD *)v39 = v28;
        v40 = (uint64_t)(v39 + 8);
        v41 = (char *)(v30 - v33);
        if (v30 == v33)
        {
LABEL_62:
          v14[5] = v39;
          v14[6] = v40;
          v14[7] = &v38[8 * v37];
          on_zero_shared_weak = v32;
          v7 = v150;
          if (!v30)
            goto LABEL_64;
LABEL_63:
          operator delete(v30);
          goto LABEL_64;
        }
      }
      else
      {
        v38 = 0;
        v39 = (char *)(8 * v34);
        *(_QWORD *)(8 * v34) = v28;
        v40 = 8 * v34 + 8;
        v41 = (char *)(v30 - v33);
        if (v30 == v33)
          goto LABEL_62;
      }
      v42 = (unint64_t)(v41 - 8);
      if (v42 < 0x58)
        goto LABEL_236;
      if ((unint64_t)(v33 - v38) < 0x20)
        goto LABEL_236;
      v43 = (v42 >> 3) + 1;
      v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
      v45 = &v30[-v44];
      v39 -= v44;
      v46 = &v38[8 * v34 - 16];
      v47 = v30 - 16;
      v48 = v43 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v49 = *(_OWORD *)v47;
        *((_OWORD *)v46 - 1) = *((_OWORD *)v47 - 1);
        *(_OWORD *)v46 = v49;
        v46 -= 32;
        v47 -= 32;
        v48 -= 4;
      }
      while (v48);
      v30 = v45;
      if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_236:
        do
        {
          v50 = *((_QWORD *)v30 - 1);
          v30 -= 8;
          *((_QWORD *)v39 - 1) = v50;
          v39 -= 8;
        }
        while (v30 != v33);
      }
      v30 = (char *)v14[5];
      v14[5] = v39;
      v14[6] = v40;
      v14[7] = &v38[8 * v37];
      on_zero_shared_weak = v32;
      v7 = v150;
      if (v30)
        goto LABEL_63;
LABEL_64:
      v14[6] = v40;
      ++v6;
    }
    while (v6 != v7);
LABEL_72:
    v6 = *(unsigned __int8 **)buf;
    if (*(_QWORD *)buf)
    {
LABEL_73:
      *(_QWORD *)&buf[8] = v6;
      operator delete(v6);
    }
LABEL_5:
    if (on_zero_shared_weak != (void (__cdecl *)(std::__shared_weak_count *__hidden))v151[3].__get_deleter)
      continue;
    break;
  }
  v52 = v157;
  if (v157 == &v158)
    goto LABEL_191;
  v145 = *MEMORY[0x1E0DE4F60];
  v147 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v148 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v144 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v146 = MEMORY[0x1E0DE4FE0] + 64;
  v143 = MEMORY[0x1E0DE4FB8] + 16;
  while (2)
  {
    v53 = dispatch_group_create();
    v54 = (std::__shared_weak_count *)operator new(0x38uLL);
    v55 = &v54->__vftable;
    v54->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v54->__shared_owners_;
    v54->__shared_weak_owners_ = 0;
    v54->__vftable = (std::__shared_weak_count_vtbl *)off_1E7922D38;
    v54[1].__vftable = (std::__shared_weak_count_vtbl *)v53;
    v57 = (NSObject **)&v54[1];
    v149 = v54;
    if (v53)
    {
      dispatch_retain(v53);
      v55[4] = 0;
      v55[5] = 0;
      v55[6] = 0;
      dispatch_release(v53);
    }
    else
    {
      v54[1].__shared_owners_ = 0;
      v54[1].__shared_weak_owners_ = 0;
      v54[2].__vftable = 0;
    }
    v58 = v52[5];
    v59 = v52[6];
    while (2)
    {
      if (v58 != v59)
      {
        v60 = v151[1].~__shared_weak_count;
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          v61 = *((char *)v52 + 32);
          v62 = "???";
          if (v61 <= 3)
            v62 = (&off_1E7922E00)[v61];
          v63 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 16))(*v58);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v62;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v63;
          _os_log_impl(&dword_1BF566000, v60, OS_LOG_TYPE_DEFAULT, "#I Shutdown dynamic service: Stage=%s Service=%s", buf, 0x16u);
        }
        object = (dispatch_object_t)0xAAAAAAAAAAAAAAAALL;
        v64 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v58 + 16))(*v58);
        v65 = strlen(v64);
        if (v65 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        v66 = v65;
        if (v65 >= 0x17)
        {
          v68 = (v65 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v65 | 7) != 0x17)
            v68 = v65 | 7;
          v69 = v68 + 1;
          p_dst = (__int128 *)operator new(v68 + 1);
          *((_QWORD *)&__dst + 1) = v66;
          v155 = v69 | 0x8000000000000000;
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v155) = v65;
          p_dst = &__dst;
          if (!v65)
            goto LABEL_95;
        }
        memmove(p_dst, v64, v66);
LABEL_95:
        *((_BYTE *)p_dst + v66) = 0;
        *(_OWORD *)__p = __dst;
        v161 = (void *)v155;
        __dst = 0uLL;
        v155 = 0;
        memset(buf, 0, 48);
        ctu::TrackedGroup::fork(&object, (uint64_t)v57, (uint64_t)__p, (dispatch_group_t *)buf);
        if (*(_QWORD *)&buf[40] && *(_QWORD *)buf)
        {
          v152.__r_.__value_.__r.__words[0] = *(_QWORD *)&buf[8];
          *(_QWORD *)v162 = *(_QWORD *)buf;
          (*(void (**)(void))(**(_QWORD **)&buf[40] + 48))();
        }
        if (*(_QWORD *)&buf[8])
          os_release(*(void **)&buf[8]);
        v70 = *(uint8_t **)&buf[40];
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)&buf[40] = 0;
        if (v70 != &buf[16])
        {
          if (v70)
          {
            v71 = 5;
            goto LABEL_104;
          }
          *(_QWORD *)buf = 0;
          if (SHIBYTE(v161) < 0)
          {
LABEL_113:
            operator delete(__p[0]);
            v74 = *v58;
            v75 = *((unsigned __int8 *)v52 + 32);
            v76 = object;
            group = object;
            if (object)
              goto LABEL_114;
            goto LABEL_116;
          }
LABEL_110:
          v74 = *v58;
          v75 = *((unsigned __int8 *)v52 + 32);
          v76 = object;
          group = object;
          if (object)
          {
LABEL_114:
            dispatch_retain(v76);
            if (group)
              dispatch_group_enter(group);
          }
LABEL_116:
          (*(void (**)(uint64_t, uint64_t, dispatch_group_t *))(*(_QWORD *)v74 + 72))(v74, v75, &group);
          if (group)
          {
            dispatch_group_leave(group);
            if (group)
              dispatch_release(group);
          }
          if (v76)
          {
            dispatch_group_leave(v76);
            dispatch_release(v76);
          }
          ++v58;
          continue;
        }
        v70 = &buf[16];
        v71 = 4;
LABEL_104:
        (*(void (**)(void))(*(_QWORD *)v70 + 8 * v71))();
        v72 = *(uint8_t **)&buf[40];
        *(_QWORD *)buf = 0;
        if (*(uint8_t **)&buf[40] == &buf[16])
        {
          v72 = &buf[16];
          v73 = 4;
LABEL_108:
          (*(void (**)(void))(*(_QWORD *)v72 + 8 * v73))();
        }
        else if (*(_QWORD *)&buf[40])
        {
          v73 = 5;
          goto LABEL_108;
        }
        if (SHIBYTE(v161) < 0)
          goto LABEL_113;
        goto LABEL_110;
      }
      break;
    }
    v77 = *v57;
    v78 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *, _QWORD))v151->~__shared_weak_count + 15))(v151, *((unsigned __int8 *)v52 + 32));
    v79 = dispatch_time(0, 1000000000 * v78);
    if (dispatch_group_wait(v77, v79))
    {
      __p[0] = 0;
      __p[1] = 0;
      v161 = 0;
      shared_owners = (uint64_t *)v149[1].__shared_owners_;
      shared_weak_owners = (uint64_t *)v149[1].__shared_weak_owners_;
      while (shared_owners != shared_weak_owners)
      {
        v82 = (std::__shared_weak_count *)shared_owners[1];
        if (v82)
        {
          v83 = std::__shared_weak_count::lock(v82);
          if (v83)
          {
            v84 = v83;
            v85 = *shared_owners;
            if (*shared_owners)
            {
              v86 = __p[1];
              if (__p[1] >= v161)
              {
                v88 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((char **)__p, v85);
              }
              else
              {
                if (*(char *)(v85 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__p[1], *(const std::string::value_type **)v85, *(_QWORD *)(v85 + 8));
                }
                else
                {
                  v87 = *(_OWORD *)v85;
                  *((_QWORD *)__p[1] + 2) = *(_QWORD *)(v85 + 16);
                  *v86 = v87;
                }
                v88 = (std::string *)((char *)v86 + 24);
              }
              __p[1] = v88;
            }
            v89 = (unint64_t *)&v84->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
        shared_owners += 2;
      }
      *(_QWORD *)&v91 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v91 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v176 = v91;
      v177 = v91;
      v174 = v91;
      v175 = v91;
      v172 = v91;
      v173 = v91;
      v170 = v91;
      v171 = v91;
      v167 = 0xAAAAAAAAAAAAAAAALL;
      v169 = v91;
      v165 = v91;
      v166 = v91;
      *(_OWORD *)&buf[40] = v91;
      v164 = v91;
      *(_OWORD *)&buf[8] = v91;
      *(_OWORD *)&buf[24] = v91;
      v168 = v146;
      *(_QWORD *)buf = v148;
      *(_QWORD *)&buf[*(_QWORD *)(v148 - 24)] = v147;
      v92 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
      std::ios_base::init(v92, &buf[8]);
      v92[1].__vftable = 0;
      v92[1].__fmtflags_ = -1;
      *(_QWORD *)buf = MEMORY[0x1E0DE4FE0] + 24;
      v168 = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      *(_QWORD *)&buf[8] = v143;
      v165 = 0u;
      v166 = 0u;
      LODWORD(v167) = 16;
      v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"Shutdown dynamic service: Stage=", 32);
      v94 = *((char *)v52 + 32);
      v95 = "???";
      if (v94 <= 3)
        v95 = (&off_1E7922E00)[v94];
      v96 = strlen(v95);
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)v95, v96);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" TIMEOUT: ", 10);
      v98 = (_QWORD *)std::ostream::operator<<();
      v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)" clients failed to complete shutdown stage: ", 44);
      ctu::join<std::__wrap_iter<std::string *>>(&v152, (std::string *)__p[0], (__int128 *)__p[1]);
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v152;
      else
        v100 = (std::string *)v152.__r_.__value_.__r.__words[0];
      v101 = strlen((const char *)v100);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v152.__r_.__value_.__l.__data_);
        v102 = v151[1].~__shared_weak_count;
        if (!os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          goto LABEL_169;
      }
      else
      {
        v102 = v151[1].~__shared_weak_count;
        if (!os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          goto LABEL_169;
      }
      if ((v167 & 0x10) != 0)
      {
        v106 = *((_QWORD *)&v166 + 1);
        v107 = &buf[48];
        if (*((_QWORD *)&v166 + 1) < (unint64_t)v164)
        {
          *((_QWORD *)&v166 + 1) = v164;
          v106 = v164;
          v107 = &buf[48];
        }
LABEL_157:
        v108 = *(const void **)v107;
        v109 = v106 - *(_QWORD *)v107;
        if (v109 > 0x7FFFFFFFFFFFFFF7)
          std::string::__throw_length_error[abi:ne180100]();
        if (v109 >= 0x17)
        {
          v111 = (v109 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v109 | 7) != 0x17)
            v111 = v109 | 7;
          v112 = v111 + 1;
          v110 = (std::string *)operator new(v111 + 1);
          v152.__r_.__value_.__l.__size_ = v109;
          v152.__r_.__value_.__r.__words[2] = v112 | 0x8000000000000000;
          v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
        }
        else
        {
          *((_BYTE *)&v152.__r_.__value_.__s + 23) = v106 - *v107;
          v110 = &v152;
          if (!v109)
            goto LABEL_165;
        }
        memmove(v110, v108, v109);
      }
      else
      {
        if ((v167 & 8) != 0)
        {
          v106 = *(_QWORD *)&buf[40];
          v107 = &buf[24];
          goto LABEL_157;
        }
        v109 = 0;
        *((_BYTE *)&v152.__r_.__value_.__s + 23) = 0;
        v110 = &v152;
      }
LABEL_165:
      v110->__r_.__value_.__s.__data_[v109] = 0;
      v113 = &v152;
      if ((v152.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v113 = (std::string *)v152.__r_.__value_.__r.__words[0];
      *(_DWORD *)v162 = 136315138;
      *(_QWORD *)&v162[4] = v113;
      _os_log_error_impl(&dword_1BF566000, v102, OS_LOG_TYPE_ERROR, "%s", v162, 0xCu);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
LABEL_169:
      *(_QWORD *)buf = v145;
      *(_QWORD *)&buf[*(_QWORD *)(v145 - 24)] = v144;
      *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v166) < 0)
        operator delete((void *)v165);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B8C364](&v168);
      v114 = (void **)__p[0];
      if (__p[0])
      {
        v115 = (void **)__p[1];
        v116 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v115 - 1) < 0)
              operator delete(*(v115 - 3));
            v115 -= 3;
          }
          while (v115 != v114);
          v116 = __p[0];
        }
        __p[1] = v114;
        operator delete(v116);
      }
    }
    else
    {
      v103 = v151[1].~__shared_weak_count;
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        v104 = *((char *)v52 + 32);
        v105 = "???";
        if (v104 <= 3)
          v105 = (&off_1E7922E00)[v104];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v105;
        _os_log_impl(&dword_1BF566000, v103, OS_LOG_TYPE_DEFAULT, "#I Shutdown dynamic service: Stage=%s SUCCESS", buf, 0xCu);
      }
    }
    do
      v117 = __ldaxr(p_shared_owners);
    while (__stlxr(v117 - 1, p_shared_owners));
    if (v117)
    {
      v118 = v52[1];
      if (!v118)
        goto LABEL_186;
      do
      {
LABEL_184:
        v119 = (_QWORD **)v118;
        v118 = (_QWORD *)*v118;
      }
      while (v118);
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
      v118 = v52[1];
      if (v118)
        goto LABEL_184;
      do
      {
LABEL_186:
        v119 = (_QWORD **)v52[2];
        v17 = *v119 == v52;
        v52 = v119;
      }
      while (!v17);
    }
    v52 = v119;
    if (v119 != &v158)
      continue;
    break;
  }
  on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))v151[3].__get_deleter;
LABEL_191:
  if (v151[3].__on_zero_shared_weak != on_zero_shared_weak)
  {
    on_zero_shared_weak = v151[3].__on_zero_shared_weak;
    do
    {
      v121 = on_zero_shared_weak;
      v122 = *((_QWORD *)on_zero_shared_weak - 2);
      on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)on_zero_shared_weak - 16);
      memset(buf, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(buf, *(_QWORD *)(v122 + 24), *(_QWORD *)(v122 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v122 + 32) - *(_QWORD *)(v122 + 24)) >> 3));
      v123 = (uint64_t)v151[4].~__shared_weak_count_0;
      __p[1] = 0;
      v161 = 0;
      __p[0] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
      ServiceCtrl::clearCommandHandlers(v123, (uint64_t)__p[0], (uint64_t)__p[1]);
      v124 = (void **)__p[0];
      if (__p[0])
      {
        v125 = (void **)__p[1];
        v126 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            if (*((char *)v125 - 1) < 0)
              operator delete(*(v125 - 3));
            v125 -= 3;
          }
          while (v125 != v124);
          v126 = __p[0];
        }
        __p[1] = v124;
        operator delete(v126);
      }
      v127 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v128 = *(_QWORD *)&buf[8];
        v120 = *(void **)buf;
        if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        {
          do
          {
            if (*(char *)(v128 - 1) < 0)
              operator delete(*(void **)(v128 - 24));
            v128 -= 24;
          }
          while (v128 != v127);
          v120 = *(void **)buf;
        }
        *(_QWORD *)&buf[8] = v127;
        operator delete(v120);
      }
    }
    while (on_zero_shared_weak != (void (__cdecl *)(std::__shared_weak_count *__hidden))v151[3].__get_deleter);
    v129 = v151[3].__on_zero_shared_weak;
    if (v129 != on_zero_shared_weak)
    {
      do
      {
        v138 = (std::__shared_weak_count *)*((_QWORD *)v129 - 1);
        if (v138)
        {
          v139 = (unint64_t *)&v138->__shared_owners_;
          do
            v140 = __ldaxr(v139);
          while (__stlxr(v140 - 1, v139));
          if (!v140)
          {
            ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
            std::__shared_weak_count::__release_weak(v138);
          }
        }
        v17 = v129 == v121;
        v129 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v129 - 16);
      }
      while (!v17);
    }
  }
  v151[3].__on_zero_shared_weak = on_zero_shared_weak;
  get_deleter = v151[2].__get_deleter;
  *(_QWORD *)buf = operator new(0x30uLL);
  *(_OWORD *)&buf[8] = xmmword_1BF743170;
  strcpy(*(char **)buf, "com.apple.AppleBasebandManager.ServerNotReady");
  (*(void (**)(const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *), uint8_t *))(*(_QWORD *)get_deleter + 32))(get_deleter, buf);
  if ((char)buf[23] < 0)
    operator delete(*(void **)buf);
  (*(void (**)(const void *(__cdecl *)(const std::__shared_weak_count *__hidden, const std::type_info *)))(*(_QWORD *)v151[2].__get_deleter + 8))(v151[2].__get_deleter);
  v131 = v151[1].~__shared_weak_count;
  if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v152.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1BF566000, v131, OS_LOG_TYPE_DEFAULT, "#I All dynamic services have shutdown", (uint8_t *)&v152, 2u);
  }
  std::__tree<std::__value_type<ShutdownStage,std::vector<Service *>>,std::__map_value_compare<ShutdownStage,std::__value_type<ShutdownStage,std::vector<Service *>>,std::less<ShutdownStage>,true>,std::allocator<std::__value_type<ShutdownStage,std::vector<Service *>>>>::destroy(v158);
  v132 = v141->__shared_owners_;
  if (v132)
  {
    dispatch_group_leave(v132);
    v133 = v141->__shared_owners_;
    if (v133)
      dispatch_release(v133);
  }
  operator delete(v141);
  v134 = a1;
  v135 = a1[2];
  if (v135)
  {
    v136 = (unint64_t *)&v135->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
      v134 = a1;
    }
  }
  operator delete(v134);
}

void sub_1BF737AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, std::__shared_weak_count **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,dispatch_group_t group,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,_QWORD *a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,void *object,int a49,__int16 a50,char a51,char a52)
{
  NSObject *v53;
  NSObject *v54;
  std::__shared_weak_count **v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;

  if (a52 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<ShutdownStage,std::vector<Service *>>,std::__map_value_compare<ShutdownStage,std::__value_type<ShutdownStage,std::vector<Service *>>,std::less<ShutdownStage>,true>,std::allocator<std::__value_type<ShutdownStage,std::vector<Service *>>>>::destroy(a39);
  v53 = a9[1];
  if (v53)
  {
    dispatch_group_leave(v53);
    v54 = a9[1];
    if (v54)
      dispatch_release(v54);
  }
  operator delete(a9);
  v55 = a11;
  v56 = a11[2];
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(p_shared_owners);
    while (__stlxr(v58 - 1, p_shared_owners));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
      v55 = a11;
    }
  }
  operator delete(v55);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<ShutdownStage,std::vector<Service *>>,std::__map_value_compare<ShutdownStage,std::__value_type<ShutdownStage,std::vector<Service *>>,std::less<ShutdownStage>,true>,std::allocator<std::__value_type<ShutdownStage,std::vector<Service *>>>>::destroy(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    std::__tree<std::__value_type<ShutdownStage,std::vector<Service *>>,std::__map_value_compare<ShutdownStage,std::__value_type<ShutdownStage,std::vector<Service *>>,std::less<ShutdownStage>,true>,std::allocator<std::__value_type<ShutdownStage,std::vector<Service *>>>>::destroy(*a1);
    std::__tree<std::__value_type<ShutdownStage,std::vector<Service *>>,std::__map_value_compare<ShutdownStage,std::__value_type<ShutdownStage,std::vector<Service *>>,std::less<ShutdownStage>,true>,std::allocator<std::__value_type<ShutdownStage,std::vector<Service *>>>>::destroy(a1[1]);
    v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t APFSVolumeNeedsCryptoMigration()
{
  return MEMORY[0x1E0CF18B8]();
}

uint64_t APFSVolumeRole()
{
  return MEMORY[0x1E0CF18C0]();
}

void AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID)
{
  MEMORY[0x1E0C92148](*(_QWORD *)&inSystemSoundID);
}

uint64_t BBUFSServerCopyDefaultDestination()
{
  return MEMORY[0x1E0DDF128]();
}

uint64_t BBUFSServerCreate()
{
  return MEMORY[0x1E0DDF130]();
}

uint64_t BBUFSServerFlush()
{
  return MEMORY[0x1E0DDF138]();
}

uint64_t BBUFSServerFlushInProgress()
{
  return MEMORY[0x1E0DDF140]();
}

uint64_t BBUFSServerParametersInit()
{
  return MEMORY[0x1E0DDF148]();
}

uint64_t BBUFSServerRelease()
{
  return MEMORY[0x1E0DDF150]();
}

uint64_t BBUFSServerSetConfig()
{
  return MEMORY[0x1E0DDF158]();
}

uint64_t BBUFSServerStart()
{
  return MEMORY[0x1E0DDF160]();
}

uint64_t BBUFSServerStop()
{
  return MEMORY[0x1E0DDF168]();
}

uint64_t BBUpdaterExecCommand()
{
  return MEMORY[0x1E0DDF170]();
}

uint64_t BBUpdaterExtremeCreate()
{
  return MEMORY[0x1E0DDF178]();
}

uint64_t BBUpdaterRegisterGlobalLogSink()
{
  return MEMORY[0x1E0DDF180]();
}

uint64_t BBUpdaterSetOptions()
{
  return MEMORY[0x1E0DDF188]();
}

uint64_t BasebandUpdaterCreate()
{
  return MEMORY[0x1E0DDF190]();
}

uint64_t BasebandUpdaterExecCommand()
{
  return MEMORY[0x1E0DDF198]();
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x1E0C98658](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1E0C98660](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1E0C98670](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

Boolean CFRunLoopIsWaiting(CFRunLoopRef rl)
{
  return MEMORY[0x1E0C98C58](rl);
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
  MEMORY[0x1E0C98C80](rl, mode, block);
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98C90](rl, source, mode);
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C98CC8](allocator, order, context);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D00](rl);
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
  MEMORY[0x1E0C98D68](rl);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

uint64_t CacheDeleteRegisterInfoCallbacks()
{
  return MEMORY[0x1E0D09B98]();
}

uint64_t IOPMClaimSystemWakeEvent()
{
  return MEMORY[0x1E0CBB758]();
}

uint64_t KTLDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE03A0]();
}

uint64_t KTLDebugSetFlags()
{
  return MEMORY[0x1E0DE03A8]();
}

uint64_t KTLInitOptions()
{
  return MEMORY[0x1E0DE03B0]();
}

uint64_t KTLOpenChannel()
{
  return MEMORY[0x1E0DE03B8]();
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return MEMORY[0x1E0C804F8]();
}

uint64_t SBSGetScreenLockStatus()
{
  return MEMORY[0x1E0DAB728]();
}

uint64_t TelephonyBasebandCreateController()
{
  return MEMORY[0x1E0DE2F40]();
}

uint64_t TelephonyBasebandGetBasebandState()
{
  return MEMORY[0x1E0DE2F58]();
}

uint64_t TelephonyBasebandGetManagerState()
{
  return MEMORY[0x1E0DE2F60]();
}

uint64_t TelephonyBasebandGetPowerDebugOptions()
{
  return MEMORY[0x1E0DE2F68]();
}

uint64_t TelephonyBasebandGetReset()
{
  return MEMORY[0x1E0DE2F70]();
}

uint64_t TelephonyBasebandPCITransportCreate()
{
  return MEMORY[0x1E0DE2CD8]();
}

uint64_t TelephonyBasebandPCITransportInitParameters()
{
  return MEMORY[0x1E0DE2CE0]();
}

uint64_t TelephonyBasebandPowerDebugUnblock()
{
  return MEMORY[0x1E0DE2F78]();
}

uint64_t TelephonyBasebandPowerOnModem()
{
  return MEMORY[0x1E0DE2F80]();
}

uint64_t TelephonyBasebandPowercycleModem()
{
  return MEMORY[0x1E0DE2F88]();
}

uint64_t TelephonyBasebandRegisterForReset()
{
  return MEMORY[0x1E0DE2F90]();
}

uint64_t TelephonyBasebandReportThermalData()
{
  return MEMORY[0x1E0DE2F98]();
}

uint64_t TelephonyBasebandResetModem()
{
  return MEMORY[0x1E0DE2FA0]();
}

uint64_t TelephonyBasebandResetSPMI()
{
  return MEMORY[0x1E0DE2FA8]();
}

uint64_t TelephonyBasebandSetBasebandProperty()
{
  return MEMORY[0x1E0DE2FB0]();
}

uint64_t TelephonyBasebandSetBasebandState()
{
  return MEMORY[0x1E0DE2FB8]();
}

uint64_t TelephonyBasebandSetChargerDesense()
{
  return MEMORY[0x1E0DE2FC0]();
}

uint64_t TelephonyBasebandSetManagerState()
{
  return MEMORY[0x1E0DE2FC8]();
}

uint64_t TelephonyBasebandSetPowerDebugOptions()
{
  return MEMORY[0x1E0DE2FD8]();
}

uint64_t TelephonyBasebandWatchdogStart()
{
  return MEMORY[0x1E0DE3508]();
}

uint64_t TelephonyBasebandWatchdogStop()
{
  return MEMORY[0x1E0DE3510]();
}

uint64_t TelephonyUtilDebugRegisterDelegate()
{
  return MEMORY[0x1E0DE3688]();
}

uint64_t TelephonyUtilDebugSetFlags()
{
  return MEMORY[0x1E0DE3690]();
}

uint64_t TelephonyUtilGetSystemTime()
{
  return MEMORY[0x1E0DE3518]();
}

uint64_t TelephonyUtilGetSystemWakeReason()
{
  return MEMORY[0x1E0DE3520]();
}

uint64_t TelephonyUtilIsCarrierBuild()
{
  return MEMORY[0x1E0DE3528]();
}

uint64_t TelephonyUtilIsInternalBuild()
{
  return MEMORY[0x1E0DE3530]();
}

uint64_t TelephonyUtilIsVendorBuild()
{
  return MEMORY[0x1E0DE3538]();
}

uint64_t TelephonyUtilSystemMachTime()
{
  return MEMORY[0x1E0DE3540]();
}

uint64_t TelephonyUtilTransportFree()
{
  return MEMORY[0x1E0DE3708]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

uint64_t asString()
{
  return MEMORY[0x1E0DDCE80]();
}

uint64_t TelephonyXPC::Client::create()
{
  return MEMORY[0x1E0DBD860]();
}

uint64_t TelephonyXPC::Client::perform()
{
  return MEMORY[0x1E0DBD868]();
}

uint64_t TelephonyXPC::Command::create()
{
  return MEMORY[0x1E0DBD888]();
}

uint64_t capabilities::abs::shouldBoot(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FE0](this);
}

uint64_t capabilities::abs::TUDebugFlags(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FF0](this);
}

uint64_t capabilities::abs::supportsCoex(capabilities::abs *this)
{
  return MEMORY[0x1E0DE2FF8](this);
}

uint64_t capabilities::abs::getCPMSVariant(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3000](this);
}

uint64_t capabilities::abs::logScratchPath(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3008](this);
}

uint64_t capabilities::abs::logSnapshotPath(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3010](this);
}

uint64_t capabilities::abs::shouldSetRegion(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3018](this);
}

uint64_t capabilities::abs::supportsDesense(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3020](this);
}

uint64_t capabilities::abs::supportsMagSafe(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3028](this);
}

uint64_t capabilities::abs::CPMSDebounceTimer(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3048](this);
}

uint64_t capabilities::abs::supportsCoexEur5G(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3058](this);
}

uint64_t capabilities::abs::shouldIgnoreResets(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3068](this);
}

uint64_t capabilities::abs::supportsRFSelfTest(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3070](this);
}

uint64_t capabilities::abs::supportsETSProtocol(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3078](this);
}

uint64_t capabilities::abs::supportsRadioHealth(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3080](this);
}

uint64_t capabilities::abs::supportedSARFeatures(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3090](this);
}

uint64_t capabilities::abs::supportsCellularCert(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3098](this);
}

uint64_t capabilities::abs::supportsRFFEScanData(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30A0](this);
}

uint64_t capabilities::abs::supportsNetworkPolicy(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30B8](this);
}

uint64_t capabilities::abs::thermalSensorMaxCount(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30C0](this);
}

uint64_t capabilities::abs::fileSystemFlushTimeout(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30D8](this);
}

uint64_t capabilities::abs::supportsChargerDesense(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30E0](this);
}

uint64_t capabilities::abs::supportsResetSPMIEvent(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30E8](this);
}

uint64_t capabilities::abs::fileSystemFlushInterval(capabilities::abs *this)
{
  return MEMORY[0x1E0DE30F8](this);
}

uint64_t capabilities::abs::supportsAccessoryModule(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3100](this);
}

uint64_t capabilities::abs::supportsCMHandDetection(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3108](this);
}

uint64_t capabilities::abs::supportsFieldTestConfig(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3118](this);
}

uint64_t capabilities::abs::SMCThermalReportInterval(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3120](this);
}

uint64_t capabilities::abs::defaultSystemLogsHistory(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3128](this);
}

uint64_t capabilities::abs::supportsCalibrationQuery(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3138](this);
}

uint64_t capabilities::abs::supportsCoexGPSReporting(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3140](this);
}

uint64_t capabilities::abs::supportsSMCThermalReport(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3150](this);
}

uint64_t capabilities::abs::shouldForceSyncFileSystem(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3158](this);
}

uint64_t capabilities::abs::engageTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3160](this);
}

uint64_t capabilities::abs::supportsCPMSConnectedState(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3168](this);
}

uint64_t capabilities::abs::supportsCPMSGetPowerFromBB(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3170](this);
}

uint64_t capabilities::abs::supportsEFSEraseOnBootLoop(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3178](this);
}

uint64_t capabilities::abs::supportsDataTransportService(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3190](this);
}

uint64_t capabilities::abs::supportsBatteryInfoMonitoring(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31A0](this);
}

uint64_t capabilities::abs::supportsDisplayCoverAccessory(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31A8](this);
}

uint64_t capabilities::abs::ARIMessageTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31B0](this);
}

uint64_t capabilities::abs::serviceInitTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31C0](this);
}

uint64_t capabilities::abs::supportsSmartConnectorAccessory(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31C8](this);
}

uint64_t capabilities::abs::serviceSleepTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31D0](this);
}

uint64_t capabilities::abs::serviceStartTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31D8](this);
}

uint64_t capabilities::abs::resetAssertionTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31E8](this);
}

uint64_t capabilities::abs::traceTransportTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31F0](this);
}

uint64_t capabilities::abs::bootupAssertionTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE31F8](this);
}

uint64_t capabilities::abs::serviceShutdownTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3200](this);
}

uint64_t capabilities::abs::shutdownAssertionTimeoutScalingFactor(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3208](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadSize(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3210](this);
}

uint64_t capabilities::abs::shouldUseMinBasebandTransportIOReadCount(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3218](this);
}

uint64_t capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(capabilities::abs *this)
{
  return MEMORY[0x1E0DE3220](this);
}

uint64_t capabilities::abs::operator&()
{
  return MEMORY[0x1E0DE3228]();
}

uint64_t capabilities::ipc::supportsPCI(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3250](this);
}

uint64_t capabilities::ipc::defaultLogLevel(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3258](this);
}

uint64_t capabilities::ipc::supportsIPMetadataTrailer(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3270](this);
}

uint64_t capabilities::ipc::defaultMHIConfigPayloadSizeBytes(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3278](this);
}

uint64_t capabilities::ipc::defaultPCIBinaryTraceHistorySizeMB(capabilities::ipc *this)
{
  return MEMORY[0x1E0DE3280](this);
}

uint64_t capabilities::pci::controlChannelCount(capabilities::pci *this)
{
  return MEMORY[0x1E0DE3288](this);
}

uint64_t capabilities::radio::supportsMESA(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3308](this);
}

uint64_t capabilities::radio::supportsUMTS(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3310](this);
}

uint64_t capabilities::radio::supportsDeviceMaterial(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3330](this);
}

uint64_t capabilities::radio::supportsMultiClientAWD(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3340](this);
}

uint64_t capabilities::radio::personalizedFirmwarePath(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3350](this);
}

uint64_t capabilities::radio::supportsAccessoryDetection(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3358](this);
}

uint64_t capabilities::radio::supportsAutomaticRadarFiling(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3368](this);
}

uint64_t capabilities::radio::supportsFactoryCalibrationV2(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3370](this);
}

uint64_t capabilities::radio::supportsBasebandStateController(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3378](this);
}

uint64_t capabilities::radio::supportsAccessoryDetectionForARTD(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3380](this);
}

uint64_t capabilities::radio::supportsAccessoryTypeDetectionForRF(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3388](this);
}

uint64_t capabilities::radio::supportsAccessoryTypeDetectionForARTD(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3390](this);
}

uint64_t capabilities::radio::ice(capabilities::radio *this)
{
  return MEMORY[0x1E0DE3398](this);
}

uint64_t capabilities::radio::vendor(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33A0](this);
}

uint64_t capabilities::radio::product(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33A8](this);
}

uint64_t capabilities::radio::maverick(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33B0](this);
}

uint64_t capabilities::radio::C2KDevice(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33B8](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33C0](this);
}

uint64_t capabilities::radio::radioType(capabilities::radio *this)
{
  return MEMORY[0x1E0DE33D0](this);
}

uint64_t capabilities::trace::enabledByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33D8](this);
}

uint64_t capabilities::trace::getCompressionMode(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33E0](this);
}

uint64_t capabilities::trace::defaultFileSizeBytes(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33E8](this);
}

uint64_t capabilities::trace::defaultHistorySizeMB(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33F0](this);
}

uint64_t capabilities::trace::defaultSleepTraceMode(capabilities::trace *this)
{
  return MEMORY[0x1E0DE33F8](this);
}

uint64_t capabilities::trace::defaultMemoryFileMaxCount(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3418](this);
}

uint64_t capabilities::trace::supportsDumpLogIndication(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3420](this);
}

uint64_t capabilities::trace::supportsHighTPutByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3428](this);
}

uint64_t capabilities::trace::supportsDataLoggingByDefault(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3430](this);
}

uint64_t capabilities::trace::supportsDuplicateSignatureDetection(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3440](this);
}

uint64_t capabilities::trace::allowed(capabilities::trace *this)
{
  return MEMORY[0x1E0DE3450](this);
}

uint64_t capabilities::txpower::supportsPPM(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3460](this);
}

uint64_t capabilities::txpower::timeoutConfig(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3468](this);
}

uint64_t capabilities::txpower::supportsMotion(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3470](this);
}

uint64_t capabilities::txpower::supportedFaceID(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3478](this);
}

uint64_t capabilities::txpower::supportsKeyboard(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3480](this);
}

uint64_t capabilities::txpower::supportsFrontCamera(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3488](this);
}

uint64_t capabilities::txpower::supportsAudioSpeaker(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3490](this);
}

uint64_t capabilities::txpower::supportsMotionAlways(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE3498](this);
}

uint64_t capabilities::txpower::supportedControlInput(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34A0](this);
}

uint64_t capabilities::txpower::supportsAudioJackReport(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34A8](this);
}

uint64_t capabilities::txpower::supportsPowerChargerDesense(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34B0](this);
}

uint64_t capabilities::txpower::supportsPowerSourceDetection(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34B8](this);
}

uint64_t capabilities::txpower::supportsVideoAntennaSwitching(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34C0](this);
}

uint64_t capabilities::txpower::supportsAntennaFreeSpaceConfig(capabilities::txpower *this)
{
  return MEMORY[0x1E0DE34C8](this);
}

uint64_t capabilities::txpower::operator&()
{
  return MEMORY[0x1E0DE34D0]();
}

uint64_t capabilities::coredump::supportsGPIOSignalling(capabilities::coredump *this)
{
  return MEMORY[0x1E0DE34E8](this);
}

uint64_t capabilities::coredump::supportsSPMISignalling(capabilities::coredump *this)
{
  return MEMORY[0x1E0DE34F0](this);
}

uint64_t capabilities::coredump::recoveryForControlMessageTimeout(capabilities::coredump *this)
{
  return MEMORY[0x1E0DE34F8](this);
}

uint64_t capabilities::coredump::operator&()
{
  return MEMORY[0x1E0DE3500]();
}

uint64_t AppleSARHelper::callUserClientMethod(AppleSARHelper *this, uint64_t a2, const unint64_t *a3, uint64_t a4, const void *a5, uint64_t a6, unint64_t *a7, unsigned int *a8, void *a9, unint64_t a10)
{
  return MEMORY[0x1E0CFE158](this, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t AppleSARHelper::create_default_global(AppleSARHelper *this)
{
  return MEMORY[0x1E0CFE160](this);
}

uint64_t AppleSARHelper::registerSARServiceCallback()
{
  return MEMORY[0x1E0CFE168]();
}

uint64_t AppleBasebandManager::setEventHandler()
{
  return MEMORY[0x1E0CFAEE8]();
}

uint64_t AppleBasebandManager::create()
{
  return MEMORY[0x1E0CFAEF0]();
}

uint64_t AppleBasebandManager::perform()
{
  return MEMORY[0x1E0CFAEF8]();
}

uint64_t AppleBasebandManager::eventsOn(AppleBasebandManager *this)
{
  return MEMORY[0x1E0CFAF00](this);
}

uint64_t CommandDriverFactory::setRegistry()
{
  return MEMORY[0x1E0DDF1A8]();
}

uint64_t CommandDriverFactory::create_default_global(CommandDriverFactory *this)
{
  return MEMORY[0x1E0DDF1B0](this);
}

void wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  MEMORY[0x1E0DE8210](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8230](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x1E0DE8238](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x1E0DE8240](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8270](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1E0DE8278](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE8298](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1E0DE82B8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage()
{
  return MEMORY[0x1E0DE82E0]();
}

void wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage(wireless_diagnostics::google::protobuf::internal::LogMessage *this)
{
  MEMORY[0x1E0DE82E8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<()
{
  return MEMORY[0x1E0DE82F0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::OnShutdown(wireless_diagnostics::google::protobuf::internal *this, void (*a2)(void))
{
  return MEMORY[0x1E0DE82F8](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=()
{
  return MEMORY[0x1E0DE8300]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::VerifyVersion(wireless_diagnostics::google::protobuf::internal *this, uint64_t a2, uint64_t a3, const char *a4)
{
  return MEMORY[0x1E0DE8340](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString()
{
  return MEMORY[0x1E0DE8348]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString()
{
  return MEMORY[0x1E0DE8380]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8388](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE8390](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, const wireless_diagnostics::google::protobuf::MessageLite *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83A8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  return MEMORY[0x1E0DE83C0](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1E0DE83C8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap()
{
  return MEMORY[0x1E0DE83E0]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  return MEMORY[0x1E0DE83E8](this);
}

uint64_t ApplePDPHelperInterface::getInstance(ApplePDPHelperInterface *this)
{
  return MEMORY[0x1E0CFE0C0](this);
}

uint64_t ApplePDPHelperInterface::enableMetadataTrailer(ApplePDPHelperInterface *this, uint64_t a2, BOOL *a3)
{
  return MEMORY[0x1E0CFE0C8](this, a2, a3);
}

uint64_t ApplePDPHelperInterface::enableLowPowerPDPThrottle(ApplePDPHelperInterface *this)
{
  return MEMORY[0x1E0CFE0D0](this);
}

uint64_t ApplePDPHelperInterface::activateLowPowerPDPThrottle(ApplePDPHelperInterface *this)
{
  return MEMORY[0x1E0CFE0D8](this);
}

uint64_t ApplePDPHelperInterface::getNumLowPowerPDPThrottleStats()
{
  return MEMORY[0x1E0CFE0E0]();
}

uint64_t Ari::MsgDefById(Ari *this)
{
  return MEMORY[0x1E0DDCB00](this);
}

uint64_t Ari::LogConfigRt()
{
  return MEMORY[0x1E0DDCE88]();
}

uint64_t Ari::MsgNameById(Ari *this)
{
  return MEMORY[0x1E0DDCB08](this);
}

uint64_t Ari::GetLogLevels(Ari *this)
{
  return MEMORY[0x1E0DDCB10](this);
}

uint64_t Ari::LogConfig(Ari *this, uint64_t a2, void (*a3)(unsigned int, const char *))
{
  return MEMORY[0x1E0DDCB20](this, a2, a3);
}

uint64_t abm::HelperClient::registerForHelperReady()
{
  return MEMORY[0x1E0CF0FD8]();
}

uint64_t abm::HelperClient::create()
{
  return MEMORY[0x1E0CF0FE0]();
}

uint64_t abm::HelperClient::perform()
{
  return MEMORY[0x1E0CF0FE8]();
}

{
  return MEMORY[0x1E0CF0FF0]();
}

uint64_t abm::AccessoryInfo::create()
{
  return MEMORY[0x1E0CFAFC8]();
}

uint64_t abm::AccessorySimulate::create()
{
  return MEMORY[0x1E0CFB1A0]();
}

uint64_t abm::AccessorySimulate::create(abm::AccessorySimulate *this)
{
  return MEMORY[0x1E0CFB1A8](this);
}

uint64_t abm::AccessorySimulate::toDict(abm::AccessorySimulate *this)
{
  return MEMORY[0x1E0CFB1B0](this);
}

uint64_t abm::trace::isSupported()
{
  return MEMORY[0x1E0D01A08]();
}

uint64_t abm::client::Command::create()
{
  return MEMORY[0x1E0CFC178]();
}

uint64_t abm::helper::asEnum(abm::helper *this, const char *a2)
{
  return MEMORY[0x1E0CF11C0](this, a2);
}

uint64_t abm::helper::asString()
{
  return MEMORY[0x1E0CF11C8]();
}

{
  return MEMORY[0x1E0CF11D0]();
}

{
  return MEMORY[0x1E0CF11D8]();
}

{
  return MEMORY[0x1E0CF11E0]();
}

uint64_t abm::asString()
{
  return MEMORY[0x1E0CFC1A0]();
}

{
  return MEMORY[0x1E0CFC1A8]();
}

{
  return MEMORY[0x1E0CFC1B0]();
}

{
  return MEMORY[0x1E0CFC1B8]();
}

{
  return MEMORY[0x1E0CFC1C0]();
}

{
  return MEMORY[0x1E0CFC1C8]();
}

{
  return MEMORY[0x1E0CFC1D0]();
}

{
  return MEMORY[0x1E0CFC1D8]();
}

{
  return MEMORY[0x1E0CFC1E0]();
}

{
  return MEMORY[0x1E0CFC1E8]();
}

uint64_t awd::AppContext::setHandler()
{
  return MEMORY[0x1E0DDF1C0]();
}

{
  return MEMORY[0x1E0DDF1C8]();
}

{
  return MEMORY[0x1E0DDF1D0]();
}

uint64_t awd::AppContext::setProperties()
{
  return MEMORY[0x1E0DDF1D8]();
}

uint64_t awd::AwdCommandDriver::checkIn()
{
  return MEMORY[0x1E0DDF1E0]();
}

uint64_t awd::asString()
{
  return MEMORY[0x1E0DDF1F8]();
}

{
  return MEMORY[0x1E0DDF208]();
}

uint64_t ctu::LogMessage::LogMessage()
{
  return MEMORY[0x1E0DE3718]();
}

uint64_t ctu::LoggerBase<std::shared_ptr<ctu::LogServer>>::~LoggerBase()
{
  return MEMORY[0x1E0DE3720]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3730](this, a2, a3);
}

uint64_t ctu::OsLogLogger::OsLogLogger()
{
  return MEMORY[0x1E0DE3738]();
}

uint64_t ctu::OsLogLogger::OsLogLogger(ctu::OsLogLogger *this, const ctu::OsLogLogger *a2)
{
  return MEMORY[0x1E0DE3740](this, a2);
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
  MEMORY[0x1E0DE3748](this);
}

uint64_t ctu::OsLogContext::OsLogContext()
{
  return MEMORY[0x1E0DE3750]();
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x1E0DE3758](this, a2, a3);
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const ctu::OsLogContext *a2)
{
  return MEMORY[0x1E0DE3760](this, a2);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
  MEMORY[0x1E0DE3768](this);
}

uint64_t ctu::OsLogContext::operator=()
{
  return MEMORY[0x1E0DE3770]();
}

uint64_t ctu::StaticLogger::StaticLogger()
{
  return MEMORY[0x1E0DE3778]();
}

uint64_t ctu::StaticLogger::StaticLogger(ctu::StaticLogger *this)
{
  return MEMORY[0x1E0DE3780](this);
}

void ctu::StaticLogger::~StaticLogger(ctu::StaticLogger *this)
{
  MEMORY[0x1E0DE3788](this);
}

uint64_t ctu::TrackedLogger::registerLoggerToServer()
{
  return MEMORY[0x1E0DE3790]();
}

uint64_t ctu::split_any_copy()
{
  return MEMORY[0x1E0DE37A0]();
}

uint64_t ctu::LogMessageBuffer::takeString(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37D8](this);
}

uint64_t ctu::LogMessageBuffer::takeMetadata(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37E0](this);
}

uint64_t ctu::LogMessageBuffer::vprintf(ctu::LogMessageBuffer *this, const char *a2, char *a3)
{
  return MEMORY[0x1E0DE37F0](this, a2, a3);
}

uint64_t ctu::LogMessageBuffer::LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  return MEMORY[0x1E0DE37F8](this);
}

void ctu::LogMessageBuffer::~LogMessageBuffer(ctu::LogMessageBuffer *this)
{
  MEMORY[0x1E0DE3800](this);
}

uint64_t ctu::LoggerCommonBase::setLogLevel()
{
  return MEMORY[0x1E0DE3810]();
}

uint64_t ctu::LoggerCommonBase::setInheritedLogLevel()
{
  return MEMORY[0x1E0DE3818]();
}

uint64_t ctu::LoggerCommonBase::LoggerCommonBase()
{
  return MEMORY[0x1E0DE3820]();
}

{
  return MEMORY[0x1E0DE3828]();
}

uint64_t ctu::LoggerCommonBase::operator=()
{
  return MEMORY[0x1E0DE3830]();
}

uint64_t ctu::XpcJetsamAssertion::createActivity()
{
  return MEMORY[0x1E0DE3840]();
}

uint64_t ctu::XpcJetsamAssertion::create_default_global(ctu::XpcJetsamAssertion *this)
{
  return MEMORY[0x1E0DE3848](this);
}

uint64_t ctu::DispatchTimerService::create()
{
  return MEMORY[0x1E0DE3850]();
}

uint64_t ctu::cf::MakeCFString::MakeCFString(ctu::cf::MakeCFString *this, const char *a2)
{
  return MEMORY[0x1E0DE3858](this, a2);
}

void ctu::cf::MakeCFString::~MakeCFString(ctu::cf::MakeCFString *this)
{
  MEMORY[0x1E0DE3860](this);
}

uint64_t ctu::cf::convert_copy(ctu::cf *this, const __CFString **a2, const char *a3, uint64_t a4, const __CFAllocator *a5)
{
  return MEMORY[0x1E0DE3868](this, a2, a3, a4, a5);
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x1E0DE3870]();
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const __CFDictionary *a2)
{
  return MEMORY[0x1E0DE3880](this, a2);
}

uint64_t ctu::cf::dict_adapter::dict_adapter(ctu::cf::dict_adapter *this, const ctu::cf::dict_adapter *a2)
{
  return MEMORY[0x1E0DE3888](this, a2);
}

void ctu::cf::dict_adapter::~dict_adapter(ctu::cf::dict_adapter *this)
{
  MEMORY[0x1E0DE3890](this);
}

uint64_t ctu::cf::plist_adapter::plist_adapter(ctu::cf::plist_adapter *this, const __CFString *a2, const __CFString *a3)
{
  return MEMORY[0x1E0DE3898](this, a2, a3);
}

void ctu::cf::plist_adapter::~plist_adapter(ctu::cf::plist_adapter *this)
{
  MEMORY[0x1E0DE38A0](this);
}

uint64_t ctu::cf::show(ctu::cf *this, const void *a2)
{
  return MEMORY[0x1E0DE38A8](this, a2);
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x1E0DE38B0]();
}

{
  return MEMORY[0x1E0DE38B8]();
}

{
  return MEMORY[0x1E0DE38C0]();
}

uint64_t ctu::cf::assign(ctu::cf *this, signed __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38D0](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, BOOL *a2, const __CFBoolean *a3)
{
  return MEMORY[0x1E0DE38D8](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38F0](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE38F8](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, uint64_t *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE3900](this, a2, a3);
}

{
  return MEMORY[0x1E0DE3918](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int16 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1E0DE3910](this, a2, a3);
}

uint64_t ctu::fs::remove_dir()
{
  return MEMORY[0x1E0DE3920]();
}

uint64_t ctu::fs::file_exists()
{
  return MEMORY[0x1E0DE3928]();
}

uint64_t ctu::fs::is_directory()
{
  return MEMORY[0x1E0DE3938]();
}

uint64_t ctu::fs::get_file_size()
{
  return MEMORY[0x1E0DE3940]();
}

uint64_t ctu::fs::create_directory()
{
  return MEMORY[0x1E0DE3948]();
}

uint64_t ctu::fs::get_filtered_files()
{
  return MEMORY[0x1E0DE3950]();
}

uint64_t ctu::fs::get_unique_filename()
{
  return MEMORY[0x1E0DE3958]();
}

uint64_t ctu::fs::rename()
{
  return MEMORY[0x1E0DE3970]();
}

uint64_t ctu::Clock::now_in_nanoseconds(ctu::Clock *this)
{
  return MEMORY[0x1E0DE39A8](this);
}

uint64_t ctu::iokit::Controller::setMesaQuality()
{
  return MEMORY[0x1E0DE3548]();
}

uint64_t ctu::iokit::Controller::setMesaCallback()
{
  return MEMORY[0x1E0DE3550]();
}

uint64_t ctu::iokit::Controller::queryPowerSource(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE3558](this);
}

uint64_t ctu::iokit::Controller::setFaceIDCallback()
{
  return MEMORY[0x1E0DE3560]();
}

uint64_t ctu::iokit::Controller::acquireMesaService(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE3568](this);
}

uint64_t ctu::iokit::Controller::setDisplayCallback()
{
  return MEMORY[0x1E0DE3570]();
}

uint64_t ctu::iokit::Controller::setupCameraService(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE3578](this);
}

uint64_t ctu::iokit::Controller::setAccessoryCallback()
{
  return MEMORY[0x1E0DE3580]();
}

uint64_t ctu::iokit::Controller::setFrontCameraCallback()
{
  return MEMORY[0x1E0DE3588]();
}

uint64_t ctu::iokit::Controller::setPowerSourceCallback()
{
  return MEMORY[0x1E0DE3590]();
}

uint64_t ctu::iokit::Controller::registerForBatteryInfoChange()
{
  return MEMORY[0x1E0DE3598]();
}

uint64_t ctu::iokit::Controller::stopBatteryInfoNotifications(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE35A0](this);
}

uint64_t ctu::iokit::Controller::stopPowerSourceNotifications(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE35A8](this);
}

uint64_t ctu::iokit::Controller::getAccessoryPrimaryPortNumber(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE35B0](this);
}

uint64_t ctu::iokit::Controller::stopDisplayCoverStateNotifications(ctu::iokit::Controller *this)
{
  return MEMORY[0x1E0DE35B8](this);
}

uint64_t ctu::iokit::Controller::registerForDisplayCoverStateChanged()
{
  return MEMORY[0x1E0DE35C0]();
}

uint64_t ctu::iokit::Controller::create()
{
  return MEMORY[0x1E0DE35C8]();
}

uint64_t ctu::iokit::IOHIDController::isProxCovered(ctu::iokit::IOHIDController *this)
{
  return MEMORY[0x1E0DE35D0](this);
}

uint64_t ctu::iokit::IOHIDController::queryHIDEventTrigger(ctu::iokit::IOHIDController *this)
{
  return MEMORY[0x1E0DE35D8](this);
}

uint64_t ctu::iokit::IOHIDController::registerProxCallback()
{
  return MEMORY[0x1E0DE35E0]();
}

uint64_t ctu::iokit::IOHIDController::registerKeyboardCallback()
{
  return MEMORY[0x1E0DE35E8]();
}

uint64_t ctu::iokit::IOHIDController::stop(ctu::iokit::IOHIDController *this)
{
  return MEMORY[0x1E0DE35F0](this);
}

uint64_t ctu::iokit::IOHIDController::start(ctu::iokit::IOHIDController *this)
{
  return MEMORY[0x1E0DE35F8](this);
}

uint64_t ctu::iokit::IOHIDController::create()
{
  return MEMORY[0x1E0DE3600]();
}

uint64_t ctu::iokit::IOPortUSBCController::registerCallback()
{
  return MEMORY[0x1E0DE3608]();
}

uint64_t ctu::iokit::IOPortUSBCController::create(ctu::iokit::IOPortUSBCController *this, queue a2, const char *a3, const char *a4)
{
  return MEMORY[0x1E0DE3610](this, a2.fObj.fObj, a3, a4);
}

uint64_t ctu::iokit::IOPortUSBCController::asString()
{
  return MEMORY[0x1E0DE3618]();
}

uint64_t ctu::iokit::asString()
{
  return MEMORY[0x1E0DE3620]();
}

{
  return MEMORY[0x1E0DE3628]();
}

{
  return MEMORY[0x1E0DE3630]();
}

{
  return MEMORY[0x1E0DE3638]();
}

uint64_t ctu::iokit::operator&()
{
  return MEMORY[0x1E0DE3640]();
}

uint64_t ctu::power::manager::registerListener()
{
  return MEMORY[0x1E0DE3648]();
}

uint64_t ctu::power::manager::get(ctu::power::manager *this)
{
  return MEMORY[0x1E0DE3650](this);
}

uint64_t ctu::power::manager::asCString(ctu::power::manager *this)
{
  return MEMORY[0x1E0DE3658](this);
}

uint64_t ctu::power::assertion::createInternal()
{
  return MEMORY[0x1E0DE3660]();
}

uint64_t ctu::power::assertion::assertion(ctu::power::assertion *this)
{
  return MEMORY[0x1E0DE3668](this);
}

uint64_t ctu::asChar()
{
  return MEMORY[0x1E0DE39B0]();
}

uint64_t ctu::assign()
{
  return MEMORY[0x1E0DE39B8]();
}

uint64_t ctu::Gestalt::create_default_global(ctu::Gestalt *this)
{
  return MEMORY[0x1E0DE39C0](this);
}

uint64_t ctu::tokenize()
{
  return MEMORY[0x1E0DE39C8]();
}

uint64_t ctu::LogServer::setEnabled(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE39D0](this);
}

uint64_t ctu::LogServer::updateConfig()
{
  return MEMORY[0x1E0DE39D8]();
}

uint64_t ctu::LogServer::log()
{
  return MEMORY[0x1E0DE39E0]();
}

uint64_t ctu::LogServer::start(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE39E8](this);
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x1E0DE39F0]();
}

uint64_t ctu::LogServer::addWriter()
{
  return MEMORY[0x1E0DE39F8]();
}

uint64_t ctu::XpcClient::setServer_sync()
{
  return MEMORY[0x1E0DE3A00]();
}

uint64_t ctu::XpcClient::XpcClient()
{
  return MEMORY[0x1E0DE3A08]();
}

void ctu::XpcClient::~XpcClient(ctu::XpcClient *this)
{
  MEMORY[0x1E0DE3A18](this);
}

uint64_t ctu::XpcServer::setListener_sync()
{
  return MEMORY[0x1E0DE3A20]();
}

uint64_t ctu::XpcServer::startListener_sync(ctu::XpcServer *this)
{
  return MEMORY[0x1E0DE3A28](this);
}

uint64_t ctu::XpcServer::XpcServer()
{
  return MEMORY[0x1E0DE3A30]();
}

void ctu::XpcServer::~XpcServer(ctu::XpcServer *this)
{
  MEMORY[0x1E0DE3A38](this);
}

uint64_t ctu::cf_to_xpc(ctu *this, const void *a2)
{
  return MEMORY[0x1E0DE3A40](this, a2);
}

uint64_t ctu::xpc_to_cf(ctu *this, void *a2)
{
  return MEMORY[0x1E0DE3A48](this, a2);
}

uint64_t ctu::operator<<()
{
  return MEMORY[0x1E0DE3A50]();
}

{
  return MEMORY[0x1E0DE3A58]();
}

{
  return MEMORY[0x1E0DE3A60]();
}

{
  return MEMORY[0x1E0DE3A68]();
}

uint64_t pci::event::Listener::create()
{
  return MEMORY[0x1E0DE2CE8]();
}

uint64_t sar::toStringAccessory(sar *this)
{
  return MEMORY[0x1E0CFE170](this);
}

uint64_t wis::MetricFactory::getSharedMetricFactory(wis::MetricFactory *this)
{
  return MEMORY[0x1E0DD9B10](this);
}

uint64_t wis::MetricFactory::newMetricContainerWithIdentifier(wis::MetricFactory *this)
{
  return MEMORY[0x1E0DD9B18](this);
}

uint64_t wis::MetricContainer::storeMetric(wis::MetricContainer *this, uint64_t a2, uint64_t a3, const wireless_diagnostics::google::protobuf::MessageLite *a4)
{
  return MEMORY[0x1E0DD9B20](this, a2, a3, a4);
}

void wis::MetricContainer::~MetricContainer(wis::MetricContainer *this)
{
  MEMORY[0x1E0DD9B28](this);
}

uint64_t wis::getWISTimestamp(wis *this)
{
  return MEMORY[0x1E0DD9B30](this);
}

uint64_t wis::WISServerConnection::SubmitMetric(wis::WISServerConnection *this, wis::MetricContainer *a2)
{
  return MEMORY[0x1E0DD9B38](this, a2);
}

uint64_t wis::WISServerConnection::RegisterCallbackForTimer()
{
  return MEMORY[0x1E0DD9B40]();
}

uint64_t wis::WISServerConnection::RegisterQueriableMetricCallbackForIdentifier()
{
  return MEMORY[0x1E0DD9B48]();
}

uint64_t wis::WISServerConnection::WISServerConnection(wis::WISServerConnection *this)
{
  return MEMORY[0x1E0DD9B50](this);
}

void wis::WISServerConnection::~WISServerConnection(wis::WISServerConnection *this)
{
  MEMORY[0x1E0DD9B58](this);
}

uint64_t xpc::dyn_cast_or_default(xpc *this, const object *a2, const char *a3)
{
  return MEMORY[0x1E0DE3A78](this, a2, a3);
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1E0DE3A80]();
}

{
  return MEMORY[0x1E0DE3A88]();
}

uint64_t xpc::dyn_cast_or_default(xpc *this, const object *a2)
{
  return MEMORY[0x1E0DE3A90](this, a2);
}

{
  return MEMORY[0x1E0DE3AA0](this, a2);
}

{
  return MEMORY[0x1E0DE3AA8](this, a2);
}

{
  return MEMORY[0x1E0DE3AB0](this, a2);
}

{
  return MEMORY[0x1E0DE3AB8](this, a2);
}

{
  return MEMORY[0x1E0DE3AC0](this, a2);
}

uint64_t xpc::dyn_cast_or_default(xpc *this, const object *a2, double a3)
{
  return MEMORY[0x1E0DE3A98](this, a2, a3);
}

uint64_t xpc::bridge(xpc *this, const object *a2)
{
  return MEMORY[0x1E0DE3AC8](this, a2);
}

uint64_t diag::config::asEnum()
{
  return MEMORY[0x1E0CF1228]();
}

uint64_t util::writeJSON()
{
  return MEMORY[0x1E0D01AB0]();
}

uint64_t radio::asStringV2()
{
  return MEMORY[0x1E0DDF760]();
}

uint64_t radio::CommandDriver::watchClientState()
{
  return MEMORY[0x1E0DDF7B0]();
}

uint64_t radio::CommandDriver::watchOperatingMode()
{
  return MEMORY[0x1E0DDF7D8]();
}

uint64_t radio::RFCalibration_t::fill()
{
  return MEMORY[0x1E0DDF8E8]();
}

uint64_t radio::RFCalibration_t::toString(radio::RFCalibration_t *this)
{
  return MEMORY[0x1E0DDF8F0](this);
}

uint64_t radio::RFCalibration_t::RFCalibration_t(radio::RFCalibration_t *this)
{
  return MEMORY[0x1E0DDF8F8](this);
}

uint64_t radio::BasebandProperties::create()
{
  return MEMORY[0x1E0DDF948]();
}

uint64_t radio::HealthCommandDriver::LinkStats::LinkStats(radio::HealthCommandDriver::LinkStats *this)
{
  return MEMORY[0x1E0DDF970](this);
}

uint64_t radio::asString()
{
  return MEMORY[0x1E0DDFA58]();
}

{
  return MEMORY[0x1E0DDFA60]();
}

uint64_t trace::toString()
{
  return MEMORY[0x1E0D01AF0]();
}

uint64_t AriMsg::GetBufGmid(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0DDCB28](this, a2);
}

uint64_t AriMsg::GetBufMsgSz(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0DDCB30](this, a2);
}

uint64_t AriMsg::GetBufCtx(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1E0DDCB38](this, a2);
}

uint64_t AriMsg::GetBufSeq(AriMsg *this, const unsigned __int8 *a2, uint64_t a3, unsigned int *a4)
{
  return MEMORY[0x1E0DDCB40](this, a2, a3, a4);
}

uint64_t AriHost::StartStream()
{
  return MEMORY[0x1E0DDCE30]();
}

uint64_t AriHost::RegisterClient(AriHost *this, const char *a2, int *a3, dispatch_queue_s *a4)
{
  return MEMORY[0x1E0DDCE40](this, a2, a3, a4);
}

uint64_t AriHost::DeregisterClient(AriHost *this)
{
  return MEMORY[0x1E0DDCE48](this);
}

uint64_t AriHost::ReRegisterClient()
{
  return MEMORY[0x1E0DDCE50]();
}

uint64_t AriHost::SetRTEventHandler()
{
  return MEMORY[0x1E0DDCE58]();
}

uint64_t AriHost::Send()
{
  return MEMORY[0x1E0DDCE68]();
}

uint64_t AriHost::EndStream(AriHost *this)
{
  return MEMORY[0x1E0DDCE70](this);
}

void Factory::Factory(Factory *this)
{
  MEMORY[0x1E0DDFD48](this);
}

void Factory::~Factory(Factory *this)
{
  MEMORY[0x1E0DDFD50](this);
}

uint64_t antenna::CommandDriver::registerHandler()
{
  return MEMORY[0x1E0DDFA78]();
}

void antenna::AntennaCommandDriverDelegateInterface::~AntennaCommandDriverDelegateInterface(antenna::AntennaCommandDriverDelegateInterface *this)
{
  MEMORY[0x1E0DDFBF0](this);
}

void Registry::Registry(Registry *this)
{
  MEMORY[0x1E0DDFD60](this);
}

uint64_t AriHostRt::CancelAllTransactions(AriHostRt *this)
{
  return MEMORY[0x1E0DDCE90](this);
}

uint64_t AriHostRt::RegisterEntitlementChecker()
{
  return MEMORY[0x1E0DDCE98]();
}

uint64_t AriHostRt::RegisterBasebandResetDelegate()
{
  return MEMORY[0x1E0DDCEA0]();
}

uint64_t AriHostRt::Init()
{
  return MEMORY[0x1E0DDCEA8]();
}

uint64_t AriHostRt::Init(AriHostRt *this, const char *a2)
{
  return MEMORY[0x1E0DDCEB0](this, a2);
}

uint64_t AriHostRt::Shutdown(AriHostRt *this)
{
  return MEMORY[0x1E0DDCEB8](this);
}

uint64_t AriHostRt::DumpState(AriHostRt *this)
{
  return MEMORY[0x1E0DDCEC0](this);
}

uint64_t AriHostRt::SetOPMode()
{
  return MEMORY[0x1E0DDCEC8]();
}

uint64_t HSFilerRT::basebandReadyEventHandler(HSFilerRT *this)
{
  return MEMORY[0x1E0DE0168](this);
}

uint64_t HSFilerRT::basebandResetEventHandler(HSFilerRT *this)
{
  return MEMORY[0x1E0DE0170](this);
}

uint64_t HSFilerRT::registerBasebandResetDelegate()
{
  return MEMORY[0x1E0DE0178]();
}

uint64_t HSFilerRT::dumpState(HSFilerRT *this)
{
  return MEMORY[0x1E0DE0180](this);
}

uint64_t abm::client::Event::name(abm::client::Event *this)
{
  return MEMORY[0x1E0CFC250](this);
}

uint64_t abm::client::Event::getData(abm::client::Event *this)
{
  return MEMORY[0x1E0CFC258](this);
}

uint64_t awd::AppContext::getProperties(awd::AppContext *this)
{
  return MEMORY[0x1E0DDFC60](this);
}

uint64_t awd::AppContext::getAppID(awd::AppContext *this)
{
  return MEMORY[0x1E0DDFC68](this);
}

uint64_t ctu::LoggerCommonBase::getLogDomain(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1E0DE3AD8](this);
}

uint64_t ctu::LoggerCommonBase::getLocalLogLevel(ctu::LoggerCommonBase *this)
{
  return MEMORY[0x1E0DE3AE0](this);
}

uint64_t ctu::cf::map_adapter::copyCFDataRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3AE8](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFArrayRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3AF0](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFNumberRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3AF8](this, a2);
}

uint64_t ctu::cf::map_adapter::copyCFDictionaryRef(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B00](this, a2);
}

uint64_t ctu::cf::map_adapter::getInt(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B08](this, a2);
}

uint64_t ctu::cf::map_adapter::getBool(ctu::cf::map_adapter *this, const __CFString *a2)
{
  return MEMORY[0x1E0DE3B10](this, a2);
}

uint64_t ctu::cf::map_adapter::getDouble(ctu::cf::map_adapter *this, const __CFString *a2, double a3)
{
  return MEMORY[0x1E0DE3B18](this, a2, a3);
}

uint64_t ctu::cf::map_adapter::getString()
{
  return MEMORY[0x1E0DE3B20]();
}

uint64_t ctu::LogServer::getConfig(ctu::LogServer *this)
{
  return MEMORY[0x1E0DE3B38](this);
}

uint64_t ctu::XpcServer::getListener_sync(ctu::XpcServer *this)
{
  return MEMORY[0x1E0DE3B40](this);
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x1E0DE3B48](this);
}

uint64_t Registry::getRegistryModel(Registry *this)
{
  return MEMORY[0x1E0DDFD68](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4298](this, a2);
}

void std::length_error::~length_error(std::length_error *this)
{
  MEMORY[0x1E0DE42D0](this);
}

{
  MEMORY[0x1E0DE42D8](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1E0DE4598]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1E0DE45C8]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E8]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4710]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4730]();
}

{
  return MEMORY[0x1E0DE4738]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

uint64_t std::stol(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A80](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4AC8](__str, __idx, *(_QWORD *)&__base);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

void operator delete[](void *__p)
{
  off_1E79112B8(__p);
}

void operator delete(void *__p)
{
  off_1E79112C0(__p);
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_1E79112C8(__sz);
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E79112D0(__sz);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x1E0C80FC0](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1E0D15470]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C82638](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1E0C82640](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

double difftime(time_t a1, time_t a2)
{
  double result;

  MEMORY[0x1E0C82B98](a1, a2);
  return result;
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C08](queue, block);
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C18](queue, context, work);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C40](queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

void dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D40](group, queue, context, work);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

void dispatch_set_qos_class_floor(dispatch_object_t object, dispatch_qos_class_t qos_class, int relative_priority)
{
  MEMORY[0x1E0C82F00](object, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FD8](label);
}

uint64_t dispatch_workloop_is_current()
{
  return MEMORY[0x1E0C82FE8]();
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1E0C832D0](*(_QWORD *)&a1, a2);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeifaddrs(ifaddrs *a1)
{
  MEMORY[0x1E0C834D0](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1E0C83530](a1, a2, *(_QWORD *)&a3);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1E0C836C8](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

passwd *__cdecl getpwnam(const char *a1)
{
  return (passwd *)MEMORY[0x1E0C83790](a1);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1E0C83968](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

int lstat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C83C40](a1, a2);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1E0C841C8](a1);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x1E0DE7C20](dest, src, copyHelper);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84510](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x1E0C84518](state);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

uint64_t os_state_add_handler()
{
  return MEMORY[0x1E0C84940]();
}

uint64_t os_state_remove_handler()
{
  return MEMORY[0x1E0C84948]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_attr_set_qos_class_np(pthread_attr_t *__attr, qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84CD0](__attr, *(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84EF0](*(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1E0C84F08](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

BOOL remove(const std::__fs::filesystem::path *__p, std::error_code *__ec)
{
  return MEMORY[0x1E0C850B8](__p, __ec);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

void rewind(FILE *a1)
{
  MEMORY[0x1E0C85120](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

int statvfs(const char *a1, statvfs *a2)
{
  return MEMORY[0x1E0C854E8](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strptime(const char *a1, const char *a2, tm *a3)
{
  return (char *)MEMORY[0x1E0C855D8](a1, a2, a3);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

int symlink(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85718](a1, a2);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
  MEMORY[0x1E0C857D0](*(_QWORD *)&a1, a2);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
  MEMORY[0x1E0C85DE0](xarray, value);
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return MEMORY[0x1E0C85DF8](xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C85E00](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1E0C85E30](xarray);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1E0C85E90](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF0](value);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

uint64_t xpc_connection_get_audit_token()
{
  return MEMORY[0x1E0C85FD0]();
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return MEMORY[0x1E0C86008](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1E0C86108](object);
}

uint64_t xpc_copy_entitlement_for_token()
{
  return MEMORY[0x1E0C86120]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1E0C861F0](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1E0C862B0](xdict);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1E0C863D0](value);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1E0C86420](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86628]();
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C867B0](value);
}

const uint8_t *__cdecl xpc_uuid_get_bytes(xpc_object_t xuuid)
{
  return (const uint8_t *)MEMORY[0x1E0C867F8](xuuid);
}

