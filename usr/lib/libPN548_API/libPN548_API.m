void NFDriverSetTemporaryPollingPeriod(uint64_t a1, int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Setting polling period to %u", "NFDriverSetTemporaryPollingPeriod", 9634, a2);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "NFDriverSetTemporaryPollingPeriod";
      v9 = 1024;
      v10 = 9634;
      v11 = 1024;
      v12 = a2;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting polling period to %u", buf, 0x18u);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 696) = a2;
  }
}

BOOL NFDriverSetConfiguration(uint64_t a1, unsigned __int8 *a2, unint64_t *a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned __int8 v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  _BOOL8 result;
  const char *v18;
  char v19;
  const void **v20;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  const void **v27;
  void (*v28)(uint64_t, const char *, ...);
  int v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  int v35;
  int v37;
  NSObject *v38;
  char v39;
  void (*v40)(uint64_t, const char *, ...);
  unsigned int v41;
  int v42;
  int v43;
  int v45;
  NSObject *v46;
  int v48;
  uint64_t v49;
  int v50;
  const void **v51;
  void (*v52)(uint64_t, const char *, ...);
  NSObject *v53;
  int v54;
  int v55;
  int v56;
  char v57;
  const void **v58;
  void (*v59)(uint64_t, const char *, ...);
  NSObject *v60;
  const void **v61;
  void (*v62)(uint64_t, const char *, ...);
  NSObject *v63;
  int v64;
  const void **v65;
  int v66;
  int v67;
  const void **v68;
  void (*v69)(uint64_t, const char *, ...);
  NSObject *v70;
  const void **v71;
  void (*v72)(uint64_t, const char *, ...);
  NSObject *v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  void (*v78)(uint64_t, const char *, ...);
  NSObject *v79;
  int v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, const char *, ...);
  NSObject *v85;
  uint64_t ElapsedTimeInMillisecondsFromMachTime;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  void (*v92)(uint64_t, const char *, ...);
  NSObject *v93;
  char v94;
  void (*v95)(uint64_t, const char *, ...);
  NSObject *v96;
  int v97;
  void (*v98)(uint64_t, const char *, ...);
  NSObject *v99;
  void (*v100)(uint64_t, const char *, ...);
  unsigned int v101;
  int *v102;
  int v103;
  int v104;
  int v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint8_t buf[4];
  const char *v112;
  __int16 v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  unsigned int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;
  __int16 v125;
  unsigned int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  uint64_t v133;

  v4 = a1;
  v133 = *MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = *((_DWORD *)a2 + 1);
  v7 = a2[8];
  v8 = a2[16];
  v110 = 0;
  v109 = 0;
  v108 = 0;
  v107 = 0;
  if (a3)
  {
    v9 = *a3;
    v107 = v9;
    v108 = *((_DWORD *)a3 + 2);
    v10 = HIDWORD(v9);
  }
  else
  {
    LODWORD(v10) = 0;
    LODWORD(v9) = 0;
  }
  v12 = (_DWORD)v9 == 2 || (_DWORD)v10 == 2;
  if (!*(_BYTE *)(a1 + 57))
  {
    v19 = v12;
    v20 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i wantsFieldDetect=%d wantsPolling=%d wantsExpress=%d eSE=%d host=%d", "NFDriverSetConfiguration", 5002, v5 & 1, v6, v7 & 1, v9, v10);
    dispatch_get_specific(*v20);
    v22 = NFSharedLogGetLogger();
    v23 = v5 & 1;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136447746;
      v112 = "NFDriverSetConfiguration";
      v113 = 1024;
      v114 = 5002;
      v115 = 1024;
      v116 = v23;
      v117 = 1024;
      v118 = v6;
      v119 = 1024;
      v120 = v7 & 1;
      v121 = 1024;
      v122 = v9;
      v123 = 1024;
      v124 = v10;
      _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i wantsFieldDetect=%d wantsPolling=%d wantsExpress=%d eSE=%d host=%d", buf, 0x30u);
    }
    if (v23)
      v39 = 1;
    else
      v39 = v19;
    if ((v39 & 1) != 0 || (v8 & 1) != 0 || v6 || (v7 & 1) != 0)
    {
      dispatch_get_specific(*v20);
      v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v40)
        v40(3, "%s:%i Unable to do any RF operations. Returning false.", "NFDriverSetConfiguration", 5005);
      dispatch_get_specific(*v20);
      v16 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v112 = "NFDriverSetConfiguration";
        v113 = 1024;
        v114 = 5005;
        v18 = "%{public}s:%i Unable to do any RF operations. Returning false.";
        goto LABEL_46;
      }
      return result;
    }
    *(_DWORD *)(a1 + 44) = *(_DWORD *)a3;
    return 1;
  }
  if (v12)
  {
    v13 = *((_DWORD *)a2 + 3);
    if (!v13)
    {
      v14 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v15)
        v15(3, "%s:%i Missing CE interface type", "NFDriverSetConfiguration", 5017);
      dispatch_get_specific(*v14);
      v16 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v112 = "NFDriverSetConfiguration";
        v113 = 1024;
        v114 = 5017;
        v18 = "%{public}s:%i Missing CE interface type";
LABEL_46:
        _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
        return 0;
      }
      return result;
    }
  }
  else
  {
    v13 = 0;
  }
  v24 = v8 & 1;
  v25 = v24 == 0;
  v26 = v12 ^ 1;
  if ((v8 & 1) == 0 || (v6 = 1, (v26 & 1) != 0))
  {
    v29 = v25 & v7;
    v30 = v25 & v7 | v26;
    if ((v8 & 1) != 0)
      v30 = 0;
    v31 = v30 & (v7 | v5);
    v32 = *(unsigned __int8 *)(a1 + 60) != v31;
    v33 = *(_DWORD *)(a1 + 32);
    v106 = v29;
    if (v33 != v6)
    {
      if (v6 == 2)
      {
        v101 = v13;
        v34 = v31;
        v35 = v24;
        v37 = v12;
        v38 = NFSharedSignpostLog();
        if (os_signpost_enabled(v38))
        {
          *(_WORD *)buf = 0;
          v32 = 1;
          _os_signpost_emit_with_name_impl(&dword_216EC7000, v38, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "LPCDPolling", (const char *)&unk_216F15F55, buf, 2u);
        }
        else
        {
          v32 = 1;
        }
        v12 = v37;
        v4 = a1;
        v24 = v35;
        v31 = v34;
LABEL_54:
        v13 = v101;
        v29 = v106;
        goto LABEL_56;
      }
      if (v33 == 2)
      {
        v101 = v13;
        v41 = v6;
        v42 = v31;
        v43 = v24;
        v45 = v12;
        v46 = NFSharedSignpostLog();
        if (os_signpost_enabled(v46))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_216EC7000, v46, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "LPCDPolling", (const char *)&unk_216F15F55, buf, 2u);
        }
        v32 = 1;
        v12 = v45;
        v4 = a1;
        v24 = v43;
        v31 = v42;
        v6 = v41;
        goto LABEL_54;
      }
      v32 = 1;
    }
LABEL_56:
    v48 = *(unsigned __int8 *)(v4 + 61) != v29 || *(_DWORD *)(v4 + 36) != v12 || v32;
    v104 = v24;
    if (*(unsigned __int8 *)(v4 + 62) == v24)
    {
      v25 = 0;
    }
    else
    {
      v49 = v4;
      v50 = v12;
      v51 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v52)
        v52(6, "%s:%i ESE reader discovery change requested %d -> %d!", "NFDriverSetConfiguration", 5068, *(unsigned __int8 *)(v49 + 62), v104);
      dispatch_get_specific(*v51);
      v53 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        v54 = *(unsigned __int8 *)(v49 + 62);
        *(_DWORD *)buf = 136446978;
        v112 = "NFDriverSetConfiguration";
        v113 = 1024;
        v114 = 5068;
        v115 = 1024;
        v116 = v54;
        v117 = 1024;
        v118 = v104;
        _os_log_impl(&dword_216EC7000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE reader discovery change requested %d -> %d!", buf, 0x1Eu);
      }
      v48 = 1;
      v12 = v50;
      v4 = v49;
    }
    v55 = *(_DWORD *)(v4 + 44);
    v102 = (int *)(v4 + 44);
    v103 = v12;
    if (v55 == (_DWORD)v9 && *(_DWORD *)(v4 + 48) == (_DWORD)v10)
    {
      v56 = 0;
    }
    else
    {
      if (v55 == 2)
        v57 = 1;
      else
        v57 = v12;
      if ((v57 & 1) != 0 || *(_DWORD *)(v4 + 48) == 2)
        v48 = 1;
      v56 = 1;
    }
    v58 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v59 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v59)
      v59(6, "%s:%i wantsFieldDetect=%d wantsPolling=%d wantsExpress=%d eSE=%d host=%d ceType=%d, hasDiscoveryChanges=%d hasRoutingChanges=%d fullHCE=%d", "NFDriverSetConfiguration", 5092, v31, v6, v106, v9, v10, v13, v48, v56, BYTE1(v108));
    dispatch_get_specific(*v58);
    v60 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136448770;
      v112 = "NFDriverSetConfiguration";
      v113 = 1024;
      v114 = 5092;
      v115 = 1024;
      v116 = v31;
      v117 = 1024;
      v118 = v6;
      v119 = 1024;
      v120 = v106;
      v121 = 1024;
      v122 = v9;
      v123 = 1024;
      v124 = v10;
      v125 = 1024;
      v126 = v13;
      v127 = 1024;
      v128 = v48;
      v129 = 1024;
      v130 = v56;
      v131 = 1024;
      v132 = BYTE1(v108);
      _os_log_impl(&dword_216EC7000, v60, OS_LOG_TYPE_DEFAULT, "%{public}s:%i wantsFieldDetect=%d wantsPolling=%d wantsExpress=%d eSE=%d host=%d ceType=%d, hasDiscoveryChanges=%d hasRoutingChanges=%d fullHCE=%d", buf, 0x48u);
    }
    if ((v25 | v56) == 1)
    {
      if (*(_BYTE *)(v4 + 60)
        || *(_DWORD *)(v4 + 32)
        || *(_BYTE *)(v4 + 62)
        || *v102 == 2
        || ((*(_DWORD *)(v4 + 48) != 2) & ~v25) == 0)
      {
        if (sub_216EE7B4C(v4, 0, 0, 0, 0, 0, 0))
        {
          v61 = (const void **)MEMORY[0x24BEDCDB0];
          if (*(_BYTE *)(v4 + 62))
          {
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v62 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v62)
              v62(6, "%s:%i ESE Reader config %d -> %d", "NFDriverSetConfiguration", 5106, *(unsigned __int8 *)(v4 + 62), 0);
            dispatch_get_specific(*v61);
            v63 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              v64 = *(unsigned __int8 *)(v4 + 62);
              *(_DWORD *)buf = 136446978;
              v112 = "NFDriverSetConfiguration";
              v113 = 1024;
              v114 = 5106;
              v115 = 1024;
              v116 = v64;
              v117 = 1024;
              v118 = 0;
              _os_log_impl(&dword_216EC7000, v63, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE Reader config %d -> %d", buf, 0x1Eu);
            }
            *(_BYTE *)(v4 + 62) = 0;
          }
        }
        else
        {
          v68 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v69 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v69)
            v69(4, "%s:%i Failed to stop discovery", "NFDriverSetConfiguration", 5103);
          dispatch_get_specific(*v68);
          v70 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v112 = "NFDriverSetConfiguration";
            v113 = 1024;
            v114 = 5103;
            _os_log_impl(&dword_216EC7000, v70, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
          }
        }
        LOBYTE(v48) = 1;
      }
      if (BYTE1(v108))
        v67 = v103;
      else
        v67 = 0;
      if (v67 == 1)
      {
        v71 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v72 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v72)
          v72(6, "%s:%i Enabling full HCE routing", "NFDriverSetConfiguration", 5113);
        dispatch_get_specific(*v71);
        v73 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v112 = "NFDriverSetConfiguration";
          v113 = 1024;
          v114 = 5113;
          _os_log_impl(&dword_216EC7000, v73, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling full HCE routing", buf, 0x12u);
        }
      }
      if (!sub_216EEE3F4(v4, (int *)&v107))
      {
        v65 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v84 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v84)
          v84(3, "%s:%i Failed to set routing", "NFDriverSetConfiguration", 5118);
        dispatch_get_specific(*v65);
        v85 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v112 = "NFDriverSetConfiguration";
          v113 = 1024;
          v114 = 5118;
          _os_log_impl(&dword_216EC7000, v85, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set routing", buf, 0x12u);
        }
        goto LABEL_152;
      }
      *(_QWORD *)v102 = v107;
      *(_DWORD *)(v4 + 52) = v108;
      v65 = (const void **)MEMORY[0x24BEDCDB0];
      v66 = v104;
      if ((v48 & 1) == 0)
        goto LABEL_126;
    }
    else
    {
      v65 = (const void **)MEMORY[0x24BEDCDB0];
      v66 = v104;
      if (!v48)
        goto LABEL_126;
      LOBYTE(v67) = 0;
    }
    if (v66)
      v74 = 1;
    else
      v74 = 2;
    *(_BYTE *)(v4 + 65) = v67;
    if ((*(_QWORD *)(*(_QWORD *)(v4 + 24) + 552) & 0x20000000) != 0)
      v75 = 0;
    else
      v75 = v31;
    v76 = v66;
    if (sub_216EE7B4C(v4, v6, v13, v75, 0, v106, v74))
    {
      *(_BYTE *)(v4 + 60) = v31;
      *(_DWORD *)(v4 + 32) = v6;
      *(_DWORD *)(v4 + 36) = v13;
      *(_BYTE *)(v4 + 61) = v106;
      if (*(unsigned __int8 *)(v4 + 62) != v76)
      {
        v77 = v76;
        dispatch_get_specific(*v65);
        v78 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v78)
          v78(6, "%s:%i ESE reader config %d -> %d", "NFDriverSetConfiguration", 5154, *(unsigned __int8 *)(v4 + 62), v76);
        dispatch_get_specific(*v65);
        v79 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          v80 = *(unsigned __int8 *)(v4 + 62);
          *(_DWORD *)buf = 136446978;
          v112 = "NFDriverSetConfiguration";
          v113 = 1024;
          v114 = 5154;
          v115 = 1024;
          v116 = v80;
          v117 = 1024;
          v118 = v77;
          _os_log_impl(&dword_216EC7000, v79, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE reader config %d -> %d", buf, 0x1Eu);
        }
        *(_BYTE *)(v4 + 62) = v77;
      }
LABEL_126:
      v81 = *(_QWORD **)(v4 + 24);
      v82 = v81[83];
      if (*(_BYTE *)(v4 + 60))
      {
        if (v82)
          goto LABEL_136;
        v83 = mach_continuous_time();
        v81 = *(_QWORD **)(v4 + 24);
      }
      else
      {
        if (!v82)
          goto LABEL_136;
        mach_continuous_time();
        ElapsedTimeInMillisecondsFromMachTime = GetElapsedTimeInMillisecondsFromMachTime();
        v83 = 0;
        v81 = *(_QWORD **)(v4 + 24);
        v81[84] += ElapsedTimeInMillisecondsFromMachTime;
      }
      v81[83] = v83;
LABEL_136:
      v87 = v81[85];
      if (*(_BYTE *)(v4 + 61))
      {
        if (!v87)
        {
          v88 = mach_continuous_time();
          v89 = *(_QWORD *)(v4 + 24);
LABEL_141:
          *(_QWORD *)(v89 + 680) = v88;
        }
      }
      else if (v87)
      {
        mach_continuous_time();
        v90 = GetElapsedTimeInMillisecondsFromMachTime();
        v88 = 0;
        v89 = *(_QWORD *)(v4 + 24);
        *(_QWORD *)(v89 + 688) += v90;
        goto LABEL_141;
      }
      return 1;
    }
    v91 = v31;
    dispatch_get_specific(*v65);
    v92 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v92)
      v92(3, "%s:%i Failed to update discovery", "NFDriverSetConfiguration", 5143);
    dispatch_get_specific(*v65);
    v93 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v112 = "NFDriverSetConfiguration";
      v113 = 1024;
      v114 = 5143;
      _os_log_impl(&dword_216EC7000, v93, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to update discovery", buf, 0x12u);
    }
    v94 = v103;
    if (v6)
      v94 = 1;
    if ((v94 & 1) == 0 && (v91 & 1) == 0)
      return 0;
LABEL_152:
    if (sub_216EE7B4C(v4, 0, 0, 0, 0, 0, 0))
    {
      *(_BYTE *)(v4 + 60) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_BYTE *)(v4 + 65) = 0;
      dispatch_get_specific(*v65);
      v95 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v95)
        v95(6, "%s:%i ESE reader config %d -> %d", "NFDriverSetConfiguration", 5175, *(unsigned __int8 *)(v4 + 62), 0);
      dispatch_get_specific(*v65);
      v96 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        v97 = *(unsigned __int8 *)(v4 + 62);
        *(_DWORD *)buf = 136446978;
        v112 = "NFDriverSetConfiguration";
        v113 = 1024;
        v114 = 5175;
        v115 = 1024;
        v116 = v97;
        v117 = 1024;
        v118 = 0;
        _os_log_impl(&dword_216EC7000, v96, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE reader config %d -> %d", buf, 0x1Eu);
      }
      *(_BYTE *)(v4 + 62) = 0;
    }
    else
    {
      dispatch_get_specific(*v65);
      v98 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v98)
        v98(4, "%s:%i Failed to stop discovery", "NFDriverSetConfiguration", 5168);
      dispatch_get_specific(*v65);
      v99 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v112 = "NFDriverSetConfiguration";
        v113 = 1024;
        v114 = 5168;
        _os_log_impl(&dword_216EC7000, v99, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
      }
    }
    if (sub_216EEE3F4(v4, v102))
    {
      result = 0;
      *(_QWORD *)v102 = v109;
      *(_DWORD *)(v4 + 52) = v110;
    }
    else
    {
      dispatch_get_specific(*v65);
      v100 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v100)
        v100(4, "%s:%i Failed to stop routing", "NFDriverSetConfiguration", 5181);
      dispatch_get_specific(*v65);
      v16 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v112 = "NFDriverSetConfiguration";
        v113 = 1024;
        v114 = 5181;
        v18 = "%{public}s:%i Failed to stop routing";
        goto LABEL_46;
      }
    }
    return result;
  }
  v27 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v28)
    v28(3, "%s:%i CE and Reader not allowed at the same time", "NFDriverSetConfiguration", 5029);
  dispatch_get_specific(*v27);
  v16 = NFSharedLogGetLogger();
  result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    v112 = "NFDriverSetConfiguration";
    v113 = 1024;
    v114 = 5029;
    v18 = "%{public}s:%i CE and Reader not allowed at the same time";
    goto LABEL_46;
  }
  return result;
}

void sub_216EC8FB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int *a5, int a6)
{
  unsigned __int8 *v11;
  int v12;
  int v13;
  const void **v14;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v16;
  const char *v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint32_t v24;
  const void **v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  const void **v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  int v31;
  NSObject *v32;
  _QWORD *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  int v38;
  const void **v39;
  void (*v40)(uint64_t, const char *, ...);
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  const void **v44;
  void (*v45)(uint64_t, const char *, ...);
  NSObject *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  const void **v51;
  void (*v52)(uint64_t, const char *, ...);
  NSObject *v53;
  unsigned int v54;
  int v55;
  const void **v56;
  void (*v57)(uint64_t, const char *, ...);
  NSObject *v58;
  const void **v59;
  void (*v60)(uint64_t, const char *, ...);
  int v61;
  int v62;
  int v63;
  const void **v64;
  void (*v65)(uint64_t, const char *, ...);
  NSObject *v66;
  const void **v67;
  void (*v68)(uint64_t, const char *, ...);
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, const char *, ...);
  NSObject *v73;
  int v74;
  NSObject *v75;
  uint64_t v76;
  const void **v77;
  void (*v78)(uint64_t, const char *, ...);
  NSObject *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  size_t v83;
  void *v84;
  uint64_t v85;
  size_t v86;
  const void **v87;
  void (*v88)(uint64_t, const char *, ...);
  NSObject *v89;
  uint64_t v90;
  uint64_t *v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  NSObject *v95;
  _QWORD v96[5];
  int v97;
  char v98;
  __int16 v99;
  char v100;
  int v101;
  int v102;
  int v103;
  _QWORD v104[8];
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  int v112;
  _QWORD v113[6];
  _QWORD v114[5];
  _QWORD v115[5];
  unsigned int v116;
  char v117;
  _QWORD v118[5];
  int v119;
  int v120;
  _QWORD v121[5];
  _QWORD v122[5];
  _QWORD v123[6];
  _QWORD v124[7];
  _QWORD block[7];
  _QWORD v126[6];
  _QWORD v127[5];
  _QWORD v128[5];
  uint8_t v129[4];
  const char *v130;
  __int16 v131;
  int v132;
  _BYTE buf[24];
  _BYTE v134[32];
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  if (!a6 || a3 == 16 || a3 == 27)
  {
    switch(a3)
    {
      case 2:
        if (a5[6] != 2)
          goto LABEL_133;
        v11 = (unsigned __int8 *)*((_QWORD *)a5 + 2);
        if (!v11)
          goto LABEL_133;
        v12 = *v11;
        v13 = v11[1];
        v14 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v12 == 3)
        {
          if (v13 == 11)
          {
            if (Logger)
              Logger(5, "%s:%i ProhibitTimer.Host.Start", "_NFDriverLogHostProhibitTimerSignpost", 2692);
            dispatch_get_specific(*v14);
            v16 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              goto LABEL_133;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_NFDriverLogHostProhibitTimerSignpost";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2692;
            v17 = "%{public}s:%i ProhibitTimer.Host.Start";
          }
          else
          {
            if (Logger)
              Logger(5, "%s:%i ProhibitTimer.SE.Start", "_NFDriverLogHostProhibitTimerSignpost", 2694);
            dispatch_get_specific(*v14);
            v16 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              goto LABEL_133;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_NFDriverLogHostProhibitTimerSignpost";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2694;
            v17 = "%{public}s:%i ProhibitTimer.SE.Start";
          }
        }
        else if (v13 == 11)
        {
          if (Logger)
            Logger(5, "%s:%i ProhibitTimer.Host.End", "_NFDriverLogHostProhibitTimerSignpost", 2698);
          dispatch_get_specific(*v14);
          v16 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            goto LABEL_133;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_NFDriverLogHostProhibitTimerSignpost";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2698;
          v17 = "%{public}s:%i ProhibitTimer.Host.End";
        }
        else
        {
          if (Logger)
            Logger(5, "%s:%i ProhibitTimer.SE.End", "_NFDriverLogHostProhibitTimerSignpost", 2700);
          dispatch_get_specific(*v14);
          v16 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            goto LABEL_133;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_NFDriverLogHostProhibitTimerSignpost";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2700;
          v17 = "%{public}s:%i ProhibitTimer.SE.End";
        }
        _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
LABEL_133:
        if (a5[2])
          v81 = NFDataCreateWithBytes();
        else
          v81 = 0;
        if (a5[6])
          v82 = NFDataCreateWithBytes();
        else
          v82 = 0;
        v43 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        block[0] = MEMORY[0x24BDAC760];
        block[1] = 0x40000000;
        block[2] = sub_216EEA4BC;
        block[3] = &unk_24D65F0D8;
        block[4] = a2;
        block[5] = v81;
        block[6] = v82;
        v33 = block;
        goto LABEL_140;
      case 4:
        v28 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v29)
          v29(6, "%s:%i SE Restricted Mode Enable! OS_ID = %d", "_Callback_NFDriverNotifySE", 2780, a5[8]);
        dispatch_get_specific(*v28);
        v30 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          v31 = a5[8];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2780;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v31;
          _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE Restricted Mode Enable! OS_ID = %d", buf, 0x18u);
        }
        v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v124[0] = MEMORY[0x24BDAC760];
        v124[1] = 0x40000000;
        v124[2] = sub_216EEA508;
        v124[3] = &unk_24D65F0F8;
        v124[4] = a2;
        v124[5] = a4;
        v124[6] = a5;
        v33 = v124;
        goto LABEL_141;
      case 5:
        kdebug_trace();
        v34 = NFSharedSignpostLog();
        if (os_signpost_enabled(v34))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_216EC7000, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FIELD_ON", (const char *)&unk_216F15F55, buf, 2u);
        }
        v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v128[0] = MEMORY[0x24BDAC760];
        v128[1] = 0x40000000;
        v128[2] = sub_216ECDEEC;
        v128[3] = &unk_24D65F078;
        v128[4] = a2;
        v33 = v128;
        goto LABEL_141;
      case 6:
        kdebug_trace();
        v35 = NFSharedSignpostLog();
        if (os_signpost_enabled(v35))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_216EC7000, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "FIELD_OFF", (const char *)&unk_216F15F55, buf, 2u);
        }
        v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v127[0] = MEMORY[0x24BDAC760];
        v127[1] = 0x40000000;
        v127[2] = sub_216EEA450;
        v127[3] = &unk_24D65F098;
        v127[4] = a2;
        v33 = v127;
        goto LABEL_141;
      case 10:
      case 11:
      case 15:
        return;
      case 14:
        if (a5[2])
          v36 = NFDataCreateWithBytes();
        else
          v36 = 0;
        v43 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v126[0] = MEMORY[0x24BDAC760];
        v126[1] = 0x40000000;
        v126[2] = sub_216EEA478;
        v126[3] = &unk_24D65F0B8;
        v126[4] = a2;
        v126[5] = v36;
        v33 = v126;
        goto LABEL_140;
      case 16:
        if (a5)
        {
          v37 = *a5;
          v38 = *((unsigned __int8 *)a5 + 4);
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
        v67 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v68 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v68)
          v68(6, "%s:%i Got SE Removed with status %d", "_Callback_NFDriverNotifySE", 2835, a6);
        dispatch_get_specific(*v67);
        v69 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2835;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a6;
          _os_log_impl(&dword_216EC7000, v69, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Got SE Removed with status %d", buf, 0x18u);
        }
        v70 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 496);
        if (v70)
          v71 = *(_QWORD *)(v70 + 8);
        else
          v71 = 0;
        dispatch_get_specific(*v67);
        v72 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v71 == a4)
        {
          if (v72)
            v72(3, "%s:%i Embedded SE removed: reason=0x%02x, other=0x%02x", "_Callback_NFDriverNotifySE", 2840, v37, v38);
          dispatch_get_specific(*v67);
          v75 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2840;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v37;
            *(_WORD *)v134 = 1024;
            *(_DWORD *)&v134[2] = v38;
            _os_log_impl(&dword_216EC7000, v75, OS_LOG_TYPE_ERROR, "%{public}s:%i Embedded SE removed: reason=0x%02x, other=0x%02x", buf, 0x1Eu);
          }
          v74 = 1;
        }
        else
        {
          if (v72)
            v72(3, "%s:%i Unknown SE removed: reason=0x%02x, other=0x%02x", "_Callback_NFDriverNotifySE", 2843, v37, v38);
          dispatch_get_specific(*v67);
          v73 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2843;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v37;
            *(_WORD *)v134 = 1024;
            *(_DWORD *)&v134[2] = v38;
            _os_log_impl(&dword_216EC7000, v73, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown SE removed: reason=0x%02x, other=0x%02x", buf, 0x1Eu);
          }
          v74 = 0;
        }
        if (a6 > 130)
        {
          if (a6 != 255)
          {
            if (a6 == 131)
            {
              v76 = *(_QWORD *)(a2 + 24);
              *(_BYTE *)(v76 + 723) = 1;
              if (*(_BYTE *)(v76 + 724))
              {
                sub_216EE6D24(a2);
                postAnalyticsMainSERemovedEvent();
              }
              return;
            }
            goto LABEL_153;
          }
        }
        else
        {
          if (!a6)
          {
            if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 724))
            {
              sub_216EE6D24(a2);
              postAnalyticsMainSERemovedEvent();
            }
LABEL_153:
            NFDriverDumpUART(a2);
            v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
            v118[0] = MEMORY[0x24BDAC760];
            v118[1] = 0x40000000;
            v118[2] = sub_216EEA774;
            v118[3] = &unk_24D65F178;
            v118[4] = a2;
            v119 = v74;
            v120 = v37;
            v33 = v118;
LABEL_141:
            dispatch_async(v32, v33);
            return;
          }
          if (a6 != 66)
            goto LABEL_153;
        }
        NFDriverDumpUART(a2);
        NFDriverSimulateCrash(a2, 57005);
        return;
      case 17:
        v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v122[0] = MEMORY[0x24BDAC760];
        v122[1] = 0x40000000;
        v122[2] = sub_216EEA6D8;
        v122[3] = &unk_24D65F138;
        v122[4] = a2;
        v33 = v122;
        goto LABEL_141;
      case 18:
        v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v121[0] = MEMORY[0x24BDAC760];
        v121[1] = 0x40000000;
        v121[2] = sub_216EEA6FC;
        v121[3] = &unk_24D65F158;
        v121[4] = a2;
        v33 = v121;
        goto LABEL_141;
      case 19:
        v39 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v40)
          v40(6, "%s:%i NFCEE powered off", "_Callback_NFDriverNotifySE", 2828);
        dispatch_get_specific(*v39);
        v41 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2828;
        v21 = "%{public}s:%i NFCEE powered off";
        v22 = v41;
        v23 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_69;
      case 20:
        if (!a5[2])
          return;
        v42 = NFDataCreateWithBytes();
        if (!v42)
          return;
        v43 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v113[0] = MEMORY[0x24BDAC760];
        v113[1] = 0x40000000;
        v113[2] = sub_216EEA988;
        v113[3] = &unk_24D65F1D8;
        v113[4] = a2;
        v113[5] = v42;
        v33 = v113;
LABEL_140:
        v32 = v43;
        goto LABEL_141;
      case 21:
        v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v114[0] = MEMORY[0x24BDAC760];
        v114[1] = 0x40000000;
        v114[2] = sub_216EEA964;
        v114[3] = &unk_24D65F1B8;
        v114[4] = a2;
        v33 = v114;
        goto LABEL_141;
      case 23:
        v44 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v45)
          v45(6, "%s:%i SE Restricted Mode Exit! OS_ID = %d", "_Callback_NFDriverNotifySE", 2796, a5[8]);
        dispatch_get_specific(*v44);
        v46 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          v47 = a5[8];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2796;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v47;
          _os_log_impl(&dword_216EC7000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE Restricted Mode Exit! OS_ID = %d", buf, 0x18u);
        }
        v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v123[0] = MEMORY[0x24BDAC760];
        v123[1] = 0x40000000;
        v123[2] = sub_216EEA678;
        v123[3] = &unk_24D65F118;
        v123[4] = a2;
        v123[5] = a5;
        v33 = v123;
        goto LABEL_141;
      case 24:
        v109 = 0;
        v110 = &v109;
        v111 = 0x2000000000;
        v112 = 0;
        switch(*a5)
        {
          case 1:
            v48 = 1;
            goto LABEL_144;
          case 2:
          case 4:
          case 5:
            v48 = 2;
            goto LABEL_144;
          case 3:
            if ((*(_BYTE *)(*(_QWORD *)(a2 + 24) + 660) & 8) != 0)
              v48 = 32;
            else
              v48 = 4;
LABEL_144:
            v112 = v48;
            break;
          case 6:
            v77 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v78 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v78)
              v78(6, "%s:%i unkonwn express mode type (%d)", "_Callback_NFDriverNotifySE", 3020, *a5);
            dispatch_get_specific(*v77);
            v79 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            {
              v80 = *a5;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3020;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v80;
              _os_log_impl(&dword_216EC7000, v79, OS_LOG_TYPE_DEFAULT, "%{public}s:%i unkonwn express mode type (%d)", buf, 0x18u);
            }
            *((_DWORD *)v110 + 6) = 0;
            break;
          default:
            break;
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3800000000;
        v105 = 0;
        v106 = &v105;
        v107 = 0x2000000000;
        v108 = 0;
        *(_OWORD *)v134 = *(_OWORD *)(a5 + 2);
        *(_OWORD *)&v134[16] = *(_OWORD *)(a5 + 6);
        *(_QWORD *)&v134[8] = 0;
        *(_DWORD *)&v134[16] = 0;
        v83 = a5[6];
        if ((_DWORD)v83)
        {
          v84 = malloc_type_calloc(1uLL, v83, 0x2D67ED8BuLL);
          v85 = *(_QWORD *)&buf[8];
          *(_QWORD *)(*(_QWORD *)&buf[8] + 32) = v84;
          if (v84)
          {
            v86 = a5[6];
            *(_DWORD *)(v85 + 40) = v86;
            memcpy(v84, *((const void **)a5 + 2), v86);
          }
          else
          {
            v87 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v88 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v88)
              v88(3, "%s:%i No memory available", "_Callback_NFDriverNotifySE", 3047);
            dispatch_get_specific(*v87);
            v89 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v129 = 136446466;
              v130 = "_Callback_NFDriverNotifySE";
              v131 = 1024;
              v132 = 3047;
              _os_log_impl(&dword_216EC7000, v89, OS_LOG_TYPE_ERROR, "%{public}s:%i No memory available", v129, 0x12u);
            }
          }
        }
        v90 = *(_QWORD *)&buf[8];
        v91 = v106;
        v92 = v106[3] & 0xFE | (*(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24) >> 1) & 1;
        *((_BYTE *)v106 + 24) = v92;
        v93 = v92 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(v90 + 24) >> 2) & 1));
        *((_BYTE *)v91 + 24) = v93;
        v94 = v93 & 0xFFFFFFFB | (4 * ((*(unsigned __int8 *)(v90 + 24) >> 3) & 1));
        *((_BYTE *)v91 + 24) = v94;
        LOBYTE(v94) = v94 & 0xF7 | (8 * (*(_BYTE *)(v90 + 24) & 1));
        *((_BYTE *)v91 + 24) = v94;
        *((_BYTE *)v91 + 24) = v94 & 0xEF | (*(_BYTE *)(v90 + 24) >> 3) & 0x10;
        *((_WORD *)v91 + 13) = *(_WORD *)(v90 + 48);
        v95 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v104[0] = MEMORY[0x24BDAC760];
        v104[1] = 0x40000000;
        v104[2] = sub_216EEA9D4;
        v104[3] = &unk_24D65F200;
        v104[4] = &v109;
        v104[5] = &v105;
        v104[6] = buf;
        v104[7] = a2;
        dispatch_async(v95, v104);
        _Block_object_dispose(&v105, 8);
        _Block_object_dispose(buf, 8);
        _Block_object_dispose(&v109, 8);
        return;
      case 25:
        v49 = *a5;
        v50 = *((unsigned __int8 *)a5 + 4);
        LOWORD(v109) = *(_WORD *)((char *)a5 + 5);
        BYTE2(v109) = *((_BYTE *)a5 + 7);
        if (v49 != 255)
        {
          v62 = a5[2];
          v61 = a5[3];
          if (v62 == 1)
            v63 = 2;
          else
            v63 = v62 == 0;
          v64 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v65)
            v65(6, "%s:%i SE reader mode event : {se=0x%x, startEnd=%d, poll=0x%x, protocol=0x%x}", "_Callback_NFDriverNotifySE", 3088, v50, v49, v62, v61);
          dispatch_get_specific(*v64);
          v66 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136447490;
            *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3088;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v50;
            *(_WORD *)v134 = 1024;
            *(_DWORD *)&v134[2] = v49;
            *(_WORD *)&v134[6] = 1024;
            *(_DWORD *)&v134[8] = v62;
            *(_WORD *)&v134[12] = 1024;
            *(_DWORD *)&v134[14] = v61;
            _os_log_impl(&dword_216EC7000, v66, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE reader mode event : {se=0x%x, startEnd=%d, poll=0x%x, protocol=0x%x}", buf, 0x2Au);
          }
          v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
          v96[0] = MEMORY[0x24BDAC760];
          v96[1] = 0x40000000;
          v96[2] = sub_216EEAA54;
          v96[3] = &unk_24D65F220;
          v96[4] = a2;
          v97 = v49;
          v98 = v50;
          v99 = v109;
          v100 = BYTE2(v109);
          v101 = v62;
          v102 = v61;
          v103 = v63;
          v33 = v96;
          goto LABEL_141;
        }
        v51 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v52)
          v52(3, "%s:%i Error : invalid reader event", "_Callback_NFDriverNotifySE", 3082);
        dispatch_get_specific(*v51);
        v53 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3082;
        v21 = "%{public}s:%i Error : invalid reader event";
LABEL_68:
        v22 = v53;
        v23 = OS_LOG_TYPE_ERROR;
LABEL_69:
        v24 = 18;
        goto LABEL_70;
      case 27:
        v54 = *a5;
        v55 = *((unsigned __int8 *)a5 + 4);
        v56 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v57)
          v57(3, "%s:%i OS %d removed for reason 0x%x", "_Callback_NFDriverNotifySE", 2903, v54, v55);
        dispatch_get_specific(*v56);
        v58 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2903;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v54;
          *(_WORD *)v134 = 1024;
          *(_DWORD *)&v134[2] = v55;
          _os_log_impl(&dword_216EC7000, v58, OS_LOG_TYPE_ERROR, "%{public}s:%i OS %d removed for reason 0x%x", buf, 0x1Eu);
        }
        if (v54 > 2)
          return;
        v32 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        v115[0] = MEMORY[0x24BDAC760];
        v115[1] = 0x40000000;
        v115[2] = sub_216EEA934;
        v115[3] = &unk_24D65F198;
        v115[4] = a2;
        v116 = v54;
        v117 = v55;
        v33 = v115;
        goto LABEL_141;
      case 28:
        v59 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v60 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v60)
          v60(3, "%s:%i SMB Tx Blocked!", "_Callback_NFDriverNotifySE", 2926);
        dispatch_get_specific(*v59);
        v53 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2926;
        v21 = "%{public}s:%i SMB Tx Blocked!";
        goto LABEL_68;
      default:
        v25 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v26)
          v26(5, "%s:%i Unexpected event: %x", "_Callback_NFDriverNotifySE", 3106, a3);
        dispatch_get_specific(*v25);
        v27 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3106;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        v21 = "%{public}s:%i Unexpected event: %x";
        v22 = v27;
        v23 = OS_LOG_TYPE_DEFAULT;
        v24 = 24;
        goto LABEL_70;
    }
  }
  v18 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v19)
    v19(5, "%s:%i status=0x%04X for event %d", "_Callback_NFDriverNotifySE", 2710, a6, a3);
  dispatch_get_specific(*v18);
  v20 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifySE";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2710;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a6;
    *(_WORD *)v134 = 1024;
    *(_DWORD *)&v134[2] = a3;
    v21 = "%{public}s:%i status=0x%04X for event %d";
    v22 = v20;
    v23 = OS_LOG_TYPE_DEFAULT;
    v24 = 30;
LABEL_70:
    _os_log_impl(&dword_216EC7000, v22, v23, v21, buf, v24);
  }
}

void sub_216ECA440(double a1, double a2, uint64_t a3, uint64_t a4, int a5, unsigned int *a6)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  unsigned int v15;
  NSObject *v16;
  _QWORD *v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  char *v21;
  const void **v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  void (*v32)(uint64_t, const char *, ...);
  unsigned __int8 *v33;
  NSObject *v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  void (*v44)(uint64_t, const char *, ...);
  unsigned __int8 *v45;
  NSObject *v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  unint64_t v54;
  _BYTE *v55;
  void (*v56)(uint64_t, const char *, ...);
  unsigned __int8 *v57;
  NSObject *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  _DWORD *v68;
  void (*v69)(uint64_t, const char *, ...);
  NSObject *v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  uint64_t v74;
  BOOL v75;
  const void **v76;
  void (*v77)(uint64_t, const char *, ...);
  NSObject *v78;
  int v79;
  void (*v80)(uint64_t, const char *, ...);
  NSObject *v81;
  unsigned __int8 *v82;
  unint64_t v83;
  uint64_t v84;
  const void **v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  void (*v90)(uint64_t, const char *, ...);
  NSObject *v91;
  int v92;
  int v93;
  int v94;
  double v95;
  int v96;
  int v97;
  NSObject *v98;
  const char *v99;
  uint32_t v100;
  void (*v101)(uint64_t, const char *, ...);
  int v102;
  unsigned int v103;
  NSObject *v104;
  int v105;
  unsigned int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  void (*v111)(uint64_t, const char *, ...);
  NSObject *v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  const void **v120;
  unint64_t v121;
  uint64_t v122;
  double v123;
  void (*v124)(uint64_t, const char *, ...);
  NSObject *v125;
  int v126;
  int v127;
  int v128;
  uint64_t v129;
  unint64_t v130;
  const void **v131;
  unint64_t v132;
  uint64_t v133;
  double v134;
  void (*v135)(uint64_t, const char *, ...);
  NSObject *v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  const void **v140;
  unint64_t v141;
  uint64_t v142;
  double v143;
  void (*v144)(uint64_t, const char *, ...);
  NSObject *v145;
  int v146;
  int v147;
  int v148;
  double v149;
  double v150;
  uint64_t v151;
  unint64_t v152;
  const void **v153;
  unint64_t v154;
  uint64_t v155;
  double v156;
  void (*v157)(uint64_t, const char *, ...);
  NSObject *v158;
  int v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  const void **v163;
  uint64_t v164;
  void (*v165)(uint64_t, const char *, ...);
  NSObject *v166;
  int v167;
  int v168;
  int v169;
  int v170;
  __int128 v171;
  size_t v172;
  void *v173;
  uint64_t v174;
  size_t v175;
  const void **v176;
  void (*v177)(uint64_t, const char *, ...);
  NSObject *v178;
  unint64_t v179;
  const void **v180;
  void (*v181)(uint64_t, const char *, ...);
  NSObject *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  NSObject *v190;
  double v191;
  double v192;
  const void **v193;
  void (*v194)(uint64_t, const char *, ...);
  NSObject *v195;
  int v196;
  int v197;
  const char *v198;
  const void **v199;
  void (*v200)(uint64_t, const char *, ...);
  NSObject *v201;
  const char *v202;
  const void **v203;
  void (*v204)(uint64_t, const char *, ...);
  const void **v205;
  void (*v206)(uint64_t, const char *, ...);
  NSObject *v207;
  const void **v208;
  void (*v209)(uint64_t, const char *, ...);
  NSObject *v210;
  int v211;
  int v212;
  unsigned int v213;
  __int16 v214;
  unsigned int v215;
  int v216;
  int v217;
  const void **v218;
  void (*v219)(uint64_t, const char *, ...);
  NSObject *v220;
  const void **v221;
  void (*v222)(uint64_t, const char *, ...);
  NSObject *v223;
  void (*v224)(uint64_t, const char *, ...);
  NSObject *v225;
  unint64_t v226;
  const void **v227;
  void (*v228)(uint64_t, const char *, ...);
  NSObject *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  unint64_t v234;
  unint64_t v235;
  int v236;
  NSObject *v237;
  const void **v238;
  void (*v239)(uint64_t, const char *, ...);
  NSObject *v240;
  unsigned int v241;
  unint64_t v242;
  const void **v243;
  void (*v244)(uint64_t, const char *, ...);
  NSObject *v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  NSObject *v253;
  const void **v254;
  void (*v255)(uint64_t, const char *, ...);
  NSObject *v256;
  float v257;
  const void **v258;
  void (*v259)(uint64_t, const char *, ...);
  NSObject *v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  NSObject *v264;
  const void **v265;
  void (*v266)(uint64_t, const char *, ...);
  const void **v267;
  void (*v268)(uint64_t, const char *, ...);
  NSObject *v269;
  int v270;
  const void **v271;
  void (*v272)(uint64_t, const char *, ...);
  NSObject *v273;
  int v274;
  const char *v275;
  uint64_t v276;
  NSObject *v277;
  const void **v278;
  void (*Logger)(uint64_t, const char *, ...);
  unsigned int v280;
  unsigned int v281;
  NSObject *v282;
  os_log_type_t v283;
  uint32_t v284;
  const void **v285;
  void (*v286)(uint64_t, const char *, ...);
  NSObject *v287;
  const void **v288;
  void (*v289)(uint64_t, const char *, ...);
  const void **v290;
  void (*v291)(uint64_t, const char *, ...);
  const void **v292;
  void (*v293)(uint64_t, const char *, ...);
  NSObject *v294;
  const void **v295;
  void (*v296)(uint64_t, const char *, ...);
  const void **v297;
  void (*v298)(uint64_t, const char *, ...);
  NSObject *v299;
  const void **v300;
  void (*v301)(uint64_t, const char *, ...);
  unint64_t v302;
  double v303;
  int v304;
  const void **v305;
  void (*v306)(uint64_t, const char *, ...);
  NSObject *v307;
  int v308;
  int v309;
  int v310;
  int v311;
  int v312;
  double v313;
  double v314;
  int v315;
  int v316;
  int v317;
  const void **v318;
  void (*v319)(uint64_t, const char *, ...);
  int v320;
  int v321;
  uint64_t v322;
  void (*v323)(_QWORD, double);
  const void **v324;
  void (*v325)(uint64_t, const char *, ...);
  NSObject *v326;
  NSObject *v327;
  void (*v328)(uint64_t, const char *, ...);
  NSObject *v329;
  void (*v330)(uint64_t, const char *, ...);
  NSObject *v331;
  unsigned int v332;
  unint64_t v333;
  double v334;
  const void **v335;
  void (*v336)(uint64_t, const char *, ...);
  NSObject *v337;
  int v338;
  int v339;
  int v340;
  double v341;
  double v342;
  int v343;
  const void **v344;
  void (*v345)(uint64_t, const char *, ...);
  NSObject *v346;
  int v347;
  int v348;
  int v349;
  int v350;
  int v351;
  double v352;
  int v353;
  int v354;
  int v355;
  const void **v356;
  uint64_t v357;
  void (*v358)(uint64_t, const char *, ...);
  int *v359;
  char *v360;
  int *v361;
  NSObject *v362;
  int *v363;
  char *v364;
  int v365;
  const void **v366;
  void (*v367)(uint64_t, const char *, ...);
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _QWORD v373[5];
  _QWORD v374[5];
  _QWORD block[6];
  char v376;
  _QWORD v377[6];
  _QWORD v378[5];
  char v379;
  _QWORD v380[5];
  char v381;
  _QWORD v382[6];
  int v383;
  char v384;
  _QWORD v385[5];
  int v386;
  _QWORD v387[5];
  _QWORD v388[5];
  __int16 v389;
  __int16 v390;
  unsigned int v391;
  __int16 v392;
  __int16 v393;
  int v394;
  _QWORD v395[5];
  _QWORD v396[5];
  _QWORD v397[7];
  _QWORD v398[5];
  uint8_t v399[4];
  const char *v400;
  __int16 v401;
  int v402;
  uint8_t buf[58];
  __int128 v404;
  __int16 v405;
  _BYTE v406[10];
  int v407;
  __int16 v408;
  int v409;
  _BYTE v410[28];
  __int16 v411;
  uint64_t v412;
  uint64_t v413;

  v8 = a4;
  v413 = *MEMORY[0x24BDAC8D0];
  if (a5 > 132)
  {
    if (a5 > 158)
    {
      if (a5 > 215)
      {
        if (a5 == 216)
        {
          v278 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger)
            Logger(6, "%s:%i eSE Restricted Event %d %d", "_Callback_NFDriverNotifyGeneral", 2280, *a6, a6[1]);
          dispatch_get_specific(*v278);
          v210 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
            return;
          v280 = *a6;
          v281 = a6[1];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2280;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v280;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v281;
          v202 = "%{public}s:%i eSE Restricted Event %d %d";
LABEL_295:
          v282 = v210;
          v283 = OS_LOG_TYPE_DEFAULT;
          v284 = 30;
LABEL_336:
          _os_log_impl(&dword_216EC7000, v282, v283, v202, buf, v284);
          return;
        }
        if (a5 == 304)
        {
          v76 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v77)
            v77(3, "%s:%i MW requested VEN reset.", "_Callback_NFDriverNotifyGeneral", 2259);
          dispatch_get_specific(*v76);
          v78 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2259;
            _os_log_impl(&dword_216EC7000, v78, OS_LOG_TYPE_ERROR, "%{public}s:%i MW requested VEN reset.", buf, 0x12u);
          }
          v79 = phTmlNfc_IoCtl();
          if (v79 || (v79 = phTmlNfc_IoCtl()) != 0)
          {
            dispatch_get_specific(*v76);
            v80 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v80)
              v80(3, "%s:%i Failed to VEN reset !!!!! : 0x%04X", "_Callback_NFDriverNotifyGeneral", 2271, v79);
            dispatch_get_specific(*v76);
            v81 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2271;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v79;
              _os_log_impl(&dword_216EC7000, v81, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to VEN reset !!!!! : 0x%04X", buf, 0x18u);
            }
          }
          else
          {
            dispatch_get_specific(*v76);
            v328 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v328)
              v328(6, "%s:%i Success!", "_Callback_NFDriverNotifyGeneral", 2269);
            dispatch_get_specific(*v76);
            v329 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v329, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2269;
              _os_log_impl(&dword_216EC7000, v329, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Success!", buf, 0x12u);
            }
          }
          phLibNfc_Mgt_VenResetStatus();
          return;
        }
      }
      else
      {
        if (a5 == 159)
        {
          if (*(_BYTE *)(a4 + 57))
          {
            LODWORD(a1) = a6[2];
            v257 = (double)*(unint64_t *)&a1 * 0.07374;
            v258 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v259 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v259)
              v259(6, "%s:%i Response time : %f us (%d), PICC Response: 0x%04X, PCD response = 0x%04X", "_Callback_NFDriverNotifyGeneral", 2228, v257, a6[2], a6[1], *a6);
            dispatch_get_specific(*v258);
            v260 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
            {
              v262 = a6[1];
              v261 = a6[2];
              v263 = *a6;
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2228;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v257;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v261;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v262;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v263;
              _os_log_impl(&dword_216EC7000, v260, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Response time : %f us (%d), PICC Response: 0x%04X, PCD response = 0x%04X", buf, 0x2Eu);
            }
            v264 = NFSharedSignpostLog();
            if (os_signpost_enabled(v264))
            {
              *(_DWORD *)buf = 134217984;
              *(double *)&buf[4] = v257;
              _os_signpost_emit_with_name_impl(&dword_216EC7000, v264, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ANTI_RELAY", "%f", buf, 0xCu);
            }
          }
          return;
        }
        if (a5 == 209)
        {
          v12 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v13)
            v13(6, "%s:%i ==== NFCC/SE TEMPERATURE CONDITION EXITED ====", "_Callback_NFDriverNotifyGeneral", 2085);
          dispatch_get_specific(*v12);
          v14 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2085;
            _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ==== NFCC/SE TEMPERATURE CONDITION EXITED ====", buf, 0x12u);
          }
          v15 = (0xBE24Fu >> sub_216EE90A8(*(_DWORD *)(*(_QWORD *)(v8 + 24) + 588), *(unsigned __int8 *)(*(_QWORD *)(v8 + 24) + 592))) & 1;
          v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
          v378[0] = MEMORY[0x24BDAC760];
          v378[1] = 0x40000000;
          v378[2] = sub_216EE9278;
          v378[3] = &unk_24D65EF78;
          v378[4] = v8;
          v379 = v15;
          v17 = v378;
          goto LABEL_373;
        }
      }
      goto LABEL_296;
    }
    if (a5 != 133)
    {
      if (a5 != 134)
      {
        if (a5 == 155)
        {
          if (a6)
          {
            v21 = (char *)malloc_type_calloc(1uLL, 0x300uLL, 0x1080040DD2123E5uLL);
            v22 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v23)
              v23(6, "%s:%i Num Tags Added=%d, Detected=%d, Removed=%d, Not Interested=%d", "_Callback_NFDriverNotifyGeneral", 2140, *(unsigned __int8 *)a6, *((unsigned __int8 *)a6 + 32), *((unsigned __int8 *)a6 + 16), *((unsigned __int8 *)a6 + 48));
            dispatch_get_specific(*v22);
            v24 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              v25 = *(unsigned __int8 *)a6;
              v26 = *((unsigned __int8 *)a6 + 32);
              v27 = *((unsigned __int8 *)a6 + 16);
              v28 = *((unsigned __int8 *)a6 + 48);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2140;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v25;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = v26;
              *(_WORD *)&buf[30] = 1024;
              *(_DWORD *)&buf[32] = v27;
              *(_WORD *)&buf[36] = 1024;
              *(_DWORD *)&buf[38] = v28;
              _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Num Tags Added=%d, Detected=%d, Removed=%d, Not Interested=%d", buf, 0x2Au);
            }
            if (*(_BYTE *)a6)
            {
              v29 = 0;
              v30 = 0;
              v31 = v21 + 88;
              do
              {
                dispatch_get_specific(*v22);
                v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v32)
                {
                  v33 = (unsigned __int8 *)(*((_QWORD *)a6 + 1) + v29);
                  v32(6, "%s:%i Added Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", "_Callback_NFDriverNotifyGeneral", 2150, v30, *v33, v33[1], v33[2], v33[3], v33[4]);
                }
                dispatch_get_specific(*v22);
                v34 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                {
                  v35 = (unsigned __int8 *)(*((_QWORD *)a6 + 1) + v29);
                  v36 = *v35;
                  v37 = v35[1];
                  v38 = v35[2];
                  v39 = v35[3];
                  LODWORD(v35) = v35[4];
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2150;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v30;
                  *(_WORD *)&buf[24] = 1024;
                  *(_DWORD *)&buf[26] = v36;
                  *(_WORD *)&buf[30] = 1024;
                  *(_DWORD *)&buf[32] = v37;
                  *(_WORD *)&buf[36] = 1024;
                  *(_DWORD *)&buf[38] = v38;
                  *(_WORD *)&buf[42] = 1024;
                  *(_DWORD *)&buf[44] = v39;
                  *(_WORD *)&buf[48] = 1024;
                  *(_DWORD *)&buf[50] = (_DWORD)v35;
                  _os_log_impl(&dword_216EC7000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Added Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", buf, 0x36u);
                }
                if (v30 <= 1)
                {
                  v40 = (unsigned __int8 *)(*((_QWORD *)a6 + 1) + v29);
                  *((_DWORD *)v31 - 20) = sub_216EE8AD8(*v40);
                  *v31 = 4;
                  *((_DWORD *)v31 - 4) = *(_DWORD *)(v40 + 1);
                }
                ++v30;
                v29 += 5;
                v31 += 96;
              }
              while (v30 < *(unsigned __int8 *)a6);
            }
            if (*((_BYTE *)a6 + 32))
            {
              v41 = 0;
              v42 = 0;
              v43 = v21 + 280;
              do
              {
                dispatch_get_specific(*v22);
                v44 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v44)
                {
                  v45 = (unsigned __int8 *)(*((_QWORD *)a6 + 5) + v41);
                  v44(6, "%s:%i Detected Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", "_Callback_NFDriverNotifyGeneral", 2164, v42, *v45, v45[1], v45[2], v45[3], v45[4]);
                }
                dispatch_get_specific(*v22);
                v46 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                {
                  v47 = (unsigned __int8 *)(*((_QWORD *)a6 + 5) + v41);
                  v48 = *v47;
                  v49 = v47[1];
                  v50 = v47[2];
                  v51 = v47[3];
                  LODWORD(v47) = v47[4];
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2164;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v42;
                  *(_WORD *)&buf[24] = 1024;
                  *(_DWORD *)&buf[26] = v48;
                  *(_WORD *)&buf[30] = 1024;
                  *(_DWORD *)&buf[32] = v49;
                  *(_WORD *)&buf[36] = 1024;
                  *(_DWORD *)&buf[38] = v50;
                  *(_WORD *)&buf[42] = 1024;
                  *(_DWORD *)&buf[44] = v51;
                  *(_WORD *)&buf[48] = 1024;
                  *(_DWORD *)&buf[50] = (_DWORD)v47;
                  _os_log_impl(&dword_216EC7000, v46, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Detected Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", buf, 0x36u);
                }
                if (v42 <= 1)
                {
                  v52 = (unsigned __int8 *)(*((_QWORD *)a6 + 5) + v41);
                  *((_DWORD *)v43 - 20) = sub_216EE8AD8(*v52);
                  *v43 = 4;
                  *((_DWORD *)v43 - 4) = *(_DWORD *)(v52 + 1);
                }
                ++v42;
                v41 += 5;
                v43 += 96;
              }
              while (v42 < *((unsigned __int8 *)a6 + 32));
            }
            if (*((_BYTE *)a6 + 16))
            {
              v53 = 0;
              v54 = 0;
              v55 = v21 + 472;
              do
              {
                dispatch_get_specific(*v22);
                v56 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v56)
                {
                  v57 = (unsigned __int8 *)(*((_QWORD *)a6 + 3) + v53);
                  v56(6, "%s:%i Removed Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", "_Callback_NFDriverNotifyGeneral", 2178, v54, *v57, v57[1], v57[2], v57[3], v57[4]);
                }
                dispatch_get_specific(*v22);
                v58 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                {
                  v59 = (unsigned __int8 *)(*((_QWORD *)a6 + 3) + v53);
                  v60 = *v59;
                  v61 = v59[1];
                  v62 = v59[2];
                  v63 = v59[3];
                  LODWORD(v59) = v59[4];
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2178;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v54;
                  *(_WORD *)&buf[24] = 1024;
                  *(_DWORD *)&buf[26] = v60;
                  *(_WORD *)&buf[30] = 1024;
                  *(_DWORD *)&buf[32] = v61;
                  *(_WORD *)&buf[36] = 1024;
                  *(_DWORD *)&buf[38] = v62;
                  *(_WORD *)&buf[42] = 1024;
                  *(_DWORD *)&buf[44] = v63;
                  *(_WORD *)&buf[48] = 1024;
                  *(_DWORD *)&buf[50] = (_DWORD)v59;
                  _os_log_impl(&dword_216EC7000, v58, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Removed Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", buf, 0x36u);
                }
                if (v54 <= 1)
                {
                  v64 = (unsigned __int8 *)(*((_QWORD *)a6 + 3) + v53);
                  *((_DWORD *)v55 - 20) = sub_216EE8AD8(*v64);
                  *v55 = 4;
                  *((_DWORD *)v55 - 4) = *(_DWORD *)(v64 + 1);
                }
                ++v54;
                v53 += 5;
                v55 += 96;
              }
              while (v54 < *((unsigned __int8 *)a6 + 16));
            }
            if (*((_BYTE *)a6 + 48))
            {
              v65 = 0;
              v66 = 0;
              v67 = 0;
              v68 = v21 + 584;
              do
              {
                dispatch_get_specific(*v22);
                v69 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v69)
                  v69(6, "%s:%i Not interested Tag (%d) rfTech = %d, rfError = %d, numTagsDet = %d", "_Callback_NFDriverNotifyGeneral", 2190, v66, *(unsigned __int8 *)(*((_QWORD *)a6 + 7) + v65), *(unsigned __int8 *)(*((_QWORD *)a6 + 7) + v65 + 1), *(unsigned __int8 *)(*((_QWORD *)a6 + 7) + v65 + 2));
                dispatch_get_specific(*v22);
                v70 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                {
                  v71 = (unsigned __int8 *)(*((_QWORD *)a6 + 7) + v65);
                  v72 = *v71;
                  v73 = v71[1];
                  LODWORD(v71) = v71[2];
                  *(_DWORD *)buf = 136447490;
                  *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2190;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = v66;
                  *(_WORD *)&buf[24] = 1024;
                  *(_DWORD *)&buf[26] = v72;
                  *(_WORD *)&buf[30] = 1024;
                  *(_DWORD *)&buf[32] = v73;
                  *(_WORD *)&buf[36] = 1024;
                  *(_DWORD *)&buf[38] = (_DWORD)v71;
                  _os_log_impl(&dword_216EC7000, v70, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not interested Tag (%d) rfTech = %d, rfError = %d, numTagsDet = %d", buf, 0x2Au);
                }
                v74 = *((_QWORD *)a6 + 7);
                v75 = *(_BYTE *)(v74 + v65 + 1) != 0;
                if (v66 <= 1)
                  *v68 = sub_216EE8AD8(*(unsigned __int8 *)(v74 + v65));
                v67 |= v75;
                ++v66;
                v65 += 3;
                v68 += 24;
              }
              while (v66 < *((unsigned __int8 *)a6 + 48));
            }
            else
            {
              v67 = 0;
            }
            v299 = *(NSObject **)(*(_QWORD *)(a4 + 24) + 536);
            block[0] = MEMORY[0x24BDAC760];
            block[1] = 0x40000000;
            block[2] = sub_216EE92EC;
            block[3] = &unk_24D65EFB8;
            block[4] = a4;
            block[5] = v21;
            v376 = v67 & 1;
            dispatch_async(v299, block);
          }
          else
          {
            v292 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v293 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v293)
              v293(3, "%s:%i Multitag structure is missing", "_Callback_NFDriverNotifyGeneral", 2213);
            dispatch_get_specific(*v292);
            v294 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v294, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2213;
              _os_log_impl(&dword_216EC7000, v294, OS_LOG_TYPE_ERROR, "%{public}s:%i Multitag structure is missing", buf, 0x12u);
            }
          }
          v300 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v301 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v301)
            v301(6, "%s:%i Multi tag status notification received", "_Callback_NFDriverNotifyGeneral", 2215);
          dispatch_get_specific(*v300);
          v201 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
            return;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2215;
          v202 = "%{public}s:%i Multi tag status notification received";
LABEL_334:
          v282 = v201;
          v283 = OS_LOG_TYPE_DEFAULT;
          goto LABEL_335;
        }
LABEL_296:
        v285 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v286 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v286)
          v286(3, "%s:%i Unknown notification: 0x%x", "_Callback_NFDriverNotifyGeneral", 2337, a5);
        dispatch_get_specific(*v285);
        v287 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
          return;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2337;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a5;
        v202 = "%{public}s:%i Unknown notification: 0x%x";
        v282 = v287;
        v283 = OS_LOG_TYPE_ERROR;
        v284 = 24;
        goto LABEL_336;
      }
      if (!a6 || !*(_QWORD *)a6 || !a6[2])
      {
        v288 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v289 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v289)
          v289(3, "%s:%i Chipscope buffer empty", "_Callback_NFDriverNotifyGeneral", 2125);
        dispatch_get_specific(*v288);
        v256 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2125;
        v202 = "%{public}s:%i Chipscope buffer empty";
LABEL_323:
        v282 = v256;
        v283 = OS_LOG_TYPE_ERROR;
LABEL_335:
        v284 = 18;
        goto LABEL_336;
      }
      v276 = NFDataCreateWithBytes();
      v277 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
      v377[0] = MEMORY[0x24BDAC760];
      v377[1] = 0x40000000;
      v377[2] = sub_216EE92A8;
      v377[3] = &unk_24D65EF98;
      v377[4] = v8;
      v377[5] = v276;
      v17 = v377;
      v16 = v277;
LABEL_373:
      dispatch_async(v16, v17);
      return;
    }
    v270 = *a6;
    v271 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v272 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v272)
      v272(3, "%s:%i Generic error : 0x%04X", "_Callback_NFDriverNotifyGeneral", 2008, v270);
    dispatch_get_specific(*v271);
    v273 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v273, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2008;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v270;
      _os_log_impl(&dword_216EC7000, v273, OS_LOG_TYPE_ERROR, "%{public}s:%i Generic error : 0x%04X", buf, 0x18u);
    }
    if (v270 > 226)
    {
      if (v270 <= 234)
      {
        if (v270 == 227)
        {
          dispatch_get_specific(*v271);
          v330 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v330)
            v330(3, "%s:%i TxLDO OverCurrent Error", "_Callback_NFDriverNotifyGeneral", 2054);
          dispatch_get_specific(*v271);
          v331 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v331, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2054;
            _os_log_impl(&dword_216EC7000, v331, OS_LOG_TYPE_ERROR, "%{public}s:%i TxLDO OverCurrent Error", buf, 0x12u);
          }
          if (*(_BYTE *)(*(_QWORD *)(v8 + 24) + 724))
            postAnalyticsTxLdoOverCurrentErrorEvent();
          return;
        }
        if (v270 != 234)
          return;
        v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
        v385[0] = MEMORY[0x24BDAC760];
        v385[1] = 0x40000000;
        v385[2] = sub_216EE8F20;
        v385[3] = &unk_24D65EF18;
        v385[4] = v8;
        v386 = 234;
        v17 = v385;
        goto LABEL_373;
      }
      if (v270 == 235)
      {
        v274 = 1;
        v275 = "ADC LOW";
      }
      else
      {
        if (v270 != 250)
          return;
        v274 = 2;
        v275 = "ADC HIGH";
      }
    }
    else if ((v270 - 204) < 2)
    {
      if (v270 == 205)
        v275 = "ESE LOW";
      else
        v275 = "ESE HIGH";
      if (v270 == 205)
        v274 = 6;
      else
        v274 = 7;
    }
    else if (v270 == 202)
    {
      v274 = 5;
      v275 = "NFCC HIGH";
    }
    else
    {
      if (v270 != 203)
        return;
      v274 = 4;
      v275 = "NFCC LOW";
    }
    v332 = (0xBE24Fu >> sub_216EE90A8(*(_DWORD *)(*(_QWORD *)(v8 + 24) + 588), *(unsigned __int8 *)(*(_QWORD *)(v8 + 24) + 592))) & 1;
    v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
    v382[0] = MEMORY[0x24BDAC760];
    v382[1] = 0x40000000;
    v382[2] = sub_216EE8F4C;
    v382[3] = &unk_24D65EF38;
    v382[4] = v275;
    v382[5] = v8;
    v383 = v274;
    v384 = v332;
    v17 = v382;
    goto LABEL_373;
  }
  if (a5 <= 61)
  {
    if (a5 != 15)
    {
      if (a5 == 34)
      {
        v267 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v268 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v268)
          v268(3, "%s:%i CRC error", "_Callback_NFDriverNotifyGeneral", 1995);
        dispatch_get_specific(*v267);
        v269 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1995;
          _os_log_impl(&dword_216EC7000, v269, OS_LOG_TYPE_ERROR, "%{public}s:%i CRC error", buf, 0x12u);
        }
        v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
        v387[0] = MEMORY[0x24BDAC760];
        v387[1] = 0x40000000;
        v387[2] = sub_216EE8E90;
        v387[3] = &unk_24D65EEF8;
        v387[4] = v8;
        v17 = v387;
        goto LABEL_373;
      }
      if (a5 == 48)
      {
        v18 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v19)
          v19(3, "%s:%i ==== HARDWARE RESET ====", "_Callback_NFDriverNotifyGeneral", 1846);
        dispatch_get_specific(*v18);
        v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1846;
          _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i ==== HARDWARE RESET ====", buf, 0x12u);
        }
        if (a6)
          sub_216EE6038((int *)a6);
        v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
        v398[0] = MEMORY[0x24BDAC760];
        v398[1] = 0x40000000;
        v398[2] = sub_216EE8C38;
        v398[3] = &unk_24D65EE50;
        v398[4] = v8;
        v17 = v398;
        goto LABEL_373;
      }
      goto LABEL_296;
    }
    v265 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v266 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v266)
      v266(3, "%s:%i ==== COMM ERROR ====", "_Callback_NFDriverNotifyGeneral", 1922);
    dispatch_get_specific(*v265);
    v256 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1922;
    v202 = "%{public}s:%i ==== COMM ERROR ====";
    goto LABEL_323;
  }
  switch(a5)
  {
    case '>':
      if (!a6)
        return;
      v9 = *((_QWORD *)a6 + 1);
      if (!v9)
      {
        v295 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v296 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v296)
          v296(4, "%s:%i Invalid logging value", "_NFDriverLogLevel1Updated", 1125);
        dispatch_get_specific(*v295);
        v256 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_NFDriverLogLevel1Updated";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1125;
          v202 = "%{public}s:%i Invalid logging value";
          goto LABEL_323;
        }
        return;
      }
      if ((*(_BYTE *)v9 & 1) != 0)
      {
        LOWORD(a1) = *(_WORD *)(v9 + 16);
        v302 = 0x408F400000000000;
        LOWORD(v302) = *(_WORD *)(v9 + 18);
        v303 = (double)*(unint64_t *)&a1 / 1000.0 + (double)v302 / 1000000.0;
        v304 = *(_DWORD *)(v9 + 24);
        if ((v304 - 8) < 6 || v304 == 1)
        {
          v305 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v306 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v306)
            v306(5, "%s:%i [L1] %0.6f state=0x%x tech=0x%x rssi=0x%x FelicaL1State=0x%x L1DataRxFailure=0x%x AGCRegValue=0x%x vpp=%f ALMPhase=%.3f fs=0x%x RMRobustness=0x%04x", "_NFDriverLogLevel1Updated", 1140, v303, *(_DWORD *)(v9 + 24), *(_DWORD *)(v9 + 28), *(unsigned __int16 *)(v9 + 36), *(_DWORD *)(v9 + 44), *(_DWORD *)(v9 + 32), *(unsigned __int8 *)(v9 + 20), *(float *)(v9 + 52), *(float *)(v9 + 56), *(_DWORD *)(v9 + 40), *(_DWORD *)(v9 + 60));
          dispatch_get_specific(*v305);
          v307 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v307, OS_LOG_TYPE_DEFAULT))
          {
            v308 = *(_DWORD *)(v9 + 24);
            v309 = *(_DWORD *)(v9 + 28);
            v310 = *(unsigned __int16 *)(v9 + 36);
            v311 = *(_DWORD *)(v9 + 32);
            v312 = *(unsigned __int8 *)(v9 + 20);
            v313 = *(float *)(v9 + 52);
            v314 = *(float *)(v9 + 56);
            v316 = *(_DWORD *)(v9 + 40);
            v315 = *(_DWORD *)(v9 + 44);
            v317 = *(_DWORD *)(v9 + 60);
            *(_DWORD *)buf = 136449282;
            *(_QWORD *)&buf[4] = "_NFDriverLogLevel1Updated";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1140;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = v303;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v308;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v309;
            *(_WORD *)&buf[40] = 1024;
            *(_DWORD *)&buf[42] = v310;
            *(_WORD *)&buf[46] = 1024;
            *(_DWORD *)&buf[48] = v315;
            *(_WORD *)&buf[52] = 1024;
            *(_DWORD *)&buf[54] = v311;
            LOWORD(v404) = 1024;
            *(_DWORD *)((char *)&v404 + 2) = v312;
            WORD3(v404) = 2048;
            *((double *)&v404 + 1) = v313;
            v405 = 2048;
            *(double *)v406 = v314;
            *(_WORD *)&v406[8] = 1024;
            v407 = v316;
            v408 = 1024;
            v409 = v317;
            v202 = "%{public}s:%i [L1] %0.6f state=0x%x tech=0x%x rssi=0x%x FelicaL1State=0x%x L1DataRxFailure=0x%x AGCRe"
                   "gValue=0x%x vpp=%f ALMPhase=%.3f fs=0x%x RMRobustness=0x%04x";
            v282 = v307;
            v283 = OS_LOG_TYPE_DEFAULT;
            v284 = 96;
            goto LABEL_336;
          }
        }
        else
        {
          v344 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v345 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v345)
            v345(5, "%s:%i [L1] %0.6f state=0x%x tech=0x%x rssi=0x%x FelicaL1State=0x%x L1DataRxFailure=0x%x AGCRegValue=0x%x vpp=%f fs=0x%x RMRobustness=0x%04x", "_NFDriverLogLevel1Updated", 1147, v303, *(_DWORD *)(v9 + 24), *(_DWORD *)(v9 + 28), *(unsigned __int16 *)(v9 + 36), *(_DWORD *)(v9 + 44), *(_DWORD *)(v9 + 32), *(unsigned __int8 *)(v9 + 20), *(float *)(v9 + 52), *(_DWORD *)(v9 + 40), *(_DWORD *)(v9 + 60));
          dispatch_get_specific(*v344);
          v346 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v346, OS_LOG_TYPE_DEFAULT))
          {
            v347 = *(_DWORD *)(v9 + 24);
            v348 = *(_DWORD *)(v9 + 28);
            v349 = *(unsigned __int16 *)(v9 + 36);
            v350 = *(_DWORD *)(v9 + 32);
            v351 = *(unsigned __int8 *)(v9 + 20);
            v352 = *(float *)(v9 + 52);
            v354 = *(_DWORD *)(v9 + 40);
            v353 = *(_DWORD *)(v9 + 44);
            v355 = *(_DWORD *)(v9 + 60);
            *(_DWORD *)buf = 136449026;
            *(_QWORD *)&buf[4] = "_NFDriverLogLevel1Updated";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1147;
            *(_WORD *)&buf[18] = 2048;
            *(double *)&buf[20] = v303;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v347;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = v348;
            *(_WORD *)&buf[40] = 1024;
            *(_DWORD *)&buf[42] = v349;
            *(_WORD *)&buf[46] = 1024;
            *(_DWORD *)&buf[48] = v353;
            *(_WORD *)&buf[52] = 1024;
            *(_DWORD *)&buf[54] = v350;
            LOWORD(v404) = 1024;
            *(_DWORD *)((char *)&v404 + 2) = v351;
            WORD3(v404) = 2048;
            *((double *)&v404 + 1) = v352;
            v405 = 1024;
            *(_DWORD *)v406 = v354;
            *(_WORD *)&v406[4] = 1024;
            *(_DWORD *)&v406[6] = v355;
            v202 = "%{public}s:%i [L1] %0.6f state=0x%x tech=0x%x rssi=0x%x FelicaL1State=0x%x L1DataRxFailure=0x%x AGCRe"
                   "gValue=0x%x vpp=%f fs=0x%x RMRobustness=0x%04x";
            v282 = v346;
            v283 = OS_LOG_TYPE_DEFAULT;
            v284 = 86;
            goto LABEL_336;
          }
        }
        return;
      }
      if ((*(_BYTE *)v9 & 2) != 0)
      {
        LOWORD(a1) = *(_WORD *)(v9 + 16);
        v333 = 0x408F400000000000;
        LOWORD(v333) = *(_WORD *)(v9 + 18);
        v334 = (double)*(unint64_t *)&a1 / 1000.0 + (double)v333 / 1000000.0;
        v335 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v336 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v336)
          v336(5, "%s:%i [L1] %0.6f APCInfo=0x%x tech=0x%x retCode=0x%x vpp=%f ALMPhase=%.3f RMRobustness=0x%04x", "_NFDriverLogLevel1Updated", 1156, v334, *(unsigned __int16 *)(v9 + 20), *(_DWORD *)(v9 + 24), *(unsigned __int16 *)(v9 + 28), *(float *)(v9 + 52), *(float *)(v9 + 56), *(_DWORD *)(v9 + 60));
        dispatch_get_specific(*v335);
        v337 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v337, OS_LOG_TYPE_DEFAULT))
        {
          v338 = *(unsigned __int16 *)(v9 + 20);
          v339 = *(_DWORD *)(v9 + 24);
          v340 = *(unsigned __int16 *)(v9 + 28);
          v341 = *(float *)(v9 + 52);
          v342 = *(float *)(v9 + 56);
          v343 = *(_DWORD *)(v9 + 60);
          *(_DWORD *)buf = 136448258;
          *(_QWORD *)&buf[4] = "_NFDriverLogLevel1Updated";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1156;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v334;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v338;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = v339;
          *(_WORD *)&buf[40] = 1024;
          *(_DWORD *)&buf[42] = v340;
          *(_WORD *)&buf[46] = 2048;
          *(double *)&buf[48] = v341;
          *(_WORD *)&buf[56] = 2048;
          *(double *)&v404 = v342;
          WORD4(v404) = 1024;
          *(_DWORD *)((char *)&v404 + 10) = v343;
          v202 = "%{public}s:%i [L1] %0.6f APCInfo=0x%x tech=0x%x retCode=0x%x vpp=%f ALMPhase=%.3f RMRobustness=0x%04x";
          v282 = v337;
          v283 = OS_LOG_TYPE_DEFAULT;
          v284 = 72;
          goto LABEL_336;
        }
        return;
      }
      if (!*(_DWORD *)(v9 + 8))
        return;
      v10 = *(unsigned __int8 *)(v9 + 16);
      v11 = 255;
      if (v10 <= 1)
      {
        if (v10 >= 2)
          goto LABEL_391;
        goto LABEL_390;
      }
      if (v10 == 2)
      {
LABEL_390:
        v11 = *(_DWORD *)(v9 + 20);
        goto LABEL_391;
      }
      if (v10 == 255)
      {
        v356 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v357 = NFLogGetLogger();
        if (v357)
        {
          v358 = (void (*)(uint64_t, const char *, ...))v357;
          v359 = __error();
          v360 = strerror(*v359);
          v361 = __error();
          v358(3, "%s:%i \"%s\" errno=%d Invalid L1 standby wake event 0x%x", "_NFDriverLogLevel1Updated", 1172, v360, *v361, 255);
        }
        dispatch_get_specific(*v356);
        v362 = NFSharedLogGetLogger();
        v11 = 255;
        if (os_log_type_enabled(v362, OS_LOG_TYPE_ERROR))
        {
          v363 = __error();
          v364 = strerror(*v363);
          v365 = *__error();
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "_NFDriverLogLevel1Updated";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1172;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v364;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v365;
          *(_WORD *)&buf[34] = 1024;
          *(_DWORD *)&buf[36] = 255;
          _os_log_impl(&dword_216EC7000, v362, OS_LOG_TYPE_ERROR, "%{public}s:%i \"%s\" errno=%d Invalid L1 standby wake event 0x%x", buf, 0x28u);
        }
      }
LABEL_391:
      v366 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v367 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v367)
        v367(5, "%s:%i [L1] StandbyEventType=0x%x RegValue=0x%x", "_NFDriverLogLevel1Updated", 1176, v10, v11);
      dispatch_get_specific(*v366);
      v210 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "_NFDriverLogLevel1Updated";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1176;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v10;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v11;
        v202 = "%{public}s:%i [L1] StandbyEventType=0x%x RegValue=0x%x";
        goto LABEL_295;
      }
      return;
    case '?':
      if (a6)
      {
        v82 = (unsigned __int8 *)*((_QWORD *)a6 + 1);
        if (*v82)
        {
          v83 = 0;
          v84 = 48;
          v85 = (const void **)MEMORY[0x24BEDCDB0];
          v86 = 136448002;
          do
          {
            v87 = *((_QWORD *)v82 + 1);
            v88 = v87 + v84;
            LOWORD(v86) = *(_WORD *)(v87 + v84 - 48);
            LOWORD(a2) = *(_WORD *)(v87 + v84 - 46);
            v89 = (double)v86 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            switch(*(_DWORD *)(v87 + v84 - 44))
            {
              case 7:
              case 0xB:
                dispatch_get_specific(*v85);
                v90 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v90)
                  v90(5, "%s:%i [L2] %0.6f state=0x%02x mod=0x%02x rssi=0x%04x, ALMPhase=%.3f fs=0x%04x RMRobustness=0x%04x", "_NFDriverLogLevel2Updated", 1193, v89, *(_DWORD *)(v88 - 44), *(_DWORD *)(v87 + v84 - 32), *(unsigned __int16 *)(v87 + v84 - 24), *(float *)(v87 + v84 - 4), *(_DWORD *)(v87 + v84 - 20), *(_DWORD *)(v87 + v84));
                dispatch_get_specific(*v85);
                v91 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                {
                  v92 = *(_DWORD *)(v88 - 44);
                  v93 = *(_DWORD *)(v87 + v84 - 32);
                  v94 = *(unsigned __int16 *)(v87 + v84 - 24);
                  v95 = *(float *)(v87 + v84 - 4);
                  v96 = *(_DWORD *)(v87 + v84 - 20);
                  v97 = *(_DWORD *)(v87 + v84);
                  *(_DWORD *)buf = 136448258;
                  *(_QWORD *)&buf[4] = "_NFDriverLogLevel2Updated";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1193;
                  *(_WORD *)&buf[18] = 2048;
                  *(double *)&buf[20] = v89;
                  *(_WORD *)&buf[28] = 1024;
                  *(_DWORD *)&buf[30] = v92;
                  *(_WORD *)&buf[34] = 1024;
                  *(_DWORD *)&buf[36] = v93;
                  *(_WORD *)&buf[40] = 1024;
                  *(_DWORD *)&buf[42] = v94;
                  *(_WORD *)&buf[46] = 2048;
                  *(double *)&buf[48] = v95;
                  *(_WORD *)&buf[56] = 1024;
                  LODWORD(v404) = v96;
                  WORD2(v404) = 1024;
                  *(_DWORD *)((char *)&v404 + 6) = v97;
                  v98 = v91;
                  v99 = "%{public}s:%i [L2] %0.6f state=0x%02x mod=0x%02x rssi=0x%04x, ALMPhase=%.3f fs=0x%04x RMRobustness=0x%04x";
                  v100 = 68;
                  break;
                }
                goto LABEL_114;
              case 0xE:
                if (*(_BYTE *)(v87 + v84 - 12) == 8)
                  goto LABEL_109;
                goto LABEL_98;
              case 0xF:
                if ((*(_BYTE *)(v87 + v84 - 12) & 0xFE) != 6)
                  goto LABEL_98;
LABEL_109:
                dispatch_get_specific(*v85);
                v111 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v111)
                  v111(5, "%s:%i [L2] %0.6f state=0x%02x mod=0x%02x sc=0x%04x, extraInfo=0x%0x RMRobustness=0x%04x", "_NFDriverLogLevel2Updated", 1203, v89, *(_DWORD *)(v88 - 44), *(_DWORD *)(v87 + v84 - 32), *(_DWORD *)(v87 + v84 - 16), *(unsigned __int8 *)(v87 + v84 - 12), *(_DWORD *)(v87 + v84));
                dispatch_get_specific(*v85);
                v112 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_114;
                v113 = *(_DWORD *)(v88 - 44);
                v114 = *(_DWORD *)(v87 + v84 - 32);
                v115 = *(_DWORD *)(v87 + v84 - 16);
                v116 = *(unsigned __int8 *)(v87 + v84 - 12);
                v117 = *(_DWORD *)(v87 + v84);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "_NFDriverLogLevel2Updated";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1203;
                *(_WORD *)&buf[18] = 2048;
                *(double *)&buf[20] = v89;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v113;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v114;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = v115;
                *(_WORD *)&buf[46] = 1024;
                *(_DWORD *)&buf[48] = v116;
                *(_WORD *)&buf[52] = 1024;
                *(_DWORD *)&buf[54] = v117;
                v98 = v112;
                v99 = "%{public}s:%i [L2] %0.6f state=0x%02x mod=0x%02x sc=0x%04x, extraInfo=0x%0x RMRobustness=0x%04x";
                v100 = 58;
                break;
              default:
LABEL_98:
                dispatch_get_specific(*v85);
                v101 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v101)
                {
                  v102 = 0;
                  v103 = *(_DWORD *)(v88 - 44);
                  if (v103 <= 0xF && ((1 << v103) & 0xE020) != 0)
                    v102 = *(unsigned __int8 *)(v87 + v84 - 12);
                  v101(5, "%s:%i [L2] %0.6f state=0x%02x mod=0x%02x rssi=0x%04x, extraInfo=0x%0x fs=0x%04x RMRobustness=0x%04x", "_NFDriverLogLevel2Updated", 1216, v89, v103, *(_DWORD *)(v87 + v84 - 32), *(unsigned __int16 *)(v87 + v84 - 24), v102, *(_DWORD *)(v87 + v84 - 20), *(_DWORD *)(v87 + v84));
                }
                dispatch_get_specific(*v85);
                v104 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_114;
                v105 = 0;
                v106 = *(_DWORD *)(v88 - 44);
                if (v106 <= 0xF && ((1 << v106) & 0xE020) != 0)
                  v105 = *(unsigned __int8 *)(v87 + v84 - 12);
                v107 = *(_DWORD *)(v87 + v84 - 32);
                v108 = *(unsigned __int16 *)(v87 + v84 - 24);
                v109 = *(_DWORD *)(v87 + v84 - 20);
                v110 = *(_DWORD *)(v87 + v84);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "_NFDriverLogLevel2Updated";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 1216;
                *(_WORD *)&buf[18] = 2048;
                *(double *)&buf[20] = v89;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v106;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v107;
                *(_WORD *)&buf[40] = 1024;
                *(_DWORD *)&buf[42] = v108;
                *(_WORD *)&buf[46] = 1024;
                *(_DWORD *)&buf[48] = v105;
                *(_WORD *)&buf[52] = 1024;
                *(_DWORD *)&buf[54] = v109;
                LOWORD(v404) = 1024;
                *(_DWORD *)((char *)&v404 + 2) = v110;
                v98 = v104;
                v99 = "%{public}s:%i [L2] %0.6f state=0x%02x mod=0x%02x rssi=0x%04x, extraInfo=0x%0x fs=0x%04x RMRobustness=0x%04x";
                v100 = 64;
                break;
            }
            _os_log_impl(&dword_216EC7000, v98, OS_LOG_TYPE_DEFAULT, v99, buf, v100);
LABEL_114:
            ++v83;
            v84 += 52;
          }
          while (v83 < *v82);
        }
        if (v82[1])
        {
          v118 = 0;
          v119 = 0;
          v120 = (const void **)MEMORY[0x24BEDCDB0];
          v121 = 136447490;
          do
          {
            v122 = *((_QWORD *)v82 + 2);
            LOWORD(v121) = *(_WORD *)(v122 + v118);
            LOWORD(a2) = *(_WORD *)(v122 + v118 + 2);
            v123 = (double)v121 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            dispatch_get_specific(*v120);
            v124 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v124)
              v124(5, "%s:%i [L2] %0.6f command=0x%02x debug=0x%02x rssi=0x%04x", "_NFDriverLogLevel2Updated", 1227, v123, *(unsigned __int8 *)(v122 + v118 + 12), *(unsigned __int8 *)(v122 + v118 + 13), *(unsigned __int16 *)(v122 + v118 + 4));
            dispatch_get_specific(*v120);
            v125 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
            {
              v126 = *(unsigned __int8 *)(v122 + v118 + 12);
              v127 = *(unsigned __int8 *)(v122 + v118 + 13);
              v128 = *(unsigned __int16 *)(v122 + v118 + 4);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1227;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v123;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v126;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v127;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v128;
              _os_log_impl(&dword_216EC7000, v125, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] %0.6f command=0x%02x debug=0x%02x rssi=0x%04x", buf, 0x2Eu);
            }
            ++v119;
            v118 += 16;
          }
          while (v119 < v82[1]);
        }
        if (v82[2])
        {
          v129 = 0;
          v130 = 0;
          v131 = (const void **)MEMORY[0x24BEDCDB0];
          v132 = 136446978;
          do
          {
            v133 = *((_QWORD *)v82 + 4);
            LOWORD(v132) = *(_WORD *)(v133 + v129);
            LOWORD(a2) = *(_WORD *)(v133 + v129 + 2);
            v134 = (double)v132 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            dispatch_get_specific(*v131);
            v135 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v135)
              v135(5, "%s:%i [L2] %0.6f code=0x%04x", "_NFDriverLogLevel2Updated", 1235, v134, *(unsigned __int16 *)(v133 + v129 + 4));
            dispatch_get_specific(*v131);
            v136 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
            {
              v137 = *(unsigned __int16 *)(v133 + v129 + 4);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1235;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v134;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v137;
              _os_log_impl(&dword_216EC7000, v136, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] %0.6f code=0x%04x", buf, 0x22u);
            }
            ++v130;
            v129 += 6;
          }
          while (v130 < v82[2]);
        }
        if (v82[3])
        {
          v138 = 0;
          v139 = 0;
          v140 = (const void **)MEMORY[0x24BEDCDB0];
          v141 = 136448002;
          do
          {
            v142 = *((_QWORD *)v82 + 3);
            LOWORD(v141) = *(_WORD *)(v142 + v138);
            LOWORD(a2) = *(_WORD *)(v142 + v138 + 2);
            v143 = (double)v141 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            dispatch_get_specific(*v140);
            v144 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v144)
              v144(5, "%s:%i [L2] %0.6f response=0x%02x status=0x%04x debug=0x%02x vpp=%f ALMPhase=%.3f", "_NFDriverLogLevel2Updated", 1247, v143, *(unsigned __int8 *)(v142 + v138 + 4), *(unsigned __int16 *)(v142 + v138 + 6), *(unsigned __int8 *)(v142 + v138 + 8), *(float *)(v142 + v138 + 12), *(float *)(v142 + v138 + 16));
            dispatch_get_specific(*v140);
            v145 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
            {
              v146 = *(unsigned __int8 *)(v142 + v138 + 4);
              v147 = *(unsigned __int16 *)(v142 + v138 + 6);
              v148 = *(unsigned __int8 *)(v142 + v138 + 8);
              v149 = *(float *)(v142 + v138 + 12);
              v150 = *(float *)(v142 + v138 + 16);
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1247;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v143;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v146;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v147;
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v148;
              *(_WORD *)&buf[46] = 2048;
              *(double *)&buf[48] = v149;
              *(_WORD *)&buf[56] = 2048;
              *(double *)&v404 = v150;
              _os_log_impl(&dword_216EC7000, v145, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] %0.6f response=0x%02x status=0x%04x debug=0x%02x vpp=%f ALMPhase=%.3f", buf, 0x42u);
            }
            ++v139;
            v138 += 20;
          }
          while (v139 < v82[3]);
        }
        if (v82[4])
        {
          v151 = 0;
          v152 = 0;
          v153 = (const void **)MEMORY[0x24BEDCDB0];
          v154 = 136447234;
          do
          {
            v155 = *((_QWORD *)v82 + 5);
            LOWORD(v154) = *(_WORD *)(v155 + v151);
            LOWORD(a2) = *(_WORD *)(v155 + v151 + 2);
            v156 = (double)v154 / 1000.0 + (double)*(unint64_t *)&a2 / 1000000.0;
            dispatch_get_specific(*v153);
            v157 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v157)
              v157(5, "%s:%i [L2] %0.6f event=0x%02x debug=0x%02x", "_NFDriverLogLevel2Updated", 1256, v156, *(_DWORD *)(v155 + v151 + 4), *(unsigned __int8 *)(v155 + v151 + 8));
            dispatch_get_specific(*v153);
            v158 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
            {
              v159 = *(_DWORD *)(v155 + v151 + 4);
              v160 = *(unsigned __int8 *)(v155 + v151 + 8);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1256;
              *(_WORD *)&buf[18] = 2048;
              *(double *)&buf[20] = v156;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v159;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&buf[36] = v160;
              _os_log_impl(&dword_216EC7000, v158, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] %0.6f event=0x%02x debug=0x%02x", buf, 0x28u);
            }
            ++v152;
            v151 += 12;
          }
          while (v152 < v82[4]);
        }
        if (v82[6])
        {
          v161 = 0;
          v162 = 0;
          v163 = (const void **)MEMORY[0x24BEDCDB0];
          do
          {
            v164 = *((_QWORD *)v82 + 7);
            if (!v164)
              break;
            dispatch_get_specific(*v163);
            v165 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v165)
              v165(5, "%s:%i [L2] phase1Abrt=0x%02x phase2Abrt=0x%02x maxRfPulseAbrt=0x%02x successDetect=0x%02x", "_NFDriverLogLevel2Updated", 1265, *(_DWORD *)(v164 + v161), *(_DWORD *)(v164 + v161 + 4), *(_DWORD *)(v164 + v161 + 8), *(_DWORD *)(v164 + v161 + 12));
            dispatch_get_specific(*v163);
            v166 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
            {
              v167 = *(_DWORD *)(v164 + v161);
              v168 = *(_DWORD *)(v164 + v161 + 4);
              v170 = *(_DWORD *)(v164 + v161 + 8);
              v169 = *(_DWORD *)(v164 + v161 + 12);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "_NFDriverLogLevel2Updated";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1265;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v167;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = v168;
              *(_WORD *)&buf[30] = 1024;
              *(_DWORD *)&buf[32] = v170;
              *(_WORD *)&buf[36] = 1024;
              *(_DWORD *)&buf[38] = v169;
              _os_log_impl(&dword_216EC7000, v166, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [L2] phase1Abrt=0x%02x phase2Abrt=0x%02x maxRfPulseAbrt=0x%02x successDetect=0x%02x", buf, 0x2Au);
            }
            ++v162;
            v161 += 16;
          }
          while (v162 < v82[6]);
        }
      }
      return;
    case 'E':
      if (a6)
      {
        *(_QWORD *)&buf[16] = 0x3800000000;
        *(_QWORD *)&v410[16] = 0x2000000000;
        v171 = *((_OWORD *)a6 + 1);
        *(_OWORD *)&buf[24] = *(_OWORD *)a6;
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)v410 = 0;
        *(_QWORD *)&v410[8] = v410;
        *(_DWORD *)&v410[24] = 0;
        *(_OWORD *)&buf[40] = v171;
        *(_QWORD *)&buf[32] = 0;
        *(_DWORD *)&buf[40] = 0;
        v172 = a6[4];
        if ((_DWORD)v172)
        {
          v173 = malloc_type_calloc(1uLL, v172, 0xAED65257uLL);
          v174 = *(_QWORD *)&buf[8];
          *(_QWORD *)(*(_QWORD *)&buf[8] + 32) = v173;
          if (v173)
          {
            v175 = a6[4];
            *(_DWORD *)(v174 + 40) = v175;
            memcpy(v173, *((const void **)a6 + 1), v175);
          }
          else
          {
            v324 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v325 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v325)
              v325(3, "%s:%i No memory available", "_Callback_NFDriverNotifyGeneral", 1889);
            dispatch_get_specific(*v324);
            v326 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v326, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v399 = 136446466;
              v400 = "_Callback_NFDriverNotifyGeneral";
              v401 = 1024;
              v402 = 1889;
              _os_log_impl(&dword_216EC7000, v326, OS_LOG_TYPE_ERROR, "%{public}s:%i No memory available", v399, 0x12u);
            }
          }
        }
        v327 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
        v397[0] = MEMORY[0x24BDAC760];
        v397[1] = 0x40000000;
        v397[2] = sub_216EE8CC8;
        v397[3] = &unk_24D65EE78;
        v397[6] = v8;
        v397[4] = v410;
        v397[5] = buf;
        dispatch_async(v327, v397);
        _Block_object_dispose(v410, 8);
        _Block_object_dispose(buf, 8);
      }
      return;
    case 'F':
      v176 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v177 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v177)
        v177(3, "%s:%i ==== PLL UNLOCKED ====", "_Callback_NFDriverNotifyGeneral", 1927);
      dispatch_get_specific(*v176);
      v178 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1927;
        _os_log_impl(&dword_216EC7000, v178, OS_LOG_TYPE_ERROR, "%{public}s:%i ==== PLL UNLOCKED ====", buf, 0x12u);
      }
      v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
      v396[0] = MEMORY[0x24BDAC760];
      v396[1] = 0x40000000;
      v396[2] = sub_216EE8E08;
      v396[3] = &unk_24D65EE98;
      v396[4] = v8;
      v17 = v396;
      goto LABEL_373;
    case 'K':
      if (a6)
      {
        memset(buf, 0, 48);
        v179 = a6[2];
        v370 = *(_QWORD *)a6;
        v180 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v181 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        dispatch_get_specific(*v180);
        v182 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
        {
          v183 = a6[2];
          *(_DWORD *)v410 = 136315906;
          *(_QWORD *)&v410[4] = "_NFDriverLogLPCDDebug";
          *(_WORD *)&v410[12] = 1024;
          *(_DWORD *)&v410[14] = 1271;
          *(_WORD *)&v410[18] = 2082;
          *(_QWORD *)&v410[20] = "[lpcd]";
          v411 = 2048;
          v412 = v183;
          _os_log_impl(&dword_216EC7000, v182, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v410, 0x26u);
        }
        if (v181)
          v181(5, "%s:%i %s %lu bytes :", "_NFDriverLogLPCDDebug", 1271, "[lpcd]", a6[2]);
        if ((_DWORD)v179)
        {
          v184 = 0;
          do
          {
            v185 = 0;
            v186 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v184)];
            do
            {
              v187 = v185 + 1;
              v188 = v185 + 1 + v184;
              v189 = sprintf(v186, "0x%02X ", *(unsigned __int8 *)(v370 + v184 + v185));
              if (v185 > 6)
                break;
              v186 += v189;
              ++v185;
            }
            while (v188 < v179);
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v190 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v410 = 136446210;
              *(_QWORD *)&v410[4] = buf;
              _os_log_impl(&dword_216EC7000, v190, OS_LOG_TYPE_DEFAULT, "%{public}s", v410, 0xCu);
            }
            if (v181)
              v181(5, "%s", (const char *)buf);
            v184 += v187;
          }
          while (v188 < v179);
        }
      }
      return;
    case 'L':
      if (*(_BYTE *)(a4 + 57))
      {
        if (!a6)
          return;
        LOWORD(a1) = *((_WORD *)a6 + 2);
        v191 = (double)*(unint64_t *)&a1 / 1000.0;
        if (*a6 == 2)
        {
          v192 = v191 * -69.25 + 150.2;
          v193 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v194 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v194)
            v194(6, "%s:%i Got temperature notification SWIO2 / AIO2: %d, 0x%x -> %lf", "_Callback_NFDriverNotifyGeneral", 2242, *a6, *((unsigned __int16 *)a6 + 2), *(_QWORD *)&v192);
          dispatch_get_specific(*v193);
          v195 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
            goto LABEL_353;
          v196 = *a6;
          v197 = *((unsigned __int16 *)a6 + 2);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2242;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v196;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v197;
          *(_WORD *)&buf[30] = 2048;
          *(double *)&buf[32] = v192;
          v198 = "%{public}s:%i Got temperature notification SWIO2 / AIO2: %d, 0x%x -> %lf";
        }
        else
        {
          v192 = 4250.0 / (log(v191 * 2838800000.0 / (v191 * -107400.0 + 108720.0)) + 2.7416) + -273.15;
          v318 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v319 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v319)
            v319(6, "%s:%i Got temperature notification SWIO1 / AIO3: %d, 0x%x -> %lf", "_Callback_NFDriverNotifyGeneral", 2246, *a6, *((unsigned __int16 *)a6 + 2), *(_QWORD *)&v192);
          dispatch_get_specific(*v318);
          v195 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
            goto LABEL_353;
          v320 = *a6;
          v321 = *((unsigned __int16 *)a6 + 2);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2246;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v320;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v321;
          *(_WORD *)&buf[30] = 2048;
          *(double *)&buf[32] = v192;
          v198 = "%{public}s:%i Got temperature notification SWIO1 / AIO3: %d, 0x%x -> %lf";
        }
        _os_log_impl(&dword_216EC7000, v195, OS_LOG_TYPE_DEFAULT, v198, buf, 0x28u);
LABEL_353:
        v322 = *(_QWORD *)(v8 + 24);
        v323 = *(void (**)(_QWORD, double))(v322 + 176);
        if (v323)
          v323(*(_QWORD *)(v322 + 424), v192);
        return;
      }
      v290 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v291 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v291)
        v291(6, "%s:%i Dropping temperature notification", "_Callback_NFDriverNotifyGeneral", 2254);
      dispatch_get_specific(*v290);
      v201 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2254;
        v202 = "%{public}s:%i Dropping temperature notification";
        goto LABEL_334;
      }
      break;
    case 'N':
      v199 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v200 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v200)
        v200(6, "%s:%i CW detected!", "_Callback_NFDriverNotifyGeneral", 2286);
      dispatch_get_specific(*v199);
      v201 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2286;
      v202 = "%{public}s:%i CW detected!";
      goto LABEL_334;
    case 'O':
      v203 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v204 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v204)
        v204(5, "%s:%i LPCD assist completed successfully", "_Callback_NFDriverNotifyGeneral", 2333);
      dispatch_get_specific(*v203);
      v201 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2333;
      v202 = "%{public}s:%i LPCD assist completed successfully";
      goto LABEL_334;
    case 'P':
      if (*(_DWORD *)(a4 + 32))
        return;
      v205 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v206 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v206)
        v206(3, "%s:%i ==== UART ERROR ====", "_Callback_NFDriverNotifyGeneral", 1942);
      dispatch_get_specific(*v205);
      v207 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1942;
        _os_log_impl(&dword_216EC7000, v207, OS_LOG_TYPE_ERROR, "%{public}s:%i ==== UART ERROR ====", buf, 0x12u);
      }
      v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
      v395[0] = MEMORY[0x24BDAC760];
      v395[1] = 0x40000000;
      v395[2] = sub_216EE8E2C;
      v395[3] = &unk_24D65EEB8;
      v395[4] = v8;
      v17 = v395;
      goto LABEL_373;
    case 'R':
      if (!a6)
        return;
      v208 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v209 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v209)
        v209(6, "%s:%i LPCD Reference:0x%X, AGC Measured:0x%X", "_Callback_NFDriverNotifyGeneral", 1981, *(unsigned __int16 *)a6, *((unsigned __int16 *)a6 + 1));
      dispatch_get_specific(*v208);
      v210 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
        return;
      v211 = *(unsigned __int16 *)a6;
      v212 = *((unsigned __int16 *)a6 + 1);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1981;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v211;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v212;
      v202 = "%{public}s:%i LPCD Reference:0x%X, AGC Measured:0x%X";
      goto LABEL_295;
    case 'S':
      if (!a6)
        return;
      v213 = *(unsigned __int16 *)a6;
      if (*(_WORD *)a6)
      {
        v214 = *((_WORD *)a6 + 1);
        v215 = a6[1];
        v216 = *((unsigned __int16 *)a6 + 4);
        v217 = *((unsigned __int16 *)a6 + 5);
        v218 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v219 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v219)
          v219(6, "%s:%i RSSI stats count %d, min=%d, max=%d, average=%d", "_Callback_NFDriverNotifyGeneral", 1964, v213, v217, v216, v215 / v213);
        dispatch_get_specific(*v218);
        v220 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1964;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v213;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v217;
          *(_WORD *)&buf[30] = 1024;
          *(_DWORD *)&buf[32] = v216;
          *(_WORD *)&buf[36] = 1024;
          *(_DWORD *)&buf[38] = v215 / v213;
          _os_log_impl(&dword_216EC7000, v220, OS_LOG_TYPE_DEFAULT, "%{public}s:%i RSSI stats count %d, min=%d, max=%d, average=%d", buf, 0x2Au);
        }
        v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
        v388[0] = MEMORY[0x24BDAC760];
        v388[1] = 0x40000000;
        v388[2] = sub_216EE8E58;
        v388[3] = &unk_24D65EED8;
        v388[4] = v8;
        v389 = v213;
        v390 = v214;
        v391 = v215;
        v392 = v216;
        v393 = v217;
        v394 = v215 / v213;
        v17 = v388;
        goto LABEL_373;
      }
      v297 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v298 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v298)
        v298(6, "%s:%i RSSI stats with no sample", "_Callback_NFDriverNotifyGeneral", 1972);
      dispatch_get_specific(*v297);
      v201 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1972;
        v202 = "%{public}s:%i RSSI stats with no sample";
        goto LABEL_334;
      }
      return;
    case 'V':
      v221 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v222 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v222)
        v222(3, "%s:%i Flash counter exceeded notification. This is NOT expected unless you live in the 22nd century or later. File a radar and get a new device.", "_Callback_NFDriverNotifyGeneral", 2314);
      dispatch_get_specific(*v221);
      v223 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2314;
        _os_log_impl(&dword_216EC7000, v223, OS_LOG_TYPE_ERROR, "%{public}s:%i Flash counter exceeded notification. This is NOT expected unless you live in the 22nd century or later. File a radar and get a new device.", buf, 0x12u);
      }
      v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
      v373[0] = MEMORY[0x24BDAC760];
      v373[1] = 0x40000000;
      v373[2] = sub_216EE9368;
      v373[3] = &unk_24D65EFF8;
      v373[4] = v8;
      v17 = v373;
      goto LABEL_373;
    case 'W':
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v224 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v224)
        v224(3, "%s:%i TXLDO error!", "_Callback_NFDriverNotifyGeneral", 2290);
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v225 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v225, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2290;
        _os_log_impl(&dword_216EC7000, v225, OS_LOG_TYPE_ERROR, "%{public}s:%i TXLDO error!", buf, 0x12u);
      }
      if (a6)
      {
        v226 = a6[2];
        if ((_DWORD)v226)
        {
          memset(buf, 0, 48);
          v371 = *(_QWORD *)a6;
          v227 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v228 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v227);
          v229 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
          {
            v230 = a6[2];
            *(_DWORD *)v410 = 136315906;
            *(_QWORD *)&v410[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&v410[12] = 1024;
            *(_DWORD *)&v410[14] = 2294;
            *(_WORD *)&v410[18] = 2082;
            *(_QWORD *)&v410[20] = "[TXLDO]";
            v411 = 2048;
            v412 = v230;
            _os_log_impl(&dword_216EC7000, v229, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v410, 0x26u);
          }
          v369 = v8;
          if (v228)
            v228(5, "%s:%i %s %lu bytes :", "_Callback_NFDriverNotifyGeneral", 2294, "[TXLDO]", a6[2]);
          v231 = 0;
          do
          {
            v232 = 0;
            v233 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v231)];
            do
            {
              v234 = v232 + 1;
              v235 = v232 + 1 + v231;
              v236 = sprintf(v233, "0x%02X ", *(unsigned __int8 *)(v371 + v231 + v232));
              if (v232 > 6)
                break;
              v233 += v236;
              ++v232;
            }
            while (v235 < v226);
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v237 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v410 = 136446210;
              *(_QWORD *)&v410[4] = buf;
              _os_log_impl(&dword_216EC7000, v237, OS_LOG_TYPE_DEFAULT, "%{public}s", v410, 0xCu);
            }
            if (v228)
              v228(5, "%s", (const char *)buf);
            v231 += v234;
          }
          while (v235 < v226);
          v8 = v369;
          if (*(_BYTE *)(*(_QWORD *)(v369 + 24) + 724))
            postAnalyticsTxLdoErrorEvent();
        }
      }
      v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
      v374[0] = MEMORY[0x24BDAC760];
      v374[1] = 0x40000000;
      v374[2] = sub_216EE9344;
      v374[3] = &unk_24D65EFD8;
      v374[4] = v8;
      v17 = v374;
      goto LABEL_373;
    case 'X':
      v238 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v239 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v239)
        v239(6, "%s:%i ==== GPADC TEMPERATURE CONDITION NORMAL ====", "_Callback_NFDriverNotifyGeneral", 2068);
      dispatch_get_specific(*v238);
      v240 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2068;
        _os_log_impl(&dword_216EC7000, v240, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ==== GPADC TEMPERATURE CONDITION NORMAL ====", buf, 0x12u);
      }
      v241 = (0xBE24Fu >> sub_216EE90A8(*(_DWORD *)(*(_QWORD *)(v8 + 24) + 588), *(unsigned __int8 *)(*(_QWORD *)(v8 + 24) + 592))) & 1;
      v16 = *(NSObject **)(*(_QWORD *)(v8 + 24) + 536);
      v380[0] = MEMORY[0x24BDAC760];
      v380[1] = 0x40000000;
      v380[2] = sub_216EE9078;
      v380[3] = &unk_24D65EF58;
      v380[4] = v8;
      v381 = v241;
      v17 = v380;
      goto LABEL_373;
    case 'Y':
      if (a6)
      {
        v242 = a6[2];
        if ((_DWORD)v242)
        {
          memset(buf, 0, 48);
          v372 = *(_QWORD *)a6;
          v243 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v244 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v243);
          v245 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
          {
            v246 = a6[2];
            *(_DWORD *)v410 = 136315906;
            *(_QWORD *)&v410[4] = "_Callback_NFDriverNotifyGeneral";
            *(_WORD *)&v410[12] = 1024;
            *(_DWORD *)&v410[14] = 2327;
            *(_WORD *)&v410[18] = 2082;
            *(_QWORD *)&v410[20] = "[FLC_TRIMMING failed]";
            v411 = 2048;
            v412 = v246;
            _os_log_impl(&dword_216EC7000, v245, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v410, 0x26u);
          }
          if (v244)
            v244(5, "%s:%i %s %lu bytes :", "_Callback_NFDriverNotifyGeneral", 2327, "[FLC_TRIMMING failed]", a6[2]);
          v247 = 0;
          do
          {
            v248 = 0;
            v249 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v247)];
            do
            {
              v250 = v248 + 1;
              v251 = v248 + 1 + v247;
              v252 = sprintf(v249, "0x%02X ", *(unsigned __int8 *)(v372 + v247 + v248));
              if (v248 > 6)
                break;
              v249 += v252;
              ++v248;
            }
            while (v251 < v242);
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v253 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v410 = 136446210;
              *(_QWORD *)&v410[4] = buf;
              _os_log_impl(&dword_216EC7000, v253, OS_LOG_TYPE_DEFAULT, "%{public}s", v410, 0xCu);
            }
            if (v244)
              v244(5, "%s", (const char *)buf);
            v247 += v250;
          }
          while (v251 < v242);
          postAnalyticsFlcTrimmingErrorEvent();
        }
      }
      return;
    case 'Z':
      v254 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v255 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v255)
        v255(3, "%s:%i XTAL start error received", "_Callback_NFDriverNotifyGeneral", 2310);
      dispatch_get_specific(*v254);
      v256 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v256, OS_LOG_TYPE_ERROR))
        return;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyGeneral";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2310;
      v202 = "%{public}s:%i XTAL start error received";
      goto LABEL_323;
    default:
      goto LABEL_296;
  }
}

uint64_t sub_216ECDEEC(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, uint64_t))(v1 + 8);
    if (v2)
      return v2(*(_QWORD *)(v1 + 256), 1);
  }
  return result;
}

BOOL sub_216ECDF14(uint64_t a1)
{
  if (a1)
  {
    *(_QWORD *)(a1 + 32) = sub_216ECDF74;
    *(_QWORD *)(a1 + 40) = sub_216ECE060;
    *(_QWORD *)(a1 + 48) = sub_216ECE14C;
    *(_QWORD *)(a1 + 56) = sub_216ECE238;
    *(_QWORD *)(a1 + 64) = sub_216ECE33C;
    *(_QWORD *)(a1 + 72) = sub_216ECE428;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 20) = 4;
  }
  return a1 != 0;
}

uint64_t sub_216ECDF74()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for UICC!", "SetPower_UICC", 23);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "SetPower_UICC";
    v6 = 1024;
    v7 = 23;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_216ECE060()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for UICC!", "GetATR_UICC", 29);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "GetATR_UICC";
    v6 = 1024;
    v7 = 29;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_216ECE14C()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for UICC!", "GetOSInfo_UICC", 35);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "GetOSInfo_UICC";
    v6 = 1024;
    v7 = 35;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_216ECE238(uint64_t a1, uint64_t a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for UICC!", "GetOSMode_UICC", 41);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v9 = "GetOSMode_UICC";
    v10 = 1024;
    v11 = 41;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  *(_DWORD *)(a2 + 3552) = *(_DWORD *)(a1 + 20);
  return 0;
}

uint64_t sub_216ECE33C()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for UICC!", "GetOSUpdateLog_UICC", 48);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "GetOSUpdateLog_UICC";
    v6 = 1024;
    v7 = 48;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_216ECE428(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for UICC!", "GetAttackCounterLog_UICC", 54);
  dispatch_get_specific(*v5);
  v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v10 = "GetAttackCounterLog_UICC";
    v11 = 1024;
    v12 = 54;
    _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for UICC!", buf, 0x12u);
  }
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = 0;
  return 0;
}

uint64_t sub_216ECE534(uint64_t a1, uint64_t a2, int a3, int a4, _WORD *a5)
{
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  uint64_t v17;
  const void **v18;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v20;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v10 = NFDataCreateWithBytes();
  v11 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, 0x80u, 0xCAu, BYTE1(a3), a3, 0, v10);
  NFDataRelease();
  if (v11)
  {
    v12 = v11[1];
    if (v12 >= 2)
    {
      v13 = __rev16(*(unsigned __int16 *)(v12 + *v11 - 2));
      if (!a5)
      {
LABEL_13:
        if (v13 == 36864)
        {
          v17 = NFDataCreateWithBytes();
          NFDataRelease();
          return v17;
        }
        v18 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(4, "%s:%i Returned error: 0x%04x for (0x%x/0x%x)", "NFDriverSecureElementGetDataWithOS", 63, v13, a3, a4);
        dispatch_get_specific(*v18);
        v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136447234;
          v23 = "NFDriverSecureElementGetDataWithOS";
          v24 = 1024;
          v25 = 63;
          v26 = 1024;
          v27 = v13;
          v28 = 1024;
          v29 = a3;
          v30 = 1024;
          v31 = a4;
          _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x for (0x%x/0x%x)", buf, 0x24u);
        }
        NFDataRelease();
        return 0;
      }
    }
    else
    {
      v13 = 0;
      if (!a5)
        goto LABEL_13;
    }
    *a5 = v13;
    goto LABEL_13;
  }
  v14 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15)
    v15(3, "%s:%i Failed to get data", "NFDriverSecureElementGetDataWithOS", 49);
  dispatch_get_specific(*v14);
  v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v23 = "NFDriverSecureElementGetDataWithOS";
    v24 = 1024;
    v25 = 49;
    _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get data", buf, 0x12u);
  }
  if (!a5)
    return 0;
  v17 = 0;
  *a5 = 0;
  return v17;
}

unsigned __int8 **sub_216ECE7E4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 **result;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t i;
  int v14;

  result = (unsigned __int8 **)sub_216ECE534(a1, 2, 254, 57123, 0);
  if (result)
  {
    if ((unint64_t)result[1] >= 4)
    {
      v4 = *result;
      v5 = **result << 24;
      *(_DWORD *)(a2 + 3564) = v5;
      v6 = v5 | (v4[1] << 16);
      *(_DWORD *)(a2 + 3564) = v6;
      v7 = v6 | (v4[2] << 8);
      *(_DWORD *)(a2 + 3564) = v7;
      v8 = v7 | v4[3];
      *(_DWORD *)(a2 + 3564) = v8;
      if (v8 >= 3)
      {
        v9 = v8 & 0xFFFFFF;
        if ((v8 & 0xFFFFFF) == 0x535443)
        {
LABEL_8:
          v12 = 1;
          *(_DWORD *)(a2 + 3536) = 1;
        }
        else
        {
          v10 = 4u;
          while (v10 != 32)
          {
            v11 = *(_DWORD *)&aCts[v10];
            v10 += 4;
            if (v9 == v11)
              goto LABEL_8;
          }
          v12 = 0;
        }
        for (i = 0; i != 4; ++i)
        {
          if (v9 == dword_216F07D10[i])
          {
            v14 = 2;
            goto LABEL_19;
          }
        }
        if ((v12 & 1) != 0)
          return (unsigned __int8 **)NFDataRelease();
        if (v8 < 0)
          v14 = 1;
        else
          v14 = 2;
LABEL_19:
        *(_DWORD *)(a2 + 3536) = v14;
      }
    }
    return (unsigned __int8 **)NFDataRelease();
  }
  return result;
}

BOOL sub_216ECE8F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  const void **v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unsigned int v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  _BOOL8 result;
  NSObject *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  BOOL v18;
  unsigned int v19;
  void **v20;
  void **v21;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  uint64_t v31;
  int v32;
  int v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  const char *v39;
  uint32_t v40;
  void (*v41)(uint64_t, const char *, ...);
  NSObject *v42;
  uint64_t v43;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v45;
  uint64_t v48;
  uint64_t v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  _BYTE v55[10];
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCAu, 0x7Fu, 0x21u, 0, 0);
  v3 = (const void **)MEMORY[0x24BEDCDB0];
  if (v2)
  {
    v6 = v2;
    v4 = *v2;
    v5 = v6[1];
    if (v5 >= 2)
      v7 = bswap32(*(unsigned __int16 *)(v4 + v5 - 2)) >> 16;
    else
      LOWORD(v7) = 0;
    v48 = NFDataCreateWithBytes();
    NFDataRelease();
    v12 = 0;
    v13 = 0;
    while (1)
    {
      if (BYTE1(v7) == 97)
      {
        v14 = NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xC0u, 0, 0, v7, 0);
      }
      else
      {
        if ((unsigned __int16)v7 != 25360)
          goto LABEL_15;
        v14 = NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCCu, 0x7Fu, 0x21u, 0, 0);
      }
      v12 = v14;
LABEL_15:
      if (!v12)
      {
        dispatch_get_specific(*v3);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(3, "%s:%i Transceive failure", "NFDriverSecureElementGetCertificates", 303);
        dispatch_get_specific(*v3);
        v45 = NFSharedLogGetLogger();
        result = os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
        if (result)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "NFDriverSecureElementGetCertificates";
          v52 = 1024;
          v53 = 303;
          v11 = v45;
          goto LABEL_59;
        }
        return result;
      }
      v15 = *(_QWORD *)(v12 + 8);
      v16 = v15 >= 2;
      v17 = v15 - 2;
      if (v16)
      {
        v19 = *(unsigned __int16 *)(*(_QWORD *)v12 + v17);
        if (v17)
        {
          v20 = (void **)NFDataCreateWithLength();
          if (v20)
          {
            v21 = v20;
            memcpy(*v20, *(const void **)v48, *(_QWORD *)(v48 + 8));
            memcpy((char *)*v21 + *(_QWORD *)(v48 + 8), *(const void **)v12, *(_QWORD *)(v12 + 8) - 2);
            NFDataRelease();
            v48 = (uint64_t)v21;
          }
          NFDataRelease();
          v12 = 0;
        }
        v7 = __rev16(v19);
        v18 = v7 == 25360;
        if (v7 != 36864 && v7 != 25360)
          goto LABEL_50;
        v23 = TLVCreateWithDataMixed();
        v49 = v23;
        if (v23)
        {
          v24 = v23;
          if (*(_DWORD *)(a1 + 20) != 6 || *(_DWORD *)(v23 + 32) != 32545 || (v24 = *(_QWORD *)(v23 + 16)) != 0)
          {
            do
            {
              if (v13 > 2)
              {
                dispatch_get_specific(*v3);
                v29 = NFLogGetLogger();
                if (v29)
                {
                  v30 = (void (*)(uint64_t, const char *, ...))v29;
                  v31 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
                  v32 = *(_DWORD *)(v24 + 32);
                  v33 = sub_216ECEEF0(*(_QWORD *)(v24 + 16));
                  v30(3, "%s:%i Not enough storage for cert %d (tag 0x%x). Len = %lu, type = %d !", "NFDriverSecureElementGetCertificates", 346, v13, v32, v31, v33);
                }
                dispatch_get_specific(*v3);
                v34 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                  goto LABEL_44;
                v35 = *(_DWORD *)(v24 + 32);
                v36 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
                v37 = sub_216ECEEF0(*(_QWORD *)(v24 + 16));
                *(_DWORD *)buf = 136447490;
                v51 = "NFDriverSecureElementGetCertificates";
                v52 = 1024;
                v53 = 346;
                v54 = 1024;
                *(_DWORD *)v55 = v13;
                *(_WORD *)&v55[4] = 1024;
                *(_DWORD *)&v55[6] = v35;
                v56 = 2048;
                v57 = v36;
                v58 = 1024;
                v59 = v37;
                v38 = v34;
                v39 = "%{public}s:%i Not enough storage for cert %d (tag 0x%x). Len = %lu, type = %d !";
                v40 = 46;
              }
              else
              {
                if (*(_QWORD *)(*(_QWORD *)(v24 + 40) + 8) <= 0x400uLL)
                {
                  v25 = sub_216ECEEF0(*(_QWORD *)(v24 + 16));
                  if ((v25 - 1) <= 2)
                  {
                    v26 = a2 + 1040 * v13;
                    *(_BYTE *)(v26 + 1032) = v25;
                    v27 = *(_QWORD *)(v24 + 40);
                    v28 = *(_QWORD *)(v27 + 8);
                    *(_QWORD *)(v26 + 1024) = v28;
                    memcpy((void *)v26, *(const void **)v27, v28);
                    ++v13;
                  }
                  goto LABEL_44;
                }
                dispatch_get_specific(*v3);
                v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v41)
                  v41(4, "%s:%i Certificate too long: %zu", "NFDriverSecureElementGetCertificates", 343, *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8));
                dispatch_get_specific(*v3);
                v42 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
                  goto LABEL_44;
                v43 = *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8);
                *(_DWORD *)buf = 136446722;
                v51 = "NFDriverSecureElementGetCertificates";
                v52 = 1024;
                v53 = 343;
                v54 = 2048;
                *(_QWORD *)v55 = v43;
                v38 = v42;
                v39 = "%{public}s:%i Certificate too long: %zu";
                v40 = 28;
              }
              _os_log_impl(&dword_216EC7000, v38, OS_LOG_TYPE_ERROR, v39, buf, v40);
LABEL_44:
              v24 = *(_QWORD *)(v24 + 24);
            }
            while (v24);
          }
        }
        else
        {
          NFDataPrintAsHexString();
        }
        if (v49)
          TLVRelease();
        NFDataRelease();
        v48 = NFDataCreateWithLength();
        goto LABEL_50;
      }
      v18 = 0;
      LOWORD(v7) = 0;
LABEL_50:
      if (!v18 && (v7 & 0xFF00) != 0x6100)
      {
        if (v48)
          NFDataRelease();
        return 1;
      }
    }
  }
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8)
    v8(3, "%s:%i Transceive failure", "NFDriverSecureElementGetCertificates", 256);
  dispatch_get_specific(*v3);
  v9 = NFSharedLogGetLogger();
  result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    v51 = "NFDriverSecureElementGetCertificates";
    v52 = 1024;
    v53 = 256;
    v11 = v9;
LABEL_59:
    _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Transceive failure", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_216ECEEF0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 **v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  const void **v12;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v14;
  uint64_t result;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v2 = 0;
LABEL_29:
    v12 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Unknow Key Usage 0x%x", "_getCertificateType", 232, v2);
    dispatch_get_specific(*v12);
    v14 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if ((_DWORD)result)
    {
      *(_DWORD *)buf = 136446722;
      v17 = "_getCertificateType";
      v18 = 1024;
      v19 = 232;
      v20 = 1024;
      v21 = v2;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknow Key Usage 0x%x", buf, 0x18u);
      return 0;
    }
    return result;
  }
  LODWORD(v1) = 0;
  v2 = 0;
  do
  {
    v3 = *(_DWORD *)(a1 + 32);
    if (v3 == 32585)
    {
      v1 = *(_QWORD *)(a1 + 16);
      if (!v1)
        goto LABEL_21;
      while (1)
      {
        if (*(_DWORD *)(v1 + 32) == 240)
        {
          v7 = *(unsigned __int8 ***)(v1 + 40);
          if (!v7 || !v7[1])
          {
            LODWORD(v1) = 0;
            goto LABEL_21;
          }
          v8 = **v7;
          if (!v8)
          {
            LODWORD(v1) = 32;
            goto LABEL_19;
          }
          if (v8 == 1)
            break;
        }
        v1 = *(_QWORD *)(v1 + 24);
        if (!v1)
          goto LABEL_21;
      }
      LODWORD(v1) = 48;
    }
    else if (v3 == 149
           && (v4 = *(unsigned __int8 ***)(a1 + 40), (v5 = v4[1]) != 0)
           && (v6 = *v4, v2 = *v6, v5 != (unsigned __int8 *)1))
    {
      v2 = v6[1] | (v2 << 8);
      if (!(_DWORD)v1)
        goto LABEL_21;
    }
    else
    {
LABEL_19:
      if (!(_DWORD)v1)
        goto LABEL_21;
    }
    if (v2)
      break;
LABEL_21:
    a1 = *(_QWORD *)(a1 + 24);
  }
  while (a1);
  if (v2 == 33280)
  {
    v9 = (_DWORD)v1 == 48;
    v10 = 2;
    v11 = 4;
    goto LABEL_34;
  }
  if (v2 == 130)
    return 1;
  if (v2 != 128)
    goto LABEL_29;
  v9 = (_DWORD)v1 == 48;
  v10 = 3;
  v11 = 5;
LABEL_34:
  if (v9)
    return v11;
  else
    return v10;
}

void sub_216ECF0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  unsigned int v6;
  const void **v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  unsigned __int16 **v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned __int16 **v18;
  int v19;
  int v20;
  unsigned __int16 **v21;
  unsigned __int16 *v22;
  unsigned __int16 **v23;
  int v24;
  int v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  int v28;
  NSObject *v29;
  const char *v30;
  uint32_t v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  void (*v34)(uint64_t, const char *, ...);
  NSObject *v35;
  void (*v36)(uint64_t, const char *, ...);
  NSObject *v37;
  void (*v38)(uint64_t, const char *, ...);
  NSObject *v39;
  void (*v40)(uint64_t, const char *, ...);
  NSObject *v41;
  int v42;
  void (*v43)(uint64_t, const char *, ...);
  NSObject *v44;
  uint64_t v45;
  void (*v46)(uint64_t, const char *, ...);
  int *v47;
  char *v48;
  int *v49;
  NSObject *v50;
  int *v51;
  char *v52;
  int v53;
  const void **v54;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v56;
  const void **v57;
  void (*v58)(uint64_t, const char *, ...);
  const void **v59;
  void (*v60)(uint64_t, const char *, ...);
  NSObject *v61;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  _BYTE v67[10];
  int v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, 0x80u, 0xAAu, 3u, 0, 0, 0);
  if (v4)
  {
    v5 = v4[1];
    if (v5 < 2)
    {
      v6 = 0;
LABEL_85:
      v54 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(4, "%s:%i Returned error: 0x%04x", "NFDriverSecureElementGetMigrationInfoJCOP", 396, v6);
      dispatch_get_specific(*v54);
      v56 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
        v64 = 1024;
        v65 = 396;
        v66 = 1024;
        *(_DWORD *)v67 = v6;
        _os_log_impl(&dword_216EC7000, v56, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
      }
      NFDataRelease();
      return;
    }
    v6 = __rev16(*(unsigned __int16 *)(*v4 + v5 - 2));
    if (v6 != 36864)
      goto LABEL_85;
    NFDataCreateWithBytes();
    NFDataRelease();
    v11 = TLVCreateWithData();
    NFDataRelease();
    if (v11)
    {
      if (*(_DWORD *)(v11 + 32) == 192)
      {
        v12 = TLVCreateWithData();
        if (v12)
        {
          v13 = v12;
          v14 = (const void **)MEMORY[0x24BEDCDB0];
          while (1)
          {
            switch(*(_DWORD *)(v13 + 32))
            {
              case 0xC8:
                v15 = *(unsigned __int16 ***)(v13 + 40);
                if (v15[1] == (unsigned __int16 *)4)
                {
                  v16 = *v15;
                  v17 = __rev16(*v16);
                  if (v17 == *(unsigned __int16 *)(a3 + 3570))
                  {
                    *(_WORD *)(a3 + 3572) = bswap32(v16[1]) >> 16;
                  }
                  else
                  {
                    dispatch_get_specific(*v14);
                    v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                    if (v40)
                      v40(4, "%s:%i ISD sequence counter %d does not match migration update counter %d", "NFDriverSecureElementGetMigrationInfoJCOP", 421, *(unsigned __int16 *)(a3 + 3570), v17);
                    dispatch_get_specific(*v14);
                    v41 = NFSharedLogGetLogger();
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
                    {
                      v42 = *(unsigned __int16 *)(a3 + 3570);
                      *(_DWORD *)buf = 136446978;
                      v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
                      v64 = 1024;
                      v65 = 421;
                      v66 = 1024;
                      *(_DWORD *)v67 = v42;
                      *(_WORD *)&v67[4] = 1024;
                      *(_DWORD *)&v67[6] = v17;
                      v29 = v41;
                      v30 = "%{public}s:%i ISD sequence counter %d does not match migration update counter %d";
                      v31 = 30;
                      goto LABEL_54;
                    }
                  }
                }
                else
                {
                  dispatch_get_specific(*v14);
                  v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v32)
                    v32(4, "%s:%i Invalid length for 0xC8", "NFDriverSecureElementGetMigrationInfoJCOP", 414);
                  dispatch_get_specific(*v14);
                  v33 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
                    v64 = 1024;
                    v65 = 414;
                    v29 = v33;
                    v30 = "%{public}s:%i Invalid length for 0xC8";
                    goto LABEL_53;
                  }
                }
                goto LABEL_79;
              case 0xC9:
                v18 = *(unsigned __int16 ***)(v13 + 40);
                if (v18[1] == (unsigned __int16 *)2)
                {
                  v19 = __rev16(**v18);
                  if (v19 > 39834)
                  {
                    switch(v19)
                    {
                      case 39835:
                        v20 = 3;
                        break;
                      case 42356:
                        v20 = 5;
                        break;
                      case 47545:
                        v20 = 4;
                        break;
                      default:
LABEL_81:
                        dispatch_get_specific(*v14);
                        v45 = NFLogGetLogger();
                        if (v45)
                        {
                          v46 = (void (*)(uint64_t, const char *, ...))v45;
                          v47 = __error();
                          v48 = strerror(*v47);
                          v49 = __error();
                          v46(3, "%s:%i \"%s\" errno=%d Unknown migration state: 0x%04x", "NFDriverSecureElementGetMigrationInfoJCOP", 443, v48, *v49, v19);
                        }
                        dispatch_get_specific(*v14);
                        v50 = NFSharedLogGetLogger();
                        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
                        {
                          v51 = __error();
                          v52 = strerror(*v51);
                          v53 = *__error();
                          *(_DWORD *)buf = 136447234;
                          v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
                          v64 = 1024;
                          v65 = 443;
                          v66 = 2080;
                          *(_QWORD *)v67 = v52;
                          *(_WORD *)&v67[8] = 1024;
                          v68 = v53;
                          v69 = 1024;
                          v70 = v19;
                          v29 = v50;
                          v30 = "%{public}s:%i \"%s\" errno=%d Unknown migration state: 0x%04x";
                          v31 = 40;
                          goto LABEL_54;
                        }
                        goto LABEL_79;
                    }
                  }
                  else
                  {
                    switch(v19)
                    {
                      case 13107:
                        v20 = 6;
                        break;
                      case 23130:
                        v20 = 1;
                        break;
                      case 34695:
                        v20 = 2;
                        break;
                      default:
                        goto LABEL_81;
                    }
                  }
                  *(_DWORD *)(a3 + 3540) = v20;
                }
                else
                {
                  dispatch_get_specific(*v14);
                  v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v34)
                    v34(4, "%s:%i Invalid length for 0xC9", "NFDriverSecureElementGetMigrationInfoJCOP", 431);
                  dispatch_get_specific(*v14);
                  v35 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
                    v64 = 1024;
                    v65 = 431;
                    v29 = v35;
                    v30 = "%{public}s:%i Invalid length for 0xC9";
                    goto LABEL_53;
                  }
                }
LABEL_79:
                v13 = *(_QWORD *)(v13 + 24);
                if (!v13)
                  goto LABEL_99;
                break;
              case 0xCA:
                v21 = *(unsigned __int16 ***)(v13 + 40);
                if (v21[1] == (unsigned __int16 *)4)
                {
                  v22 = *v21;
                  *(_WORD *)(a3 + 3574) = bswap32(*v22) >> 16;
                  *(_WORD *)(a3 + 3576) = bswap32(v22[1]) >> 16;
                }
                else
                {
                  dispatch_get_specific(*v14);
                  v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v36)
                    v36(4, "%s:%i Invalid length for 0xCA", "NFDriverSecureElementGetMigrationInfoJCOP", 450);
                  dispatch_get_specific(*v14);
                  v37 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
                    v64 = 1024;
                    v65 = 450;
                    v29 = v37;
                    v30 = "%{public}s:%i Invalid length for 0xCA";
                    goto LABEL_53;
                  }
                }
                goto LABEL_79;
              case 0xCB:
                v23 = *(unsigned __int16 ***)(v13 + 40);
                if (v23[1] != (unsigned __int16 *)2)
                {
                  dispatch_get_specific(*v14);
                  v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v38)
                    v38(4, "%s:%i Invalid length for 0xCB", "NFDriverSecureElementGetMigrationInfoJCOP", 461);
                  dispatch_get_specific(*v14);
                  v39 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
                    v64 = 1024;
                    v65 = 461;
                    v29 = v39;
                    v30 = "%{public}s:%i Invalid length for 0xCB";
LABEL_53:
                    v31 = 18;
                    goto LABEL_54;
                  }
                  goto LABEL_79;
                }
                v24 = __rev16(**v23);
                if (v24 <= 23129)
                {
                  if (v24)
                  {
                    if (v24 != 13260)
                    {
LABEL_70:
                      dispatch_get_specific(*v14);
                      v43 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      if (v43)
                        v43(4, "%s:%i Invalid context 0x%02x", "NFDriverSecureElementGetMigrationInfoJCOP", 481, v24);
                      dispatch_get_specific(*v14);
                      v44 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)buf = 136446722;
                        v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
                        v64 = 1024;
                        v65 = 481;
                        v66 = 1024;
                        *(_DWORD *)v67 = v24;
                        v29 = v44;
                        v30 = "%{public}s:%i Invalid context 0x%02x";
                        goto LABEL_36;
                      }
                      goto LABEL_79;
                    }
                    v25 = 4;
                  }
                  else
                  {
                    v25 = 1;
                  }
                }
                else
                {
                  switch(v24)
                  {
                    case 23130:
                      v25 = 3;
                      break;
                    case 42405:
                      v25 = 2;
                      break;
                    case 52275:
                      v25 = 5;
                      break;
                    default:
                      goto LABEL_70;
                  }
                }
                *(_DWORD *)(a3 + 3544) = v25;
                goto LABEL_79;
              default:
                dispatch_get_specific(*v14);
                v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v26)
                  v26(4, "%s:%i Unexpected element found in status container: 0x%04x", "NFDriverSecureElementGetMigrationInfoJCOP", 487, *(_DWORD *)(v13 + 32));
                dispatch_get_specific(*v14);
                v27 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
                {
                  v28 = *(_DWORD *)(v13 + 32);
                  *(_DWORD *)buf = 136446722;
                  v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
                  v64 = 1024;
                  v65 = 487;
                  v66 = 1024;
                  *(_DWORD *)v67 = v28;
                  v29 = v27;
                  v30 = "%{public}s:%i Unexpected element found in status container: 0x%04x";
LABEL_36:
                  v31 = 24;
LABEL_54:
                  _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, v30, buf, v31);
                }
                goto LABEL_79;
            }
          }
        }
LABEL_99:
        TLVRelease();
      }
      else
      {
        v59 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v60 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v60)
          v60(4, "%s:%i Could not find status container", "NFDriverSecureElementGetMigrationInfoJCOP", 496);
        dispatch_get_specific(*v59);
        v61 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
          v64 = 1024;
          v65 = 496;
          _os_log_impl(&dword_216EC7000, v61, OS_LOG_TYPE_ERROR, "%{public}s:%i Could not find status container", buf, 0x12u);
        }
      }
      TLVRelease();
      return;
    }
    v57 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v58 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v58)
      v58(3, "%s:%i Failed to parse TLV", "NFDriverSecureElementGetMigrationInfoJCOP", 501);
    dispatch_get_specific(*v57);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
      v64 = 1024;
      v65 = 501;
      v10 = "%{public}s:%i Failed to parse TLV";
      goto LABEL_8;
    }
  }
  else
  {
    v7 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8)
      v8(4, "%s:%i Transceive failure", "NFDriverSecureElementGetMigrationInfoJCOP", 390);
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v63 = "NFDriverSecureElementGetMigrationInfoJCOP";
      v64 = 1024;
      v65 = 390;
      v10 = "%{public}s:%i Transceive failure";
LABEL_8:
      _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, v10, buf, 0x12u);
    }
  }
}

BOOL sub_216ECFB60(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  _BYTE *v12;
  const void **v13;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v15;
  const void **v16;
  void (*v17)(uint64_t, const char *, ...);
  NSObject *v18;
  _BOOL8 result;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  const void **v23;
  void (*v24)(uint64_t, const char *, ...);
  NSObject *v25;
  const void **v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  const void **v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  const void **v39;
  void (*v40)(uint64_t, const char *, ...);
  NSObject *v41;
  const char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint32_t v45;
  const void **v46;
  void (*v47)(uint64_t, const char *, ...);
  NSObject *v48;
  uint64_t v49;
  const void **v50;
  size_t v51;
  const void **v52;
  void (*v53)(uint64_t, const char *, ...);
  NSObject *v54;
  const void **v55;
  void (*v56)(uint64_t, const char *, ...);
  NSObject *v57;
  uint64_t v58;
  unsigned __int16 **v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  const void **v63;
  void (*v64)(uint64_t, const char *, ...);
  NSObject *v65;
  const void **v66;
  void (*v67)(uint64_t, const char *, ...);
  NSObject *v68;
  unsigned __int16 *v69;
  const void **v71;
  void (*v72)(uint64_t, const char *, ...);
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  const void **v76;
  void (*v77)(uint64_t, const char *, ...);
  NSObject *v78;
  int v79;
  int v80;
  int v81;
  const void **v82;
  void (*v83)(uint64_t, const char *, ...);
  uint64_t v84;
  unsigned __int16 v85;
  uint8_t buf[4];
  const char *v87;
  __int16 v88;
  int v89;
  __int16 v90;
  _BYTE v91[10];
  __int16 v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x24BDAC8D0];
  v85 = 0;
  v8 = NFDataCreateWithBytes();
  NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v8, &v85);
  NFDataRelease();
  switch(v85)
  {
    case 0x6614u:
      v13 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(5, "%s:%i JCOP OS Update Mode detected", "NFDriverSecureElementGetOSInfoJCOP", 560);
      dispatch_get_specific(*v13);
      v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v87 = "NFDriverSecureElementGetOSInfoJCOP";
        v88 = 1024;
        v89 = 560;
        _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i JCOP OS Update Mode detected", buf, 0x12u);
      }
      *(_BYTE *)(a2 + 3584) = 1;
      v12 = (_BYTE *)(a2 + 3583);
      if (*(_BYTE *)(a2 + 3583))
        goto LABEL_27;
LABEL_16:
      sub_216ECE7E4(a1, a2);
      if (!*(_BYTE *)(a2 + 3583))
      {
        if (!*(_BYTE *)(a2 + 3584))
        {
          if (a3)
            a3(a1, a2);
          else
            sub_216ECE8F0(a1, a2);
        }
        if (!*v12 && !*(_BYTE *)(a2 + 3584))
          goto LABEL_29;
      }
      goto LABEL_27;
    case 0x9000u:
      v12 = (_BYTE *)(a2 + 3583);
      *(_WORD *)(a2 + 3583) = 0;
      goto LABEL_16;
    case 0x66A5u:
      v9 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10)
        v10(5, "%s:%i Restricted Mode detected", "NFDriverSecureElementGetOSInfoJCOP", 556);
      dispatch_get_specific(*v9);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v87 = "NFDriverSecureElementGetOSInfoJCOP";
        v88 = 1024;
        v89 = 556;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Restricted Mode detected", buf, 0x12u);
      }
      v12 = (_BYTE *)(a2 + 3583);
      *(_BYTE *)(a2 + 3583) = 1;
LABEL_27:
      v20 = NFDataCreateWithBytes();
      if (!NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v20, &v85))
      {
        v26 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v27)
          v27(3, "%s:%i Returned error: 0x%04x", "NFDriverSecureElementGetOSInfoJCOP", 591, v85);
        dispatch_get_specific(*v26);
        v28 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          goto LABEL_40;
        *(_DWORD *)buf = 136446722;
        v87 = "NFDriverSecureElementGetOSInfoJCOP";
        v88 = 1024;
        v89 = 591;
        v90 = 1024;
        *(_DWORD *)v91 = v85;
LABEL_39:
        _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
LABEL_40:
        NFDataRelease();
        return 0;
      }
      NFDataRelease();
      sub_216ECE7E4(a1, a2);
LABEL_29:
      v21 = sub_216ECE534(a1, 0, 254, 57120, 0);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 8);
        if (v22 - 48 > 0xFFFFFFFFFFFFFFCELL)
        {
          memcpy((void *)(a2 + 3376), *(const void **)v21, v22);
          *(_BYTE *)(a2 + 3376 + v22) = 0;
        }
        else
        {
          v23 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v24)
            v24(4, "%s:%i Platform id too long: %ld", "NFDriverSecureElementGetOSInfoJCOP", 611, v22);
          dispatch_get_specific(*v23);
          v25 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v87 = "NFDriverSecureElementGetOSInfoJCOP";
            v88 = 1024;
            v89 = 611;
            v90 = 2048;
            *(_QWORD *)v91 = v22;
            _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i Platform id too long: %ld", buf, 0x1Cu);
          }
        }
        NFDataRelease();
      }
      else
      {
        v29 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v30)
          v30(4, "%s:%i Failed to get platform identifier", "NFDriverSecureElementGetOSInfoJCOP", 606);
        dispatch_get_specific(*v29);
        v31 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v87 = "NFDriverSecureElementGetOSInfoJCOP";
          v88 = 1024;
          v89 = 606;
          _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get platform identifier", buf, 0x12u);
        }
      }
      v32 = (uint64_t *)sub_216ECE534(a1, 0, 254, 57164, 0);
      if (!v32)
      {
        v46 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v47)
          v47(4, "%s:%i Failed to get JCOP Version", "NFDriverSecureElementGetOSInfoJCOP", 627);
        dispatch_get_specific(*v46);
        v48 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v87 = "NFDriverSecureElementGetOSInfoJCOP";
          v88 = 1024;
          v89 = 627;
          _os_log_impl(&dword_216EC7000, v48, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get JCOP Version", buf, 0x12u);
        }
LABEL_63:
        v49 = sub_216ECE534(a1, 0, 254, 57121, 0);
        if (v49)
        {
          v50 = (const void **)v49;
          v51 = *(_QWORD *)(v49 + 8);
          if (v51 < 0x19)
          {
            memcpy((void *)(a2 + 3456), *(const void **)v49, v51);
            memcpy((void *)(a2 + 3480), *v50, v51);
          }
          else
          {
            v52 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v53 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v53)
              v53(4, "%s:%i serial number too long: %ld", "NFDriverSecureElementGetOSInfoJCOP", 648, v51);
            dispatch_get_specific(*v52);
            v54 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              v87 = "NFDriverSecureElementGetOSInfoJCOP";
              v88 = 1024;
              v89 = 648;
              v90 = 2048;
              *(_QWORD *)v91 = v51;
              _os_log_impl(&dword_216EC7000, v54, OS_LOG_TYPE_ERROR, "%{public}s:%i serial number too long: %ld", buf, 0x1Cu);
            }
          }
          NFDataRelease();
        }
        else
        {
          v55 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v56 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v56)
            v56(4, "%s:%i Failed to get serial number", "NFDriverSecureElementGetOSInfoJCOP", 643);
          dispatch_get_specific(*v55);
          v57 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v87 = "NFDriverSecureElementGetOSInfoJCOP";
            v88 = 1024;
            v89 = 643;
            _os_log_impl(&dword_216EC7000, v57, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get serial number", buf, 0x12u);
          }
        }
        v58 = sub_216ECE534(a1, 0, 254, 57137, 0);
        if (!v58)
        {
          v63 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v64 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v64)
            v64(4, "%s:%i Failed to get update info", "NFDriverSecureElementGetOSInfoJCOP", 663);
          dispatch_get_specific(*v63);
          v65 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v87 = "NFDriverSecureElementGetOSInfoJCOP";
            v88 = 1024;
            v89 = 663;
            _os_log_impl(&dword_216EC7000, v65, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get update info", buf, 0x12u);
          }
          goto LABEL_100;
        }
        v59 = (unsigned __int16 **)v58;
        NFDataPrintAsHexString();
        v60 = (unint64_t)v59[1];
        if (v60 < 2)
        {
          v66 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v67)
            v67(3, "%s:%i Invalid update info length: %zu", "NFDriverSecureElementGetOSInfoJCOP", 688, (size_t)v59[1]);
          dispatch_get_specific(*v66);
          v68 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            v69 = v59[1];
            *(_DWORD *)buf = 136446722;
            v87 = "NFDriverSecureElementGetOSInfoJCOP";
            v88 = 1024;
            v89 = 688;
            v90 = 2048;
            *(_QWORD *)v91 = v69;
            _os_log_impl(&dword_216EC7000, v68, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid update info length: %zu", buf, 0x1Cu);
          }
          goto LABEL_99;
        }
        v61 = (uint64_t)*v59;
        *(_WORD *)(a2 + 3570) = bswap32(**v59) >> 16;
        if (v60 < 8)
        {
          if (v60 < 6)
          {
LABEL_99:
            NFDataRelease();
LABEL_100:
            if (*v12 || *(_BYTE *)(a2 + 3584))
              return 1;
            v74 = NFDataCreateWithBytes();
            if (NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v74, &v85))
            {
              NFDataRelease();
              if (a4)
                a4(a1, a2);
              else
                sub_216ECF0FC(a1, 0, a2);
              v84 = NFDataCreateWithBytes();
              NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v84, &v85);
              NFDataRelease();
              return 1;
            }
            v82 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v83 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v83)
              v83(3, "%s:%i Returned error: 0x%04x", "NFDriverSecureElementGetOSInfoJCOP", 700, v85);
            dispatch_get_specific(*v82);
            v28 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              goto LABEL_40;
            *(_DWORD *)buf = 136446722;
            v87 = "NFDriverSecureElementGetOSInfoJCOP";
            v88 = 1024;
            v89 = 700;
            v90 = 1024;
            *(_DWORD *)v91 = v85;
            goto LABEL_39;
          }
          *(_DWORD *)(a2 + 3556) = __rev16(*(unsigned __int16 *)(v61 + 2));
          *(_DWORD *)(a2 + 3560) = *(unsigned __int8 *)(v61 + 4);
          v62 = *(_BYTE *)(v61 + 5);
        }
        else
        {
          *(_DWORD *)(a2 + 3556) = __rev16(*(unsigned __int16 *)(v61 + 2));
          *(_WORD *)(a2 + 3568) = bswap32(*(unsigned __int16 *)(v61 + 4)) >> 16;
          *(_DWORD *)(a2 + 3560) = *(unsigned __int8 *)(v61 + 6);
          v62 = *(_BYTE *)(v61 + 7);
        }
        *(_BYTE *)(a2 + 3580) = v62;
        goto LABEL_99;
      }
      v33 = v32[1];
      if (v33 < 2)
      {
LABEL_53:
        v39 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v40)
          v40(3, "%s:%i Did not find version tag!", "NFDriverUpdateJCOPVersion", 519);
        dispatch_get_specific(*v39);
        v41 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          goto LABEL_58;
        *(_DWORD *)buf = 136446466;
        v87 = "NFDriverUpdateJCOPVersion";
        v88 = 1024;
        v89 = 519;
        v42 = "%{public}s:%i Did not find version tag!";
        v43 = v41;
        v44 = OS_LOG_TYPE_ERROR;
        v45 = 18;
      }
      else
      {
        v34 = 0;
        v35 = *v32;
        v36 = 1;
        while (1)
        {
          v37 = *(unsigned __int8 *)(v35 + v36);
          v38 = v34 + 2 + v37;
          if (*(unsigned __int8 *)(v35 + v34) == 133)
            break;
          v36 = v38 + 1;
          v34 += 2 + v37;
          if (v38 + 1 >= v33)
            goto LABEL_53;
        }
        if ((_DWORD)v37 != 3 || v38 > v33)
        {
          v71 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v72 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v72)
            v72(3, "%s:%i Invalid version tag length %d", "NFDriverUpdateJCOPVersion", 526, v37);
          dispatch_get_specific(*v71);
          v73 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            goto LABEL_58;
          *(_DWORD *)buf = 136446722;
          v87 = "NFDriverUpdateJCOPVersion";
          v88 = 1024;
          v89 = 526;
          v90 = 1024;
          *(_DWORD *)v91 = v37;
          v42 = "%{public}s:%i Invalid version tag length %d";
          v43 = v73;
          v44 = OS_LOG_TYPE_ERROR;
          v45 = 24;
        }
        else
        {
          *(_BYTE *)(a2 + 3528) = *(_BYTE *)(v35 + v34 + 2);
          v75 = v34 + v35;
          *(_BYTE *)(a2 + 3529) = *(_BYTE *)(v75 + 3);
          *(_BYTE *)(a2 + 3530) = *(_BYTE *)(v75 + 4);
          v76 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v77)
            v77(6, "%s:%i major = %d, minor %d, build = %d", "NFDriverUpdateJCOPVersion", 535, *(unsigned __int8 *)(a2 + 3528), *(unsigned __int8 *)(a2 + 3529), *(unsigned __int8 *)(a2 + 3530));
          dispatch_get_specific(*v76);
          v78 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
            goto LABEL_58;
          v79 = *(unsigned __int8 *)(a2 + 3528);
          v80 = *(unsigned __int8 *)(a2 + 3529);
          v81 = *(unsigned __int8 *)(a2 + 3530);
          *(_DWORD *)buf = 136447234;
          v87 = "NFDriverUpdateJCOPVersion";
          v88 = 1024;
          v89 = 535;
          v90 = 1024;
          *(_DWORD *)v91 = v79;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v80;
          v92 = 1024;
          v93 = v81;
          v42 = "%{public}s:%i major = %d, minor %d, build = %d";
          v43 = v78;
          v44 = OS_LOG_TYPE_DEFAULT;
          v45 = 36;
        }
      }
      _os_log_impl(&dword_216EC7000, v43, v44, v42, buf, v45);
LABEL_58:
      NFDataRelease();
      goto LABEL_63;
  }
  v16 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v17)
    v17(3, "%s:%i Returned error: 0x%04x", "NFDriverSecureElementGetOSInfoJCOP", 564, v85);
  dispatch_get_specific(*v16);
  v18 = NFSharedLogGetLogger();
  result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446722;
    v87 = "NFDriverSecureElementGetOSInfoJCOP";
    v88 = 1024;
    v89 = 564;
    v90 = 1024;
    *(_DWORD *)v91 = v85;
    _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
    return 0;
  }
  return result;
}

uint64_t sub_216ED09D4(uint64_t a1, _BYTE *a2)
{
  char *v4;
  unint64_t v5;
  const void **v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v12;
  size_t v14;
  const void **v15;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v17;
  int v18;
  uint64_t v19;
  size_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  size_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  v20 = 1023;
  if (NFDriverSecureElementGetCometATR(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), v4, &v20))
  {
    v19 = 0;
    v18 = 0;
    v5 = v20 - 4;
    if (v20 > 4)
    {
      v4[v20] = 0;
      if (v5 >= 0x17)
        v14 = 23;
      else
        v14 = v5;
      memcpy(a2 + 3504, v4 + 4, v14);
      if (sscanf(v4 + 4, "JCOP3 %d.%d", &v19, &v18) == 2
        || sscanf(v4 + 4, "JCOP3.1 R%d.%d", &v19, &v18) == 2
        || sscanf(v4 + 4, "JCOP3.4 R%d.%d", &v19, &v18) == 2
        || sscanf(v4 + 4, "JCOP%f R%d.%d", (char *)&v19 + 4, &v19, &v18) == 3)
      {
        a2[3528] = v19;
        a2[3529] = v18;
        v12 = 1;
        if (!v4)
          return v12;
        goto LABEL_9;
      }
      v15 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(4, "%s:%i Failed to parse ATR", "NFDriverSecureElementGetATRJCOP", 777);
      dispatch_get_specific(*v15);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v22 = "NFDriverSecureElementGetATRJCOP";
        v23 = 1024;
        v24 = 777;
        v9 = "%{public}s:%i Failed to parse ATR";
        v10 = v17;
        v11 = 18;
        goto LABEL_7;
      }
    }
    else
    {
      v6 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v7)
        v7(4, "%s:%i Invalid ATR length: %zu", "NFDriverSecureElementGetATRJCOP", 752, v20);
      dispatch_get_specific(*v6);
      v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v22 = "NFDriverSecureElementGetATRJCOP";
        v23 = 1024;
        v24 = 752;
        v25 = 2048;
        v26 = v20;
        v9 = "%{public}s:%i Invalid ATR length: %zu";
        v10 = v8;
        v11 = 28;
LABEL_7:
        _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
      }
    }
  }
  v12 = 0;
  if (v4)
LABEL_9:
    free(v4);
  return v12;
}

uint64_t sub_216ED0CBC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  unsigned __int16 v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  result = sub_216ECE534(a1, 0, 254, 57129, &v7);
  if (v7 == 26277)
  {
    v3 = NFDataCreateWithBytes();
    if (NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v3, &v7))
    {
      NFDataRelease();
      return sub_216ECE534(a1, 0, 254, 57129, &v7);
    }
    else
    {
      v4 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i SELECT returned error: 0x%04x", "NFDriverSecureElementGetOSUpdateLog", 795, v7);
      dispatch_get_specific(*v4);
      v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v9 = "NFDriverSecureElementGetOSUpdateLog";
        v10 = 1024;
        v11 = 795;
        v12 = 1024;
        v13 = v7;
        _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i SELECT returned error: 0x%04x", buf, 0x18u);
      }
      NFDataRelease();
      return 0;
    }
  }
  return result;
}

BOOL sub_216ED0E4C(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  _BOOL8 result;
  const char *v12;
  const void **v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  NSObject *v16;
  uint32_t v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  int v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  const void **v27;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v29;
  unsigned __int16 v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v30 = -1;
  if (a2)
    *a2 = 0;
  v4 = NFDataCreateWithBytes();
  if (v4)
  {
    v5 = NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v4, &v30);
    NFDataRelease();
    if (v5)
    {
      v6 = sub_216ECE534(a1, 0, 254, 57148, 0);
      if (v6)
      {
        v7 = v6;
        if (*(_QWORD *)(v6 + 8) == 1)
        {
          if (**(_BYTE **)v6 != 90)
          {
LABEL_29:
            NFDataRelease();
            return 1;
          }
          if (a2)
          {
            *a2 = 1;
            goto LABEL_29;
          }
          v27 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger)
            Logger(3, "%s:%i AC log exists, but supplied output parameter is NULL.", "GetPresenceOfAttackLog", 847);
          dispatch_get_specific(*v27);
          v29 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            goto LABEL_29;
          *(_DWORD *)buf = 136446466;
          v32 = "GetPresenceOfAttackLog";
          v33 = 1024;
          v34 = 847;
          v24 = "%{public}s:%i AC log exists, but supplied output parameter is NULL.";
          v25 = v29;
          v26 = 18;
        }
        else
        {
          v20 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v21)
            v21(3, "%s:%i Bad response APDU length %d", "GetPresenceOfAttackLog", 853, *(unsigned __int16 *)(v7 + 8));
          dispatch_get_specific(*v20);
          v22 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            goto LABEL_29;
          v23 = *(unsigned __int16 *)(v7 + 8);
          *(_DWORD *)buf = 136446722;
          v32 = "GetPresenceOfAttackLog";
          v33 = 1024;
          v34 = 853;
          v35 = 1024;
          v36 = v23;
          v24 = "%{public}s:%i Bad response APDU length %d";
          v25 = v22;
          v26 = 24;
        }
        _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
        goto LABEL_29;
      }
      v18 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19)
        v19(3, "%s:%i Unable to get presence of AC log", "GetPresenceOfAttackLog", 835);
      dispatch_get_specific(*v18);
      v10 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "GetPresenceOfAttackLog";
        v33 = 1024;
        v34 = 835;
        v12 = "%{public}s:%i Unable to get presence of AC log";
        goto LABEL_22;
      }
    }
    else
    {
      v13 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v14)
        v14(3, "%s:%i SELECT returned error: 0x%04x. Cannot query presence of attack log without selecting ISD", "GetPresenceOfAttackLog", 828, v30);
      dispatch_get_specific(*v13);
      v15 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446722;
        v32 = "GetPresenceOfAttackLog";
        v33 = 1024;
        v34 = 828;
        v35 = 1024;
        v36 = v30;
        v12 = "%{public}s:%i SELECT returned error: 0x%04x. Cannot query presence of attack log without selecting ISD";
        v16 = v15;
        v17 = 24;
LABEL_23:
        _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, v12, buf, v17);
        return 0;
      }
    }
  }
  else
  {
    v8 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9)
      v9(3, "%s:%i Unable to create aid needed for selecting ISD", "GetPresenceOfAttackLog", 821);
    dispatch_get_specific(*v8);
    v10 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "GetPresenceOfAttackLog";
      v33 = 1024;
      v34 = 821;
      v12 = "%{public}s:%i Unable to create aid needed for selecting ISD";
LABEL_22:
      v16 = v10;
      v17 = 18;
      goto LABEL_23;
    }
  }
  return result;
}

uint64_t sub_216ED129C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  const void **v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  unsigned int v11;
  const char *v12;
  const void **v13;
  void (*Logger)(uint64_t, const char *, ...);
  uint64_t v15;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = NFDataCreateWithBytes();
  v5 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, 0x80u, 0xCAu, 0, 0xFEu, 0, v4);
  NFDataRelease();
  v6 = 0;
  v7 = v5[1];
  if (v7 < 2 || (v6 = __rev16(*(unsigned __int16 *)(v7 + *v5 - 2)), v6 != 36864))
  {
    v13 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Returned error: 0x%04x", "UnlockRequestInfo", 884, v6);
    dispatch_get_specific(*v13);
    v10 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    *(_DWORD *)buf = 136446722;
    v18 = "UnlockRequestInfo";
    v19 = 1024;
    v20 = 884;
    v21 = 1024;
    v22 = v6;
    v12 = "%{public}s:%i Returned error: 0x%04x";
    goto LABEL_12;
  }
  if (v7 > 6)
  {
    v15 = NFDataCreateWithBytes();
    goto LABEL_14;
  }
  v8 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v9)
    v9(3, "%s:%i rapdu length too short %d", "UnlockRequestInfo", 892, *((unsigned __int16 *)v5 + 4));
  dispatch_get_specific(*v8);
  v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v11 = *((unsigned __int16 *)v5 + 4);
    *(_DWORD *)buf = 136446722;
    v18 = "UnlockRequestInfo";
    v19 = 1024;
    v20 = 892;
    v21 = 1024;
    v22 = v11;
    v12 = "%{public}s:%i rapdu length too short %d";
LABEL_12:
    _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, v12, buf, 0x18u);
  }
LABEL_13:
  v15 = 0;
LABEL_14:
  NFDataRelease();
  return v15;
}

void NFDriverUnloadStackAndLeaveHWEnabled(uint64_t a1, char a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  void **v24;
  uint8_t v25[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  _QWORD v31[2];
  _BYTE buf[32];
  uint64_t v33;
  uint64_t *v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i isLoaded=%d", "NFDriverUnloadStackAndLeaveHWEnabled", 90, *(unsigned __int8 *)(a1 + 57));
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 57);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "NFDriverUnloadStackAndLeaveHWEnabled";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 90;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v7;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i isLoaded=%d", buf, 0x18u);
  }
  if (!*(_BYTE *)(a1 + 56) && (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 560) & 6) != 0)
  {
    v31[0] = -16192608;
    *(_DWORD *)((char *)v31 + 7) = -1;
    memset(buf, 0, 28);
    NFDriverGetControllerInfo(a1, (uint64_t)buf);
    if (*(_DWORD *)&buf[4] <= 0xDu)
    {
      v24 = (void **)sub_216EE5100(0xBu, v31);
      v20 = sub_216EE4D10(a1, 37025, (uint64_t)v24, 0);
      v21 = sub_216EE0ECC(v20);
      dispatch_get_specific(*v4);
      v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22)
        v22(6, "%s:%i Nuked SE gate info : %llu", "_NFDriverNukeSEGateInfo", 81, v21);
      dispatch_get_specific(*v4);
      v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v25 = 136446722;
        v26 = "_NFDriverNukeSEGateInfo";
        v27 = 1024;
        v28 = 81;
        v29 = 2048;
        v30 = v21;
        _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Nuked SE gate info : %llu", v25, 0x1Cu);
      }
      sub_216EE0D6C((void **)v20);
      sub_216EE5198(&v24);
    }
  }
  sub_216EE4B88(a1);
  if (*(_BYTE *)(a1 + 57))
  {
    *(_BYTE *)(a1 + 57) = 0;
    v8 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v8[2] + 8));
    v9 = v8[2];
    ++*(_QWORD *)v9;
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
    v10 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    v11 = MEMORY[0x24BDAC760];
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_216ED192C;
    *(_QWORD *)&buf[24] = &unk_24D65E258;
    v35 = a2;
    v33 = a1;
    v34 = v8;
    dispatch_async_and_wait(v10, buf);
    if (sub_216EE0ECC(v8))
    {
      dispatch_get_specific(*v4);
      v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12)
        v12(3, "%s:%i status=0x%04llX", "NFDriverUnloadStackAndLeaveHWEnabled", 116, *v8);
      dispatch_get_specific(*v4);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = *v8;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "NFDriverUnloadStackAndLeaveHWEnabled";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 116;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v14;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      v15 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
      *(_QWORD *)buf = v11;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = sub_216EE4564;
      *(_QWORD *)&buf[24] = &unk_24D65ED38;
      v33 = a1;
      dispatch_async(v15, buf);
    }
    sub_216EE0D6C((void **)v8);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 24) + 520));
    *(_DWORD *)(a1 + 44) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    v16 = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(v16 + 723) = 0;
    v17 = *(void **)(v16 + 496);
    if (v17)
    {
      free(v17);
      v16 = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(v16 + 496) = 0;
    v18 = *(void **)(v16 + 504);
    if (v18)
    {
      free(v18);
      v16 = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(v16 + 504) = 0;
    v19 = *(void **)(v16 + 512);
    if (v19)
    {
      free(v19);
      v16 = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(v16 + 512) = 0;
  }
  else
  {
    sub_216ED31E8(a1, 0);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 24) + 520));
  }
}

void sub_216ED192C(uint64_t a1)
{
  int v2;
  const void **v3;
  int v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  int v7;
  int v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  unsigned int v11;
  unsigned int v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_RemoteDev_NtfUnregister();
  v3 = (const void **)MEMORY[0x24BEDCDB0];
  if (v2)
  {
    v4 = v2;
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(4, "%s:%i status=0x%04X", "_Async_NFDriverUnloadStack_block_invoke", 41, v4);
    dispatch_get_specific(*v3);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "_Async_NFDriverUnloadStack_block_invoke";
      v17 = 1024;
      v18 = 41;
      v19 = 1024;
      v20 = v4;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  v7 = phLibNfc_SE_NtfUnregister();
  if (v7)
  {
    v8 = v7;
    dispatch_get_specific(*v3);
    v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9)
      v9(4, "%s:%i status=0x%04X", "_Async_NFDriverUnloadStack_block_invoke", 45, v8);
    dispatch_get_specific(*v3);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "_Async_NFDriverUnloadStack_block_invoke";
      v17 = 1024;
      v18 = 45;
      v19 = 1024;
      v20 = v8;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  v11 = phLibNfc_Mgt_DeInitialize();
  if (v11 != 13)
  {
    v12 = v11;
    dispatch_get_specific(*v3);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(3, "%s:%i status=0x%04X", "_Async_NFDriverUnloadStack_block_invoke", 54, v12);
    dispatch_get_specific(*v3);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "_Async_NFDriverUnloadStack_block_invoke";
      v17 = 1024;
      v18 = 54;
      v19 = 1024;
      v20 = v12;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v12);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216ED1BD0(uint64_t a1, void **a2, unsigned int a3)
{
  phTmlNfc_IoCtl();
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

uint64_t NFDriverLoadStack(uint64_t a1, unsigned int a2)
{
  int v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  int v23;
  int v24;
  int v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  NSObject *v28;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  uint64_t v34;
  void (*v35)(uint64_t, const char *, ...);
  NSObject *v36;
  NSObject *v37;
  const char *v38;
  uint32_t v39;
  NSObject *v40;
  void (*v41)(uint64_t, const char *, ...);
  NSObject *v42;
  uint64_t v43;
  void (*v44)(uint64_t, const char *, ...);
  NSObject *v45;
  const char *v46;
  NSObject *v47;
  char v48;
  uint64_t v49;
  NSObject *v50;
  void (*v52)(uint64_t, const char *, ...);
  unsigned int v53;
  char v54;
  int v55;
  _QWORD block[6];
  _BYTE buf[40];
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v4 = NFProductAllowsWiredInDLMode();
  v5 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i isLoaded=%d flags = 0x%x", "NFDriverLoadStack", 404, *(unsigned __int8 *)(a1 + 57), a2);
  dispatch_get_specific(*v5);
  v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(a1 + 57);
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "NFDriverLoadStack";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 404;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v8;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = a2;
    _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i isLoaded=%d flags = 0x%x", buf, 0x1Eu);
  }
  if (*(_BYTE *)(a1 + 57))
    return 0;
  if (qword_253E47168 != -1)
    dispatch_once(&qword_253E47168, &unk_24D65E298);
  v10 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v10 + 560) = a2;
  v11 = *(_QWORD *)(v10 + 552);
  v12 = *(NSObject **)(v10 + 528);
  v13 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216ED27CC;
  block[3] = &unk_24D65E2B8;
  block[4] = v11;
  block[5] = a1;
  dispatch_async_and_wait(v12, block);
  v14 = v4 & (a2 >> 4);
  if (v14 == 1)
  {
    dispatch_get_specific(*v5);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(6, "%s:%i Flags requested DL mode only.", "NFDriverLoadStack", 449);
    v54 = 1;
    dispatch_get_specific(*v5);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "NFDriverLoadStack";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 449;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Flags requested DL mode only.", buf, 0x12u);
    }
  }
  else
  {
    v17 = sub_216ED29C0(a1);
    if (!(_DWORD)v17)
    {
      v53 = 1;
      v54 = v14;
      goto LABEL_28;
    }
    v18 = v17;
    if (!v4 || (_DWORD)v17 != 14 && (_DWORD)v17 != 2)
    {
      dispatch_get_specific(*v5);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(3, "%s:%i Stack load failed with 0x%x", "NFDriverLoadStack", 459, v18);
      dispatch_get_specific(*v5);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "NFDriverLoadStack";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 459;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v18;
        _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Stack load failed with 0x%x", buf, 0x18u);
      }
      goto LABEL_86;
    }
    v54 = v14;
    dispatch_get_specific(*v5);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19)
      v19(3, "%s:%i Stack load failed with 0x%x, continuing in DL mode.", "NFDriverLoadStack", 456, v18);
    dispatch_get_specific(*v5);
    v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverLoadStack";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 456;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v18;
      v53 = 24;
      _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Stack load failed with 0x%x, continuing in DL mode.", buf, 0x18u);
      goto LABEL_28;
    }
  }
  v53 = 24;
LABEL_28:
  v23 = 0;
  v24 = 0;
  v55 = *(unsigned __int8 *)(a1 + 57);
  while (v24 < 7)
  {
    v25 = *((_DWORD *)&unk_24D65E318 + 6 * v23);
    if ((v25 & 1) != 0 && *(_BYTE *)(a1 + 58)
      || (v25 & 8) != 0 && !NFProductHasNFCRadio()
      || (v25 & 0x10) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 560) & 4) != 0
      || (v25 & 0x20) != 0 && (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 560) & 2) != 0
      || !v55 && (v25 & 0x100) == 0)
    {
      dispatch_get_specific(*v5);
      v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v26)
        v26(6, "%s:%i Skipping step %d", "_NFDriverLoadStackSteps", 337, v23);
      dispatch_get_specific(*v5);
      v27 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        goto LABEL_45;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverLoadStackSteps";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 337;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v23;
      v28 = v27;
      goto LABEL_44;
    }
    if ((v25 & 6) == 0)
    {
      dispatch_get_specific(*v5);
      v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30)
        v30(3, "%s:%i Error : function at index %d will never run", "_NFDriverLoadStackSteps", 341, v23);
      dispatch_get_specific(*v5);
      v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverLoadStackSteps";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 341;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v23;
        _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Error : function at index %d will never run", buf, 0x18u);
      }
    }
    if (*(_BYTE *)(a1 + 56))
    {
      if ((v25 & 4) == 0)
        goto LABEL_54;
    }
    else if ((v25 & 2) == 0)
    {
LABEL_54:
      dispatch_get_specific(*v5);
      v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32)
        v32(6, "%s:%i Skipping step %d", "_NFDriverLoadStackSteps", 346, v23);
      dispatch_get_specific(*v5);
      v33 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        goto LABEL_45;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverLoadStackSteps";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 346;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v23;
      v28 = v33;
LABEL_44:
      _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Skipping step %d", buf, 0x18u);
      goto LABEL_45;
    }
    v34 = (*((uint64_t (**)(uint64_t))&unk_24D65E318 + 3 * v23 + 1))(a1);
    if (!(_DWORD)v34)
      goto LABEL_45;
    v18 = v34;
    dispatch_get_specific(*v5);
    v35 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v23 == 21)
    {
      if (v35)
        v35(3, "%s:%i %s : 0x%x", "_NFDriverLoadStackSteps", 364, "Virtual mode routing failure", v18);
      dispatch_get_specific(*v5);
      v36 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "_NFDriverLoadStackSteps";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 364;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = 0x216F091F2;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v18;
        v37 = v36;
        v38 = "%{public}s:%i %s : 0x%x";
        v39 = 34;
LABEL_69:
        _os_log_impl(&dword_216EC7000, v37, OS_LOG_TYPE_ERROR, v38, buf, v39);
      }
    }
    else
    {
      if (v35)
        v35(3, "%s:%i Step %d error : 0x%x", "_NFDriverLoadStackSteps", 366, v23, v18);
      dispatch_get_specific(*v5);
      v40 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "_NFDriverLoadStackSteps";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 366;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v23;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v18;
        v37 = v40;
        v38 = "%{public}s:%i Step %d error : 0x%x";
        v39 = 30;
        goto LABEL_69;
      }
    }
    if ((v25 & 0x80) != 0 && (_DWORD)v18 == 13)
    {
      dispatch_get_specific(*v5);
      v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v41)
        v41(3, "%s:%i Error at step %d, re-initializing", "_NFDriverLoadStackSteps", 369, v23);
      dispatch_get_specific(*v5);
      v42 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverLoadStackSteps";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 369;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v23;
        _os_log_impl(&dword_216EC7000, v42, OS_LOG_TYPE_ERROR, "%{public}s:%i Error at step %d, re-initializing", buf, 0x18u);
      }
      NFDriverUnloadStackAndLeaveHWEnabled(a1, 0);
      v43 = sub_216ED29C0(a1);
      if ((_DWORD)v43)
      {
        v18 = v43;
        dispatch_get_specific(*v5);
        v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v52)
          v52(3, "%s:%i Re-init failed. Bailing.", "_NFDriverLoadStackSteps", 373);
        dispatch_get_specific(*v5);
        v45 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_NFDriverLoadStackSteps";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 373;
          v46 = "%{public}s:%i Re-init failed. Bailing.";
          goto LABEL_84;
        }
        goto LABEL_85;
      }
      v23 = 0;
      ++v24;
    }
    else if ((v25 & 0x40) == 0)
    {
      goto LABEL_85;
    }
LABEL_45:
    if (v23++ >= 22)
    {
      v9 = v53;
      if (*(_BYTE *)(a1 + 57))
        v48 = 1;
      else
        v48 = v54;
      if (*(_BYTE *)(a1 + 57))
        v49 = 0;
      else
        v49 = v53;
      if ((v48 & 1) != 0)
        return v49;
      v50 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = sub_216EE4564;
      *(_QWORD *)&buf[24] = &unk_24D65ED38;
      *(_QWORD *)&buf[32] = a1;
      dispatch_async(v50, buf);
      return v9;
    }
  }
  dispatch_get_specific(*v5);
  v44 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v44)
    v44(3, "%s:%i Max retries reached.", "_NFDriverLoadStackSteps", 325);
  dispatch_get_specific(*v5);
  v45 = NFSharedLogGetLogger();
  v18 = 16;
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverLoadStackSteps";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 325;
    v46 = "%{public}s:%i Max retries reached.";
    v18 = 16;
LABEL_84:
    _os_log_impl(&dword_216EC7000, v45, OS_LOG_TYPE_ERROR, v46, buf, 0x12u);
  }
LABEL_85:
  v9 = v18;
  v13 = MEMORY[0x24BDAC760];
  if ((v54 & 1) != 0)
    goto LABEL_87;
LABEL_86:
  v47 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  *(_QWORD *)buf = v13;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216EE4564;
  *(_QWORD *)&buf[24] = &unk_24D65ED38;
  *(_QWORD *)&buf[32] = a1;
  dispatch_async(v47, buf);
  v9 = v18;
LABEL_87:
  if (*(_BYTE *)(a1 + 56))
    NFDriverNFCCPowerOff(a1);
  NFDriverUnloadStackAndLeaveHWEnabled(a1, 0);
  return v9;
}

void sub_216ED26E4()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Running build from (B&I) Stockholm_Base-350.33.1", "NFDriverLoadStack_block_invoke", 416);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v4 = "NFDriverLoadStack_block_invoke";
    v5 = 1024;
    v6 = 416;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Running build from (B&I) Stockholm_Base-350.33.1", buf, 0x12u);
  }
}

void sub_216ED27CC()
{
  int v0;
  const void **v1;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint32_t v7;
  NSObject *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v0 = phLibNfc_Mgt_ConfigureMwLogging();
  v1 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v0)
  {
    if (Logger)
      Logger(3, "%s:%i Stack logging failed with 0x%x", "NFDriverLoadStack_block_invoke", 442, v0);
    dispatch_get_specific(*v1);
    v3 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v10 = "NFDriverLoadStack_block_invoke";
      v11 = 1024;
      v12 = 442;
      v13 = 1024;
      v14 = v0;
      v4 = "%{public}s:%i Stack logging failed with 0x%x";
      v5 = v3;
      v6 = OS_LOG_TYPE_ERROR;
      v7 = 24;
LABEL_10:
      _os_log_impl(&dword_216EC7000, v5, v6, v4, buf, v7);
    }
  }
  else
  {
    if (Logger)
      Logger(6, "%s:%i Stack logging enabled", "NFDriverLoadStack_block_invoke", 444);
    dispatch_get_specific(*v1);
    v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v10 = "NFDriverLoadStack_block_invoke";
      v11 = 1024;
      v12 = 444;
      v4 = "%{public}s:%i Stack logging enabled";
      v5 = v8;
      v6 = OS_LOG_TYPE_DEFAULT;
      v7 = 18;
      goto LABEL_10;
    }
  }
}

uint64_t sub_216ED29C0(uint64_t a1)
{
  int v2;
  const void **v3;
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  int v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  void (*v17)(uint64_t, const char *, ...);
  NSObject *v18;
  uint64_t v19;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  int v24;
  const void **v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  uint64_t v32;
  int v33;
  int v35;
  unsigned __int16 v36;
  _BYTE block[32];
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v2 = 1;
  v3 = (const void **)MEMORY[0x24BEDCDB0];
  while (1)
  {
    v4 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
    v5 = v4[2];
    ++*(_QWORD *)v5;
    pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
    v6 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)block = MEMORY[0x24BDAC760];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_216ED3704;
    *(_QWORD *)&block[24] = &unk_24D65E2F8;
    v38 = a1;
    v39 = v4;
    dispatch_async_and_wait(v6, block);
    v7 = sub_216EE0ECC(v4);
    if (!v7)
    {
      v11 = 0;
      v19 = 0;
      goto LABEL_58;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 724))
    {
      NFDriverGetStackBreadcrumb(a1);
      v3 = (const void **)MEMORY[0x24BEDCDB0];
      postAnalyticsMiddlewareExceptionEvent();
    }
    v8 = *v4;
    if (*v4 != 67)
      break;
    dispatch_get_specific(*v3);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i eSE power-on failed! (%d/%d)", "_NFDriverLoadMW", 234, v2, 3);
    dispatch_get_specific(*v3);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)block = 136446978;
      *(_QWORD *)&block[4] = "_NFDriverLoadMW";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 234;
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = v2;
      *(_WORD *)&block[24] = 1024;
      *(_DWORD *)&block[26] = 3;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i eSE power-on failed! (%d/%d)", block, 0x1Eu);
    }
    if (++v2 == 4)
    {
      v11 = 0;
LABEL_57:
      v19 = 1;
      goto LABEL_58;
    }
  }
  if (v8 <= 136)
  {
    if ((unint64_t)(v8 - 128) < 2)
    {
      dispatch_get_specific(*v3);
      v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12)
        v12(3, "%s:%i Incompatible firmware !", "_NFDriverLoadMW", 239);
      dispatch_get_specific(*v3);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 239;
        v14 = "%{public}s:%i Incompatible firmware !";
        v15 = v13;
        v16 = 18;
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v8 == 136)
    {
      v36 = 0;
      v35 = 136;
      sub_216EE9DA0(a1, 0, 0, 0, &v36, &v35);
      dispatch_get_specific(*v3);
      v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v20)
        v20(3, "%s:%i Error 0x%x using API %d - requires a new firmware !", "_NFDriverLoadMW", 265, v36, v35);
      dispatch_get_specific(*v3);
      v21 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446978;
        *(_QWORD *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 265;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v36;
        *(_WORD *)&block[24] = 1024;
        *(_DWORD *)&block[26] = v35;
        v14 = "%{public}s:%i Error 0x%x using API %d - requires a new firmware !";
        v15 = v21;
        v16 = 30;
LABEL_33:
        _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, v14, block, v16);
      }
LABEL_34:
      v11 = 0;
      v19 = 2;
      goto LABEL_58;
    }
    goto LABEL_52;
  }
  switch(v8)
  {
    case 137:
      v36 = 0;
      v35 = 136;
      sub_216EE9DA0(a1, 0, 0, 0, &v36, &v35);
      dispatch_get_specific(*v3);
      v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22)
        v22(3, "%s:%i Error 0x%x using API %d - requires a reboot !", "_NFDriverLoadMW", 273, v36, v35);
      dispatch_get_specific(*v3);
      v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446978;
        *(_QWORD *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 273;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v36;
        *(_WORD *)&block[24] = 1024;
        *(_DWORD *)&block[26] = v35;
        _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i Error 0x%x using API %d - requires a reboot !", block, 0x1Eu);
      }
      v24 = phTmlNfc_IoCtl();
      v36 = v24;
      if (v24)
      {
        v25 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v26)
          v26(3, "%s:%i Error 0x%x powering off !", "_NFDriverLoadMW", 279, v36);
        dispatch_get_specific(*v25);
        v27 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)block = 136446722;
          *(_QWORD *)&block[4] = "_NFDriverLoadMW";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 279;
          *(_WORD *)&block[18] = 1024;
          *(_DWORD *)&block[20] = v36;
          _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i Error 0x%x powering off !", block, 0x18u);
        }
        if (v36)
          __assert_rtn("_NFDriverLoadMW", "NFDriverStackInit.c", 280, "NFCSTATUS_OK == lastStatus");
      }
      v11 = 0;
      v19 = 16;
      break;
    case 153:
      dispatch_get_specific(*v3);
      v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v28)
        v28(3, "%s:%i DL session already open.", "_NFDriverLoadMW", 243);
      dispatch_get_specific(*v3);
      v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 243;
        _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i DL session already open.", block, 0x12u);
      }
      v11 = 0;
      v19 = 14;
      break;
    case 180:
      dispatch_get_specific(*v3);
      v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v17)
        v17(3, "%s:%i Follower ID unresponsive!", "_NFDriverLoadMW", 254);
      dispatch_get_specific(*v3);
      v18 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 254;
        _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i Follower ID unresponsive!", block, 0x12u);
      }
      if (NFIsInternalBuild() && !*(_BYTE *)(a1 + 56))
      {
        v19 = 17;
        if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)block = 0;
          _os_log_fault_impl(&dword_216EC7000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "Stockholm SPMI unresponsive", block, 2u);
        }
        v11 = 0;
      }
      else
      {
        v11 = 0;
        v19 = 17;
      }
      break;
    default:
LABEL_52:
      dispatch_get_specific(*v3);
      v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30)
        v30(3, "%s:%i status=0x%04llX", "_NFDriverLoadMW", 284, *v4);
      dispatch_get_specific(*v3);
      v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = *v4;
        *(_DWORD *)block = 136446722;
        *(_QWORD *)&block[4] = "_NFDriverLoadMW";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 284;
        *(_WORD *)&block[18] = 2048;
        *(_QWORD *)&block[20] = v32;
        _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", block, 0x1Cu);
      }
      v11 = 1;
      goto LABEL_57;
  }
LABEL_58:
  sub_216EE0D6C((void **)v4);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 724))
    resetCALoadStackExceptionCount();
  if (!v11)
  {
    if (v7)
      return v19;
    goto LABEL_66;
  }
  v33 = sub_216EE4970(a1);
  if (v33)
    v19 = 16;
  else
    v19 = v19;
  if (!v7 && !v33)
  {
LABEL_66:
    v19 = 0;
    *(_BYTE *)(a1 + 57) = 1;
  }
  return v19;
}

uint64_t sub_216ED31E8(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  const char *v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint64_t v12;
  void (*v13)(uint64_t, const char *, ...);
  const char *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  _QWORD block[6];
  char v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  v5 = v4[2];
  ++*(_QWORD *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    if (a2)
      v8 = "Enabling";
    else
      v8 = "Deactivating";
    Logger(6, "%s:%i %s SE in DL mode", "_NFDriverConfigureSEInDownload", 920, v8);
  }
  dispatch_get_specific(*v6);
  v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v10 = "Enabling";
    else
      v10 = "Deactivating";
    *(_DWORD *)buf = 136446722;
    v25 = "_NFDriverConfigureSEInDownload";
    v26 = 1024;
    v27 = 920;
    v28 = 2080;
    v29 = v10;
    _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s SE in DL mode", buf, 0x1Cu);
  }
  v11 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216ED3520;
  block[3] = &unk_24D65E2D8;
  v23 = a2;
  block[4] = a1;
  block[5] = v4;
  dispatch_async_and_wait(v11, block);
  v12 = sub_216EE0ECC(v4);
  dispatch_get_specific(*v6);
  v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v12)
  {
    if (v13)
    {
      if (a2)
        v14 = "enable";
      else
        v14 = "deactivate";
      v13(3, "%s:%i Failed to %s SE in DL mode.", "_NFDriverConfigureSEInDownload", 940, v14);
    }
    dispatch_get_specific(*v6);
    v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (a2)
        v16 = "enable";
      else
        v16 = "deactivate";
      *(_DWORD *)buf = 136446722;
      v25 = "_NFDriverConfigureSEInDownload";
      v26 = 1024;
      v27 = 940;
      v28 = 2080;
      v29 = v16;
      _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to %s SE in DL mode.", buf, 0x1Cu);
    }
    v17 = 1;
  }
  else
  {
    if (v13)
    {
      if (a2)
        v18 = "Enabled";
      else
        v18 = "deactivated";
      v13(6, "%s:%i SE %s in download mode", "_NFDriverConfigureSEInDownload", 943, v18);
    }
    dispatch_get_specific(*v6);
    v19 = NFSharedLogGetLogger();
    v17 = 0;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
        v20 = "Enabled";
      else
        v20 = "deactivated";
      *(_DWORD *)buf = 136446722;
      v25 = "_NFDriverConfigureSEInDownload";
      v26 = 1024;
      v27 = 943;
      v28 = 2080;
      v29 = v20;
      _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE %s in download mode", buf, 0x1Cu);
      v17 = 0;
    }
  }
  sub_216EE0D6C((void **)v4);
  return v17;
}

void sub_216ED3520(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_eSeCfgDnldMode();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_NFDriverConfigureSEInDownload_block_invoke", 933, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_NFDriverConfigureSEInDownload_block_invoke";
      v9 = 1024;
      v10 = 933;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216ED3670(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a3);
    sub_216EE0D6C(a2);
  }
}

uint64_t sub_216ED36A4(uint64_t a1)
{
  _OWORD v2[12];
  uint64_t v3;

  v2[4] = xmmword_216F07D98;
  v2[5] = unk_216F07DA8;
  v2[6] = xmmword_216F07DB8;
  memset(&v2[7], 0, 80);
  v2[0] = *(_OWORD *)"\nOSE.VAS.01";
  v2[1] = unk_216F07D68;
  v2[2] = xmmword_216F07D78;
  v2[3] = unk_216F07D88;
  v3 = 6;
  return sub_216EEB950(a1, (uint64_t)v2);
}

void sub_216ED3704(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  NFIsRestoreOS();
  v2 = phLibNfc_Mgt_Initialize();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverLoadMW_block_invoke", 199, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverLoadMW_block_invoke";
      v9 = 1024;
      v10 = 199;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216ED38A4(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

BOOL sub_216ED38D0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  char *v11;
  NSObject *v12;
  const void **v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  void *v16;
  uint64_t block;
  uint64_t v19;
  void (*v20)(uint64_t);
  void *v21;
  uint64_t v22;
  void *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 57))
  {
    v2 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v2[2] + 8));
    v3 = v2[2];
    ++*(_QWORD *)v3;
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
    v4 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    block = MEMORY[0x24BDAC760];
    v19 = 0x40000000;
    v20 = sub_216ED6B00;
    v21 = &unk_24D65E540;
    v22 = a1;
    v23 = v2;
    dispatch_async_and_wait(v4, &block);
    if (sub_216EE0ECC(v2))
    {
      v5 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i failed to register for notifications: 0x%04llX", "_NFDriverRegisterNCINotifications", 894, *v2);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = *v2;
        *(_DWORD *)buf = 136446722;
        v25 = "_NFDriverRegisterNCINotifications";
        v26 = 1024;
        v27 = 894;
        v28 = 2048;
        v29 = v8;
        _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to register for notifications: 0x%04llX", buf, 0x1Cu);
      }
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    sub_216EE0D6C((void **)v2);
  }
  else
  {
    v10 = (void **)sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)((char *)v10[2] + 8));
    v11 = (char *)v10[2];
    ++*(_QWORD *)v11;
    pthread_mutex_unlock((pthread_mutex_t *)(v11 + 8));
    v12 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    block = MEMORY[0x24BDAC760];
    v19 = 0x40000000;
    v20 = sub_216ED6EB4;
    v21 = &unk_24D65E560;
    v22 = a1;
    v23 = v10;
    dispatch_async_and_wait(v12, &block);
    if (sub_216EE0ECC((uint64_t *)v10))
    {
      v13 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v14)
        v14(3, "%s:%i failed to register for notifications: 0x%04llX", "_NFDriverRegisterFWDLNotifications", 975, *v10);
      dispatch_get_specific(*v13);
      v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = *v10;
        *(_DWORD *)buf = 136446722;
        v25 = "_NFDriverRegisterFWDLNotifications";
        v26 = 1024;
        v27 = 975;
        v28 = 2048;
        v29 = (uint64_t)v16;
        _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to register for notifications: 0x%04llX", buf, 0x1Cu);
      }
      sub_216EE0D6C(v10);
      return 1;
    }
    else
    {
      sub_216EE0D6C(v10);
      return sub_216ED31E8(a1, 1) != 0;
    }
  }
  return v9;
}

uint64_t sub_216ED3BCC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  char v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  int ControllerInfo;
  uint64_t v12;
  _QWORD block[6];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v16 = &v15;
  v17 = 0x2000000000;
  v18 = 0;
  if (*(_BYTE *)(a1 + 57))
  {
    v2 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = sub_216ED6FE8;
    block[3] = &unk_24D65E588;
    block[4] = &v15;
    block[5] = a1;
    dispatch_async_and_wait(v2, block);
  }
  else
  {
    v19 = 0;
    v20 = 0uLL;
    v21 = 0;
    if ((NFDriverGetControllerInfo(a1, (uint64_t)&v19) & 1) != 0)
    {
      v3 = *(_QWORD *)(a1 + 24);
      v4 = v20;
      *(_DWORD *)(v3 + 588) = v19;
      *(_BYTE *)(v3 + 592) = v21;
      *(_BYTE *)(v3 + 625) = v4;
      *(_QWORD *)(v3 + 580) = *(_QWORD *)((char *)&v20 + 4);
    }
    else
    {
      v5 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(4, "%s:%i failed to get stack info", "_NFDriverSetControllerInfo", 557);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v23 = "_NFDriverSetControllerInfo";
        v24 = 1024;
        v25 = 557;
        _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to get stack info", buf, 0x12u);
      }
      *((_DWORD *)v16 + 6) = 1;
    }
  }
  v8 = sub_216EE90A8(*(_DWORD *)(*(_QWORD *)(a1 + 24) + 588), *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 592));
  v9 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(v9 + 716) = v8;
  v10 = *(_DWORD *)(v9 + 652);
  if (v10 == 2)
  {
    LOBYTE(ControllerInfo) = 1;
  }
  else if (v10 == 1
         || (v19 = 0, v20 = 0uLL, v21 = 0, (ControllerInfo = NFDriverGetControllerInfo(a1, (uint64_t)&v19)) != 0)
         && ((HIDWORD(v19) & 0xFFFFFFFE) != 4 || (BYTE4(v20) & 0xE0u) - 160 > 0x3F))
  {
    LOBYTE(ControllerInfo) = 0;
  }
  *(_BYTE *)(a1 + 58) = ControllerInfo;
  sub_216EE6D24(a1);
  phOsalNfc_setHardwareType();
  v12 = *((unsigned int *)v16 + 6);
  _Block_object_dispose(&v15, 8);
  return v12;
}

uint64_t sub_216ED3E1C(uint64_t a1)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  NSObject *v16;
  const void **v17;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v19;
  uint64_t v20;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  int v28;
  _QWORD block[6];
  int v30;
  _BYTE buf[20];
  uint64_t v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v28 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 560);
  *(_DWORD *)&buf[16] = -232427879;
  *(_OWORD *)buf = xmmword_216F07E20;
  v27 = MGIsDeviceOneOfType();
  v62 = -427474227;
  v61 = xmmword_216F07E34;
  v26 = MGIsDeviceOneOfType();
  v60 = 1477534141;
  v59 = xmmword_216F07E48;
  v25 = MGIsDeviceOneOfType();
  v58 = -1843102369;
  v57 = xmmword_216F07E5C;
  v24 = MGIsDeviceOneOfType();
  v56 = 710807826;
  v55 = xmmword_216F07E70;
  v23 = MGIsDeviceOneOfType();
  v54 = 470738981;
  v53 = xmmword_216F07E84;
  v22 = MGIsDeviceOneOfType();
  v52 = -2085056298;
  v51 = xmmword_216F07E98;
  v2 = MGIsDeviceOneOfType();
  v50 = 1860682089;
  v49 = xmmword_216F07EAC;
  v3 = MGIsDeviceOneOfType();
  v48 = 2030516999;
  v47 = xmmword_216F07EC0;
  v4 = MGIsDeviceOneOfType();
  v46 = -762483149;
  v45 = xmmword_216F07ED4;
  v5 = MGIsDeviceOneOfType();
  v44 = -1276010597;
  v43 = xmmword_216F07EE8;
  v6 = MGIsDeviceOneOfType();
  v42 = -1926937532;
  v41 = xmmword_216F07EFC;
  v7 = MGIsDeviceOneOfType();
  v40 = -1902732724;
  v39 = xmmword_216F07F10;
  v8 = MGIsDeviceOneOfType();
  v38 = 300442574;
  v37 = xmmword_216F07F24;
  v9 = MGIsDeviceOneOfType();
  v36 = -342357580;
  v35 = xmmword_216F07F38;
  v10 = MGIsDeviceOneOfType();
  v34 = -1294188889;
  v33 = xmmword_216F07F4C;
  v11 = MGIsDeviceOneOfType();
  if (*(_DWORD *)a1 != 3)
  {
    if ((v28 & 2) != 0)
      v12 = 6;
    else
      v12 = 5;
    if ((((v11 | v10 | v9 | v8 | v7 | v6 | v5 | v4 | v3 | v2 | v22) | (v23 | v24 | v25 | v26 | v27)) & 1) != 0)
      v13 = v12;
    else
      v13 = 5;
    v14 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v14[2] + 8));
    v15 = v14[2];
    ++*(_QWORD *)v15;
    pthread_mutex_unlock((pthread_mutex_t *)(v15 + 8));
    v16 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = sub_216ED7118;
    block[3] = &unk_24D65E5A8;
    v30 = v13;
    block[4] = a1;
    block[5] = v14;
    dispatch_async_and_wait(v16, block);
    if (sub_216EE0ECC(v14))
    {
      v17 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i failed to set baud rate: 0x%04llX", "_NFDriverConfigureBaudRate", 713, *v14);
      dispatch_get_specific(*v17);
      v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v20 = *v14;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverConfigureBaudRate";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 713;
        *(_WORD *)&buf[18] = 2048;
        v32 = v20;
        _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to set baud rate: 0x%04llX", buf, 0x1Cu);
      }
    }
    sub_216EE0D6C((void **)v14);
  }
  return 0;
}

uint64_t sub_216ED4304(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t *v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  _QWORD v11[3];
  int v12;
  void **v13;
  char v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  const char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14 = 1;
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v11);
  v2 = 0;
  if (HIDWORD(v11[0]) >= 5)
  {
    if (HIDWORD(v11[0]) == 5 && *(_BYTE *)(a1 + 58))
    {
      return 0;
    }
    else
    {
      v3 = sub_216EE5100(1u, &v14);
      v13 = (void **)v3;
      v4 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i %s CRC", "_NFDriverEnableCRC", 742, "Enabling");
      dispatch_get_specific(*v4);
      v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v16 = "_NFDriverEnableCRC";
        v17 = 1024;
        v18 = 742;
        v19 = 2080;
        v20 = "Enabling";
        _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s CRC", buf, 0x1Cu);
      }
      v7 = sub_216EE4D10(a1, 226, (uint64_t)v3, 0);
      if (sub_216EE0ECC(v7))
      {
        dispatch_get_specific(*v4);
        v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v8)
          v8(3, "%s:%i Failed to %s NFCC CRC", "_NFDriverEnableCRC", 746, "enable");
        dispatch_get_specific(*v4);
        v9 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v16 = "_NFDriverEnableCRC";
          v17 = 1024;
          v18 = 746;
          v19 = 2080;
          v20 = "enable";
          _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to %s NFCC CRC", buf, 0x1Cu);
        }
        if (*v7 == 137)
          v2 = 13;
        else
          v2 = 1;
      }
      else
      {
        v2 = 0;
      }
      sub_216EE0D6C((void **)v7);
      sub_216EE5198(&v13);
    }
  }
  return v2;
}

uint64_t sub_216ED455C(uint64_t a1)
{
  int v2;
  uint64_t v3;
  const void **v4;
  uint64_t *v5;
  uint64_t v6;
  NSObject *v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  uint64_t v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  uint64_t v17;
  _BYTE block[32];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v2 = 1;
  v3 = MEMORY[0x24BDAC760];
  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  while (1)
  {
    v5 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v5[2] + 8));
    v6 = v5[2];
    ++*(_QWORD *)v6;
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 8));
    v7 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)block = v3;
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_216ED7288;
    *(_QWORD *)&block[24] = &unk_24D65E5C8;
    v20 = a1;
    v21 = v5;
    dispatch_async_and_wait(v7, block);
    if (!sub_216EE0ECC(v5))
    {
      v14 = 0;
      goto LABEL_24;
    }
    if (*v5 == 67)
    {
      dispatch_get_specific(*v4);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i eSE power-on failed! (%d/%d)", "_NFDriverValidateEEPROM", 805, v2, 3);
      dispatch_get_specific(*v4);
      v13 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        goto LABEL_14;
      *(_DWORD *)block = 136446978;
      *(_QWORD *)&block[4] = "_NFDriverValidateEEPROM";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 805;
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = v2;
      *(_WORD *)&block[24] = 1024;
      *(_DWORD *)&block[26] = 3;
      v10 = v13;
      v11 = "%{public}s:%i eSE power-on failed! (%d/%d)";
      goto LABEL_13;
    }
    if (*v5 != 255)
      break;
    dispatch_get_specific(*v4);
    v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8)
      v8(3, "%s:%i EEPROM validation failed (%d/%d)", "_NFDriverValidateEEPROM", 803, v2, 3);
    dispatch_get_specific(*v4);
    v9 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_14;
    *(_DWORD *)block = 136446978;
    *(_QWORD *)&block[4] = "_NFDriverValidateEEPROM";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 803;
    *(_WORD *)&block[18] = 1024;
    *(_DWORD *)&block[20] = v2;
    *(_WORD *)&block[24] = 1024;
    *(_DWORD *)&block[26] = 3;
    v10 = v9;
    v11 = "%{public}s:%i EEPROM validation failed (%d/%d)";
LABEL_13:
    _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, v11, block, 0x1Eu);
LABEL_14:
    sub_216EE0D6C((void **)v5);
    if (++v2 == 4)
      return 1;
  }
  dispatch_get_specific(*v4);
  v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15)
    v15(3, "%s:%i failed to validate EEPROM: 0x%04llX", "_NFDriverValidateEEPROM", 815, *v5);
  dispatch_get_specific(*v4);
  v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = *v5;
    *(_DWORD *)block = 136446722;
    *(_QWORD *)&block[4] = "_NFDriverValidateEEPROM";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 815;
    *(_WORD *)&block[18] = 2048;
    *(_QWORD *)&block[20] = v17;
    _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to validate EEPROM: 0x%04llX", block, 0x1Cu);
  }
  if (*v5 == 137)
    v14 = 13;
  else
    v14 = 1;
LABEL_24:
  sub_216EE0D6C((void **)v5);
  return v14;
}

uint64_t sub_216ED48C4(uint64_t a1)
{
  uint64_t v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint64_t *v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t v9;
  _QWORD v11[3];
  int v12;
  void **v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v14 = 16864417;
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v11))
    return 8;
  if (HIDWORD(v11[0]) < 8 || (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 555) & 0x10) == 0)
    return 0;
  v3 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Enabling write counters", "_NFDriverEnableWriteCounters", 1684);
  dispatch_get_specific(*v3);
  v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v16 = "_NFDriverEnableWriteCounters";
    v17 = 1024;
    v18 = 1684;
    _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling write counters", buf, 0x12u);
  }
  v13 = (void **)sub_216EE5100(4u, &v14);
  v6 = sub_216EE4D10(a1, 37025, (uint64_t)v13, 0);
  if (sub_216EE0ECC(v6))
  {
    dispatch_get_specific(*v3);
    v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7)
      v7(3, "%s:%i Failed to enable write counters status:0x%08llx", "_NFDriverEnableWriteCounters", 1692, *v6);
    dispatch_get_specific(*v3);
    v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = *v6;
      *(_DWORD *)buf = 136446722;
      v16 = "_NFDriverEnableWriteCounters";
      v17 = 1024;
      v18 = 1692;
      v19 = 2048;
      v20 = v9;
      _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to enable write counters status:0x%08llx", buf, 0x1Cu);
    }
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  sub_216EE0D6C((void **)v6);
  sub_216EE5198(&v13);
  return v2;
}

uint64_t sub_216ED4AF8(uint64_t a1)
{
  uint64_t result;

  result = sub_216EEADA8(a1);
  if (!*(_BYTE *)(a1 + 57))
    *(_DWORD *)(a1 + 44) = 1;
  return result;
}

uint64_t sub_216ED4B28(uint64_t a1)
{
  return sub_216F013B0(a1, (uint64_t)&unk_216F07F60);
}

uint64_t sub_216ED4B34(uint64_t a1)
{
  return sub_216F016E8(a1, (uint64_t)&unk_216F07FB8);
}

uint64_t sub_216ED4B40(uint64_t a1)
{
  const void **v2;
  void (*v3)(uint64_t, const char *, ...);
  NSObject *v4;
  _BOOL4 v5;
  uint64_t result;
  uint64_t v7;
  const void **v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  NSObject *v11;
  _QWORD v12[3];
  int v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  memset(v12, 0, sizeof(v12));
  v13 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v12))
    return 8;
  if (HIDWORD(v12[0]) > 6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 552);
    v8 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if ((v7 & 0x2000000) != 0)
    {
      if (Logger)
        Logger(4, "%s:%i LPCD assist disabled!", "_NFDriverEnableLpcdAssist", 1634);
      dispatch_get_specific(*v8);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v15 = "_NFDriverEnableLpcdAssist";
        v16 = 1024;
        v17 = 1634;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i LPCD assist disabled!", buf, 0x12u);
      }
      result = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 564) = 0;
    }
    else
    {
      if (Logger)
        Logger(6, "%s:%i enabling LPCD assist", "_NFDriverEnableLpcdAssist", 1652);
      dispatch_get_specific(*v8);
      v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v15 = "_NFDriverEnableLpcdAssist";
        v16 = 1024;
        v17 = 1652;
        _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enabling LPCD assist", buf, 0x12u);
      }
      result = 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 24) + 564) = 1;
    }
  }
  else
  {
    v2 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v3 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v3)
      v3(6, "%s:%i Device does not support this feature", "_NFDriverEnableLpcdAssist", 1629);
    dispatch_get_specific(*v2);
    v4 = NFSharedLogGetLogger();
    v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v5)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "_NFDriverEnableLpcdAssist";
      v16 = 1024;
      v17 = 1629;
      _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_216ED4DCC(uint64_t a1)
{
  unsigned int v2;
  __int16 v3;
  uint64_t *v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  void **v9;
  _BYTE v10[2];
  __int16 v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = NFGetProductType();
  if (v2 <= 0xA && ((1 << v2) & 0x554) != 0)
  {
    v3 = sub_216EE6D80(a1, 2);
    v10[0] = HIBYTE(v3);
    v10[1] = v3;
    v11 = 1793;
    v9 = (void **)sub_216EE5100(4u, v10);
    v4 = sub_216EE4D10(a1, 37025, (uint64_t)v9, 0);
    if (sub_216EE0ECC(v4))
    {
      v5 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Failed to setup CLK timeout config", "_NFDriverSetupRFClockTimeout", 1115);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v13 = "_NFDriverSetupRFClockTimeout";
        v14 = 1024;
        v15 = 1115;
        _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup CLK timeout config", buf, 0x12u);
      }
    }
    sub_216EE0D6C((void **)v4);
    sub_216EE5198(&v9);
  }
  return 0;
}

uint64_t sub_216ED4F44(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  void **v7;
  char *v8;
  NSObject *v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  void *v13;
  _BYTE block[32];
  uint64_t v16;
  void **v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 552);
  if ((v2 & 1) != 0)
    v3 = 2050;
  else
    v3 = 0;
  if ((v2 & 2) != 0)
    v4 = 1;
  else
    v4 = v3;
  if ((~*(_DWORD *)(*(_QWORD *)(a1 + 24) + 552) & 3) != 0)
    v5 = v4;
  else
    v5 = 2175;
  v6 = (v2 >> 4) & 0x200 | (v2 >> 10) & 0x1400 | (v2 >> 6) & 0x100 | v5;
  v7 = (void **)sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v7[2] + 8));
  v8 = (char *)v7[2];
  ++*(_QWORD *)v8;
  pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
  v9 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  *(_QWORD *)block = MEMORY[0x24BDAC760];
  *(_QWORD *)&block[8] = 0x40000000;
  *(_QWORD *)&block[16] = sub_216ED73EC;
  *(_QWORD *)&block[24] = &unk_24D65E5E8;
  v18 = v6;
  v16 = a1;
  v17 = v7;
  dispatch_async_and_wait(v9, block);
  if (sub_216EE0ECC((uint64_t *)v7))
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to configure RF logging : 0x%04llX", "_NFDriverConfigureRFLogging", 1183, *v7);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *v7;
      *(_DWORD *)block = 136446722;
      *(_QWORD *)&block[4] = "_NFDriverConfigureRFLogging";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 1183;
      *(_WORD *)&block[18] = 2048;
      *(_QWORD *)&block[20] = v13;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to configure RF logging : 0x%04llX", block, 0x1Cu);
    }
    sub_216EE0D6C(v7);
    return 1;
  }
  else
  {
    sub_216EE0D6C(v7);
    return 0;
  }
}

uint64_t sub_216ED5138(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v4;
  uint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD v11[3];
  int v12;
  void **v13;
  __int16 v14;
  char v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v1 = 0;
  v22 = *MEMORY[0x24BDAC8D0];
  v15 = 0;
  v14 = 900;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 555) & 1) != 0)
  {
    if ((NFIsRestoreOS() & 1) != 0 || !NFProductHasThermistor() || *(_BYTE *)(a1 + 56))
    {
      return 0;
    }
    else
    {
      memset(v11, 0, sizeof(v11));
      v12 = 0;
      NFDriverGetControllerInfo(a1, (uint64_t)v11);
      v1 = 0;
      if (HIDWORD(v11[0]) >= 0xC)
      {
        if (HIDWORD(v11[0]) == 16)
          v15 = 1;
        v13 = (void **)sub_216EE5100(3u, &v14);
        v4 = sub_216EE4D10(a1, 242, (uint64_t)v13, 0);
        v5 = sub_216EE0ECC(v4);
        v6 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v5)
        {
          if (Logger)
            Logger(3, "%s:%i Failed to configure Temperature monitoring : 0x%04llX", "_NFDriverConfigureTemperatureNotifications", 1229, *v4);
          dispatch_get_specific(*v6);
          v8 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            v9 = *v4;
            *(_DWORD *)buf = 136446722;
            v17 = "_NFDriverConfigureTemperatureNotifications";
            v18 = 1024;
            v19 = 1229;
            v20 = 2048;
            v21 = v9;
            _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to configure Temperature monitoring : 0x%04llX", buf, 0x1Cu);
          }
          if (*v4 == 137)
            v1 = 13;
          else
            v1 = 1;
        }
        else
        {
          if (Logger)
            Logger(6, "%s:%i Temperature monitoring configured", "_NFDriverConfigureTemperatureNotifications", 1232);
          dispatch_get_specific(*v6);
          v10 = NFSharedLogGetLogger();
          v1 = 0;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v17 = "_NFDriverConfigureTemperatureNotifications";
            v18 = 1024;
            v19 = 1232;
            _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Temperature monitoring configured", buf, 0x12u);
            v1 = 0;
          }
        }
        sub_216EE0D6C((void **)v4);
        sub_216EE5198(&v13);
      }
    }
  }
  return v1;
}

uint64_t sub_216ED53A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  unint64_t v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  NSObject *v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  _BYTE *v23;
  void (*v24)(uint64_t, const char *, ...);
  NSObject *v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  void (*v34)(uint64_t, const char *, ...);
  NSObject *v35;
  _BYTE *v36;
  _QWORD v37[3];
  int v38;
  __int16 v39;
  char v40;
  void **v41;
  void **v42;
  uint8_t v43[4];
  uint8_t *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  uint64_t v50;
  uint8_t buf[32];
  __int128 v52;
  _QWORD v53[4];

  v53[2] = *MEMORY[0x24BDAC8D0];
  v41 = 0;
  v42 = 0;
  v40 = 11;
  v39 = -24319;
  *(_QWORD *)((char *)v53 + 5) = 0x294A0000000;
  v53[0] = 0x64010A0BA1;
  if ((NFProductIsWatch() & 1) != 0
    || (NFIsRestoreOS() & 1) != 0
    || !NFProductHasThermistor()
    || *(_BYTE *)(a1 + 56))
  {
    return 0;
  }
  memset(v37, 0, sizeof(v37));
  v38 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v37);
  v2 = 0;
  if (HIDWORD(v37[0]) != 16)
    return v2;
  v42 = (void **)sub_216EE5100(3u, &v39);
  v41 = (void **)sub_216EE5100(v39 << 8, 0);
  v4 = sub_216EE4D10(a1, 37026, (uint64_t)v42, (uint64_t)v41);
  v5 = sub_216EE0ECC(v4);
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  if (v5)
  {
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to get RF settings.", "_NFDriverConfigureAIOTemperatureRestriction", 1275);
    dispatch_get_specific(*v6);
    v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1275;
      _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings.", buf, 0x12u);
    }
    sub_216EE5198(&v42);
    sub_216EE5198(&v41);
    sub_216EE0D6C((void **)v4);
    return 1;
  }
  sub_216EE0D6C((void **)v4);
  sub_216EE5198(&v42);
  v52 = 0u;
  memset(buf, 0, sizeof(buf));
  v9 = *((unsigned int *)v41 + 2);
  v36 = *v41;
  dispatch_get_specific(*v6);
  v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  dispatch_get_specific(*v6);
  v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *((unsigned int *)v41 + 2);
    *(_DWORD *)v43 = 136315906;
    v44 = (uint8_t *)"_NFDriverConfigureAIOTemperatureRestriction";
    v45 = 1024;
    v46 = 1284;
    v47 = 2082;
    v48 = "Thresholds are :";
    v49 = 2048;
    v50 = v12;
    _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v43, 0x26u);
  }
  if (v10)
    v10(6, "%s:%i %s %lu bytes :", "_NFDriverConfigureAIOTemperatureRestriction", 1284, "Thresholds are :", *((unsigned int *)v41 + 2));
  if ((_DWORD)v9)
  {
    v13 = 0;
    do
    {
      v14 = 0;
      v15 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v13)];
      do
      {
        v16 = v14 + 1;
        v17 = v14 + 1 + v13;
        v18 = sprintf(v15, "0x%02X ", v36[v13 + v14]);
        if (v14 > 6)
          break;
        v15 += v18;
        ++v14;
      }
      while (v17 < v9);
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v43 = 136446210;
        v44 = buf;
        _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", v43, 0xCu);
      }
      if (v10)
        v10(6, "%s", (const char *)buf);
      v13 += v16;
    }
    while (v17 < v9);
  }
  if (*((_DWORD *)v41 + 2) > 0xDu)
  {
    v23 = *v41;
    v20 = (const void **)MEMORY[0x24BEDCDB0];
    if ((*((_BYTE *)*v41 + 4) & 1) != 0)
    {
      if (!*((_BYTE *)*v41 + 5) && !v23[6])
      {
LABEL_41:
        if (v23[10] || v23[11])
        {
          dispatch_get_specific(*v20);
          v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v26)
            v26(6, "%s:%i Re-using exit threhold", "_NFDriverConfigureAIOTemperatureRestriction", 1306);
          dispatch_get_specific(*v20);
          v27 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1306;
            _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Re-using exit threhold", buf, 0x12u);
          }
          *(_WORD *)((char *)&v53[1] + 1) = *((_WORD *)*v41 + 5);
        }
        goto LABEL_48;
      }
      if (v23[10] || v23[11])
      {
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v34)
          v34(6, "%s:%i Setting already present - not updating", "_NFDriverConfigureAIOTemperatureRestriction", 1294);
        dispatch_get_specific(*v20);
        v35 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1294;
          _os_log_impl(&dword_216EC7000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting already present - not updating", buf, 0x12u);
        }
        sub_216EE5198(&v41);
        return 0;
      }
    }
    if (*((_BYTE *)*v41 + 5) || v23[6])
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24)
        v24(6, "%s:%i Re-using entry threhold", "_NFDriverConfigureAIOTemperatureRestriction", 1300);
      dispatch_get_specific(*v20);
      v25 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1300;
        _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Re-using entry threhold", buf, 0x12u);
      }
      v23 = *v41;
      WORD2(v53[0]) = *(_WORD *)((char *)*v41 + 5);
    }
    goto LABEL_41;
  }
  v20 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v21)
    v21(3, "%s:%i Unexpected length, using custom settings...", "_NFDriverConfigureAIOTemperatureRestriction", 1290);
  dispatch_get_specific(*v20);
  v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1290;
    _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length, using custom settings...", buf, 0x12u);
  }
LABEL_48:
  sub_216EE5198(&v41);
  v42 = (void **)sub_216EE5100(0xDu, v53);
  v28 = sub_216EE4D10(a1, 37025, (uint64_t)v42, 0);
  v29 = sub_216EE0ECC(v28);
  dispatch_get_specific(*v20);
  v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v29)
  {
    if (v30)
      v30(3, "%s:%i Failed to configure Temperature restrictor : 0x%04llX", "_NFDriverConfigureAIOTemperatureRestriction", 1318, *v28);
    dispatch_get_specific(*v20);
    v31 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = *v28;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1318;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v32;
      _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to configure Temperature restrictor : 0x%04llX", buf, 0x1Cu);
    }
    if (*v28 == 137)
      v2 = 13;
    else
      v2 = 1;
  }
  else
  {
    if (v30)
      v30(6, "%s:%i Temperature restrictor configured", "_NFDriverConfigureAIOTemperatureRestriction", 1321);
    dispatch_get_specific(*v20);
    v33 = NFSharedLogGetLogger();
    v2 = 0;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverConfigureAIOTemperatureRestriction";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1321;
      _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Temperature restrictor configured", buf, 0x12u);
      v2 = 0;
    }
  }
  sub_216EE0D6C((void **)v28);
  sub_216EE5198(&v42);
  return v2;
}

uint64_t sub_216ED5C54(uint64_t a1)
{
  unsigned int v1;
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  __int16 v8;
  void **v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  const void **v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  int v16;
  unsigned int v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  __int16 v21;
  uint64_t *v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  uint64_t v25;
  void (*v26)(uint64_t, const char *, ...);
  _BYTE v28[4];
  void **v29;
  void **v30;
  _BYTE v31[3];
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _DWORD v37[7];

  *(_QWORD *)&v37[5] = *MEMORY[0x24BDAC8D0];
  v1 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 712);
  if (v1 >= 0xA00)
  {
    v2 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i timeout must be < %d", "_NFDriverSetGenericATxHappenedTimeout", 1340, 2550);
    dispatch_get_specific(*v2);
    v4 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      return 5;
    *(_DWORD *)buf = 136446722;
    v33 = "_NFDriverSetGenericATxHappenedTimeout";
    v34 = 1024;
    v35 = 1340;
    v36 = 1024;
    v37[0] = 2550;
    v5 = "%{public}s:%i timeout must be < %d";
LABEL_6:
    _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_ERROR, v5, buf, 0x18u);
    return 5;
  }
  v8 = sub_216EE6D80(a1, 4);
  v31[0] = 1;
  v31[1] = HIBYTE(v8);
  v31[2] = v8;
  v30 = (void **)sub_216EE5100(3u, v31);
  v29 = (void **)sub_216EE5100(v31[0] << 8, 0);
  v9 = (void **)sub_216EE4D10(a1, 37026, (uint64_t)v30, (uint64_t)v29);
  if (sub_216EE0ECC((uint64_t *)v9))
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11)
      v11(3, "%s:%i Failed to get TO_BEFORE_STDBY_CFG.", "_NFDriverSetGenericATxHappenedTimeout", 1353);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v33 = "_NFDriverSetGenericATxHappenedTimeout";
      v34 = 1024;
      v35 = 1353;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get TO_BEFORE_STDBY_CFG.", buf, 0x12u);
    }
    sub_216EE0D6C(v9);
    sub_216EE5198(&v30);
    sub_216EE5198(&v29);
    return 1;
  }
  else
  {
    sub_216EE0D6C(v9);
    sub_216EE5198(&v30);
    if (*((_DWORD *)v29 + 2) > 5u)
    {
      v17 = *((unsigned __int16 *)*v29 + 2);
      v18 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19)
        v19(6, "%s:%i toBeforeStdbyCfg=%d ms, requesting %d", "_NFDriverSetGenericATxHappenedTimeout", 1369, v17, v1);
      dispatch_get_specific(*v18);
      v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        v33 = "_NFDriverSetGenericATxHappenedTimeout";
        v34 = 1024;
        v35 = 1369;
        v36 = 1024;
        v37[0] = v17;
        LOWORD(v37[1]) = 1024;
        *(_DWORD *)((char *)&v37[1] + 2) = v1;
        _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i toBeforeStdbyCfg=%d ms, requesting %d", buf, 0x1Eu);
      }
      sub_216EE5198(&v29);
      if (v1 >= v17)
      {
        dispatch_get_specific(*v18);
        v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v26)
          v26(3, "%s:%i timeout must be < %dms", "_NFDriverSetGenericATxHappenedTimeout", 1375, v17);
        dispatch_get_specific(*v18);
        v4 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
          return 5;
        *(_DWORD *)buf = 136446722;
        v33 = "_NFDriverSetGenericATxHappenedTimeout";
        v34 = 1024;
        v35 = 1375;
        v36 = 1024;
        v37[0] = v17;
        v5 = "%{public}s:%i timeout must be < %dms";
        goto LABEL_6;
      }
      v21 = sub_216EE6D80(a1, 39);
      v28[0] = HIBYTE(v21);
      v28[1] = v21;
      v28[2] = 1;
      v28[3] = v1 / 0xA;
      v30 = (void **)sub_216EE5100(4u, v28);
      v22 = sub_216EE4D10(a1, 37025, (uint64_t)v30, 0);
      if (sub_216EE0ECC(v22))
      {
        dispatch_get_specific(*v18);
        v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v23)
          v23(3, "%s:%i status=0x%04llX", "_NFDriverSetGenericATxHappenedTimeout", 1390, *v22);
        dispatch_get_specific(*v18);
        v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = *v22;
          *(_DWORD *)buf = 136446722;
          v33 = "_NFDriverSetGenericATxHappenedTimeout";
          v34 = 1024;
          v35 = 1390;
          v36 = 2048;
          *(_QWORD *)v37 = v25;
          _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
        }
        v6 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_216EE0D6C((void **)v22);
      sub_216EE5198(&v30);
    }
    else
    {
      v13 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v14)
        v14(3, "%s:%i Unexpected length for TO_BEFORE_STDBY_CFG : %d", "_NFDriverSetGenericATxHappenedTimeout", 1363, *((_DWORD *)v29 + 2));
      dispatch_get_specific(*v13);
      v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = *((_DWORD *)v29 + 2);
        *(_DWORD *)buf = 136446722;
        v33 = "_NFDriverSetGenericATxHappenedTimeout";
        v34 = 1024;
        v35 = 1363;
        v36 = 1024;
        v37[0] = v16;
        _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length for TO_BEFORE_STDBY_CFG : %d", buf, 0x18u);
      }
      sub_216EE5198(&v29);
      return 8;
    }
  }
  return v6;
}

uint64_t sub_216ED6234()
{
  return 0;
}

uint64_t sub_216ED623C(uint64_t a1)
{
  uint64_t *v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void **v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v16 = xmmword_216F07FC3;
  v17 = 0;
  v9 = (void **)sub_216EE5100(0x18u, &v16);
  v2 = sub_216EE4D10(a1, 37025, (uint64_t)v9, 0);
  if (sub_216EE0ECC(v2))
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to set ECP VAS polling: 0x%08llx", "_NFDriverConfigureECPPolling", 1434, *v2);
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *v2;
      *(_DWORD *)buf = 136446722;
      v11 = "_NFDriverConfigureECPPolling";
      v12 = 1024;
      v13 = 1434;
      v14 = 2048;
      v15 = v6;
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set ECP VAS polling: 0x%08llx", buf, 0x1Cu);
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  sub_216EE0D6C((void **)v2);
  sub_216EE5198(&v9);
  return v7;
}

uint64_t sub_216ED63AC(uint64_t a1)
{
  const void **v2;
  void (*v3)(uint64_t, const char *, ...);
  NSObject *v4;
  uint64_t v5;
  uint64_t *v6;
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t v10;
  _QWORD v12[5];
  _QWORD v13[3];
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  memset(v13, 0, sizeof(v13));
  v14 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v13);
  if (HIDWORD(v13[0]) > 6)
  {
    v12[0] = MEMORY[0x24BDAC760];
    v12[1] = 0x40000000;
    v12[2] = sub_216ED7528;
    v12[3] = &unk_24D65E608;
    v12[4] = a1;
    v6 = sub_216EF2A1C(a1, (uint64_t)v12);
    if (sub_216EE0ECC(v6))
    {
      v7 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(4, "%s:%i failed to enable VAS CODES: 0x%04llX", "_NFDriverConfigureVASFieldDetectShortcuts", 1525, *v6);
      dispatch_get_specific(*v7);
      v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *v6;
        *(_DWORD *)buf = 136446722;
        v16 = "_NFDriverConfigureVASFieldDetectShortcuts";
        v17 = 1024;
        v18 = 1525;
        v19 = 2048;
        v20 = v10;
        _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to enable VAS CODES: 0x%04llX", buf, 0x1Cu);
      }
      v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    sub_216EE0D6C((void **)v6);
  }
  else
  {
    v2 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v3 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v3)
      v3(6, "%s:%i Device does not support this feature", "_NFDriverConfigureVASFieldDetectShortcuts", 1454);
    dispatch_get_specific(*v2);
    v4 = NFSharedLogGetLogger();
    v5 = 0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v16 = "_NFDriverConfigureVASFieldDetectShortcuts";
      v17 = 1024;
      v18 = 1454;
      _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
      return 0;
    }
  }
  return v5;
}

uint64_t sub_216ED65E8(uint64_t a1)
{
  __int16 v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  unsigned int *v6;
  void **v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t v10;
  int v11;
  int v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  void **v17;
  _DWORD *v18;
  uint64_t *v19;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  _BYTE v23[3];
  void **v24;
  void **v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v2 = sub_216EE6D80(a1, 24);
  v24 = 0;
  v25 = 0;
  v23[0] = 1;
  v23[1] = HIBYTE(v2);
  v23[2] = v2;
  v3 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i %d%% ASK modulation requested.", "_NFDriverChangeISO15693Modulation", 1547, 100);
  dispatch_get_specific(*v3);
  v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v27 = "_NFDriverChangeISO15693Modulation";
    v28 = 1024;
    v29 = 1547;
    v30 = 1024;
    v31 = 100;
    _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %d%% ASK modulation requested.", buf, 0x18u);
  }
  v6 = sub_216EE5100(3u, v23);
  v25 = (void **)v6;
  v24 = (void **)sub_216EE5100(0x100u, 0);
  v7 = (void **)sub_216EE4D10(a1, 37026, (uint64_t)v6, (uint64_t)v24);
  if (sub_216EE0ECC((uint64_t *)v7))
  {
    dispatch_get_specific(*v3);
    v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8)
      v8(3, "%s:%i Failed to get RF settings.", "_NFDriverChangeISO15693Modulation", 1555);
    dispatch_get_specific(*v3);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v27 = "_NFDriverChangeISO15693Modulation";
      v28 = 1024;
      v29 = 1555;
      _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings.", buf, 0x12u);
    }
    sub_216EE5198(&v25);
    sub_216EE5198(&v24);
    sub_216EE0D6C(v7);
    return 1;
  }
  else
  {
    sub_216EE0D6C(v7);
    v11 = (*((_BYTE *)v24 + 8) - 1);
    if (*((_BYTE *)v24 + 8) == 5)
    {
      v12 = *((char *)*v24 + 4);
      if (v12 < 0)
      {
        *((_BYTE *)*v24 + 4) = v12 & 0x7F;
        sub_216EE5198(&v25);
        dispatch_get_specific(*v3);
        v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v15)
          v15(6, "%s:%i Setting polling modulation limit to 100%%", "_NFDriverChangeISO15693Modulation", 1596);
        dispatch_get_specific(*v3);
        v16 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v27 = "_NFDriverChangeISO15693Modulation";
          v28 = 1024;
          v29 = 1596;
          _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting polling modulation limit to 100%%", buf, 0x12u);
        }
        v25 = (void **)sub_216EE5100(v11 + 12, 0);
        *(_DWORD *)*v25 = *(_DWORD *)((char *)*v24 + 1);
        v17 = v25;
        v18 = *v25;
        *(_QWORD *)(v18 + 1) = 0x37AF7632080002F0;
        v18[3] = -1051982618;
        v19 = sub_216EE4D10(a1, 224, (uint64_t)v17, 0);
        if (sub_216EE0ECC(v19))
        {
          dispatch_get_specific(*v3);
          v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v20)
            v20(3, "%s:%i Failed to set RF settings.", "_NFDriverChangeISO15693Modulation", 1610);
          dispatch_get_specific(*v3);
          v21 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v27 = "_NFDriverChangeISO15693Modulation";
            v28 = 1024;
            v29 = 1610;
            _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set RF settings.", buf, 0x12u);
          }
          v10 = 1;
        }
        else
        {
          v10 = 0;
        }
        sub_216EE0D6C((void **)v19);
        sub_216EE5198(&v25);
        sub_216EE5198(&v24);
      }
      else
      {
        sub_216EE5198(&v25);
        sub_216EE5198(&v24);
        return 0;
      }
    }
    else
    {
      dispatch_get_specific(*v3);
      v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v13)
        v13(3, "%s:%i Unexpected length for ISO modulation : %d, expected %d", "_NFDriverChangeISO15693Modulation", 1565, v11, 4);
      dispatch_get_specific(*v3);
      v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        v27 = "_NFDriverChangeISO15693Modulation";
        v28 = 1024;
        v29 = 1565;
        v30 = 1024;
        v31 = v11;
        v32 = 1024;
        v33 = 4;
        _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length for ISO modulation : %d, expected %d", buf, 0x1Eu);
      }
      sub_216EE5198(&v25);
      sub_216EE5198(&v24);
      return 8;
    }
  }
  return v10;
}

uint64_t sub_216ED6AC0(uint64_t a1)
{
  int v2;
  char v3;

  v3 = 88;
  v2 = 134217888;
  return NFDriverEnableAntiRelay(a1, (uint64_t)&v2, 5);
}

uint64_t sub_216ED6AF8()
{
  return 0;
}

void sub_216ED6B00(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  const char *v7;
  unsigned int v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  unsigned int v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unsigned int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_GeneralNtfRegister();
  if (v2)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_NFDriverRegisterNCINotifications_block_invoke", 859, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    *(_DWORD *)buf = 136446722;
    v21 = "_NFDriverRegisterNCINotifications_block_invoke";
    v22 = 1024;
    v23 = 859;
    v24 = 1024;
    v25 = v3;
    v7 = "%{public}s:%i status=0x%04X";
    goto LABEL_6;
  }
  v8 = phLibNfc_SE_NtfRegister();
  if (v8)
  {
    v3 = v8;
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
      v10(3, "%s:%i status=0x%04X", "_NFDriverRegisterNCINotifications_block_invoke", 866, v3);
    dispatch_get_specific(*v9);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v21 = "_NFDriverRegisterNCINotifications_block_invoke";
      v22 = 1024;
      v23 = 866;
      v24 = 1024;
      v25 = v3;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    phLibNfc_RemoteDev_NtfUnregister();
    goto LABEL_13;
  }
  v14 = phLibNfc_RemoteDev_NtfRegister();
  if (v14)
  {
    v3 = v14;
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(3, "%s:%i status=0x%04X", "_NFDriverRegisterNCINotifications_block_invoke", 876, v3);
    dispatch_get_specific(*v15);
    v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_13;
    *(_DWORD *)buf = 136446722;
    v21 = "_NFDriverRegisterNCINotifications_block_invoke";
    v22 = 1024;
    v23 = 876;
    v24 = 1024;
    v25 = v3;
    v7 = "%{public}s:%i status=0x%04X";
    goto LABEL_6;
  }
  v17 = phLibNfc_CardEmulation_NtfRegister();
  if (!v17)
  {
    v12 = *(_QWORD **)(a1 + 40);
    v13 = 0;
    goto LABEL_14;
  }
  v3 = v17;
  v18 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v19)
    v19(3, "%s:%i HCE Register error = 0x%04x", "_NFDriverRegisterNCINotifications_block_invoke", 883, v3);
  dispatch_get_specific(*v18);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v21 = "_NFDriverRegisterNCINotifications_block_invoke";
    v22 = 1024;
    v23 = 883;
    v24 = 1024;
    v25 = v3;
    v7 = "%{public}s:%i HCE Register error = 0x%04x";
LABEL_6:
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, v7, buf, 0x18u);
  }
LABEL_13:
  v12 = *(_QWORD **)(a1 + 40);
  v13 = v3;
LABEL_14:
  sub_216EE0DE8(v12, v13);
  sub_216EE0D6C(*(void ***)(a1 + 40));
}

void sub_216ED6EB4(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_DnldGeneralNtfRegister();
  if (v2)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to register notification callback.", "_NFDriverRegisterFWDLNotifications_block_invoke", 966);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v8 = "_NFDriverRegisterFWDLNotifications_block_invoke";
      v9 = 1024;
      v10 = 966;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to register notification callback.", buf, 0x12u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
  }
  sub_216EE0DE8(*(_QWORD **)(a1 + 40), 0);
  sub_216EE0D6C(*(void ***)(a1 + 40));
}

void sub_216ED6FE8(uint64_t a1)
{
  int v2;
  int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_GetstackCapabilities();
  if (v2)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_NFDriverSetControllerInfo_block_invoke", 548, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_NFDriverSetControllerInfo_block_invoke";
      v9 = 1024;
      v10 = 548;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_216ED7118(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_ConfigureHsuParams();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_NFDriverConfigureBaudRate_block_invoke", 706, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_NFDriverConfigureBaudRate_block_invoke";
      v9 = 1024;
      v10 = 706;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216ED725C(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

void sub_216ED7288(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_ValidateEepromSettings();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverValidateEEPROM_block_invoke", 782, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverValidateEEPROM_block_invoke";
      v9 = 1024;
      v10 = 782;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216ED73C0(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

void sub_216ED73EC(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_ConfigureLogging();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverConfigureRFLogging_block_invoke", 1141, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverConfigureRFLogging_block_invoke";
      v9 = 1024;
      v10 = 1141;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

uint64_t sub_216ED7528()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  _QWORD v11[4];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v8 = 3;
  v9 = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  memset(v15, 0, 24);
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Enabling VAS CODES", "_NFDriverConfigureVASFieldDetectShortcuts_block_invoke", 1468);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "_NFDriverConfigureVASFieldDetectShortcuts_block_invoke";
    v6 = 1024;
    v7 = 1468;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling VAS CODES", buf, 0x12u);
  }
  BYTE2(v9) = 6;
  *(_DWORD *)((char *)&v9 + 3) = 16958210;
  *(_WORD *)((char *)&v9 + 7) = 1;
  BYTE8(v10) = 4;
  *(_DWORD *)((char *)&v10 + 9) = 180994;
  *(_WORD *)((char *)&v11[1] + 5) = 1025;
  *(_DWORD *)((char *)&v11[1] + 7) = 364290;
  *(_WORD *)((char *)&v12 + 3) = 1025;
  *(_DWORD *)((char *)&v12 + 5) = 362754;
  BYTE10(v13) = 4;
  *(_DWORD *)((char *)&v13 + 11) = 311554;
  return phLibNfc_Mgt_SetNfccParams();
}

_DWORD *sub_216ED76F0(uint64_t a1, int a2, int a3, uint64_t a4)
{
  int v5;
  const void **v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  const char *v9;
  _DWORD *v10;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  const void **v19;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  const void **v22;
  void (*v23)(uint64_t, const char *, ...);
  const void **v24;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v24 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementCreate", 80, "driver");
    dispatch_get_specific(*v24);
    v26 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v28 = "NFDriverSecureElementCreate";
      v29 = 1024;
      v30 = 80;
      v31 = 2080;
      v32 = "driver";
      _os_log_impl(&dword_216EC7000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v5 = a2 - 2;
  if ((a2 - 2) >= 5 || ((0x1Du >> v5) & 1) == 0)
  {
    v6 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7)
      v7(3, "%s:%i Unknown SE type %d", "_seTypeToID", 53, a2);
    dispatch_get_specific(*v6);
    v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446722;
    v28 = "_seTypeToID";
    v29 = 1024;
    v30 = 53;
    v31 = 1024;
    LODWORD(v32) = a2;
    v9 = "%{public}s:%i Unknown SE type %d";
LABEL_8:
    _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x18u);
    return 0;
  }
  v15 = dword_216F07FE8[v5];
  v16 = malloc_type_calloc(1uLL, 0x80uLL, 0x10A004065E1CA33uLL);
  if (!v16)
  {
    v22 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v23)
      v23(3, "%s:%i Failed to allocate se of type %d", "NFDriverSecureElementCreate", 88, a2);
    dispatch_get_specific(*v22);
    v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446722;
    v28 = "NFDriverSecureElementCreate";
    v29 = 1024;
    v30 = 88;
    v31 = 1024;
    LODWORD(v32) = a2;
    v9 = "%{public}s:%i Failed to allocate se of type %d";
    goto LABEL_8;
  }
  v10 = v16;
  v17 = 0;
  v16[4] = v15;
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = a4;
  v18 = 2;
  v16[6] = a3;
  do
  {
    if (v18 == a2)
    {
      (*(void (**)(_DWORD *))((char *)&unk_24D65E628 + v17 + 8))(v16);
      return v10;
    }
    v18 = *(_DWORD *)((char *)&unk_24D65E628 + v17 + 16);
    v17 += 16;
  }
  while (v17 != 64);
  v19 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v20)
    v20(3, "%s:%i Unknown SE type %d", "_createSE", 74, a2);
  dispatch_get_specific(*v19);
  v21 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v28 = "_createSE";
    v29 = 1024;
    v30 = 74;
    v31 = 1024;
    LODWORD(v32) = a2;
    _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown SE type %d", buf, 0x18u);
  }
  return v10;
}

uint64_t sub_216ED7B50(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_SetPower", 114, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_SetPower";
      v8 = 1024;
      v9 = 114;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 32);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED7C98(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetATR", 124, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_GetATR";
      v8 = 1024;
      v9 = 124;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 40);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED7DE0(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetOSInfo", 134, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_GetOSInfo";
      v8 = 1024;
      v9 = 134;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 48);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED7F28(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetOSMode", 144, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_GetOSMode";
      v8 = 1024;
      v9 = 144;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 56);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED8070(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetOSUpdateLog", 154, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_GetOSUpdateLog";
      v8 = 1024;
      v9 = 154;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 64);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED81B8(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetAttackCounterLog", 164, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_GetAttackCounterLog";
      v8 = 1024;
      v9 = 164;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 72);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED8300(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetPresenceOfAttackLog", 174, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_GetPresenceOfAttackLog";
      v8 = 1024;
      v9 = 174;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 80);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED8448(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_UnlockRequestInfo", 184, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_UnlockRequestInfo";
      v8 = 1024;
      v9 = 184;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 88);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED8590(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_GetManifestQuery", 194, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_GetManifestQuery";
      v8 = 1024;
      v9 = 194;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 96);
  if (v1)
    return v1();
  else
    return 0;
}

uint64_t sub_216ED86D8(uint64_t a1)
{
  uint64_t (*v1)(void);
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElement_IsOSReady", 215, "se");
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "NFDriverSecureElement_IsOSReady";
      v8 = 1024;
      v9 = 215;
      v10 = 2080;
      v11 = "se";
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v1 = *(uint64_t (**)(void))(a1 + 112);
  if (v1)
    return v1();
  else
    return 1;
}

BOOL sub_216ED8820(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  _BOOL8 result;
  const void *v13;
  size_t v14;
  const void **v15;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  uint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = NFDataCreateWithBytes();
  v5 = NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 2, 0x80u, 0xCAu, 0, 0xFEu, 0, v4);
  NFDataRelease();
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    v7 = v6 - 2;
    if (v6 < 2)
    {
      v8 = 0;
LABEL_14:
      v15 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i AID_MANIFESTQUERY returned error: 0x%04x", "GetManifestQuery_Eos", 53, v8);
      dispatch_get_specific(*v15);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v23 = "GetManifestQuery_Eos";
        v24 = 1024;
        v25 = 53;
        v26 = 1024;
        LODWORD(v27) = v8;
        _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i AID_MANIFESTQUERY returned error: 0x%04x", buf, 0x18u);
      }
      NFDataRelease();
      return 0;
    }
    v13 = *(const void **)v5;
    v8 = __rev16(*(unsigned __int16 *)(*(_QWORD *)v5 + v7));
    if (v8 != 36864)
      goto LABEL_14;
    if (v6 < 3)
    {
      v18 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19)
        v19(3, "%s:%i Incorrect manifest query length: %zu", "GetManifestQuery_Eos", 63, *(_QWORD *)(v5 + 8));
      dispatch_get_specific(*v18);
      v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v21 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)buf = 136446722;
        v23 = "GetManifestQuery_Eos";
        v24 = 1024;
        v25 = 63;
        v26 = 2048;
        v27 = v21;
        _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Incorrect manifest query length: %zu", buf, 0x1Cu);
      }
    }
    else
    {
      if (v7 >= 0x100)
        v14 = 256;
      else
        v14 = v6 - 2;
      *(_WORD *)(a2 + 3578) = v14;
      memcpy((void *)(a2 + 3120), v13, v14);
    }
    NFDataRelease();
    return 1;
  }
  else
  {
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
      v10(3, "%s:%i Failed to get ManifestQuery", "GetManifestQuery_Eos", 48);
    dispatch_get_specific(*v9);
    v11 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      v23 = "GetManifestQuery_Eos";
      v24 = 1024;
      v25 = 48;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get ManifestQuery", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

BOOL sub_216ED8B40(uint64_t a1)
{
  if (a1)
  {
    dword_253E47160 = 0;
    *(_QWORD *)(a1 + 32) = sub_216ED8BD0;
    *(_QWORD *)(a1 + 40) = sub_216ED8CD4;
    *(_QWORD *)(a1 + 48) = sub_216ED8EB0;
    *(_QWORD *)(a1 + 56) = sub_216ED9D78;
    *(_QWORD *)(a1 + 64) = sub_216EDA324;
    *(_QWORD *)(a1 + 72) = sub_216EDA748;
    *(_QWORD *)(a1 + 80) = sub_216EDABF4;
    *(_QWORD *)(a1 + 88) = sub_216EDB3A0;
    *(_QWORD *)(a1 + 96) = sub_216ED8820;
    *(_QWORD *)(a1 + 104) = sub_216EDB3A8;
    *(_QWORD *)(a1 + 112) = sub_216EDB3B0;
    *(_DWORD *)(a1 + 20) = 6;
  }
  return a1 != 0;
}

uint64_t sub_216ED8BD0(uint64_t *a1, int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(3, "%s:%i WARNING : power cycling SE", "SetPower_Eos", 76);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v9 = "SetPower_Eos";
    v10 = 1024;
    v11 = 76;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i WARNING : power cycling SE", buf, 0x12u);
  }
  return NFDriverSetEmbeddedSecureElementPower(*a1, a2);
}

BOOL sub_216ED8CD4(uint64_t a1, _BYTE *a2)
{
  char *v4;
  _BOOL8 result;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  int v9;
  _BOOL8 v10;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  v16 = 1023;
  result = NFDriverSecureElementGetCometATR(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), v4, &v16);
  if (result)
  {
    v15 = 0;
    v14 = 0;
    v6 = v16;
    v4[v16] = 0;
    v7 = v6 - 1;
    if (v7 >= 0x17)
      v8 = 23;
    else
      v8 = v7;
    memcpy(a2 + 3504, v4 + 1, v8);
    v9 = sscanf(v4 + 1, "JCOP%f R%d.%d", (char *)&v15 + 4, &v15, &v14);
    v10 = v9 == 3;
    if (v9 == 3)
    {
      a2[3528] = v15;
      a2[3529] = v14;
    }
    else
    {
      v11 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(4, "%s:%i Failed to parse ATR %s", "GetATR_Eos", 111, v4 + 1);
      dispatch_get_specific(*v11);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v18 = "GetATR_Eos";
        v19 = 1024;
        v20 = 111;
        v21 = 2080;
        v22 = v4 + 1;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to parse ATR %s", buf, 0x1Cu);
      }
    }
    goto LABEL_14;
  }
  v10 = 0;
  if (v4)
  {
LABEL_14:
    free(v4);
    return v10;
  }
  return result;
}

BOOL sub_216ED8EB0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  int v12;
  uint64_t v13;
  size_t v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  _QWORD *v17;
  int v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  void (*v24)(uint64_t, const char *, ...);
  NSObject *v25;
  uint32_t v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  void (*v34)(uint64_t, const char *, ...);
  NSObject *v35;
  void (*v36)(uint64_t, const char *, ...);
  NSObject *v37;
  void (*v38)(uint64_t, const char *, ...);
  NSObject *v39;
  void (*v40)(uint64_t, const char *, ...);
  NSObject *v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(uint64_t, const char *, ...);
  NSObject *v50;
  const char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint32_t v54;
  void (*v55)(uint64_t, const char *, ...);
  NSObject *v56;
  uint64_t v57;
  size_t v58;
  void (*v59)(uint64_t, const char *, ...);
  NSObject *v60;
  void (*v61)(uint64_t, const char *, ...);
  NSObject *v62;
  void (*v64)(uint64_t, const char *, ...);
  NSObject *v65;
  uint64_t v66;
  void (*v67)(uint64_t, const char *, ...);
  NSObject *v68;
  int v69;
  int v70;
  int v71;
  unsigned __int16 v72;
  uint64_t v73;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  int v77;
  __int16 v78;
  _BYTE v79[10];
  __int16 v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  result = sub_216ED8820(a1, a2);
  if (result)
  {
    v72 = 0;
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    if (*(unsigned __int16 *)(a2 + 3578) <= 0xA4uLL)
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Invalid manifest length", "_EosParseManifestQuery", 137);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446466;
      v75 = "_EosParseManifestQuery";
      v76 = 1024;
      v77 = 137;
      v8 = "%{public}s:%i Invalid manifest length";
      goto LABEL_44;
    }
    if (!NFDataCreateWithBytes())
    {
      dispatch_get_specific(*v5);
      v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24)
        v24(3, "%s:%i Failed to allocate manifest query data", "_EosParseManifestQuery", 143);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446466;
      v75 = "_EosParseManifestQuery";
      v76 = 1024;
      v77 = 143;
      v8 = "%{public}s:%i Failed to allocate manifest query data";
LABEL_44:
      v25 = v7;
      v26 = 18;
LABEL_45:
      _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, v8, buf, v26);
      return 0;
    }
    v9 = TLVCreateWithData();
    v73 = v9;
    if (v9)
    {
      v10 = v9;
      v11 = v5;
      do
      {
        v12 = *(_DWORD *)(v10 + 32);
        if (v12 == 134)
        {
          v13 = *(_QWORD *)(v10 + 40);
          v14 = *(_QWORD *)(v13 + 8);
          if (v14 >= 0x19)
          {
            dispatch_get_specific(*v5);
            v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v15)
              v15(3, "%s:%i Error ! Unexpected serial number length ", "_EosParseManifestQuery", 155);
            dispatch_get_specific(*v5);
            v16 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v75 = "_EosParseManifestQuery";
              v76 = 1024;
              v77 = 155;
              _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i Error ! Unexpected serial number length ", buf, 0x12u);
            }
            v13 = *(_QWORD *)(v10 + 40);
            v14 = 24;
            v5 = v11;
          }
          memcpy((void *)(a2 + 3480), *(const void **)v13, v14);
          v12 = *(_DWORD *)(v10 + 32);
        }
        if (v12 == 137)
        {
          v17 = *(_QWORD **)(v10 + 40);
          if (v17[1] == 32)
          {
            if (*(_QWORD *)*v17 ^ 0x75A5ACE19525D904 | *(_QWORD *)(*v17 + 8) ^ 0x16F1101E35C189A6 | *(_QWORD *)(*v17 + 16) ^ 0xA4EEF336B936CDD0 | *(_QWORD *)(*v17 + 24) ^ 0xBDD1D60286D53B67)
              v18 = 1;
            else
              v18 = 2;
          }
          else
          {
            dispatch_get_specific(*v5);
            v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v19)
              v19(3, "%s:%i Error ! Unexpected cert length ", "_EosParseManifestQuery", 162);
            dispatch_get_specific(*v5);
            v20 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v75 = "_EosParseManifestQuery";
              v76 = 1024;
              v77 = 162;
              _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Error ! Unexpected cert length ", buf, 0x12u);
            }
            v18 = 0;
            v5 = v11;
          }
          *(_DWORD *)(a2 + 3536) = v18;
        }
        v10 = *(_QWORD *)(v10 + 24);
      }
      while (v10);
      TLVRelease();
    }
    NFDataRelease();
    sub_216ECE7E4(a1, a2);
    if (*(_DWORD *)(a2 + 3532) != 2)
    {
      dispatch_get_specific(*v5);
      v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27)
        v27(6, "%s:%i Not updating the rest of OS Info : JCOP is not available", "GetOSInfo_Eos", 267);
      dispatch_get_specific(*v5);
      v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v75 = "GetOSInfo_Eos";
        v76 = 1024;
        v77 = 267;
        _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not updating the rest of OS Info : JCOP is not available", buf, 0x12u);
      }
      return 1;
    }
    v21 = NFDataCreateWithBytes();
    NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v21, &v72);
    NFDataRelease();
    switch(v72)
    {
      case 0x6614u:
        dispatch_get_specific(*v5);
        v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v29)
          v29(5, "%s:%i JCOP OS Update Mode detected", "GetOSInfo_Eos", 284);
        dispatch_get_specific(*v5);
        v30 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v75 = "GetOSInfo_Eos";
          v76 = 1024;
          v77 = 284;
          _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s:%i JCOP OS Update Mode detected", buf, 0x12u);
        }
        *(_BYTE *)(a2 + 3584) = 1;
LABEL_57:
        if (*(_DWORD *)(a2 + 3532) == 3)
          *(_BYTE *)(a2 + 3584) = 1;
        if (!*(_BYTE *)(a2 + 3583) && !*(_BYTE *)(a2 + 3584))
          sub_216ECE8F0(a1, a2);
        v31 = NFDataCreateWithBytes();
        if (!NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v31, &v72))
        {
          dispatch_get_specific(*v5);
          v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v36)
            v36(3, "%s:%i Returned error: 0x%04x", "GetOSInfo_Eos", 312, v72);
          dispatch_get_specific(*v5);
          v37 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v75 = "GetOSInfo_Eos";
            v76 = 1024;
            v77 = 312;
            v78 = 1024;
            *(_DWORD *)v79 = v72;
            _os_log_impl(&dword_216EC7000, v37, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
          }
          NFDataRelease();
          return 0;
        }
        NFDataRelease();
        sub_216ECE7E4(a1, a2);
        v32 = sub_216ECE534(a1, 0, 254, 57120, 0);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 8);
          if (v33 - 48 > 0xFFFFFFFFFFFFFFCELL)
          {
            memcpy((void *)(a2 + 3376), *(const void **)v32, v33);
            *(_BYTE *)(a2 + 3376 + v33) = 0;
          }
          else
          {
            dispatch_get_specific(*v5);
            v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v34)
              v34(4, "%s:%i Platform id too long: %ld", "GetOSInfo_Eos", 331, v33);
            dispatch_get_specific(*v5);
            v35 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              v75 = "GetOSInfo_Eos";
              v76 = 1024;
              v77 = 331;
              v78 = 2048;
              *(_QWORD *)v79 = v33;
              _os_log_impl(&dword_216EC7000, v35, OS_LOG_TYPE_ERROR, "%{public}s:%i Platform id too long: %ld", buf, 0x1Cu);
            }
          }
          NFDataRelease();
        }
        else
        {
          dispatch_get_specific(*v5);
          v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v40)
            v40(4, "%s:%i Failed to get platform identifier", "GetOSInfo_Eos", 326);
          dispatch_get_specific(*v5);
          v41 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "GetOSInfo_Eos";
            v76 = 1024;
            v77 = 326;
            _os_log_impl(&dword_216EC7000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get platform identifier", buf, 0x12u);
          }
        }
        v42 = (uint64_t *)sub_216ECE534(a1, 0, 254, 57164, 0);
        if (!v42)
        {
          dispatch_get_specific(*v5);
          v55 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v55)
            v55(4, "%s:%i Failed to get JCOP Version", "GetOSInfo_Eos", 347);
          dispatch_get_specific(*v5);
          v56 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "GetOSInfo_Eos";
            v76 = 1024;
            v77 = 347;
            _os_log_impl(&dword_216EC7000, v56, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get JCOP Version", buf, 0x12u);
          }
          goto LABEL_99;
        }
        v43 = v42[1];
        if (v43 < 2)
        {
LABEL_89:
          dispatch_get_specific(*v5);
          v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v49)
            v49(3, "%s:%i Did not find version tag!", "_NFDriverEosUpdateJCOPVersion", 194);
          dispatch_get_specific(*v5);
          v50 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            goto LABEL_94;
          *(_DWORD *)buf = 136446466;
          v75 = "_NFDriverEosUpdateJCOPVersion";
          v76 = 1024;
          v77 = 194;
          v51 = "%{public}s:%i Did not find version tag!";
          v52 = v50;
          v53 = OS_LOG_TYPE_ERROR;
          v54 = 18;
        }
        else
        {
          v44 = 0;
          v45 = *v42;
          v46 = 1;
          while (1)
          {
            v47 = *(unsigned __int8 *)(v45 + v46);
            v48 = v44 + 2 + v47;
            if (*(unsigned __int8 *)(v45 + v44) == 133)
              break;
            v46 = v48 + 1;
            v44 += 2 + v47;
            if (v48 + 1 >= v43)
              goto LABEL_89;
          }
          if ((_DWORD)v47 != 4 || v48 > v43)
          {
            dispatch_get_specific(*v5);
            v64 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v64)
              v64(3, "%s:%i Invalid version tag length %d", "_NFDriverEosUpdateJCOPVersion", 201, v47);
            dispatch_get_specific(*v5);
            v65 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
              goto LABEL_94;
            *(_DWORD *)buf = 136446722;
            v75 = "_NFDriverEosUpdateJCOPVersion";
            v76 = 1024;
            v77 = 201;
            v78 = 1024;
            *(_DWORD *)v79 = v47;
            v51 = "%{public}s:%i Invalid version tag length %d";
            v52 = v65;
            v53 = OS_LOG_TYPE_ERROR;
            v54 = 24;
          }
          else
          {
            *(_BYTE *)(a2 + 3528) = *(_BYTE *)(v45 + v44 + 2);
            v66 = v44 + v45;
            *(_BYTE *)(a2 + 3529) = *(_BYTE *)(v66 + 3);
            *(_BYTE *)(a2 + 3530) = *(_BYTE *)(v66 + 5);
            dispatch_get_specific(*v5);
            v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v67)
              v67(6, "%s:%i major = %d, minor %d, build = %d", "_NFDriverEosUpdateJCOPVersion", 210, *(unsigned __int8 *)(a2 + 3528), *(unsigned __int8 *)(a2 + 3529), *(unsigned __int8 *)(a2 + 3530));
            dispatch_get_specific(*v5);
            v68 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              goto LABEL_94;
            v69 = *(unsigned __int8 *)(a2 + 3528);
            v70 = *(unsigned __int8 *)(a2 + 3529);
            v71 = *(unsigned __int8 *)(a2 + 3530);
            *(_DWORD *)buf = 136447234;
            v75 = "_NFDriverEosUpdateJCOPVersion";
            v76 = 1024;
            v77 = 210;
            v78 = 1024;
            *(_DWORD *)v79 = v69;
            *(_WORD *)&v79[4] = 1024;
            *(_DWORD *)&v79[6] = v70;
            v80 = 1024;
            v81 = v71;
            v51 = "%{public}s:%i major = %d, minor %d, build = %d";
            v52 = v68;
            v53 = OS_LOG_TYPE_DEFAULT;
            v54 = 36;
          }
        }
        _os_log_impl(&dword_216EC7000, v52, v53, v51, buf, v54);
LABEL_94:
        NFDataRelease();
LABEL_99:
        v57 = sub_216ECE534(a1, 0, 254, 57121, 0);
        if (v57)
        {
          v58 = *(_QWORD *)(v57 + 8);
          if (v58 < 0x19)
          {
            memcpy((void *)(a2 + 3456), *(const void **)v57, v58);
          }
          else
          {
            dispatch_get_specific(*v5);
            v59 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v59)
              v59(4, "%s:%i serial number too long: %ld", "GetJCOPOSSerialNumber", 227, v58);
            dispatch_get_specific(*v5);
            v60 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              v75 = "GetJCOPOSSerialNumber";
              v76 = 1024;
              v77 = 227;
              v78 = 2048;
              *(_QWORD *)v79 = v58;
              _os_log_impl(&dword_216EC7000, v60, OS_LOG_TYPE_ERROR, "%{public}s:%i serial number too long: %ld", buf, 0x1Cu);
            }
          }
          NFDataRelease();
        }
        else
        {
          dispatch_get_specific(*v5);
          v61 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v61)
            v61(4, "%s:%i Failed to get serial number", "GetJCOPOSSerialNumber", 222);
          dispatch_get_specific(*v5);
          v62 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v75 = "GetJCOPOSSerialNumber";
            v76 = 1024;
            v77 = 222;
            _os_log_impl(&dword_216EC7000, v62, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get serial number", buf, 0x12u);
          }
        }
        if (!*(_BYTE *)(a2 + 3583) && !*(_BYTE *)(a2 + 3584))
          sub_216ECF0FC(a1, 0, a2);
        return 1;
      case 0x9000u:
        *(_WORD *)(a2 + 3583) = 0;
        goto LABEL_57;
      case 0x66A5u:
        dispatch_get_specific(*v5);
        v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v22)
          v22(5, "%s:%i Restricted Mode detected", "GetOSInfo_Eos", 280);
        dispatch_get_specific(*v5);
        v23 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v75 = "GetOSInfo_Eos";
          v76 = 1024;
          v77 = 280;
          _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Restricted Mode detected", buf, 0x12u);
        }
        *(_BYTE *)(a2 + 3583) = 1;
        goto LABEL_57;
    }
    dispatch_get_specific(*v5);
    v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v38)
      v38(3, "%s:%i Returned error: 0x%04x", "GetOSInfo_Eos", 288, v72);
    dispatch_get_specific(*v5);
    v39 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446722;
      v75 = "GetOSInfo_Eos";
      v76 = 1024;
      v77 = 288;
      v78 = 1024;
      *(_DWORD *)v79 = v72;
      v8 = "%{public}s:%i Returned error: 0x%04x";
      v25 = v39;
      v26 = 24;
      goto LABEL_45;
    }
  }
  return result;
}

BOOL sub_216ED9D78(uint64_t a1, uint64_t a2)
{
  const void **v4;
  void (*v5)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unsigned int v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  int v14;
  char v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  int v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  NSObject *v24;
  const void **v25;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v25 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "GetOSMode_Eos", 386, "se");
    dispatch_get_specific(*v25);
    v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v29 = "GetOSMode_Eos";
      v30 = 1024;
      v31 = 386;
      v32 = 2080;
      v33 = "se";
      _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  *(_DWORD *)(a2 + 3548) = 7;
  *(_DWORD *)(a2 + 3552) = *(_DWORD *)(a1 + 20);
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v5 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v5)
    v5(6, "%s:%i SELECT OS Update AID", "GetOSMode_Eos", 391);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v29 = "GetOSMode_Eos";
    v30 = 1024;
    v31 = 391;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SELECT OS Update AID", buf, 0x12u);
  }
  v7 = NFDataCreateWithBytes();
  v8 = (uint64_t *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 2, 0, 0xA4u, 4u, 0, 0, v7);
  NFDataRelease();
  if (v8)
  {
    v9 = v8[1];
    if (v9 < 2)
    {
      v10 = 0;
LABEL_22:
      dispatch_get_specific(*v4);
      v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19)
        v19(3, "%s:%i Unexpected status: 0x%X", "GetOSMode_Eos", 442, v10);
      dispatch_get_specific(*v4);
      v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v29 = "GetOSMode_Eos";
        v30 = 1024;
        v31 = 442;
        v32 = 1024;
        LODWORD(v33) = v10;
        _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected status: 0x%X", buf, 0x18u);
      }
      v18 = 0;
LABEL_27:
      *(_DWORD *)(a2 + 3532) = v18;
      NFDataRelease();
      dword_253E47160 = *(_DWORD *)(a2 + 3532);
      return v8 != 0;
    }
    v13 = *v8;
    v10 = __rev16(*(unsigned __int16 *)(v9 + *v8 - 2));
    if (v10 != 36864)
      goto LABEL_22;
    if (v9 <= 0x24)
    {
      if (*(_BYTE *)(a2 + 3581))
      {
LABEL_16:
        v15 = *(_BYTE *)(a2 + 3582);
        dispatch_get_specific(*v4);
        v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if ((v15 & 1) != 0)
        {
          if (v16)
            v16(6, "%s:%i Note : OS mode is JCOP", "GetOSMode_Eos", 437);
          dispatch_get_specific(*v4);
          v24 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v29 = "GetOSMode_Eos";
            v30 = 1024;
            v31 = 437;
            _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Note : OS mode is JCOP", buf, 0x12u);
          }
          v18 = 2;
        }
        else
        {
          if (v16)
            v16(6, "%s:%i Note : OS mode is System only", "GetOSMode_Eos", 434);
          dispatch_get_specific(*v4);
          v17 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v29 = "GetOSMode_Eos";
            v30 = 1024;
            v31 = 434;
            _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Note : OS mode is System only", buf, 0x12u);
          }
          v18 = 3;
        }
        goto LABEL_27;
      }
    }
    else
    {
      v14 = *(unsigned __int8 *)(v13 + 9);
      *(_BYTE *)(a2 + 3581) = v14;
      *(_WORD *)(a2 + 3570) = bswap32(*(unsigned __int16 *)(v13 + 10)) >> 16;
      *(_BYTE *)(a2 + 3582) = *(_BYTE *)(v13 + 12);
      *(_WORD *)(a2 + 3572) = bswap32(*(unsigned __int16 *)(v13 + 13)) >> 16;
      *(_DWORD *)(a2 + 3560) = *(unsigned __int8 *)(v13 + 17);
      *(_BYTE *)(a2 + 3580) = *(_BYTE *)(v13 + 18);
      *(_DWORD *)(a2 + 3556) = bswap32(*(_DWORD *)(v13 + 19));
      if (v14)
        goto LABEL_16;
    }
    dispatch_get_specific(*v4);
    v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22)
      v22(6, "%s:%i Note : OS mode is Boot Loader", "GetOSMode_Eos", 431);
    dispatch_get_specific(*v4);
    v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v29 = "GetOSMode_Eos";
      v30 = 1024;
      v31 = 431;
      _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Note : OS mode is Boot Loader", buf, 0x12u);
    }
    v18 = 1;
    goto LABEL_27;
  }
  dispatch_get_specific(*v4);
  v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v11)
    v11(3, "%s:%i Failed to select", "GetOSMode_Eos", 406);
  dispatch_get_specific(*v4);
  v12 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v29 = "GetOSMode_Eos";
    v30 = 1024;
    v31 = 406;
    _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to select", buf, 0x12u);
  }
  return v8 != 0;
}

uint64_t sub_216EDA324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  char *v11;
  const void **v12;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  const void **v19;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  const void **v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unsigned int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = NFDataCreateWithBytes();
  if (!v2)
  {
    v12 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Allocation failure", "GetOSUpdateLog_Eos", 466);
    dispatch_get_specific(*v12);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v26 = "GetOSUpdateLog_Eos";
      v27 = 1024;
      v28 = 466;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 0;
  }
  v3 = v2;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 2, 0x80u, 0xCAu, 0, 0xFEu, 0, v3);
    v7 = v6;
    if (!v6 || (v8 = v6[1], v8 <= 1))
    {
      v15 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16)
        v16(3, "%s:%i Failed to get data", "GetOSUpdateLog_Eos", 478);
      dispatch_get_specific(*v15);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v26 = "GetOSUpdateLog_Eos";
        v27 = 1024;
        v28 = 478;
        _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get data", buf, 0x12u);
      }
      if (v7)
LABEL_22:
        NFDataRelease();
      NFDataRelease();
      if (!v4)
        return 0;
      return NFDataCreateWithBytesNoCopy();
    }
    v9 = __rev16(*(unsigned __int16 *)(v8 + *v6 - 2));
    if (v9 != 36864 && v9 != 25360)
    {
      v22 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23)
        v23(4, "%s:%i Got error 0x%2X", "GetOSUpdateLog_Eos", 497, v9);
      dispatch_get_specific(*v22);
      v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v26 = "GetOSUpdateLog_Eos";
        v27 = 1024;
        v28 = 497;
        v29 = 1024;
        v30 = v9;
        _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i Got error 0x%2X", buf, 0x18u);
      }
      goto LABEL_22;
    }
    v11 = (char *)reallocf(v4, v8 + v5 - 2);
    if (!v11)
      break;
    v4 = v11;
    memcpy(&v11[v5], (const void *)*v7, v7[1] - 2);
    v5 = v5 + *((_DWORD *)v7 + 2) - 2;
    NFDataRelease();
    if (v9 != 25360)
    {
      NFDataRelease();
      return NFDataCreateWithBytesNoCopy();
    }
  }
  v19 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v20)
    v20(3, "%s:%i Allocation failure", "GetOSUpdateLog_Eos", 488);
  dispatch_get_specific(*v19);
  v21 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v26 = "GetOSUpdateLog_Eos";
    v27 = 1024;
    v28 = 488;
    _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
  }
  NFDataRelease();
  NFDataRelease();
  return 0;
}

BOOL sub_216EDA748(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int v14;
  char *v16;
  const void **v17;
  void (*v18)(uint64_t, const char *, ...);
  NSObject *v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  const void **v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  const void **v30;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unsigned int v38;
  uint64_t v39;

  result = 0;
  v39 = *MEMORY[0x24BDAC8D0];
  if (a2 && a3)
  {
    *a3 = 0;
    v7 = NFDataCreateWithBytes();
    if (v7)
    {
      v8 = v7;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 2, 0x80u, 0xCAu, 0, 0xFEu, 0, v8);
        v12 = v11;
        if (!v11)
          break;
        v13 = v11[1];
        if (v13 <= 1)
          break;
        v14 = __rev16(*(unsigned __int16 *)(v13 + *v11 - 2));
        if (v14 != 36864 && v14 != 25360)
        {
          v30 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger)
            Logger(4, "%s:%i Got error 0x%2X", "GetAttackCounterLog_Eos", 600, v14);
          dispatch_get_specific(*v30);
          v32 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            v34 = "GetAttackCounterLog_Eos";
            v35 = 1024;
            v36 = 600;
            v37 = 1024;
            v38 = v14;
            _os_log_impl(&dword_216EC7000, v32, OS_LOG_TYPE_ERROR, "%{public}s:%i Got error 0x%2X", buf, 0x18u);
          }
LABEL_24:
          NFDataRelease();
          goto LABEL_25;
        }
        v16 = (char *)reallocf(v9, v13 + v10 - 2);
        if (!v16)
        {
          v27 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v28)
            v28(3, "%s:%i Allocation failure", "GetAttackCounterLog_Eos", 591);
          dispatch_get_specific(*v27);
          v29 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v34 = "GetAttackCounterLog_Eos";
            v35 = 1024;
            v36 = 591;
            _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
          }
          NFDataRelease();
          NFDataRelease();
          return 0;
        }
        v9 = v16;
        memcpy(&v16[v10], (const void *)*v12, v12[1] - 2);
        v10 = v10 + *((_DWORD *)v12 + 2) - 2;
        NFDataRelease();
        if (v14 != 25360)
        {
          NFDataRelease();
          goto LABEL_26;
        }
      }
      v20 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(3, "%s:%i Failed to get data", "GetAttackCounterLog_Eos", 581);
      dispatch_get_specific(*v20);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v34 = "GetAttackCounterLog_Eos";
        v35 = 1024;
        v36 = 581;
        _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get data", buf, 0x12u);
      }
      if (v12)
        goto LABEL_24;
LABEL_25:
      NFDataRelease();
      if (!v9)
        return 0;
LABEL_26:
      v23 = malloc_type_calloc(2uLL, 0x10uLL, 0x10200403A5D3213uLL);
      if (!v23)
      {
        free(v9);
        return 0;
      }
      v24 = v23;
      v23[2] = 57126;
      v25 = 1;
      *(_QWORD *)v23 = NFDataCreateWithBytesNoCopy();
      v26 = sub_216EDB4CC(a1);
      if (v26)
      {
        v24[6] = 57162;
        *((_QWORD *)v24 + 2) = v26;
        v25 = 2;
      }
      *a2 = v24;
      *a3 = v25;
      return 1;
    }
    else
    {
      v17 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18)
        v18(3, "%s:%i Allocation failure", "GetAttackCounterLog_Eos", 569);
      dispatch_get_specific(*v17);
      v19 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v19, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v34 = "GetAttackCounterLog_Eos";
        v35 = 1024;
        v36 = 569;
        _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_216EDABF4(uint64_t a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  const void **v7;
  int v8;
  unsigned __int8 **v9;
  int v10;
  void (*Logger)(uint64_t, const char *, ...);
  const char *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  uint32_t v18;
  void (*v19)(uint64_t, const char *, ...);
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 **v26;
  int v27;
  void (*v28)(uint64_t, const char *, ...);
  const char *v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  uint32_t v35;
  void (*v36)(uint64_t, const char *, ...);
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned __int8 **v44;
  int v45;
  void (*v46)(uint64_t, const char *, ...);
  const char *v47;
  NSObject *v48;
  const char *v49;
  NSObject *v50;
  os_log_type_t v51;
  const char *v52;
  uint32_t v53;
  void (*v54)(uint64_t, const char *, ...);
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned __int8 **v61;
  int v62;
  void (*v63)(uint64_t, const char *, ...);
  const char *v64;
  NSObject *v65;
  const char *v66;
  NSObject *v67;
  os_log_type_t v68;
  const char *v69;
  uint32_t v70;
  void (*v71)(uint64_t, const char *, ...);
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  uint8_t buf[4];
  const char *v81;
  __int16 v82;
  int v83;
  __int16 v84;
  _QWORD v85[5];

  *(_QWORD *)((char *)&v85[3] + 4) = *MEMORY[0x24BDAC8D0];
  if (a2)
    *a2 = 0;
  if (!sub_216EDB4CC(a1))
  {
    v4 = 0;
    v78 = 0;
    if (!a2)
      return v4;
    goto LABEL_110;
  }
  v3 = TLVCreateWithData();
  v4 = v3 != 0;
  if (v3)
  {
    v5 = v3;
    v6 = 0;
    v7 = (const void **)MEMORY[0x24BEDCDB0];
    while (1)
    {
      v8 = *(_DWORD *)(v5 + 32);
      if (v8 != 128)
        goto LABEL_31;
      v9 = *(unsigned __int8 ***)(v5 + 40);
      if (v9 && v9[1])
      {
        v10 = **v9;
        dispatch_get_specific(*v7);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
        {
          if (v10 == 90)
            v12 = "YES";
          else
            v12 = "NO";
          Logger(6, "%s:%i Primary = %s", "GetPresenceOfAttackLog_Eos", 660, v12);
        }
        v6 = v6 & 1 | (v10 == 90);
        dispatch_get_specific(*v7);
        v13 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          goto LABEL_30;
        *(_DWORD *)buf = 136446722;
        if (v10 == 90)
          v14 = "YES";
        else
          v14 = "NO";
        v81 = "GetPresenceOfAttackLog_Eos";
        v82 = 1024;
        v83 = 660;
        v84 = 2080;
        v85[0] = v14;
        v15 = v13;
        v16 = OS_LOG_TYPE_DEFAULT;
        v17 = "%{public}s:%i Primary = %s";
        v18 = 28;
      }
      else
      {
        dispatch_get_specific(*v7);
        v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v19)
        {
          v20 = *(_QWORD *)(v5 + 40);
          if (v20)
            v21 = *(_QWORD *)(v20 + 8);
          else
            v21 = -1;
          v19(3, "%s:%i Invalid value for 0x%X, len=%ld", "GetPresenceOfAttackLog_Eos", 662, *(_DWORD *)(v5 + 32), v21);
        }
        dispatch_get_specific(*v7);
        v22 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          goto LABEL_30;
        v23 = *(_QWORD *)(v5 + 40);
        if (v23)
          v24 = *(_QWORD *)(v23 + 8);
        else
          v24 = -1;
        v25 = *(_DWORD *)(v5 + 32);
        *(_DWORD *)buf = 136446978;
        v81 = "GetPresenceOfAttackLog_Eos";
        v82 = 1024;
        v83 = 662;
        v84 = 1024;
        LODWORD(v85[0]) = v25;
        WORD2(v85[0]) = 2048;
        *(_QWORD *)((char *)v85 + 6) = v24;
        v15 = v22;
        v16 = OS_LOG_TYPE_ERROR;
        v17 = "%{public}s:%i Invalid value for 0x%X, len=%ld";
        v18 = 34;
      }
      _os_log_impl(&dword_216EC7000, v15, v16, v17, buf, v18);
LABEL_30:
      v8 = *(_DWORD *)(v5 + 32);
LABEL_31:
      if (v8 != 144)
        goto LABEL_55;
      v26 = *(unsigned __int8 ***)(v5 + 40);
      if (v26 && v26[1])
      {
        v27 = **v26;
        dispatch_get_specific(*v7);
        v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v28)
        {
          if (v27 == 90)
            v29 = "YES";
          else
            v29 = "NO";
          v28(6, "%s:%i JCOP1 = %s", "GetPresenceOfAttackLog_Eos", 670, v29);
        }
        v6 = v6 & 1 | (v27 == 90);
        dispatch_get_specific(*v7);
        v30 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          if (v27 == 90)
            v31 = "YES";
          else
            v31 = "NO";
          v81 = "GetPresenceOfAttackLog_Eos";
          v82 = 1024;
          v83 = 670;
          v84 = 2080;
          v85[0] = v31;
          v32 = v30;
          v33 = OS_LOG_TYPE_DEFAULT;
          v34 = "%{public}s:%i JCOP1 = %s";
          v35 = 28;
LABEL_54:
          _os_log_impl(&dword_216EC7000, v32, v33, v34, buf, v35);
        }
      }
      else
      {
        dispatch_get_specific(*v7);
        v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v36)
        {
          v37 = *(_QWORD *)(v5 + 40);
          if (v37)
            v38 = *(_QWORD *)(v37 + 8);
          else
            v38 = -1;
          v36(3, "%s:%i Invalid value for 0x%X, len=%ld", "GetPresenceOfAttackLog_Eos", 672, *(_DWORD *)(v5 + 32), v38);
        }
        dispatch_get_specific(*v7);
        v39 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v40 = *(_QWORD *)(v5 + 40);
          if (v40)
            v41 = *(_QWORD *)(v40 + 8);
          else
            v41 = -1;
          v42 = *(_DWORD *)(v5 + 32);
          *(_DWORD *)buf = 136446978;
          v81 = "GetPresenceOfAttackLog_Eos";
          v82 = 1024;
          v83 = 672;
          v84 = 1024;
          LODWORD(v85[0]) = v42;
          WORD2(v85[0]) = 2048;
          *(_QWORD *)((char *)v85 + 6) = v41;
          v32 = v39;
          v33 = OS_LOG_TYPE_ERROR;
          v34 = "%{public}s:%i Invalid value for 0x%X, len=%ld";
          v35 = 34;
          goto LABEL_54;
        }
      }
LABEL_55:
      v43 = *(_DWORD *)(v5 + 32);
      if (v43 != 160)
        goto LABEL_80;
      v44 = *(unsigned __int8 ***)(v5 + 40);
      if (v44 && v44[1])
      {
        v45 = **v44;
        dispatch_get_specific(*v7);
        v46 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v46)
        {
          if (v45 == 90)
            v47 = "YES";
          else
            v47 = "NO";
          v46(6, "%s:%i EUICC = %s", "GetPresenceOfAttackLog_Eos", 680, v47);
        }
        v6 = v6 & 1 | (v45 == 90);
        dispatch_get_specific(*v7);
        v48 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          goto LABEL_79;
        *(_DWORD *)buf = 136446722;
        if (v45 == 90)
          v49 = "YES";
        else
          v49 = "NO";
        v81 = "GetPresenceOfAttackLog_Eos";
        v82 = 1024;
        v83 = 680;
        v84 = 2080;
        v85[0] = v49;
        v50 = v48;
        v51 = OS_LOG_TYPE_DEFAULT;
        v52 = "%{public}s:%i EUICC = %s";
        v53 = 28;
      }
      else
      {
        dispatch_get_specific(*v7);
        v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v54)
        {
          v55 = *(_QWORD *)(v5 + 40);
          if (v55)
            v56 = *(_QWORD *)(v55 + 8);
          else
            v56 = -1;
          v54(3, "%s:%i Invalid value for 0x%X, len=%ld", "GetPresenceOfAttackLog_Eos", 682, *(_DWORD *)(v5 + 32), v56);
        }
        dispatch_get_specific(*v7);
        v57 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          goto LABEL_79;
        v58 = *(_QWORD *)(v5 + 40);
        if (v58)
          v59 = *(_QWORD *)(v58 + 8);
        else
          v59 = -1;
        v60 = *(_DWORD *)(v5 + 32);
        *(_DWORD *)buf = 136446978;
        v81 = "GetPresenceOfAttackLog_Eos";
        v82 = 1024;
        v83 = 682;
        v84 = 1024;
        LODWORD(v85[0]) = v60;
        WORD2(v85[0]) = 2048;
        *(_QWORD *)((char *)v85 + 6) = v59;
        v50 = v57;
        v51 = OS_LOG_TYPE_ERROR;
        v52 = "%{public}s:%i Invalid value for 0x%X, len=%ld";
        v53 = 34;
      }
      _os_log_impl(&dword_216EC7000, v50, v51, v52, buf, v53);
LABEL_79:
      v43 = *(_DWORD *)(v5 + 32);
LABEL_80:
      if (v43 == 129)
      {
        v61 = *(unsigned __int8 ***)(v5 + 40);
        if (v61 && v61[1])
        {
          v62 = **v61;
          dispatch_get_specific(*v7);
          v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v63)
          {
            if (v62 == 90)
              v64 = "YES";
            else
              v64 = "NO";
            v63(6, "%s:%i Secondary = %s", "GetPresenceOfAttackLog_Eos", 690, v64);
          }
          v6 = v6 & 1 | (v62 == 90);
          dispatch_get_specific(*v7);
          v65 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
            goto LABEL_104;
          *(_DWORD *)buf = 136446722;
          if (v62 == 90)
            v66 = "YES";
          else
            v66 = "NO";
          v81 = "GetPresenceOfAttackLog_Eos";
          v82 = 1024;
          v83 = 690;
          v84 = 2080;
          v85[0] = v66;
          v67 = v65;
          v68 = OS_LOG_TYPE_DEFAULT;
          v69 = "%{public}s:%i Secondary = %s";
          v70 = 28;
        }
        else
        {
          dispatch_get_specific(*v7);
          v71 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v71)
          {
            v72 = *(_QWORD *)(v5 + 40);
            if (v72)
              v73 = *(_QWORD *)(v72 + 8);
            else
              v73 = -1;
            v71(3, "%s:%i Invalid value for 0x%X, len=%ld", "GetPresenceOfAttackLog_Eos", 692, *(_DWORD *)(v5 + 32), v73);
          }
          dispatch_get_specific(*v7);
          v74 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
            goto LABEL_104;
          v75 = *(_QWORD *)(v5 + 40);
          if (v75)
            v76 = *(_QWORD *)(v75 + 8);
          else
            v76 = -1;
          v77 = *(_DWORD *)(v5 + 32);
          *(_DWORD *)buf = 136446978;
          v81 = "GetPresenceOfAttackLog_Eos";
          v82 = 1024;
          v83 = 692;
          v84 = 1024;
          LODWORD(v85[0]) = v77;
          WORD2(v85[0]) = 2048;
          *(_QWORD *)((char *)v85 + 6) = v76;
          v67 = v74;
          v68 = OS_LOG_TYPE_ERROR;
          v69 = "%{public}s:%i Invalid value for 0x%X, len=%ld";
          v70 = 34;
        }
        _os_log_impl(&dword_216EC7000, v67, v68, v69, buf, v70);
      }
LABEL_104:
      v5 = *(_QWORD *)(v5 + 24);
      if (!v5)
      {
        TLVRelease();
        v4 = v4;
        goto LABEL_109;
      }
    }
  }
  v6 = 0;
LABEL_109:
  NFDataRelease();
  v78 = v6 & 1;
  if (a2)
LABEL_110:
    *a2 = v78;
  return v4;
}

uint64_t sub_216EDB3A0(uint64_t a1)
{
  return sub_216ED129C(a1, 2);
}

uint64_t sub_216EDB3A8()
{
  return 0;
}

BOOL sub_216EDB3B0(uint64_t a1, int a2)
{
  _BOOL4 v2;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (dword_253E47160 & 0xFFFFFFFD) == 1 && a2 == 0;
  if ((a2 == 0) != v2 && dword_253E47160 == 0)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i WARNING ! Do not send data to JCOP in unknown state !!!!!", "IsOSReady_Eos", 736);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v9 = "IsOSReady_Eos";
      v10 = 1024;
      v11 = 736;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i WARNING ! Do not send data to JCOP in unknown state !!!!!", buf, 0x12u);
    }
  }
  return !v2;
}

uint64_t sub_216EDB4CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  unint64_t v8;
  unsigned int v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  NSObject *v20;
  unint64_t v21;
  unsigned int v22;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = NFDataCreateWithBytes();
  if (v2)
  {
    v3 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 2, 0x80u, 0xCAu, 0, 0xFEu, 0, v2);
    v4 = v3;
    if (v3)
    {
      v5 = v3[1];
      if (v5 >= 8 && __rev16(*(unsigned __int16 *)(v5 + *v3 - 2)) == 36864)
      {
        v13 = NFDataCreateWithBytes();
LABEL_27:
        NFDataRelease();
        NFDataRelease();
        return v13;
      }
      v6 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        v8 = v4[1];
        if (v8 >= 2)
          v9 = __rev16(*(unsigned __int16 *)(v8 + *v4 - 2));
        else
          v9 = 0;
        Logger(3, "%s:%i Query AC log presence failed with 0x%02X", "_getACLogPresence", 541, v9);
      }
      dispatch_get_specific(*v6);
      v20 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
LABEL_26:
        v13 = 0;
        goto LABEL_27;
      }
      v21 = v4[1];
      if (v21 >= 2)
        v22 = __rev16(*(unsigned __int16 *)(v21 + *v4 - 2));
      else
        v22 = 0;
      *(_DWORD *)buf = 136446722;
      v25 = "_getACLogPresence";
      v26 = 1024;
      v27 = 541;
      v28 = 1024;
      v29 = v22;
      v17 = "%{public}s:%i Query AC log presence failed with 0x%02X";
      v18 = v20;
      v19 = 24;
    }
    else
    {
      v14 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v15)
        v15(3, "%s:%i Unable to get presence of AC log", "_getACLogPresence", 534);
      dispatch_get_specific(*v14);
      v16 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        goto LABEL_26;
      *(_DWORD *)buf = 136446466;
      v25 = "_getACLogPresence";
      v26 = 1024;
      v27 = 534;
      v17 = "%{public}s:%i Unable to get presence of AC log";
      v18 = v16;
      v19 = 18;
    }
    _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_ERROR, v17, buf, v19);
    goto LABEL_26;
  }
  v10 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v11)
    v11(3, "%s:%i Allocation failure", "_getACLogPresence", 524);
  dispatch_get_specific(*v10);
  v12 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v25 = "_getACLogPresence";
    v26 = 1024;
    v27 = 524;
    _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
  }
  return 0;
}

BOOL sub_216EDB808(uint64_t a1, uint64_t a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  int v7;
  const void **v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void **v16;
  void (*v17)(uint64_t, const char *, ...);
  NSObject *v18;
  _BOOL8 result;
  const char *v20;
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  NSObject *v24;
  uint32_t v25;
  const void **v26;
  void (*v27)(uint64_t, const char *, ...);
  const void *v28;
  unsigned int v29;
  size_t v30;
  const void **v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  const void **v34;
  void (*v35)(uint64_t, const char *, ...);
  NSObject *v36;
  uint64_t v37;
  unsigned __int16 v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v38 = 0;
  if (*(_DWORD *)(a1 + 20) == 2 && *(unsigned __int16 *)(a2 + 3570) <= 0x117u)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Manifest Query is not supported on this OS version (sequence counter: %d)", "GetManifestQuery_P73", 37, *(unsigned __int16 *)(a2 + 3570));
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned __int16 *)(a2 + 3570);
      *(_DWORD *)buf = 136446722;
      v40 = "GetManifestQuery_P73";
      v41 = 1024;
      v42 = 37;
      v43 = 1024;
      LODWORD(v44) = v7;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Manifest Query is not supported on this OS version (sequence counter: %d)", buf, 0x18u);
    }
    return 1;
  }
  if (*(_DWORD *)(a2 + 3532) == 1)
  {
    v8 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9)
      v9(6, "%s:%i Selecting OSU", "GetManifestQuery_P73", 44);
    dispatch_get_specific(*v8);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v40 = "GetManifestQuery_P73";
      v41 = 1024;
      v42 = 44;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Selecting OSU", buf, 0x12u);
    }
  }
  v11 = NFDataCreateWithBytes();
  if (v11)
  {
    v12 = NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v11, &v38);
    NFDataRelease();
    if (v12)
    {
      v13 = NFDataCreateWithBytes();
      v14 = NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCAu, 0, 0xFEu, 0, v13);
      NFDataRelease();
      if (v14)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15 > 1)
        {
          v28 = *(const void **)v14;
          v29 = __rev16(*(unsigned __int16 *)(*(_QWORD *)v14 + v15 - 2));
          v38 = v29;
          if (v29 == 36864)
          {
            if (v15 < 3)
            {
              v34 = (const void **)MEMORY[0x24BEDCDB0];
              dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
              v35 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v35)
                v35(3, "%s:%i Incorrect manifest query length: %zu", "GetManifestQuery_P73", 90, *(_QWORD *)(v14 + 8));
              dispatch_get_specific(*v34);
              v36 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
              {
                v37 = *(_QWORD *)(v14 + 8);
                *(_DWORD *)buf = 136446722;
                v40 = "GetManifestQuery_P73";
                v41 = 1024;
                v42 = 90;
                v43 = 2048;
                v44 = v37;
                _os_log_impl(&dword_216EC7000, v36, OS_LOG_TYPE_ERROR, "%{public}s:%i Incorrect manifest query length: %zu", buf, 0x1Cu);
              }
            }
            else
            {
              if (v15 - 2 >= 0x100)
                v30 = 256;
              else
                v30 = v15 - 2;
              *(_WORD *)(a2 + 3578) = v30;
              memcpy((void *)(a2 + 3120), v28, v30);
            }
            NFDataRelease();
            return 1;
          }
        }
        else
        {
          v38 = 0;
        }
        v31 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v32)
          v32(3, "%s:%i AID_P73_MANIFESTQUERY returned error: 0x%04x", "GetManifestQuery_P73", 80, v38);
        dispatch_get_specific(*v31);
        v33 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v40 = "GetManifestQuery_P73";
          v41 = 1024;
          v42 = 80;
          v43 = 1024;
          LODWORD(v44) = v38;
          _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i AID_P73_MANIFESTQUERY returned error: 0x%04x", buf, 0x18u);
        }
        NFDataRelease();
        return 0;
      }
      v26 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27)
        v27(3, "%s:%i Failed to get ManifestQuery", "GetManifestQuery_P73", 75);
      dispatch_get_specific(*v26);
      v18 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v40 = "GetManifestQuery_P73";
        v41 = 1024;
        v42 = 75;
        v20 = "%{public}s:%i Failed to get ManifestQuery";
        goto LABEL_29;
      }
    }
    else
    {
      v21 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22)
        v22(3, "%s:%i select returned error: 0x%04x", "GetManifestQuery_P73", 59, v38);
      dispatch_get_specific(*v21);
      v23 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446722;
        v40 = "GetManifestQuery_P73";
        v41 = 1024;
        v42 = 59;
        v43 = 1024;
        LODWORD(v44) = v38;
        v20 = "%{public}s:%i select returned error: 0x%04x";
        v24 = v23;
        v25 = 24;
LABEL_30:
        _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_ERROR, v20, buf, v25);
        return 0;
      }
    }
  }
  else
  {
    v16 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v17)
      v17(3, "%s:%i Failed to get ManifestQuery", "GetManifestQuery_P73", 52);
    dispatch_get_specific(*v16);
    v18 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      v40 = "GetManifestQuery_P73";
      v41 = 1024;
      v42 = 52;
      v20 = "%{public}s:%i Failed to get ManifestQuery";
LABEL_29:
      v24 = v18;
      v25 = 18;
      goto LABEL_30;
    }
  }
  return result;
}

BOOL sub_216EDBE5C(uint64_t a1)
{
  if (a1)
  {
    dword_253E47170 = 0;
    *(_QWORD *)(a1 + 32) = sub_216EDBEE4;
    *(_QWORD *)(a1 + 40) = sub_216EDBEEC;
    *(_QWORD *)(a1 + 48) = sub_216EDBEF0;
    *(_QWORD *)(a1 + 56) = sub_216EDBF34;
    *(_QWORD *)(a1 + 64) = sub_216EDC40C;
    *(_QWORD *)(a1 + 72) = sub_216EDC410;
    *(_QWORD *)(a1 + 80) = sub_216EDCA0C;
    *(_QWORD *)(a1 + 88) = sub_216EDCB98;
    *(_QWORD *)(a1 + 96) = sub_216EDB808;
    *(_QWORD *)(a1 + 104) = sub_216EDCBA0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 20) = 2;
  }
  return a1 != 0;
}

uint64_t sub_216EDBEE4(uint64_t *a1, int a2)
{
  return NFDriverSetEmbeddedSecureElementPower(*a1, a2);
}

BOOL sub_216EDBEF0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_216ECFB60(a1, a2, 0, 0);
  if (result)
    return sub_216EDB808(a1, a2);
  return result;
}

BOOL sub_216EDBF34(uint64_t a1, uint64_t a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  _BOOL8 result;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a2 + 3548) = 7;
  *(_DWORD *)(a2 + 3552) = *(_DWORD *)(a1 + 20);
  v24 = 0;
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  if (dword_253E47170 == 2)
  {
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i SELECT: ISD", "GetOSMode_P73", 132);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v26 = "GetOSMode_P73";
      v27 = 1024;
      v28 = 132;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SELECT: ISD", buf, 0x12u);
    }
    v7 = NFDataCreateWithBytes();
    if (!NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v7, &v24))
    {
      dispatch_get_specific(*v4);
      v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16)
        v16(3, "%s:%i Returned error: 0x%04x", "GetOSMode_P73", 135, v24);
      dispatch_get_specific(*v4);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v26 = "GetOSMode_P73";
        v27 = 1024;
        v28 = 135;
        v29 = 1024;
        LODWORD(v30) = v24;
        _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Returned error: 0x%04x", buf, 0x18u);
      }
LABEL_23:
      NFDataRelease();
      return 0;
    }
    NFDataRelease();
  }
  dispatch_get_specific(*v4);
  v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8)
    v8(6, "%s:%i GET OS MODE", "GetOSMode_P73", 142);
  dispatch_get_specific(*v4);
  v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v26 = "GetOSMode_P73";
    v27 = 1024;
    v28 = 142;
    _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i GET OS MODE", buf, 0x12u);
  }
  v10 = NFDataCreateWithBytes();
  v11 = (uint64_t *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, 0, 0xA4u, 4u, 0, 0, v10);
  NFDataRelease();
  if (v11)
  {
    v12 = v11[1];
    if (v12 <= 1)
    {
      v24 = 0;
LABEL_31:
      v20 = 2;
LABEL_32:
      *(_DWORD *)(a2 + 3532) = v20;
      NFDataRelease();
      dword_253E47170 = *(_DWORD *)(a2 + 3532);
      return 1;
    }
    v18 = *v11;
    v19 = __rev16(*(unsigned __int16 *)(v12 + *v11 - 2));
    v24 = v19;
    if (v19 != 36864)
      goto LABEL_31;
    if (v12 >= 0xF)
    {
      *(_BYTE *)(a2 + 3581) = *(_BYTE *)(v18 + 9);
      *(_WORD *)(a2 + 3570) = bswap32(*(unsigned __int16 *)(v18 + 10)) >> 16;
      *(_BYTE *)(a2 + 3582) = *(_BYTE *)(v18 + 12);
      if (v12 >= 0x11)
      {
        *(_WORD *)(a2 + 3572) = bswap32(*(unsigned __int16 *)(v18 + 13)) >> 16;
        if (v12 >= 0x15)
        {
          *(_DWORD *)(a2 + 3556) = __rev16(*(unsigned __int16 *)(v18 + 15));
          *(_DWORD *)(a2 + 3560) = *(unsigned __int8 *)(v18 + 17);
          *(_BYTE *)(a2 + 3580) = *(_BYTE *)(v18 + 18);
        }
      }
      v20 = 1;
      goto LABEL_32;
    }
    dispatch_get_specific(*v4);
    v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21)
      v21(3, "%s:%i Unexpected length: %zu", "GetOSMode_P73", 183, v11[1]);
    dispatch_get_specific(*v4);
    v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = v11[1];
      *(_DWORD *)buf = 136446722;
      v26 = "GetOSMode_P73";
      v27 = 1024;
      v28 = 183;
      v29 = 2048;
      v30 = v23;
      _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length: %zu", buf, 0x1Cu);
    }
    goto LABEL_23;
  }
  dispatch_get_specific(*v4);
  v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13)
    v13(3, "%s:%i Failed to select", "GetOSMode_P73", 156);
  dispatch_get_specific(*v4);
  v14 = NFSharedLogGetLogger();
  result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "GetOSMode_P73";
    v27 = 1024;
    v28 = 156;
    _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to select", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_216EDC410(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int v11;
  const void **v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int v16;
  char *v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  _DWORD *v29;
  _DWORD *v30;
  const void **v31;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v33;
  void (*v34)(uint64_t, const char *, ...);
  NSObject *v35;
  unsigned __int16 v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  _OWORD v44[220];
  int v45;
  uint64_t v46;

  v3 = 0;
  v46 = *MEMORY[0x24BDAC8D0];
  v37 = -1;
  if (a2 && a3)
  {
    *a3 = 0;
    memset(v44, 0, 512);
    if (sub_216EDBF34(a1, (uint64_t)v44))
    {
      if (v45 == 2)
      {
        v7 = NFDataCreateWithBytes();
        if (!NFDriverSecureElementSelectWithOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, v7, &v37))
        {
          v31 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger)
            Logger(4, "%s:%i SELECT returned error: 0x%04x", "GetAttackCounterLog_P73", 224, v37);
          dispatch_get_specific(*v31);
          v33 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            return 0;
          *(_DWORD *)buf = 136446722;
          v39 = "GetAttackCounterLog_P73";
          v40 = 1024;
          v41 = 224;
          v42 = 1024;
          v43 = v37;
          v24 = "%{public}s:%i SELECT returned error: 0x%04x";
          v25 = v33;
          v26 = 24;
          goto LABEL_41;
        }
        NFDataRelease();
      }
      v8 = NFDataCreateWithBytes();
      if (v8)
      {
        v9 = v8;
        v10 = 0;
        v11 = 0;
        v12 = (const void **)MEMORY[0x24BEDCDB0];
        while (1)
        {
          v13 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCAu, 0, 0xFEu, 0, v9);
          v14 = v13;
          if (!v13)
            break;
          v15 = v13[1];
          if (v15 <= 1)
            break;
          v16 = __rev16(*(unsigned __int16 *)(v15 + *v13 - 2));
          v37 = v16;
          if (v16 == 36864 || v16 == 25360)
          {
            v18 = (char *)reallocf(v10, v15 + v11 - 2);
            if (!v18)
            {
              dispatch_get_specific(*v12);
              v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v34)
                v34(3, "%s:%i Allocation failure", "GetAttackCounterLog_P73", 258);
              dispatch_get_specific(*v12);
              v35 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                v39 = "GetAttackCounterLog_P73";
                v40 = 1024;
                v41 = 258;
                _os_log_impl(&dword_216EC7000, v35, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
              }
              NFDataRelease();
              NFDataRelease();
              return 0;
            }
            v10 = v18;
            memcpy(&v18[v11], (const void *)*v14, v14[1] - 2);
            v11 = v11 + *((_DWORD *)v14 + 2) - 2;
          }
          else
          {
            dispatch_get_specific(*v12);
            v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v19)
              v19(4, "%s:%i Got error 0x%2X", "GetAttackCounterLog_P73", 267, v37);
            dispatch_get_specific(*v12);
            v20 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              v39 = "GetAttackCounterLog_P73";
              v40 = 1024;
              v41 = 267;
              v42 = 1024;
              v43 = v37;
              _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Got error 0x%2X", buf, 0x18u);
            }
          }
          NFDataRelease();
          if (v37 != 25360)
            goto LABEL_34;
        }
        dispatch_get_specific(*v12);
        v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v27)
          v27(3, "%s:%i Failed to get data", "GetAttackCounterLog_P73", 248);
        dispatch_get_specific(*v12);
        v28 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v39 = "GetAttackCounterLog_P73";
          v40 = 1024;
          v41 = 248;
          _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get data", buf, 0x12u);
        }
        if (v14)
          NFDataRelease();
LABEL_34:
        NFDataRelease();
        if (!v10)
          return 0;
        v29 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200403A5D3213uLL);
        if (v29)
        {
          v30 = v29;
          v29[2] = 57126;
          v3 = 1;
          *(_QWORD *)v29 = NFDataCreateWithBytesNoCopy();
          *a2 = v30;
          *a3 = 1;
          return v3;
        }
        free(v10);
        return 0;
      }
      v21 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22)
        v22(3, "%s:%i Allocation failure", "GetAttackCounterLog_P73", 237);
      dispatch_get_specific(*v21);
      v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v39 = "GetAttackCounterLog_P73";
        v40 = 1024;
        v41 = 237;
        v24 = "%{public}s:%i Allocation failure";
        v25 = v23;
        v26 = 18;
LABEL_41:
        _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
      }
    }
    return 0;
  }
  return v3;
}

BOOL sub_216EDCA0C(uint64_t a1, _BYTE *a2)
{
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  _OWORD v12[220];
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  memset(v12, 0, 512);
  if (sub_216EDBF34(a1, (uint64_t)v12))
  {
    if (v13 == 2)
      return sub_216ED0E4C(a1, a2);
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i GetPresenseOfAttackLog will only work in JCOP mode", "GetPresenseOfAttackLog_P73", 303);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v9 = "GetPresenseOfAttackLog_P73";
      v10 = 1024;
      v11 = 303;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i GetPresenseOfAttackLog will only work in JCOP mode", buf, 0x12u);
    }
  }
  return 0;
}

uint64_t sub_216EDCB98(uint64_t a1)
{
  return sub_216ED129C(a1, 0);
}

unint64_t sub_216EDCBA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = NFDataCreateWithBytes();
  v3 = (_QWORD *)NFDriverSecureElementSendCommandToOS(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), 0, 0x80u, 0xCAu, 0, 0xFEu, 0, v2);
  NFDataRelease();
  if (v3 && v3[1] == 15)
  {
    v4 = bswap64(*(_QWORD *)(*v3 + 5));
    v5 = v4 / 0x3E8;
    v6 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i uptimne is %llu", "GetUptime_P73", 329, v4 / 0x3E8);
    dispatch_get_specific(*v6);
    v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v16 = "GetUptime_P73";
      v17 = 1024;
      v18 = 329;
      v19 = 2048;
      v20 = v4 / 0x3E8;
      _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i uptimne is %llu", buf, 0x1Cu);
    }
  }
  else
  {
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
    {
      if (v3)
        v11 = v3[1];
      else
        v11 = -1;
      v10(3, "%s:%i Data length is %ld", "GetUptime_P73", 331, v11);
    }
    dispatch_get_specific(*v9);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (v3)
        v13 = v3[1];
      else
        v13 = -1;
      *(_DWORD *)buf = 136446722;
      v16 = "GetUptime_P73";
      v17 = 1024;
      v18 = 331;
      v19 = 2048;
      v20 = v13;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Data length is %ld", buf, 0x1Cu);
    }
    v5 = 0;
  }
  NFDataRelease();
  return v5;
}

void NFDriverRFSettingsStoreValueForTagAtOffset(uint64_t a1, unsigned int a2, int a3, unsigned int a4, char a5, char a6)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  const void **v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  unsigned int v19;
  const void **v20;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v8 = 0;
    while (1)
    {
      v9 = v8 + 2;
      v10 = bswap32(*(unsigned __int16 *)(a1 + v8));
      v11 = v8 + 3;
      v12 = *(unsigned __int8 *)(a1 + v9);
      if (a3 == HIWORD(v10))
        break;
      v8 = v11 + v12;
      if (v8 >= a2)
        goto LABEL_5;
    }
    v19 = v11 + a4;
    if (v19 < a2 && v12 > a4)
    {
      *(_BYTE *)(a1 + v19) = (*(_BYTE *)(a1 + v19) | a6) & (a5 | ~a6);
      return;
    }
    v20 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Invalid offset %d for tag 0x%04x", "NFDriverRFSettingsStoreValueForTagAtOffset", 87, a4, a3);
    dispatch_get_specific(*v20);
    v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v24 = "NFDriverRFSettingsStoreValueForTagAtOffset";
      v25 = 1024;
      v26 = 87;
      v27 = 1024;
      v28 = a4;
      v29 = 1024;
      v30 = a3;
      v16 = "%{public}s:%i Invalid offset %d for tag 0x%04x";
      v17 = v22;
      v18 = 30;
      goto LABEL_9;
    }
  }
  else
  {
LABEL_5:
    v13 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14)
      v14(3, "%s:%i Failed to find tag 0x%04x", "NFDriverRFSettingsStoreValueForTagAtOffset", 93, a3);
    dispatch_get_specific(*v13);
    v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v24 = "NFDriverRFSettingsStoreValueForTagAtOffset";
      v25 = 1024;
      v26 = 93;
      v27 = 1024;
      v28 = a3;
      v16 = "%{public}s:%i Failed to find tag 0x%04x";
      v17 = v15;
      v18 = 24;
LABEL_9:
      _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    }
  }
}

UInt8 *NFDriverRFSettingsGetVendorParameters(unsigned int *a1, unsigned int *a2, const char *a3, uint64_t a4)
{
  const __CFData *v7;
  CFPropertyListRef v8;
  const __CFString *v9;
  const __CFString *v10;
  CFStringRef v11;
  CFTypeID v12;
  const __CFArray *Value;
  const __CFArray *v14;
  CFTypeID v15;
  CFIndex v16;
  const __CFDictionary *ValueAtIndex;
  CFTypeID TypeID;
  const __CFArray *v19;
  CFTypeID v20;
  const __CFString *v21;
  CFTypeID v22;
  const __CFString *v23;
  CFTypeID v24;
  const void *v25;
  CFTypeID v26;
  const void **v27;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v29;
  const char *v30;
  const void **v31;
  void (*v32)(uint64_t, const char *, ...);
  const void **v33;
  void (*v34)(uint64_t, const char *, ...);
  UInt8 *v35;
  unsigned int Length;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;
  CFRange v43;
  CFRange v44;
  CFRange v45;

  v42 = *MEMORY[0x24BDAC8D0];
  v7 = CFDataCreate(0, *(const UInt8 **)a4, *(_QWORD *)(a4 + 8));
  v8 = CFPropertyListCreateWithData(0, v7, 0, 0, 0);
  v9 = CFStringCreateWithFormat(0, 0, CFSTR("%02X.%02X"), a1[2], a1[3] >> 8);
  v10 = CFStringCreateWithCString(0, a3, 0x8000100u);
  v11 = CFStringCreateWithFormat(0, 0, CFSTR("%02X"), *a1);
  *a2 = 0;
  CFRelease(v7);
  if (!v8)
  {
    v27 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to decode plist", "NFDriverRFSettingsGetVendorParameters", 109);
    dispatch_get_specific(*v27);
    v29 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    *(_DWORD *)buf = 136446466;
    v39 = "NFDriverRFSettingsGetVendorParameters";
    v40 = 1024;
    v41 = 109;
    v30 = "%{public}s:%i Failed to decode plist";
LABEL_29:
    _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, v30, buf, 0x12u);
    goto LABEL_30;
  }
  v12 = CFGetTypeID(v8);
  if (v12 != CFDictionaryGetTypeID())
  {
    v31 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v32)
      v32(3, "%s:%i Invalid format", "NFDriverRFSettingsGetVendorParameters", 114);
    dispatch_get_specific(*v31);
    v29 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    *(_DWORD *)buf = 136446466;
    v39 = "NFDriverRFSettingsGetVendorParameters";
    v40 = 1024;
    v41 = 114;
    v30 = "%{public}s:%i Invalid format";
    goto LABEL_29;
  }
  Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v8, CFSTR("Config"));
  if (!Value || (v14 = Value, v15 = CFGetTypeID(Value), v15 != CFArrayGetTypeID()))
  {
    v33 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v34)
      v34(3, "%s:%i Invalid format", "NFDriverRFSettingsGetVendorParameters", 120);
    dispatch_get_specific(*v33);
    v29 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      goto LABEL_30;
    *(_DWORD *)buf = 136446466;
    v39 = "NFDriverRFSettingsGetVendorParameters";
    v40 = 1024;
    v41 = 120;
    v30 = "%{public}s:%i Invalid format";
    goto LABEL_29;
  }
  if (CFArrayGetCount(v14) < 1)
  {
LABEL_30:
    v35 = 0;
    goto LABEL_31;
  }
  v16 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v16);
    TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(ValueAtIndex))
    {
      v19 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, CFSTR("HW"));
      v20 = CFArrayGetTypeID();
      if (v20 == CFGetTypeID(v19))
      {
        v43.length = CFArrayGetCount(v19);
        v43.location = 0;
        if (CFArrayContainsValue(v19, v43, v11))
        {
          v21 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("antenna"));
          v22 = CFStringGetTypeID();
          if (v22 == CFGetTypeID(v21) && CFStringCompare(v21, v10, 1uLL) == kCFCompareEqualTo)
          {
            v23 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("fwVersion"));
            v24 = CFStringGetTypeID();
            if (v24 == CFGetTypeID(v23))
            {
              v45.location = 0;
              v45.length = 5;
              if (CFStringCompareWithOptions(v23, v9, v45, 1uLL) == kCFCompareEqualTo)
              {
                v25 = CFDictionaryGetValue(ValueAtIndex, CFSTR("settings"));
                v26 = CFDataGetTypeID();
                if (v26 == CFGetTypeID(v25))
                  break;
              }
            }
          }
        }
      }
    }
    if (CFArrayGetCount(v14) <= ++v16)
      goto LABEL_30;
  }
  Length = CFDataGetLength((CFDataRef)v25);
  v35 = (UInt8 *)malloc_type_calloc(1uLL, Length, 0x100004077774924uLL);
  if (v35)
  {
    v44.location = 0;
    v44.length = Length;
    CFDataGetBytes((CFDataRef)v25, v44, v35);
    *a2 = Length;
  }
LABEL_31:
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  return v35;
}

uint64_t NFDriverConfigurRSTNDelay(uint64_t a1)
{
  unsigned int *v2;
  uint64_t *v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  unsigned int *v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  void **v12;
  int *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v16 = 103329;
  v15 = 33658017;
  v13 = &v16;
  v14 = 4;
  v2 = sub_216EE5078((uint64_t)&v13);
  v12 = (void **)v2;
  if (!v2)
    return 3;
  v3 = sub_216EE4D10(a1, 37025, (uint64_t)v2, 0);
  if (sub_216EE0ECC(v3))
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to write IRQ", "NFDriverConfigurRSTNDelay", 915);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      goto LABEL_8;
    *(_DWORD *)buf = 136446466;
    v18 = "NFDriverConfigurRSTNDelay";
    v19 = 1024;
    v20 = 915;
    goto LABEL_7;
  }
  sub_216EE0D6C((void **)v3);
  sub_216EE5198(&v12);
  v13 = &v15;
  LODWORD(v14) = 4;
  v8 = sub_216EE5078((uint64_t)&v13);
  v12 = (void **)v8;
  if (!v8)
    return 3;
  v3 = sub_216EE4D10(a1, 37025, (uint64_t)v8, 0);
  if (!sub_216EE0ECC(v3))
  {
    v7 = 0;
    goto LABEL_9;
  }
  v9 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v10)
    v10(3, "%s:%i Failed to write IRQ", "NFDriverConfigurRSTNDelay", 931);
  dispatch_get_specific(*v9);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v18 = "NFDriverConfigurRSTNDelay";
    v19 = 1024;
    v20 = 931;
LABEL_7:
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write IRQ", buf, 0x12u);
  }
LABEL_8:
  v7 = 1;
LABEL_9:
  sub_216EE0D6C((void **)v3);
  sub_216EE5198(&v12);
  return v7;
}

uint64_t NFDriverConfigureSPMIIRQ(uint64_t a1, int a2)
{
  char v3;
  unsigned int *v4;
  uint64_t *v5;
  const void **v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  void **v14;
  _QWORD v15[2];
  __int16 v16;
  char v17;
  char v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a2 == 3)
    v3 = 1;
  else
    v3 = 3;
  v16 = 2721;
  v17 = 1;
  v18 = v3;
  v15[0] = &v16;
  if (a2 && a2 != 3)
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Invalid I/O selected", "NFDriverConfigureSPMIIRQ", 956);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v20 = "NFDriverConfigureSPMIIRQ";
      v21 = 1024;
      v22 = 956;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid I/O selected", buf, 0x12u);
    }
    return 5;
  }
  else
  {
    v15[1] = 4;
    v4 = sub_216EE5078((uint64_t)v15);
    v14 = (void **)v4;
    if (v4)
    {
      v5 = sub_216EE4D10(a1, 37025, (uint64_t)v4, 0);
      if (sub_216EE0ECC(v5))
      {
        v6 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v7)
          v7(3, "%s:%i Failed to write IRQ", "NFDriverConfigureSPMIIRQ", 967);
        dispatch_get_specific(*v6);
        v8 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v20 = "NFDriverConfigureSPMIIRQ";
          v21 = 1024;
          v22 = 967;
          _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write IRQ", buf, 0x12u);
        }
        v9 = 1;
      }
      else
      {
        v9 = 0;
      }
      sub_216EE0D6C((void **)v5);
      sub_216EE5198(&v14);
    }
    else
    {
      return 3;
    }
  }
  return v9;
}

uint64_t NFDriverConfigureI2CForLPM(uint64_t a1)
{
  unsigned int *v2;
  uint64_t *v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  void **v9;
  _QWORD v10[2];
  int v11;
  char v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v12 = 1;
  v11 = 587340192;
  v10[0] = &v11;
  v10[1] = 5;
  v2 = sub_216EE5078((uint64_t)v10);
  v9 = (void **)v2;
  if (!v2)
    return 3;
  v3 = sub_216EE4D10(a1, 37025, (uint64_t)v2, 0);
  if (sub_216EE0ECC(v3))
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to write I2C config", "NFDriverConfigureI2CForLPM", 990);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v14 = "NFDriverConfigureI2CForLPM";
      v15 = 1024;
      v16 = 990;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write I2C config", buf, 0x12u);
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  sub_216EE0D6C((void **)v3);
  sub_216EE5198(&v9);
  return v7;
}

uint64_t NFDriverRFSettingsSetup(uint64_t a1, const char *a2, uint64_t a3)
{
  const __CFString *v6;
  const void **v7;
  const __CFString *v8;
  int CString;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  const char *v12;
  const void **v13;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  const char *v19;
  const char *v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  UInt8 *VendorParameters;
  int v24;
  void (*v25)(uint64_t, const char *, ...);
  NSObject *v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  NSObject *v29;
  unsigned int v30;
  int v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  NSObject *v35;
  const char *v36;
  const char *CStringPtr;
  int RFConfigTLVs;
  void (*v39)(uint64_t, const char *, ...);
  NSObject *v40;
  void (*v41)(uint64_t, const char *, ...);
  NSObject *v42;
  const char *v43;
  uint8_t *v44;
  NSObject *v45;
  const char *v46;
  uint8_t *v47;
  const char *v48;
  void (*v49)(uint64_t, const char *, ...);
  NSObject *v50;
  void (*v51)(uint64_t, const char *, ...);
  NSObject *v52;
  os_log_type_t v53;
  void (*v54)(uint64_t, const char *, ...);
  _BOOL4 v55;
  void (*v56)(uint64_t, const char *, ...);
  NSObject *v57;
  void (*v58)(uint64_t, const char *, ...);
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  char v62;
  void (*v63)(uint64_t, const char *, ...);
  uint32_t v64;
  void (*v65)(uint64_t, const char *, ...);
  NSObject *v66;
  void (*v67)(uint64_t, const char *, ...);
  NSObject *v68;
  void *v69;
  const char *v70;
  NSObject *v71;
  uint32_t v72;
  uint64_t v73;
  char *v74;
  void (*v75)(uint64_t, const char *, ...);
  NSObject *v76;
  uint64_t v77;
  void (*v78)(uint64_t, const char *, ...);
  NSObject *v79;
  void (*v80)(uint64_t, const char *, ...);
  NSObject *v81;
  const char *v82;
  NSObject *v83;
  uint32_t v84;
  void (*v85)(uint64_t, const char *, ...);
  NSObject *v86;
  int v87;
  _QWORD v88[3];
  int v89;
  CFStringRef theString[2];
  CFStringRef v91[2];
  uint8_t v92[4];
  const char *v93;
  __int16 v94;
  int v95;
  __int16 v96;
  void *v97;
  uint8_t v98[24];
  int v99;
  _OWORD buffer[16];
  uint8_t buf[32];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  memset(v88, 0, sizeof(v88));
  v89 = 0;
  if (!a3)
  {
    v13 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i No RF settings.", "NFDriverRFSettingsSetup", 1210);
    dispatch_get_specific(*v13);
    v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetup";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1210;
      _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i No RF settings.", buf, 0x12u);
    }
    return 5;
  }
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v88))
    return 1;
  if (HIDWORD(v88[0]) < 5)
    return 0;
  v87 = 0;
  v6 = (const __CFString *)NFCalibrationCopyAntennaName();
  v7 = (const void **)MEMORY[0x24BEDCDB0];
  if (v6)
  {
    v8 = v6;
    CString = CFStringGetCString(v6, byte_254E55FF0, 31, 0x600u);
    dispatch_get_specific(*v7);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (CString)
    {
      if (v10)
        v10(6, "%s:%i EDT antenna name: %s", "_NFDriverRFSettingsGetAntennaName", 1021, byte_254E55FF0);
      dispatch_get_specific(*v7);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverRFSettingsGetAntennaName";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1021;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = byte_254E55FF0;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i EDT antenna name: %s", buf, 0x1Cu);
      }
      CFRelease(v8);
      v12 = byte_254E55FF0;
      goto LABEL_45;
    }
    if (v10)
      v10(3, "%s:%i Failed to get antenna name from EDT : %s", "_NFDriverRFSettingsGetAntennaName", 1026, byte_254E55FF0);
    dispatch_get_specific(*v7);
    v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverRFSettingsGetAntennaName";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1026;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = byte_254E55FF0;
      _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get antenna name from EDT : %s", buf, 0x1Cu);
    }
    CFRelease(v8);
  }
  if (NFProductIsWatch())
    v12 = "Bermuda";
  else
    v12 = "RTM";
  switch(NFGetProductType())
  {
    case ':':
    case '<':
      v12 = "BMA7A_2";
      break;
    case ';':
    case '=':
      v12 = "BMA7A_1";
      break;
    case '>':
      v12 = "BMA7A_3";
      break;
    case '?':
    case '@':
      v12 = "BMA7B_1";
      break;
    case 'A':
    case 'B':
      v12 = "BMA7B_2";
      break;
    case 'M':
      v18 = *(unsigned __int8 *)(a1 + 56);
      v19 = "RTM7A_xS";
      v20 = "RTM7A_3_2";
      goto LABEL_38;
    case 'N':
      v18 = *(unsigned __int8 *)(a1 + 56);
      v19 = "RTM7A_xS";
      v20 = "RTM7A_4_2";
      goto LABEL_38;
    case 'O':
      v18 = *(unsigned __int8 *)(a1 + 56);
      v19 = "RTM7A_xS";
      v20 = "RTM7A_1";
      goto LABEL_38;
    case 'P':
      v18 = *(unsigned __int8 *)(a1 + 56);
      v19 = "RTM7A_xS";
      v20 = "RTM7A_2";
      goto LABEL_38;
    case 'Q':
      v18 = *(unsigned __int8 *)(a1 + 56);
      v19 = "RTM7B_xS";
      v20 = "RTM7B_3";
      goto LABEL_38;
    case 'R':
      v18 = *(unsigned __int8 *)(a1 + 56);
      v19 = "RTM7B_xS";
      v20 = "RTM7B_4";
      goto LABEL_38;
    case 'S':
      v18 = *(unsigned __int8 *)(a1 + 56);
      v19 = "RTM7B_xS";
      v20 = "RTM7B_1";
      goto LABEL_38;
    case 'T':
      v18 = *(unsigned __int8 *)(a1 + 56);
      v19 = "RTM7B_xS";
      v20 = "RTM7B_2";
LABEL_38:
      if (v18)
        v12 = v19;
      else
        v12 = v20;
      break;
    default:
      break;
  }
  dispatch_get_specific(*v7);
  v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v21)
    v21(6, "%s:%i Using default antenna name %s", "_NFDriverRFSettingsGetAntennaName", 1200, v12);
  dispatch_get_specific(*v7);
  v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "_NFDriverRFSettingsGetAntennaName";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1200;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v12;
    _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Using default antenna name %s", buf, 0x1Cu);
  }
LABEL_45:
  VendorParameters = NFDriverRFSettingsGetVendorParameters((unsigned int *)v88, (unsigned int *)&v87, v12, a3);
  v24 = v87;
  dispatch_get_specific(*v7);
  v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (VendorParameters && v24)
  {
    if (v25)
      v25(6, "%s:%i Pushing vendor RF settings for %s", "NFDriverRFSettingsSetup", 1230, v12);
    dispatch_get_specific(*v7);
    v26 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetup";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1230;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v12;
      _os_log_impl(&dword_216EC7000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Pushing vendor RF settings for %s", buf, 0x1Cu);
    }
    if (sub_216EE57A4(a1, (uint64_t)VendorParameters, v87, 1))
    {
      dispatch_get_specific(*v7);
      v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27)
        v27(3, "%s:%i Failed to push builtin RF settings.", "NFDriverRFSettingsSetup", 1232);
      dispatch_get_specific(*v7);
      v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetup";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1232;
        _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to push builtin RF settings.", buf, 0x12u);
      }
      free(VendorParameters);
      return 1;
    }
    free(VendorParameters);
  }
  else
  {
    if (v25)
      v25(4, "%s:%i No vendor RF settings found for %s!", "NFDriverRFSettingsSetup", 1238, v12);
    dispatch_get_specific(*v7);
    v29 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetup";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1238;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v12;
      _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i No vendor RF settings found for %s!", buf, 0x1Cu);
    }
  }
  v30 = sub_216EE16CC(a1, (uint64_t)v88, a2);
  v16 = 8;
  if (v30 <= 0xB && ((1 << v30) & 0xE01) != 0)
  {
    if (*(_BYTE *)(a1 + 56))
      return 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(buffer, 0, sizeof(buffer));
    *(_OWORD *)theString = 0u;
    *(_OWORD *)v91 = 0u;
    v32 = NFGetProductType();
    v33 = 0;
    while (dword_24D65E678[v33] != v32)
    {
      v33 += 12;
      if (v33 == 432)
        goto LABEL_78;
    }
    if (v32)
    {
      dispatch_get_specific(*v7);
      v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v34)
        v34(6, "%s:%i Using local RF settings", "_NFDriverRFSettingsSetup", 713);
      dispatch_get_specific(*v7);
      v35 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v98 = 136446466;
        *(_QWORD *)&v98[4] = "_NFDriverRFSettingsSetup";
        *(_WORD *)&v98[12] = 1024;
        *(_DWORD *)&v98[14] = 713;
        _os_log_impl(&dword_216EC7000, v35, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Using local RF settings", v98, 0x12u);
      }
      CStringPtr = *(const char **)&dword_24D65E678[v33 + 8];
      v36 = *(const char **)&dword_24D65E678[v33 + 10];
      goto LABEL_123;
    }
LABEL_78:
    RFConfigTLVs = NFCalibrationGetRFConfigTLVs();
    dispatch_get_specific(*v7);
    v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (!RFConfigTLVs)
    {
      if (v39)
        v39(4, "%s:%i No custom RF settings found!", "_NFDriverRFSettingsSetup", 788);
      dispatch_get_specific(*v7);
      v45 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        goto LABEL_95;
      *(_DWORD *)v98 = 136446466;
      *(_QWORD *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 788;
      v46 = "%{public}s:%i No custom RF settings found!";
      v47 = v98;
      goto LABEL_94;
    }
    if (v39)
      v39(6, "%s:%i Using EDT RF settings", "_NFDriverRFSettingsSetup", 719);
    dispatch_get_specific(*v7);
    v40 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v98 = 136446466;
      *(_QWORD *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 719;
      _os_log_impl(&dword_216EC7000, v40, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Using EDT RF settings", v98, 0x12u);
    }
    if (theString[0])
    {
      CStringPtr = CFStringGetCStringPtr(theString[0], 0x600u);
      if (!CStringPtr)
      {
        CStringPtr = (const char *)buf;
        if (!CFStringGetCString(theString[0], (char *)buf, 256, 0x600u))
        {
          dispatch_get_specific(*v7);
          v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v41)
            v41(3, "%s:%i failed to get clock TLV", "_NFDriverRFSettingsSetup", 732);
          dispatch_get_specific(*v7);
          v42 = NFSharedLogGetLogger();
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            goto LABEL_154;
          *(_DWORD *)v98 = 136446466;
          *(_QWORD *)&v98[4] = "_NFDriverRFSettingsSetup";
          *(_WORD *)&v98[12] = 1024;
          *(_DWORD *)&v98[14] = 732;
          v43 = "%{public}s:%i failed to get clock TLV";
          v44 = v98;
LABEL_151:
          v52 = v42;
          v53 = OS_LOG_TYPE_ERROR;
          goto LABEL_152;
        }
      }
    }
    else
    {
      CStringPtr = (const char *)buf;
    }
    if (theString[1])
    {
      v48 = CFStringGetCStringPtr(theString[1], 0x600u);
      if (v48)
      {
LABEL_99:
        v36 = v48;
LABEL_123:
        if (NFProductIsDevBoard())
        {
          v55 = *CStringPtr == 0;
          if (*CStringPtr && NFGetProductType() - 5 <= 5)
          {
            dispatch_get_specific(*v7);
            v56 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v56)
              v56(6, "%s:%i overriding clock setting to 26MHz ", "_NFDriverRFSettingsSetup", 805);
            dispatch_get_specific(*v7);
            v57 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v98 = 136446466;
              *(_QWORD *)&v98[4] = "_NFDriverRFSettingsSetup";
              *(_WORD *)&v98[12] = 1024;
              *(_DWORD *)&v98[14] = 805;
              _os_log_impl(&dword_216EC7000, v57, OS_LOG_TYPE_DEFAULT, "%{public}s:%i overriding clock setting to 26MHz ", v98, 0x12u);
            }
            CStringPtr = "A0030103";
          }
          memset(v98, 0, sizeof(v98));
          v99 = 0;
          if ((NFDriverGetControllerInfo(a1, (uint64_t)v98) & 1) != 0)
          {
            if ((*(_DWORD *)&v98[4] - 7) <= 1)
            {
              dispatch_get_specific(*v7);
              v58 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v58)
                v58(3, "%s:%i Not supported on SN100V dev boards - skipping..", "_NFDriverRFSettingsSetup", 820);
              dispatch_get_specific(*v7);
              v45 = NFSharedLogGetLogger();
              if (!os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                goto LABEL_95;
              *(_DWORD *)v92 = 136446466;
              v93 = "_NFDriverRFSettingsSetup";
              v94 = 1024;
              v95 = 820;
              v46 = "%{public}s:%i Not supported on SN100V dev boards - skipping..";
              v47 = v92;
LABEL_94:
              _os_log_impl(&dword_216EC7000, v45, OS_LOG_TYPE_ERROR, v46, v47, 0x12u);
LABEL_95:
              v16 = 0;
              goto LABEL_155;
            }
            goto LABEL_139;
          }
        }
        else
        {
          memset(v98, 0, sizeof(v98));
          v99 = 0;
          if ((NFDriverGetControllerInfo(a1, (uint64_t)v98) & 1) != 0)
          {
            v55 = 1;
LABEL_139:
            v59 = NFDataCreateWithHexString();
            if (v59)
            {
              v60 = v59;
              if (v36)
                v61 = v55;
              else
                v61 = 0;
              if (!v61)
              {
                v16 = 8;
LABEL_168:
                if (*(_QWORD *)(v60 + 8) > 3uLL)
                {
                  v73 = NFDataAsHexString();
                  if (v73)
                  {
                    v74 = (char *)v73;
                    dispatch_get_specific(*v7);
                    v75 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                    if (v75)
                      v75(6, "%s:%i RF config to set: %s", "_NFDriverRFSettingsSetup", 857, v74);
                    dispatch_get_specific(*v7);
                    v76 = NFSharedLogGetLogger();
                    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v92 = 136446722;
                      v93 = "_NFDriverRFSettingsSetup";
                      v94 = 1024;
                      v95 = 857;
                      v96 = 2080;
                      v97 = v74;
                      _os_log_impl(&dword_216EC7000, v76, OS_LOG_TYPE_DEFAULT, "%{public}s:%i RF config to set: %s", v92, 0x1Cu);
                    }
                    free(v74);
                  }
                  v77 = sub_216EE57A4(a1, *(_QWORD *)v60, *(_DWORD *)(v60 + 8), 0);
                  if (!(_DWORD)v77)
                  {
                    if (sub_216EDFF1C(a1, *(_QWORD *)v60, *(_QWORD *)(v60 + 8)))
                      v16 = 0;
                    else
                      v16 = 8;
                    goto LABEL_198;
                  }
                  v16 = v77;
                  dispatch_get_specific(*v7);
                  v78 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v78)
                    v78(3, "%s:%i Failed to set RF settings.", "_NFDriverRFSettingsSetup", 866);
                  dispatch_get_specific(*v7);
                  v79 = NFSharedLogGetLogger();
                  if (!os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                    goto LABEL_198;
                  *(_DWORD *)v92 = 136446466;
                  v93 = "_NFDriverRFSettingsSetup";
                  v94 = 1024;
                  v95 = 866;
                  v70 = "%{public}s:%i Failed to set RF settings.";
                  v71 = v79;
                  v72 = 18;
                }
                else
                {
                  dispatch_get_specific(*v7);
                  v67 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v67)
                    v67(3, "%s:%i RF settings is too short: length=%zu", "_NFDriverRFSettingsSetup", 850, *(_QWORD *)(v60 + 8));
                  dispatch_get_specific(*v7);
                  v68 = NFSharedLogGetLogger();
                  if (!os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
                    goto LABEL_198;
                  v69 = *(void **)(v60 + 8);
                  *(_DWORD *)v92 = 136446722;
                  v93 = "_NFDriverRFSettingsSetup";
                  v94 = 1024;
                  v95 = 850;
                  v96 = 2048;
                  v97 = v69;
                  v70 = "%{public}s:%i RF settings is too short: length=%zu";
                  v71 = v68;
                  v72 = 28;
                }
                _os_log_impl(&dword_216EC7000, v71, OS_LOG_TYPE_ERROR, v70, v92, v72);
LABEL_198:
                NFDataRelease();
                goto LABEL_155;
              }
              if (NFDataCreateWithHexString())
              {
                v62 = NFDataAppend();
                NFDataRelease();
                if ((v62 & 1) != 0)
                {
                  v16 = 0;
                  goto LABEL_168;
                }
                dispatch_get_specific(*v7);
                v85 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v85)
                  v85(3, "%s:%i Failed to merge RF settings", "_NFDriverRFSettingsSetup", 843);
                dispatch_get_specific(*v7);
                v86 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                  goto LABEL_194;
                *(_DWORD *)v92 = 136446466;
                v93 = "_NFDriverRFSettingsSetup";
                v94 = 1024;
                v95 = 843;
                v82 = "%{public}s:%i Failed to merge RF settings";
                v83 = v86;
                v84 = 18;
              }
              else
              {
                dispatch_get_specific(*v7);
                v80 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v80)
                  v80(3, "%s:%i Failed to create RF settings from TLV string %s", "_NFDriverRFSettingsSetup", 835, v36);
                dispatch_get_specific(*v7);
                v81 = NFSharedLogGetLogger();
                if (!os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
                  goto LABEL_194;
                *(_DWORD *)v92 = 136446722;
                v93 = "_NFDriverRFSettingsSetup";
                v94 = 1024;
                v95 = 835;
                v96 = 2080;
                v97 = (void *)v36;
                v82 = "%{public}s:%i Failed to create RF settings from TLV string %s";
                v83 = v81;
                v84 = 28;
              }
              _os_log_impl(&dword_216EC7000, v83, OS_LOG_TYPE_ERROR, v82, v92, v84);
LABEL_194:
              NFDataRelease();
              goto LABEL_154;
            }
            dispatch_get_specific(*v7);
            v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v65)
              v65(3, "%s:%i Failed to create RF settings from clock TLV string %s", "_NFDriverRFSettingsSetup", 828, CStringPtr);
            dispatch_get_specific(*v7);
            v66 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
              goto LABEL_154;
            *(_DWORD *)v92 = 136446722;
            v93 = "_NFDriverRFSettingsSetup";
            v94 = 1024;
            v95 = 828;
            v96 = 2080;
            v97 = (void *)CStringPtr;
            v43 = "%{public}s:%i Failed to create RF settings from clock TLV string %s";
            v44 = v92;
            v52 = v66;
            v53 = OS_LOG_TYPE_ERROR;
            v64 = 28;
LABEL_153:
            _os_log_impl(&dword_216EC7000, v52, v53, v43, v44, v64);
LABEL_154:
            v16 = 8;
LABEL_155:
            if (theString[0])
              CFRelease(theString[0]);
            if (theString[1])
              CFRelease(theString[1]);
            if (v91[1])
              CFRelease(v91[1]);
            if (v91[0])
              CFRelease(v91[0]);
            return v16;
          }
        }
        dispatch_get_specific(*v7);
        v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v63)
          v63(3, "%s:%i Failed to get controller info", "_NFDriverRFSettingsSetup", 814);
        dispatch_get_specific(*v7);
        v42 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          goto LABEL_154;
        *(_DWORD *)v92 = 136446466;
        v93 = "_NFDriverRFSettingsSetup";
        v94 = 1024;
        v95 = 814;
        v43 = "%{public}s:%i Failed to get controller info";
        v44 = v92;
        goto LABEL_151;
      }
      v36 = (const char *)buffer;
      if (CFStringGetCString(theString[1], (char *)buffer, 256, 0x600u))
        goto LABEL_123;
      dispatch_get_specific(*v7);
      v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v51)
        v51(6, "%s:%i failed to get config TLV", "_NFDriverRFSettingsSetup", 748);
      dispatch_get_specific(*v7);
      v50 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        goto LABEL_154;
      *(_DWORD *)v98 = 136446466;
      *(_QWORD *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 748;
      v43 = "%{public}s:%i failed to get config TLV";
    }
    else if (sub_216EDFCE8("JDI"))
    {
      if (!v91[1])
      {
        v36 = (const char *)buffer;
        goto LABEL_123;
      }
      v48 = CFStringGetCStringPtr(v91[1], 0x600u);
      if (v48)
        goto LABEL_99;
      v36 = (const char *)buffer;
      if (CFStringGetCString(v91[1], (char *)buffer, 256, 0x600u))
        goto LABEL_123;
      dispatch_get_specific(*v7);
      v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v49)
        v49(6, "%s:%i failed to get config TLV JDI", "_NFDriverRFSettingsSetup", 764);
      dispatch_get_specific(*v7);
      v50 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        goto LABEL_154;
      *(_DWORD *)v98 = 136446466;
      *(_QWORD *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 764;
      v43 = "%{public}s:%i failed to get config TLV JDI";
    }
    else
    {
      v36 = (const char *)buffer;
      if (!sub_216EDFCE8("LGD") || !v91[0])
        goto LABEL_123;
      v48 = CFStringGetCStringPtr(v91[0], 0x600u);
      if (v48)
        goto LABEL_99;
      v36 = (const char *)buffer;
      if (CFStringGetCString(v91[0], (char *)buffer, 256, 0x600u))
        goto LABEL_123;
      dispatch_get_specific(*v7);
      v54 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v54)
        v54(6, "%s:%i failed to get config TLV LGD", "_NFDriverRFSettingsSetup", 781);
      dispatch_get_specific(*v7);
      v50 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        goto LABEL_154;
      *(_DWORD *)v98 = 136446466;
      *(_QWORD *)&v98[4] = "_NFDriverRFSettingsSetup";
      *(_WORD *)&v98[12] = 1024;
      *(_DWORD *)&v98[14] = 781;
      v43 = "%{public}s:%i failed to get config TLV LGD";
    }
    v44 = v98;
    v52 = v50;
    v53 = OS_LOG_TYPE_DEFAULT;
LABEL_152:
    v64 = 18;
    goto LABEL_153;
  }
  return v16;
}

BOOL NFDriverRFSettingsCopy(uint64_t a1, uint64_t a2, void **a3, _WORD *a4)
{
  int ControllerInfo;
  _BOOL8 result;
  size_t v10;
  char *v11;
  void *v12;
  char *v13;
  unsigned __int16 v14;
  void *__src;
  _QWORD v16[3];
  int v17;

  memset(v16, 0, sizeof(v16));
  v17 = 0;
  ControllerInfo = NFDriverGetControllerInfo(a1, (uint64_t)v16);
  result = 0;
  if (ControllerInfo)
  {
    if (HIDWORD(v16[0]) >= 5)
    {
      result = sub_216EE363C(a1, a2, a3, a4);
      if (!result)
        return result;
      __src = 0;
      v14 = 0;
      if (sub_216EDF048(a1, &__src, &v14))
      {
        v10 = v14;
        v11 = (char *)malloc_type_calloc(1uLL, v14 + (unint64_t)(unsigned __int16)*a4, 0x355FB4AFuLL);
        v12 = __src;
        if (v11)
        {
          v13 = v11;
          memcpy(v11, __src, v10);
          memcpy(&v13[v10], *a3, (unsigned __int16)*a4);
          *a4 += v10;
          free(*a3);
          *a3 = v13;
        }
        free(v12);
      }
    }
    return 1;
  }
  return result;
}

BOOL sub_216EDF048(uint64_t a1, _QWORD *a2, _WORD *a3)
{
  const void **v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  _BOOL8 result;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  const void **v23;
  void (*v24)(uint64_t, const char *, ...);
  NSObject *v25;
  uint64_t v26;
  unsigned int *v27;
  uint64_t *v28;
  const void **v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  const void **v32;
  void (*v33)(uint64_t, const char *, ...);
  NSObject *v34;
  char *v35;
  _BYTE *v36;
  char *v37;
  __int16 v38;
  _QWORD v39[3];
  int v40;
  __int16 v41;
  const void **v42;
  void **v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  _BYTE v50[13];
  uint64_t v51;
  int v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v42 = 0;
  v43 = 0;
  v41 = 2401;
  v50[0] = 12;
  v50[1] = (unsigned __int16)sub_216EE6D80(a1, 1) >> 8;
  v50[2] = sub_216EE6D80(a1, 1);
  v50[3] = (unsigned __int16)sub_216EE6D80(a1, 7) >> 8;
  v50[4] = sub_216EE6D80(a1, 7);
  v50[5] = (unsigned __int16)sub_216EE6D80(a1, 35) >> 8;
  v50[6] = sub_216EE6D80(a1, 35);
  v50[7] = (unsigned __int16)sub_216EE6D80(a1, 25) >> 8;
  v50[8] = sub_216EE6D80(a1, 25);
  v50[9] = (unsigned __int16)sub_216EE6D80(a1, 30) >> 8;
  v50[10] = sub_216EE6D80(a1, 30);
  v50[11] = (unsigned __int16)sub_216EE6D80(a1, 23) >> 8;
  v50[12] = sub_216EE6D80(a1, 23);
  v51 = 0x13A09EA098A094A0;
  v52 = 178325664;
  memset(v39, 0, sizeof(v39));
  v40 = 0;
  if ((NFDriverGetControllerInfo(a1, (uint64_t)v39) & 1) == 0)
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(4, "%s:%i Failed to query controller info.", "_NFDriverRFSettingsGetRFProp", 201);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v45 = "_NFDriverRFSettingsGetRFProp";
      v46 = 1024;
      v47 = 201;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to query controller info.", buf, 0x12u);
    }
    return 1;
  }
  if (HIDWORD(v39[0]) > 6)
  {
    *a2 = 0;
    *a3 = 0;
    v13 = sub_216EE5100(0x19u, v50);
    v43 = (void **)v13;
    v14 = sub_216EE5100(v50[0] << 8, 0);
    v42 = (const void **)v14;
    if (!v14 || !v13)
    {
      v20 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(4, "%s:%i Failed to allocate buffer.", "_NFDriverRFSettingsGetRFProp", 216);
      dispatch_get_specific(*v20);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v45 = "_NFDriverRFSettingsGetRFProp";
        v46 = 1024;
        v47 = 216;
        _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer.", buf, 0x12u);
      }
      sub_216EE5198(&v43);
      sub_216EE5198((void ***)&v42);
      return 0;
    }
    v15 = sub_216EE4D10(a1, 37026, (uint64_t)v13, (uint64_t)v14);
    v16 = sub_216EE0ECC(v15);
    if (v16 != 18 && v16)
    {
      v23 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24)
        v24(3, "%s:%i Failed to get RF settings; status=0x%04llX", "_NFDriverRFSettingsGetRFProp", 234, *v15);
      dispatch_get_specific(*v23);
      v25 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v26 = *v15;
        *(_DWORD *)buf = 136446722;
        v45 = "_NFDriverRFSettingsGetRFProp";
        v46 = 1024;
        v47 = 234;
        v48 = 2048;
        v49 = v26;
        _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings; status=0x%04llX",
          buf,
          0x1Cu);
      }
      v18 = 0;
    }
    else
    {
      v17 = malloc_type_calloc(1uLL, *((unsigned int *)v42 + 2), 0x100004077774924uLL);
      v18 = v17;
      if (v17)
      {
        memcpy(v17, *v42, *((unsigned int *)v42 + 2));
        v19 = *((_DWORD *)v42 + 2);
LABEL_29:
        sub_216EE0D6C((void **)v15);
        sub_216EE5198(&v43);
        sub_216EE5198((void ***)&v42);
        v43 = (void **)sub_216EE5100(2u, &v41);
        v27 = sub_216EE5100(0x100u, 0);
        v42 = (const void **)v27;
        if (v43 && v27)
        {
          v28 = sub_216EE4D10(a1, 37027, (uint64_t)v43, (uint64_t)v27);
          if (sub_216EE0ECC(v28))
          {
            v29 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v30)
              v30(3, "%s:%i Failed to get RF settings registers.", "_NFDriverRFSettingsGetRFProp", 270);
            dispatch_get_specific(*v29);
            v31 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v45 = "_NFDriverRFSettingsGetRFProp";
              v46 = 1024;
              v47 = 270;
              _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings registers.", buf, 0x12u);
            }
          }
          else
          {
            v35 = (char *)malloc_type_realloc(v18, *((_DWORD *)v42 + 2) + (unsigned __int16)v19 + 5, 0xD66F05E7uLL);
            if (v35)
            {
              v36 = v35;
              v37 = &v35[(unsigned __int16)v19];
              v38 = sub_216EE6D80(a1, 6);
              v36[(unsigned __int16)v19] = HIBYTE(v38);
              v37[1] = v38;
              v37[2] = *((_BYTE *)v42 + 8) + 2;
              *(_WORD *)&v36[(unsigned __int16)(v19 + 3)] = v41;
              memcpy(&v36[(unsigned __int16)(v19 + 5)], *v42, *((unsigned int *)v42 + 2));
              LOWORD(v19) = v19 + 5 + *((_WORD *)v42 + 4);
              v18 = v36;
            }
          }
          sub_216EE5198(&v43);
          sub_216EE5198((void ***)&v42);
          sub_216EE0D6C((void **)v28);
          if (v18 && (_WORD)v19)
          {
            *a2 = v18;
            *a3 = v19;
            return 1;
          }
          if (!v18)
            return 0;
        }
        else
        {
          v32 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v33)
            v33(4, "%s:%i Failed to allocate outParams buffer.", "_NFDriverRFSettingsGetRFProp", 243);
          dispatch_get_specific(*v32);
          v34 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v45 = "_NFDriverRFSettingsGetRFProp";
            v46 = 1024;
            v47 = 243;
            _os_log_impl(&dword_216EC7000, v34, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate outParams buffer.", buf, 0x12u);
          }
          sub_216EE5198(&v43);
          sub_216EE5198((void ***)&v42);
        }
        free(v18);
        return 0;
      }
    }
    LOWORD(v19) = 0;
    goto LABEL_29;
  }
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7)
    v7(4, "%s:%i Unsupported hardware.", "_NFDriverRFSettingsGetRFProp", 205);
  dispatch_get_specific(*v6);
  v8 = NFSharedLogGetLogger();
  result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    v45 = "_NFDriverRFSettingsGetRFProp";
    v46 = 1024;
    v47 = 205;
    _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Unsupported hardware.", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t NFDriverDisableBoost(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint64_t *v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  uint64_t v11;
  void **v13;
  int v14;
  _QWORD v15[3];
  int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v14 = -520024159;
  if (!*(_BYTE *)(a1 + 58))
    return 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v15))
    return 8;
  if ((HIDWORD(v15[0]) - 13) < 0xFFFFFFFD)
    return 0;
  v3 = sub_216EE5100(4u, &v14);
  v13 = (void **)v3;
  if (!v3)
    return 3;
  v4 = (uint64_t)v3;
  v5 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Disabling boost", "NFDriverDisableBoost", 1322);
  dispatch_get_specific(*v5);
  v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v18 = "NFDriverDisableBoost";
    v19 = 1024;
    v20 = 1322;
    _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Disabling boost", buf, 0x12u);
  }
  v8 = sub_216EE4D10(a1, 37025, v4, 0);
  if (sub_216EE0ECC(v8))
  {
    dispatch_get_specific(*v5);
    v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9)
      v9(3, "%s:%i status=0x%04llX", "NFDriverDisableBoost", 1325, *v8);
    dispatch_get_specific(*v5);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *v8;
      *(_DWORD *)buf = 136446722;
      v18 = "NFDriverDisableBoost";
      v19 = 1024;
      v20 = 1325;
      v21 = 2048;
      v22 = v11;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  sub_216EE0D6C((void **)v8);
  sub_216EE5198(&v13);
  return v2;
}

uint64_t NFDriverDisableLPCDAssist(uint64_t a1)
{
  unsigned int *v2;
  uint64_t *v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  void **v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = sub_216EE5100(4u, &unk_216F08067);
  v9 = (void **)v2;
  if (!v2)
    return 3;
  v3 = sub_216EE4D10(a1, 37025, (uint64_t)v2, 0);
  if (sub_216EE0ECC(v3))
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to setup LPCD_CFG", "NFDriverDisableLPCDAssist", 1348);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v11 = "NFDriverDisableLPCDAssist";
      v12 = 1024;
      v13 = 1348;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup LPCD_CFG", buf, 0x12u);
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  sub_216EE0D6C((void **)v3);
  sub_216EE5198(&v9);
  return v7;
}

uint64_t NFDriverEnableSERMPowerSave(uint64_t a1)
{
  unsigned int *v2;
  uint64_t *v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  void **v9;
  int v10;
  __int16 v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v11 = 12;
  v10 = 33776289;
  v2 = sub_216EE5100(6u, &v10);
  v9 = (void **)v2;
  if (!v2)
    return 3;
  v3 = sub_216EE4D10(a1, 37025, (uint64_t)v2, 0);
  if (sub_216EE0ECC(v3))
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to setup SERM power save", "NFDriverEnableSERMPowerSave", 1372);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v13 = "NFDriverEnableSERMPowerSave";
      v14 = 1024;
      v15 = 1372;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup SERM power save", buf, 0x12u);
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  sub_216EE0D6C((void **)v3);
  sub_216EE5198(&v9);
  return v7;
}

uint64_t sub_216EDFCE8(const char *a1)
{
  mach_port_t v2;
  const __CFDictionary *v3;
  io_service_t MatchingService;
  io_object_t v5;
  const __CFData *CFProperty;
  const __CFData *v7;
  CFTypeID v8;
  const UInt8 *BytePtr;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (!a1)
    return 1;
  v2 = *MEMORY[0x24BDD8B18];
  v3 = IOServiceNameMatching("disp0");
  MatchingService = IOServiceGetMatchingService(v2, v3);
  if (MatchingService)
  {
    v5 = MatchingService;
    CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("bics-param-set"), 0, 0);
    if (!CFProperty)
    {
      v13 = 0;
      goto LABEL_17;
    }
    v7 = CFProperty;
    v8 = CFGetTypeID(CFProperty);
    if (v8 == CFDataGetTypeID() && CFDataGetLength(v7) >= 4)
    {
      BytePtr = CFDataGetBytePtr(v7);
      if (!strcmp("LGD", a1))
      {
        v15 = *BytePtr;
        v13 = 1;
        v16 = v15 > 0x2D || ((1 << v15) & 0x200340000500) == 0;
        if (!v16 || v15 == 93)
          goto LABEL_13;
      }
      else if (!strcmp("JDI", a1))
      {
        v17 = *BytePtr;
        if ((v17 - 31) <= 0x3F && ((1 << (v17 - 31)) & 0x8000000000000009) != 0
          || v17 == 12)
        {
          v13 = 1;
          goto LABEL_13;
        }
      }
      else
      {
        v10 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(3, "%s:%i Unknown parameter !", "watchDisplayCheck", 521);
        dispatch_get_specific(*v10);
        v12 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v21 = "watchDisplayCheck";
          v22 = 1024;
          v23 = 521;
          _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown parameter !", buf, 0x12u);
        }
      }
    }
    v13 = 0;
LABEL_13:
    CFRelease(v7);
LABEL_17:
    IOObjectRelease(v5);
    return v13;
  }
  return 0;
}

uint64_t sub_216EDFF1C(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  char *v5;
  __int16 v6;
  uint64_t v7;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  const void **v13;
  unsigned int v14;
  size_t v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  int v25;
  const void *v26;
  int v27;
  unsigned int v28;
  int v29;
  char *v30;
  int v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  void (*v34)(uint64_t, const char *, ...);
  NSObject *v35;
  void (*v36)(uint64_t, const char *, ...);
  NSObject *v37;
  uint64_t v38;
  const void **v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  size_t v43;
  int v44;
  NSObject *v45;
  void (*v46)(uint64_t, const char *, ...);
  NSObject *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  int v53;
  NSObject *v54;
  const void **v55;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v57;
  char *v58;
  unsigned int v59;
  char *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  char *v68;
  __int16 v69;
  char *v70;
  uint8_t v71[4];
  uint8_t *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  size_t v78;
  uint8_t buf[48];
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v70 = 0;
  v69 = 0;
  if (!sub_216EDF048(a1, &v70, &v69))
    return 1;
  v5 = v70;
  v6 = v69;
  if (NFDataCreateWithBytes())
  {
    NFDataPrintAsHexString();
    NFDataRelease();
  }
  if (!v5)
  {
    v55 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "_NFDriverRFSettingsValidate", 432, "actualRfConfig");
    dispatch_get_specific(*v55);
    v57 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverRFSettingsValidate";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 432;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "actualRfConfig";
      _os_log_impl(&dword_216EC7000, v57, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v59 = a3;
  v58 = v5;
  if (a3 >= 3u)
  {
    v9 = 0;
    v10 = v5 + 1;
    v11 = (unsigned __int16)(v6 - 1);
    v7 = 1;
    v12 = 3;
    v13 = (const void **)MEMORY[0x24BEDCDB0];
    v14 = v59;
    v60 = v10;
    v61 = v11;
    v62 = a2;
    while (1)
    {
      v15 = *(unsigned __int8 *)(a2 + v9 + 2);
      if (v12 + v15 > v14)
        goto LABEL_97;
      v16 = *(unsigned __int8 *)(a2 + v9 + 1) | (*(unsigned __int8 *)(a2 + v9) << 8);
      if (v16 > 41065)
      {
        if (v16 > 41117)
        {
          if (v16 > 41134)
          {
            if (v16 == 41135)
            {
              v17 = "APC_CONTROL_TAG";
LABEL_51:
              v25 = 0;
              v65 = v12;
              v26 = (const void *)(a2 + v12);
              v63 = v12 + v15;
              do
              {
                v27 = v25 + 3;
                if (v25 + 3 > v11 || (v28 = v10[v25 + 2], v27 + v28 > v11))
                {
                  v30 = 0;
                  v28 = 0;
                  goto LABEL_63;
                }
                v29 = v10[v25 + 1] | (v10[v25] << 8);
                v25 = v27 + v28;
              }
              while (v29 != v16);
              v67 = v7;
              v30 = &v10[v27];
              if (v28 == (_DWORD)v15)
              {
                v31 = memcmp(v26, &v10[v27], v15);
                v28 = v15;
                if (!v31)
                {
                  dispatch_get_specific(*v13);
                  v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v32)
                    v32(6, "%s:%i %s(%04X) is OK", "_NFDriverRFSettingsValidateTag", 338, v17, v16);
                  dispatch_get_specific(*v13);
                  v33 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "_NFDriverRFSettingsValidateTag";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 338;
                    *(_WORD *)&buf[18] = 2080;
                    *(_QWORD *)&buf[20] = v17;
                    *(_WORD *)&buf[28] = 1024;
                    *(_DWORD *)&buf[30] = v16;
                    _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s(%04X) is OK", buf, 0x22u);
                  }
                  v11 = v61;
                  v9 = v63;
                  v7 = v67;
                  goto LABEL_96;
                }
              }
LABEL_63:
              v64 = v28;
              v68 = v30;
              dispatch_get_specific(*v13);
              v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v34)
                v34(3, "%s:%i Failed to verify %s(%04X)", "_NFDriverRFSettingsValidateTag", 332, v17, v16);
              dispatch_get_specific(*v13);
              v35 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "_NFDriverRFSettingsValidateTag";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 332;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v17;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v16;
                _os_log_impl(&dword_216EC7000, v35, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to verify %s(%04X)", buf, 0x22u);
              }
              memset(buf, 0, sizeof(buf));
              dispatch_get_specific(*v13);
              v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              dispatch_get_specific(*v13);
              v37 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v71 = 136315906;
                v72 = (uint8_t *)"_NFDriverRFSettingsValidateTag";
                v73 = 1024;
                v74 = 333;
                v75 = 2082;
                v76 = "Expected tag value : ";
                v77 = 2048;
                v78 = v15;
                _os_log_impl(&dword_216EC7000, v37, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v71, 0x26u);
              }
              if (v36)
                v36(3, "%s:%i %s %lu bytes :", "_NFDriverRFSettingsValidateTag", 333, "Expected tag value : ", v15);
              if ((_DWORD)v15)
              {
                v38 = 0;
                v66 = v62 + v65;
                do
                {
                  v39 = v13;
                  v40 = 0;
                  v41 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v38)];
                  do
                  {
                    v42 = v40 + 1;
                    v43 = v40 + 1 + v38;
                    v44 = sprintf(v41, "0x%02X ", *(unsigned __int8 *)(v66 + v38 + v40));
                    if (v40 > 6)
                      break;
                    v41 += v44;
                    ++v40;
                  }
                  while (v43 < v15);
                  v13 = v39;
                  dispatch_get_specific(*v39);
                  v45 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v71 = 136446210;
                    v72 = buf;
                    _os_log_impl(&dword_216EC7000, v45, OS_LOG_TYPE_ERROR, "%{public}s", v71, 0xCu);
                  }
                  if (v36)
                    v36(3, "%s", (const char *)buf);
                  v38 += v42;
                }
                while (v43 < v15);
              }
              memset(buf, 0, sizeof(buf));
              dispatch_get_specific(*v13);
              v46 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              dispatch_get_specific(*v13);
              v47 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v71 = 136315906;
                v72 = (uint8_t *)"_NFDriverRFSettingsValidateTag";
                v73 = 1024;
                v74 = 334;
                v75 = 2082;
                v76 = "Received tag value : ";
                v77 = 2048;
                v78 = v64;
                _os_log_impl(&dword_216EC7000, v47, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v71, 0x26u);
              }
              if (v46)
                v46(3, "%s:%i %s %lu bytes :", "_NFDriverRFSettingsValidateTag", 334, "Received tag value : ", v64);
              if (v64)
              {
                v48 = 0;
                do
                {
                  v49 = 0;
                  v50 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v48)];
                  do
                  {
                    v51 = v49 + 1;
                    v52 = v49 + 1 + v48;
                    v53 = sprintf(v50, "0x%02X ", v68[v48 + v49]);
                    if (v49 > 6)
                      break;
                    v50 += v53;
                    ++v49;
                  }
                  while (v52 < v64);
                  dispatch_get_specific(*v13);
                  v54 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)v71 = 136446210;
                    v72 = buf;
                    _os_log_impl(&dword_216EC7000, v54, OS_LOG_TYPE_ERROR, "%{public}s", v71, 0xCu);
                  }
                  if (v46)
                    v46(3, "%s", (const char *)buf);
                  v48 += v51;
                }
                while (v52 < v64);
              }
              v7 = 0;
              a2 = v62;
              v14 = v59;
              v10 = v60;
              v11 = v61;
              v9 = v63;
              goto LABEL_96;
            }
            if (v16 == 41226)
            {
              v17 = "VGPIO_CONFIG_TAG";
              goto LABEL_51;
            }
          }
          else
          {
            if (v16 == 41118)
            {
              v17 = "RX_CTRL";
              goto LABEL_51;
            }
            if (v16 == 41133)
            {
              v18 = "FELICA_HIGHZ_RX_TAG";
              goto LABEL_40;
            }
          }
        }
        else if (v16 > 41111)
        {
          if (v16 == 41112)
          {
            v17 = "LMA_RSSI";
            goto LABEL_51;
          }
          if (v16 == 41114)
          {
            v17 = "GC_RSSI_THRESHOLD_TAG";
            goto LABEL_51;
          }
        }
        else
        {
          if (v16 == 41066)
          {
            v17 = "PHASE_OFFSET_TAG";
            goto LABEL_51;
          }
          if (v16 == 41108)
          {
            v18 = "CEF_FILTERING_CONFIG_TAG";
LABEL_40:
            v19 = v7;
            v20 = v12 + v15;
            dispatch_get_specific(*v13);
            v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v23)
              v23(6, "%s:%i %s(%04X) skipped", "_NFDriverRFSettingsValidate", 459, v18, v16);
            dispatch_get_specific(*v13);
            v24 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "_NFDriverRFSettingsValidate";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 459;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v18;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v16;
              _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s(%04X) skipped", buf, 0x22u);
            }
            v10 = v60;
            goto LABEL_45;
          }
        }
      }
      else
      {
        if (v16 <= 41015)
        {
          switch(v16)
          {
            case 40968:
              v17 = "SPMI_CONFIG_TAG";
              goto LABEL_51;
            case 40969:
            case 40970:
            case 40971:
            case 40972:
            case 40975:
            case 40976:
            case 40978:
              goto LABEL_33;
            case 40973:
              v17 = "RF_REGISTER_SETTINGS/FDT";
              goto LABEL_51;
            case 40974:
              v17 = "PMU_CFG_TAG";
              goto LABEL_51;
            case 40977:
              v18 = "CLOCK_SEL_CFG_SN100v";
              goto LABEL_40;
            case 40979:
              v17 = "PMU_CONFIG_TAG";
              goto LABEL_51;
            default:
              v17 = "CLOCK_SEL_CFG";
              if (v16 != 40963)
                goto LABEL_33;
              goto LABEL_51;
          }
        }
        v18 = "NFCLD_THRESHOLD_TAG";
        if (v16 == 41016)
          goto LABEL_40;
        v10 = v60;
        if (v16 == 41064)
        {
          v17 = "LPCD_CONFIG_TAG";
          goto LABEL_51;
        }
      }
LABEL_33:
      v19 = v7;
      v20 = v12 + v15;
      dispatch_get_specific(*v13);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(6, "%s:%i Unmatched tag 0x%04x", "_NFDriverRFSettingsNameForTag", 408, v16);
      dispatch_get_specific(*v13);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverRFSettingsNameForTag";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 408;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v16;
        _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Unmatched tag 0x%04x", buf, 0x18u);
      }
LABEL_45:
      v11 = v61;
      v9 = v20;
      v7 = v19;
LABEL_96:
      v12 = v9 + 3;
      if (v9 + 3 > v14)
        goto LABEL_97;
    }
  }
  LOBYTE(v7) = 1;
LABEL_97:
  free(v58);
  return v7 & 1;
}

_QWORD *sub_216EE0A24()
{
  _QWORD *v0;
  char *v1;
  char *v2;
  pthread_mutex_t *v3;
  int v4;
  int v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  const char *v9;
  int v10;
  int v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  int v14;
  int v15;
  const void **v16;
  void (*v17)(uint64_t, const char *, ...);
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v0 = malloc_type_calloc(1uLL, 0x18uLL, 0x1080040D2F62047uLL);
  if (v0)
  {
    v1 = (char *)malloc_type_calloc(1uLL, 0xC8uLL, 0x1000040BEF03554uLL);
    if (!v1)
    {
      free(v0);
      return 0;
    }
    v2 = v1;
    *v0 = 0xBADCAFEF00DLL;
    v0[2] = v1;
    *(_QWORD *)v1 = 1;
    v3 = (pthread_mutex_t *)(v1 + 136);
    v4 = pthread_mutex_init((pthread_mutex_t *)(v1 + 136), 0);
    if (v4)
    {
      v5 = v4;
      free(v2);
      free(v0);
      v6 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Mutex init failed : %d", "NFCallbackMutexCreate", 65, v5);
      dispatch_get_specific(*v6);
      v8 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446722;
      v20 = "NFCallbackMutexCreate";
      v21 = 1024;
      v22 = 65;
      v23 = 1024;
      v24 = v5;
      v9 = "%{public}s:%i Mutex init failed : %d";
      goto LABEL_19;
    }
    v10 = pthread_mutex_init((pthread_mutex_t *)(v2 + 8), 0);
    if (v10)
    {
      v11 = v10;
      pthread_mutex_destroy(v3);
      free(v2);
      free(v0);
      v12 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v13)
        v13(3, "%s:%i Mutex init failed : %d", "NFCallbackMutexCreate", 73, v11);
      dispatch_get_specific(*v12);
      v8 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446722;
      v20 = "NFCallbackMutexCreate";
      v21 = 1024;
      v22 = 73;
      v23 = 1024;
      v24 = v11;
      v9 = "%{public}s:%i Mutex init failed : %d";
      goto LABEL_19;
    }
    v14 = pthread_cond_init((pthread_cond_t *)(v2 + 72), 0);
    if (v14)
    {
      v15 = v14;
      pthread_mutex_destroy((pthread_mutex_t *)(v2 + 8));
      pthread_mutex_destroy(v3);
      free(v2);
      free(v0);
      v16 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v17)
        v17(3, "%s:%i Cond init failed : %d", "NFCallbackMutexCreate", 82, v15);
      dispatch_get_specific(*v16);
      v8 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446722;
      v20 = "NFCallbackMutexCreate";
      v21 = 1024;
      v22 = 82;
      v23 = 1024;
      v24 = v15;
      v9 = "%{public}s:%i Cond init failed : %d";
LABEL_19:
      _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x18u);
      return 0;
    }
  }
  return v0;
}

void sub_216EE0D6C(void **a1)
{
  char *v2;
  uint64_t v3;

  pthread_mutex_lock((pthread_mutex_t *)((char *)a1[2] + 8));
  v2 = (char *)a1[2];
  v3 = *(_QWORD *)v2 - 1;
  *(_QWORD *)v2 = v3;
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 8));
  if (!v3)
  {
    pthread_cond_destroy((pthread_cond_t *)((char *)a1[2] + 72));
    pthread_mutex_destroy((pthread_mutex_t *)((char *)a1[2] + 8));
    pthread_mutex_destroy((pthread_mutex_t *)((char *)a1[2] + 136));
    free(a1[2]);
    free(a1);
  }
}

uint64_t sub_216EE0DE8(_QWORD *a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)(a1[2] + 8));
  *a1 = a2;
  nfc_err = a2;
  pthread_cond_signal((pthread_cond_t *)(a1[2] + 72));
  return pthread_mutex_unlock((pthread_mutex_t *)(a1[2] + 8));
}

uint64_t sub_216EE0E38(uint64_t a1, double a2)
{
  uint64_t v4;
  double v5;

  v4 = *(_QWORD *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 136));
  clock_gettime(_CLOCK_MONOTONIC_RAW, (timespec *)(v4 + 120));
  v5 = (double)*(uint64_t *)(v4 + 128) + (a2 - (double)(uint64_t)floor(a2)) * 1000.0 * 1000.0 * 1000.0;
  *(_QWORD *)(v4 + 120) += vcvtmd_s64_f64(a2);
  *(_QWORD *)(v4 + 128) = (uint64_t)v5;
  return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 16) + 136));
}

uint64_t sub_216EE0ECC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __darwin_time_t v8;
  uint64_t v9;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  int v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  void (*v17)(uint64_t, const char *, ...);
  NSObject *v18;
  timespec v20;
  timespec __tp;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v2 = 0xBADCAFEF00DLL;
  sub_216EE0E38((uint64_t)a1, 60.0);
  pthread_mutex_lock((pthread_mutex_t *)(a1[2] + 8));
  v3 = *a1;
  if (*a1 != 0xBADCAFEF00DLL)
    goto LABEL_34;
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  while (1)
  {
    do
    {
      __tp.tv_sec = 0;
      __tp.tv_nsec = 0;
      v20.tv_sec = 0;
      v20.tv_nsec = 0;
      pthread_mutex_lock((pthread_mutex_t *)(a1[2] + 136));
      clock_gettime(_CLOCK_MONOTONIC_RAW, &__tp);
      v5 = a1[2];
      v7 = *(_QWORD *)(v5 + 120);
      v6 = *(_QWORD *)(v5 + 128);
      pthread_mutex_unlock((pthread_mutex_t *)(v5 + 136));
      v8 = v7 - __tp.tv_sec;
      v9 = v6 - __tp.tv_nsec;
      v20.tv_sec = v7 - __tp.tv_sec;
      v20.tv_nsec = v6 - __tp.tv_nsec;
      if (v6 - __tp.tv_nsec < 0)
      {
        --v8;
        v9 += 1000000000;
        v20.tv_sec = v8;
        v20.tv_nsec = v9;
        if ((v8 & 0x8000000000000000) == 0)
        {
LABEL_7:
          if (v8 | v9)
            goto LABEL_21;
        }
      }
      else if ((v8 & 0x8000000000000000) == 0)
      {
        goto LABEL_7;
      }
      dispatch_get_specific(*v4);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i TIMEOUT!", "NFCallbackMutexWait", 169);
      dispatch_get_specific(*v4);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v23 = "NFCallbackMutexWait";
        v24 = 1024;
        v25 = 169;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i TIMEOUT!", buf, 0x12u);
      }
      if ((byte_254E56010 & 1) == 0)
      {
        MEMORY[0x219A04870]();
        byte_254E56010 = 1;
      }
      if ((NFIsRestoreOS() & 1) != 0)
        goto LABEL_33;
      NFSimulateCrash();
      if (!byte_253E47179)
        exit(1);
      dispatch_get_specific(*v4);
      v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12)
        v12(4, "%s:%i Extending timeout 10 seconds. User has requested us to avoid crashing.", "NFCallbackMutexWait", 184);
      dispatch_get_specific(*v4);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v23 = "NFCallbackMutexWait";
        v24 = 1024;
        v25 = 184;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Extending timeout 10 seconds. User has requested us to avoid crashing.", buf, 0x12u);
      }
      v20 = (timespec)xmmword_216F08080;
LABEL_21:
      v14 = pthread_cond_timedwait_relative_np((pthread_cond_t *)(a1[2] + 72), (pthread_mutex_t *)(a1[2] + 8), &v20);
    }
    while (v14 == 60);
    if (v14 == 22)
      break;
    if (*a1 != 0xBADCAFEF00DLL)
    {
      v2 = *a1;
      goto LABEL_33;
    }
    dispatch_get_specific(*v4);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(3, "%s:%i semaphore released without signal!", "NFCallbackMutexWait", 210);
    dispatch_get_specific(*v4);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v23 = "NFCallbackMutexWait";
      v24 = 1024;
      v25 = 210;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i semaphore released without signal!", buf, 0x12u);
    }
  }
  dispatch_get_specific(*v4);
  v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v17)
    v17(3, "%s:%i Invalid parameter", "NFCallbackMutexWait", 203);
  dispatch_get_specific(*v4);
  v18 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v23 = "NFCallbackMutexWait";
    v24 = 1024;
    v25 = 203;
    _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid parameter", buf, 0x12u);
  }
LABEL_33:
  v3 = v2;
LABEL_34:
  pthread_mutex_unlock((pthread_mutex_t *)(a1[2] + 8));
  return v3;
}

CFStringRef NFDriverCopySEIDFromFDR()
{
  uint64_t v0;
  const void *v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFString *Value;
  const __CFString *v5;
  CFTypeID TypeID;
  CFStringRef Copy;
  const void **v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  const void **v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  const void **v17;
  void (*v18)(uint64_t, const char *, ...);
  NSObject *v19;
  const char *v20;
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  CFStringRef v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v0 = AMFDRCreateTypeWithOptions();
  if (v0)
  {
    v1 = (const void *)v0;
    v2 = (const __CFDictionary *)AMFDRSealingMapCopyManifestProperties();
    if (v2)
    {
      v3 = v2;
      Value = (const __CFString *)CFDictionaryGetValue(v2, CFSTR("seid"));
      if (Value)
      {
        v5 = Value;
        TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v5))
        {
          Copy = CFStringCreateCopy(0, v5);
          v8 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (Logger)
            Logger(6, "%s:%i SEID in manifest is %@", "NFDriverCopySEIDFromFDR", 516, Copy);
          dispatch_get_specific(*v8);
          v10 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446722;
            v25 = "NFDriverCopySEIDFromFDR";
            v26 = 1024;
            v27 = 516;
            v28 = 2112;
            v29 = Copy;
            _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SEID in manifest is %@", buf, 0x1Cu);
          }
          goto LABEL_29;
        }
        v21 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v22)
          v22(3, "%s:%i Unexpected type", "NFDriverCopySEIDFromFDR", 510);
        dispatch_get_specific(*v21);
        v19 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
LABEL_28:
          Copy = 0;
LABEL_29:
          CFRelease(v1);
          CFRelease(v3);
          return Copy;
        }
        *(_DWORD *)buf = 136446466;
        v25 = "NFDriverCopySEIDFromFDR";
        v26 = 1024;
        v27 = 510;
        v20 = "%{public}s:%i Unexpected type";
      }
      else
      {
        v17 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v18)
          v18(3, "%s:%i No SEID in manifest", "NFDriverCopySEIDFromFDR", 505);
        dispatch_get_specific(*v17);
        v19 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_28;
        *(_DWORD *)buf = 136446466;
        v25 = "NFDriverCopySEIDFromFDR";
        v26 = 1024;
        v27 = 505;
        v20 = "%{public}s:%i No SEID in manifest";
      }
      _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, v20, buf, 0x12u);
      goto LABEL_28;
    }
    v14 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(3, "%s:%i No sealing manifest", "NFDriverCopySEIDFromFDR", 498);
    dispatch_get_specific(*v14);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v25 = "NFDriverCopySEIDFromFDR";
      v26 = 1024;
      v27 = 498;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i No sealing manifest", buf, 0x12u);
    }
    CFRelease(v1);
  }
  else
  {
    v11 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12)
      v12(3, "%s:%i amfdr is NULL", "NFDriverCopySEIDFromFDR", 492);
    dispatch_get_specific(*v11);
    v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v25 = "NFDriverCopySEIDFromFDR";
      v26 = 1024;
      v27 = 492;
      _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i amfdr is NULL", buf, 0x12u);
    }
  }
  return 0;
}

uint64_t sub_216EE16CC(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  mach_port_t v9;
  const __CFDictionary *v10;
  io_service_t MatchingService;
  io_object_t v12;
  const __CFData *CFProperty;
  const __CFData *v14;
  CFTypeID v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  const char *v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  uint64_t *v23;
  BOOL v24;
  uint64_t *v25;
  BOOL v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  void (*v31)(uint64_t, const char *, ...);
  NSObject *v32;
  void (*v33)(uint64_t, const char *, ...);
  NSObject *v34;
  void (*v35)(uint64_t, const char *, ...);
  NSObject *v36;
  BOOL v37;
  unsigned int v38;
  void (*v39)(uint64_t, const char *, ...);
  NSObject *v40;
  void (*v41)(uint64_t, const char *, ...);
  void (*v42)(uint64_t, const char *, ...);
  NSObject *v43;
  os_log_type_t v44;
  void (*v45)(uint64_t, const char *, ...);
  NSObject *v46;
  const UInt8 *BytePtr;
  const UInt8 *v48;
  unint64_t v49;
  unsigned int *v50;
  int v51;
  void (*v52)(uint64_t, const char *, ...);
  NSObject *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, ...);
  const char *v58;
  NSObject *v59;
  const char *v60;
  const char *v61;
  NSObject *v62;
  os_log_type_t v63;
  void (*v64)(uint64_t, const char *, ...);
  NSObject *v65;
  void (*v66)(uint64_t, const char *, ...);
  const char *v67;
  NSObject *v68;
  const char *v69;
  BOOL v70;
  void (*v71)(uint64_t, const char *, ...);
  uint64_t v72;
  const UInt8 *v73;
  int v74;
  void (*v75)(uint64_t, const char *, ...);
  NSObject *v76;
  void (*v77)(uint64_t, const char *, ...);
  void (*v78)(uint64_t, const char *, ...);
  NSObject *v79;
  _BYTE buf[30];
  __int16 v81;
  int v82;
  uint8_t v83[4];
  const char *v84;
  __int16 v85;
  int v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 56))
    return 10;
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Restoring RF", "NFDriverRFSettingsSetupSigned", 639);
  dispatch_get_specific(*v6);
  v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 639;
    _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Restoring RF", buf, 0x12u);
  }
  memset(buf, 0, 28);
  if ((NFDriverGetControllerInfo(a1, (uint64_t)buf) & 1) == 0)
  {
    dispatch_get_specific(*v6);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19)
      v19(3, "%s:%i Failed to get controller info", "_NFDriverRFSettingsHWSupportsSignedSyscfgCal", 161);
    dispatch_get_specific(*v6);
    v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v83 = 136446466;
      v84 = "_NFDriverRFSettingsHWSupportsSignedSyscfgCal";
      v85 = 1024;
      v86 = 161;
      _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get controller info", v83, 0x12u);
    }
LABEL_22:
    memset(buf, 0, 28);
    if ((NFDriverGetControllerInfo(a1, (uint64_t)buf) & 1) != 0)
    {
      if (*(_DWORD *)&buf[4] >= 7u)
      {
        dispatch_get_specific(*v6);
        v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v21)
          v21(6, "%s:%i Restoring RF using FDR Cal data", "NFDriverRFSettingsSetupSigned", 659);
        dispatch_get_specific(*v6);
        v22 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 659;
          _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Restoring RF using FDR Cal data", buf, 0x12u);
        }
        v23 = sub_216EE2998(a1, CFSTR("ShMC"), a3);
        if (v23)
        {
          v24 = sub_216EE2784(a1, (uint64_t)v23);
          NFDataRelease();
          if (!v24)
          {
            dispatch_get_specific(*v6);
            v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v41)
              v41(3, "%s:%i Failed to write RF cal data to NFCC", "NFDriverRFSettingsSetupSigned", 672);
            dispatch_get_specific(*v6);
            v28 = NFSharedLogGetLogger();
            if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              return 1;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 672;
            goto LABEL_62;
          }
          v25 = sub_216EE2998(a1, CFSTR("ShSC"), a3);
          if (v25)
          {
            v26 = sub_216EE2784(a1, (uint64_t)v25);
            NFDataRelease();
            if (!v26)
            {
              dispatch_get_specific(*v6);
              v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v27)
                v27(3, "%s:%i Failed to write RF cal data to NFCC", "NFDriverRFSettingsSetupSigned", 687);
              dispatch_get_specific(*v6);
              v28 = NFSharedLogGetLogger();
              if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
                return 1;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 687;
              goto LABEL_62;
            }
            return 0;
          }
          dispatch_get_specific(*v6);
          v64 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v64)
            v64(3, "%s:%i Failed to read RF cal data from FDR.", "NFDriverRFSettingsSetupSigned", 680);
          dispatch_get_specific(*v6);
          v65 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 680;
            _os_log_impl(&dword_216EC7000, v65, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read RF cal data from FDR.", buf, 0x12u);
          }
          v37 = sub_216EE3444() == 0;
          v38 = 11;
        }
        else
        {
          dispatch_get_specific(*v6);
          v35 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v35)
            v35(3, "%s:%i Failed to read RF cal data from FDR.", "NFDriverRFSettingsSetupSigned", 665);
          dispatch_get_specific(*v6);
          v36 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 665;
            _os_log_impl(&dword_216EC7000, v36, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read RF cal data from FDR.", buf, 0x12u);
          }
          v37 = sub_216EE3444() == 0;
          v38 = 10;
        }
        if (v37)
          return 0;
        else
          return v38;
      }
    }
    else
    {
      dispatch_get_specific(*v6);
      v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v29)
        v29(3, "%s:%i Failed to get controller info", "_NFDriverRFSettingsHWSupportsSignedFDRCal", 172);
      dispatch_get_specific(*v6);
      v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v83 = 136446466;
        v84 = "_NFDriverRFSettingsHWSupportsSignedFDRCal";
        v85 = 1024;
        v86 = 172;
        _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get controller info", v83, 0x12u);
      }
    }
    dispatch_get_specific(*v6);
    v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v31)
      v31(3, "%s:%i Cal not supported with this HW.", "NFDriverRFSettingsSetupSigned", 692);
    dispatch_get_specific(*v6);
    v32 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 692;
    _os_log_impl(&dword_216EC7000, v32, OS_LOG_TYPE_ERROR, "%{public}s:%i Cal not supported with this HW.", buf, 0x12u);
    return 0;
  }
  if (*(_DWORD *)&buf[4] != 5)
    goto LABEL_22;
  v9 = *MEMORY[0x24BDD8B18];
  v10 = IOServiceMatching("AppleDiagnosticDataAccess");
  MatchingService = IOServiceGetMatchingService(v9, v10);
  if (!MatchingService)
  {
    dispatch_get_specific(*v6);
    v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v33)
      v33(3, "%s:%i Failed to get syscfg service", "_NFDriverRFSettingsReadCalDataFromSyscfg", 211);
    dispatch_get_specific(*v6);
    v34 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 211;
      _os_log_impl(&dword_216EC7000, v34, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get syscfg service", buf, 0x12u);
    }
    goto LABEL_72;
  }
  v12 = MatchingService;
  CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("AppleDiagnosticDataSysCfg"), (CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  if (!CFProperty)
  {
    dispatch_get_specific(*v6);
    v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v39)
      v39(3, "%s:%i Failed to get syscfg data", "_NFDriverRFSettingsReadCalDataFromSyscfg", 220);
    dispatch_get_specific(*v6);
    v40 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 220;
      _os_log_impl(&dword_216EC7000, v40, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get syscfg data", buf, 0x12u);
    }
    goto LABEL_71;
  }
  v14 = CFProperty;
  v15 = CFGetTypeID(CFProperty);
  if (v15 != CFDataGetTypeID())
  {
    dispatch_get_specific(*v6);
    v42 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v42)
      v42(3, "%s:%i Invalid syscfg type", "_NFDriverRFSettingsReadCalDataFromSyscfg", 226);
    dispatch_get_specific(*v6);
    v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 226;
    v18 = "%{public}s:%i Invalid syscfg type";
LABEL_68:
    v43 = v17;
    v44 = OS_LOG_TYPE_ERROR;
    goto LABEL_69;
  }
  if ((unint64_t)CFDataGetLength(v14) <= 0x17)
  {
    dispatch_get_specific(*v6);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(3, "%s:%i Invalid syscfg length", "_NFDriverRFSettingsReadCalDataFromSyscfg", 233);
    dispatch_get_specific(*v6);
    v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 233;
    v18 = "%{public}s:%i Invalid syscfg length";
    goto LABEL_68;
  }
  BytePtr = CFDataGetBytePtr(v14);
  if (*(_DWORD *)BytePtr != 1396926055)
  {
    dispatch_get_specific(*v6);
    v66 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v66)
      v66(3, "%s:%i Invalid syscfg magic", "_NFDriverRFSettingsReadCalDataFromSyscfg", 245);
    dispatch_get_specific(*v6);
    v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 245;
    v18 = "%{public}s:%i Invalid syscfg magic";
    goto LABEL_68;
  }
  v48 = BytePtr;
  if (!*((_DWORD *)BytePtr + 5))
  {
LABEL_88:
    v54 = 0;
    goto LABEL_89;
  }
  v49 = 0;
  v50 = (unsigned int *)(BytePtr + 36);
  while (1)
  {
    v51 = *(v50 - 3);
    if (v51 != 1129206850)
    {
      if (v51 == 1313227628)
      {
        dispatch_get_specific(*v6);
        v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v52)
          v52(3, "%s:%i Invalid syscfg key : NFCl, expecting jumbo", "_NFDriverRFSettingsReadCalDataFromSyscfg", 253);
        dispatch_get_specific(*v6);
        v53 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 253;
          _os_log_impl(&dword_216EC7000, v53, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid syscfg key : NFCl, expecting jumbo", buf, 0x12u);
        }
      }
      goto LABEL_87;
    }
    if (*(v50 - 2) == 1313227628)
      break;
LABEL_87:
    ++v49;
    v50 += 5;
    if (v49 >= *((unsigned int *)v48 + 5))
      goto LABEL_88;
  }
  v72 = *v50;
  v73 = &v48[v72];
  if (*(_DWORD *)&v48[v72] == -272716322)
  {
    dispatch_get_specific(*v6);
    v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v77)
      v77(3, "%s:%i Unintialized NFCl entry!", "_NFDriverRFSettingsReadCalDataFromSyscfg", 266);
    dispatch_get_specific(*v6);
    v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      goto LABEL_70;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 266;
    v18 = "%{public}s:%i Unintialized NFCl entry!";
    goto LABEL_68;
  }
  v74 = *v73 | (v48[(v72 + 1)] << 8);
  if (v74 == 9)
  {
    *((_WORD *)v73 + 3) = bswap32((v73[7] | (v73[6] << 8)) - 6) >> 16;
    v54 = NFDataCreateWithBytes();
LABEL_89:
    CFRelease(v14);
    IOObjectRelease(v12);
    if (!v54)
      goto LABEL_72;
    v55 = (char *)NFDataAsHexString();
    v56 = sub_216EE3978(*(_QWORD *)v54, *(_QWORD *)(v54 + 8));
    dispatch_get_specific(*v6);
    v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v56)
    {
      if (v57)
      {
        if (v55)
          v58 = v55;
        else
          v58 = "INVALID HEX STRING";
        v57(3, "%s:%i Invalid TLV format for calData = %s", "_NFDriverRFSettingsReadCalDataFromSyscfg", 317, v58);
      }
      dispatch_get_specific(*v6);
      v59 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        if (v55)
          v60 = v55;
        else
          v60 = "INVALID HEX STRING";
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 317;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v60;
        v61 = "%{public}s:%i Invalid TLV format for calData = %s";
        v62 = v59;
        v63 = OS_LOG_TYPE_ERROR;
LABEL_121:
        _os_log_impl(&dword_216EC7000, v62, v63, v61, buf, 0x1Cu);
      }
    }
    else
    {
      if (v57)
      {
        v67 = "INVALID HEX STRING";
        if (v55)
          v67 = v55;
        v57(6, "%s:%i calData = %s", "_NFDriverRFSettingsReadCalDataFromSyscfg", 319, v67);
      }
      dispatch_get_specific(*v6);
      v68 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        v69 = "INVALID HEX STRING";
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
        if (v55)
          v69 = v55;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 319;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v69;
        v61 = "%{public}s:%i calData = %s";
        v62 = v68;
        v63 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_121;
      }
    }
    if (v55)
      free(v55);
    v70 = sub_216EE2784(a1, v54);
    NFDataRelease();
    if (!v70)
    {
      dispatch_get_specific(*v6);
      v71 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v71)
        v71(3, "%s:%i Failed to write RF cal data to NFCC", "NFDriverRFSettingsSetupSigned", 654);
      dispatch_get_specific(*v6);
      v28 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        return 1;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 654;
LABEL_62:
      _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write RF cal data to NFCC", buf, 0x12u);
      return 1;
    }
    return 0;
  }
  if (v74 == 8)
  {
    dispatch_get_specific(*v6);
    v75 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v75)
      v75(6, "%s:%i Version 8 lacks signature and isn't supported anymore, returning NULL", "_NFDriverRFSettingsReadCalDataFromSyscfg", 279);
    dispatch_get_specific(*v6);
    v76 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 279;
      v18 = "%{public}s:%i Version 8 lacks signature and isn't supported anymore, returning NULL";
      v43 = v76;
      v44 = OS_LOG_TYPE_DEFAULT;
LABEL_69:
      _os_log_impl(&dword_216EC7000, v43, v44, v18, buf, 0x12u);
    }
  }
  else
  {
    dispatch_get_specific(*v6);
    v78 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v78)
      v78(3, "%s:%i Invalid syscfg version : 0x%x, expecting 0x%x or 0x%x", "_NFDriverRFSettingsReadCalDataFromSyscfg", 286, v74, 8, 9);
    dispatch_get_specific(*v6);
    v79 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromSyscfg";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 286;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v74;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = 8;
      v81 = 1024;
      v82 = 9;
      _os_log_impl(&dword_216EC7000, v79, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid syscfg version : 0x%x, expecting 0x%x or 0x%x", buf, 0x24u);
    }
    NFDataCreateWithBytes();
    NFDataPrintAsHexString();
    NFDataRelease();
  }
LABEL_70:
  CFRelease(v14);
LABEL_71:
  IOObjectRelease(v12);
LABEL_72:
  dispatch_get_specific(*v6);
  v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v45)
    v45(3, "%s:%i Failed to read RF cal data from syscfg, and no data in Applet, bailing with success.", "NFDriverRFSettingsSetupSigned", 646);
  dispatch_get_specific(*v6);
  v46 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverRFSettingsSetupSigned";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 646;
    _os_log_impl(&dword_216EC7000, v46, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read RF cal data from syscfg, and no data in Applet, bailing with success.", buf, 0x12u);
  }
  return 9;
}

BOOL sub_216EE2784(uint64_t a1, uint64_t a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  _BOOL8 v7;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  void **v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (sub_216EE3978(*(_QWORD *)a2, *(_QWORD *)(a2 + 8)))
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to parse TLVs, is the format correct ?", "_NFDriverRFSettingsWriteSignedData", 185);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v17 = "_NFDriverRFSettingsWriteSignedData";
      v18 = 1024;
      v19 = 185;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to parse TLVs, is the format correct ?", buf, 0x12u);
    }
    return 0;
  }
  else
  {
    v15 = (void **)sub_216EE5100(*(_DWORD *)(a2 + 8), *(const void **)a2);
    v8 = sub_216EE4D10(a1, 222, (uint64_t)v15, 0);
    v9 = sub_216EE0ECC(v8);
    v7 = v9 == 0;
    if (v9)
    {
      v10 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11)
        v11(3, "%s:%i Failed to push Cal to NFCC : 0x%4llx", "_NFDriverRFSettingsWriteSignedData", 194, *v8);
      dispatch_get_specific(*v10);
      v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *v8;
        *(_DWORD *)buf = 136446722;
        v17 = "_NFDriverRFSettingsWriteSignedData";
        v18 = 1024;
        v19 = 194;
        v20 = 2048;
        v21 = v13;
        _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to push Cal to NFCC : 0x%4llx", buf, 0x1Cu);
      }
    }
    sub_216EE0D6C((void **)v8);
    sub_216EE5198(&v15);
  }
  return v7;
}

uint64_t *sub_216EE2998(uint64_t a1, const __CFString *a2, const char *a3)
{
  char *UniqueFDRKey;
  char *v6;
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  CFStringRef v10;
  const void *v11;
  const void *v12;
  const __CFString *v13;
  uint64_t v14;
  const __CFString *v15;
  __CFString *Mutable;
  __CFString *v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  const __CFData *v24;
  const void **v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  const __CFString *v28;
  const void **v29;
  uint64_t v30;
  void (*v31)(uint64_t, const char *, ...);
  CFIndex v32;
  NSObject *v33;
  CFIndex v34;
  uint64_t *v35;
  void (*v36)(uint64_t, const char *, ...);
  NSObject *v37;
  uint64_t v38;
  unint64_t v39;
  const void **v40;
  void (*v41)(uint64_t, const char *, ...);
  NSObject *v42;
  uint8_t *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  NSObject *v50;
  const void **v52;
  void (*v53)(uint64_t, const char *, ...);
  NSObject *v54;
  const __CFString *v55;
  uint64_t v56;
  void (*v57)(uint64_t, const char *, ...);
  CFIndex Code;
  NSObject *v59;
  CFIndex v60;
  uint64_t v61;
  CFTypeRef cf;
  uint8_t v63[4];
  uint8_t *v64;
  __int16 v65;
  int v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  uint8_t *v70;
  uint8_t buf[32];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  cf = 0;
  *(_DWORD *)v63 = 0;
  UniqueFDRKey = NFDriverGetUniqueFDRKey(a1, v63);
  if (!UniqueFDRKey)
  {
    v7 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to get FDR key : %d", "_NFDriverCreateInstanceNameForClassData", 532, *(_DWORD *)v63);
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverCreateInstanceNameForClassData";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 532;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = *(_DWORD *)v63;
      _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get FDR key : %d", buf, 0x18u);
    }
    goto LABEL_71;
  }
  v6 = UniqueFDRKey;
  if (CFStringCompare(a2, CFSTR("ShMC"), 0) == kCFCompareEqualTo)
  {
    v10 = CFStringCreateWithCString(0, v6, 0x600u);
    goto LABEL_34;
  }
  if (CFStringCompare(a2, CFSTR("ShSC"), 0))
  {
LABEL_4:
    free(v6);
LABEL_71:
    v52 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v53 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v53)
      v53(3, "%s:%i Failed to get instance name", "_NFDriverRFSettingsReadCalDataFromFDR", 584);
    dispatch_get_specific(*v52);
    v54 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromFDR";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 584;
      _os_log_impl(&dword_216EC7000, v54, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get instance name", buf, 0x12u);
    }
    return 0;
  }
  v11 = (const void *)MGCopyAnswer();
  v12 = (const void *)MGCopyAnswer();
  if (!v12 || !v11)
  {
    v18 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19)
      v19(3, "%s:%i Failed to get MG types", "_NFDriverCreateInstanceNameForClassData", 569);
    dispatch_get_specific(*v18);
    v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverCreateInstanceNameForClassData";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 569;
      _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get MG types", buf, 0x12u);
    }
    if (v11)
      CFRelease(v11);
    if (v12)
      CFRelease(v12);
    goto LABEL_4;
  }
  v13 = (const __CFString *)AMFDRCreateInstanceString();
  v14 = AMFDRCreateInstanceString();
  v15 = (const __CFString *)v14;
  if (v13 && v14)
  {
    Mutable = CFStringCreateMutable(0, 0);
    v17 = Mutable;
    if (Mutable)
    {
      CFStringAppendCString(Mutable, v6, 0x600u);
      CFStringAppend(v17, CFSTR("-"));
      CFStringAppend(v17, v13);
      CFStringAppend(v17, CFSTR("-"));
      CFStringAppend(v17, v15);
    }
    CFRelease(v13);
  }
  else
  {
    v21 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22)
      v22(3, "%s:%i Failed to get CF types", "_NFDriverCreateInstanceNameForClassData", 561);
    dispatch_get_specific(*v21);
    v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverCreateInstanceNameForClassData";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 561;
      _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get CF types", buf, 0x12u);
    }
    if (v13)
      CFRelease(v13);
    v17 = 0;
    v10 = 0;
    if (!v15)
      goto LABEL_33;
  }
  CFRelease(v15);
  v10 = v17;
LABEL_33:
  CFRelease(v11);
  CFRelease(v12);
LABEL_34:
  free(v6);
  if (!v10)
    goto LABEL_71;
  v24 = (const __CFData *)sub_216EE3C5C((uint64_t)a2, (uint64_t)v10, (CFErrorRef *)&cf, (uint64_t)CFSTR("Local"), a3);
  if (!v24)
  {
    v25 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26)
      v26(6, "%s:%i Failed to get FDR data from local store, trying memory", "_NFDriverRFSettingsReadCalDataFromFDR", 591);
    dispatch_get_specific(*v25);
    v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromFDR";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 591;
      _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Failed to get FDR data from local store, trying memory", buf, 0x12u);
    }
    if (cf)
    {
      CFRelease(cf);
      cf = 0;
    }
    v24 = (const __CFData *)sub_216EE3C5C((uint64_t)a2, (uint64_t)v10, (CFErrorRef *)&cf, (uint64_t)CFSTR("Memory"), a3);
    if (!v24)
    {
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v75 = 0u;
      v73 = 0u;
      v74 = 0u;
      v72 = 0u;
      memset(buf, 0, sizeof(buf));
      v55 = CFErrorCopyDescription((CFErrorRef)cf);
      CFStringGetCString(v55, (char *)buf, 255, 0x8000100u);
      dispatch_get_specific(*v25);
      v56 = NFLogGetLogger();
      if (v56)
      {
        v57 = (void (*)(uint64_t, const char *, ...))v56;
        Code = CFErrorGetCode((CFErrorRef)cf);
        v57(3, "%s:%i Failed to get FDR data : %ld - %s", "_NFDriverRFSettingsReadCalDataFromFDR", 602, Code, (const char *)buf);
      }
      dispatch_get_specific(*v25);
      v59 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        v60 = CFErrorGetCode((CFErrorRef)cf);
        *(_DWORD *)v63 = 136446978;
        v64 = (uint8_t *)"_NFDriverRFSettingsReadCalDataFromFDR";
        v65 = 1024;
        v66 = 602;
        v67 = 2048;
        v68 = (const char *)v60;
        v69 = 2080;
        v70 = buf;
        _os_log_impl(&dword_216EC7000, v59, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get FDR data : %ld - %s", v63, 0x26u);
      }
      CFRelease(v10);
      if (v55)
        CFRelease(v55);
      if (cf)
        CFRelease(cf);
      return 0;
    }
  }
  if (cf)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    memset(buf, 0, sizeof(buf));
    v28 = CFErrorCopyDescription((CFErrorRef)cf);
    CFStringGetCString(v28, (char *)buf, 255, 0x8000100u);
    v29 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v30 = NFLogGetLogger();
    if (v30)
    {
      v31 = (void (*)(uint64_t, const char *, ...))v30;
      v32 = CFErrorGetCode((CFErrorRef)cf);
      v31(4, "%s:%i Got FDR data but an error is set : %ld - %s", "_NFDriverRFSettingsReadCalDataFromFDR", 612, v32, (const char *)buf);
    }
    dispatch_get_specific(*v29);
    v33 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = CFErrorGetCode((CFErrorRef)cf);
      *(_DWORD *)v63 = 136446978;
      v64 = (uint8_t *)"_NFDriverRFSettingsReadCalDataFromFDR";
      v65 = 1024;
      v66 = 612;
      v67 = 2048;
      v68 = (const char *)v34;
      v69 = 2080;
      v70 = buf;
      _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i Got FDR data but an error is set : %ld - %s", v63, 0x26u);
    }
    if (v28)
      CFRelease(v28);
    if (cf)
      CFRelease(cf);
  }
  CFDataGetBytePtr(v24);
  CFDataGetLength(v24);
  v35 = (uint64_t *)NFDataCreateWithBytes();
  CFRelease(v24);
  CFRelease(v10);
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v36)
    v36(6, "%s:%i Found FDR data, %ld bytes", "_NFDriverRFSettingsReadCalDataFromFDR", 621, v35[1]);
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v37 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    v38 = v35[1];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "_NFDriverRFSettingsReadCalDataFromFDR";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 621;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v38;
    _os_log_impl(&dword_216EC7000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found FDR data, %ld bytes", buf, 0x1Cu);
  }
  v72 = 0u;
  memset(buf, 0, sizeof(buf));
  v39 = v35[1];
  v61 = *v35;
  v40 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  dispatch_get_specific(*v40);
  v42 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    v43 = (uint8_t *)v35[1];
    *(_DWORD *)v63 = 136315906;
    v64 = (uint8_t *)"_NFDriverRFSettingsReadCalDataFromFDR";
    v65 = 1024;
    v66 = 622;
    v67 = 2082;
    v68 = "FDR: ";
    v69 = 2048;
    v70 = v43;
    _os_log_impl(&dword_216EC7000, v42, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v63, 0x26u);
  }
  if (v41)
    v41(6, "%s:%i %s %lu bytes :", "_NFDriverRFSettingsReadCalDataFromFDR", 622, "FDR: ", v35[1]);
  if (v39)
  {
    v44 = 0;
    do
    {
      v45 = 0;
      v46 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v44)];
      do
      {
        v47 = v45 + 1;
        v48 = v45 + 1 + v44;
        v49 = sprintf(v46, "0x%02X ", *(unsigned __int8 *)(v61 + v44 + v45));
        if (v45 > 6)
          break;
        v46 += v49;
        ++v45;
      }
      while (v48 < v39);
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v50 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v63 = 136446210;
        v64 = buf;
        _os_log_impl(&dword_216EC7000, v50, OS_LOG_TYPE_DEFAULT, "%{public}s", v63, 0xCu);
      }
      if (v41)
        v41(6, "%s", (const char *)buf);
      v44 += v47;
    }
    while (v48 < v39);
  }
  return v35;
}

uint64_t sub_216EE3444()
{
  uint64_t v0;
  const void **v1;
  const void *v2;
  uint64_t v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v0 = AMFDRCreateWithOptions();
  v1 = (const void **)MEMORY[0x24BEDCDB0];
  if (v0)
  {
    v2 = (const void *)v0;
    v3 = AMFDRSealingMapVerifySealing();
    CFRelease(v2);
  }
  else
  {
    v3 = 1;
  }
  dispatch_get_specific(*v1);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Sealing status is %d", "_NFDriverRFSettingsFDRSealed", 347, v3);
  dispatch_get_specific(*v1);
  v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v8 = "_NFDriverRFSettingsFDRSealed";
    v9 = 1024;
    v10 = 347;
    v11 = 1024;
    LODWORD(v12) = v3;
    _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Sealing status is %d", buf, 0x18u);
  }
  return v3;
}

BOOL sub_216EE363C(uint64_t a1, uint64_t a2, void **a3, _WORD *a4)
{
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  size_t v18;
  uint64_t v19;
  void **v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v7 = sub_216EE5100(0x400u, 0);
  v21 = (void **)v7;
  *a3 = 0;
  *a4 = 0;
  v8 = sub_216EE4D10(a1, 223, 0, (uint64_t)v7);
  v9 = sub_216EE0ECC(v8);
  if (v9)
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to get RF settings; status=0x%04llX.", "NFDriverRFSettingsCopySigned", 749, *v8);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *v8;
      *(_DWORD *)buf = 136446722;
      v23 = "NFDriverRFSettingsCopySigned";
      v24 = 1024;
      v25 = 749;
      v26 = 2048;
      v27 = v13;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings; status=0x%04llX.",
        buf,
        0x1Cu);
    }
  }
  else
  {
    *a3 = malloc_type_calloc(1uLL, v7[2], 0x100004077774924uLL);
    v14 = v7[2];
    if (v14 >= 4)
    {
      v15 = 0;
      v16 = 0;
      v17 = 4;
      do
      {
        v18 = *(unsigned __int8 *)(*(_QWORD *)v7 + v16 + 3);
        if (v14 - v16 - 4 < v18)
          break;
        *(_WORD *)((char *)*a3 + v15) = *(_WORD *)(*(_QWORD *)v7 + v16);
        *((_BYTE *)*a3 + v15 + 2) = *(_BYTE *)(*(_QWORD *)v7 + v16 + 2 + 1);
        v19 = v15 + 3;
        memcpy((char *)*a3 + v19, (const void *)(*(_QWORD *)v7 + v17), v18);
        v15 = v19 + v18;
        v16 = v17 + v18;
        v17 += v18 + 4;
        v14 = v7[2];
      }
      while (v17 <= v14);
    }
    *a4 = v14 - 1;
  }
  sub_216EE5198(&v21);
  sub_216EE0D6C((void **)v8);
  return v9 == 0;
}

BOOL NFDriverRFSettingsPushSignedSetting(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = sub_216EE2784(a1, a2);
  if (!v2)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to write RF cal data to NFCC", "NFDriverRFSettingsPushSignedSetting", 763);
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v8 = "NFDriverRFSettingsPushSignedSetting";
      v9 = 1024;
      v10 = 763;
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write RF cal data to NFCC", buf, 0x12u);
    }
  }
  return v2;
}

uint64_t sub_216EE3978(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  const void **v17;
  void (*v18)(uint64_t, const char *, ...);
  NSObject *v19;
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;

  v4 = 0;
  v30 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    if (a2 - v4 <= 1)
    {
      v11 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Invalid length : no room for tag", "_NFDriverRFSettingsTLVParser", 119);
      dispatch_get_specific(*v11);
      v13 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        return -1;
      *(_DWORD *)buf = 136446466;
      v25 = "_NFDriverRFSettingsTLVParser";
      v26 = 1024;
      v27 = 119;
      v14 = "%{public}s:%i Invalid length : no room for tag";
      v15 = v13;
      v16 = 18;
      goto LABEL_18;
    }
    v5 = __rev16(*(unsigned __int16 *)(a1 + v4));
    if (a2 - (v4 + 2) <= 1)
    {
      v17 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18)
        v18(3, "%s:%i Invalid length for tag 0x%x", "_NFDriverRFSettingsTLVParser", 126, v5);
      dispatch_get_specific(*v17);
      v19 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        return -1;
      *(_DWORD *)buf = 136446722;
      v25 = "_NFDriverRFSettingsTLVParser";
      v26 = 1024;
      v27 = 126;
      v28 = 1024;
      v29 = v5;
      v14 = "%{public}s:%i Invalid length for tag 0x%x";
      v15 = v19;
      v16 = 24;
LABEL_18:
      _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
      return -1;
    }
    v6 = v4 + 4;
    v7 = *(unsigned __int8 *)(v4 + a1 + 3) | ((unint64_t)*(unsigned __int8 *)(a1 + v4 + 2) << 8);
    if ((v5 & 0xFFFE) != 0xF000)
    {
      v10 = v7;
      goto LABEL_8;
    }
    v8 = sub_216EE3978(a1 + v6, v7);
    v9 = v8;
    if (v8 < 0)
      break;
    v10 = v7 - v8;
LABEL_8:
    v4 = v10 + v6;
    v9 = a2 - v4;
    if (a2 <= v4)
      return v9;
  }
  v21 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v22)
    v22(3, "%s:%i Failure for tag 0x%x", "_NFDriverRFSettingsTLVParser", 138, v5);
  dispatch_get_specific(*v21);
  v23 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v25 = "_NFDriverRFSettingsTLVParser";
    v26 = 1024;
    v27 = 138;
    v28 = 1024;
    v29 = v5;
    _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i Failure for tag 0x%x", buf, 0x18u);
  }
  return v9;
}

uint64_t sub_216EE3C5C(uint64_t a1, uint64_t a2, CFErrorRef *a3, uint64_t a4, const char *a5)
{
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  const void *v10;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  const char *v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  uint64_t v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  uint64_t v21;
  const void *v22;
  const void **v23;
  void (*v24)(uint64_t, const char *, ...);
  NSObject *v25;
  const void *v26;
  const void **v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  const void **v30;
  void (*v31)(uint64_t, const char *, ...);
  NSObject *v32;
  __CFString *Mutable;
  __CFString *v34;
  CFURLRef v35;
  const void **v36;
  void (*v37)(uint64_t, const char *, ...);
  NSObject *v38;
  const void **v39;
  void (*v40)(uint64_t, const char *, ...);
  NSObject *v41;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    if (a3)
      *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x24BDBD388], 1, 0);
    v11 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i dataClass is NULL", "_NF_AMFDRSealingMapCopyLocalDataForClass", 406);
    dispatch_get_specific(*v11);
    v13 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446466;
    v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
    v45 = 1024;
    v46 = 406;
    v14 = "%{public}s:%i dataClass is NULL";
LABEL_18:
    _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x12u);
    return 0;
  }
  v7 = AMFDRCreateTypeWithOptions();
  if (!v7)
  {
    if (a3)
      *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x24BDBD388], 1, 0);
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(3, "%s:%i amfdr is NULL", "_NF_AMFDRSealingMapCopyLocalDataForClass", 408);
    dispatch_get_specific(*v15);
    v13 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446466;
    v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
    v45 = 1024;
    v46 = 408;
    v14 = "%{public}s:%i amfdr is NULL";
    goto LABEL_18;
  }
  v8 = (const void *)v7;
  if (AMFDRDataApTicketPopulate())
  {
    v9 = AMFDRDataApTicketCopyObjectProperty();
    if (v9)
    {
      v10 = (const void *)v9;
      AMFDRSetOption();
      goto LABEL_27;
    }
    if (a3)
      *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x24BDBD388], 199, 0);
    v39 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v40)
      v40(3, "%s:%i Unable to extract trust object digest from AP Ticket", "_NF_AMFDRSealingMapCopyLocalDataForClass", 419);
    dispatch_get_specific(*v39);
    v41 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
      v45 = 1024;
      v46 = 419;
      _os_log_impl(&dword_216EC7000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i Unable to extract trust object digest from AP Ticket", buf, 0x12u);
    }
    CFRelease(v8);
    return 0;
  }
  if (a3)
    *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x24BDBD388], 1, 0);
  v18 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v19)
    v19(3, "%s:%i Unable to read AP Ticket", "_NF_AMFDRSealingMapCopyLocalDataForClass", 425);
  dispatch_get_specific(*v18);
  v20 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
    v45 = 1024;
    v46 = 425;
    _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Unable to read AP Ticket", buf, 0x12u);
  }
  v10 = 0;
LABEL_27:
  v21 = AMFDRSealingMapCopyInstanceForClass();
  if (!v21)
  {
    if (a3)
      *a3 = CFErrorCreate(0, (CFErrorDomain)*MEMORY[0x24BDBD388], 199, 0);
    v23 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v24)
      v24(3, "%s:%i Could not get Sealed Data Instance", "_NF_AMFDRSealingMapCopyLocalDataForClass", 434);
    dispatch_get_specific(*v23);
    v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
      v45 = 1024;
      v46 = 434;
      _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i Could not get Sealed Data Instance", buf, 0x12u);
    }
    v17 = 0;
    v26 = 0;
    goto LABEL_68;
  }
  v22 = (const void *)v21;
  AMFDRSetOption();
  AMFDRSetOption();
  AMFDRSetOption();
  AMFDRDataCopyTrustObject();
  v27 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v28)
    v28(3, "%s:%i AMFDRDataCopyTrustObject failed", "_NF_AMFDRSealingMapCopyLocalDataForClass", 446);
  dispatch_get_specific(*v27);
  v29 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
    v45 = 1024;
    v46 = 446;
    _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i AMFDRDataCopyTrustObject failed", buf, 0x12u);
  }
  v26 = (const void *)AMFDRDataCopy();
  if (v26)
  {
    AMFDRSetOption();
  }
  else
  {
    v30 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v31)
      v31(3, "%s:%i sealingManifestData DataCopy failed", "_NF_AMFDRSealingMapCopyLocalDataForClass", 455);
    dispatch_get_specific(*v30);
    v32 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
      v45 = 1024;
      v46 = 455;
      _os_log_impl(&dword_216EC7000, v32, OS_LOG_TYPE_ERROR, "%{public}s:%i sealingManifestData DataCopy failed", buf, 0x12u);
    }
  }
  AMFDRSetOption();
  AMFDRSetOption();
  Mutable = CFStringCreateMutable(0, 0);
  if (Mutable)
  {
    v34 = Mutable;
    if (a5 && *a5)
    {
      CFStringAppendCString(Mutable, a5, 0x8000100u);
    }
    else
    {
      if (!NFIsRestoreOS())
      {
        v35 = (CFURLRef)v34;
LABEL_66:
        CFRelease(v35);
        goto LABEL_67;
      }
      CFStringAppend(v34, CFSTR("/mnt1"));
    }
    CFStringAppend(v34, CFSTR("/System/Library/Caches/com.apple.factorydata"));
    v35 = CFURLCreateWithString(0, v34, 0);
    CFRelease(v34);
    if (v35)
    {
      v36 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v37)
        v37(6, "%s:%i Forcing FDR path.", "_NF_AMFDRSealingMapCopyLocalDataForClass", 465);
      dispatch_get_specific(*v36);
      v38 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v44 = "_NF_AMFDRSealingMapCopyLocalDataForClass";
        v45 = 1024;
        v46 = 465;
        _os_log_impl(&dword_216EC7000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Forcing FDR path.", buf, 0x12u);
      }
      AMFDRSetOption();
      goto LABEL_66;
    }
  }
LABEL_67:
  v17 = AMFDRDataCopy();
  CFRelease(v22);
LABEL_68:
  CFRelease(v8);
  if (v10)
    CFRelease(v10);
  if (v26)
    CFRelease(v26);
  return v17;
}

void NFDriverDumpUART(uint64_t a1)
{
  NSObject *v1;
  _QWORD block[5];

  v1 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216EE4564;
  block[3] = &unk_24D65ED38;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_216EE4564(uint64_t a1)
{
  int v1;
  int v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 544))
  {
    v1 = phTmlNfc_IoCtl();
    if (v1)
    {
      v2 = v1;
      v3 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i status=0x%04X", "NFDriverDumpUART_block_invoke", 139, v2);
      dispatch_get_specific(*v3);
      v5 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v7 = "NFDriverDumpUART_block_invoke";
        v8 = 1024;
        v9 = 139;
        v10 = 1024;
        v11 = v2;
        _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
    }
  }
}

void sub_216EE4680()
{
  int v0;
  int v1;
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = phTmlNfc_IoCtl();
  if (v0)
  {
    v1 = v0;
    v2 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "NFDriverQuerySPMIErrors_block_invoke", 150, v1);
    dispatch_get_specific(*v2);
    v4 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v6 = "NFDriverQuerySPMIErrors_block_invoke";
      v7 = 1024;
      v8 = 150;
      v9 = 1024;
      v10 = v1;
      _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
}

BOOL NFDriverNFCCPowerOff(uint64_t a1)
{
  NSObject *v1;
  _BOOL8 v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  __int16 v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = sub_216EE4834;
  v4[3] = &unk_24D65ED80;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_async_and_wait(v1, v4);
  v2 = *((_WORD *)v6 + 12) == 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_216EE4834(uint64_t a1)
{
  int v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  int v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phTmlNfc_IoCtl();
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v2;
  if (v2)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "NFDriverNFCCPowerOff_block_invoke", 160, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      *(_DWORD *)buf = 136446722;
      v8 = "NFDriverNFCCPowerOff_block_invoke";
      v9 = 1024;
      v10 = 160;
      v11 = 1024;
      v12 = v6;
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
}

uint64_t sub_216EE4970(uint64_t a1)
{
  int v1;
  int v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 24) + 544))
    return 0;
  if (*(_DWORD *)a1 == 3)
    return 16;
  v1 = phTmlNfc_IoCtl();
  if (!v1)
    return 0;
  v2 = v1;
  v3 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(3, "%s:%i status=0x%04X", "_NFDriverDebugFailedHW", 178, v2);
  dispatch_get_specific(*v3);
  v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v8 = "_NFDriverDebugFailedHW";
    v9 = 1024;
    v10 = 178;
    v11 = 1024;
    v12 = v2;
    _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
  }
  if (v2 == 11)
    return 16;
  else
    return 0;
}

uint64_t NFDriverIsHostWakeCapable(uint64_t a1)
{
  NSObject *v1;
  uint64_t v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 0x40000000;
  v4[2] = sub_216EE4B40;
  v4[3] = &unk_24D65EDA8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_async_and_wait(v1, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_216EE4B40(uint64_t a1)
{
  uint64_t result;

  result = phTmlNfc_IoCtl();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)result == 0;
  return result;
}

BOOL sub_216EE4B88(uint64_t a1)
{
  int64_t v2;
  dispatch_time_t v3;
  intptr_t v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 727))
    v2 = 666000000000;
  else
    v2 = 20000000000;
  v3 = dispatch_time(0, v2);
  v4 = dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 24) + 520), v3);
  if (v4)
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Error : timeout occured !!!", "_NFDriverAcquireSE", 252);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v10 = "_NFDriverAcquireSE";
      v11 = 1024;
      v12 = 252;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Error : timeout occured !!!", buf, 0x12u);
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_216EC7000, MEMORY[0x24BDACB70], OS_LOG_TYPE_FAULT, "Error : timeout occured !!!", buf, 2u);
    }
  }
  return v4 == 0;
}

_QWORD *sub_216EE4D10(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD block[8];
  int v13;

  v8 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v8[2] + 8));
  v9 = v8[2];
  ++*(_QWORD *)v9;
  pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
  v8[1] = a4;
  v10 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216EE4DC8;
  block[3] = &unk_24D65EDC8;
  v13 = a2;
  block[4] = a1;
  block[5] = a3;
  block[6] = a4;
  block[7] = v8;
  dispatch_async_and_wait(v10, block);
  return v8;
}

void sub_216EE4DC8(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_IoCtl();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverIoCtl_block_invoke", 460, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverIoCtl_block_invoke";
      v9 = 1024;
      v10 = 460;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 56), v3);
    sub_216EE0D6C(*(void ***)(a1 + 56));
  }
}

void sub_216EE4F08(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  void **v10;
  size_t v11;
  void *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v6 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Callback_NFDriverIoCtl", 435, a4);
    dispatch_get_specific(*v6);
    v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v14 = "_Callback_NFDriverIoCtl";
      v15 = 1024;
      v16 = 435;
      v17 = 1024;
      v18 = a4;
      _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  else if (a3)
  {
    v10 = (void **)a2[1];
    if (v10)
    {
      if (*v10 != *(void **)a3)
      {
        free(*v10);
        v11 = *(unsigned int *)(a3 + 8);
        *((_DWORD *)v10 + 2) = v11;
        v12 = malloc_type_calloc(1uLL, v11, 0x94CA1A17uLL);
        *v10 = v12;
        if (v12)
          memcpy(v12, *(const void **)a3, *((unsigned int *)v10 + 2));
      }
    }
  }
  sub_216EE0DE8(a2, a4);
  sub_216EE0D6C(a2);
}

unsigned int *sub_216EE5078(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  size_t v4;
  void *v5;

  v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  v3 = v2;
  if (v2)
  {
    v4 = *(unsigned int *)(a1 + 8);
    v2[2] = v4;
    v5 = malloc_type_calloc(1uLL, v4, 0x100004077774924uLL);
    *(_QWORD *)v3 = v5;
    if (v5)
    {
      memcpy(v5, *(const void **)a1, v3[2]);
    }
    else
    {
      free(v3);
      return 0;
    }
  }
  return v3;
}

unsigned int *sub_216EE5100(unsigned int a1, const void *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  void *v6;

  v4 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  v5 = v4;
  if (v4)
  {
    v4[2] = a1;
    v6 = malloc_type_calloc(1uLL, a1, 0x100004077774924uLL);
    *(_QWORD *)v5 = v6;
    if (v6)
    {
      if (a2)
        memcpy(v6, a2, v5[2]);
    }
    else
    {
      free(v5);
      return 0;
    }
  }
  return v5;
}

void sub_216EE5198(void ***a1)
{
  void **v2;

  if (a1)
  {
    v2 = *a1;
    if (*a1)
    {
      if (*v2)
        free(*v2);
      free(v2);
      *a1 = 0;
    }
  }
}

_QWORD *sub_216EE51D8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[7];

  v4 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  v5 = v4[2];
  ++*(_QWORD *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  v6 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216EE5278;
  block[3] = &unk_24D65EDE8;
  block[4] = a1;
  block[5] = a2;
  block[6] = v4;
  dispatch_async_and_wait(v6, block);
  return v4;
}

void sub_216EE5278(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_SetNfccParams();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetNfccParams_block_invoke", 550, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverSetNfccParams_block_invoke";
      v9 = 1024;
      v10 = 550;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 48), v3);
    sub_216EE0D6C(*(void ***)(a1 + 48));
  }
}

void sub_216EE53B4(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

BOOL NFDriverRunIntegrityDebug(uint64_t a1)
{
  unsigned int *v2;
  const void **v3;
  void (*v4)(uint64_t, const char *, ...);
  NSObject *v5;
  _BOOL8 v6;
  unsigned int *v7;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  unsigned __int8 *v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  void **v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v2 = sub_216EE5100(0x30u, 0);
  v37 = (void **)v2;
  if (!*(_BYTE *)(a1 + 57))
  {
    v7 = v2;
    v8 = sub_216EE4D10(a1, 241, 0, (uint64_t)v2);
    v9 = sub_216EE0ECC(v8);
    v6 = v9 == 0;
    if (v9)
    {
      v10 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Failed to get integrity check", "NFDriverRunIntegrityDebug", 572);
      dispatch_get_specific(*v10);
      v12 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        goto LABEL_17;
      *(_DWORD *)buf = 136446466;
      v39 = "NFDriverRunIntegrityDebug";
      v40 = 1024;
      v41 = 572;
      v13 = "%{public}s:%i Failed to get integrity check";
      v14 = v12;
      v15 = OS_LOG_TYPE_ERROR;
      v16 = 18;
    }
    else
    {
      v17 = *(unsigned __int8 **)v7;
      v18 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19)
        v19(6, "%s:%i Session State=%d,                     HW Version=0x%x,                     ROM=0x%x,                     Model=0x%x,                     FW=%x.%x,                     MW=%x.%x r%llx,                     Chip=%x                     Life cycle=%x,                     Data section count=%d,                     Code section count=%d,                     CRC=0x%x,                     status=0x%x", "NFDriverRunIntegrityDebug", 603, *v17, v17[8], v17[9], v17[10], v17[11], v17[12], v17[13], v17[14], *((_QWORD *)v17 + 2), *((unsigned __int16 *)v17 + 12), *((unsigned __int16 *)v17 + 13), v17[32],
          v17[33],
          *((_DWORD *)v17 + 9),
          *((unsigned __int16 *)v17 + 20));
      dispatch_get_specific(*v18);
      v20 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_17;
      v21 = *v17;
      v22 = v17[8];
      v23 = v17[9];
      v24 = v17[10];
      v25 = v17[11];
      v26 = v17[12];
      v27 = v17[13];
      v28 = v17[14];
      v29 = *((_QWORD *)v17 + 2);
      v30 = *((unsigned __int16 *)v17 + 12);
      v31 = *((unsigned __int16 *)v17 + 13);
      v32 = v17[32];
      v33 = v17[33];
      v34 = *((_DWORD *)v17 + 9);
      v35 = *((unsigned __int16 *)v17 + 20);
      *(_DWORD *)buf = 136450306;
      v39 = "NFDriverRunIntegrityDebug";
      v40 = 1024;
      v41 = 603;
      v42 = 1024;
      v43 = v21;
      v44 = 1024;
      v45 = v22;
      v46 = 1024;
      v47 = v23;
      v48 = 1024;
      v49 = v24;
      v50 = 1024;
      v51 = v25;
      v52 = 1024;
      v53 = v26;
      v54 = 1024;
      v55 = v27;
      v56 = 1024;
      v57 = v28;
      v58 = 2048;
      v59 = v29;
      v60 = 1024;
      v61 = v30;
      v62 = 1024;
      v63 = v31;
      v64 = 1024;
      v65 = v32;
      v66 = 1024;
      v67 = v33;
      v68 = 1024;
      v69 = v34;
      v70 = 1024;
      v71 = v35;
      v13 = "%{public}s:%i Session State=%d,                     HW Version=0x%x,                     ROM=0x%x,          "
            "           Model=0x%x,                     FW=%x.%x,                     MW=%x.%x r%llx,                    "
            " Chip=%x                     Life cycle=%x,                     Data section count=%d,                     C"
            "ode section count=%d,                     CRC=0x%x,                     status=0x%x";
      v14 = v20;
      v15 = OS_LOG_TYPE_DEFAULT;
      v16 = 112;
    }
    _os_log_impl(&dword_216EC7000, v14, v15, v13, buf, v16);
LABEL_17:
    sub_216EE0D6C((void **)v8);
    goto LABEL_18;
  }
  v3 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v4 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v4)
    v4(3, "%s:%i This API is available in DL mode only", "NFDriverRunIntegrityDebug", 565);
  dispatch_get_specific(*v3);
  v5 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v39 = "NFDriverRunIntegrityDebug";
    v40 = 1024;
    v41 = 565;
    _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i This API is available in DL mode only", buf, 0x12u);
  }
  v6 = 0;
LABEL_18:
  sub_216EE5198(&v37);
  return v6;
}

uint64_t sub_216EE57A4(uint64_t a1, uint64_t a2, int a3, char a4)
{
  _QWORD *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const void **v14;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  _QWORD block[7];
  char v25;
  _BYTE buf[32];
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  if (v8)
  {
    v9 = v8;
    *v8 = a2;
    *((_DWORD *)v8 + 2) = a3;
    v10 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v10[2] + 8));
    v11 = v10[2];
    ++*(_QWORD *)v11;
    pthread_mutex_unlock((pthread_mutex_t *)(v11 + 8));
    v12 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    v13 = MEMORY[0x24BDAC760];
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = sub_216EE5A7C;
    block[3] = &unk_24D65EE08;
    v25 = a4;
    block[4] = a1;
    block[5] = v9;
    block[6] = v10;
    dispatch_async_and_wait(v12, block);
    if (sub_216EE0ECC(v10))
    {
      v14 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i status=0x%04llX", "_NFDriverSetRFSettings", 1066, *v10);
      dispatch_get_specific(*v14);
      v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = *v10;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverSetRFSettings";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1066;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v17;
        _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      if (*v10 == 137)
        v18 = 13;
      else
        v18 = 1;
      v19 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
      *(_QWORD *)buf = v13;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = sub_216EE4564;
      *(_QWORD *)&buf[24] = &unk_24D65ED38;
      v27 = a1;
      dispatch_async(v19, buf);
    }
    else
    {
      v18 = 0;
    }
    sub_216EE0D6C((void **)v10);
    free(v9);
  }
  else
  {
    v20 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21)
      v21(3, "%s:%i Allocation failure", "_NFDriverSetRFSettings", 1041);
    dispatch_get_specific(*v20);
    v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverSetRFSettings";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1041;
      _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 3;
  }
  return v18;
}

void sub_216EE5A7C(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_SetRfSettings();
  if (v2)
    v3 = v2 == 13;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = v2;
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to set RF settings : status=0x%04X", "_NFDriverSetRFSettings_block_invoke", 1059, v4);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v9 = "_NFDriverSetRFSettings_block_invoke";
      v10 = 1024;
      v11 = 1059;
      v12 = 1024;
      v13 = v4;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set RF settings : status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 48), v4);
    sub_216EE0D6C(*(void ***)(a1 + 48));
  }
}

void sub_216EE5BC0(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

__CFDictionary *NFDriverCopyAndClearAssertion(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t *v4;
  uint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  __CFDictionary *Mutable;
  CFNumberRef v14;
  CFNumberRef v15;
  CFIndex v16;
  const UInt8 *v17;
  CFDataRef v18;
  CFDataRef v19;
  uint64_t *v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  uint64_t v23;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int *)malloc_type_calloc(1uLL, 0xC0uLL, 0x10100405E15A40BuLL);
  if (v2)
  {
    v3 = v2;
    v4 = sub_216EE5F90(a1, 1, (uint64_t)v2);
    v5 = sub_216EE0ECC(v4);
    v6 = (const void **)MEMORY[0x24BEDCDB0];
    if (v5)
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i status=0x%04llX", "NFDriverCopyAndClearAssertion", 1402, *v4);
      dispatch_get_specific(*v6);
      v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = *v4;
        *(_DWORD *)buf = 136446722;
        v26 = "NFDriverCopyAndClearAssertion";
        v27 = 1024;
        v28 = 1402;
        v29 = 2048;
        v30 = v9;
        _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
    }
    else
    {
      sub_216EE6038((int *)v3);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 724))
      {
        sub_216EE6D24(a1);
        postAnalyticsHardwareExceptionEvent();
      }
    }
    sub_216EE0D6C((void **)v4);
    Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    if (Mutable)
    {
      v14 = CFNumberCreate(0, kCFNumberSInt32Type, v3);
      if (v14)
      {
        v15 = v14;
        CFDictionaryAddValue(Mutable, CFSTR("PC"), v14);
        CFRelease(v15);
      }
      v16 = v3[46];
      if ((_DWORD)v16)
      {
        v17 = (const UInt8 *)*((_QWORD *)v3 + 22);
        if (v17)
        {
          v18 = CFDataCreate(0, v17, v16);
          if (v18)
          {
            v19 = v18;
            CFDictionaryAddValue(Mutable, CFSTR("Assert"), v18);
            CFRelease(v19);
          }
        }
      }
    }
    free(v3);
    v20 = sub_216EE5F90(a1, 0, 0);
    if (sub_216EE0ECC(v20))
    {
      dispatch_get_specific(*v6);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(3, "%s:%i status=0x%04llX", "NFDriverCopyAndClearAssertion", 1426, *v20);
      dispatch_get_specific(*v6);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v23 = *v20;
        *(_DWORD *)buf = 136446722;
        v26 = "NFDriverCopyAndClearAssertion";
        v27 = 1024;
        v28 = 1426;
        v29 = 2048;
        v30 = v23;
        _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
    }
    sub_216EE0D6C((void **)v20);
  }
  else
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11)
      v11(3, "%s:%i Allocation failed", "NFDriverCopyAndClearAssertion", 1395);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v26 = "NFDriverCopyAndClearAssertion";
      v27 = 1024;
      v28 = 1395;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failed", buf, 0x12u);
    }
    return 0;
  }
  return Mutable;
}

_QWORD *sub_216EE5F90(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD v10[7];
  int v11;

  v6 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v6[2] + 8));
  v7 = v6[2];
  ++*(_QWORD *)v7;
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
  v8 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 0x40000000;
  v10[2] = sub_216F01948;
  v10[3] = &unk_24D65F628;
  v11 = a2;
  v10[4] = a1;
  v10[5] = a3;
  v10[6] = v6;
  dispatch_async_and_wait(v8, v10);
  return v6;
}

void sub_216EE6038(int *a1)
{
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  int v5;
  void (*v6)(uint64_t, const char *, ...);
  NSObject *v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  int v22;
  int v23;
  int v24;
  void (*v25)(uint64_t, const char *, ...);
  NSObject *v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  void (*v33)(uint64_t, const char *, ...);
  NSObject *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  void (*v39)(uint64_t, const char *, ...);
  NSObject *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  void (*v45)(uint64_t, const char *, ...);
  NSObject *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  void (*v51)(uint64_t, const char *, ...);
  NSObject *v52;
  int v53;
  int v54;
  int v55;
  int v56;
  void (*v57)(uint64_t, const char *, ...);
  NSObject *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  void (*v63)(uint64_t, const char *, ...);
  NSObject *v64;
  void (*v65)(uint64_t, const char *, ...);
  NSObject *v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  void (*v74)(uint64_t, const char *, ...);
  NSObject *v75;
  unint64_t v76;
  void (*v77)(uint64_t, const char *, ...);
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  int v85;
  NSObject *v86;
  uint64_t v87;
  uint8_t v88[4];
  uint8_t *v89;
  __int16 v90;
  int v91;
  __int16 v92;
  const char *v93;
  __int16 v94;
  uint64_t v95;
  uint8_t buf[32];
  __int128 v97;
  __int16 v98;
  int v99;
  __int16 v100;
  int v101;
  uint64_t v102;

  v102 = *MEMORY[0x24BDAC8D0];
  v2 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(3, "%s:%i PC: %d", "_NFDriverLogAssert", 1081, *a1);
  dispatch_get_specific(*v2);
  v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1081;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v5;
    _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i PC: %d", buf, 0x18u);
  }
  dispatch_get_specific(*v2);
  v6 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v6)
    v6(3, "%s:%i ---- HARD FAULT ----", "_NFDriverLogAssert", 1082);
  dispatch_get_specific(*v2);
  v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1082;
    _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i ---- HARD FAULT ----", buf, 0x12u);
  }
  dispatch_get_specific(*v2);
  v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8)
    v8(3, "%s:%i R0=0x%04x R1=0x%04x R2=0x%04x R3=0x%04x R12=0x%04x", "_NFDriverLogAssert", 1086, a1[25], a1[26], a1[27], a1[28], a1[29]);
  dispatch_get_specific(*v2);
  v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = a1[25];
    v11 = a1[26];
    v12 = a1[27];
    v13 = a1[28];
    v14 = a1[29];
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1086;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v10;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v11;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v12;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v13;
    WORD5(v97) = 1024;
    HIDWORD(v97) = v14;
    _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i R0=0x%04x R1=0x%04x R2=0x%04x R3=0x%04x R12=0x%04x", buf, 0x30u);
  }
  dispatch_get_specific(*v2);
  v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15)
    v15(3, "%s:%i LR=0x%04x PC=0x%04x XPSR=0x%04x", "_NFDriverLogAssert", 1089, a1[30], a1[31], a1[32]);
  dispatch_get_specific(*v2);
  v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = a1[30];
    v18 = a1[31];
    v19 = a1[32];
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1089;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v17;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v18;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v19;
    _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i LR=0x%04x PC=0x%04x XPSR=0x%04x", buf, 0x24u);
  }
  dispatch_get_specific(*v2);
  v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v20)
    v20(3, "%s:%i HFLR=0x%04x PSP=0x%04x MSP=0x%04x", "_NFDriverLogAssert", 1092, a1[33], a1[34], a1[35]);
  dispatch_get_specific(*v2);
  v21 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v22 = a1[33];
    v23 = a1[34];
    v24 = a1[35];
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1092;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v22;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v23;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v24;
    _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i HFLR=0x%04x PSP=0x%04x MSP=0x%04x", buf, 0x24u);
  }
  dispatch_get_specific(*v2);
  v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v25)
    v25(3, "%s:%i ---- WATCHDOG ----", "_NFDriverLogAssert", 1093);
  dispatch_get_specific(*v2);
  v26 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1093;
    _os_log_impl(&dword_216EC7000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i ---- WATCHDOG ----", buf, 0x12u);
  }
  dispatch_get_specific(*v2);
  v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v27)
    v27(3, "%s:%i RF-proc: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1096, a1[1], a1[2], a1[3], a1[4]);
  dispatch_get_specific(*v2);
  v28 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    v29 = a1[1];
    v30 = a1[2];
    v31 = a1[3];
    v32 = a1[4];
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1096;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v29;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v30;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v31;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v32;
    _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i RF-proc: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v33)
    v33(3, "%s:%i SWP-proc: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1099, a1[5], a1[6], a1[7], a1[8]);
  dispatch_get_specific(*v2);
  v34 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v35 = a1[5];
    v36 = a1[6];
    v37 = a1[7];
    v38 = a1[8];
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1099;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v35;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v36;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v37;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v38;
    _os_log_impl(&dword_216EC7000, v34, OS_LOG_TYPE_ERROR, "%{public}s:%i SWP-proc: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v39)
    v39(3, "%s:%i kernel: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1102, a1[9], a1[10], a1[11], a1[12]);
  dispatch_get_specific(*v2);
  v40 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    v41 = a1[9];
    v42 = a1[10];
    v43 = a1[11];
    v44 = a1[12];
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1102;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v41;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v42;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v43;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v44;
    _os_log_impl(&dword_216EC7000, v40, OS_LOG_TYPE_ERROR, "%{public}s:%i kernel: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v45)
    v45(3, "%s:%i host: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1105, a1[13], a1[14], a1[15], a1[16]);
  dispatch_get_specific(*v2);
  v46 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
  {
    v47 = a1[13];
    v48 = a1[14];
    v49 = a1[15];
    v50 = a1[16];
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1105;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v47;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v48;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v49;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v50;
    _os_log_impl(&dword_216EC7000, v46, OS_LOG_TYPE_ERROR, "%{public}s:%i host: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v51)
    v51(3, "%s:%i mailbox: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1108, a1[17], a1[18], a1[19], a1[20]);
  dispatch_get_specific(*v2);
  v52 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
  {
    v53 = a1[17];
    v54 = a1[18];
    v55 = a1[19];
    v56 = a1[20];
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1108;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v53;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v54;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v55;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v56;
    _os_log_impl(&dword_216EC7000, v52, OS_LOG_TYPE_ERROR, "%{public}s:%i mailbox: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v57)
    v57(3, "%s:%i host-LP: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", "_NFDriverLogAssert", 1111, a1[21], a1[22], a1[23], a1[24]);
  dispatch_get_specific(*v2);
  v58 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    v59 = a1[21];
    v60 = a1[22];
    v61 = a1[23];
    v62 = a1[24];
    *(_DWORD *)buf = 136447490;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1111;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v59;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v60;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v61;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v62;
    _os_log_impl(&dword_216EC7000, v58, OS_LOG_TYPE_ERROR, "%{public}s:%i host-LP: pc=0x%04x sp=0x%04x obj=0x%04x state=0x%04x", buf, 0x2Au);
  }
  dispatch_get_specific(*v2);
  v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v63)
    v63(3, "%s:%i ---- TICKS ----", "_NFDriverLogAssert", 1113);
  dispatch_get_specific(*v2);
  v64 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1113;
    _os_log_impl(&dword_216EC7000, v64, OS_LOG_TYPE_ERROR, "%{public}s:%i ---- TICKS ----", buf, 0x12u);
  }
  dispatch_get_specific(*v2);
  v65 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v65)
    v65(3, "%s:%i RF=0x%04x, SWP=0x%04x, Kernel=0x%04x, Host=0x%04x, SMB=0x%04x, LowPwr=0x%04x, sys=0x%04x", "_NFDriverLogAssert", 1114, a1[36], a1[37], a1[38], a1[39], a1[40], a1[41], a1[42]);
  dispatch_get_specific(*v2);
  v66 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
  {
    v67 = a1[36];
    v68 = a1[37];
    v69 = a1[38];
    v70 = a1[39];
    v71 = a1[40];
    v72 = a1[41];
    v73 = a1[42];
    *(_DWORD *)buf = 136448258;
    *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1114;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v67;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v68;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v97) = v69;
    WORD2(v97) = 1024;
    *(_DWORD *)((char *)&v97 + 6) = v70;
    WORD5(v97) = 1024;
    HIDWORD(v97) = v71;
    v98 = 1024;
    v99 = v72;
    v100 = 1024;
    v101 = v73;
    _os_log_impl(&dword_216EC7000, v66, OS_LOG_TYPE_ERROR, "%{public}s:%i RF=0x%04x, SWP=0x%04x, Kernel=0x%04x, Host=0x%04x, SMB=0x%04x, LowPwr=0x%04x, sys=0x%04x", buf, 0x3Cu);
  }
  if (a1[46] && *((_QWORD *)a1 + 22))
  {
    dispatch_get_specific(*v2);
    v74 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v74)
      v74(3, "%s:%i ---- ASSERT ----", "_NFDriverLogAssert", 1117);
    dispatch_get_specific(*v2);
    v75 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverLogAssert";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1117;
      _os_log_impl(&dword_216EC7000, v75, OS_LOG_TYPE_ERROR, "%{public}s:%i ---- ASSERT ----", buf, 0x12u);
    }
    v97 = 0u;
    memset(buf, 0, sizeof(buf));
    v76 = a1[46];
    v87 = *((_QWORD *)a1 + 22);
    dispatch_get_specific(*v2);
    v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    dispatch_get_specific(*v2);
    v78 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
    {
      v79 = a1[46];
      *(_DWORD *)v88 = 136315906;
      v89 = (uint8_t *)"_NFDriverLogAssert";
      v90 = 1024;
      v91 = 1118;
      v92 = 2082;
      v93 = "Assert info";
      v94 = 2048;
      v95 = v79;
      _os_log_impl(&dword_216EC7000, v78, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v88, 0x26u);
    }
    if (v77)
      v77(3, "%s:%i %s %lu bytes :", "_NFDriverLogAssert", 1118, "Assert info", a1[46]);
    if ((_DWORD)v76)
    {
      v80 = 0;
      do
      {
        v81 = 0;
        v82 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v80)];
        do
        {
          v83 = v81 + 1;
          v84 = v81 + 1 + v80;
          v85 = sprintf(v82, "0x%02X ", *(unsigned __int8 *)(v87 + v80 + v81));
          if (v81 > 6)
            break;
          v82 += v85;
          ++v81;
        }
        while (v84 < v76);
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v86 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v88 = 136446210;
          v89 = buf;
          _os_log_impl(&dword_216EC7000, v86, OS_LOG_TYPE_ERROR, "%{public}s", v88, 0xCu);
        }
        if (v77)
          v77(3, "%s", (const char *)buf);
        v80 += v83;
      }
      while (v84 < v76);
    }
  }
}

uint64_t sub_216EE6D24(uint64_t a1)
{
  int ControllerInfo;
  uint64_t result;
  _QWORD v3[3];
  int v4;

  memset(v3, 0, sizeof(v3));
  v4 = 0;
  ControllerInfo = NFDriverGetControllerInfo(a1, (uint64_t)v3);
  result = 0;
  if (ControllerInfo)
  {
    if ((HIDWORD(v3[0]) - 5) > 0xD)
      return 0;
    else
      return dword_216F08370[HIDWORD(v3[0]) - 5];
  }
  return result;
}

uint64_t sub_216EE6D80(uint64_t a1, int a2)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD block[6];
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  __int16 v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v2 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216EE6E18;
  block[3] = &unk_24D65EE30;
  block[4] = &v7;
  block[5] = a1;
  v6 = a2;
  dispatch_async_and_wait(v2, block);
  v3 = *((unsigned __int16 *)v8 + 12);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t sub_216EE6E18(uint64_t a1)
{
  uint64_t result;

  result = phLibNfc_Mgt_GetTagID();
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t NFDriverDisableHeadlessModeMiniNV(uint64_t a1)
{
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i WARNING !!!\nWARNING !!!\nWriting to Mini NV to disable headless. This is not expected outside factory.\nWARNING !!!", "NFDriverDisableHeadlessModeMiniNV", 1627);
  dispatch_get_specific(*v2);
  v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v7 = "NFDriverDisableHeadlessModeMiniNV";
    v8 = 1024;
    v9 = 1627;
    _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i WARNING !!!\nWARNING !!!\nWriting to Mini NV to disable headless. This is not expected outside factory.\nWARNING !!!", buf, 0x12u);
  }
  return sub_216EE6F54(a1, 0);
}

uint64_t sub_216EE6F54(uint64_t a1, int a2)
{
  _BOOL8 v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  int v8;
  int v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  __int16 v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  NSObject *v18;
  void **v20;
  _BYTE v21[4];
  _QWORD v22[3];
  uint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v4 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v22))
    return v4;
  if (HIDWORD(v22[0]) <= 6)
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Device does not support this feature", "_NFDriverConfigMiniNVForHeadless", 1589);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    v4 = 0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v25 = "_NFDriverConfigMiniNVForHeadless";
      v26 = 1024;
      v27 = 1589;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
      return 0;
    }
    return v4;
  }
  if (HIDWORD(v22[0]) == 18)
    return 1;
  v8 = sub_216EE8584(a1, (int *)&v23 + 1);
  if (HIDWORD(v23))
    v9 = a2 ^ 1;
  else
    v9 = v8;
  v10 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if ((a2 ^ 1) != v9)
  {
    if (v11)
      v11(6, "%s:%i Headless mini NV already set", "_NFDriverConfigMiniNVForHeadless", 1619);
    dispatch_get_specific(*v10);
    v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v25 = "_NFDriverConfigMiniNVForHeadless";
      v26 = 1024;
      v27 = 1619;
      _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Headless mini NV already set", buf, 0x12u);
    }
    return 1;
  }
  if (v11)
    v11(6, "%s:%i Writing headless mini NV ", "_NFDriverConfigMiniNVForHeadless", 1605);
  dispatch_get_specific(*v10);
  v12 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v25 = "_NFDriverConfigMiniNVForHeadless";
    v26 = 1024;
    v27 = 1605;
    _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Writing headless mini NV ", buf, 0x12u);
  }
  v13 = sub_216EE6D80(a1, 3);
  v21[0] = HIBYTE(v13);
  v21[1] = v13;
  v21[2] = 1;
  v21[3] = a2;
  v20 = (void **)sub_216EE5100(4u, v21);
  v14 = sub_216EE4D10(a1, 37025, (uint64_t)v20, 0);
  v15 = sub_216EE0ECC(v14);
  v4 = v15 == 0;
  if (v15)
  {
    dispatch_get_specific(*v10);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(3, "%s:%i Failed to write miniNV", "_NFDriverConfigMiniNVForHeadless", 1613);
    dispatch_get_specific(*v10);
    v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v25 = "_NFDriverConfigMiniNVForHeadless";
      v26 = 1024;
      v27 = 1613;
      _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to write miniNV", buf, 0x12u);
    }
  }
  sub_216EE0D6C((void **)v14);
  sub_216EE5198(&v20);
  return v4;
}

uint64_t NFDriverEnableHeadlessModeMiniNV(uint64_t a1)
{
  return sub_216EE6F54(a1, 1);
}

uint64_t NFDriverSetHeadlessMode(uint64_t a1, int a2)
{
  _BOOL8 v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  int v12;
  void (*v13)(uint64_t, const char *, ...);
  const char *v14;
  NSObject *v15;
  const char *v16;
  uint64_t *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  const char *v23;
  NSObject *v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  _QWORD v31[3];
  int v32;
  _BYTE buf[40];
  uint64_t *v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  memset(v31, 0, sizeof(v31));
  v32 = 0;
  v4 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v31))
    return v4;
  if (HIDWORD(v31[0]) <= 6)
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Device does not support this feature", "NFDriverSetHeadlessMode", 1646);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "NFDriverSetHeadlessMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1646;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
    }
    return 1;
  }
  if (HIDWORD(v31[0]) == 18)
    return 1;
  v9 = (const void **)MEMORY[0x24BEDCDB0];
  if (*(_BYTE *)(a1 + 60) || *(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 36))
  {
    if (!sub_216EE7B4C(a1, 0, 0, 0, 0, 0, 0))
    {
      dispatch_get_specific(*v9);
      v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10)
        v10(4, "%s:%i Failed to stop discovery", "NFDriverSetHeadlessMode", 1659);
      dispatch_get_specific(*v9);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverSetHeadlessMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1659;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
      }
    }
    v12 = 1;
    if (a2)
    {
LABEL_19:
      if (!sub_216EE6F54(a1, 1))
        return 0;
    }
  }
  else
  {
    v12 = 0;
    if (a2)
      goto LABEL_19;
  }
  dispatch_get_specific(*v9);
  v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13)
  {
    if (a2)
      v14 = "En";
    else
      v14 = "Dis";
    v13(6, "%s:%i %sabling headless mode", "NFDriverSetHeadlessMode", 1667, v14);
  }
  dispatch_get_specific(*v9);
  v15 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v16 = "En";
    else
      v16 = "Dis";
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "NFDriverSetHeadlessMode";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1667;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v16;
    _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %sabling headless mode", buf, 0x1Cu);
  }
  v17 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v17[2] + 8));
  v18 = v17[2];
  ++*(_QWORD *)v18;
  pthread_mutex_unlock((pthread_mutex_t *)(v18 + 8));
  v19 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v20 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216F01AB4;
  *(_QWORD *)&buf[24] = &unk_24D65F648;
  v35 = a2;
  *(_QWORD *)&buf[32] = a1;
  v34 = v17;
  dispatch_async_and_wait(v19, buf);
  v21 = sub_216EE0ECC(v17);
  v4 = v21 == 0;
  if (v21)
  {
    dispatch_get_specific(*v9);
    v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22)
    {
      if (a2)
        v23 = "en";
      else
        v23 = "dis";
      v22(4, "%s:%i failed to %sable headless mode: 0x%04llX", "NFDriverSetHeadlessMode", 1671, v23, *v17);
    }
    dispatch_get_specific(*v9);
    v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      if (a2)
        v25 = "en";
      else
        v25 = "dis";
      v26 = *v17;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "NFDriverSetHeadlessMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1671;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v25;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v26;
      _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to %sable headless mode: 0x%04llX", buf, 0x26u);
    }
    v27 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)buf = v20;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_216EE4564;
    *(_QWORD *)&buf[24] = &unk_24D65ED38;
    *(_QWORD *)&buf[32] = a1;
    dispatch_async(v27, buf);
  }
  sub_216EE0D6C((void **)v17);
  if (v12)
  {
    v28 = *(_BYTE *)(a1 + 62) ? 1 : 2;
    if (!sub_216EE7B4C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v28))
    {
      dispatch_get_specific(*v9);
      v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v29)
        v29(3, "%s:%i Failed to update discovery", "NFDriverSetHeadlessMode", 1679);
      dispatch_get_specific(*v9);
      v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverSetHeadlessMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1679;
        _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to update discovery", buf, 0x12u);
      }
      return 0;
    }
  }
  return v4;
}

uint64_t NFDriverGetControllerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  unsigned __int8 *v8;
  void **v9;
  char *v10;
  NSObject *v11;
  uint64_t v12;
  const void **v13;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v15;
  void *v16;
  NSObject *v17;
  int v18;
  int v19;
  _BYTE block[32];
  uint64_t v21;
  unsigned __int8 *v22;
  void **v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 20) = 83952394;
  *(_DWORD *)(a2 + 24) = 0;
  if (*(_BYTE *)(a1 + 57))
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(_DWORD *)(v4 + 588);
    *(_DWORD *)a2 = v5;
    v6 = *(unsigned __int8 *)(v4 + 592);
    *(_BYTE *)(a2 + 24) = v6;
    *(_DWORD *)(a2 + 4) = sub_216EE90A8(v5, v6);
    *(_DWORD *)(a2 + 8) = *(unsigned __int8 *)(v4 + 625);
    *(_QWORD *)(a2 + 12) = *(_QWORD *)(v4 + 580);
    *(_BYTE *)(a1 + 63) = (*(_BYTE *)(v4 + 648) & 8) != 0;
    *(_BYTE *)(a1 + 64) = (*(_BYTE *)(v4 + 648) & 0x20) != 0;
    return 1;
  }
  result = (uint64_t)malloc_type_calloc(1uLL, 0x18uLL, 0x1000040C460F39EuLL);
  if (result)
  {
    v8 = (unsigned __int8 *)result;
    v9 = (void **)sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)((char *)v9[2] + 8));
    v10 = (char *)v9[2];
    ++*(_QWORD *)v10;
    pthread_mutex_unlock((pthread_mutex_t *)(v10 + 8));
    v11 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    v12 = MEMORY[0x24BDAC760];
    *(_QWORD *)block = MEMORY[0x24BDAC760];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_216F04B18;
    *(_QWORD *)&block[24] = &unk_24D65F710;
    v21 = a1;
    v22 = v8;
    v23 = v9;
    dispatch_async_and_wait(v11, block);
    if (!sub_216EE0ECC((uint64_t *)v9))
    {
      v18 = *v8;
      *(_DWORD *)a2 = v18;
      v19 = v8[2];
      *(_BYTE *)(a2 + 24) = v19;
      *(_DWORD *)(a2 + 4) = sub_216EE90A8(v18, v19);
      *(_DWORD *)(a2 + 8) = v8[1];
      *(_DWORD *)(a2 + 12) = __rev16(*(unsigned __int16 *)(v8 + 3));
      *(_DWORD *)(a2 + 16) = *((_QWORD *)v8 + 1);
      *(_WORD *)(a1 + 63) = 0;
      sub_216EE0D6C(v9);
      free(v8);
      return 1;
    }
    v13 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04llX", "NFDriverGetControllerInfo", 4865, *v9);
    dispatch_get_specific(*v13);
    v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = *v9;
      *(_DWORD *)block = 136446722;
      *(_QWORD *)&block[4] = "NFDriverGetControllerInfo";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 4865;
      *(_WORD *)&block[18] = 2048;
      *(_QWORD *)&block[20] = v16;
      _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", block, 0x1Cu);
    }
    sub_216EE0D6C(v9);
    v17 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)block = v12;
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_216EE4564;
    *(_QWORD *)&block[24] = &unk_24D65ED38;
    v21 = a1;
    dispatch_async(v17, block);
    sub_216EE4970(a1);
    free(v8);
    return 0;
  }
  return result;
}

BOOL sub_216EE7B4C(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, int a6, int a7)
{
  const void **v14;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v16;
  uint64_t *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  uint64_t v24;
  BOOL v25;
  NSObject *v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  __int16 v30;
  _BYTE buf[32];
  __int128 v32;
  unint64_t v33;
  int v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v14 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i polling=%d emulation=%d field=%d express=%d resume=%d reader config=%d", "_Async_NFDriverConfigureDiscovery", 939, a2, a3, a4, a6, a5, a7);
  dispatch_get_specific(*v14);
  v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136448002;
    *(_QWORD *)&buf[4] = "_Async_NFDriverConfigureDiscovery";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 939;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = a3;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v32) = a4;
    WORD2(v32) = 1024;
    *(_DWORD *)((char *)&v32 + 6) = a6;
    WORD5(v32) = 1024;
    HIDWORD(v32) = a5;
    LOWORD(v33) = 1024;
    *(_DWORD *)((char *)&v33 + 2) = a7;
    _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i polling=%d emulation=%d field=%d express=%d resume=%d reader config=%d", buf, 0x36u);
  }
  v17 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v17[2] + 8));
  v18 = v17[2];
  ++*(_QWORD *)v18;
  pthread_mutex_unlock((pthread_mutex_t *)(v18 + 8));
  v19 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v20 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216F02ED8;
  *(_QWORD *)&buf[24] = &unk_24D65F690;
  *(_QWORD *)&v32 = a1;
  *((_QWORD *)&v32 + 1) = v17;
  v33 = __PAIR64__(a3, a2);
  v35 = a4;
  v36 = a5;
  v37 = a6;
  v34 = a7;
  dispatch_async_and_wait(v19, buf);
  v21 = sub_216EE0ECC(v17);
  if (v21)
  {
    dispatch_get_specific(*v14);
    v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22)
      v22(3, "%s:%i status=0x%04llX", "_NFDriverConfigureDiscovery", 3979, *v17);
    dispatch_get_specific(*v14);
    v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = *v17;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverConfigureDiscovery";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3979;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v24;
      _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_216EE0D6C((void **)v17);
    v30 = 0;
    v25 = sub_216EE9DA0(a1, 0, 0, 0, &v30, 0);
    v26 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)buf = v20;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_216EE4564;
    *(_QWORD *)&buf[24] = &unk_24D65ED38;
    *(_QWORD *)&v32 = a1;
    dispatch_async(v26, buf);
    if (v25)
    {
      if (v30 == 44 || v30 == 34)
        NFDriverSimulateCrash(a1, 57005);
    }
    else
    {
      dispatch_get_specific(*v14);
      v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27)
        v27(5, "%s:%i Get stack breadcrumb failed", "_NFDriverConfigureDiscovery", 3986);
      dispatch_get_specific(*v14);
      v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_NFDriverConfigureDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3986;
        _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Get stack breadcrumb failed", buf, 0x12u);
      }
    }
  }
  else
  {
    sub_216EE0D6C((void **)v17);
  }
  return v21 == 0;
}

uint64_t NFDriverGetHeadlessModeFlags(uint64_t a1, int *a2)
{
  int ControllerInfo;
  uint64_t result;
  const void **v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  _BOOL4 v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t *v13;
  const void **v14;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v16;
  int v17;
  int v18;
  unint64_t v19;
  char *v20;
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  int v24;
  unsigned int v25;
  const void **v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  const void **v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  NSObject *v42;
  int *v43;
  uint64_t *v44;
  unsigned int v45;
  _QWORD v46[3];
  int v47;
  void **v48;
  void **v49;
  __int16 v50;
  char v51;
  uint8_t v52[4];
  uint8_t *v53;
  __int16 v54;
  int v55;
  __int16 v56;
  const char *v57;
  __int16 v58;
  uint64_t v59;
  uint8_t buf[32];
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  memset(v46, 0, sizeof(v46));
  v47 = 0;
  ControllerInfo = NFDriverGetControllerInfo(a1, (uint64_t)v46);
  result = 0;
  if (!ControllerInfo)
    return result;
  if (HIDWORD(v46[0]) > 6)
  {
    if (HIDWORD(v46[0]) == 18)
      return 0;
    v10 = sub_216EE8584(a1, a2);
    v51 = -114;
    v50 = -24575;
    v11 = sub_216EE5100(3u, &v50);
    v49 = (void **)v11;
    v12 = sub_216EE5100(0x10u, 0);
    v48 = (void **)v12;
    v13 = sub_216EE4D10(a1, 37026, (uint64_t)v11, (uint64_t)v12);
    if (sub_216EE0ECC(v13))
    {
      v14 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Failed to read headless", "_NFDriverReadHeadless", 1557);
      dispatch_get_specific(*v14);
      v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_NFDriverReadHeadless";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1557;
        _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read headless", buf, 0x12u);
      }
      if (a2)
      {
        v17 = 0;
        v18 = 1;
LABEL_16:
        *a2 = v18;
        goto LABEL_49;
      }
    }
    else
    {
      if (v12)
      {
        v19 = v12[2];
        v20 = *(char **)v12;
        if (v19 >= 5 && v20)
        {
          v21 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v22)
            v22(6, "%s:%i Headless is 0x%x (length = %d)", "_NFDriverReadHeadless", 1563, *(unsigned __int8 *)(*(_QWORD *)v12 + 4), v12[2]);
          dispatch_get_specific(*v21);
          v23 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            v24 = *(unsigned __int8 *)(*(_QWORD *)v12 + 4);
            v25 = v12[2];
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "_NFDriverReadHeadless";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1563;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v24;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v25;
            _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Headless is 0x%x (length = %d)", buf, 0x1Eu);
          }
          v17 = *(_BYTE *)(*(_QWORD *)v12 + 4) & 1;
        }
        else
        {
          v45 = v10;
          v61 = 0u;
          memset(buf, 0, sizeof(buf));
          v29 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v29);
          v31 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            v32 = v12[2];
            *(_DWORD *)v52 = 136315906;
            v53 = (uint8_t *)"_NFDriverReadHeadless";
            v54 = 1024;
            v55 = 1566;
            v56 = 2082;
            v57 = "Unexpected headless reply";
            v58 = 2048;
            v59 = v32;
            _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v52, 0x26u);
          }
          v43 = a2;
          v44 = v13;
          if (v30)
            v30(3, "%s:%i %s %lu bytes :", "_NFDriverReadHeadless", 1566, "Unexpected headless reply", v12[2]);
          if ((_DWORD)v19)
          {
            v33 = 0;
            do
            {
              v34 = v30;
              v35 = 0;
              v36 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v33)];
              v37 = v20;
              v38 = &v20[v33];
              do
              {
                v39 = v35 + 1;
                v40 = v35 + 1 + v33;
                v41 = sprintf(v36, "0x%02X ", v38[v35]);
                if (v35 > 6)
                  break;
                v36 += v41;
                ++v35;
              }
              while (v40 < v19);
              dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
              v42 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v52 = 136446210;
                v53 = buf;
                _os_log_impl(&dword_216EC7000, v42, OS_LOG_TYPE_ERROR, "%{public}s", v52, 0xCu);
              }
              v20 = v37;
              v30 = v34;
              if (v34)
                v34(3, "%s", (const char *)buf);
              v33 += v39;
            }
            while (v40 < v19);
          }
          v17 = 0;
          if (v43)
            *v43 = 8;
          v10 = v45;
          v13 = v44;
        }
        goto LABEL_49;
      }
      v26 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27)
        v27(3, "%s:%i Failed to read headless", "_NFDriverReadHeadless", 1560);
      dispatch_get_specific(*v26);
      v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_NFDriverReadHeadless";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1560;
        _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read headless", buf, 0x12u);
      }
      if (a2)
      {
        v17 = 0;
        v18 = 8;
        goto LABEL_16;
      }
    }
    v17 = 0;
LABEL_49:
    sub_216EE0D6C((void **)v13);
    sub_216EE5198(&v49);
    sub_216EE5198(&v48);
    if (v17)
      return v10 | 2;
    else
      return v10;
  }
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7)
    v7(6, "%s:%i Device does not support this feature", "NFDriverGetHeadlessModeFlags", 1698);
  dispatch_get_specific(*v6);
  v8 = NFSharedLogGetLogger();
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v9)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverGetHeadlessModeFlags";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1698;
    _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not support this feature", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_216EE8584(uint64_t a1, int *a2)
{
  __int16 v4;
  unsigned int *v5;
  uint64_t *v6;
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  NSObject *v24;
  const void **v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  const void **v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  int v31;
  unsigned int v32;
  int *v34;
  uint64_t *v35;
  unsigned __int8 *v36;
  void **v37;
  void **v38;
  _BYTE v39[3];
  uint8_t v40[4];
  uint8_t *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  uint64_t v47;
  uint8_t buf[32];
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216EE6D80(a1, 3);
  v39[0] = 1;
  v39[1] = HIBYTE(v4);
  v39[2] = v4;
  v38 = (void **)sub_216EE5100(3u, v39);
  v5 = sub_216EE5100(0x10u, 0);
  v37 = (void **)v5;
  v6 = sub_216EE4D10(a1, 37026, (uint64_t)v38, (uint64_t)v5);
  if (sub_216EE0ECC(v6))
  {
    v7 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to read miniNV", "_NFDriverReadMiniNVForHeadless", 1527);
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverReadMiniNVForHeadless";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1527;
      _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read miniNV", buf, 0x12u);
    }
    if (a2)
    {
      v10 = 0;
      v11 = 1;
LABEL_8:
      *a2 = v11;
      goto LABEL_44;
    }
    goto LABEL_37;
  }
  if (!v5)
  {
    v25 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26)
      v26(3, "%s:%i Failed to read miniNV", "_NFDriverReadMiniNVForHeadless", 1530);
    dispatch_get_specific(*v25);
    v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverReadMiniNVForHeadless";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1530;
      _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read miniNV", buf, 0x12u);
    }
    if (a2)
    {
      v10 = 0;
      v11 = 3;
      goto LABEL_8;
    }
LABEL_37:
    v10 = 0;
    goto LABEL_44;
  }
  v12 = v5[2];
  v36 = *(unsigned __int8 **)v5;
  if (v12 < 5 || *(_QWORD *)v5 == 0)
  {
    v34 = a2;
    v35 = v6;
    v49 = 0u;
    memset(buf, 0, sizeof(buf));
    v14 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    dispatch_get_specific(*v14);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = v5[2];
      *(_DWORD *)v40 = 136315906;
      v41 = (uint8_t *)"_NFDriverReadMiniNVForHeadless";
      v42 = 1024;
      v43 = 1536;
      v44 = 2082;
      v45 = "Unexpected mini NV reply";
      v46 = 2048;
      v47 = v17;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v40, 0x26u);
    }
    if (v15)
      v15(3, "%s:%i %s %lu bytes :", "_NFDriverReadMiniNVForHeadless", 1536, "Unexpected mini NV reply", v5[2]);
    if ((_DWORD)v12)
    {
      v18 = 0;
      do
      {
        v19 = 0;
        v20 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v18)];
        do
        {
          v21 = v19 + 1;
          v22 = v19 + 1 + v18;
          v23 = sprintf(v20, "0x%02X ", v36[v18 + v19]);
          if (v19 > 6)
            break;
          v20 += v23;
          ++v19;
        }
        while (v22 < v12);
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v24 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v40 = 136446210;
          v41 = buf;
          _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_ERROR, "%{public}s", v40, 0xCu);
        }
        if (v15)
          v15(3, "%s", (const char *)buf);
        v18 += v21;
      }
      while (v22 < v12);
    }
    v10 = 0;
    if (v34)
      *v34 = 8;
    v6 = v35;
  }
  else
  {
    v28 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v29)
      v29(6, "%s:%i Mini NV headless is 0x%x (length = %d)", "_NFDriverReadMiniNVForHeadless", 1533, *(unsigned __int8 *)(*(_QWORD *)v5 + 4), v5[2]);
    dispatch_get_specific(*v28);
    v30 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v31 = *(unsigned __int8 *)(*(_QWORD *)v5 + 4);
      v32 = v5[2];
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "_NFDriverReadMiniNVForHeadless";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1533;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v31;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v32;
      _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Mini NV headless is 0x%x (length = %d)", buf, 0x1Eu);
    }
    v10 = *(_BYTE *)(*(_QWORD *)v5 + 4) & 1;
  }
LABEL_44:
  sub_216EE0D6C((void **)v6);
  sub_216EE5198(&v38);
  sub_216EE5198(&v37);
  return v10;
}

uint64_t sub_216EE8AD8(int a1)
{
  uint64_t result;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  result = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 10:
    case 11:
    case 12:
      result = 1;
      break;
    case 13:
      result = 9;
      break;
    case 14:
      result = 10;
      break;
    case 15:
      result = 11;
      break;
    case 16:
      result = 4;
      break;
    case 17:
    case 18:
    case 19:
      result = 2;
      break;
    case 21:
      result = 3;
      break;
    case 22:
      result = 6;
      break;
    case 23:
      result = 5;
      break;
    case 25:
      v3 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i Found Kovio tag", "_NFDriverRFTechToTagType", 1767);
      dispatch_get_specific(*v3);
      v5 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v7 = "_NFDriverRFTechToTagType";
        v8 = 1024;
        v9 = 1767;
        _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found Kovio tag", buf, 0x12u);
      }
      result = 7;
      break;
    default:
      return result;
  }
  return result;
}

void sub_216EE8C38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 24);
  if (*(_BYTE *)(v2 + 722))
  {
    v4 = *(NSObject **)(v2 + 528);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = sub_216EE4564;
    block[3] = &unk_24D65ED38;
    block[4] = v1;
    dispatch_async(v4, block);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    if (*(_QWORD *)v5)
      (*(void (**)(_QWORD, const char *))v5)(*(_QWORD *)(v5 + 248), "HW Reset");
  }
}

void sub_216EE8CC8(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(a1[6] + 24);
  if (*(_BYTE *)(v2 + 722))
  {
    v3 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v2 + 56);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 304);
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 0xFE | ((*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) & 2) != 0);
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 0xFD | (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) >> 1) & 2;
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 0xFB | (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) >> 1) & 4;
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 0xF7 | (8 * (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) & 1));
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) & 0xEF | (*(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) >> 3) & 0x10;
      *(_WORD *)(*(_QWORD *)(a1[4] + 8) + 26) = *(_WORD *)(*(_QWORD *)(a1[5] + 8) + 48);
      v3(v4, *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 32), *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 40));
    }
  }
  v5 = *(_QWORD *)(a1[5] + 8);
  v6 = *(void **)(v5 + 32);
  if (v6)
  {
    free(v6);
    v5 = *(_QWORD *)(a1[5] + 8);
  }
  *(_QWORD *)(v5 + 32) = 0;
}

uint64_t sub_216EE8E08(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 80);
    if (v2)
      return v2(*(_QWORD *)(v1 + 328));
  }
  return result;
}

uint64_t sub_216EE8E2C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    if (*(_QWORD *)v1)
      return (*(uint64_t (**)(_QWORD, const char *))v1)(*(_QWORD *)(v1 + 248), "UART Error");
  }
  return result;
}

uint64_t sub_216EE8E58(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v1 + 144);
    if (v2)
      return v2(*(_QWORD *)(v1 + 392), *(unsigned __int16 *)(result + 40), *(unsigned int *)(result + 52), *(unsigned __int16 *)(result + 48), *(unsigned __int16 *)(result + 50));
  }
  return result;
}

void sub_216EE8E90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(v1 + 24);
  if (*(_BYTE *)(v2 + 722))
  {
    v4 = *(NSObject **)(v2 + 528);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = sub_216EE4564;
    block[3] = &unk_24D65ED38;
    block[4] = v1;
    dispatch_async(v4, block);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
    if (*(_QWORD *)v5)
      (*(void (**)(_QWORD, const char *))v5)(*(_QWORD *)(v5 + 248), "CRC Error");
  }
}

uint64_t sub_216EE8F20(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, _QWORD))(v1 + 152);
    if (v2)
      return v2(*(_QWORD *)(v1 + 400), *(unsigned int *)(result + 40));
  }
  return result;
}

void sub_216EE8F4C(uint64_t a1)
{
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, _QWORD, _QWORD);
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(3, "%s:%i %s TEMPERATURE WARNING RECEIVED", "_Callback_NFDriverNotifyGeneral_block_invoke_2", 2045, *(const char **)(a1 + 32));
  dispatch_get_specific(*v2);
  v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136446722;
    v9 = "_Callback_NFDriverNotifyGeneral_block_invoke_2";
    v10 = 1024;
    v11 = 2045;
    v12 = 2080;
    v13 = v5;
    _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i %s TEMPERATURE WARNING RECEIVED", buf, 0x1Cu);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24);
  v7 = *(void (**)(_QWORD, _QWORD, _QWORD))(v6 + 216);
  if (v7)
    v7(*(_QWORD *)(v6 + 464), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

uint64_t sub_216EE9078(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD))(v1 + 216);
    if (v2)
      return v2(*(_QWORD *)(v1 + 464), 3, *(unsigned __int8 *)(result + 40));
  }
  return result;
}

uint64_t sub_216EE90A8(int a1, int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (a1 <= 177)
  {
    if (a1 <= 162)
    {
      if (a1 == 66)
        return 5;
      if (a1 == 96)
        return 18;
    }
    else
    {
      switch(a1)
      {
        case 163:
          return 7;
        case 164:
          return 8;
        case 177:
          return 10;
      }
    }
    return 0;
  }
  if (a1 <= 208)
  {
    if (a1 == 178)
    {
      if (a2)
        return 12;
      else
        return 11;
    }
    if (a1 == 186)
      return 20;
    return 0;
  }
  if (a1 == 209)
    return 14;
  if (a1 == 210)
    return 15;
  if (a1 != 211)
    return 0;
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Model_id: %d  0x%02x", "_NFDriverGetSiliconName", 4310, a2, a2);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    v8 = "_NFDriverGetSiliconName";
    v9 = 1024;
    v10 = 4310;
    v11 = 1024;
    v12 = a2;
    v13 = 1024;
    v14 = a2;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Model_id: %d  0x%02x", buf, 0x1Eu);
  }
  return 16;
}

uint64_t sub_216EE9278(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 216);
    if (v2)
      return v2(*(_QWORD *)(v1 + 464), 0, *(unsigned __int8 *)(result + 40));
  }
  return result;
}

uint64_t sub_216EE92A8(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(void (**)(_QWORD, _QWORD))(v1 + 224);
    if (v2)
      v2(*(_QWORD *)(v1 + 472), *(_QWORD *)(a1 + 40));
  }
  return NFDataRelease();
}

void sub_216EE92EC(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, _QWORD, _QWORD);
  void *v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (*(_BYTE *)(v2 + 722))
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 168);
    if (v3)
      v3(*(_QWORD *)(v2 + 416), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
    free(v4);
}

uint64_t sub_216EE9344(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 232);
    if (v2)
      return v2(*(_QWORD *)(v1 + 480));
  }
  return result;
}

uint64_t sub_216EE9368(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 240);
    if (v2)
      return v2(*(_QWORD *)(v1 + 488));
  }
  return result;
}

void sub_216EE938C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  const void **v9;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  NSObject *v14;
  _QWORD *v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  const char *v18;
  void (*v19)(uint64_t, const char *, ...);
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  BOOL v25;
  int v26;
  void (*v28)(uint64_t, const char *, ...);
  int v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  void (*v32)(uint64_t, const char *, ...);
  void (*v33)(uint64_t, const char *, ...);
  void (*v34)(uint64_t, const char *, ...);
  void (*v35)(uint64_t, const char *, ...);
  NSObject *v36;
  uint32_t v37;
  void (*v38)(uint64_t, const char *, ...);
  NSObject *v39;
  void (*v40)(uint64_t, const char *, ...);
  NSObject *v41;
  void (*v42)(uint64_t, const char *, ...);
  NSObject *v43;
  NSObject *v44;
  NSObject *log;
  _QWORD v46[5];
  _QWORD v47[5];
  _QWORD block[6];
  __int16 v49;
  char v50;
  _BYTE buf[24];
  void *v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v9 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(5, "%s:%i num_dev=%d, status=%d", "_Callback_NFDriverNotifyDiscovery", 2532, a4, a5);
  dispatch_get_specific(*v9);
  v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2532;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a4;
    LOWORD(v52) = 1024;
    *(_DWORD *)((char *)&v52 + 2) = a5;
    _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i num_dev=%d, status=%d", buf, 0x1Eu);
  }
  if (a5 <= 119)
  {
    if (a5 <= 53)
    {
      if (a5)
      {
        if (a5 != 7)
          goto LABEL_73;
        dispatch_get_specific(*v9);
        v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v19)
          v19(5, "%s:%i halted", "_Callback_NFDriverNotifyDiscovery", 2642);
        dispatch_get_specific(*v9);
        v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2642;
        v18 = "%{public}s:%i halted";
LABEL_71:
        v36 = v17;
        v37 = 18;
LABEL_72:
        _os_log_impl(&dword_216EC7000, v36, OS_LOG_TYPE_DEFAULT, v18, buf, v37);
        return;
      }
    }
    else if (a5 != 54)
    {
      if (a5 == 56)
      {
        dispatch_get_specific(*v9);
        v33 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v33)
          v33(5, "%s:%i deselected", "_Callback_NFDriverNotifyDiscovery", 2608);
        dispatch_get_specific(*v9);
        v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2608;
        v18 = "%{public}s:%i deselected";
        goto LABEL_71;
      }
      if (a5 != 119)
        goto LABEL_73;
    }
    if (a4)
    {
      v20 = (char *)malloc_type_calloc(a4, 0x60uLL, 0x108004063299CC8uLL);
      if (!v20)
        return;
      v21 = v20;
      if (a3)
      {
        v22 = 0;
        v23 = (uint64_t *)(a3 + 8);
        while (*(v23 - 1) && *v23)
        {
          v24 = *(_DWORD *)(*v23 + 4);
          v25 = v24 > 0x1B;
          v26 = (1 << v24) & 0xEEFFC00;
          if (v25 || v26 == 0)
          {
            dispatch_get_specific(*v9);
            v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v28)
              v28(6, "%s:%i Unhandled tag type 0x%04x", "_Callback_NFDriverNotifyDiscovery", 2582, *(_DWORD *)(*v23 + 4));
            dispatch_get_specific(*v9);
            log = NFSharedLogGetLogger();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              v29 = *(_DWORD *)(*v23 + 4);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2582;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v29;
              _os_log_impl(&dword_216EC7000, log, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Unhandled tag type 0x%04x", buf, 0x18u);
            }
          }
          sub_216EEA004(&v21[v22], *(v23 - 1), *v23);
          v22 += 96;
          v23 += 2;
          if (96 * a4 == v22)
            goto LABEL_89;
        }
      }
      dispatch_get_specific(*v9);
      v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v40)
        v40(3, "%s:%i remote dev list is invalid", "_Callback_NFDriverNotifyDiscovery", 2549);
      dispatch_get_specific(*v9);
      v41 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2549;
        _os_log_impl(&dword_216EC7000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i remote dev list is invalid", buf, 0x12u);
      }
      if (NFIsInternalBuild())
      {
        if (!sub_216EE9DA0(a2, 0, 0, 0, 0, 0))
        {
          dispatch_get_specific(*v9);
          v42 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v42)
            v42(5, "%s:%i Get stack breadcrumb failed", "_Callback_NFDriverNotifyDiscovery", 2554);
          dispatch_get_specific(*v9);
          v43 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2554;
            _os_log_impl(&dword_216EC7000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Get stack breadcrumb failed", buf, 0x12u);
          }
        }
        v44 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 528);
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = sub_216EE4564;
        v52 = &unk_24D65ED38;
        v53 = a2;
        dispatch_async(v44, buf);
      }
      LOBYTE(a4) = 0;
    }
    else
    {
      v21 = 0;
    }
LABEL_89:
    v14 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = sub_216EEA394;
    block[3] = &unk_24D65F018;
    v50 = a4;
    block[4] = a2;
    block[5] = v21;
    v49 = a5;
    v15 = block;
    goto LABEL_90;
  }
  if (a5 > 185)
  {
    switch(a5)
    {
      case 186:
        dispatch_get_specific(*v9);
        v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v34)
          v34(5, "%s:%i RM prohibit timer activated", "_Callback_NFDriverNotifyDiscovery", 2652);
        dispatch_get_specific(*v9);
        v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2652;
        v18 = "%{public}s:%i RM prohibit timer activated";
        break;
      case 187:
        dispatch_get_specific(*v9);
        v35 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v35)
          v35(5, "%s:%i RM SE init required", "_Callback_NFDriverNotifyDiscovery", 2655);
        dispatch_get_specific(*v9);
        v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2655;
        v18 = "%{public}s:%i RM SE init required";
        break;
      case 188:
        dispatch_get_specific(*v9);
        v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v16)
          v16(5, "%s:%i Intf activation ntf error", "_Callback_NFDriverNotifyDiscovery", 2649);
        dispatch_get_specific(*v9);
        v17 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          return;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2649;
        v18 = "%{public}s:%i Intf activation ntf error";
        break;
      default:
        goto LABEL_73;
    }
    goto LABEL_71;
  }
  switch(a5)
  {
    case 120:
      dispatch_get_specific(*v9);
      v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30)
        v30(5, "%s:%i tag removed", "_Callback_NFDriverNotifyDiscovery", 2629);
      dispatch_get_specific(*v9);
      v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2629;
        _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s:%i tag removed", buf, 0x12u);
      }
      v14 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
      v46[0] = MEMORY[0x24BDAC760];
      v46[1] = 0x40000000;
      v46[2] = sub_216EEA42C;
      v46[3] = &unk_24D65F058;
      v46[4] = a2;
      v15 = v46;
      goto LABEL_90;
    case 121:
      dispatch_get_specific(*v9);
      v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32)
        v32(5, "%s:%i deactivated", "_Callback_NFDriverNotifyDiscovery", 2646);
      dispatch_get_specific(*v9);
      v17 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2646;
      v18 = "%{public}s:%i deactivated";
      goto LABEL_71;
    case 146:
      dispatch_get_specific(*v9);
      v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12)
        v12(5, "%s:%i target lost", "_Callback_NFDriverNotifyDiscovery", 2613);
      dispatch_get_specific(*v9);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2613;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s:%i target lost", buf, 0x12u);
      }
      v14 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
      v47[0] = MEMORY[0x24BDAC760];
      v47[1] = 0x40000000;
      v47[2] = sub_216EEA408;
      v47[3] = &unk_24D65F038;
      v47[4] = a2;
      v15 = v47;
LABEL_90:
      dispatch_async(v14, v15);
      return;
  }
LABEL_73:
  dispatch_get_specific(*v9);
  v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v38)
    v38(5, "%s:%i status=0x%04X", "_Callback_NFDriverNotifyDiscovery", 2658, a5);
  dispatch_get_specific(*v9);
  v39 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "_Callback_NFDriverNotifyDiscovery";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2658;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a5;
    v18 = "%{public}s:%i status=0x%04X";
    v36 = v39;
    v37 = 24;
    goto LABEL_72;
  }
}

BOOL sub_216EE9DA0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _WORD *a5, _DWORD *a6)
{
  int DebugInfo;
  _BOOL8 v10;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (a1 && *(_BYTE *)(a1 + 57))
  {
    DebugInfo = phLibNfc_Mgt_GetDebugInfo();
    v10 = DebugInfo == 0;
    if (!DebugInfo)
    {
      if (a6)
        *a6 = 0;
      if (a5)
        *a5 = 0;
      if (a2)
        *a2 = 0;
      v11 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i LastAPI=0x%02X, LastAPIStatus=0x%04X DebugInfo=0x%016llX", "_NFDriverGetStackDebugInfo", 5666, 0, 0, 0);
      dispatch_get_specific(*v11);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136447234;
        v19 = "_NFDriverGetStackDebugInfo";
        v20 = 1024;
        v21 = 5666;
        v22 = 1024;
        v23 = 0;
        v24 = 1024;
        v25 = 0;
        v26 = 2048;
        v27 = 0;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i LastAPI=0x%02X, LastAPIStatus=0x%04X DebugInfo=0x%016llX", buf, 0x28u);
      }
    }
  }
  else
  {
    v14 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(3, "%s:%i Not loaded", "_NFDriverGetStackDebugInfo", 5648);
    dispatch_get_specific(*v14);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v19 = "_NFDriverGetStackDebugInfo";
      v20 = 1024;
      v21 = 5648;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i Not loaded", buf, 0x12u);
    }
    return 0;
  }
  return v10;
}

char *sub_216EEA004(char *result, uint64_t a2, uint64_t a3)
{
  char *v3;
  int v4;
  unsigned int v5;
  _WORD *v7;
  size_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  size_t v12;
  void *v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  const void *v19;
  size_t v20;
  const void **v21;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v23;
  size_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v3 = result;
  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)result = a2;
  v4 = *(_DWORD *)(a3 + 4);
  v5 = v4 - 10;
  v7 = (_WORD *)(a3 + 8);
  switch(v4)
  {
    case 10:
    case 11:
    case 12:
      *((_DWORD *)result + 2) = 1;
      if (v5 <= 2)
        *((_DWORD *)result + 3) = dword_216F083A8[v5];
      result[16] = *(_BYTE *)(a3 + 68);
      *(_WORD *)(result + 17) = *(_WORD *)(a3 + 69);
      if (*(unsigned __int8 *)(a3 + 67) >= 0x30u)
        v8 = 48;
      else
        v8 = *(unsigned __int8 *)(a3 + 67);
      result[67] = v8;
      memcpy(result + 19, (const void *)(a3 + 19), v8);
      if (*(unsigned __int8 *)(a3 + 18) >= 0x10u)
        v9 = 16;
      else
        v9 = *(unsigned __int8 *)(a3 + 18);
      result = (char *)memcpy(v3 + 72, v7, v9);
      v3[88] = v9;
      v3[68] = *(_BYTE *)(a3 + 72) & 0xF;
      return result;
    case 13:
      v11 = 9;
      goto LABEL_18;
    case 14:
      v11 = 10;
      goto LABEL_18;
    case 15:
      v11 = 11;
      goto LABEL_18;
    case 16:
      *((_DWORD *)result + 2) = 4;
      result[16] = *(_BYTE *)(a3 + 68);
      *(_WORD *)(result + 17) = *(_WORD *)(a3 + 69);
      if (*(unsigned __int8 *)(a3 + 67) >= 0x30u)
        v12 = 48;
      else
        v12 = *(unsigned __int8 *)(a3 + 67);
      result[67] = v12;
      v13 = result + 19;
      v14 = (const void *)(a3 + 19);
      goto LABEL_32;
    case 17:
    case 18:
    case 19:
      *((_DWORD *)result + 2) = 2;
      if ((v4 - 17) <= 2)
        *((_DWORD *)result + 3) = v4 - 17;
      v10 = *(_QWORD *)v7;
      *((_DWORD *)result + 20) = *(_DWORD *)(a3 + 16);
      *((_QWORD *)result + 9) = v10;
      result[88] = 12;
      result[16] = *(_BYTE *)(a3 + 72) & 0xF;
      return result;
    case 21:
      *((_DWORD *)result + 2) = 3;
      if (*(unsigned __int8 *)(a3 + 18) >= 0x10u)
        v15 = 16;
      else
        v15 = *(unsigned __int8 *)(a3 + 18);
      result = (char *)memcpy(result + 72, (const void *)(a3 + 8), v15);
      v3[88] = v15;
      v16 = *(_QWORD *)v7;
      *(_WORD *)(v3 + 21) = v7[4];
      *(_QWORD *)(v3 + 13) = v16;
      v3[12] = *(_BYTE *)(a3 + 18);
      *(_QWORD *)(v3 + 23) = *(_QWORD *)(a3 + 19);
      *(_WORD *)(v3 + 31) = *(_WORD *)(a3 + 27);
      return result;
    case 22:
      *((_DWORD *)result + 2) = 6;
      v13 = result + 12;
      v3[23] = *(_BYTE *)(a3 + 19);
      v3[24] = *(_BYTE *)(a3 + 20);
      if (*(unsigned __int8 *)(a3 + 18) >= 0xAu)
        v12 = 10;
      else
        v12 = *(unsigned __int8 *)(a3 + 18);
      v3[22] = v12;
      v14 = v7;
LABEL_32:
      memcpy(v13, v14, v12);
      goto LABEL_33;
    case 23:
      *((_DWORD *)result + 2) = 5;
      result[21] = *(_BYTE *)(a3 + 17);
      result[23] = *(_BYTE *)(a3 + 19);
      result[22] = *(_BYTE *)(a3 + 18);
      if (*(unsigned __int8 *)(a3 + 16) >= 8u)
        v20 = 8;
      else
        v20 = *(unsigned __int8 *)(a3 + 16);
      result[20] = v20;
      memcpy(result + 12, v7, v20);
      v18 = v3 + 72;
      v17 = v3[20];
      v19 = v3 + 12;
      goto LABEL_38;
    case 24:
      return result;
    case 25:
      v21 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i Found Kovio tag", "_copyTagInfoFromDevice", 2502);
      dispatch_get_specific(*v21);
      v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v26 = "_copyTagInfoFromDevice";
        v27 = 1024;
        v28 = 2502;
        _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found Kovio tag", buf, 0x12u);
      }
      *((_DWORD *)v3 + 2) = 7;
      if (*(unsigned __int8 *)(a3 + 8) >= 0x10u)
        v24 = 16;
      else
        v24 = *(unsigned __int8 *)(a3 + 8);
      v7 = v3 + 12;
      v3[28] = v24;
      memcpy(v3 + 12, (const void *)(a3 + 9), v24);
      v18 = v3 + 72;
      v17 = v3[28];
      goto LABEL_37;
    case 26:
    case 27:
      v11 = 8;
LABEL_18:
      *((_DWORD *)result + 2) = v11;
LABEL_33:
      if (*(unsigned __int8 *)(a3 + 18) >= 0x10u)
        v17 = 16;
      else
        v17 = *(unsigned __int8 *)(a3 + 18);
      v18 = v3 + 72;
LABEL_37:
      v19 = v7;
LABEL_38:
      result = (char *)memcpy(v18, v19, v17);
      v3[88] = v17;
      break;
    default:
      *((_DWORD *)result + 2) = 0;
      break;
  }
  return result;
}

void sub_216EEA394(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t);
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (*(_BYTE *)(v2 + 722))
  {
    v3 = *(void (**)(_QWORD, uint64_t))(v2 + 88);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 50))
        v4 = *(_QWORD *)(a1 + 40);
      else
        v4 = 0;
      v3(*(_QWORD *)(v2 + 336), v4);
    }
  }
  v5 = *(void **)(a1 + 40);
  if (v5)
    free(v5);
}

uint64_t sub_216EEA408(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 208);
    if (v2)
      return v2(*(_QWORD *)(v1 + 456));
  }
  return result;
}

uint64_t sub_216EEA42C(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 192);
    if (v2)
      return v2(*(_QWORD *)(v1 + 440));
  }
  return result;
}

uint64_t sub_216EEA450(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, _QWORD))(v1 + 8);
    if (v2)
      return v2(*(_QWORD *)(v1 + 256), 0);
  }
  return result;
}

uint64_t sub_216EEA478(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(void (**)(_QWORD, _QWORD))(v1 + 16);
    if (v2)
      v2(*(_QWORD *)(v1 + 264), *(_QWORD *)(a1 + 40));
  }
  return NFDataRelease();
}

uint64_t sub_216EEA4BC(_QWORD *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(a1[4] + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 24);
    if (v2)
      v2(*(_QWORD *)(v1 + 272), a1[5], a1[6]);
  }
  NFDataRelease();
  return NFDataRelease();
}

void sub_216EEA508(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t v9;
  void (*v10)(uint64_t, _BOOL8, uint64_t);
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1[4] + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v3 = a1[5];
    v4 = *(_QWORD *)(v1 + 496);
    if (v4)
      v4 = *(_QWORD *)(v4 + 8);
    v5 = v3 == v4;
    if (v3 == v4)
    {
      v6 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i Embedded SE EVT_RESTRICTED!", "_Callback_NFDriverNotifySE_block_invoke", 2785);
      dispatch_get_specific(*v6);
      v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v17 = "_Callback_NFDriverNotifySE_block_invoke";
        v18 = 1024;
        v19 = 2785;
        _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Embedded SE EVT_RESTRICTED!", buf, 0x12u);
      }
    }
    v9 = *(_QWORD *)(a1[4] + 24);
    v10 = *(void (**)(uint64_t, _BOOL8, uint64_t))(v9 + 32);
    if (v10)
    {
      v11 = *(_QWORD *)(v9 + 280);
      v12 = *(_DWORD *)(a1[6] + 32);
      if (v12 == 255)
        v13 = 4;
      else
        v13 = 0;
      if (v12 == 3)
        v13 = 3;
      if (v12 == 2)
        v14 = 2;
      else
        v14 = 0;
      if (v12 == 1)
        v14 = 1;
      if (v12 <= 2)
        v15 = v14;
      else
        v15 = v13;
      v10(v11, v5, v15);
    }
  }
}

uint64_t sub_216EEA678(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 40);
    if (v2)
    {
      v3 = *(_QWORD *)(v1 + 288);
      v4 = *(_DWORD *)(*(_QWORD *)(result + 40) + 32);
      if (v4 == 255)
        v5 = 4;
      else
        v5 = 0;
      if (v4 == 3)
        v5 = 3;
      if (v4 == 2)
        v6 = 2;
      else
        v6 = 0;
      if (v4 == 1)
        v6 = 1;
      if (v4 <= 2)
        v7 = v6;
      else
        v7 = v5;
      return v2(v3, 1, v7);
    }
  }
  return result;
}

uint64_t sub_216EEA6D8(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 64);
    if (v2)
      return v2(*(_QWORD *)(v1 + 312));
  }
  return result;
}

uint64_t sub_216EEA6FC(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 72);
    if (v2)
      return v2(*(_QWORD *)(v1 + 320));
  }
  return result;
}

uint64_t NFDriverSimulateCrash(uint64_t result, __int16 a2)
{
  uint64_t v2;

  if (result && (v2 = *(_QWORD *)(result + 24), *(_BYTE *)(v2 + 728)))
  {
    *(_WORD *)(v2 + 720) = a2;
  }
  else
  {
    NFDriverGetStackBreadcrumb(result);
    return phOsalNfc_RaiseExceptionWithDescription();
  }
  return result;
}

void sub_216EEA774(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 24);
  if (!*(_BYTE *)(v3 + 727))
  {
    sub_216EEA7D0(v2);
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  }
  if (*(_BYTE *)(v3 + 722))
  {
    v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(v3 + 96);
    if (v4)
      v4(*(_QWORD *)(v3 + 344), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
  }
}

void sub_216EEA7D0(uint64_t a1)
{
  void **v2;
  char *v3;
  NSObject *v4;
  void *v5;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004093CA8EA1uLL);
  v2 = (void **)sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v2[2] + 8));
  v3 = (char *)v2[2];
  ++*(_QWORD *)v3;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
  *(_QWORD *)v8[3] = v2;
  *(_QWORD *)(v8[3] + 16) = a1;
  sub_216EE4B88(a1);
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v6[0] = MEMORY[0x24BDAC760];
  v6[1] = 0x40000000;
  v6[2] = sub_216F02088;
  v6[3] = &unk_24D65F670;
  v6[4] = &v11;
  v6[5] = &v7;
  v6[6] = a1;
  v6[7] = v2;
  dispatch_async(v4, v6);
  if (sub_216EE0ECC((uint64_t *)v2))
  {
    *((_DWORD *)v12 + 6) = *v2;
    sub_216EE0D6C(v2);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 496) + 24) = 0;
  }
  v5 = (void *)v8[3];
  if (v5)
    free(v5);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 24) + 520));
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
}

uint64_t sub_216EEA934(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 200);
    if (v2)
      return v2(*(_QWORD *)(v1 + 448), *(unsigned int *)(result + 40), *(unsigned __int8 *)(result + 44));
  }
  return result;
}

uint64_t sub_216EEA964(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD))(v1 + 104);
    if (v2)
      return v2(*(_QWORD *)(v1 + 352));
  }
  return result;
}

uint64_t sub_216EEA988(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 120);
    if (v2)
      v2(*(_QWORD *)(v1 + 368), **(_QWORD **)(a1 + 40), *(unsigned int *)(*(_QWORD *)(a1 + 40) + 8));
  }
  return NFDataRelease();
}

void sub_216EEA9D4(_QWORD *a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1[7] + 24);
  if (*(_BYTE *)(v2 + 722))
  {
    v3 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v2 + 160);
    if (v3)
      v3(*(_QWORD *)(v2 + 408), *(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24), *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24), *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 32), *(unsigned int *)(*(_QWORD *)(a1[6] + 8) + 40));
  }
  v4 = *(_QWORD *)(a1[6] + 8);
  v5 = *(void **)(v4 + 32);
  if (v5)
  {
    free(v5);
    v4 = *(_QWORD *)(a1[6] + 8);
  }
  *(_QWORD *)(v4 + 32) = 0;
}

uint64_t sub_216EEAA54(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, BOOL, _QWORD, BOOL);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, BOOL, _QWORD, BOOL))(v1 + 184);
    if (v2)
      return v2(*(_QWORD *)(v1 + 432), *(_DWORD *)(result + 40) == 0, *(unsigned int *)(result + 56), *(_DWORD *)(result + 52) == 4);
  }
  return result;
}

void sub_216EEAA94(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  const void **v9;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v11;
  const char *v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  const void **v16;
  void (*v17)(uint64_t, const char *, ...);
  NSObject *v18;
  uint32_t v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  _QWORD block[6];
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (a5 <= 53)
  {
    if (a5)
    {
      if (a5 == 7)
      {
        v9 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(5, "%s:%i halted", "_Callback_NFDriverNotifyHCE", 3172);
        dispatch_get_specific(*v9);
        v11 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v26 = "_Callback_NFDriverNotifyHCE";
          v27 = 1024;
          v28 = 3172;
          v12 = "%{public}s:%i halted";
LABEL_18:
          v18 = v11;
          v19 = 18;
LABEL_23:
          _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_DEFAULT, v12, buf, v19);
          return;
        }
        return;
      }
LABEL_19:
      v20 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(5, "%s:%i status=0x%04X", "_Callback_NFDriverNotifyHCE", 3177, a5);
      dispatch_get_specific(*v20);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v26 = "_Callback_NFDriverNotifyHCE";
        v27 = 1024;
        v28 = 3177;
        v29 = 1024;
        v30 = a5;
        v12 = "%{public}s:%i status=0x%04X";
        v18 = v22;
        v19 = 24;
        goto LABEL_23;
      }
      return;
    }
LABEL_10:
    if (a4)
    {
      v13 = 0;
      v14 = MEMORY[0x24BDAC760];
      do
      {
        v15 = *(NSObject **)(*(_QWORD *)(a2 + 24) + 536);
        block[0] = v14;
        block[1] = 0x40000000;
        block[2] = sub_216EEAD70;
        block[3] = &unk_24D65F240;
        block[4] = a2;
        block[5] = a3;
        v24 = v13;
        dispatch_async(v15, block);
        ++v13;
      }
      while (v13 < a4);
    }
    return;
  }
  if (a5 != 56)
  {
    if (a5 != 54)
      goto LABEL_19;
    goto LABEL_10;
  }
  v16 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v17)
    v17(5, "%s:%i deselected", "_Callback_NFDriverNotifyHCE", 3167);
  dispatch_get_specific(*v16);
  v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v26 = "_Callback_NFDriverNotifyHCE";
    v27 = 1024;
    v28 = 3167;
    v12 = "%{public}s:%i deselected";
    goto LABEL_18;
  }
}

uint64_t sub_216EEAD70(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, _QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 24);
  if (*(_BYTE *)(v1 + 722))
  {
    v2 = *(uint64_t (**)(_QWORD, _QWORD))(v1 + 48);
    if (v2)
      return v2(*(_QWORD *)(v1 + 296), *(_QWORD *)(*(_QWORD *)(result + 40) + 16 * *(unsigned __int8 *)(result + 48)));
  }
  return result;
}

uint64_t sub_216EEADA8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _DWORD *v6;
  NSObject *v7;
  uint64_t v8;
  const void **v9;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  uint32_t v22;
  unint64_t v23;
  _DWORD *v24;
  const void **v25;
  int v26;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  uint8_t *v30;
  NSObject *v31;
  const char *v32;
  uint64_t v33;
  void (*v34)(uint64_t, const char *, ...);
  NSObject *v35;
  uint64_t v36;
  void (*v37)(uint64_t, const char *, ...);
  NSObject *v38;
  uint32_t v39;
  void (*v40)(uint64_t, const char *, ...);
  NSObject *v41;
  int v42;
  NSObject *v43;
  int v44;
  uint64_t v45;
  int v46;
  NSObject *v47;
  int v48;
  NSObject *v49;
  int v50;
  _DWORD *v51;
  _DWORD *v52;
  void (*v53)(uint64_t, const char *, ...);
  NSObject *v54;
  void (*v55)(uint64_t, const char *, ...);
  NSObject *v56;
  void (*v57)(uint64_t, const char *, ...);
  NSObject *v58;
  void (*v59)(uint64_t, const char *, ...);
  NSObject *v60;
  void (*v62)(uint64_t, const char *, ...);
  NSObject *v63;
  _QWORD block[8];
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  uint8_t buf[24];
  void *v74;
  uint64_t v75;
  uint8_t v76[4];
  const char *v77;
  __int16 v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(void **)(v2 + 496);
  if (v3)
  {
    free(v3);
    v2 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(v2 + 496) = 0;
  v4 = *(void **)(v2 + 504);
  if (v4)
  {
    free(v4);
    v2 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(v2 + 504) = 0;
  v5 = *(void **)(v2 + 512);
  if (v5)
  {
    free(v5);
    v2 = *(_QWORD *)(a1 + 24);
  }
  *(_QWORD *)(v2 + 512) = 0;
  *(_BYTE *)(v2 + 723) = 0;
  v69 = 0;
  v70 = &v69;
  v71 = 0x2000000000;
  v72 = 3;
  v6 = malloc_type_calloc(1uLL, 0x30uLL, 0x1080040FC6463CFuLL);
  v65 = 0;
  v66 = &v65;
  v67 = 0x2000000000;
  v68 = 0;
  v7 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v8 = MEMORY[0x24BDAC760];
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216EEB90C;
  block[3] = &unk_24D65F268;
  block[6] = a1;
  block[7] = v6;
  block[4] = &v65;
  block[5] = &v69;
  dispatch_async_and_wait(v7, block);
  if (*((_WORD *)v66 + 12))
  {
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_NFDriverEnumerateSecureElements", 3809, *((unsigned __int16 *)v66 + 12));
    dispatch_get_specific(*v9);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *((unsigned __int16 *)v66 + 12);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3809;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    v13 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)buf = v8;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_216EE4564;
    v74 = &unk_24D65ED38;
    v75 = a1;
    dispatch_async(v13, buf);
    free(v6);
    v14 = 1;
    goto LABEL_87;
  }
  if (*((unsigned __int8 *)v70 + 24) > 3u)
  {
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(3, "%s:%i Unexpected count of SEs : %d", "_NFDriverEnumerateSecureElements", 3815, *((unsigned __int8 *)v70 + 24));
    dispatch_get_specific(*v15);
    v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = *((unsigned __int8 *)v70 + 24);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3815;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v18;
      v19 = "%{public}s:%i Unexpected count of SEs : %d";
      v20 = buf;
      v21 = v17;
      v22 = 24;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  if (!*((_BYTE *)v70 + 24))
  {
LABEL_86:
    free(v6);
    v14 = 0;
    goto LABEL_87;
  }
  v23 = 0;
  v24 = v6 + 3;
  v25 = (const void **)MEMORY[0x24BEDCDB0];
  while (1)
  {
    v26 = *(v24 - 1);
    if (v26 == 5)
    {
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 512);
      dispatch_get_specific(*v25);
      v34 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (!v33)
      {
        if (v34)
          v34(6, "%s:%i Found Host state=%d", "_NFDriverEnumerateSecureElements", 3862, *v24);
        dispatch_get_specific(*v25);
        v47 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          v48 = *v24;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3862;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v48;
          _os_log_impl(&dword_216EC7000, v47, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found Host state=%d", buf, 0x18u);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 512) = sub_216ED76F0(a1, 5, 0, *(_QWORD *)(v24 - 3));
        goto LABEL_85;
      }
      if (v34)
        v34(4, "%s:%i Host already found", "_NFDriverEnumerateSecureElements", 3859);
      dispatch_get_specific(*v25);
      v35 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3859;
        v30 = buf;
        v31 = v35;
        v32 = "%{public}s:%i Host already found";
        goto LABEL_40;
      }
      goto LABEL_85;
    }
    if (v26 == 2)
    {
      v36 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 504);
      dispatch_get_specific(*v25);
      v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (!v36)
      {
        if (v37)
          v37(6, "%s:%i Found UICC state=%d", "_NFDriverEnumerateSecureElements", 3852, *v24);
        dispatch_get_specific(*v25);
        v49 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          v50 = *v24;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3852;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v50;
          _os_log_impl(&dword_216EC7000, v49, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found UICC state=%d", buf, 0x18u);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 504) = sub_216ED76F0(a1, 4, 0, *(_QWORD *)(v24 - 3));
        goto LABEL_85;
      }
      if (v37)
        v37(4, "%s:%i UICC already found", "_NFDriverEnumerateSecureElements", 3849);
      dispatch_get_specific(*v25);
      v38 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3849;
        v30 = buf;
        v31 = v38;
        v32 = "%{public}s:%i UICC already found";
        goto LABEL_40;
      }
      goto LABEL_85;
    }
    if (v26 != 1)
    {
      dispatch_get_specific(*v25);
      v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v40)
        v40(4, "%s:%i Unknown SE: %d", "_NFDriverEnumerateSecureElements", 3868, *(v24 - 1));
      dispatch_get_specific(*v25);
      v41 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      v42 = *(v24 - 1);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3868;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v42;
      v30 = buf;
      v31 = v41;
      v32 = "%{public}s:%i Unknown SE: %d";
      v39 = 24;
      goto LABEL_45;
    }
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 496);
    dispatch_get_specific(*v25);
    v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v27)
    {
      if (v28)
        v28(4, "%s:%i eSE already found", "_NFDriverEnumerateSecureElements", 3824);
      dispatch_get_specific(*v25);
      v29 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        goto LABEL_85;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3824;
      v30 = buf;
      v31 = v29;
      v32 = "%{public}s:%i eSE already found";
LABEL_40:
      v39 = 18;
LABEL_45:
      _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, v32, v30, v39);
      goto LABEL_85;
    }
    if (v28)
      v28(6, "%s:%i Found eSE state=%d", "_NFDriverEnumerateSecureElements", 3827, *v24);
    dispatch_get_specific(*v25);
    v43 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = *v24;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverEnumerateSecureElements";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3827;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v44;
      _os_log_impl(&dword_216EC7000, v43, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found eSE state=%d", buf, 0x18u);
    }
    memset(buf, 0, sizeof(buf));
    LODWORD(v74) = 0;
    if ((NFDriverGetControllerInfo(a1, (uint64_t)buf) & 1) == 0)
      break;
    v45 = (int)sub_216EE90A8(*(_DWORD *)(*(_QWORD *)(a1 + 24) + 588), *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 592))- 5;
    if (v45 > 7)
      v46 = 6;
    else
      v46 = dword_216F084A4[v45];
    v51 = sub_216ED76F0(a1, v46, *v24 == 4, *(_QWORD *)(v24 - 3));
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 496) = v51;
    if (v51)
    {
      v52 = v51;
      if (v51[6] == 1)
      {
        dispatch_get_specific(*v25);
        v53 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v53)
          v53(3, "%s:%i Error, trying to power cycle the SE.", "_NFDriverRebootRemovedSE", 3490);
        dispatch_get_specific(*v25);
        v54 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v76 = 136446466;
          v77 = "_NFDriverRebootRemovedSE";
          v78 = 1024;
          v79 = 3490;
          _os_log_impl(&dword_216EC7000, v54, OS_LOG_TYPE_ERROR, "%{public}s:%i Error, trying to power cycle the SE.", v76, 0x12u);
        }
        if ((NFDriverSetSecureElementPower(a1, 1) & 1) == 0 && (NFDriverSetSecureElementPower(a1, 1) & 1) == 0)
        {
          dispatch_get_specific(*v25);
          v59 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v59)
            v59(6, "%s:%i Power cycling SE success.", "_NFDriverRebootRemovedSE", 3497);
          dispatch_get_specific(*v25);
          v60 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v76 = 136446466;
            v77 = "_NFDriverRebootRemovedSE";
            v78 = 1024;
            v79 = 3497;
            _os_log_impl(&dword_216EC7000, v60, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Power cycling SE success.", v76, 0x12u);
          }
          v52[6] = 0;
          goto LABEL_85;
        }
        dispatch_get_specific(*v25);
        v55 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v55)
          v55(3, "%s:%i Error: Failed to power cycle the SE.", "_NFDriverRebootRemovedSE", 3500);
        dispatch_get_specific(*v25);
        v56 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v76 = 136446466;
          v77 = "_NFDriverRebootRemovedSE";
          v78 = 1024;
          v79 = 3500;
          _os_log_impl(&dword_216EC7000, v56, OS_LOG_TYPE_ERROR, "%{public}s:%i Error: Failed to power cycle the SE.", v76, 0x12u);
        }
        dispatch_get_specific(*v25);
        v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v57)
          v57(3, "%s:%i Failed to recover SE", "_NFDriverEnumerateSecureElements", 3841);
        dispatch_get_specific(*v25);
        v58 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v76 = 136446466;
          v77 = "_NFDriverEnumerateSecureElements";
          v78 = 1024;
          v79 = 3841;
          v30 = v76;
          v31 = v58;
          v32 = "%{public}s:%i Failed to recover SE";
          goto LABEL_40;
        }
      }
    }
LABEL_85:
    ++v23;
    v24 += 4;
    if (v23 >= *((unsigned __int8 *)v70 + 24))
      goto LABEL_86;
  }
  dispatch_get_specific(*v25);
  v62 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v62)
    v62(3, "%s:%i Failed to get controller info", "_NFDriverEnumerateSecureElements", 3830);
  dispatch_get_specific(*v25);
  v63 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v76 = 136446466;
    v77 = "_NFDriverEnumerateSecureElements";
    v78 = 1024;
    v79 = 3830;
    v19 = "%{public}s:%i Failed to get controller info";
    v20 = v76;
    v21 = v63;
    v22 = 18;
LABEL_18:
    _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_ERROR, v19, v20, v22);
  }
LABEL_19:
  free(v6);
  v14 = 8;
LABEL_87:
  _Block_object_dispose(&v65, 8);
  _Block_object_dispose(&v69, 8);
  return v14;
}

uint64_t sub_216EEB90C(uint64_t a1)
{
  uint64_t result;

  result = phLibNfc_SE_GetSecureElementList();
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t sub_216EEB950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned __int8 v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char v17;
  char v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  const void **v23;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v25;
  uint64_t *v26;
  uint64_t v27;
  NSObject *v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  uint64_t v31;
  _QWORD v33[3];
  int v34;
  _OWORD v35[27];
  uint64_t v36;
  _BYTE buf[32];
  uint64_t v38;
  _OWORD *v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  if (*(_BYTE *)(a1 + 56))
    return 0;
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v33);
  v5 = *(_QWORD *)(a2 + 192);
  if (v5)
  {
    v6 = 0;
    v7 = (char *)(a2 + 1);
    do
    {
      v8 = *(v7 - 1);
      if (*(v7 - 1))
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 512);
        if (v9)
          v9 = *(_QWORD *)(v9 + 8);
        v10 = (char *)v35 + 40 * v6;
        *(_QWORD *)v10 = v9;
        *((_DWORD *)v10 + 2) = 2;
        v10[12] |= 1u;
        v10[32] = v8;
        memcpy(v10 + 16, v7, v8);
        if (++v6 >= 0xCu)
          __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4061, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
      }
      v7 += 17;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(v11 + 496);
  if (v12)
    v12 = *(_QWORD *)(v12 + 8);
  v13 = (char *)v35 + 40 * v6;
  *(_QWORD *)v13 = v12;
  *((_DWORD *)v13 + 2) = 1;
  v13[12] |= 1u;
  *((_DWORD *)v13 + 4) = 4;
  if ((v6 + 1) >= 0xCu)
    __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4071, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
  v14 = *(_QWORD *)(v11 + 496);
  if (v14)
    v14 = *(_QWORD *)(v14 + 8);
  v15 = (char *)v35 + 40 * (v6 + 1);
  *(_QWORD *)v15 = v14;
  *((_DWORD *)v15 + 2) = 0;
  *((_DWORD *)v15 + 4) = 2;
  v18 = v15[12];
  v16 = v15 + 12;
  v17 = v18;
  *v16 = v18 | 1;
  if (HIDWORD(v33[0]) >= 7)
    *v16 = v17 | 3;
  if ((v6 + 2) >= 0xCu)
    __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4082, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
  v19 = *(_QWORD *)(v11 + 512);
  if (v19)
    v19 = *(_QWORD *)(v19 + 8);
  v20 = (char *)v35 + 40 * (v6 + 2);
  *(_QWORD *)v20 = v19;
  *((_DWORD *)v20 + 2) = 1;
  v20[12] |= 1u;
  *((_DWORD *)v20 + 4) = 4;
  if ((v6 + 3) >= 0xCu)
    __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4091, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
  v21 = *(_QWORD *)(v11 + 496);
  if (v21)
    v21 = *(_QWORD *)(v21 + 8);
  v22 = (char *)v35 + 40 * (v6 + 3);
  *(_QWORD *)v22 = v21;
  *((_DWORD *)v22 + 2) = 1;
  v22[12] |= 2u;
  *((_DWORD *)v22 + 4) = 4;
  if ((v6 + 4) >= 0xCu)
    __assert_rtn("_NFDriverConfigureRoutingTable", "NFDriver.c", 4101, "numRoutes <= MAX_NFCC_ROUTING_ENTRIES");
  v23 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Routing changed", "_NFDriverConfigureRoutingTable", 4103);
  dispatch_get_specific(*v23);
  v25 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverConfigureRoutingTable";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4103;
    _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Routing changed", buf, 0x12u);
  }
  v26 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v26[2] + 8));
  v27 = v26[2];
  ++*(_QWORD *)v27;
  pthread_mutex_unlock((pthread_mutex_t *)(v27 + 8));
  v28 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216F044E0;
  *(_QWORD *)&buf[24] = &unk_24D65F6B0;
  v41 = v6 + 4;
  v38 = a1;
  v39 = v35;
  v40 = v26;
  dispatch_async_and_wait(v28, buf);
  if (sub_216EE0ECC(v26))
  {
    dispatch_get_specific(*v23);
    v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v29)
      v29(3, "%s:%i Failed to setup routing 0x%04llx", "_NFDriverConfigureRoutingTable", 4106, *v26);
    dispatch_get_specific(*v23);
    v30 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = *v26;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverConfigureRoutingTable";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4106;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v31;
      _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup routing 0x%04llx", buf, 0x1Cu);
    }
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  sub_216EE0D6C((void **)v26);
  return v2;
}

uint64_t NFDriverConfigureVASPolling(uint64_t a1, uint64_t a2, int a3)
{
  const void **v6;
  __int128 *v7;
  _BOOL8 v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  uint64_t v15;
  void **v17;
  _QWORD v18[3];
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v18);
  if (HIDWORD(v18[0]) < 7)
    return 1;
  v27 = 0;
  v26 = xmmword_216F08296;
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  if (a3 <= 21 && a2 && a3)
  {
    BYTE3(v26) = a3;
    v7 = &v26;
    __memcpy_chk();
  }
  else
  {
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Use default ECP value", "NFDriverConfigureVASPolling", 4189);
    dispatch_get_specific(*v6);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v21 = "NFDriverConfigureVASPolling";
      v22 = 1024;
      v23 = 4189;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Use default ECP value", buf, 0x12u);
    }
    v7 = (__int128 *)&unk_254E55FD8;
  }
  v17 = (void **)sub_216EE5100(0x18u, v7);
  v11 = sub_216EE4D10(a1, 37025, (uint64_t)v17, 0);
  v12 = sub_216EE0ECC(v11);
  v8 = v12 == 0;
  if (v12)
  {
    dispatch_get_specific(*v6);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(3, "%s:%i Failed to set ECP VAS polling: 0x%08llx", "NFDriverConfigureVASPolling", 4200, *v11);
    dispatch_get_specific(*v6);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = *v11;
      *(_DWORD *)buf = 136446722;
      v21 = "NFDriverConfigureVASPolling";
      v22 = 1024;
      v23 = 4200;
      v24 = 2048;
      v25 = v15;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set ECP VAS polling: 0x%08llx", buf, 0x1Cu);
    }
  }
  sub_216EE0D6C((void **)v11);
  sub_216EE5198(&v17);
  return v8;
}

uint64_t NFDriverEnableAntiRelay(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t *v7;
  const void **v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  uint64_t v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  void **v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  uint8_t v23[24];
  int v24;
  _DWORD v25[2];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v25[0] = 17210017;
  if (*(_BYTE *)(a1 + 56))
    return 0;
  if (a3 == 5)
  {
    memset(v23, 0, sizeof(v23));
    v24 = 0;
    NFDriverGetControllerInfo(a1, (uint64_t)v23);
    v3 = 0;
    if (*(_DWORD *)&v23[4] >= 7u)
    {
      v25[1] = *(_DWORD *)a2;
      v26 = *(_BYTE *)(a2 + 4);
      v16 = (void **)sub_216EE5100(9u, v25);
      v7 = sub_216EE4D10(a1, 37025, (uint64_t)v16, 0);
      if (sub_216EE0ECC(v7))
      {
        v8 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(3, "%s:%i Failed to set Prox config : 0x%08llx", "NFDriverEnableAntiRelay", 4241, *v7);
        dispatch_get_specific(*v8);
        v10 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v11 = *v7;
          *(_DWORD *)buf = 136446722;
          v18 = "NFDriverEnableAntiRelay";
          v19 = 1024;
          v20 = 4241;
          v21 = 2048;
          v22 = v11;
          _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set Prox config : 0x%08llx", buf, 0x1Cu);
        }
        v3 = 1;
      }
      else
      {
        v3 = 0;
      }
      sub_216EE0D6C((void **)v7);
      sub_216EE5198(&v16);
    }
  }
  else
  {
    v12 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(3, "%s:%i Unexpected size of AID prefix : %d.", "NFDriverEnableAntiRelay", 4227, a3);
    dispatch_get_specific(*v12);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v23 = 136446722;
      *(_QWORD *)&v23[4] = "NFDriverEnableAntiRelay";
      *(_WORD *)&v23[12] = 1024;
      *(_DWORD *)&v23[14] = 4227;
      *(_WORD *)&v23[18] = 1024;
      *(_DWORD *)&v23[20] = a3;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected size of AID prefix : %d.", v23, 0x18u);
    }
    return 5;
  }
  return v3;
}

_DWORD *NFDriverOpen(uint64_t a1, _BYTE *a2)
{
  _DWORD *v4;
  _BYTE *v5;
  void *v6;
  unint64_t v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  const void **v13;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  const void **v23;
  const void *v24;
  NSObject *v25;
  const void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  void (*v38)(uint64_t, const char *, ...);
  NSObject *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  char *v44;
  NSObject *v45;
  void (*v46)(uint64_t, const char *, ...);
  NSObject *v47;
  void *v48;
  void (*v49)(uint64_t, const char *, ...);
  NSObject *v50;
  const void **v51;
  void (*v52)(uint64_t, const char *, ...);
  NSObject *v53;
  _BYTE buf[54];
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  if (a2)
    *a2 = 1;
  v4 = malloc_type_calloc(1uLL, 0x48uLL, 0x10D00401727F4BCuLL);
  if (!v4)
    return v4;
  v5 = malloc_type_calloc(1uLL, 0x2E0uLL, 0x10A00402CBDB760uLL);
  if (!v5)
  {
LABEL_73:
    free(v4);
    return 0;
  }
  v6 = v5;
  *((_QWORD *)v4 + 3) = v5;
  if (a1)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v5[724] = (v7 & 0x80) != 0;
    *((_BYTE *)v4 + 56) = (v7 & 0x80000) != 0;
    if ((v7 & 0x80000) != 0)
      v5[724] = 0;
    v8 = *(const char **)(a1 + 8);
    if (*(_QWORD *)a1)
    {
      *((_QWORD *)v4 + 1) = strdup(*(const char **)a1);
      if (v8)
        *((_QWORD *)v4 + 2) = strdup(v8);
    }
    else if (v8)
    {
      *((_QWORD *)v4 + 1) = strdup(*(const char **)(a1 + 8));
    }
    *((_QWORD *)v6 + 69) = v7;
    *((_DWORD *)v6 + 174) = 0;
    v10 = *(_DWORD *)(a1 + 32);
    if (!v10)
      v10 = 300;
    *((_DWORD *)v6 + 175) = v10;
    *((_QWORD *)v6 + 88) = *(_QWORD *)(a1 + 40);
    v11 = *(_DWORD *)(a1 + 36);
    if (!v11)
      v11 = 750;
    *((_DWORD *)v6 + 178) = v11;
    *((_BYTE *)v6 + 728) = 0;
    *((_WORD *)v6 + 360) = 0;
    if (((v7 >> 19) & 1) != 0)
      goto LABEL_20;
LABEL_12:
    v9 = MEMORY[0x219A0484C]();
    goto LABEL_21;
  }
  if (!*((_BYTE *)v4 + 56))
    goto LABEL_12;
LABEL_20:
  v9 = 3;
LABEL_21:
  if (!*((_QWORD *)v4 + 1))
  {
    switch(v9)
    {
      case 0:
        v13 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(6, "%s:%i HW is not supported", "NFDriverOpen", 4467);
        dispatch_get_specific(*v13);
        v15 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          goto LABEL_70;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverOpen";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4467;
        v16 = "%{public}s:%i HW is not supported";
        v17 = v15;
        v18 = OS_LOG_TYPE_DEFAULT;
        v19 = 18;
        goto LABEL_69;
      case 1:
      case 2:
        v12 = "com.apple.uart.stockholm";
        goto LABEL_29;
      case 3:
        if (*((_BYTE *)v4 + 56))
        {
          *((_QWORD *)v4 + 1) = strdup("com.apple.spmi.nfc.hammerfest");
          *((_QWORD *)v4 + 2) = strdup("com.apple.spmi.nfc");
        }
        else
        {
          *((_QWORD *)v4 + 1) = strdup("com.apple.spmi.nfc");
          *((_QWORD *)v4 + 2) = 0;
        }
        goto LABEL_30;
      case 4:
        v12 = "relay";
LABEL_29:
        *((_QWORD *)v4 + 1) = strdup(v12);
        goto LABEL_30;
      default:
        v51 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v52 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v52)
          v52(3, "%s:%i Wrong interfaceType %d - cannot continue!", "NFDriverOpen", 4474, v9);
        dispatch_get_specific(*v51);
        v53 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          goto LABEL_70;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "NFDriverOpen";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4474;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v9;
        v16 = "%{public}s:%i Wrong interfaceType %d - cannot continue!";
        v17 = v53;
        v18 = OS_LOG_TYPE_ERROR;
        v19 = 24;
LABEL_69:
        _os_log_impl(&dword_216EC7000, v17, v18, v16, buf, v19);
LABEL_70:
        if (a2)
          *a2 = 0;
        free(v6);
        break;
    }
    goto LABEL_73;
  }
LABEL_30:
  *v4 = v9;
  if (*((_BYTE *)v4 + 56))
    v20 = "com.apple.stockholm.driverQueue.secondary";
  else
    v20 = "com.apple.stockholm.driverQueue.primary";
  if (*((_BYTE *)v4 + 56))
    v21 = "com.apple.stockholm.callbackQueue.secondary";
  else
    v21 = "com.apple.stockholm.callbackQueue.primary";
  *((_QWORD *)v6 + 66) = dispatch_workloop_create_inactive(v20);
  *((_QWORD *)v6 + 67) = dispatch_workloop_create_inactive(v21);
  dispatch_workloop_set_scheduler_priority();
  dispatch_workloop_set_scheduler_priority();
  v22 = *((_QWORD *)v6 + 66);
  v23 = (const void **)MEMORY[0x24BEDCDB0];
  v24 = (const void *)*MEMORY[0x24BEDCDB0];
  if (*((_BYTE *)v4 + 56))
  {
    dispatch_queue_set_specific(v22, v24, (void *)3, 0);
    v25 = *((_QWORD *)v6 + 67);
    v26 = *v23;
    v27 = 3;
  }
  else
  {
    dispatch_queue_set_specific(v22, v24, 0, 0);
    v25 = *((_QWORD *)v6 + 67);
    v26 = *v23;
    v27 = 0;
  }
  dispatch_queue_set_specific(v25, v26, (void *)v27, 0);
  dispatch_activate(*((dispatch_object_t *)v6 + 66));
  dispatch_activate(*((dispatch_object_t *)v6 + 67));
  if (*((_BYTE *)v4 + 56))
  {
    *(_BYTE *)(*((_QWORD *)v4 + 3) + 726) = MEMORY[0x219A04858]();
    dispatch_get_specific(*v23);
    v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v28)
      v28(6, "%s:%i interfaceType:%d path:%s flags:0x%llx  aux path:%s  warmBoot:%d", "NFDriverOpen", 4506, *v4, *((const char **)v4 + 1), *((_QWORD *)v6 + 69), *((const char **)v4 + 2), *(unsigned __int8 *)(*((_QWORD *)v4 + 3) + 726));
    dispatch_get_specific(*v23);
    v29 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      goto LABEL_49;
    v30 = *v4;
    v31 = *((_QWORD *)v6 + 69);
    v32 = *((_QWORD *)v4 + 1);
    v33 = *((_QWORD *)v4 + 2);
    v34 = *(unsigned __int8 *)(*((_QWORD *)v4 + 3) + 726);
    *(_DWORD *)buf = 136447746;
    *(_QWORD *)&buf[4] = "NFDriverOpen";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4506;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v30;
    *(_WORD *)&buf[24] = 2080;
    *(_QWORD *)&buf[26] = v32;
    *(_WORD *)&buf[34] = 2048;
    *(_QWORD *)&buf[36] = v31;
    *(_WORD *)&buf[44] = 2080;
    *(_QWORD *)&buf[46] = v33;
    v56 = 1024;
    v57 = v34;
    v35 = "%{public}s:%i interfaceType:%d path:%s flags:0x%llx  aux path:%s  warmBoot:%d";
    v36 = v29;
    v37 = 60;
  }
  else
  {
    dispatch_get_specific(*v23);
    v38 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v38)
      v38(6, "%s:%i interfaceType:%d path:%s flags:0x%llx", "NFDriverOpen", 4511, *v4, *((const char **)v4 + 1), *((_QWORD *)v6 + 69));
    dispatch_get_specific(*v23);
    v39 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      goto LABEL_49;
    v40 = *v4;
    v41 = *((_QWORD *)v4 + 1);
    v42 = *((_QWORD *)v6 + 69);
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "NFDriverOpen";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4511;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v40;
    *(_WORD *)&buf[24] = 2080;
    *(_QWORD *)&buf[26] = v41;
    *(_WORD *)&buf[34] = 2048;
    *(_QWORD *)&buf[36] = v42;
    v35 = "%{public}s:%i interfaceType:%d path:%s flags:0x%llx";
    v36 = v39;
    v37 = 44;
  }
  _os_log_impl(&dword_216EC7000, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
LABEL_49:
  NFDriverSetPollingConfig((uint64_t)v4, 0, 0);
  *((_QWORD *)v6 + 65) = dispatch_semaphore_create(1);
  *((_BYTE *)v6 + 722) = 1;
  byte_253E47164 = 0;
  v43 = (void **)sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v43[2] + 8));
  v44 = (char *)v43[2];
  ++*(_QWORD *)v44;
  pthread_mutex_unlock((pthread_mutex_t *)(v44 + 8));
  v45 = *(NSObject **)(*((_QWORD *)v4 + 3) + 528);
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216F0464C;
  *(_QWORD *)&buf[24] = &unk_24D65F6D0;
  *(_QWORD *)&buf[32] = v4;
  *(_QWORD *)&buf[40] = v43;
  dispatch_async_and_wait(v45, buf);
  if (sub_216EE0ECC((uint64_t *)v43))
  {
    if (*((_BYTE *)v6 + 724))
    {
      NFDriverGetStackBreadcrumb((uint64_t)v4);
      postAnalyticsMiddlewareExceptionEvent();
    }
    dispatch_get_specific(*v23);
    v46 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v46)
      v46(3, "%s:%i status=0x%04llX", "NFDriverOpen", 4538, *v43);
    dispatch_get_specific(*v23);
    v47 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      v48 = *v43;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverOpen";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4538;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v48;
      _os_log_impl(&dword_216EC7000, v47, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    if (*v43 == (void *)51)
    {
      dispatch_get_specific(*v23);
      v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v49)
        v49(6, "%s:%i Hardware not supported", "NFDriverOpen", 4542);
      dispatch_get_specific(*v23);
      v50 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverOpen";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4542;
        _os_log_impl(&dword_216EC7000, v50, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Hardware not supported", buf, 0x12u);
      }
      if (a2)
        *a2 = 0;
    }
    sub_216EE0D6C(v43);
    NFDriverClose((uint64_t)v4);
    return 0;
  }
  sub_216EE0D6C(v43);
  return v4;
}

void NFDriverSetPollingConfig(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  const void **v8;
  void (*v9)(uint64_t, const char *, ...);
  const void **v10;
  NSObject *v11;
  const char *v12;
  const void **v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint32_t v19;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v21;
  void (*v22)(uint64_t, const char *, ...);
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  unsigned int v30;
  int v31;
  int v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v32 = (a2 >> 2) & 1;
    v6 = (a2 >> 3) & 1;
    v7 = (16 * v6) & 0xFFFDFFFE | (((a2 >> 7) & 1) << 17) | ((4 * v32) | (2 * ((a2 >> 1) & 1))) & 0xFFFE7FF6 | (8 * v32) & 0xFFFE7FFE | (((a2 >> 5) & 1) << 15) & 0xFFFEFFFE | (((a2 >> 6) & 1) << 16) | a2 & 1;
    *(_DWORD *)(v5 + 656) = v7;
    v8 = (const void **)MEMORY[0x24BEDCDB0];
    if ((a2 & 0x10) != 0)
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i Polling config is using VAS ECP", "NFDriverSetPollingConfig", 4643);
      v10 = v8;
      dispatch_get_specific(*v8);
      v21 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v34 = "NFDriverSetPollingConfig";
        v35 = 1024;
        v36 = 4643;
        _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Polling config is using VAS ECP", buf, 0x12u);
      }
      *(_DWORD *)(v5 + 656) |= 0x1000u;
    }
    else if ((a2 & 3) != 0 && (*(_DWORD *)(a1 + 40) - 1) >= 4)
    {
      *(_DWORD *)(v5 + 656) = v7 | 0x800;
      dispatch_get_specific(*v8);
      v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22)
        v22(6, "%s:%i Polling config is using Custom ECP", "NFDriverSetPollingConfig", 4653);
      v10 = v8;
      dispatch_get_specific(*v8);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v34 = "NFDriverSetPollingConfig";
        v35 = 1024;
        v36 = 4653;
        v12 = "%{public}s:%i Polling config is using Custom ECP";
        goto LABEL_22;
      }
    }
    else
    {
      *(_DWORD *)(v5 + 656) = (16 * v6) & 0xFFFDF7FE | (((a2 >> 7) & 1) << 17) | ((4 * v32) | (2 * ((a2 >> 1) & 1))) & 0xFFFE77F6 | (8 * ((a2 >> 2) & 1)) & 0xFFFE77FE | (((a2 >> 5) & 1) << 15) & 0xFFFEF7FE | (((a2 >> 6) & 1) << 16) | a2 & 1;
      dispatch_get_specific(*v8);
      v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v9)
        v9(6, "%s:%i Polling config is not using ECP", "NFDriverSetPollingConfig", 4656);
      v10 = v8;
      dispatch_get_specific(*v8);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v34 = "NFDriverSetPollingConfig";
        v35 = 1024;
        v36 = 4656;
        v12 = "%{public}s:%i Polling config is not using ECP";
LABEL_22:
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 0x12u);
      }
    }
    v23 = a2 & 1;
    v24 = (a2 >> 1) & 1;
    v25 = (a2 >> 5) & 1;
    v26 = (a2 >> 6) & 1;
    *(_DWORD *)(v5 + 568) = a3;
    *(_BYTE *)(v5 + 725) = (a2 & 0x1000) != 0;
    v27 = (a2 >> 7) & 1;
    dispatch_get_specific(*v10);
    v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v28)
      v28(6, "%s:%i Polling cfg: A:%d B:%d F:%d 15693:%d S:%d S2:%d S3:%d CustomECP:%d VAS_ECP:%d frameRF:%d", "NFDriverSetPollingConfig", 4674, a2 & 1, (a2 >> 1) & 1, v32, v6, (a2 >> 5) & 1, (a2 >> 6) & 1, (a2 >> 7) & 1, (*(_DWORD *)(v5 + 656) >> 11) & 1, (*(_DWORD *)(v5 + 656) >> 12) & 1, *(unsigned __int8 *)(v5 + 725));
    dispatch_get_specific(*v10);
    v29 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v30 = *(_DWORD *)(v5 + 656);
      v31 = *(unsigned __int8 *)(v5 + 725);
      *(_DWORD *)buf = 136449026;
      v34 = "NFDriverSetPollingConfig";
      v35 = 1024;
      v36 = 4674;
      v37 = 1024;
      v38 = v23;
      v39 = 1024;
      v40 = v24;
      v41 = 1024;
      v42 = v32;
      v43 = 1024;
      v44 = v6;
      v45 = 1024;
      v46 = v25;
      v47 = 1024;
      v48 = v26;
      v49 = 1024;
      v50 = v27;
      v51 = 1024;
      v52 = (v30 >> 11) & 1;
      v53 = 1024;
      v54 = (v30 >> 12) & 1;
      v55 = 1024;
      v56 = v31;
      v16 = "%{public}s:%i Polling cfg: A:%d B:%d F:%d 15693:%d S:%d S2:%d S3:%d CustomECP:%d VAS_ECP:%d frameRF:%d";
      v17 = v29;
      v18 = OS_LOG_TYPE_DEFAULT;
      v19 = 78;
      goto LABEL_27;
    }
    return;
  }
  v13 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v14)
    v14(3, "%s:%i Invalid param", "NFDriverSetPollingConfig", 4627);
  dispatch_get_specific(*v13);
  v15 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v34 = "NFDriverSetPollingConfig";
    v35 = 1024;
    v36 = 4627;
    v16 = "%{public}s:%i Invalid param";
    v17 = v15;
    v18 = OS_LOG_TYPE_ERROR;
    v19 = 18;
LABEL_27:
    _os_log_impl(&dword_216EC7000, v17, v18, v16, buf, v19);
  }
}

uint64_t NFDriverGetStackBreadcrumb(uint64_t a1)
{
  const void **v1;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v3;
  uint64_t v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  if (a1 && !sub_216EE9DA0(a1, &v5, 0, 0, 0, 0))
  {
    v1 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(5, "%s:%i Get stack breadcrumb failed", "NFDriverGetStackBreadcrumb", 5678);
    dispatch_get_specific(*v1);
    v3 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v7 = "NFDriverGetStackBreadcrumb";
      v8 = 1024;
      v9 = 5678;
      _os_log_impl(&dword_216EC7000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Get stack breadcrumb failed", buf, 0x12u);
    }
  }
  return v5;
}

void NFDriverClose(uint64_t a1)
{
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  NSObject *v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t *v14;
  NSObject *v15;
  _QWORD block[7];
  _BYTE buf[32];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i ", "NFDriverClose", 4558);
  dispatch_get_specific(*v2);
  v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverClose";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4558;
    _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ", buf, 0x12u);
  }
  v5 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(v5 + 722) = 0;
  if (*(_BYTE *)(a1 + 57))
    NFDriverUnloadStackAndLeaveHWEnabled(a1, 0);
  v6 = MEMORY[0x24BDAC760];
  if (*(_QWORD *)(v5 + 544))
  {
    v7 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v7[2] + 8));
    v8 = v7[2];
    ++*(_QWORD *)v8;
    pthread_mutex_unlock((pthread_mutex_t *)(v8 + 8));
    v9 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)buf = v6;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_216F049EC;
    *(_QWORD *)&buf[24] = &unk_24D65F6F0;
    v18 = a1;
    v19 = v7;
    dispatch_async_and_wait(v9, buf);
    if (sub_216EE0ECC(v7))
    {
      dispatch_get_specific(*v2);
      v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10)
        v10(3, "%s:%i status=0x%04llX", "NFDriverClose", 4569, *v7);
      dispatch_get_specific(*v2);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = *v7;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "NFDriverClose";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4569;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v12;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      v13 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
      *(_QWORD *)buf = v6;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = sub_216EE4564;
      *(_QWORD *)&buf[24] = &unk_24D65ED38;
      v18 = a1;
      dispatch_async(v13, buf);
    }
    sub_216EE0D6C((void **)v7);
    *(_QWORD *)(v5 + 544) = 0;
  }
  byte_253E47179 = 0;
  dispatch_release(*(dispatch_object_t *)(v5 + 520));
  *(_QWORD *)(v5 + 520) = 0;
  v14 = sub_216EE0A24();
  v15 = *(NSObject **)(v5 + 528);
  block[0] = v6;
  block[1] = 0x40000000;
  block[2] = sub_216EED43C;
  block[3] = &unk_24D65F288;
  block[4] = v5;
  block[5] = a1;
  block[6] = v14;
  dispatch_barrier_async(v15, block);
  sub_216EE0ECC(v14);
  sub_216EE0D6C((void **)v14);
}

uint64_t sub_216EED43C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 528));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 528) = 0;
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 536));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 536) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) = 0;
  free(*(void **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(void **)(v2 + 8);
  if (v3)
  {
    free(v3);
    v2 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(v2 + 8) = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(v4 + 16);
  if (v5)
  {
    free(v5);
    v4 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(v4 + 16) = 0;
  free(*(void **)(a1 + 40));
  return sub_216EE0DE8(*(_QWORD **)(a1 + 48), 0);
}

void NFDriverPreventReset(uint64_t a1, int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD block[5];
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Setting prevent reset to %d", "NFDriverPreventReset", 4610, a2);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v11 = "NFDriverPreventReset";
    v12 = 1024;
    v13 = 4610;
    v14 = 1024;
    v15 = a2;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting prevent reset to %d", buf, 0x18u);
  }
  v7 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(v7 + 728) = a2;
  byte_253E47179 = a2;
  if ((a2 & 1) == 0)
  {
    if (*(_WORD *)(v7 + 720))
    {
      v8 = *(NSObject **)(v7 + 528);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 0x40000000;
      block[2] = sub_216EED630;
      block[3] = &unk_24D65F2A8;
      block[4] = a1;
      dispatch_async(v8, block);
    }
  }
}

uint64_t sub_216EED630(uint64_t a1)
{
  return NFDriverSimulateCrash(*(_QWORD *)(a1 + 32), *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 720));
}

uint64_t NFDriverSetPollingProfile(uint64_t a1, unsigned int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  unint64_t v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  int v12;
  __int16 v13;
  void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  void *v17;
  uint64_t v18;
  int v19;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  void **v23;
  _BYTE v24[4];
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  void *v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i profile: %d", "NFDriverSetPollingProfile", 4679, a2);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v26 = "NFDriverSetPollingProfile";
    v27 = 1024;
    v28 = 4679;
    v29 = 1024;
    LODWORD(v30) = a2;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i profile: %d", buf, 0x18u);
  }
  if (a2 >= 5)
  {
    dispatch_get_specific(*v4);
    v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8)
      v8(3, "%s:%i Unknown poll mode profile 0x%0x, using default", "NFDriverSetPollingProfile", 4696, 0);
    dispatch_get_specific(*v4);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v26 = "NFDriverSetPollingProfile";
      v27 = 1024;
      v28 = 4696;
      v29 = 1024;
      LODWORD(v30) = 0;
      _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown poll mode profile 0x%0x, using default", buf, 0x18u);
    }
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = 0x63430100uLL >> (8 * a2);
  }
  if (*(_BYTE *)(a1 + 60) || *(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 36))
  {
    if (!sub_216EE7B4C(a1, 0, 0, 0, 0, 0, 0))
    {
      dispatch_get_specific(*v4);
      v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10)
        v10(3, "%s:%i Failed to stop discovery", "NFDriverSetPollingProfile", 4705);
      dispatch_get_specific(*v4);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v26 = "NFDriverSetPollingProfile";
        v27 = 1024;
        v28 = 4705;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
      }
    }
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  v13 = sub_216EE6D80(a1, 18);
  v24[0] = HIBYTE(v13);
  v24[1] = v13;
  v24[2] = 1;
  v24[3] = v7;
  v23 = (void **)sub_216EE5100(4u, v24);
  v14 = (void **)sub_216EE4D10(a1, 37025, (uint64_t)v23, 0);
  if (sub_216EE0ECC((uint64_t *)v14))
  {
    dispatch_get_specific(*v4);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(3, "%s:%i status=0x%04llX", "NFDriverSetPollingProfile", 4716, *v14);
    dispatch_get_specific(*v4);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = *v14;
      *(_DWORD *)buf = 136446722;
      v26 = "NFDriverSetPollingProfile";
      v27 = 1024;
      v28 = 4716;
      v29 = 2048;
      v30 = v17;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_216EE0D6C(v14);
    sub_216EE5198(&v23);
    return 0;
  }
  sub_216EE0D6C(v14);
  sub_216EE5198(&v23);
  *(_DWORD *)(a1 + 40) = a2;
  v18 = 1;
  if (v12)
  {
    v19 = *(_BYTE *)(a1 + 62) ? 1 : 2;
    if (!sub_216EE7B4C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v19))
    {
      dispatch_get_specific(*v4);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(3, "%s:%i Failed to update discovery", "NFDriverSetPollingProfile", 4728);
      dispatch_get_specific(*v4);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v26 = "NFDriverSetPollingProfile";
        v27 = 1024;
        v28 = 4728;
        _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to update discovery", buf, 0x12u);
      }
      return 0;
    }
  }
  return v18;
}

void NFDriverSetExpressConfig(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  unsigned int v8;
  NSObject *v9;
  unsigned int v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint32_t v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (NF_isFeatureSupported())
  {
    if (a1)
    {
      v4 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)(v4 + 660) = 0;
      v5 = a2 & 7 | (8 * ((a2 >> 5) & 1)) | (a2 >> 1) & 0x20 | (a2 >> 3) & 0x10;
      if ((a2 & 0x10) != 0)
        LOBYTE(v5) = v5 | 6;
      *(_BYTE *)(v4 + 660) = v5;
      v6 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
      {
        v8 = *(unsigned __int8 *)(v4 + 660);
        Logger(6, "%s:%i Express cfg: Transit:%d Access:%d Generic-A:%d SinglePoll:%d Block:%d Debug:%d", "NFDriverSetExpressConfig", 4766, v8 & 1, (v8 >> 1) & 1, (v8 >> 2) & 1, (v8 >> 3) & 1, (v8 >> 5) & 1, (v8 >> 4) & 1);
      }
      dispatch_get_specific(*v6);
      v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(unsigned __int8 *)(v4 + 660);
        *(_DWORD *)buf = 136448002;
        v19 = "NFDriverSetExpressConfig";
        v20 = 1024;
        v21 = 4766;
        v22 = 1024;
        v23 = v10 & 1;
        v24 = 1024;
        v25 = (v10 >> 1) & 1;
        v26 = 1024;
        v27 = (v10 >> 2) & 1;
        v28 = 1024;
        v29 = (v10 >> 3) & 1;
        v30 = 1024;
        v31 = (v10 >> 5) & 1;
        v32 = 1024;
        v33 = (v10 >> 4) & 1;
        v11 = "%{public}s:%i Express cfg: Transit:%d Access:%d Generic-A:%d SinglePoll:%d Block:%d Debug:%d";
        v12 = v9;
        v13 = OS_LOG_TYPE_DEFAULT;
        v14 = 54;
LABEL_13:
        _os_log_impl(&dword_216EC7000, v12, v13, v11, buf, v14);
      }
    }
    else
    {
      v15 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16)
        v16(3, "%s:%i Invalid param", "NFDriverSetExpressConfig", 4742);
      dispatch_get_specific(*v15);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v19 = "NFDriverSetExpressConfig";
        v20 = 1024;
        v21 = 4742;
        v11 = "%{public}s:%i Invalid param";
        v12 = v17;
        v13 = OS_LOG_TYPE_ERROR;
        v14 = 18;
        goto LABEL_13;
      }
    }
  }
}

uint64_t NFDriverSetCallback(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a2) = a3;
  *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a2 + 248) = a4;
  return result;
}

void sub_216EEDD48(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a3);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverUpdateFirmware(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v7;
  const void **v8;
  int v9;
  int v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  int v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  NSObject *v27;
  unsigned __int8 **v28;
  void **v29;
  _BYTE buf[40];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v29 = (void **)sub_216EE5100(*(_DWORD *)(a2 + 8), *(const void **)a2);
  v7 = 0;
  v28 = (unsigned __int8 **)sub_216EE5100(2u, 0);
  v8 = (const void **)MEMORY[0x24BEDCDB0];
  while (1)
  {
    if (v7 > 1)
      v9 = 1;
    else
      v9 = a4;
    if (v9)
      v10 = 2556;
    else
      v10 = 2559;
    dispatch_get_specific(*v8);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Attempt %d of %d", "NFDriverUpdateFirmware", 4812, v7, a3);
    dispatch_get_specific(*v8);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "NFDriverUpdateFirmware";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4812;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v7;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = a3;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Attempt %d of %d", buf, 0x1Eu);
    }
    v13 = sub_216EE4D10(a1, v10, (uint64_t)v29, (uint64_t)v28);
    if (!sub_216EE0ECC(v13))
      break;
    v14 = *v13;
    dispatch_get_specific(*v8);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14 == 60)
    {
      if (v15)
        v15(6, "%s:%i Already up-to-date", "NFDriverUpdateFirmware", 4823);
      dispatch_get_specific(*v8);
      v27 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverUpdateFirmware";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4823;
        v24 = "%{public}s:%i Already up-to-date";
        v25 = v27;
        v26 = 18;
        goto LABEL_28;
      }
      goto LABEL_29;
    }
    if (v15)
      v15(3, "%s:%i status=0x%04llX, previous state %d", "NFDriverUpdateFirmware", 4831, *v13, **v28);
    dispatch_get_specific(*v8);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = *v13;
      v18 = **v28;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "NFDriverUpdateFirmware";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4831;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v18;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX, previous state %d", buf, 0x22u);
    }
    sub_216EE0D6C((void **)v13);
    NFDriverRunIntegrityDebug(a1);
    v19 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)buf = MEMORY[0x24BDAC760];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_216EE4564;
    *(_QWORD *)&buf[24] = &unk_24D65ED38;
    *(_QWORD *)&buf[32] = a1;
    dispatch_async(v19, buf);
    if ((a3 & ~(a3 >> 31)) + 1 == ++v7)
    {
      sub_216EE4970(a1);
      sub_216EE5198((void ***)&v28);
      sub_216EE5198(&v29);
      return 1;
    }
  }
  dispatch_get_specific(*v8);
  v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v21)
    v21(6, "%s:%i Update successful, previous session state was %d", "NFDriverUpdateFirmware", 4816, **v28);
  dispatch_get_specific(*v8);
  v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = **v28;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "NFDriverUpdateFirmware";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4816;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v23;
    v24 = "%{public}s:%i Update successful, previous session state was %d";
    v25 = v22;
    v26 = 24;
LABEL_28:
    _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_DEFAULT, v24, buf, v26);
  }
LABEL_29:
  sub_216EE0D6C((void **)v13);
  sub_216EE5198((void ***)&v28);
  sub_216EE5198(&v29);
  sub_216EEE1A8(a1);
  return 0;
}

void sub_216EEE1A8(uint64_t a1)
{
  unsigned int v2;
  int HasVirtualGPIO;
  uint64_t *v4;
  uint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  void (*v9)(uint64_t, const char *, ...);
  const char *v10;
  NSObject *v11;
  const char *v12;
  void **v13;
  __int16 v14;
  char v15;
  char v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = NFGetProductType();
  if (v2 <= 0x18)
  {
    HasVirtualGPIO = 1;
    if (((1 << v2) & 0x100C000) != 0)
    {
      HasVirtualGPIO = NFHardwareHasVirtualGPIO();
    }
    else if (((1 << v2) & 0x300000) == 0)
    {
      return;
    }
    v14 = 2208;
    v15 = 1;
    v16 = HasVirtualGPIO;
    v13 = (void **)sub_216EE5100(4u, &v14);
    v4 = sub_216EE4D10(a1, 240, (uint64_t)v13, 0);
    v5 = sub_216EE0ECC(v4);
    v6 = (const void **)MEMORY[0x24BEDCDB0];
    if (v5)
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i failed to set vGPIO tag (0xA008)", "_NFDriverConfigureHardware", 4347);
      dispatch_get_specific(*v6);
      v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v18 = "_NFDriverConfigureHardware";
        v19 = 1024;
        v20 = 4347;
        _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to set vGPIO tag (0xA008)", buf, 0x12u);
      }
    }
    sub_216EE0D6C((void **)v4);
    sub_216EE5198(&v13);
    dispatch_get_specific(*v6);
    v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9)
    {
      if (HasVirtualGPIO)
        v10 = "vGPIO";
      else
        v10 = "physical GPIO";
      v9(6, "%s:%i %s configured successfully", "_NFDriverConfigureHardware", 4352, v10);
    }
    dispatch_get_specific(*v6);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (HasVirtualGPIO)
        v12 = "vGPIO";
      else
        v12 = "physical GPIO";
      *(_DWORD *)buf = 136446722;
      v18 = "_NFDriverConfigureHardware";
      v19 = 1024;
      v20 = 4352;
      v21 = 2080;
      v22 = v12;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s configured successfully", buf, 0x1Cu);
    }
  }
}

BOOL sub_216EEE3F4(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  BOOL v6;
  const void **v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  _BOOL8 result;
  const char *v11;
  BOOL v12;
  BOOL v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  const void **v16;
  void (*v17)(uint64_t, const char *, ...);
  const void **v19;
  void (*v20)(uint64_t, const char *, ...);
  const void **v21;
  void (*Logger)(uint64_t, const char *, ...);
  const void **v23;
  void (*v24)(uint64_t, const char *, ...);
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *(_DWORD *)(a1 + 44);
  if (*a2)
    goto LABEL_2;
  if (v5)
    v12 = v5 == 6;
  else
    v12 = 1;
  if (!v12)
  {
    if (!sub_216F04C80(a1, 1, 1u))
    {
      v21 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Failed to power off eSE", "_NFDriverSetSecureElementRouting", 4913);
      dispatch_get_specific(*v21);
      v9 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "_NFDriverSetSecureElementRouting";
        v27 = 1024;
        v28 = 4913;
        v11 = "%{public}s:%i Failed to power off eSE";
        goto LABEL_52;
      }
      return result;
    }
    v5 = *(_DWORD *)(a1 + 44);
    v4 = *a2;
LABEL_2:
    v6 = v4 != 6 || v5 == 6;
    if (!v6 && !sub_216F04C80(a1, 1, 3u))
    {
      v7 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v8)
        v8(3, "%s:%i Failed to fully power off eSE", "_NFDriverSetSecureElementRouting", 4922);
      dispatch_get_specific(*v7);
      v9 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "_NFDriverSetSecureElementRouting";
        v27 = 1024;
        v28 = 4922;
        v11 = "%{public}s:%i Failed to fully power off eSE";
LABEL_52:
        _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
        return 0;
      }
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 48))
    v13 = a2[1] == 0;
  else
    v13 = 0;
  if (v13 && !sub_216F04C80(a1, 4, 1u))
  {
    v16 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v17)
      v17(3, "%s:%i Failed to power off Host", "_NFDriverSetSecureElementRouting", 4931);
    dispatch_get_specific(*v16);
    v9 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "_NFDriverSetSecureElementRouting";
      v27 = 1024;
      v28 = 4931;
      v11 = "%{public}s:%i Failed to power off Host";
      goto LABEL_52;
    }
    return result;
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 24) + 496))
    goto LABEL_37;
  if (*a2 == 2)
  {
    if (!sub_216F04C80(a1, 1, 0))
    {
      v23 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24)
        v24(3, "%s:%i Failed to set eSE to virtual mode", "_NFDriverSetSecureElementRouting", 4949);
      dispatch_get_specific(*v23);
      v9 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "_NFDriverSetSecureElementRouting";
        v27 = 1024;
        v28 = 4949;
        v11 = "%{public}s:%i Failed to set eSE to virtual mode";
        goto LABEL_52;
      }
      return result;
    }
    goto LABEL_37;
  }
  if (*a2 != 1 || sub_216F04C80(a1, 1, 2u))
  {
LABEL_37:
    if (a2[1] != 2 || sub_216F04C80(a1, 4, 0))
      return 1;
    v19 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20)
      v20(3, "%s:%i Failed to set HOST to virtual mode", "_NFDriverSetSecureElementRouting", 4964);
    dispatch_get_specific(*v19);
    v9 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "_NFDriverSetSecureElementRouting";
      v27 = 1024;
      v28 = 4964;
      v11 = "%{public}s:%i Failed to set HOST to virtual mode";
      goto LABEL_52;
    }
    return result;
  }
  v14 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15)
    v15(3, "%s:%i Failed to set eSE to wired mode", "_NFDriverSetSecureElementRouting", 4942);
  dispatch_get_specific(*v14);
  v9 = NFSharedLogGetLogger();
  result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "_NFDriverSetSecureElementRouting";
    v27 = 1024;
    v28 = 4942;
    v11 = "%{public}s:%i Failed to set eSE to wired mode";
    goto LABEL_52;
  }
  return result;
}

uint64_t NFDriverRestartDiscovery(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  const void **v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  const char *v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (a2 && !sub_216EE7B4C(a1, 0, 0, 0, 0, 0, 0))
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(4, "%s:%i Failed to stop discovery", "NFDriverRestartDiscovery", 5195);
    dispatch_get_specific(*v10);
    v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446466;
    v14 = "NFDriverRestartDiscovery";
    v15 = 1024;
    v16 = 5195;
    v9 = "%{public}s:%i Failed to stop discovery";
    goto LABEL_15;
  }
  v4 = 1;
  if (*(_BYTE *)(a1 + 62))
    v5 = 1;
  else
    v5 = 2;
  if (!sub_216EE7B4C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), a2 ^ 1, *(unsigned __int8 *)(a1 + 61), v5))
  {
    v6 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7)
      v7(3, "%s:%i Failed to update discovery", "NFDriverRestartDiscovery", 5206);
    dispatch_get_specific(*v6);
    v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446466;
    v14 = "NFDriverRestartDiscovery";
    v15 = 1024;
    v16 = 5206;
    v9 = "%{public}s:%i Failed to update discovery";
LABEL_15:
    _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
    return 0;
  }
  return v4;
}

BOOL NFDriverIsSecureElementEnumerated(uint64_t a1, int a2)
{
  _BOOL8 result;
  uint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  result = 0;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 496);
      goto LABEL_9;
    case 2:
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 504);
      goto LABEL_9;
    case 4:
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 512);
LABEL_9:
      result = v5 != 0;
      break;
    default:
      v6 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Unknown value: %d", "NFDriverIsSecureElementEnumerated", 5234, a2);
      dispatch_get_specific(*v6);
      v8 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446722;
        v10 = "NFDriverIsSecureElementEnumerated";
        v11 = 1024;
        v12 = 5234;
        v13 = 1024;
        v14 = a2;
        _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown value: %d", buf, 0x18u);
        result = 0;
      }
      break;
  }
  return result;
}

BOOL NFDriverSetSecureElementAlwaysOn(uint64_t a1, int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  int v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  uint64_t v17;
  BOOL v18;
  NSObject *v19;
  unsigned int v20;
  int v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  __int16 v31;
  _BYTE buf[32];
  uint64_t v33;
  uint64_t *v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  if (a2 && !*(_BYTE *)(a1 + 60))
  {
    v7 = 0;
  }
  else
  {
    if (!sub_216EE7B4C(a1, 0, 0, 0, 0, 0, 0))
    {
      dispatch_get_specific(*v4);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(4, "%s:%i Failed to stop polling", "NFDriverSetSecureElementAlwaysOn", 5250);
      dispatch_get_specific(*v4);
      v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverSetSecureElementAlwaysOn";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5250;
        _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop polling", buf, 0x12u);
      }
    }
    v7 = 1;
  }
  dispatch_get_specific(*v4);
  v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8)
    v8(6, "%s:%i type=0x%x", "_Async_NFDriverSetSEAlwaysOn", 3298, a2);
  dispatch_get_specific(*v4);
  v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "_Async_NFDriverSetSEAlwaysOn";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3298;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i type=0x%x", buf, 0x18u);
  }
  v10 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v10[2] + 8));
  v11 = v10[2];
  ++*(_QWORD *)v11;
  pthread_mutex_unlock((pthread_mutex_t *)(v11 + 8));
  v12 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v13 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216F05598;
  *(_QWORD *)&buf[24] = &unk_24D65F750;
  v35 = a2;
  v33 = a1;
  v34 = v10;
  dispatch_async_and_wait(v12, buf);
  v14 = sub_216EE0ECC(v10);
  if (v14)
  {
    dispatch_get_specific(*v4);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(3, "%s:%i status=0x%04llX", "NFDriverSetSecureElementAlwaysOn", 5256, *v10);
    dispatch_get_specific(*v4);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v17 = *v10;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverSetSecureElementAlwaysOn";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5256;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v17;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_216EE0D6C((void **)v10);
    v31 = 0;
    v18 = sub_216EE9DA0(a1, 0, 0, 0, &v31, 0);
    v19 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)buf = v13;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_216EE4564;
    *(_QWORD *)&buf[24] = &unk_24D65ED38;
    v33 = a1;
    dispatch_async(v19, buf);
    if (v18)
    {
      if (v31 == 44 || v31 == 34)
        NFDriverSimulateCrash(a1, 57005);
      return v14 == 0;
    }
    dispatch_get_specific(*v4);
    v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22)
      v22(5, "%s:%i Get stack breadcrumb failed", "NFDriverSetSecureElementAlwaysOn", 5263);
    dispatch_get_specific(*v4);
    v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "NFDriverSetSecureElementAlwaysOn";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5263;
      v24 = "%{public}s:%i Get stack breadcrumb failed";
      v25 = v23;
      v26 = OS_LOG_TYPE_DEFAULT;
LABEL_43:
      _os_log_impl(&dword_216EC7000, v25, v26, v24, buf, 0x12u);
    }
  }
  else
  {
    sub_216EE0D6C((void **)v10);
    if ((a2 & 1) == 0)
      sub_216EEF158(a1, 1);
    if (v7)
    {
      v20 = *(_DWORD *)(a1 + 36);
      v21 = *(unsigned __int8 *)(a1 + 60);
      if (!v20)
      {
        if (*(_BYTE *)(a1 + 60))
        {
          v21 = 1;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 32))
            return v14 == 0;
          v21 = 0;
        }
      }
      v27 = *(_BYTE *)(a1 + 62) ? 1 : 2;
      if (!sub_216EE7B4C(a1, *(_DWORD *)(a1 + 32), v20, v21 != 0, 0, *(unsigned __int8 *)(a1 + 61), v27))
      {
        dispatch_get_specific(*v4);
        v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v28)
          v28(4, "%s:%i Failed to restore discoverty configuration", "NFDriverSetSecureElementAlwaysOn", 5285);
        dispatch_get_specific(*v4);
        v29 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "NFDriverSetSecureElementAlwaysOn";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5285;
          v24 = "%{public}s:%i Failed to restore discoverty configuration";
          v25 = v29;
          v26 = OS_LOG_TYPE_ERROR;
          goto LABEL_43;
        }
      }
    }
  }
  return v14 == 0;
}

BOOL sub_216EEF158(uint64_t a1, int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  uint64_t v16;
  BOOL v17;
  NSObject *v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  __int16 v22;
  _BYTE buf[32];
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i enable=%d", "_NFDriverSetStandbyMode", 4002, a2);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "_NFDriverSetStandbyMode";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4002;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enable=%d", buf, 0x18u);
  }
  dispatch_get_specific(*v4);
  v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7)
    v7(6, "%s:%i mode=0x%x", "_Async_NFDriverSetStandbyMode", 970, a2);
  dispatch_get_specific(*v4);
  v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "_Async_NFDriverSetStandbyMode";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 970;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i mode=0x%x", buf, 0x18u);
  }
  v9 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v9[2] + 8));
  v10 = v9[2];
  ++*(_QWORD *)v10;
  pthread_mutex_unlock((pthread_mutex_t *)(v10 + 8));
  v11 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v12 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216F05700;
  *(_QWORD *)&buf[24] = &unk_24D65F770;
  v26 = a2;
  v24 = a1;
  v25 = v9;
  dispatch_async_and_wait(v11, buf);
  v13 = sub_216EE0ECC(v9);
  if (v13)
  {
    dispatch_get_specific(*v4);
    v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14)
      v14(3, "%s:%i status=0x%04llX", "_NFDriverSetStandbyMode", 4007, *v9);
    dispatch_get_specific(*v4);
    v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = *v9;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverSetStandbyMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4007;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v16;
      _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_216EE0D6C((void **)v9);
    v22 = 0;
    v17 = sub_216EE9DA0(a1, 0, 0, 0, &v22, 0);
    v18 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)buf = v12;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_216EE4564;
    *(_QWORD *)&buf[24] = &unk_24D65ED38;
    v24 = a1;
    dispatch_async(v18, buf);
    if (v17)
    {
      if (v22 == 44 || v22 == 34)
        NFDriverSimulateCrash(a1, 57005);
    }
    else
    {
      dispatch_get_specific(*v4);
      v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19)
        v19(5, "%s:%i Get stack breadcrumb failed", "_NFDriverSetStandbyMode", 4014);
      dispatch_get_specific(*v4);
      v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_NFDriverSetStandbyMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4014;
        _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Get stack breadcrumb failed", buf, 0x12u);
      }
    }
  }
  else
  {
    sub_216EE0D6C((void **)v9);
  }
  return v13 == 0;
}

uint64_t NFDriverSetEmbeddedSecureElementPower(uint64_t a1, int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  _QWORD v10[2];
  int v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v9 = 0;
  v8 = 6;
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i eSE, enabled=%d", "NFDriverSetEmbeddedSecureElementPower", 5302, a2);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v13 = "NFDriverSetEmbeddedSecureElementPower";
    v14 = 1024;
    v15 = 5302;
    v16 = 1024;
    v17 = a2;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i eSE, enabled=%d", buf, 0x18u);
  }
  if (!a2)
    return NFDriverSetConfiguration(a1, (unsigned __int8 *)v10, &v8);
  LODWORD(v8) = 1;
  result = NFDriverSetConfiguration(a1, (unsigned __int8 *)v10, &v8);
  if ((_DWORD)result)
  {
    usleep(0x7D0u);
    return 1;
  }
  return result;
}

uint64_t NFDriverSecureElementGetResponseStatus(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[1];
  if (v1 >= 2)
    return bswap32(*(unsigned __int16 *)(v1 + *a1 - 2)) >> 16;
  else
    return 0;
}

uint64_t NFDriverSecureElementSendCommand(uint64_t a1, unsigned int a2, unsigned __int8 a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, uint64_t a8)
{
  return NFDriverSecureElementSendCommandToOS(a1, a2, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t NFDriverSecureElementSendCommandToOS(uint64_t a1, unsigned int a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, uint64_t a9)
{
  unint64_t v16;
  int v17;
  unsigned __int8 **v18;
  unsigned __int8 **v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void **v25;
  uint64_t v26;
  void (*v27)(uint64_t, const char *, ...);
  int *v28;
  char *v29;
  int *v30;
  NSObject *v31;
  int *v32;
  char *v33;
  int v34;
  const char *v35;
  uint64_t v36;
  const void **v38;
  uint64_t Logger;
  void (*v40)(uint64_t, const char *, ...);
  int *v41;
  char *v42;
  int *v43;
  int *v44;
  char *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  char *v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  if (a9)
  {
    v16 = *(_QWORD *)(a9 + 8);
    if (v16 > 0xFF)
    {
      if (v16 >> 16)
      {
        v38 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = NFLogGetLogger();
        if (Logger)
        {
          v40 = (void (*)(uint64_t, const char *, ...))Logger;
          v41 = __error();
          v42 = strerror(*v41);
          v43 = __error();
          v40(3, "%s:%i \"%s\" errno=%d Payload length overflow error. ", "NFDriverSecureElementSendCommandToOS", 5359, v42, *v43);
        }
        dispatch_get_specific(*v38);
        v31 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          return 0;
        v44 = __error();
        v45 = strerror(*v44);
        v46 = *__error();
        *(_DWORD *)buf = 136446978;
        v50 = "NFDriverSecureElementSendCommandToOS";
        v51 = 1024;
        v52 = 5359;
        v53 = 2080;
        v54 = v45;
        v55 = 1024;
        v56 = v46;
        v35 = "%{public}s:%i \"%s\" errno=%d Payload length overflow error. ";
        goto LABEL_23;
      }
      v48 = a1;
      v17 = v16 + 8;
    }
    else
    {
      v48 = a1;
      v17 = v16 + 6;
    }
  }
  else
  {
    v48 = a1;
    v17 = 5;
  }
  v18 = (unsigned __int8 **)NFDataCreateWithLength();
  if (v18)
  {
    v19 = v18;
    v47 = a2;
    v20 = a8;
    v21 = *v18;
    *v21 = a4;
    v21[1] = a5;
    v21[2] = a6;
    v21[3] = a7;
    if (a9)
    {
      v22 = *(_QWORD *)(a9 + 8);
      if (v22 < 0x100)
      {
        v23 = 5;
        v24 = 4;
LABEL_17:
        v21[v24] = v22;
        memcpy(&v21[v23], *(const void **)a9, *(_QWORD *)(a9 + 8));
        goto LABEL_18;
      }
      if (!(v22 >> 16))
      {
        v21[4] = 0;
        v21[5] = BYTE1(v22);
        v23 = 7;
        v24 = 6;
        goto LABEL_17;
      }
    }
LABEL_18:
    v21[v17 - 1] = v20;
    v36 = NFDriverSecureElementTransceive(v48, v47, a3, v19, 0, 0);
    NFDataRelease();
    return v36;
  }
  v25 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v26 = NFLogGetLogger();
  if (v26)
  {
    v27 = (void (*)(uint64_t, const char *, ...))v26;
    v28 = __error();
    v29 = strerror(*v28);
    v30 = __error();
    v27(3, "%s:%i \"%s\" errno=%d Unable to allocate memory for capdu. ", "NFDriverSecureElementSendCommandToOS", 5366, v29, *v30);
  }
  dispatch_get_specific(*v25);
  v31 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    v32 = __error();
    v33 = strerror(*v32);
    v34 = *__error();
    *(_DWORD *)buf = 136446978;
    v50 = "NFDriverSecureElementSendCommandToOS";
    v51 = 1024;
    v52 = 5366;
    v53 = 2080;
    v54 = v33;
    v55 = 1024;
    v56 = v34;
    v35 = "%{public}s:%i \"%s\" errno=%d Unable to allocate memory for capdu. ";
LABEL_23:
    _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, v35, buf, 0x22u);
  }
  return 0;
}

uint64_t NFDriverSecureElementTransceive(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, int *a5, char a6)
{
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  uint64_t v13;
  int v14;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  void (*v24)(uint64_t, const char *, ...);
  NSObject *v25;
  unsigned __int8 *v26;
  const void **v27;
  void (*v28)(uint64_t, const char *, ...);
  const void **v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  unint64_t v32;
  const void **v33;
  NSObject *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  NSObject *v42;
  unint64_t v43;
  const void **v44;
  NSObject *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  NSObject *v53;
  unint64_t v54;
  const void **v55;
  NSObject *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  NSObject *v64;
  unint64_t v65;
  const void **v66;
  NSObject *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  NSObject *v75;
  _QWORD *v76;
  _QWORD *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t v80;
  _BYTE *v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  void (*v90)(uint64_t, const char *, ...);
  NSObject *v91;
  const void **v92;
  void (*v93)(uint64_t, const char *, ...);
  NSObject *v94;
  const void **v95;
  void (*v96)(uint64_t, const char *, ...);
  NSObject *v97;
  void *v98;
  const void **v99;
  void (*v100)(uint64_t, const char *, ...);
  NSObject *v101;
  char *v102;
  void (*v103)(uint64_t, const char *, ...);
  NSObject *v104;
  uint64_t v105;
  NSObject *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(_QWORD, uint64_t, _QWORD);
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, const char *, ...);
  NSObject *v114;
  unint64_t v115;
  const void **v116;
  void (*v117)(uint64_t, const char *, ...);
  NSObject *v118;
  unsigned __int8 *v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  int v126;
  NSObject *v127;
  unint64_t v128;
  const void **v129;
  void (*v130)(uint64_t, const char *, ...);
  NSObject *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  NSObject *v140;
  unint64_t v141;
  const void **v142;
  void (*v143)(uint64_t, const char *, ...);
  NSObject *v144;
  unsigned __int8 *v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  NSObject *v153;
  unint64_t v154;
  const void **v155;
  void (*v156)(uint64_t, const char *, ...);
  NSObject *v157;
  unsigned __int8 *v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  unint64_t v163;
  unint64_t v164;
  int v165;
  NSObject *v166;
  void (*v167)(uint64_t, const char *, ...);
  NSObject *v168;
  uint64_t v169;
  void (*v170)(_QWORD, uint64_t, uint64_t);
  char v172;
  int *v173;
  char v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  void *v183;
  void (*v184)(uint64_t, const char *, ...);
  void (*v185)(uint64_t, const char *, ...);
  void (*v186)(uint64_t, const char *, ...);
  void (*v187)(uint64_t, const char *, ...);
  _QWORD *v188;
  _QWORD v189[3];
  int v190;
  uint8_t v191[4];
  uint8_t *v192;
  __int16 v193;
  int v194;
  __int16 v195;
  const char *v196;
  __int16 v197;
  unsigned __int8 *v198;
  uint8_t buf[32];
  __int128 v200;
  uint64_t *v201;
  int v202;
  uint64_t v203;

  v203 = *MEMORY[0x24BDAC8D0];
  memset(v189, 0, sizeof(v189));
  v190 = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 723))
  {
    v7 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i SE in recovery", "NFDriverSecureElementTransceive", 7148);
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7148;
      v10 = "%{public}s:%i SE in recovery";
LABEL_6:
      v11 = v9;
      v12 = 18;
LABEL_7:
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, v10, buf, v12);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if ((NFDriverGetControllerInfo(a1, (uint64_t)v189) & 1) == 0)
  {
LABEL_163:
    if (a5)
    {
      v13 = 0;
      v14 = 1;
      goto LABEL_165;
    }
    return 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 560) & 2) == 0)
  {
    v20 = sub_216EF7660(a1, a2);
    if ((sub_216ED86D8(v20) & 1) == 0)
    {
      v29 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30)
        v30(3, "%s:%i Can't send to OS %d. Not available.", "NFDriverSecureElementTransceive", 7161, a3);
      dispatch_get_specific(*v29);
      v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7161;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        v10 = "%{public}s:%i Can't send to OS %d. Not available.";
        v11 = v31;
        v12 = 24;
        goto LABEL_7;
      }
      goto LABEL_8;
    }
  }
  v21 = sub_216EF7660(a1, a2);
  if (v21 && *(_QWORD *)(v21 + 8))
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 552);
    if ((v22 & 0x10) != 0)
    {
      if (byte_253E47164)
      {
        v23 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v24)
          v24(6, "%s:%i [C-APDU>] REDACTED %ld bytes", "NFDriverSecureElementTransceive", 7186, a4[1]);
        dispatch_get_specific(*v23);
        v25 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = a4[1];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7186;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v26;
          _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [C-APDU>] REDACTED %ld bytes", buf, 0x1Cu);
        }
      }
      else
      {
        v174 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 552);
        v176 = a3;
        v173 = a5;
        v172 = a6;
        switch((int)a3)
        {
          case 0:
            v200 = 0u;
            memset(buf, 0, sizeof(buf));
            v32 = (unint64_t)a4[1];
            v179 = *a4;
            v33 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v184 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            dispatch_get_specific(*v33);
            v34 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              v35 = a4[1];
              *(_DWORD *)v191 = 136315906;
              v192 = (uint8_t *)"NFDriverSecureElementTransceive";
              v193 = 1024;
              v194 = 7177;
              v195 = 2082;
              v196 = "[C-APDU>]";
              v197 = 2048;
              v198 = v35;
              _os_log_impl(&dword_216EC7000, v34, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
            }
            if (v184)
              v184(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7177, "[C-APDU>]", a4[1]);
            if (v32)
            {
              v36 = 0;
              do
              {
                v37 = 0;
                v38 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v36)];
                do
                {
                  v39 = v37 + 1;
                  v40 = v37 + 1 + v36;
                  v41 = sprintf(v38, "0x%02X ", v179[v36 + v37]);
                  if (v37 > 6)
                    break;
                  v38 += v41;
                  ++v37;
                }
                while (v40 < v32);
                dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                v42 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v191 = 136446210;
                  v192 = buf;
                  _os_log_impl(&dword_216EC7000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                }
                if (v184)
                  v184(6, "%s", (const char *)buf);
                v36 += v39;
              }
              while (v40 < v32);
            }
            goto LABEL_89;
          case 1:
            v200 = 0u;
            memset(buf, 0, sizeof(buf));
            v43 = (unint64_t)a4[1];
            v180 = *a4;
            v44 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v185 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            dispatch_get_specific(*v44);
            v45 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              v46 = a4[1];
              *(_DWORD *)v191 = 136315906;
              v192 = (uint8_t *)"NFDriverSecureElementTransceive";
              v193 = 1024;
              v194 = 7183;
              v195 = 2082;
              v196 = "[C-APDU UICC>]";
              v197 = 2048;
              v198 = v46;
              _os_log_impl(&dword_216EC7000, v45, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
            }
            if (v185)
              v185(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7183, "[C-APDU UICC>]", a4[1]);
            if (v43)
            {
              v47 = 0;
              do
              {
                v48 = 0;
                v49 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v47)];
                do
                {
                  v50 = v48 + 1;
                  v51 = v48 + 1 + v47;
                  v52 = sprintf(v49, "0x%02X ", v180[v47 + v48]);
                  if (v48 > 6)
                    break;
                  v49 += v52;
                  ++v48;
                }
                while (v51 < v43);
                dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                v53 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v191 = 136446210;
                  v192 = buf;
                  _os_log_impl(&dword_216EC7000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                }
                if (v185)
                  v185(6, "%s", (const char *)buf);
                v47 += v50;
              }
              while (v51 < v43);
            }
            goto LABEL_89;
          case 2:
            v200 = 0u;
            memset(buf, 0, sizeof(buf));
            v54 = (unint64_t)a4[1];
            v181 = *a4;
            v55 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v186 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            dispatch_get_specific(*v55);
            v56 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              v57 = a4[1];
              *(_DWORD *)v191 = 136315906;
              v192 = (uint8_t *)"NFDriverSecureElementTransceive";
              v193 = 1024;
              v194 = 7179;
              v195 = 2082;
              v196 = "[C-APDU System>]";
              v197 = 2048;
              v198 = v57;
              _os_log_impl(&dword_216EC7000, v56, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
            }
            if (v186)
              v186(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7179, "[C-APDU System>]", a4[1]);
            if (v54)
            {
              v58 = 0;
              do
              {
                v59 = 0;
                v60 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v58)];
                do
                {
                  v61 = v59 + 1;
                  v62 = v59 + 1 + v58;
                  v63 = sprintf(v60, "0x%02X ", v181[v58 + v59]);
                  if (v59 > 6)
                    break;
                  v60 += v63;
                  ++v59;
                }
                while (v62 < v54);
                dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                v64 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v191 = 136446210;
                  v192 = buf;
                  _os_log_impl(&dword_216EC7000, v64, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                }
                if (v186)
                  v186(6, "%s", (const char *)buf);
                v58 += v61;
              }
              while (v62 < v54);
            }
            goto LABEL_89;
          case 3:
            v200 = 0u;
            memset(buf, 0, sizeof(buf));
            v65 = (unint64_t)a4[1];
            v182 = *a4;
            v66 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v187 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            dispatch_get_specific(*v66);
            v67 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              v68 = a4[1];
              *(_DWORD *)v191 = 136315906;
              v192 = (uint8_t *)"NFDriverSecureElementTransceive";
              v193 = 1024;
              v194 = 7181;
              v195 = 2082;
              v196 = "[C-APDU Guest>]";
              v197 = 2048;
              v198 = v68;
              _os_log_impl(&dword_216EC7000, v67, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
            }
            if (v187)
              v187(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7181, "[C-APDU Guest>]", a4[1]);
            if (v65)
            {
              v69 = 0;
              do
              {
                v70 = 0;
                v71 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v69)];
                do
                {
                  v72 = v70 + 1;
                  v73 = v70 + 1 + v69;
                  v74 = sprintf(v71, "0x%02X ", v182[v69 + v70]);
                  if (v70 > 6)
                    break;
                  v71 += v74;
                  ++v70;
                }
                while (v73 < v65);
                dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                v75 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v191 = 136446210;
                  v192 = buf;
                  _os_log_impl(&dword_216EC7000, v75, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                }
                if (v187)
                  v187(6, "%s", (const char *)buf);
                v69 += v72;
              }
              while (v73 < v65);
            }
LABEL_89:
            a5 = v173;
            LOBYTE(v22) = v174;
            a3 = v176;
            a6 = v172;
            break;
          default:
            break;
        }
      }
    }
    v76 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200406E52F545uLL);
    if (v76)
    {
      v77 = v76;
      *v76 = 11319;
      *((_DWORD *)v76 + 2) = 666;
      v76[2] = a1;
      v78 = (unsigned __int8 *)malloc_type_calloc(0x2C37uLL, 1uLL, 0x100004077774924uLL);
      if (v78)
      {
        v79 = v78;
        v80 = *v77;
        v81 = malloc_type_calloc(1uLL, 0x30uLL, 0x101004089CF3E64uLL);
        if (v81)
        {
          v175 = v22;
          v188 = v77;
          v81[40] = a6;
          *((_DWORD *)v81 + 2) = a4[1];
          *(_QWORD *)v81 = *a4;
          *((_DWORD *)v81 + 6) = v80;
          v178 = (char *)v79;
          *((_QWORD *)v81 + 2) = v79;
          if (a3 <= 4)
            *((_DWORD *)v81 + 9) = dword_216F083B4[(int)a3];
          v177 = a3;
          v183 = v81;
          v82 = 1;
          v83 = MEMORY[0x24BDAC760];
          while (1)
          {
            sub_216EE4B88(a1);
            v84 = sub_216EE0A24();
            pthread_mutex_lock((pthread_mutex_t *)(v84[2] + 8));
            v85 = v84[2];
            ++*(_QWORD *)v85;
            pthread_mutex_unlock((pthread_mutex_t *)(v85 + 8));
            v84[1] = (uint64_t)v77;
            v86 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
            *(_QWORD *)buf = v83;
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = sub_216F05E38;
            *(_QWORD *)&buf[24] = &unk_24D65F7F0;
            v202 = a2;
            *(_QWORD *)&v200 = a1;
            *((_QWORD *)&v200 + 1) = v183;
            v201 = v84;
            dispatch_async_and_wait(v86, buf);
            v87 = sub_216EE0ECC(v84);
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 24) + 520));
            if (!v87)
            {
              sub_216EE0D6C((void **)v84);
              v102 = v178;
              if ((v175 & 0x10) != 0)
              {
                if (byte_253E47164)
                {
                  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                  v103 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                  if (v103)
                    v103(6, "%s:%i [R-APDU<] REDACTED %ld bytes", "NFDriverSecureElementTransceive", 7334, *v77);
                  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                  v104 = NFSharedLogGetLogger();
                  if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
                  {
                    v105 = *v77;
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 7334;
                    *(_WORD *)&buf[18] = 2048;
                    *(_QWORD *)&buf[20] = v105;
                    _os_log_impl(&dword_216EC7000, v104, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [R-APDU<] REDACTED %ld bytes", buf, 0x1Cu);
                  }
                }
                else
                {
                  switch((int)a3)
                  {
                    case 0:
                      v200 = 0u;
                      memset(buf, 0, sizeof(buf));
                      v115 = *v77;
                      v116 = (const void **)MEMORY[0x24BEDCDB0];
                      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                      v117 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      dispatch_get_specific(*v116);
                      v118 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                      {
                        v119 = (unsigned __int8 *)*v77;
                        *(_DWORD *)v191 = 136315906;
                        v192 = (uint8_t *)"NFDriverSecureElementTransceive";
                        v193 = 1024;
                        v194 = 7325;
                        v195 = 2082;
                        v196 = "[R-APDU<]";
                        v197 = 2048;
                        v198 = v119;
                        _os_log_impl(&dword_216EC7000, v118, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
                      }
                      if (v117)
                        v117(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7325, "[R-APDU<]", *v77);
                      if (v115)
                      {
                        v120 = 0;
                        do
                        {
                          v121 = 0;
                          v122 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v120)];
                          v123 = &v102[v120];
                          do
                          {
                            v124 = v121 + 1;
                            v125 = v121 + 1 + v120;
                            v126 = sprintf(v122, "0x%02X ", v123[v121]);
                            if (v121 > 6)
                              break;
                            v122 += v126;
                            ++v121;
                          }
                          while (v125 < v115);
                          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                          v127 = NFSharedLogGetLogger();
                          if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)v191 = 136446210;
                            v192 = buf;
                            _os_log_impl(&dword_216EC7000, v127, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                          }
                          if (v117)
                            v117(6, "%s", (const char *)buf);
                          v120 += v124;
                          v102 = v178;
                        }
                        while (v125 < v115);
                      }
                      goto LABEL_226;
                    case 1:
                      v200 = 0u;
                      memset(buf, 0, sizeof(buf));
                      v128 = *v77;
                      v129 = (const void **)MEMORY[0x24BEDCDB0];
                      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                      v130 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      dispatch_get_specific(*v129);
                      v131 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
                      {
                        v132 = (unsigned __int8 *)*v77;
                        *(_DWORD *)v191 = 136315906;
                        v192 = (uint8_t *)"NFDriverSecureElementTransceive";
                        v193 = 1024;
                        v194 = 7331;
                        v195 = 2082;
                        v196 = "[R-APDU UICC<]";
                        v197 = 2048;
                        v198 = v132;
                        _os_log_impl(&dword_216EC7000, v131, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
                      }
                      if (v130)
                        v130(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7331, "[R-APDU UICC<]", *v77);
                      if (v128)
                      {
                        v133 = 0;
                        do
                        {
                          v134 = 0;
                          v135 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v133)];
                          v136 = &v102[v133];
                          do
                          {
                            v137 = v134 + 1;
                            v138 = v134 + 1 + v133;
                            v139 = sprintf(v135, "0x%02X ", v136[v134]);
                            if (v134 > 6)
                              break;
                            v135 += v139;
                            ++v134;
                          }
                          while (v138 < v128);
                          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                          v140 = NFSharedLogGetLogger();
                          if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)v191 = 136446210;
                            v192 = buf;
                            _os_log_impl(&dword_216EC7000, v140, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                          }
                          if (v130)
                            v130(6, "%s", (const char *)buf);
                          v133 += v137;
                          v102 = v178;
                        }
                        while (v138 < v128);
                      }
                      goto LABEL_226;
                    case 2:
                      v200 = 0u;
                      memset(buf, 0, sizeof(buf));
                      v141 = *v77;
                      v142 = (const void **)MEMORY[0x24BEDCDB0];
                      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                      v143 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      dispatch_get_specific(*v142);
                      v144 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                      {
                        v145 = (unsigned __int8 *)*v77;
                        *(_DWORD *)v191 = 136315906;
                        v192 = (uint8_t *)"NFDriverSecureElementTransceive";
                        v193 = 1024;
                        v194 = 7327;
                        v195 = 2082;
                        v196 = "[R-APDU System<]";
                        v197 = 2048;
                        v198 = v145;
                        _os_log_impl(&dword_216EC7000, v144, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
                      }
                      if (v143)
                        v143(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7327, "[R-APDU System<]", *v77);
                      if (v141)
                      {
                        v146 = 0;
                        do
                        {
                          v147 = 0;
                          v148 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v146)];
                          v149 = &v102[v146];
                          do
                          {
                            v150 = v147 + 1;
                            v151 = v147 + 1 + v146;
                            v152 = sprintf(v148, "0x%02X ", v149[v147]);
                            if (v147 > 6)
                              break;
                            v148 += v152;
                            ++v147;
                          }
                          while (v151 < v141);
                          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                          v153 = NFSharedLogGetLogger();
                          if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)v191 = 136446210;
                            v192 = buf;
                            _os_log_impl(&dword_216EC7000, v153, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                          }
                          if (v143)
                            v143(6, "%s", (const char *)buf);
                          v146 += v150;
                          v102 = v178;
                        }
                        while (v151 < v141);
                      }
                      goto LABEL_226;
                    case 3:
                      v200 = 0u;
                      memset(buf, 0, sizeof(buf));
                      v154 = *v77;
                      v155 = (const void **)MEMORY[0x24BEDCDB0];
                      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                      v156 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                      dispatch_get_specific(*v155);
                      v157 = NFSharedLogGetLogger();
                      if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
                      {
                        v158 = (unsigned __int8 *)*v77;
                        *(_DWORD *)v191 = 136315906;
                        v192 = (uint8_t *)"NFDriverSecureElementTransceive";
                        v193 = 1024;
                        v194 = 7329;
                        v195 = 2082;
                        v196 = "[R-APDU Guest<]";
                        v197 = 2048;
                        v198 = v158;
                        _os_log_impl(&dword_216EC7000, v157, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v191, 0x26u);
                      }
                      if (v156)
                        v156(6, "%s:%i %s %lu bytes :", "NFDriverSecureElementTransceive", 7329, "[R-APDU Guest<]", *v77);
                      if (v154)
                      {
                        v159 = 0;
                        do
                        {
                          v160 = 0;
                          v161 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v159)];
                          v162 = &v102[v159];
                          do
                          {
                            v163 = v160 + 1;
                            v164 = v160 + 1 + v159;
                            v165 = sprintf(v161, "0x%02X ", v162[v160]);
                            if (v160 > 6)
                              break;
                            v161 += v165;
                            ++v160;
                          }
                          while (v164 < v154);
                          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                          v166 = NFSharedLogGetLogger();
                          if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)v191 = 136446210;
                            v192 = buf;
                            _os_log_impl(&dword_216EC7000, v166, OS_LOG_TYPE_DEFAULT, "%{public}s", v191, 0xCu);
                          }
                          if (v156)
                            v156(6, "%s", (const char *)buf);
                          v159 += v163;
                          v102 = v178;
                        }
                        while (v164 < v154);
                      }
LABEL_226:
                      v77 = v188;
                      break;
                    default:
                      break;
                  }
                }
              }
              v13 = NFDataCreateWithBytesNoCopy();
              if (v13)
              {
                if (a5)
                  *a5 = 0;
              }
              else
              {
                dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                v167 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
                if (v167)
                  v167(3, "%s:%i Failed to create data (%lu bytes) with result", "NFDriverSecureElementTransceive", 7340, *v77);
                dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
                v168 = NFSharedLogGetLogger();
                if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
                {
                  v169 = *v77;
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 7340;
                  *(_WORD *)&buf[18] = 2048;
                  *(_QWORD *)&buf[20] = v169;
                  _os_log_impl(&dword_216EC7000, v168, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to create data (%lu bytes) with result", buf, 0x1Cu);
                }
                if (a5)
                  *a5 = 3;
                free(v102);
              }
              free(v183);
              free(v77);
              return v13;
            }
            v88 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
            *(_QWORD *)buf = v83;
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = sub_216EE4680;
            *(_QWORD *)&buf[24] = &unk_24D65ED58;
            *(_QWORD *)&v200 = a1;
            dispatch_async(v88, buf);
            v89 = *v84;
            if (*v84 == 65)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 24) + 723) = 0;
              sub_216EEADA8(a1);
              v89 = *v84;
            }
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v90 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v89 != 67)
              break;
            if (v90)
              v90(3, "%s:%i eSE power-on failed! (%d/%d)", "NFDriverSecureElementTransceive", 7236, v82, 3);
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v91 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 7236;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v82;
              *(_WORD *)&buf[24] = 1024;
              *(_DWORD *)&buf[26] = 3;
              _os_log_impl(&dword_216EC7000, v91, OS_LOG_TYPE_ERROR, "%{public}s:%i eSE power-on failed! (%d/%d)", buf, 0x1Eu);
            }
            sub_216EE0D6C((void **)v84);
            if (++v82 == 4)
            {
              free(v183);
              free(v77);
              free(v178);
              if (a5)
                goto LABEL_9;
              return 0;
            }
          }
          if (v90)
            v90(3, "%s:%i status=0x%04llX", "NFDriverSecureElementTransceive", 7250, *v84);
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v106 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
          {
            v107 = *v84;
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7250;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v107;
            _os_log_impl(&dword_216EC7000, v106, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
          }
          NFDriverDumpUART(a1);
          v108 = *v84;
          if (*v84 == 65)
          {
            v109 = *(_QWORD *)(a1 + 24);
            if (*(_BYTE *)(v109 + 722))
            {
              v110 = *(void (**)(_QWORD, uint64_t, _QWORD))(v109 + 96);
              if (v110)
              {
                v110(*(_QWORD *)(v109 + 344), a2, 0);
                v108 = *v84;
                goto LABEL_142;
              }
            }
            goto LABEL_162;
          }
LABEL_142:
          if (v108 == 214)
          {
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 716) - 14) > 4)
              goto LABEL_162;
            sub_216EEA7D0(a1);
            v108 = *v84;
          }
          if ((unint64_t)(v108 - 36) <= 0x1E && ((1 << (v108 - 36)) & 0x40000101) != 0
            || v108 == 218)
          {
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v113 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v113)
              v113(3, "%s:%i Simulating HW Reset", "NFDriverSecureElementTransceive", 7298);
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v114 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 7298;
              _os_log_impl(&dword_216EC7000, v114, OS_LOG_TYPE_ERROR, "%{public}s:%i Simulating HW Reset", buf, 0x12u);
            }
            if (NFIsInternalBuild()
              && *v84 == 44
              && *(_BYTE *)(*(_QWORD *)(a1 + 24) + 729)
              && NFDriverCopySMBLog(a1))
            {
              NFDataRelease();
            }
            sleep(1u);
            NFDriverSimulateCrash(a1, 57005);
            goto LABEL_162;
          }
          if (v108 != 217)
          {
LABEL_162:
            sub_216EE0D6C((void **)v84);
            free(v178);
            free(v183);
            free(v77);
            goto LABEL_163;
          }
          v111 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v111 + 722))
          {
            v112 = *v77 ? *v178 : 0;
            v170 = *(void (**)(_QWORD, uint64_t, uint64_t))(v111 + 200);
            if (v170)
              v170(*(_QWORD *)(v111 + 448), v177, v112);
          }
          sub_216EE0D6C((void **)v84);
          free(v77);
          free(v183);
          free(v178);
          if (a5)
          {
            v13 = 0;
            v14 = 22;
            goto LABEL_165;
          }
          return 0;
        }
        v99 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v100 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v100)
          v100(3, "%s:%i failed to allocate Tx data struct", "NFDriverSecureElementTransceive", 7212);
        dispatch_get_specific(*v99);
        v101 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7212;
          _os_log_impl(&dword_216EC7000, v101, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to allocate Tx data struct", buf, 0x12u);
        }
        if (a5)
          *a5 = 3;
        free(v77);
        v98 = v79;
      }
      else
      {
        v95 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v96 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v96)
          v96(3, "%s:%i failed to allocate buffer", "NFDriverSecureElementTransceive", 7204);
        dispatch_get_specific(*v95);
        v97 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7204;
          _os_log_impl(&dword_216EC7000, v97, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to allocate buffer", buf, 0x12u);
        }
        if (a5)
          *a5 = 3;
        v98 = v77;
      }
      free(v98);
    }
    else
    {
      v92 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v93 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v93)
        v93(3, "%s:%i failed to allocate Tx context", "NFDriverSecureElementTransceive", 7194);
      dispatch_get_specific(*v92);
      v94 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7194;
        _os_log_impl(&dword_216EC7000, v94, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to allocate Tx context", buf, 0x12u);
      }
      if (a5)
      {
        v13 = 0;
        v14 = 3;
        goto LABEL_165;
      }
    }
    return 0;
  }
  v27 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v28)
    v28(3, "%s:%i No SE for transceive", "NFDriverSecureElementTransceive", 7167);
  dispatch_get_specific(*v27);
  v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverSecureElementTransceive";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7167;
    v10 = "%{public}s:%i No SE for transceive";
    goto LABEL_6;
  }
LABEL_8:
  if (!a5)
    return 0;
LABEL_9:
  v13 = 0;
  v14 = 4;
LABEL_165:
  *a5 = v14;
  return v13;
}

BOOL NFDriverSecureElementSelect(uint64_t a1, unsigned int a2, uint64_t a3, _WORD *a4)
{
  return NFDriverSecureElementSelectWithOS(a1, a2, 0, a3, a4);
}

BOOL NFDriverSecureElementSelectWithOS(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _WORD *a5)
{
  _QWORD *v6;
  unint64_t v7;
  unsigned int v8;
  const void **v9;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v11;
  _BOOL8 result;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = (_QWORD *)NFDriverSecureElementSendCommandToOS(a1, a2, a3, 0, 0xA4u, 4u, 0, 0, a4);
  if (v6)
  {
    v7 = v6[1];
    if (v7 >= 2)
      v8 = __rev16(*(unsigned __int16 *)(v7 + *v6 - 2));
    else
      v8 = 0;
    NFDataRelease();
    if (a5)
      *a5 = v8;
    return v8 == 36864;
  }
  else
  {
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to select", "NFDriverSecureElementSelectWithOS", 5416);
    dispatch_get_specific(*v9);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v14 = "NFDriverSecureElementSelectWithOS";
      v15 = 1024;
      v16 = 5416;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to select", buf, 0x12u);
    }
    result = 0;
    if (a5)
      *a5 = 0;
  }
  return result;
}

BOOL NFDriverSecureElementGetCometATR(uint64_t a1, uint64_t a2, const char *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  const char **v10;
  const char **v11;
  uint64_t *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD, uint64_t, _QWORD);
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  const void **v30;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v32;
  const char *v33;
  const void **v34;
  void (*v35)(uint64_t, const char *, ...);
  const void **v36;
  void (*v37)(uint64_t, const char *, ...);
  NSObject *v38;
  int v39;
  const char *v40;
  _BYTE block[40];
  uint64_t v43;
  const char **v44;
  uint64_t *v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v8 = sub_216EF7660(a1, a2);
  if (!v8 || (v9 = *(_QWORD *)(v8 + 8)) == 0)
  {
    v30 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(4, "%s:%i Could not locate SE", "NFDriverSecureElementGetCometATR", 5435);
    dispatch_get_specific(*v30);
    v32 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)block = 136446466;
    *(_QWORD *)&block[4] = "NFDriverSecureElementGetCometATR";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 5435;
    v33 = "%{public}s:%i Could not locate SE";
    goto LABEL_31;
  }
  v10 = (const char **)malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A08D555BuLL);
  if (v10)
  {
    v11 = v10;
    *((_DWORD *)v10 + 2) = *a4;
    *v10 = a3;
    sub_216EE4B88(a1);
    v12 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v12[2] + 8));
    v13 = v12[2];
    ++*(_QWORD *)v13;
    pthread_mutex_unlock((pthread_mutex_t *)(v13 + 8));
    v14 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    v15 = MEMORY[0x24BDAC760];
    *(_QWORD *)block = MEMORY[0x24BDAC760];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_216F05868;
    *(_QWORD *)&block[24] = &unk_24D65F790;
    *(_QWORD *)&block[32] = a1;
    v43 = v9;
    v44 = v11;
    v45 = v12;
    dispatch_async_and_wait(v14, block);
    v16 = sub_216EE0ECC(v12);
    v17 = v16 == 0;
    if (!v16)
    {
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 24) + 520));
      *a4 = *((unsigned int *)v11 + 2);
      v36 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v37)
        v37(6, "%s:%i ATR is %d bytes long : %s", "NFDriverSecureElementGetCometATR", 5500, *((_DWORD *)v11 + 2), *v11);
      dispatch_get_specific(*v36);
      v38 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v39 = *((_DWORD *)v11 + 2);
        v40 = *v11;
        *(_DWORD *)block = 136446978;
        *(_QWORD *)&block[4] = "NFDriverSecureElementGetCometATR";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 5500;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v39;
        *(_WORD *)&block[24] = 2080;
        *(_QWORD *)&block[26] = v40;
        _os_log_impl(&dword_216EC7000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ATR is %d bytes long : %s", block, 0x22u);
      }
      goto LABEL_41;
    }
    v18 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19)
      v19(4, "%s:%i status=0x%04llX", "NFDriverSecureElementGetCometATR", 5452, *v12);
    dispatch_get_specific(*v18);
    v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = *v12;
      *(_DWORD *)block = 136446722;
      *(_QWORD *)&block[4] = "NFDriverSecureElementGetCometATR";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 5452;
      *(_WORD *)&block[18] = 2048;
      *(_QWORD *)&block[20] = v21;
      _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", block, 0x1Cu);
    }
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 24) + 520));
    v22 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)block = v15;
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_216EE4564;
    *(_QWORD *)&block[24] = &unk_24D65ED38;
    *(_QWORD *)&block[32] = a1;
    dispatch_async(v22, block);
    v23 = *v12;
    if (*v12 == 65)
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + 723) = 0;
      sub_216EEADA8(a1);
      v24 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v24 + 722))
      {
        v25 = *(void (**)(_QWORD, uint64_t, _QWORD))(v24 + 96);
        if (v25)
          v25(*(_QWORD *)(v24 + 344), a2, 0);
      }
      v23 = *v12;
    }
    if (v23 == 217)
    {
      v26 = *(_QWORD *)(a1 + 24);
      if (!*(_BYTE *)(v26 + 722))
        goto LABEL_41;
      v27 = *(void (**)(_QWORD, _QWORD, _QWORD))(v26 + 200);
      if (!v27)
        goto LABEL_41;
      v27(*(_QWORD *)(v26 + 448), 0, *((unsigned __int8 *)v12 + 8));
      v23 = *v12;
    }
    if (v23 != 214)
      goto LABEL_21;
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 24) + 716) - 14) <= 4)
    {
      sub_216EEA7D0(a1);
      v23 = *v12;
LABEL_21:
      if (v23 == 66)
      {
        dispatch_get_specific(*v18);
        v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v28)
          v28(3, "%s:%i Simulating HW Reset", "NFDriverSecureElementGetCometATR", 5494);
        dispatch_get_specific(*v18);
        v29 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)block = 136446466;
          *(_QWORD *)&block[4] = "NFDriverSecureElementGetCometATR";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 5494;
          _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i Simulating HW Reset", block, 0x12u);
        }
        NFDriverSimulateCrash(a1, 57005);
      }
    }
LABEL_41:
    free(v11);
    sub_216EE0D6C((void **)v12);
    return v17;
  }
  v34 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v35 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v35)
    v35(3, "%s:%i Allocation failure", "NFDriverSecureElementGetCometATR", 5441);
  dispatch_get_specific(*v34);
  v32 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)block = 136446466;
    *(_QWORD *)&block[4] = "NFDriverSecureElementGetCometATR";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 5441;
    v33 = "%{public}s:%i Allocation failure";
LABEL_31:
    _os_log_impl(&dword_216EC7000, v32, OS_LOG_TYPE_ERROR, v33, block, 0x12u);
  }
  return 0;
}

uint64_t NFDriverTriggerDelayedWake(uint64_t a1, char a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  int v7;
  void **v8;
  char *v9;
  NSObject *v10;
  const void **v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  void *v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  const char *v18;
  uint64_t v19;
  int v21;
  const void **v22;
  void (*v23)(uint64_t, const char *, ...);
  _BYTE buf[32];
  uint64_t v25;
  void **v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 60) || *(_DWORD *)(a1 + 32) || *(_DWORD *)(a1 + 36))
  {
    if (!sub_216EE7B4C(a1, 0, 0, 0, 0, 0, 0))
    {
      v4 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Failed to stop discovery", "NFDriverTriggerDelayedWake", 5520);
      dispatch_get_specific(*v4);
      v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverTriggerDelayedWake";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5520;
        _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to stop discovery", buf, 0x12u);
      }
    }
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }
  if (!sub_216EEF158(a1, 0))
  {
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(3, "%s:%i Failed to disable standby mode.", "NFDriverTriggerDelayedWake", 5526);
    dispatch_get_specific(*v15);
    v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverTriggerDelayedWake";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 5526;
    v18 = "%{public}s:%i Failed to disable standby mode.";
LABEL_21:
    _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
    return 0;
  }
  v8 = (void **)sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v8[2] + 8));
  v9 = (char *)v8[2];
  ++*(_QWORD *)v9;
  pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
  v10 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216F059D0;
  *(_QWORD *)&buf[24] = &unk_24D65F7B0;
  v27 = a2;
  v25 = a1;
  v26 = v8;
  dispatch_async_and_wait(v10, buf);
  if (sub_216EE0ECC((uint64_t *)v8))
  {
    v11 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12)
      v12(3, "%s:%i status=0x%04llX", "NFDriverTriggerDelayedWake", 5532, *v8);
    dispatch_get_specific(*v11);
    v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *v8;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverTriggerDelayedWake";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5532;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v14;
      _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_216EE0D6C(v8);
    return 0;
  }
  sub_216EE0D6C(v8);
  v19 = 1;
  if (v7)
  {
    v21 = *(_BYTE *)(a1 + 62) ? 1 : 2;
    if (!sub_216EE7B4C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v21))
    {
      v22 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23)
        v23(3, "%s:%i Failed to update discovery", "NFDriverTriggerDelayedWake", 5540);
      dispatch_get_specific(*v22);
      v17 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        return 0;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "NFDriverTriggerDelayedWake";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5540;
      v18 = "%{public}s:%i Failed to update discovery";
      goto LABEL_21;
    }
  }
  return v19;
}

BOOL NFDriverCrashNFCC(uint64_t a1, int a2)
{
  _QWORD *v4;
  uint64_t v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t *v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  void **v15;
  int v16;
  __int16 v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  v5 = v4[2];
  ++*(_QWORD *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  v16 = 84083105;
  v17 = a2;
  v15 = 0;
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Crashing in %d ms", "NFDriverCrashNFCC", 5556, a2);
  dispatch_get_specific(*v6);
  v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v19 = "NFDriverCrashNFCC";
    v20 = 1024;
    v21 = 5556;
    v22 = 1024;
    LODWORD(v23) = a2;
    _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Crashing in %d ms", buf, 0x18u);
  }
  v15 = (void **)sub_216EE5100(6u, &v16);
  v9 = sub_216EE4D10(a1, 37025, (uint64_t)v15, 0);
  v10 = sub_216EE0ECC(v9);
  if (v10)
  {
    dispatch_get_specific(*v6);
    v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11)
      v11(3, "%s:%i status=0x%04llX", "NFDriverCrashNFCC", 5561, *v9);
    dispatch_get_specific(*v6);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *v9;
      *(_DWORD *)buf = 136446722;
      v19 = "NFDriverCrashNFCC";
      v20 = 1024;
      v21 = 5561;
      v22 = 2048;
      v23 = v13;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_216EE5198(&v15);
    sub_216EE0D6C((void **)v9);
  }
  else
  {
    sub_216EE0D6C((void **)v9);
    sub_216EE5198(&v15);
  }
  return v10 == 0;
}

BOOL NFDriverEnableHeadlessTestMode(uint64_t a1, int a2, unsigned int a3)
{
  __int16 v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  _BOOL8 v10;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  _BYTE v15[2];
  __int16 v16;
  _BYTE buf[12];
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = sub_216EE6D80(a1, 27);
  v15[0] = HIBYTE(v6);
  v15[1] = v6;
  v16 = 1;
  if (a2)
  {
    v7 = 429496730 * a3;
    if (BYTE4(v7) >= 0x5Bu)
    {
      v11 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Interval must be < 900 ms", "NFDriverEnableHeadlessTestMode", 5590);
      dispatch_get_specific(*v11);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverEnableHeadlessTestMode";
        v18 = 1024;
        v19 = 5590;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Interval must be < 900 ms", buf, 0x12u);
      }
      return 0;
    }
    HIBYTE(v16) = BYTE4(v7) | 0x80;
  }
  v8 = sub_216EE5100(4u, v15);
  *(_QWORD *)buf = v8;
  if (!v8)
    return 0;
  v9 = sub_216EE4D10(a1, 37025, (uint64_t)v8, 0);
  v10 = sub_216EE0ECC(v9) == 0;
  sub_216EE0D6C((void **)v9);
  sub_216EE5198((void ***)buf);
  return v10;
}

BOOL NFDriverToggleGPIO(uint64_t a1, char a2)
{
  __int16 v4;
  unsigned int *v5;
  uint64_t *v6;
  _BOOL8 v7;
  void **v9;
  _BYTE v10[4];

  v4 = sub_216EE6D80(a1, 28);
  v10[0] = HIBYTE(v4);
  v10[1] = v4;
  v10[2] = 1;
  v10[3] = ((a2 & 4) != 0) | (16 * a2) & 0x8F;
  v5 = sub_216EE5100(4u, v10);
  v9 = (void **)v5;
  if (!v5)
    return 0;
  v6 = sub_216EE4D10(a1, 37025, (uint64_t)v5, 0);
  v7 = sub_216EE0ECC(v6) == 0;
  sub_216EE0D6C((void **)v6);
  sub_216EE5198(&v9);
  return v7;
}

uint64_t NFDriverSerialDebugLastMessage()
{
  return NFHardwareSerialDebugLastMessage();
}

uint64_t NFDriverDebugDumpMemory(uint64_t a1, int a2)
{
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  int v7;
  void **v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  void *v14;
  NSObject *v15;
  uint64_t v17;
  _BYTE buf[32];
  void **v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v3 = (const void **)MEMORY[0x24BEDCDB0];
  if (a2)
  {
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Unknown type: %d", "NFDriverDebugDumpMemory", 5713, a2);
    dispatch_get_specific(*v3);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverDebugDumpMemory";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5713;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a2;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown type: %d", buf, 0x18u);
    }
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  v8 = (void **)sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)((char *)v8[2] + 8));
  v9 = (char *)v8[2];
  ++*(_QWORD *)v9;
  pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
  v8[1] = &v17;
  v10 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v11 = MEMORY[0x24BDAC760];
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216F05C2C;
  *(_QWORD *)&buf[24] = &unk_24D65F7D0;
  v19 = v8;
  v20 = a1;
  v21 = v7;
  dispatch_async_and_wait(v10, buf);
  if (sub_216EE0ECC((uint64_t *)v8))
  {
    dispatch_get_specific(*v3);
    v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12)
      v12(3, "%s:%i status=0x%04llX", "NFDriverDebugDumpMemory", 5719, *v8);
    dispatch_get_specific(*v3);
    v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *v8;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverDebugDumpMemory";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5719;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v14;
      _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
    }
    sub_216EE0D6C(v8);
    if (*v8 != (void *)30)
    {
      v15 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
      *(_QWORD *)buf = v11;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = sub_216EE4564;
      *(_QWORD *)&buf[24] = &unk_24D65ED38;
      v19 = (void **)a1;
      dispatch_async(v15, buf);
    }
    return 0;
  }
  else
  {
    sub_216EE0D6C(v8);
    return v17;
  }
}

_QWORD *sub_216EF2A1C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD v8[6];

  v4 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  v5 = v4[2];
  ++*(_QWORD *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  v6 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  v8[0] = MEMORY[0x24BDAC760];
  v8[1] = 0x40000000;
  v8[2] = sub_216EF2AB8;
  v8[3] = &unk_24D65F2D0;
  v8[4] = a2;
  v8[5] = v4;
  dispatch_async_and_wait(v6, v8);
  return v4;
}

void sub_216EF2AB8(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    v3 = 1;
    goto LABEL_5;
  }
  v3 = (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(_QWORD *)(a1 + 40));
  if (v3 != 13)
  {
LABEL_5:
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

uint64_t sub_216EF2B14(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void **v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  uint64_t v25;
  unint64_t v26;
  const void **v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[8];
  uint8_t buf[4];
  uint8_t *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  uint8_t v54[32];
  __int128 v55;
  uint64_t v56;

  v5 = a3;
  v56 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 552);
  if ((v6 & 0x10) != 0)
  {
    v39 = a2;
    v40 = a1;
    v55 = 0u;
    memset(v54, 0, sizeof(v54));
    v7 = *(unsigned int *)(a3 + 40);
    v43 = *(_QWORD *)(a3 + 32);
    v8 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    dispatch_get_specific(*v8);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *(unsigned int *)(v5 + 40);
      *(_DWORD *)buf = 136315906;
      v47 = (uint8_t *)"NFDriverRemoteDevTransceive";
      v48 = 1024;
      v49 = 5775;
      v50 = 2082;
      v51 = "[Reader C-APDU>]";
      v52 = 2048;
      v53 = v11;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
    }
    v41 = v6;
    if (Logger)
      Logger(6, "%s:%i %s %lu bytes :", "NFDriverRemoteDevTransceive", 5775, "[Reader C-APDU>]", *(unsigned int *)(v5 + 40));
    v42 = v5;
    if ((_DWORD)v7)
    {
      v12 = 0;
      do
      {
        v13 = 0;
        v14 = (char *)&v54[__sprintf_chk((char *)v54, 0, 0x30uLL, "%04lX: ", v12)];
        do
        {
          v15 = v13 + 1;
          v16 = v13 + 1 + v12;
          v17 = sprintf(v14, "0x%02X ", *(unsigned __int8 *)(v43 + v12 + v13));
          if (v13 > 6)
            break;
          v14 += v17;
          ++v13;
        }
        while (v16 < v7);
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v18 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v47 = v54;
          _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
        if (Logger)
          Logger(6, "%s", (const char *)v54);
        v12 += v15;
      }
      while (v16 < v7);
    }
    LOBYTE(v6) = v41;
    v5 = v42;
    a2 = v39;
    a1 = v40;
  }
  v45[0] = MEMORY[0x24BDAC760];
  v45[1] = 0x40000000;
  v45[2] = sub_216EF3128;
  v45[3] = &unk_24D65F2F0;
  v45[4] = v5;
  *(double *)&v45[5] = a4;
  v45[6] = a1;
  v45[7] = a2;
  v19 = sub_216EF2A1C(a1, (uint64_t)v45);
  v20 = sub_216EE0ECC(v19);
  if (v20 > 147)
  {
    if ((unint64_t)(v20 - 150) > 0x24)
      goto LABEL_28;
    if (((1 << (v20 + 106)) & 0x590000000) == 0)
    {
      if (v20 != 150)
      {
        if (v20 == 186)
        {
          v21 = 23;
          goto LABEL_55;
        }
LABEL_28:
        v21 = 6;
        if (v20 == 148 || v20 == 255)
          goto LABEL_55;
        goto LABEL_30;
      }
LABEL_26:
      v21 = 7;
      goto LABEL_55;
    }
LABEL_27:
    v21 = 20;
    goto LABEL_55;
  }
  switch(v20)
  {
    case 12:
      v21 = 3;
      goto LABEL_55;
    case 44:
      goto LABEL_27;
    case 145:
      goto LABEL_26;
  }
LABEL_30:
  if (*v19 == 187)
  {
    v21 = 4;
  }
  else if (v20)
  {
    v22 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v23)
      v23(3, "%s:%i phLibNfc_RemoteDev_Transceive failed 0x%04llx", "NFDriverRemoteDevTransceive", 5808, *v19);
    dispatch_get_specific(*v22);
    v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v25 = *v19;
      *(_DWORD *)v54 = 136446722;
      *(_QWORD *)&v54[4] = "NFDriverRemoteDevTransceive";
      *(_WORD *)&v54[12] = 1024;
      *(_DWORD *)&v54[14] = 5808;
      *(_WORD *)&v54[18] = 2048;
      *(_QWORD *)&v54[20] = v25;
      _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Transceive failed 0x%04llx", v54, 0x1Cu);
    }
    v21 = 1;
  }
  else
  {
    if ((v6 & 0x10) != 0)
    {
      v55 = 0u;
      memset(v54, 0, sizeof(v54));
      v26 = *(unsigned int *)(v5 + 56);
      v44 = *(_QWORD *)(v5 + 48);
      v27 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      dispatch_get_specific(*v27);
      v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v30 = *(unsigned int *)(v5 + 56);
        *(_DWORD *)buf = 136315906;
        v47 = (uint8_t *)"NFDriverRemoteDevTransceive";
        v48 = 1024;
        v49 = 5815;
        v50 = 2082;
        v51 = "[Reader R-APDU<]";
        v52 = 2048;
        v53 = v30;
        _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
      }
      if (v28)
        v28(6, "%s:%i %s %lu bytes :", "NFDriverRemoteDevTransceive", 5815, "[Reader R-APDU<]", *(unsigned int *)(v5 + 56));
      if ((_DWORD)v26)
      {
        v31 = 0;
        do
        {
          v32 = 0;
          v33 = (char *)&v54[__sprintf_chk((char *)v54, 0, 0x30uLL, "%04lX: ", v31)];
          do
          {
            v34 = v32 + 1;
            v35 = v32 + 1 + v31;
            v36 = sprintf(v33, "0x%02X ", *(unsigned __int8 *)(v44 + v31 + v32));
            if (v32 > 6)
              break;
            v33 += v36;
            ++v32;
          }
          while (v35 < v26);
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v37 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446210;
            v47 = v54;
            _os_log_impl(&dword_216EC7000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
          }
          if (v28)
            v28(6, "%s", (const char *)v54);
          v31 += v34;
        }
        while (v35 < v26);
      }
    }
    v21 = 0;
  }
LABEL_55:
  sub_216EE0D6C((void **)v19);
  return v21;
}

uint64_t sub_216EF3128(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 32);
  sub_216EE0E38(a2, *(double *)(a1 + 40));
  return phLibNfc_RemoteDev_Transceive();
}

void sub_216EF3178(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _DWORD *v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  size_t v11;

  if (a2)
  {
    v7 = a2[1];
    if (a5)
    {
      v7[14] = 0;
    }
    else if (a4)
    {
      v8 = (void *)*((_QWORD *)v7 + 6);
      if (v8)
      {
        v9 = *(_DWORD *)(a4 + 8);
        v10 = v7[14];
        if (v9 >= v10)
          v11 = v10;
        else
          v11 = v9;
        memcpy(v8, *(const void **)a4, v11);
        v7[14] = v11;
      }
    }
    sub_216EE0DE8(a2, a5);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDeviceFelicaTransceive(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, double a5)
{
  void *v10;
  void *v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  _DWORD *v23;
  void *v24;
  uint64_t v25;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 5;
  *a4 = 0;
  v10 = malloc_type_calloc(0x10000uLL, 1uLL, 0x100004077774924uLL);
  if (!v10)
  {
    v17 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDeviceFelicaTransceive", 5835);
    dispatch_get_specific(*v17);
    v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v28 = "NFDriverRemoteDeviceFelicaTransceive";
      v29 = 1024;
      v30 = 5835;
      _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
    }
    return 3;
  }
  v11 = v10;
  if (!a3)
  {
    v20 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21)
      v21(3, "%s:%i No command APDU provided", "NFDriverRemoteDeviceFelicaTransceive", 5840);
    dispatch_get_specific(*v20);
    v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v28 = "NFDriverRemoteDeviceFelicaTransceive";
      v29 = 1024;
      v30 = 5840;
      _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i No command APDU provided", buf, 0x12u);
    }
    free(v11);
    return 5;
  }
  if (a3[1] <= 0x10000uLL)
  {
    v23 = malloc_type_calloc(1uLL, 0x48uLL, 0x1010040DB589B7BuLL);
    if (v23)
    {
      v24 = v23;
      *v23 = 240;
      *((_QWORD *)v23 + 4) = *a3;
      v23[10] = a3[1];
      *((_QWORD *)v23 + 6) = v11;
      v23[14] = 0x10000;
      v16 = sub_216EF2B14(a1, a2, (uint64_t)v23, a5);
      if ((_DWORD)v16 || (v25 = NFDataCreateWithBytesNoCopy()) == 0)
        free(v11);
      else
        *a4 = v25;
      free(v24);
      return v16;
    }
    free(v11);
    return 3;
  }
  v12 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13)
    v13(3, "%s:%i Felica command is too large: %ld bytes", "NFDriverRemoteDeviceFelicaTransceive", 5846, a3[1]);
  dispatch_get_specific(*v12);
  v14 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = a3[1];
    *(_DWORD *)buf = 136446722;
    v28 = "NFDriverRemoteDeviceFelicaTransceive";
    v29 = 1024;
    v30 = 5846;
    v31 = 2048;
    v32 = v15;
    _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Felica command is too large: %ld bytes", buf, 0x1Cu);
  }
  free(v11);
  return 8;
}

uint64_t NFDriverRemoteDeviceIso15693Transceive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, double a5)
{
  void *v10;
  void *v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  _DWORD *v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 5;
  *a4 = 0;
  v10 = malloc_type_calloc(0x10000uLL, 1uLL, 0x100004077774924uLL);
  if (!v10)
  {
    v17 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDeviceIso15693Transceive", 5892);
    dispatch_get_specific(*v17);
    v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v29 = "NFDriverRemoteDeviceIso15693Transceive";
      v30 = 1024;
      v31 = 5892;
      _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
    }
    return 3;
  }
  v11 = v10;
  if (!a3)
  {
    v20 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21)
      v21(3, "%s:%i No command APDU provided", "NFDriverRemoteDeviceIso15693Transceive", 5897);
    dispatch_get_specific(*v20);
    v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v29 = "NFDriverRemoteDeviceIso15693Transceive";
      v30 = 1024;
      v31 = 5897;
      _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i No command APDU provided", buf, 0x12u);
    }
    free(v11);
    return 5;
  }
  if (*(_QWORD *)(a3 + 8) <= 0x10000uLL)
  {
    v23 = malloc_type_calloc(1uLL, 0x48uLL, 0x1010040DB589B7BuLL);
    if (v23)
    {
      v24 = v23;
      if ((**(_BYTE **)a3 & 0x40) != 0)
      {
        *((_WORD *)v23 + 4) = 0;
        v25 = 1;
      }
      else
      {
        v25 = 0;
      }
      *v23 = v25;
      *((_QWORD *)v23 + 4) = *(_QWORD *)a3;
      v23[10] = *(_QWORD *)(a3 + 8);
      *((_QWORD *)v23 + 6) = v11;
      v23[14] = 0x10000;
      v16 = sub_216EF2B14(a1, a2, (uint64_t)v23, a5);
      if ((_DWORD)v16 || (v26 = NFDataCreateWithBytesNoCopy()) == 0)
        free(v11);
      else
        *a4 = v26;
      free(v24);
      return v16;
    }
    free(v11);
    return 3;
  }
  v12 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13)
    v13(3, "%s:%i Command is too large: %ld bytes", "NFDriverRemoteDeviceIso15693Transceive", 5903, *(_QWORD *)(a3 + 8));
  dispatch_get_specific(*v12);
  v14 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = *(_QWORD *)(a3 + 8);
    *(_DWORD *)buf = 136446722;
    v29 = "NFDriverRemoteDeviceIso15693Transceive";
    v30 = 1024;
    v31 = 5903;
    v32 = 2048;
    v33 = v15;
    _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Command is too large: %ld bytes", buf, 0x1Cu);
  }
  free(v11);
  return 8;
}

uint64_t NFDriverRemoteDeviceIso14443Transceive(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, double a5)
{
  void *v10;
  void *v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  _DWORD *v23;
  void *v24;
  uint64_t v25;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 5;
  *a4 = 0;
  v10 = malloc_type_calloc(0x10000uLL, 1uLL, 0x100004077774924uLL);
  if (!v10)
  {
    v17 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDeviceIso14443Transceive", 5957);
    dispatch_get_specific(*v17);
    v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v28 = "NFDriverRemoteDeviceIso14443Transceive";
      v29 = 1024;
      v30 = 5957;
      _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
    }
    return 3;
  }
  v11 = v10;
  if (!a3)
  {
    v20 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21)
      v21(3, "%s:%i No command APDU provided", "NFDriverRemoteDeviceIso14443Transceive", 5962);
    dispatch_get_specific(*v20);
    v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v28 = "NFDriverRemoteDeviceIso14443Transceive";
      v29 = 1024;
      v30 = 5962;
      _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i No command APDU provided", buf, 0x12u);
    }
    free(v11);
    return 5;
  }
  if (a3[1] <= 0x10000uLL)
  {
    v23 = malloc_type_calloc(1uLL, 0x48uLL, 0x1010040DB589B7BuLL);
    if (v23)
    {
      v24 = v23;
      *v23 = 0;
      *((_QWORD *)v23 + 4) = *a3;
      v23[10] = a3[1];
      *((_QWORD *)v23 + 6) = v11;
      v23[14] = 0x10000;
      v16 = sub_216EF2B14(a1, a2, (uint64_t)v23, a5);
      if ((_DWORD)v16 || (v25 = NFDataCreateWithBytesNoCopy()) == 0)
        free(v11);
      else
        *a4 = v25;
      free(v24);
      return v16;
    }
    free(v11);
    return 3;
  }
  v12 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13)
    v13(3, "%s:%i Command is too large: %ld bytes", "NFDriverRemoteDeviceIso14443Transceive", 5968, a3[1]);
  dispatch_get_specific(*v12);
  v14 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v15 = a3[1];
    *(_DWORD *)buf = 136446722;
    v28 = "NFDriverRemoteDeviceIso14443Transceive";
    v29 = 1024;
    v30 = 5968;
    v31 = 2048;
    v32 = v15;
    _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Command is too large: %ld bytes", buf, 0x1Cu);
  }
  free(v11);
  return 8;
}

uint64_t NFDriverRemoteDevConnect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  _QWORD v14[7];
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  void *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v14[0] = MEMORY[0x24BDAC760];
    v14[1] = 0x40000000;
    v14[2] = sub_216EF3ED4;
    v14[3] = &unk_24D65F310;
    v14[4] = a3;
    v14[5] = a1;
    v14[6] = a2;
    v3 = (void **)sub_216EF2A1C(a1, (uint64_t)v14);
    if (sub_216EE0ECC((uint64_t *)v3))
    {
      v4 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i phLibNfc_RemoteDev_Connect failed: 0x%04llx", "NFDriverRemoteDevConnect", 6056, *v3);
      dispatch_get_specific(*v4);
      v6 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v7 = *v3;
        *(_DWORD *)buf = 136446722;
        v16 = "NFDriverRemoteDevConnect";
        v17 = 1024;
        v18 = 6056;
        v19 = 2048;
        v20 = v7;
        _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Connect failed: 0x%04llx", buf, 0x1Cu);
      }
      v8 = *v3;
      if ((uint64_t)*v3 > 185)
      {
        if (v8 == (void *)186)
        {
          v9 = 23;
          goto LABEL_23;
        }
        if (v8 == (void *)187)
        {
          v9 = 4;
          goto LABEL_23;
        }
      }
      else
      {
        if (v8 == (void *)51)
        {
          v9 = 19;
          goto LABEL_23;
        }
        if (v8 == (void *)121)
        {
          v9 = 18;
LABEL_23:
          sub_216EE0D6C(v3);
          return v9;
        }
      }
      v9 = 1;
      goto LABEL_23;
    }
    v9 = 0;
    goto LABEL_23;
  }
  v10 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v11)
    v11(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevConnect", 6045);
  dispatch_get_specific(*v10);
  v12 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v16 = "NFDriverRemoteDevConnect";
    v17 = 1024;
    v18 = 6045;
    _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
  }
  return 5;
}

uint64_t sub_216EF3ED4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 32);
  return phLibNfc_RemoteDev_Connect();
}

void sub_216EF3EF8(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  char *v7;

  if (a2)
  {
    if (a4 && !a5)
    {
      v7 = (char *)a2[1];
      if ((*(_DWORD *)(a4 + 4) & 0xFFFFFFFE) == 0xA && v7 != 0)
        sub_216EEA004(v7, a3, a4);
    }
    sub_216EE0DE8(a2, a5);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDevDisconnect(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  unsigned int v4;
  int v5;
  const void **v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t v9;
  uint64_t *v10;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[6];
  int v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3)
    {
      v3 = *(_DWORD *)(a1 + 40);
      v4 = v3 - 1;
      if (v3 == 3)
        v5 = 7;
      else
        v5 = 6;
      if (v4 < 2)
        v5 = 7;
    }
    else
    {
      v5 = 5;
    }
    v17[0] = MEMORY[0x24BDAC760];
    v17[1] = 0x40000000;
    v17[2] = sub_216EF41EC;
    v17[3] = &unk_24D65F330;
    v17[4] = a1;
    v17[5] = a2;
    v18 = v5;
    v10 = sub_216EF2A1C(a1, (uint64_t)v17);
    if (!sub_216EE0ECC(v10))
    {
      v9 = 0;
      goto LABEL_31;
    }
    v11 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i phLibNfc_RemoteDev_Disconnect failed: 0x%04llx", "NFDriverRemoteDevDisconnect", 6108, *v10);
    dispatch_get_specific(*v11);
    v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *v10;
      *(_DWORD *)buf = 136446722;
      v20 = "NFDriverRemoteDevDisconnect";
      v21 = 1024;
      v22 = 6108;
      v23 = 2048;
      v24 = v14;
      _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Disconnect failed: 0x%04llx", buf, 0x1Cu);
    }
    v15 = *v10;
    if (*v10 <= 120)
    {
      if (v15 == 51)
      {
        v9 = 19;
        goto LABEL_31;
      }
      if (v15 == 58)
      {
LABEL_24:
        v9 = 6;
LABEL_31:
        sub_216EE0D6C((void **)v10);
        return v9;
      }
    }
    else
    {
      if (v15 == 121)
      {
        v9 = 18;
        goto LABEL_31;
      }
      if (v15 == 146 || v15 == 148)
        goto LABEL_24;
    }
    v9 = 1;
    goto LABEL_31;
  }
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v7)
    v7(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevDisconnect", 6091);
  dispatch_get_specific(*v6);
  v8 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v20 = "NFDriverRemoteDevDisconnect";
    v21 = 1024;
    v22 = 6091;
    _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
  }
  return 5;
}

uint64_t sub_216EF41EC()
{
  return phLibNfc_RemoteDev_Disconnect();
}

void sub_216EF4210(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a4);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDevCheckNdef(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  NSObject *v6;
  uint64_t *v7;
  const void **v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  NSObject *v17;
  uint8_t *v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  __int16 v22;
  NSObject *v23;
  uint64_t v24;
  _QWORD v26[7];
  uint8_t buf[8];
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint8_t v32[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v6 = NFSharedSignpostLog();
  if (os_signpost_enabled(v6))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_216EC7000, v6, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevCheckNdef", (const char *)&unk_216F15F55, buf, 2u);
  }
  *(_QWORD *)buf = 0;
  v28 = buf;
  v29 = 0x2800000000;
  v30 = 0;
  v31 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (a2)
  {
    v26[0] = MEMORY[0x24BDAC760];
    v26[1] = 0x40000000;
    v26[2] = sub_216EF4648;
    v26[3] = &unk_24D65F358;
    v26[4] = buf;
    v26[5] = a1;
    v26[6] = a2;
    v7 = sub_216EF2A1C(a1, (uint64_t)v26);
    if (sub_216EE0ECC(v7))
    {
      v8 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i phLibNfc_RemoteDev_CheckNdef failed: 0x%04llx", "NFDriverRemoteDevCheckNdef", 6172, *v7);
      dispatch_get_specific(*v8);
      v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = *v7;
        *(_DWORD *)v32 = 136446722;
        v33 = "NFDriverRemoteDevCheckNdef";
        v34 = 1024;
        v35 = 6172;
        v36 = 2048;
        v37 = v11;
        _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_CheckNdef failed: 0x%04llx", v32, 0x1Cu);
      }
      v12 = *v7;
      if (*v7 > 185)
      {
        if (v12 == 186)
        {
          v13 = 23;
        }
        else if (v12 == 187)
        {
          v13 = 4;
        }
        else
        {
LABEL_30:
          v13 = 1;
        }
      }
      else
      {
        v13 = 12;
        switch(v12)
        {
          case 146:
          case 148:
          case 150:
            v13 = 6;
            break;
          case 147:
          case 151:
            goto LABEL_30;
          case 149:
            v13 = 5;
            break;
          case 152:
            goto LABEL_33;
          default:
            if (v12 != 121)
              goto LABEL_30;
            v13 = 18;
            break;
        }
      }
      goto LABEL_33;
    }
    v18 = v28;
    v19 = *(_QWORD *)(v28 + 28);
    *(_QWORD *)&v20 = v19;
    *((_QWORD *)&v20 + 1) = HIDWORD(v19);
    *(_OWORD *)a3 = v20;
    v21 = v18[24];
    if ((v21 - 1) >= 2)
    {
      if (v21 != 3)
      {
        v13 = 0;
        goto LABEL_33;
      }
      v13 = 0;
      v22 = 1;
    }
    else
    {
      v13 = 0;
      v22 = 257;
    }
    *((_WORD *)a3 + 8) = v22;
LABEL_33:
    v23 = NFSharedSignpostLog();
    if (os_signpost_enabled(v23))
    {
      v24 = *v7;
      *(_DWORD *)v32 = 134349056;
      v33 = (const char *)v24;
      _os_signpost_emit_with_name_impl(&dword_216EC7000, v23, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevCheckNdef", " mutexStatus=%{public, signpost.description:attribute}llu ", v32, 0xCu);
    }
    sub_216EE0D6C((void **)v7);
    goto LABEL_36;
  }
  v14 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v15)
    v15(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevCheckNdef", 6148);
  dispatch_get_specific(*v14);
  v16 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v32 = 136446466;
    v33 = "NFDriverRemoteDevCheckNdef";
    v34 = 1024;
    v35 = 6148;
    _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", v32, 0x12u);
  }
  v17 = NFSharedSignpostLog();
  if (os_signpost_enabled(v17))
  {
    *(_WORD *)v32 = 0;
    _os_signpost_emit_with_name_impl(&dword_216EC7000, v17, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevCheckNdef", (const char *)&unk_216F15F55, v32, 2u);
  }
  v13 = 5;
LABEL_36:
  _Block_object_dispose(buf, 8);
  return v13;
}

uint64_t sub_216EF4648(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_Ndef_CheckNdef();
}

void sub_216EF4674(uint64_t a1, void **a2, uint64_t a3, int a4, unsigned int a5)
{
  _DWORD *v6;

  if (a2)
  {
    v6 = a2[1];
    *(_QWORD *)v6 = a3;
    v6[2] = a4;
    sub_216EE0DE8(a2, a5);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDevWriteNdef(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  NSObject *v8;
  unsigned int *v9;
  uint64_t *v10;
  const void **v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v19;
  NSObject *v20;
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  const void **v24;
  void (*v25)(uint64_t, const char *, ...);
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  _QWORD v31[7];
  char v32;
  void **v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v8 = NFSharedSignpostLog();
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_216EC7000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevWriteNdef", (const char *)&unk_216F15F55, buf, 2u);
  }
  if (!a2)
  {
    v17 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevWriteNdef", 6216);
    dispatch_get_specific(*v17);
    v19 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v35 = "NFDriverRemoteDevWriteNdef";
      v36 = 1024;
      v37 = 6216;
      _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    v20 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v20))
      return 5;
    *(_WORD *)buf = 0;
    goto LABEL_28;
  }
  if (!a3)
  {
    v21 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22)
      v22(3, "%s:%i No NDEF write data provided", "NFDriverRemoteDevWriteNdef", 6223);
    dispatch_get_specific(*v21);
    v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v35 = "NFDriverRemoteDevWriteNdef";
      v36 = 1024;
      v37 = 6223;
      _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i No NDEF write data provided", buf, 0x12u);
    }
    v20 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v20))
      return 5;
    *(_WORD *)buf = 0;
LABEL_28:
    _os_signpost_emit_with_name_impl(&dword_216EC7000, v20, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevWriteNdef", (const char *)&unk_216F15F55, buf, 2u);
    return 5;
  }
  v9 = sub_216EE5100(*(_DWORD *)(a3 + 8), *(const void **)a3);
  v33 = (void **)v9;
  if (v9)
  {
    v31[0] = MEMORY[0x24BDAC760];
    v31[1] = 0x40000000;
    v31[2] = sub_216EF4C30;
    v31[3] = &unk_24D65F378;
    v31[4] = a1;
    v31[5] = a2;
    v31[6] = v9;
    v32 = a4;
    v10 = sub_216EF2A1C(a1, (uint64_t)v31);
    if (sub_216EE0ECC(v10))
    {
      v11 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12)
        v12(3, "%s:%i phLibNfc_Ndef_Write failed: 0x%04llx", "NFDriverRemoteDevWriteNdef", 6242, *v10);
      dispatch_get_specific(*v11);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = *v10;
        *(_DWORD *)buf = 136446722;
        v35 = "NFDriverRemoteDevWriteNdef";
        v36 = 1024;
        v37 = 6242;
        v38 = 2048;
        v39 = v14;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Ndef_Write failed: 0x%04llx", buf, 0x1Cu);
      }
      v15 = *v10;
      v16 = 6;
      if (*v10 > 148)
      {
        if (v15 == 149)
        {
          v16 = 5;
        }
        else if (v15 != 255)
        {
          if (v15 != 152)
          {
LABEL_49:
            v16 = 1;
            goto LABEL_38;
          }
          v16 = 12;
        }
      }
      else
      {
        switch(v15)
        {
          case 31:
            v16 = 15;
            break;
          case 121:
            v16 = 18;
            break;
          case 148:
            break;
          default:
            goto LABEL_49;
        }
      }
    }
    else
    {
      v16 = 0;
    }
LABEL_38:
    v28 = NFSharedSignpostLog();
    if (os_signpost_enabled(v28))
    {
      v29 = *v10;
      *(_DWORD *)buf = 134349056;
      v35 = (const char *)v29;
      _os_signpost_emit_with_name_impl(&dword_216EC7000, v28, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevWriteNdef", " mutexStatus=%{public, signpost.description:attribute}llu ", buf, 0xCu);
    }
    sub_216EE0D6C((void **)v10);
    sub_216EE5198(&v33);
    return v16;
  }
  v24 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v25)
    v25(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDevWriteNdef", 6231);
  dispatch_get_specific(*v24);
  v26 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v35 = "NFDriverRemoteDevWriteNdef";
    v36 = 1024;
    v37 = 6231;
    _os_log_impl(&dword_216EC7000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
  }
  v27 = NFSharedSignpostLog();
  if (os_signpost_enabled(v27))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_216EC7000, v27, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevWriteNdef", (const char *)&unk_216F15F55, buf, 2u);
  }
  return 3;
}

uint64_t sub_216EF4C30()
{
  return phLibNfc_Ndef_Write();
}

void sub_216EF4C60(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a3);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDevFormatNdef(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  const void **v5;
  void (*v6)(uint64_t, const char *, ...);
  NSObject *v7;
  uint64_t v8;
  uint64_t *v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  _QWORD v15[7];
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x2800000000;
  v17 = 0;
  v18 = 0;
  if (a2)
  {
    if (a3)
    {
      v3 = *a3;
      v4 = *((_DWORD *)a3 + 2);
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
    v17 = v3;
    LODWORD(v18) = v4;
    v15[0] = MEMORY[0x24BDAC760];
    v15[1] = 0x40000000;
    v15[2] = sub_216EF4F00;
    v15[3] = &unk_24D65F3A0;
    v15[4] = v16;
    v15[5] = a1;
    v15[6] = a2;
    v9 = sub_216EF2A1C(a1, (uint64_t)v15);
    if (sub_216EE0ECC(v9))
    {
      v10 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i phLibNfc_RemoteDev_FormatNdef failed: 0x%04llx", "NFDriverRemoteDevFormatNdef", 6298, *v9);
      dispatch_get_specific(*v10);
      v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *v9;
        *(_DWORD *)buf = 136446722;
        v20 = "NFDriverRemoteDevFormatNdef";
        v21 = 1024;
        v22 = 6298;
        v23 = 2048;
        v24 = v13;
        _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_FormatNdef failed: 0x%04llx", buf, 0x1Cu);
      }
      if (*v9 == 121)
        v8 = 18;
      else
        v8 = 0;
    }
    else
    {
      v8 = 0;
    }
    sub_216EE0D6C((void **)v9);
  }
  else
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v6 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v6)
      v6(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevFormatNdef", 6286);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v20 = "NFDriverRemoteDevFormatNdef";
      v21 = 1024;
      v22 = 6286;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    v8 = 5;
  }
  _Block_object_dispose(v16, 8);
  return v8;
}

uint64_t sub_216EF4F00(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_RemoteDev_FormatNdef();
}

void sub_216EF4F3C(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a3);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDevWriteLockNdef(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  _QWORD v13[6];
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 0x40000000;
    v13[2] = sub_216EF51B8;
    v13[3] = &unk_24D65F3C0;
    v13[4] = a1;
    v13[5] = a2;
    v2 = sub_216EF2A1C(a1, (uint64_t)v13);
    if (sub_216EE0ECC(v2))
    {
      v3 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i phLibNfc_RemoteDev_CheckPresence failed: 0x%04llx", "NFDriverRemoteDevWriteLockNdef", 6333, *v2);
      dispatch_get_specific(*v3);
      v5 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = *v2;
        *(_DWORD *)buf = 136446722;
        v15 = "NFDriverRemoteDevWriteLockNdef";
        v16 = 1024;
        v17 = 6333;
        v18 = 2048;
        v19 = v6;
        _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_CheckPresence failed: 0x%04llx", buf, 0x1Cu);
      }
      v7 = *v2;
      if (*v2 == 121)
      {
        v8 = 18;
      }
      else if (v7 == 150)
      {
        v8 = 6;
      }
      else if (v7 == 152)
      {
        v8 = 12;
      }
      else
      {
        v8 = 1;
      }
    }
    else
    {
      v8 = 0;
    }
    sub_216EE0D6C((void **)v2);
  }
  else
  {
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
      v10(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevWriteLockNdef", 6325);
    dispatch_get_specific(*v9);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v15 = "NFDriverRemoteDevWriteLockNdef";
      v16 = 1024;
      v17 = 6325;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    return 5;
  }
  return v8;
}

uint64_t sub_216EF51B8()
{
  return phLibNfc_ConvertToReadOnlyNdef();
}

void sub_216EF51D8(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a3);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDevCheckPresence(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  _QWORD v13[6];
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 0x40000000;
    v13[2] = sub_216EF5454;
    v13[3] = &unk_24D65F3E0;
    v13[4] = a1;
    v13[5] = a2;
    v2 = sub_216EF2A1C(a1, (uint64_t)v13);
    if (sub_216EE0ECC(v2))
    {
      v3 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i phLibNfc_RemoteDev_CheckPresence failed: 0x%04llx", "NFDriverRemoteDevCheckPresence", 6374, *v2);
      dispatch_get_specific(*v3);
      v5 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6 = *v2;
        *(_DWORD *)buf = 136446722;
        v15 = "NFDriverRemoteDevCheckPresence";
        v16 = 1024;
        v17 = 6374;
        v18 = 2048;
        v19 = v6;
        _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_CheckPresence failed: 0x%04llx", buf, 0x1Cu);
      }
      v7 = *v2;
      if (*v2 == 121)
      {
        v8 = 18;
      }
      else if (v7 == 187)
      {
        v8 = 4;
      }
      else if (v7 == 186)
      {
        v8 = 23;
      }
      else
      {
        v8 = 6;
      }
    }
    else
    {
      v8 = 0;
    }
    sub_216EE0D6C((void **)v2);
  }
  else
  {
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
      v10(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevCheckPresence", 6366);
    dispatch_get_specific(*v9);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v15 = "NFDriverRemoteDevCheckPresence";
      v16 = 1024;
      v17 = 6366;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    return 5;
  }
  return v8;
}

uint64_t sub_216EF5454()
{
  return phLibNfc_RemoteDev_CheckPresence();
}

void sub_216EF5470(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a3);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDevReadNdef(uint64_t a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  NSObject *v8;
  unint64_t v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  NSObject *v18;
  const void **v19;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v21;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t *v25;
  const void **v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  const void **v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  uint64_t v36;
  _QWORD v37[7];
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v8 = NFSharedSignpostLog();
  if (os_signpost_enabled(v8))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_216EC7000, v8, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", (const char *)&unk_216F15F55, buf, 2u);
  }
  if (!a2)
  {
    v19 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevReadNdef", 6409);
    dispatch_get_specific(*v19);
    v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v39 = "NFDriverRemoteDevReadNdef";
      v40 = 1024;
      v41 = 6409;
      _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    v18 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v18))
      return 5;
    *(_WORD *)buf = 0;
    goto LABEL_26;
  }
  if (!a3 || (v9 = a3[1]) == 0)
  {
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(3, "%s:%i Invalid buffer", "NFDriverRemoteDevReadNdef", 6415);
    dispatch_get_specific(*v15);
    v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v39 = "NFDriverRemoteDevReadNdef";
      v40 = 1024;
      v41 = 6415;
      _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid buffer", buf, 0x12u);
    }
    v18 = NFSharedSignpostLog();
    if (!os_signpost_enabled(v18))
      return 5;
    *(_WORD *)buf = 0;
LABEL_26:
    _os_signpost_emit_with_name_impl(&dword_216EC7000, v18, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", (const char *)&unk_216F15F55, buf, 2u);
    return 5;
  }
  if (v9 <= 0x8000)
  {
    v23 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
    if (v23)
    {
      v24 = v23;
      *(_QWORD *)v23 = *a3;
      v23[2] = a3[1];
      v37[0] = MEMORY[0x24BDAC760];
      v37[1] = 0x40000000;
      v37[2] = sub_216EF5B48;
      v37[3] = &unk_24D65F400;
      v37[4] = a1;
      v37[5] = a2;
      v37[6] = v23;
      v25 = sub_216EF2A1C(a1, (uint64_t)v37);
      if (sub_216EE0ECC(v25))
      {
        v26 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v27)
          v27(3, "%s:%i phLibNfc_Ndef_Read failed: 0x%04llx", "NFDriverRemoteDevReadNdef", 6441, *v25);
        dispatch_get_specific(*v26);
        v28 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          v29 = *v25;
          *(_DWORD *)buf = 136446722;
          v39 = "NFDriverRemoteDevReadNdef";
          v40 = 1024;
          v41 = 6441;
          v42 = 2048;
          v43 = v29;
          _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Ndef_Read failed: 0x%04llx", buf, 0x1Cu);
        }
        v30 = *v25;
        v14 = 12;
        switch(*v25)
        {
          case 148:
            v14 = 6;
            break;
          case 149:
            v14 = 5;
            break;
          case 150:
          case 151:
          case 153:
          case 154:
          case 155:
          case 156:
            goto LABEL_47;
          case 152:
            break;
          case 157:
            v14 = 0;
            *a4 = 0;
            break;
          default:
            if (v30 == 121)
            {
              v14 = 18;
            }
            else if (v30 != 255)
            {
LABEL_47:
              v14 = 1;
            }
            break;
        }
      }
      else
      {
        v14 = 0;
        *a4 = v24[2];
      }
      v35 = NFSharedSignpostLog();
      if (os_signpost_enabled(v35))
      {
        v36 = *v25;
        *(_DWORD *)buf = 134349056;
        v39 = (const char *)v36;
        _os_signpost_emit_with_name_impl(&dword_216EC7000, v35, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", " mutexStatus=%{public, signpost.description:attribute}llu ", buf, 0xCu);
      }
      sub_216EE0D6C((void **)v25);
      free(v24);
    }
    else
    {
      v31 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32)
        v32(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDevReadNdef", 6426);
      dispatch_get_specific(*v31);
      v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v39 = "NFDriverRemoteDevReadNdef";
        v40 = 1024;
        v41 = 6426;
        _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
      }
      v34 = NFSharedSignpostLog();
      if (os_signpost_enabled(v34))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_216EC7000, v34, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", (const char *)&unk_216F15F55, buf, 2u);
      }
      return 3;
    }
  }
  else
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11)
      v11(3, "%s:%i Requested read size is over the limit", "NFDriverRemoteDevReadNdef", 6419);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v39 = "NFDriverRemoteDevReadNdef";
      v40 = 1024;
      v41 = 6419;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Requested read size is over the limit", buf, 0x12u);
    }
    v13 = NFSharedSignpostLog();
    if (os_signpost_enabled(v13))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_216EC7000, v13, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NFDriverRemoteDevReadNdef", (const char *)&unk_216F15F55, buf, 2u);
    }
    return 15;
  }
  return v14;
}

uint64_t sub_216EF5B48(uint64_t a1, uint64_t a2)
{
  sub_216EE0E38(a2, 5.0);
  return phLibNfc_Ndef_Read();
}

void sub_216EF5B94(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a3);
    sub_216EE0D6C(a2);
  }
}

BOOL NFDriverRemoteDevSend(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  const void **v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t v24;
  _BOOL8 v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  uint64_t v28;
  const void **v29;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v31;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD v36[7];
  uint8_t buf[4];
  uint8_t *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44;
  uint8_t v45[32];
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040A1D9428BuLL);
  if (!v8)
    return 0;
  v9 = v8;
  *v8 = a3;
  *((_DWORD *)v8 + 2) = a4;
  if (!a2)
  {
    v29 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevSend", 6494);
    dispatch_get_specific(*v29);
    v31 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v45 = 136446466;
      *(_QWORD *)&v45[4] = "NFDriverRemoteDevSend";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 6494;
      _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", v45, 0x12u);
    }
    free(v9);
    return 0;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 552) & 0x10) != 0)
  {
    v33 = a2;
    v34 = a1;
    v35 = v8;
    v46 = 0u;
    memset(v45, 0, sizeof(v45));
    v10 = a4;
    v11 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    dispatch_get_specific(*v11);
    v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      v38 = (uint8_t *)"NFDriverRemoteDevSend";
      v39 = 1024;
      v40 = 6501;
      v41 = 2082;
      v42 = "[HCE C-APDU>]";
      v43 = 2048;
      v44 = a4;
      _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
    }
    if (v12)
      v12(6, "%s:%i %s %lu bytes :", "NFDriverRemoteDevSend", 6501, "[HCE C-APDU>]", a4);
    if (a4)
    {
      v14 = 0;
      do
      {
        v15 = 0;
        v16 = (char *)&v45[__sprintf_chk((char *)v45, 0, 0x30uLL, "%04lX: ", v14)];
        v17 = a3;
        v18 = a3 + v14;
        do
        {
          v19 = v15 + 1;
          v20 = v15 + 1 + v14;
          v21 = sprintf(v16, "0x%02X ", *(unsigned __int8 *)(v18 + v15));
          if (v15 > 6)
            break;
          v16 += v21;
          ++v15;
        }
        while (v20 < v10);
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v22 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          v38 = v45;
          _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
        }
        if (v12)
          v12(6, "%s", (const char *)v45);
        v14 += v19;
        a3 = v17;
      }
      while (v20 < v10);
    }
    a1 = v34;
    v9 = v35;
    a2 = v33;
  }
  v36[0] = MEMORY[0x24BDAC760];
  v36[1] = 0x40000000;
  v36[2] = sub_216EF6040;
  v36[3] = &unk_24D65F420;
  v36[4] = a1;
  v36[5] = a2;
  v36[6] = v9;
  v23 = sub_216EF2A1C(a1, (uint64_t)v36);
  v24 = sub_216EE0ECC(v23);
  v25 = v24 == 0;
  if (v24)
  {
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26)
      v26(3, "%s:%i phLibNfc_RemoteDev_Send failed 0x%04llx", "NFDriverRemoteDevSend", 6509, *v23);
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      v28 = *v23;
      *(_DWORD *)v45 = 136446722;
      *(_QWORD *)&v45[4] = "NFDriverRemoteDevSend";
      *(_WORD *)&v45[12] = 1024;
      *(_DWORD *)&v45[14] = 6509;
      *(_WORD *)&v45[18] = 2048;
      *(_QWORD *)&v45[20] = v28;
      _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Send failed 0x%04llx", v45, 0x1Cu);
    }
  }
  sub_216EE0D6C((void **)v23);
  free(v9);
  return v25;
}

uint64_t sub_216EF6040()
{
  return phLibNfc_RemoteDev_Send();
}

void sub_216EF6064(uint64_t a1, void **a2, unsigned int a3)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a3);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverRemoteDevReceive(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  const void **v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  uint64_t v14;
  const void **v15;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v17;
  uint64_t v18;
  unint64_t v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  NSObject *v30;
  const void **v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[7];
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint8_t v46[4];
  uint8_t *v47;
  __int16 v48;
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  uint8_t buf[32];
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v6 = malloc_type_calloc(0x10000uLL, 1uLL, 0x100004077774924uLL);
  if (v6)
  {
    v7 = v6;
    v41 = 0;
    v42 = &v41;
    v43 = 0x2800000000;
    v44 = v6;
    v45 = 0x10000;
    if (!a2)
    {
      v15 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevReceive", 6559);
      dispatch_get_specific(*v15);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverRemoteDevReceive";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6559;
        _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
      }
      free(v7);
      if (a3)
      {
        v14 = 0;
        *a3 = 5;
LABEL_52:
        _Block_object_dispose(&v41, 8);
        return v14;
      }
LABEL_51:
      v14 = 0;
      goto LABEL_52;
    }
    v40[0] = MEMORY[0x24BDAC760];
    v40[1] = 0x40000000;
    v40[2] = sub_216EF6664;
    v40[3] = &unk_24D65F448;
    v40[4] = &v41;
    v40[5] = a1;
    v40[6] = a2;
    v8 = sub_216EF2A1C(a1, (uint64_t)v40);
    v9 = sub_216EE0ECC(v8);
    if (!v9)
    {
      v18 = NFDataCreateWithBytesNoCopy();
      v14 = v18;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 552) & 0x10) != 0)
      {
        v36 = v18;
        v55 = 0u;
        memset(buf, 0, sizeof(buf));
        v19 = *((unsigned int *)v42 + 8);
        v39 = v42[3];
        v20 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        dispatch_get_specific(*v20);
        v22 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          v23 = *((unsigned int *)v42 + 8);
          *(_DWORD *)v46 = 136315906;
          v47 = (uint8_t *)"NFDriverRemoteDevReceive";
          v48 = 1024;
          v49 = 6588;
          v50 = 2082;
          v51 = "[HCE R-APDU<]";
          v52 = 2048;
          v53 = v23;
          _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v46, 0x26u);
        }
        v37 = v8;
        v38 = v7;
        if (v21)
          v21(6, "%s:%i %s %lu bytes :", "NFDriverRemoteDevReceive", 6588, "[HCE R-APDU<]", *((unsigned int *)v42 + 8));
        if ((_DWORD)v19)
        {
          v24 = 0;
          do
          {
            v25 = 0;
            v26 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v24)];
            do
            {
              v27 = v25 + 1;
              v28 = v25 + 1 + v24;
              v29 = sprintf(v26, "0x%02X ", *(unsigned __int8 *)(v39 + v24 + v25));
              if (v25 > 6)
                break;
              v26 += v29;
              ++v25;
            }
            while (v28 < v19);
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v30 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v46 = 136446210;
              v47 = buf;
              _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s", v46, 0xCu);
            }
            if (v21)
              v21(6, "%s", (const char *)buf);
            v24 += v27;
          }
          while (v28 < v19);
        }
        v7 = v38;
        v14 = v36;
        v8 = v37;
      }
      if (a3)
        *a3 = 0;
      sub_216EE0D6C((void **)v8);
      if (v14)
        goto LABEL_52;
      goto LABEL_50;
    }
    if (v9 == 146 || v9 == 56)
    {
      if (!a3)
      {
LABEL_49:
        sub_216EE0D6C((void **)v8);
LABEL_50:
        free(v7);
        goto LABEL_51;
      }
      v10 = 6;
    }
    else
    {
      v31 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32)
        v32(3, "%s:%i phLibNfc_RemoteDev_Receive failed 0x%04llx", "NFDriverRemoteDevReceive", 6577, *v8);
      dispatch_get_specific(*v31);
      v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        v34 = *v8;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "NFDriverRemoteDevReceive";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6577;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v34;
        _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Receive failed 0x%04llx", buf, 0x1Cu);
      }
      if (!a3)
        goto LABEL_49;
      if (*v8 == 7)
        v10 = 21;
      else
        v10 = 1;
    }
    *a3 = v10;
    goto LABEL_49;
  }
  v11 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v12)
    v12(3, "%s:%i Failed to allocate buffer", "NFDriverRemoteDevReceive", 6549);
  dispatch_get_specific(*v11);
  v13 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverRemoteDevReceive";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6549;
    _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to allocate buffer", buf, 0x12u);
  }
  v14 = 0;
  if (a3)
    *a3 = 3;
  return v14;
}

uint64_t sub_216EF6664(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  sub_216EE0E38(a2, 80.0);
  return phLibNfc_RemoteDev_Receive();
}

void sub_216EF66BC(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  unsigned int v7;
  unsigned int v8;
  size_t v9;

  if (a2)
  {
    v5 = (void **)a2[1];
    if (v5)
    {
      if (*v5)
      {
        if (a3)
        {
          if (!a4)
          {
            v7 = *(_DWORD *)(a3 + 8);
            if (v7)
            {
              v8 = *((_DWORD *)v5 + 2);
              if (v8 >= v7)
                v9 = v7;
              else
                v9 = v8;
              memcpy(*v5, *(const void **)a3, v9);
              *((_DWORD *)v5 + 2) = v9;
            }
          }
        }
        sub_216EE0DE8(a2, a4);
        sub_216EE0D6C(a2);
      }
    }
  }
}

void NFDriverRemoteDevReceiveAsync(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  BOOL *v6;
  BOOL *v7;
  uint64_t v8;
  NSObject *v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  _QWORD block[8];
  _BYTE buf[24];
  __int16 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = (BOOL *)malloc_type_calloc(1uLL, 0x10uLL, 0x10800403DA8C3A5uLL);
    if (v6)
    {
      v7 = v6;
      *((_QWORD *)v6 + 1) = _Block_copy(a3);
      v8 = *(_QWORD *)(a1 + 24);
      *v7 = (*(_BYTE *)(v8 + 552) & 0x10) != 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v15 = 0;
      v9 = *(NSObject **)(v8 + 528);
      block[0] = MEMORY[0x24BDAC760];
      block[1] = 0x40000000;
      block[2] = sub_216EF6960;
      block[3] = &unk_24D65F470;
      block[4] = buf;
      block[5] = a1;
      block[6] = a2;
      block[7] = v7;
      dispatch_async_and_wait(v9, block);
      if (*(_WORD *)(*(_QWORD *)&buf[8] + 24) != 13)
        a3[2](a3, 1, 0);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      a3[2](a3, 3, 0);
    }
  }
  else
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevReceiveAsync", 6658);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "NFDriverRemoteDevReceiveAsync";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6658;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i No remote tag handle provided", buf, 0x12u);
    }
    a3[2](a3, 5, 0);
  }
}

uint64_t sub_216EF6960(uint64_t a1)
{
  uint64_t result;

  result = phLibNfc_RemoteDev_Receive();
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_216EF69A4(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  NSObject *v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  const void **v23;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v25;
  uint64_t v26;
  uint8_t buf[4];
  uint8_t *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  uint8_t v35[32];
  __int128 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v23 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "_Callback_NFDriverRemoteDevReceiveAsync", 6609, "ctx");
    dispatch_get_specific(*v23);
    v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v35 = 136446722;
      *(_QWORD *)&v35[4] = "_Callback_NFDriverRemoteDevReceiveAsync";
      *(_WORD *)&v35[12] = 1024;
      *(_DWORD *)&v35[14] = 6609;
      *(_WORD *)&v35[18] = 2080;
      *(_QWORD *)&v35[20] = "ctx";
      _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", v35, 0x1Cu);
    }
    abort();
  }
  if (a4 != 146 && a4 != 56)
  {
    if (a4)
    {
      v20 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(3, "%s:%i phLibNfc_RemoteDev_Receive failed 0x%04hx", "_Callback_NFDriverRemoteDevReceiveAsync", 6643, a4);
      dispatch_get_specific(*v20);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v35 = 136446722;
        *(_QWORD *)&v35[4] = "_Callback_NFDriverRemoteDevReceiveAsync";
        *(_WORD *)&v35[12] = 1024;
        *(_DWORD *)&v35[14] = 6643;
        *(_WORD *)&v35[18] = 1024;
        *(_DWORD *)&v35[20] = a4;
        _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Receive failed 0x%04hx", v35, 0x18u);
      }
    }
    else if (a3)
    {
      if (*(_DWORD *)(a3 + 8))
      {
        v6 = (_QWORD *)NFDataCreateWithBytes();
        v7 = v6;
        if (*(_BYTE *)a2)
        {
          v36 = 0u;
          memset(v35, 0, sizeof(v35));
          v8 = v6[1];
          v26 = *v6;
          v9 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v9);
          v11 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12 = v7[1];
            *(_DWORD *)buf = 136315906;
            v28 = (uint8_t *)"_Callback_NFDriverRemoteDevReceiveAsync";
            v29 = 1024;
            v30 = 6630;
            v31 = 2082;
            v32 = "[HCE R-APDU<]";
            v33 = 2048;
            v34 = v12;
            _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
          }
          if (v10)
            v10(6, "%s:%i %s %lu bytes :", "_Callback_NFDriverRemoteDevReceiveAsync", 6630, "[HCE R-APDU<]", v7[1]);
          if (v8)
          {
            v13 = 0;
            do
            {
              v14 = 0;
              v15 = (char *)&v35[__sprintf_chk((char *)v35, 0, 0x30uLL, "%04lX: ", v13)];
              do
              {
                v16 = v14 + 1;
                v17 = v14 + 1 + v13;
                v18 = sprintf(v15, "0x%02X ", *(unsigned __int8 *)(v26 + v13 + v14));
                if (v14 > 6)
                  break;
                v15 += v18;
                ++v14;
              }
              while (v17 < v8);
              dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
              v19 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136446210;
                v28 = v35;
                _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
              }
              if (v10)
                v10(6, "%s", (const char *)v35);
              v13 += v16;
            }
            while (v17 < v8);
          }
        }
      }
    }
  }
  (*(void (**)(void))(*((_QWORD *)a2 + 1) + 16))();
  _Block_release(*((const void **)a2 + 1));
  free(a2);
}

void sub_216EF6E00(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _DWORD *v6;
  _DWORD *v8;
  int v9;

  if (a4)
  {
    if (!a5)
    {
      v6 = a2[1];
      if (v6)
      {
        if (*(_DWORD *)a4 == 16 || *(_DWORD *)a4 == 11)
        {
          v8 = *(_DWORD **)(a4 + 8);
          if (v8)
          {
            v9 = *v8 - 1;
            if (v9 <= 0x36)
              *v6 = dword_216F083C8[v9];
          }
        }
      }
    }
  }
  sub_216EE0DE8(a2, a5);
  sub_216EE0D6C(a2);
}

uint64_t NFDriverRemoteDevGetMiFareInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  uint64_t *v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  const void **v15;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v17;
  const char *v18;
  const void **v19;
  void (*v20)(uint64_t, const char *, ...);
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  const void **v24;
  void (*v25)(uint64_t, const char *, ...);
  NSObject *v26;
  void *v27;
  _QWORD v29[8];
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i No remote tag handle provided", "NFDriverRemoteDevGetMiFareInfo", 6951);
    dispatch_get_specific(*v15);
    v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return 5;
    *(_DWORD *)buf = 136446466;
    v31 = "NFDriverRemoteDevGetMiFareInfo";
    v32 = 1024;
    v33 = 6951;
    v18 = "%{public}s:%i No remote tag handle provided";
    goto LABEL_21;
  }
  if (!a3)
  {
    v19 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20)
      v20(3, "%s:%i Missing input tagInfo", "NFDriverRemoteDevGetMiFareInfo", 6954);
    dispatch_get_specific(*v19);
    v17 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      return 5;
    *(_DWORD *)buf = 136446466;
    v31 = "NFDriverRemoteDevGetMiFareInfo";
    v32 = 1024;
    v33 = 6954;
    v18 = "%{public}s:%i Missing input tagInfo";
LABEL_21:
    _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
    return 5;
  }
  v6 = malloc_type_calloc(1uLL, 0x10uLL, 0x10800407411B482uLL);
  if (!v6)
  {
    v21 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22)
      v22(3, "%s:%i Allocation failure", "NFDriverRemoteDevGetMiFareInfo", 6960);
    dispatch_get_specific(*v21);
    v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v31 = "NFDriverRemoteDevGetMiFareInfo";
      v32 = 1024;
      v33 = 6960;
      _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 3;
  }
  v7 = v6;
  v8 = malloc_type_calloc(1uLL, 0x10uLL, 0x10800407411B482uLL);
  v7[1] = v8;
  if (!v8)
  {
    v24 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v25)
      v25(3, "%s:%i Allocation failure", "NFDriverRemoteDevGetMiFareInfo", 6966);
    dispatch_get_specific(*v24);
    v26 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v31 = "NFDriverRemoteDevGetMiFareInfo";
      v32 = 1024;
      v33 = 6966;
      _os_log_impl(&dword_216EC7000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    free(v7);
    return 3;
  }
  v29[0] = MEMORY[0x24BDAC760];
  v29[1] = 0x40000000;
  v29[2] = sub_216EF72F8;
  v29[3] = &unk_24D65F490;
  v29[4] = a3;
  v29[5] = a1;
  v29[6] = a2;
  v29[7] = v7;
  v9 = sub_216EF2A1C(a1, (uint64_t)v29);
  if (sub_216EE0ECC(v9))
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11)
      v11(3, "%s:%i phLibNfc_RemoteDev_Receive failed 0x%04llx", "NFDriverRemoteDevGetMiFareInfo", 6978, *v9);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *v9;
      *(_DWORD *)buf = 136446722;
      v31 = "NFDriverRemoteDevGetMiFareInfo";
      v32 = 1024;
      v33 = 6978;
      v34 = 2048;
      v35 = v13;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_RemoteDev_Receive failed 0x%04llx", buf, 0x1Cu);
    }
    if (*v9 == 121)
      v14 = 18;
    else
      v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  sub_216EE0D6C((void **)v9);
  v27 = (void *)v7[1];
  if (v27)
    free(v27);
  free(v7);
  return v14;
}

uint64_t sub_216EF72F8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 32);
  sub_216EE0E38(a2, 80.0);
  return phLibNfc_GetTagInfo();
}

BOOL NFDriverGPIOSetPMUStandbyPowerEnabled()
{
  int v0;
  const void **v1;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v3;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v0 = phTmlNfc_IoCtl();
  if (v0)
  {
    v1 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to set GPIO : %u", "NFDriverGPIOSetPMUStandbyPowerEnabled", 7003, v0);
    dispatch_get_specific(*v1);
    v3 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v6 = "NFDriverGPIOSetPMUStandbyPowerEnabled";
      v7 = 1024;
      v8 = 7003;
      v9 = 1024;
      v10 = v0;
      _os_log_impl(&dword_216EC7000, v3, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set GPIO : %u", buf, 0x18u);
    }
  }
  return v0 == 0;
}

uint64_t NFDriverSetSecureElementPower(uint64_t a1, int a2)
{
  const void **v2;
  void (*v3)(uint64_t, const char *, ...);
  NSObject *v4;
  uint64_t v6;
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v7 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSetSecureElementPower", 7017, "driver");
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v11 = "NFDriverSetSecureElementPower";
      v12 = 1024;
      v13 = 7017;
      v14 = 2080;
      v15 = "driver";
      _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 728))
  {
    v2 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v3 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v3)
      v3(3, "%s:%i Cannot power cycle, request denied", "NFDriverSetSecureElementPower", 7020);
    dispatch_get_specific(*v2);
    v4 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v11 = "NFDriverSetSecureElementPower";
      v12 = 1024;
      v13 = 7020;
      _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_ERROR, "%{public}s:%i Cannot power cycle, request denied", buf, 0x12u);
    }
    return 0;
  }
  else
  {
    v6 = sub_216EF7660(a1, a2);
    return sub_216ED7B50(v6);
  }
}

uint64_t sub_216EF7660(uint64_t a1, int a2)
{
  uint64_t result;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  result = 0;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 496);
      break;
    case 2:
      result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 504);
      break;
    case 4:
      result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 512);
      break;
    default:
      v5 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Unknown se ID: %d", "_NFDriverGetSecureElement", 3201, a2);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v9 = "_NFDriverGetSecureElement";
        v10 = 1024;
        v11 = 3201;
        v12 = 1024;
        v13 = a2;
        _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown se ID: %d", buf, 0x18u);
      }
      result = 0;
      break;
  }
  return result;
}

uint64_t NFDriverSecureElementGetOSInfo(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a3)
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementGetOSInfo", 7029, "driver && info");
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v9 = "NFDriverSecureElementGetOSInfo";
      v10 = 1024;
      v11 = 7029;
      v12 = 2080;
      v13 = "driver && info";
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v3 = sub_216EF7660(a1, a2);
  if (v3)
    return sub_216ED7DE0(v3);
  else
    return 0;
}

uint64_t NFDriverSecureElementGetOSMode(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a3)
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementGetOSMode", 7039, "driver && info");
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v9 = "NFDriverSecureElementGetOSMode";
      v10 = 1024;
      v11 = 7039;
      v12 = 2080;
      v13 = "driver && info";
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v3 = sub_216EF7660(a1, a2);
  if (v3)
    return sub_216ED7F28(v3);
  else
    return 0;
}

uint64_t NFDriverGetOSUpdateLog(uint64_t a1, int a2)
{
  uint64_t v2;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverGetOSUpdateLog", 7050, "driver");
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "NFDriverGetOSUpdateLog";
      v9 = 1024;
      v10 = 7050;
      v11 = 2080;
      v12 = "driver";
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v2 = sub_216EF7660(a1, a2);
  return sub_216ED8070(v2);
}

uint64_t NFDriverSecureElementGetAttackCounterLog(uint64_t a1, int a2)
{
  uint64_t v2;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementGetAttackCounterLog", 7057, "driver");
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "NFDriverSecureElementGetAttackCounterLog";
      v9 = 1024;
      v10 = 7057;
      v11 = 2080;
      v12 = "driver";
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v2 = sub_216EF7660(a1, a2);
  return sub_216ED81B8(v2);
}

uint64_t NFDriverSecureElementGetPresenceOfAttackLog(uint64_t a1, int a2)
{
  uint64_t v2;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverSecureElementGetPresenceOfAttackLog", 7064, "driver");
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "NFDriverSecureElementGetPresenceOfAttackLog";
      v9 = 1024;
      v10 = 7064;
      v11 = 2080;
      v12 = "driver";
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v2 = sub_216EF7660(a1, a2);
  return sub_216ED8300(v2);
}

uint64_t NFDriverGetUnlockRequestInfo(uint64_t a1, int a2)
{
  uint64_t v2;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!a1)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverGetUnlockRequestInfo", 7071, "driver");
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "NFDriverGetUnlockRequestInfo";
      v9 = 1024;
      v10 = 7071;
      v11 = 2080;
      v12 = "driver";
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  v2 = sub_216EF7660(a1, a2);
  return sub_216ED8448(v2);
}

BOOL NFDriverGetSecureElementInfo(uint64_t a1, int a2, void *a3)
{
  uint64_t v5;
  int v6;
  const void **v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  _BOOL8 result;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  const void **v17;
  void (*v18)(uint64_t, const char *, ...);
  const void **v19;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  int v22;
  const void **v23;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!a1 || !a3)
  {
    v23 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i FAILED: %s", "NFDriverGetSecureElementInfo", 7078, "driver && info");
    dispatch_get_specific(*v23);
    v25 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v27 = "NFDriverGetSecureElementInfo";
      v28 = 1024;
      v29 = 7078;
      v30 = 2080;
      v31 = "driver && info";
      _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i FAILED: %s", buf, 0x1Cu);
    }
    abort();
  }
  if (a2 != 1)
  {
    v7 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v8)
      v8(3, "%s:%i SE %d does not support wired mode", "NFDriverGetSecureElementInfo", 7090, a2);
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446722;
    v27 = "NFDriverGetSecureElementInfo";
    v28 = 1024;
    v29 = 7090;
    v30 = 1024;
    LODWORD(v31) = a2;
    v11 = "%{public}s:%i SE %d does not support wired mode";
LABEL_13:
    v12 = v9;
LABEL_14:
    v13 = 24;
LABEL_19:
    _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return 0;
  }
  if (*(_DWORD *)(a1 + 44) != 1)
  {
    v14 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(3, "%s:%i eSE not in wired mode", "NFDriverGetSecureElementInfo", 7084);
    dispatch_get_specific(*v14);
    v16 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "NFDriverGetSecureElementInfo";
      v28 = 1024;
      v29 = 7084;
      v11 = "%{public}s:%i eSE not in wired mode";
      v12 = v16;
      v13 = 18;
      goto LABEL_19;
    }
    return result;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 496);
  if (!v5)
  {
    v17 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v18)
      v18(3, "%s:%i No SE of type %d.", "NFDriverGetSecureElementInfo", 7096, 1);
    dispatch_get_specific(*v17);
    v9 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446722;
    v27 = "NFDriverGetSecureElementInfo";
    v28 = 1024;
    v29 = 7096;
    v30 = 1024;
    LODWORD(v31) = 1;
    v11 = "%{public}s:%i No SE of type %d.";
    goto LABEL_13;
  }
  bzero(a3, 0xE08uLL);
  if (!sub_216ED7F28(v5))
    return 1;
  v6 = *((_DWORD *)a3 + 883);
  if ((v6 - 2) < 2)
  {
    sub_216ED7C98(v5);
    sub_216ED7DE0(v5);
    return 1;
  }
  if (v6 == 1)
  {
    sub_216ED8590(v5);
    sub_216ECE7E4(v5, (uint64_t)a3);
    return 1;
  }
  v19 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v20)
    v20(3, "%s:%i Unknown OS mode %d", "NFDriverGetSecureElementInfo", 7124, *((_DWORD *)a3 + 883));
  dispatch_get_specific(*v19);
  v21 = NFSharedLogGetLogger();
  result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v22 = *((_DWORD *)a3 + 883);
    *(_DWORD *)buf = 136446722;
    v27 = "NFDriverGetSecureElementInfo";
    v28 = 1024;
    v29 = 7124;
    v30 = 1024;
    LODWORD(v31) = v22;
    v11 = "%{public}s:%i Unknown OS mode %d";
    v12 = v21;
    goto LABEL_14;
  }
  return result;
}

uint64_t NFDriverCopySMBLog(uint64_t a1)
{
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  _QWORD v11[6];
  uint8_t v12[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  _BYTE buf[24];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Getting SMB log..", "NFDriverCopySMBLog", 9669);
  dispatch_get_specific(*v2);
  v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverCopySMBLog";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 9669;
    _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Getting SMB log..", buf, 0x12u);
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v19 = 0;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 0x40000000;
  v11[2] = sub_216F01084;
  v11[3] = &unk_24D65F5E0;
  v11[4] = buf;
  v11[5] = a1;
  v5 = sub_216EF2A1C(a1, (uint64_t)v11);
  v6 = sub_216EE0ECC(v5);
  sub_216EE0D6C((void **)v5);
  if (v6)
  {
    v7 = 0;
    if (v6 != 51)
    {
      dispatch_get_specific(*v2);
      v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v8)
        v8(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverCopySMBLog", 9687, v6);
      dispatch_get_specific(*v2);
      v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v12 = 136446722;
        v13 = "NFDriverCopySMBLog";
        v14 = 1024;
        v15 = 9687;
        v16 = 2048;
        v17 = v6;
        _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", v12, 0x1Cu);
      }
      v7 = 0;
    }
  }
  else
  {
    v7 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
  }
  _Block_object_dispose(buf, 8);
  return v7;
}

uint64_t NFDriverSetReaderModeRFGain(uint64_t a1, const void *a2, unsigned int a3)
{
  signed int v6;
  char *v7;
  char *v8;
  const void **v9;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  NSObject *v20;
  unsigned int *v21;
  uint64_t *v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  uint64_t v26;
  _BYTE buf[12];
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  uint8_t v34[32];
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3 - 0xFFFF >= 0xFFFF0002)
    {
      v6 = a3 + 5;
      v7 = (char *)malloc_type_calloc(1uLL, (int)(a3 + 5), 0x100004077774924uLL);
      if (v7)
      {
        v8 = v7;
        v26 = a1;
        *(_WORD *)v7 = 3488;
        v7[2] = a3 + 2;
        *(_WORD *)(v7 + 3) = 17460;
        memcpy(v7 + 5, a2, a3);
        v35 = 0u;
        memset(v34, 0, sizeof(v34));
        v9 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        dispatch_get_specific(*v9);
        v11 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "NFDriverSetReaderModeRFGain";
          v28 = 1024;
          v29 = 7374;
          v30 = 2082;
          v31 = "REGISTER UPDATE";
          v32 = 2048;
          v33 = v6;
          _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", buf, 0x26u);
        }
        if (Logger)
          Logger(5, "%s:%i %s %lu bytes :", "NFDriverSetReaderModeRFGain", 7374, "REGISTER UPDATE", v6);
        if (v6)
        {
          v12 = 0;
          do
          {
            v13 = 0;
            v14 = (char *)&v34[__sprintf_chk((char *)v34, 0, 0x30uLL, "%04lX: ", v12)];
            v15 = v8;
            v16 = &v8[v12];
            do
            {
              v17 = v13 + 1;
              v18 = v13 + 1 + v12;
              v19 = sprintf(v14, "0x%02X ", v16[v13]);
              if (v13 > 6)
                break;
              v14 += v19;
              ++v13;
            }
            while (v18 < v6);
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v20 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = v34;
              _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
            }
            if (Logger)
              Logger(5, "%s", (const char *)v34);
            v12 += v17;
            v8 = v15;
          }
          while (v18 < v6);
        }
        v21 = sub_216EE5100(v6, v8);
        *(_QWORD *)buf = v21;
        if (v21)
        {
          v22 = sub_216EE4D10(v26, 37025, (uint64_t)v21, 0);
          if (sub_216EE0ECC(v22))
          {
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v23)
              v23(3, "%s:%i Failed to get RF settings.", "NFDriverSetReaderModeRFGain", 7383);
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v24 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v34 = 136446466;
              *(_QWORD *)&v34[4] = "NFDriverSetReaderModeRFGain";
              *(_WORD *)&v34[12] = 1024;
              *(_DWORD *)&v34[14] = 7383;
              _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF settings.", v34, 0x12u);
            }
          }
          sub_216EE0D6C((void **)v22);
          sub_216EE5198((void ***)buf);
          free(v8);
        }
      }
    }
  }
  return 0;
}

BOOL sub_216EF88F4(uint64_t a1, char a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  const void **v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  const void **v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  _BOOL8 result;
  const void **v15;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v17;
  __int16 v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  _BYTE v23[19];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = NFGetProductType();
  if ((v4 - 11) > 0x38 || ((1 << (v4 - 11)) & 0x100000000000007) == 0)
  {
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Device does not require RF settings changes", "NFDriverConfigureReaderModeRFForCathaySigned", 7578);
    dispatch_get_specific(*v15);
    v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v23 = 136446466;
      *(_QWORD *)&v23[4] = "NFDriverConfigureReaderModeRFForCathaySigned";
      *(_WORD *)&v23[12] = 1024;
      *(_DWORD *)&v23[14] = 7578;
      _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not require RF settings changes", v23, 0x12u);
    }
    return 1;
  }
  else
  {
    if ((a2 & 1) != 0)
    {
      v6 = 0;
      while (1)
      {
        v18 = *(_WORD *)((char *)&unk_216F082B0 + v6 + 1);
        *(_OWORD *)v23 = *(_OWORD *)((char *)&unk_216F082B0 + v6);
        *(_DWORD *)&v23[15] = *(_DWORD *)((char *)&unk_216F082B0 + v6 + 15);
        if ((sub_216EF8C10(a1, &v18, (__int128 *)v23) & 1) == 0)
          break;
        v6 += 19;
        if (v6 == 76)
          return 1;
      }
      v8 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v9)
        v9(4, "%s:%i NFDriverConfigureReaderModeRFForCathaySigned: Unable to apply Dynamic RF settings. Trying to reset back to defaults", "NFDriverConfigureReaderModeRFForCathaySigned", 7594);
      dispatch_get_specific(*v8);
      v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v20 = "NFDriverConfigureReaderModeRFForCathaySigned";
        v21 = 1024;
        v22 = 7594;
        _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i NFDriverConfigureReaderModeRFForCathaySigned: Unable to apply Dynamic RF settings. Trying to reset back to defaults", buf, 0x12u);
      }
      sub_216EF88F4(a1, 0);
      return 0;
    }
    v7 = 0;
    while (1)
    {
      v18 = *(_WORD *)((char *)&unk_216F082FC + v7 + 1);
      *(_OWORD *)v23 = *(_OWORD *)((char *)&unk_216F082FC + v7);
      *(_DWORD *)&v23[15] = *(_DWORD *)((char *)&unk_216F082FC + v7 + 15);
      if ((sub_216EF8C10(a1, &v18, (__int128 *)v23) & 1) == 0)
        break;
      v7 += 19;
      if (v7 == 76)
        return 1;
    }
    v11 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12)
      v12(4, "%s:%i NFDriverConfigureReaderModeRFForCathaySigned: Unable to apply Default RF settings", "NFDriverConfigureReaderModeRFForCathaySigned", 7609);
    dispatch_get_specific(*v11);
    v13 = NFSharedLogGetLogger();
    result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "NFDriverConfigureReaderModeRFForCathaySigned";
      v21 = 1024;
      v22 = 7609;
      _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i NFDriverConfigureReaderModeRFForCathaySigned: Unable to apply Default RF settings", buf, 0x12u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_216EF8C10(uint64_t a1, const void *a2, __int128 *a3)
{
  unsigned int *v5;
  uint64_t *v6;
  uint64_t v7;
  const void **v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  _DWORD *v11;
  int v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  const char *v15;
  BOOL v16;
  void (*v17)(uint64_t, const char *, ...);
  uint64_t v18;
  uint64_t result;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  unsigned int v22;
  char *v23;
  void *v24;
  __int128 v25;
  unsigned int *v26;
  void **v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  void **v34;
  void **v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v35 = (void **)sub_216EE5100(2u, a2);
  v5 = sub_216EE5100(0x100u, 0);
  v34 = (void **)v5;
  v6 = sub_216EE4D10(a1, 37027, (uint64_t)v35, (uint64_t)v5);
  v7 = sub_216EE0ECC(v6);
  v8 = (const void **)MEMORY[0x24BEDCDB0];
  if (v7)
  {
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to get RF conf settings.", "_NFDriverGetReaderModeRFConfigRegs", 7487);
    dispatch_get_specific(*v8);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v37 = "_NFDriverGetReaderModeRFConfigRegs";
      v38 = 1024;
      v39 = 7487;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get RF conf settings.", buf, 0x12u);
    }
    sub_216EE0D6C((void **)v6);
    v11 = 0;
    v12 = 0;
  }
  else
  {
    sub_216EE0D6C((void **)v6);
    v11 = malloc_type_calloc(1uLL, v5[2] - 1, 0x100004077774924uLL);
    memcpy(v11, (const void *)(*(_QWORD *)v5 + 1), v5[2] - 1);
    v12 = v5[2] - 1;
  }
  sub_216EE5198(&v35);
  sub_216EE5198(&v34);
  if (v7)
  {
    dispatch_get_specific(*v8);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(3, "%s:%i Unable to get RF Conf register values", "_NFDriverApplyRFConfig", 7551);
    dispatch_get_specific(*v8);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v37 = "_NFDriverApplyRFConfig";
      v38 = 1024;
      v39 = 7551;
      v15 = "%{public}s:%i Unable to get RF Conf register values";
LABEL_22:
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  if (v11)
    v16 = v12 == 0;
  else
    v16 = 1;
  if (v16)
  {
    dispatch_get_specific(*v8);
    v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v17)
      v17(3, "%s:%i Set output read buffer empty. Not applying new values", "_NFDriverApplyRFConfig", 7546);
    dispatch_get_specific(*v8);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v37 = "_NFDriverApplyRFConfig";
      v38 = 1024;
      v39 = 7546;
      v15 = "%{public}s:%i Set output read buffer empty. Not applying new values";
      goto LABEL_22;
    }
LABEL_23:
    v18 = 0;
    result = 0;
    if (!v11)
      return result;
    goto LABEL_24;
  }
  if (*v11 != *(_DWORD *)((char *)a3 + 3))
  {
    dispatch_get_specific(*v8);
    v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20)
      v20(6, "%s:%i Values different. Will apply new values", "_NFDriverApplyRFConfig", 7529);
    dispatch_get_specific(*v8);
    v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v37 = "_NFDriverApplyRFConfig";
      v38 = 1024;
      v39 = 7529;
      _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Values different. Will apply new values", buf, 0x12u);
    }
    v22 = sub_216EE6D80(a1, 6);
    v23 = (char *)malloc_type_calloc(1uLL, 0x15uLL, 0x100004077774924uLL);
    if (!v23)
    {
      dispatch_get_specific(*v8);
      v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30)
        v30(3, "%s:%i Unable to alloc memory ", "_NFDriverSetReaderModeRFConfigRegsSigned", 7405);
      dispatch_get_specific(*v8);
      v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v37 = "_NFDriverSetReaderModeRFConfigRegsSigned";
        v38 = 1024;
        v39 = 7405;
        _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i Unable to alloc memory ", buf, 0x12u);
      }
      goto LABEL_42;
    }
    v24 = v23;
    *(_WORD *)v23 = __rev16(v22);
    v25 = *a3;
    *(_DWORD *)(v23 + 17) = *(_DWORD *)((char *)a3 + 15);
    *(_OWORD *)(v23 + 2) = v25;
    v26 = sub_216EE5100(0x15u, v23);
    v35 = (void **)v26;
    free(v24);
    v27 = (void **)sub_216EE4D10(a1, 224, (uint64_t)v26, 0);
    if (sub_216EE0ECC((uint64_t *)v27))
    {
      dispatch_get_specific(*v8);
      v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v28)
        v28(3, "%s:%i Failed to set RF conf settings.", "_NFDriverSetReaderModeRFConfigRegsSigned", 7419);
      dispatch_get_specific(*v8);
      v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v37 = "_NFDriverSetReaderModeRFConfigRegsSigned";
        v38 = 1024;
        v39 = 7419;
        _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set RF conf settings.", buf, 0x12u);
      }
      sub_216EE0D6C(v27);
      sub_216EE5198(&v35);
LABEL_42:
      dispatch_get_specific(*v8);
      v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32)
        v32(3, "%s:%i Failed to set RF config set1.", "_NFDriverApplyRFConfig", 7541);
      dispatch_get_specific(*v8);
      v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v37 = "_NFDriverApplyRFConfig";
        v38 = 1024;
        v39 = 7541;
        _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set RF config set1.", buf, 0x12u);
      }
      v18 = 0;
      goto LABEL_24;
    }
    sub_216EE0D6C(v27);
    sub_216EE5198(&v35);
  }
  v18 = 1;
LABEL_24:
  free(v11);
  return v18;
}

BOOL sub_216EF9248(uint64_t a1, int a2)
{
  unsigned int v4;
  uint64_t v5;
  char i;
  char *v7;
  char v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  _BOOL8 result;
  const void **v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  const void **v16;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v18;
  __int16 v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  _BYTE v24[19];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v4 = NFGetProductType();
  if (v4 > 0x18 || ((1 << v4) & 0x100C000) == 0)
  {
    v16 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Device does not require RF settings changes", "NFDriverConfigureReaderModeRFForMercurySigned", 7634);
    dispatch_get_specific(*v16);
    v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v24 = 136446466;
      *(_QWORD *)&v24[4] = "NFDriverConfigureReaderModeRFForMercurySigned";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 7634;
      _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Device does not require RF settings changes", v24, 0x12u);
    }
    return 1;
  }
  if (!a2)
  {
    v19 = 16450;
    *(_DWORD *)&v24[15] = 2041531977;
    *(_OWORD *)v24 = xmmword_216F0835B;
    if ((sub_216EF8C10(a1, &v19, (__int128 *)v24) & 1) == 0)
    {
      v13 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v14)
        v14(4, "%s:%i NFDriverConfigureReaderModeRFForMercurySigned: Unable to apply Default RF settings", "NFDriverConfigureReaderModeRFForMercurySigned", 7665);
      dispatch_get_specific(*v13);
      v15 = NFSharedLogGetLogger();
      result = os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "NFDriverConfigureReaderModeRFForMercurySigned";
        v22 = 1024;
        v23 = 7665;
        _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i NFDriverConfigureReaderModeRFForMercurySigned: Unable to apply Default RF settings", buf, 0x12u);
        return 0;
      }
      return result;
    }
    return 1;
  }
  v5 = 0;
  for (i = 1; (i & 1) != 0; i = 0)
  {
    v7 = (char *)&unk_216F08348 + 19 * v5;
    v19 = 16450;
    *(_OWORD *)v24 = *(_OWORD *)v7;
    *(_DWORD *)&v24[15] = *(_DWORD *)(v7 + 15);
    v8 = sub_216EF8C10(a1, &v19, (__int128 *)v24);
    v5 = 1;
    if ((v8 & 1) == 0)
    {
      v9 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10)
        v10(4, "%s:%i NFDriverConfigureReaderModeRFForMercurySigned: Unable to apply Dynamic RF settings. Trying to reset back to defaults", "NFDriverConfigureReaderModeRFForMercurySigned", 7650);
      dispatch_get_specific(*v9);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v21 = "NFDriverConfigureReaderModeRFForMercurySigned";
        v22 = 1024;
        v23 = 7650;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i NFDriverConfigureReaderModeRFForMercurySigned: Unable to apply Dynamic RF settings. Trying to reset back to defaults", buf, 0x12u);
      }
      sub_216EF9248(a1, 0);
      v5 = 0;
      return v5 != 0;
    }
  }
  return v5 != 0;
}

uint64_t NFDriverConfigureReaderModeRFForTransitPartner(uint64_t a1, char a2, int a3)
{
  uint64_t result;

  if (a3 == 1)
    return sub_216EF9248(a1, a2);
  if (a3 == 2)
    return sub_216EF88F4(a1, a2);
  result = 0;
  if (a3 == 3 && (a2 & 1) == 0)
  {
    sub_216EF88F4(a1, 0);
    sub_216EF9248(a1, 0);
    return 1;
  }
  return result;
}

uint64_t NFDriverEnableReaderModeDynamicBBAControl(uint64_t a1, int a2)
{
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  uint64_t v5;
  BOOL v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  int v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  const char *v15;
  char v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 716) <= 9u)
  {
    v2 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Not supported - skipping on this hardware", "NFDriverEnableReaderModeDynamicBBAControl", 7698);
    dispatch_get_specific(*v2);
    v4 = NFSharedLogGetLogger();
    v5 = 0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v19 = "NFDriverEnableReaderModeDynamicBBAControl";
      v20 = 1024;
      v21 = 7698;
      _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not supported - skipping on this hardware", buf, 0x12u);
      return 0;
    }
    return v5;
  }
  v8 = sub_216EE7B4C(a1, 0, 0, 0, 0, 0, 0);
  v9 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (!v8)
  {
    if (v10)
      v10(4, "%s:%i Failed to stop discovery", "NFDriverEnableReaderModeDynamicBBAControl", 7703);
    dispatch_get_specific(*v9);
    v14 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      return 1;
    *(_DWORD *)buf = 136446466;
    v19 = "NFDriverEnableReaderModeDynamicBBAControl";
    v20 = 1024;
    v21 = 7703;
    v15 = "%{public}s:%i Failed to stop discovery";
    goto LABEL_23;
  }
  if (v10)
    v10(6, "%s:%i enable: %d", "NFDriverEnableReaderModeDynamicBBAControl", 7707, a2);
  dispatch_get_specific(*v9);
  v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v19 = "NFDriverEnableReaderModeDynamicBBAControl";
    v20 = 1024;
    v21 = 7707;
    v22 = 1024;
    v23 = a2;
    _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enable: %d", buf, 0x18u);
  }
  v17 = a2;
  v5 = sub_216EF9928(a1, 41244, &v17);
  if (*(_BYTE *)(a1 + 62))
    v12 = 1;
  else
    v12 = 2;
  if (!sub_216EE7B4C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v12))
  {
    dispatch_get_specific(*v9);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(3, "%s:%i Failed to update discovery", "NFDriverEnableReaderModeDynamicBBAControl", 7713);
    dispatch_get_specific(*v9);
    v14 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      return 1;
    *(_DWORD *)buf = 136446466;
    v19 = "NFDriverEnableReaderModeDynamicBBAControl";
    v20 = 1024;
    v21 = 7713;
    v15 = "%{public}s:%i Failed to update discovery";
LABEL_23:
    _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, v15, buf, 0x12u);
    return 1;
  }
  return v5;
}

uint64_t sub_216EF9928(uint64_t a1, int a2, _BYTE *a3)
{
  unsigned int *v6;
  uint64_t *v7;
  const void **v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const void **v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  void **v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v6 = sub_216EE5100(4u, 0);
  v17 = (void **)v6;
  if (v6 && *(_QWORD *)v6)
  {
    **(_BYTE **)v6 = -95;
    *(_BYTE *)(*(_QWORD *)v6 + 1) = a2;
    *(_BYTE *)(*(_QWORD *)v6 + 2) = 1;
    *(_BYTE *)(*(_QWORD *)v6 + 3) = *a3;
    v7 = sub_216EE4D10(a1, 37025, (uint64_t)v6, 0);
    if (sub_216EE0ECC(v7))
    {
      v8 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Failed to set rf property:0x%02x status:0x%08llx", "_NFDriverSetRFProperty", 7888, a2, *v7);
      dispatch_get_specific(*v8);
      v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = *v7;
        *(_DWORD *)buf = 136446978;
        v19 = "_NFDriverSetRFProperty";
        v20 = 1024;
        v21 = 7888;
        v22 = 1024;
        v23 = a2;
        v24 = 2048;
        v25 = v11;
        _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set rf property:0x%02x status:0x%08llx", buf, 0x22u);
      }
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }
    sub_216EE0D6C((void **)v7);
  }
  else
  {
    v13 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14)
      v14(3, "%s:%i Memory error trying to update property: 0x%02x", "_NFDriverSetRFProperty", 7871, a2);
    dispatch_get_specific(*v13);
    v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v19 = "_NFDriverSetRFProperty";
      v20 = 1024;
      v21 = 7871;
      v22 = 1024;
      v23 = a2;
      _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Memory error trying to update property: 0x%02x", buf, 0x18u);
    }
    v12 = 3;
  }
  sub_216EE5198(&v17);
  return v12;
}

uint64_t NFDriverEnableAutomaticRFOverride(uint64_t a1, int a2)
{
  BOOL v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint64_t v8;
  int v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  const char *v12;
  char v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = sub_216EE7B4C(a1, 0, 0, 0, 0, 0, 0);
  v5 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (!v4)
  {
    if (Logger)
      Logger(4, "%s:%i Failed to stop discovery", "NFDriverEnableAutomaticRFOverride", 7728);
    dispatch_get_specific(*v5);
    v11 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      return 1;
    *(_DWORD *)buf = 136446466;
    v16 = "NFDriverEnableAutomaticRFOverride";
    v17 = 1024;
    v18 = 7728;
    v12 = "%{public}s:%i Failed to stop discovery";
    goto LABEL_18;
  }
  if (Logger)
    Logger(6, "%s:%i enable: %d", "NFDriverEnableAutomaticRFOverride", 7735, a2);
  dispatch_get_specific(*v5);
  v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v16 = "NFDriverEnableAutomaticRFOverride";
    v17 = 1024;
    v18 = 7735;
    v19 = 1024;
    v20 = a2;
    _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enable: %d", buf, 0x18u);
  }
  v14 = a2;
  v8 = sub_216EF9928(a1, 41241, &v14);
  if (*(_BYTE *)(a1 + 62))
    v9 = 1;
  else
    v9 = 2;
  if (!sub_216EE7B4C(a1, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36), *(unsigned __int8 *)(a1 + 60), 0, *(unsigned __int8 *)(a1 + 61), v9))
  {
    dispatch_get_specific(*v5);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
      v10(3, "%s:%i Failed to update discovery", "NFDriverEnableAutomaticRFOverride", 7741);
    dispatch_get_specific(*v5);
    v11 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      return 1;
    *(_DWORD *)buf = 136446466;
    v16 = "NFDriverEnableAutomaticRFOverride";
    v17 = 1024;
    v18 = 7741;
    v12 = "%{public}s:%i Failed to update discovery";
LABEL_18:
    _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
    return 1;
  }
  return v8;
}

uint64_t NFDriverEnableGreenCarThreshold()
{
  return 1;
}

uint64_t NFDriverISO15693SetDataRate(uint64_t a1, uint64_t a2, int a3, int a4)
{
  char v7;
  int v8;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  const void **v14;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v16;
  char v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const void **v23;
  void (*v24)(uint64_t, const char *, ...);
  NSObject *v25;
  uint64_t *v26;
  const void **v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  uint64_t v30;
  uint64_t v32;
  int v33;
  char v34;
  uint8_t v35[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  _BYTE buf[24];
  void *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v34 = 0;
  v33 = 315650;
  v7 = 0;
  v8 = 0;
  switch(a3)
  {
    case 1:
      goto LABEL_14;
    case 2:
      v8 = 1;
      v7 = 17;
      goto LABEL_14;
    case 3:
      v8 = 2;
      v7 = 34;
      goto LABEL_14;
    case 4:
      v14 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(4, "%s:%i 212kbps not supported?", "NFDriverISO15693SetDataRate", 7784);
      dispatch_get_specific(*v14);
      v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverISO15693SetDataRate";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7784;
        _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i 212kbps not supported?", buf, 0x12u);
      }
      v8 = 3;
      v7 = 68;
LABEL_14:
      v17 = 0;
      HIBYTE(v33) = v7;
      if (a4 && a4 != 320)
      {
        if (a4 == 160)
        {
          v17 = 1;
        }
        else
        {
          v18 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v19)
            v19(4, "%s:%i Incorrect T1 %ud, using 320usec!", "NFDriverISO15693SetDataRate", 7797, a4);
          dispatch_get_specific(*v18);
          v20 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "NFDriverISO15693SetDataRate";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7797;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = a4;
            _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Incorrect T1 %ud, using 320usec!", buf, 0x18u);
          }
          v17 = 0;
        }
      }
      v34 = v17;
      v21 = NFDataCreateWithBytesNoCopy();
      v32 = 0;
      v22 = NFDriverRemoteDeviceIso15693Transceive(a1, a2, v21, &v32, 5.0);
      if ((_DWORD)v22)
      {
        v13 = v22;
        v23 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v24)
          v24(3, "%s:%i Failed to set data rate for NTAG5 %d", "NFDriverISO15693SetDataRate", 7805, v13);
        dispatch_get_specific(*v23);
        v25 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "NFDriverISO15693SetDataRate";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7805;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v13;
          _os_log_impl(&dword_216EC7000, v25, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set data rate for NTAG5 %d", buf, 0x18u);
        }
      }
      else
      {
        *(_QWORD *)buf = MEMORY[0x24BDAC760];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = sub_216F064EC;
        v42 = &unk_24D65F810;
        v44 = v8;
        v43 = a1;
        v26 = sub_216EF2A1C(a1, (uint64_t)buf);
        if (sub_216EE0ECC(v26))
        {
          v27 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v28)
            v28(4, "%s:%i failed to set NTAG5 local rate: 0x%04llX", "_NFDriverSetISO15693LocalDataRate", 4378, *v26);
          dispatch_get_specific(*v27);
          v29 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v30 = *v26;
            *(_DWORD *)v35 = 136446722;
            v36 = "_NFDriverSetISO15693LocalDataRate";
            v37 = 1024;
            v38 = 4378;
            v39 = 2048;
            v40 = v30;
            _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to set NTAG5 local rate: 0x%04llX", v35, 0x1Cu);
          }
          v13 = 1;
        }
        else
        {
          v13 = 0;
        }
        sub_216EE0D6C((void **)v26);
      }
      break;
    default:
      v10 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11)
        v11(3, "%s:%i Unknown rate %d", "NFDriverISO15693SetDataRate", 7788, a3);
      dispatch_get_specific(*v10);
      v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "NFDriverISO15693SetDataRate";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7788;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown rate %d", buf, 0x18u);
      }
      v13 = 5;
      break;
  }
  return v13;
}

uint64_t NFDriverSetTypeATagDataRate(uint64_t a1, int a2)
{
  unsigned __int8 **v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  _BOOL4 v8;
  char v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  const void **v17;
  void (*v18)(uint64_t, const char *, ...);
  NSObject *v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  uint64_t *v23;
  const void **v24;
  void (*v25)(uint64_t, const char *, ...);
  NSObject *v26;
  int v27;
  uint64_t v28;
  void **v30;
  __int16 v31;
  char v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v32 = 0;
  v31 = 289;
  v30 = (void **)sub_216EE5100(3u, &v31);
  v4 = (unsigned __int8 **)v30;
  switch(a2)
  {
    case 1:
      v5 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i setting 106", "NFDriverSetTypeATagDataRate", 7829);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      v9 = 0;
      if (v8)
      {
        *(_DWORD *)buf = 136446466;
        v34 = "NFDriverSetTypeATagDataRate";
        v35 = 1024;
        v36 = 7829;
        _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting 106", buf, 0x12u);
        v9 = 0;
      }
      goto LABEL_26;
    case 2:
      v14 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v15)
        v15(6, "%s:%i setting 212", "NFDriverSetTypeATagDataRate", 7833);
      dispatch_get_specific(*v14);
      v16 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v34 = "NFDriverSetTypeATagDataRate";
        v35 = 1024;
        v36 = 7833;
        _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting 212", buf, 0x12u);
      }
      v9 = 1;
      goto LABEL_26;
    case 3:
      v17 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18)
        v18(6, "%s:%i setting 424", "NFDriverSetTypeATagDataRate", 7837);
      dispatch_get_specific(*v17);
      v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v34 = "NFDriverSetTypeATagDataRate";
        v35 = 1024;
        v36 = 7837;
        _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting 424", buf, 0x12u);
      }
      v9 = 2;
      goto LABEL_26;
    case 4:
      v20 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v21)
        v21(6, "%s:%i setting 848", "NFDriverSetTypeATagDataRate", 7841);
      dispatch_get_specific(*v20);
      v22 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v34 = "NFDriverSetTypeATagDataRate";
        v35 = 1024;
        v36 = 7841;
        _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting 848", buf, 0x12u);
      }
      v9 = 3;
LABEL_26:
      *((_BYTE *)*v30 + 2) = v9;
      v23 = sub_216EE4D10(a1, 36902, (uint64_t)v4, 0);
      if (sub_216EE0ECC(v23))
      {
        v24 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v25 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v25)
          v25(3, "%s:%i Failed to set rf property:0x%02x status:0x%08llx", "NFDriverSetTypeATagDataRate", 7852, **v4, *v23);
        dispatch_get_specific(*v24);
        v26 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v27 = **v4;
          v28 = *v23;
          *(_DWORD *)buf = 136446978;
          v34 = "NFDriverSetTypeATagDataRate";
          v35 = 1024;
          v36 = 7852;
          v37 = 1024;
          v38 = v27;
          v39 = 2048;
          v40 = v28;
          _os_log_impl(&dword_216EC7000, v26, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to set rf property:0x%02x status:0x%08llx", buf, 0x22u);
        }
        v13 = 1;
      }
      else
      {
        v13 = 0;
      }
      sub_216EE0D6C((void **)v23);
      break;
    default:
      v10 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11)
        v11(3, "%s:%i Unknown rate %d", "NFDriverSetTypeATagDataRate", 7845, a2);
      dispatch_get_specific(*v10);
      v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v34 = "NFDriverSetTypeATagDataRate";
        v35 = 1024;
        v36 = 7845;
        v37 = 1024;
        v38 = a2;
        _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Unknown rate %d", buf, 0x18u);
      }
      v13 = 5;
      break;
  }
  sub_216EE5198(&v30);
  return v13;
}

uint64_t NFDriverReadDieID(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  __int16 v6;
  unsigned int *v7;
  unsigned int *v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v15;
  unint64_t v16;
  char *v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  NSObject *v28;
  unint64_t v29;
  char *v30;
  const void **v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  NSObject *v41;
  size_t v42;
  void *v43;
  unint64_t v44;
  const void **v45;
  void (*v46)(uint64_t, const char *, ...);
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  NSObject *v55;
  size_t v56;
  void *v57;
  void (*v58)(uint64_t, const char *, ...);
  NSObject *v59;
  unsigned int v60;
  uint64_t *v61;
  unsigned int *v62;
  _DWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  unsigned __int8 *v68;
  void **v69;
  void **v70;
  _BYTE v71[3];
  uint8_t v72[4];
  uint8_t *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  uint64_t v79;
  uint8_t buf[32];
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  v6 = sub_216EE6D80(a1, 0);
  v71[0] = 1;
  v71[1] = HIBYTE(v6);
  v71[2] = v6;
  v7 = sub_216EE5100(3u, v71);
  v70 = (void **)v7;
  v8 = sub_216EE5100(0x100u, 0);
  v69 = (void **)v8;
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Reading Die ID ...", "NFDriverReadDieID", 7907);
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverReadDieID";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7907;
    _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Reading Die ID ...", buf, 0x12u);
  }
  if (*(_BYTE *)(a1 + 57))
  {
    v11 = sub_216EE4D10(a1, 37026, (uint64_t)v7, (uint64_t)v8);
    if (sub_216EE0ECC(v11))
    {
      v12 = 0;
    }
    else
    {
      v15 = v8[2];
      if (v15 < 5)
      {
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v58 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v58)
          v58(3, "%s:%i Unexpected length : %d", "NFDriverReadDieID", 7949, v8[2]);
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v59 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          v60 = v8[2];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "NFDriverReadDieID";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7949;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v60;
          _os_log_impl(&dword_216EC7000, v59, OS_LOG_TYPE_ERROR, "%{public}s:%i Unexpected length : %d", buf, 0x18u);
        }
        v12 = 0;
        if (a2 && a3)
        {
          v12 = 0;
          *a3 = 0;
          *a2 = 0;
        }
      }
      else
      {
        v61 = v11;
        v64 = a2;
        v81 = 0u;
        memset(buf, 0, sizeof(buf));
        v16 = v15 - 4;
        v17 = *(char **)v8;
        v18 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        dispatch_get_specific(*v18);
        v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v21 = v8[2] - 4;
          *(_DWORD *)v72 = 136315906;
          v73 = (uint8_t *)"NFDriverReadDieID";
          v74 = 1024;
          v75 = 7935;
          v76 = 2082;
          v77 = "Die ID :";
          v78 = 2048;
          v79 = v21;
          _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v72, 0x26u);
        }
        v63 = a3;
        if (v19)
          v19(6, "%s:%i %s %lu bytes :", "NFDriverReadDieID", 7935, "Die ID :", v8[2] - 4);
        v22 = 0;
        v66 = v17 + 4;
        do
        {
          v23 = 0;
          v24 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v22)];
          do
          {
            v25 = v23 + 1;
            v26 = v23 + 1 + v22;
            v27 = sprintf(v24, "0x%02X ", v66[v22 + v23]);
            if (v23 > 6)
              break;
            v24 += v27;
            ++v23;
          }
          while (v26 < v16);
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v28 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v72 = 136446210;
            v73 = buf;
            _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s", v72, 0xCu);
          }
          if (v19)
            v19(6, "%s", (const char *)buf);
          v22 += v25;
        }
        while (v26 < v16);
        v12 = 0;
        v11 = v61;
        if (v64 && v63)
        {
          v81 = 0u;
          memset(buf, 0, sizeof(buf));
          v29 = v8[2] - 4;
          v30 = *(char **)v8;
          v31 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v31);
          v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            v34 = v8[2] - 4;
            *(_DWORD *)v72 = 136315906;
            v73 = (uint8_t *)"NFDriverReadDieID";
            v74 = 1024;
            v75 = 7937;
            v76 = 2082;
            v77 = "Die ID :";
            v78 = 2048;
            v79 = v34;
            _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v72, 0x26u);
          }
          if (v32)
            v32(6, "%s:%i %s %lu bytes :", "NFDriverReadDieID", 7937, "Die ID :", v8[2] - 4);
          if ((_DWORD)v29)
          {
            v35 = 0;
            v67 = v30 + 4;
            do
            {
              v36 = 0;
              v37 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v35)];
              do
              {
                v38 = v36 + 1;
                v39 = v36 + 1 + v35;
                v40 = sprintf(v37, "0x%02X ", v67[v35 + v36]);
                if (v36 > 6)
                  break;
                v37 += v40;
                ++v36;
              }
              while (v39 < v29);
              dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
              v41 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v72 = 136446210;
                v73 = buf;
                _os_log_impl(&dword_216EC7000, v41, OS_LOG_TYPE_DEFAULT, "%{public}s", v72, 0xCu);
              }
              if (v32)
                v32(6, "%s", (const char *)buf);
              v35 += v38;
            }
            while (v39 < v29);
          }
          v42 = v8[2] - 4;
          *v63 = v42;
          v43 = malloc_type_calloc(1uLL, v42, 0x100004077774924uLL);
          *v64 = v43;
          if (v43)
          {
            memcpy(v43, (const void *)(*(_QWORD *)v8 + 4), *v63);
            v12 = 1;
          }
          else
          {
            v12 = 0;
            *v63 = 0;
          }
          v11 = v61;
        }
      }
    }
    sub_216EE0D6C((void **)v11);
  }
  else
  {
    v13 = sub_216EE4D10(a1, 2558, 0, (uint64_t)v8);
    if (sub_216EE0ECC(v13))
    {
      v12 = 0;
    }
    else
    {
      v65 = a2;
      v81 = 0u;
      memset(buf, 0, sizeof(buf));
      v44 = v8[2];
      v68 = *(unsigned __int8 **)v8;
      v45 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v46 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      dispatch_get_specific(*v45);
      v47 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v48 = v8[2];
        *(_DWORD *)v72 = 136315906;
        v73 = (uint8_t *)"NFDriverReadDieID";
        v74 = 1024;
        v75 = 7913;
        v76 = 2082;
        v77 = "Die ID :";
        v78 = 2048;
        v79 = v48;
        _os_log_impl(&dword_216EC7000, v47, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v72, 0x26u);
      }
      if (v46)
        v46(6, "%s:%i %s %lu bytes :", "NFDriverReadDieID", 7913, "Die ID :", v8[2]);
      v62 = v8;
      if ((_DWORD)v44)
      {
        v49 = 0;
        do
        {
          v50 = 0;
          v51 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v49)];
          do
          {
            v52 = v50 + 1;
            v53 = v50 + 1 + v49;
            v54 = sprintf(v51, "0x%02X ", v68[v49 + v50]);
            if (v50 > 6)
              break;
            v51 += v54;
            ++v50;
          }
          while (v53 < v44);
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v55 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v72 = 136446210;
            v73 = buf;
            _os_log_impl(&dword_216EC7000, v55, OS_LOG_TYPE_DEFAULT, "%{public}s", v72, 0xCu);
          }
          if (v46)
            v46(6, "%s", (const char *)buf);
          v49 += v52;
        }
        while (v53 < v44);
      }
      v12 = 0;
      if (v65 && a3)
      {
        v56 = v62[2];
        if ((_DWORD)v56)
        {
          *a3 = v56;
          v57 = malloc_type_calloc(1uLL, v56, 0x100004077774924uLL);
          *v65 = v57;
          if (v57)
          {
            memcpy(v57, *(const void **)v62, *a3);
            v12 = 1;
          }
          else
          {
            v12 = 0;
            *a3 = 0;
          }
        }
        else
        {
          v12 = 0;
          *a3 = 0;
          *v65 = 0;
        }
      }
    }
  }
  sub_216EE5198(&v69);
  sub_216EE5198(&v70);
  return v12;
}

uint64_t NFDriverRedactLogging(uint64_t result)
{
  byte_253E47164 = result;
  return result;
}

CFErrorRef NFDriverCreateErrorCode(CFIndex code)
{
  CFIndex v1;
  __CFString *v2;
  void *v3;
  CFErrorRef v4;
  void *userInfoValues;
  void *userInfoKeys[2];

  userInfoKeys[1] = *(void **)MEMORY[0x24BDAC8D0];
  v1 = code;
  switch((int)code)
  {
    case 0:
      v2 = CFSTR("Success");
      break;
    case 1:
      v2 = CFSTR("Stack error");
      break;
    case 2:
      v2 = CFSTR("Firmware error");
      break;
    case 3:
      v2 = CFSTR("Insufficient resource");
      break;
    case 4:
      v2 = CFSTR("SE communication error");
      break;
    case 5:
      v2 = CFSTR("Invalid parameter");
      break;
    case 6:
      v2 = CFSTR("Target connection lost");
      break;
    case 7:
      v2 = CFSTR("Aborted");
      break;
    case 8:
      v2 = CFSTR("Unexpected result");
      break;
    case 9:
      v2 = CFSTR("No syscfg cal");
      break;
    case 10:
      v2 = CFSTR("No module cal");
      break;
    case 11:
      v2 = CFSTR("No system cal");
      break;
    case 12:
      v2 = CFSTR("Tag is non NDEF compliant");
      break;
    case 13:
      v2 = CFSTR("Reboot required");
      break;
    case 14:
      v2 = CFSTR("FW DL pending");
      break;
    case 15:
      v2 = CFSTR("NDEF message size is over the limit");
      break;
    case 16:
      v2 = CFSTR("Hardware is unresponsive");
      break;
    case 17:
      v2 = CFSTR("FollowerID is unresponsive");
      break;
    case 18:
      v2 = CFSTR("RF deactivated");
      break;
    case 19:
      v2 = CFSTR("Feature not supported");
      break;
    case 20:
      v2 = CFSTR("No response from tag");
      break;
    case 21:
      v2 = CFSTR("Tag is halted");
      break;
    case 22:
      v2 = CFSTR("SE OS reset");
      break;
    case 23:
      v2 = CFSTR("Reader mode prohibit timer");
      break;
    case 24:
      v2 = (__CFString *)CFStringCreateWithCString(0, "NFCC is in DL mode", 0x8000100u);
      break;
    default:
      v2 = 0;
      break;
  }
  v3 = (void *)*MEMORY[0x24BDBD3A0];
  userInfoValues = v2;
  userInfoKeys[0] = v3;
  v4 = CFErrorCreateWithUserInfoKeysAndValues(0, CFSTR("com.apple.nfstack"), v1, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 1);
  CFRelease(v2);
  CFRelease(CFSTR("com.apple.nfstack"));
  return v4;
}

char *NFDriverGetUniqueFDRKey(uint64_t a1, _DWORD *a2)
{
  BOOL v4;
  char *v5;
  const char *v6;
  const char *v7;
  const void **v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v18 = 0;
  v20 = 0;
  v19 = 0;
  if ((NFDriverGetControllerInfo(a1, (uint64_t)&v17) & 1) != 0)
  {
    v16 = 0;
    v15 = 0;
    if (!NFDriverReadDieID(a1, &v15, &v16) || (v16 == 16 ? (v4 = v15 == 0) : (v4 = 1), v4))
    {
      v11 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Failed to get DieID", "NFDriverGetUniqueFDRKey", 8082);
      dispatch_get_specific(*v11);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v22 = "NFDriverGetUniqueFDRKey";
        v23 = 1024;
        v24 = 8082;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get DieID", buf, 0x12u);
      }
      if (a2)
        *a2 = 1;
      if (v15)
        free(v15);
      return 0;
    }
    else
    {
      v5 = (char *)malloc_type_calloc(1uLL, 0x80uLL, 0x100004077774924uLL);
      if (v5)
      {
        v6 = "%04X.%04X-%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X";
        v7 = "%02X.%04X-%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X";
        if (v18 < 0x100)
        {
          v6 = "%04X.%02X-%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X";
          v7 = "%02X.%02X-%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X";
        }
        if (v17 < 0x100)
          v6 = v7;
        snprintf(v5, 0x80uLL, v6, v17, v18, *v15, v15[1], v15[2], v15[3], v15[4], v15[5], v15[6], v15[7], v15[8], v15[9], v15[10], v15[11], v15[12], v15[13],
          v15[14],
          v15[15]);
      }
      free(v15);
    }
  }
  else
  {
    v8 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9)
      v9(3, "%s:%i Failed to get driver info", "NFDriverGetUniqueFDRKey", 8074);
    dispatch_get_specific(*v8);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v22 = "NFDriverGetUniqueFDRKey";
      v23 = 1024;
      v24 = 8074;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to get driver info", buf, 0x12u);
    }
    v5 = 0;
    if (a2)
      *a2 = 1;
  }
  return v5;
}

uint64_t NFDriverResetFWFlags(uint64_t a1)
{
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  _QWORD v6[3];
  int v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  memset(v6, 0, sizeof(v6));
  v7 = 0;
  if ((NFDriverGetControllerInfo(a1, (uint64_t)v6) & 1) != 0)
  {
    if (HIDWORD(v6[0]) < 7)
      return 0;
    else
      return NFDriverSetHeadlessMode(a1, 0) ^ 1;
  }
  else
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Fail to get controller info", "NFDriverResetFWFlags", 8240);
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v9 = "NFDriverResetFWFlags";
      v10 = 1024;
      v11 = 8240;
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i Fail to get controller info", buf, 0x12u);
    }
    return 8;
  }
}

uint64_t NFDriverGetMultiTagState(uint64_t a1, _BYTE *a2, BOOL *a3, _DWORD *a4)
{
  int v8;
  const void **v9;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, const char *, ...);
  NSObject *v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  unsigned int v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  _BYTE *v30;
  void (*v31)(uint64_t, const char *, ...);
  unsigned __int8 *v32;
  NSObject *v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  void (*v43)(uint64_t, const char *, ...);
  NSObject *v44;
  int v45;
  void *v46;
  void *v47;
  _DWORD *v49;
  unsigned int v50;
  _QWORD v51[6];
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  _BYTE v62[10];
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v52 = 0;
  v53 = &v52;
  v54 = 0x3800000000;
  v55 = 0u;
  v56 = 0u;
  v8 = *(unsigned __int8 *)(a1 + 58);
  v9 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v8)
  {
    if (Logger)
      Logger(6, "%s:%i Not supported on MWF", "NFDriverGetMultiTagState", 8258);
    dispatch_get_specific(*v9);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v58 = "NFDriverGetMultiTagState";
      v59 = 1024;
      v60 = 8258;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not supported on MWF", buf, 0x12u);
    }
    v12 = 19;
  }
  else
  {
    if (Logger)
      Logger(6, "%s:%i Multitag state query", "NFDriverGetMultiTagState", 8262);
    dispatch_get_specific(*v9);
    v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v58 = "NFDriverGetMultiTagState";
      v59 = 1024;
      v60 = 8262;
      _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Multitag state query", buf, 0x12u);
    }
    v51[0] = MEMORY[0x24BDAC760];
    v51[1] = 0x40000000;
    v51[2] = sub_216EFBF4C;
    v51[3] = &unk_24D65F4B8;
    v51[4] = &v52;
    v51[5] = a1;
    v14 = sub_216EF2A1C(a1, (uint64_t)v51);
    v15 = sub_216EE0ECC(v14);
    if (v15)
    {
      v16 = v15;
      if (v15 != 51)
      {
        dispatch_get_specific(*v9);
        v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v17)
          v17(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverGetMultiTagState", 8277, v16);
        dispatch_get_specific(*v9);
        v18 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v58 = "NFDriverGetMultiTagState";
          v59 = 1024;
          v60 = 8277;
          v61 = 2048;
          *(_QWORD *)v62 = v16;
          _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
        }
      }
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }
    sub_216EE0D6C((void **)v14);
    dispatch_get_specific(*v9);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19)
      v19(6, "%s:%i MultiTag Enabled: %d, Running: %d", "NFDriverGetMultiTagState", 8287, v53[3] & 1, (*((unsigned __int8 *)v53 + 24) >> 1) & 1);
    dispatch_get_specific(*v9);
    v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v21 = *((unsigned __int8 *)v53 + 24);
      *(_DWORD *)buf = 136446978;
      v58 = "NFDriverGetMultiTagState";
      v59 = 1024;
      v60 = 8287;
      v61 = 1024;
      *(_DWORD *)v62 = v21 & 1;
      *(_WORD *)&v62[4] = 1024;
      *(_DWORD *)&v62[6] = (v21 >> 1) & 1;
      _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i MultiTag Enabled: %d, Running: %d", buf, 0x1Eu);
    }
    if (a2)
      *a2 = v53[3] & 1;
    if (a3)
      *a3 = (v53[3] & 2) != 0;
    if (a4)
    {
      bzero(a4, 0x300uLL);
      dispatch_get_specific(*v9);
      v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22)
        v22(6, "%s:%i Num Tags Detected=%d, Num Tags Not Interested=%d", "NFDriverGetMultiTagState", 8300, *((unsigned __int8 *)v53 + 25), *((unsigned __int8 *)v53 + 40));
      dispatch_get_specific(*v9);
      v23 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *((unsigned __int8 *)v53 + 25);
        v25 = *((unsigned __int8 *)v53 + 40);
        *(_DWORD *)buf = 136446978;
        v58 = "NFDriverGetMultiTagState";
        v59 = 1024;
        v60 = 8300;
        v61 = 1024;
        *(_DWORD *)v62 = v24;
        *(_WORD *)&v62[4] = 1024;
        *(_DWORD *)&v62[6] = v25;
        _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Num Tags Detected=%d, Num Tags Not Interested=%d", buf, 0x1Eu);
      }
      v26 = v53;
      v50 = v12;
      if (*((_BYTE *)v53 + 25))
      {
        v27 = 0;
        v28 = a4;
        v29 = 0;
        v49 = v28;
        v30 = v28 + 70;
        do
        {
          dispatch_get_specific(*v9);
          v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v31)
          {
            v32 = (unsigned __int8 *)(v53[4] + v27);
            v31(6, "%s:%i Detected Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", "NFDriverGetMultiTagState", 8309, v29, *v32, v32[1], v32[2], v32[3], v32[4]);
          }
          dispatch_get_specific(*v9);
          v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            v34 = (unsigned __int8 *)(v53[4] + v27);
            v35 = *v34;
            v36 = v34[1];
            v37 = v34[2];
            v38 = v34[3];
            LODWORD(v34) = v34[4];
            *(_DWORD *)buf = 136448002;
            v58 = "NFDriverGetMultiTagState";
            v59 = 1024;
            v60 = 8309;
            v61 = 1024;
            *(_DWORD *)v62 = v29;
            *(_WORD *)&v62[4] = 1024;
            *(_DWORD *)&v62[6] = v35;
            v63 = 1024;
            v64 = v36;
            v65 = 1024;
            v66 = v37;
            v67 = 1024;
            v68 = v38;
            v69 = 1024;
            v70 = (int)v34;
            _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Detected Tag (%d) rfTech = %d id= 0x%02x 0x%02x 0x%02x 0x%02x", buf, 0x36u);
          }
          if (v29 <= 1)
          {
            v39 = (unsigned __int8 *)(v53[4] + v27);
            *((_DWORD *)v30 - 20) = sub_216EE8AD8(*v39);
            *v30 = 4;
            *((_DWORD *)v30 - 4) = *(_DWORD *)(v39 + 1);
          }
          ++v29;
          v26 = v53;
          v27 += 5;
          v30 += 96;
        }
        while (v29 < *((unsigned __int8 *)v53 + 25));
        a4 = v49;
        v12 = v50;
      }
      if (*((_BYTE *)v26 + 40))
      {
        v40 = 0;
        v41 = 0;
        v42 = a4 + 146;
        do
        {
          dispatch_get_specific(*v9);
          v43 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v43)
            v43(6, "%s:%i Not interested Tag (%d) rfTech = %d", "NFDriverGetMultiTagState", 8318, v41, *(unsigned __int8 *)(v53[6] + v40));
          dispatch_get_specific(*v9);
          v44 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            v45 = *(unsigned __int8 *)(v53[6] + v40);
            *(_DWORD *)buf = 136446978;
            v58 = "NFDriverGetMultiTagState";
            v59 = 1024;
            v60 = 8318;
            v61 = 1024;
            *(_DWORD *)v62 = v41;
            *(_WORD *)&v62[4] = 1024;
            *(_DWORD *)&v62[6] = v45;
            _os_log_impl(&dword_216EC7000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Not interested Tag (%d) rfTech = %d", buf, 0x1Eu);
          }
          if (v41 <= 1)
            *v42 = sub_216EE8AD8(*(unsigned __int8 *)(v53[6] + v40));
          ++v41;
          v26 = v53;
          v40 += 3;
          v42 += 24;
        }
        while (v41 < *((unsigned __int8 *)v53 + 40));
        v12 = v50;
      }
    }
    else
    {
      v26 = v53;
    }
    v46 = (void *)v26[4];
    if (v46)
    {
      free(v46);
      v26 = v53;
      v53[4] = 0;
    }
    v47 = (void *)v26[6];
    if (v47)
    {
      free(v47);
      v53[6] = 0;
    }
  }
  _Block_object_dispose(&v52, 8);
  return v12;
}

uint64_t sub_216EFBF4C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

void sub_216EFBF7C(uint64_t a1, void **a2, int *a3, unsigned int a4)
{
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  int v9;
  NSObject *v10;
  int v11;
  _QWORD *v12;
  _DWORD *v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  void (*v17)(uint64_t, const char *, ...);
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  NSObject *v26;
  _WORD *v27;
  int v28;
  _WORD *v29;
  _WORD *v30;
  uint64_t v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  _OWORD *v34;
  __int128 v35;
  void *v36;
  int *v37;
  _DWORD *v38;
  int v39;
  void (*v40)(uint64_t, const char *, ...);
  NSObject *v41;
  void *v42;
  void (*v43)(uint64_t, const char *, ...);
  NSObject *v44;
  uint64_t *v45;
  void **v46;
  uint64_t v47;
  uint8_t v48[4];
  uint8_t *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  uint64_t v55;
  uint8_t buf[32];
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v7 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    v9 = 0;
    if (a3 && !a4)
      v9 = *a3;
    Logger(6, "%s:%i Status = 0x%x, param=%d", "_Callback_phLibNfc_Mgt_GetNfccParams", 8123, a4, v9);
  }
  dispatch_get_specific(*v7);
  v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 0;
    if (a3 && !a4)
      v11 = *a3;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "_Callback_phLibNfc_Mgt_GetNfccParams";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 8123;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a4;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v11;
    _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Status = 0x%x, param=%d", buf, 0x1Eu);
  }
  if (a2)
  {
    if (!a3 || a4)
      goto LABEL_70;
    switch(*a3)
    {
      case 0:
        v13 = a2[1];
        if (v13)
        {
          v14 = *(_OWORD *)(a3 + 2);
          v15 = *(_OWORD *)(a3 + 6);
          v13[8] = a3[10];
          *(_OWORD *)v13 = v14;
          *((_OWORD *)v13 + 1) = v15;
        }
        goto LABEL_70;
      case 1:
        if (a2[1])
        {
          v45 = (uint64_t *)a2[1];
          v57 = 0u;
          memset(buf, 0, sizeof(buf));
          v16 = a3[4];
          v47 = *((_QWORD *)a3 + 1);
          dispatch_get_specific(*v7);
          v17 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v7);
          v18 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v19 = a3[4];
            *(_DWORD *)v48 = 136315906;
            v49 = (uint8_t *)"_Callback_phLibNfc_Mgt_GetNfccParams";
            v50 = 1024;
            v51 = 8210;
            v52 = 2082;
            v53 = "SMB log: ";
            v54 = 2048;
            v55 = v19;
            _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_DEFAULT, "%s:%i %{public}s %lu bytes", v48, 0x26u);
          }
          v46 = a2;
          if (v17)
            v17(6, "%s:%i %s %lu bytes :", "_Callback_phLibNfc_Mgt_GetNfccParams", 8210, "SMB log: ", a3[4]);
          if ((_DWORD)v16)
          {
            v20 = 0;
            do
            {
              v21 = 0;
              v22 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v20)];
              do
              {
                v23 = v21 + 1;
                v24 = v21 + 1 + v20;
                v25 = sprintf(v22, "0x%02X ", *(unsigned __int8 *)(v47 + v20 + v21));
                if (v21 > 6)
                  break;
                v22 += v25;
                ++v21;
              }
              while (v24 < v16);
              dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
              v26 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v48 = 136446210;
                v49 = buf;
                _os_log_impl(&dword_216EC7000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", v48, 0xCu);
              }
              if (v17)
                v17(6, "%s", (const char *)buf);
              v20 += v23;
            }
            while (v24 < v16);
          }
          a2 = v46;
          *v45 = NFDataCreateWithBytes();
        }
        goto LABEL_70;
      case 3:
      case 11:
        v12 = a2[1];
        if (v12)
          *v12 = *((_QWORD *)a3 + 1);
        goto LABEL_70;
      case 6:
        v27 = a2[1];
        if (v27)
        {
          v28 = a3[2];
          v27[2] = *((_WORD *)a3 + 6);
          goto LABEL_53;
        }
        goto LABEL_70;
      case 7:
        v34 = a2[1];
        if (v34)
        {
          v35 = *(_OWORD *)(a3 + 6);
          *v34 = *(_OWORD *)(a3 + 2);
          v34[1] = v35;
          if (*((_BYTE *)a3 + 9) && *((_QWORD *)a3 + 2))
          {
            v36 = malloc_type_calloc(*((unsigned __int8 *)a3 + 9), 5uLL, 0x1000040957D8CC4uLL);
            *((_QWORD *)v34 + 1) = v36;
            if (v36)
            {
              memcpy(v36, *((const void **)a3 + 2), 5 * *((unsigned __int8 *)a3 + 9));
            }
            else
            {
              dispatch_get_specific(*v7);
              v40 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v40)
                v40(3, "%s:%i Resource error", "_Callback_phLibNfc_Mgt_GetNfccParams", 8160);
              dispatch_get_specific(*v7);
              v41 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "_Callback_phLibNfc_Mgt_GetNfccParams";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 8160;
                _os_log_impl(&dword_216EC7000, v41, OS_LOG_TYPE_ERROR, "%{public}s:%i Resource error", buf, 0x12u);
              }
            }
          }
          if (*((_BYTE *)a3 + 24) && *((_QWORD *)a3 + 4))
          {
            v42 = malloc_type_calloc(*((unsigned __int8 *)a3 + 24), 3uLL, 0x100004033FC2DF1uLL);
            *((_QWORD *)v34 + 3) = v42;
            if (v42)
            {
              memcpy(v42, *((const void **)a3 + 4), 3 * *((unsigned __int8 *)a3 + 24));
            }
            else
            {
              dispatch_get_specific(*v7);
              v43 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
              if (v43)
                v43(3, "%s:%i Resource error", "_Callback_phLibNfc_Mgt_GetNfccParams", 8170);
              dispatch_get_specific(*v7);
              v44 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "_Callback_phLibNfc_Mgt_GetNfccParams";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 8170;
                _os_log_impl(&dword_216EC7000, v44, OS_LOG_TYPE_ERROR, "%{public}s:%i Resource error", buf, 0x12u);
              }
            }
          }
        }
        goto LABEL_70;
      case 8:
        v27 = a2[1];
        if (v27)
        {
          v28 = a3[2];
LABEL_53:
          *(_DWORD *)v27 = v28;
        }
        goto LABEL_70;
      case 9:
        v29 = a2[1];
        if (v29)
          *v29 = *((_WORD *)a3 + 4);
        goto LABEL_70;
      case 10:
        v30 = a2[1];
        if (!v30)
          goto LABEL_70;
        LODWORD(v31) = *((unsigned __int16 *)a3 + 4);
        *v30 = v31;
        if (v31 < 0x41)
        {
          if (!(_DWORD)v31)
          {
LABEL_70:
            sub_216EE0DE8(a2, a4);
            sub_216EE0D6C(a2);
            return;
          }
        }
        else
        {
          dispatch_get_specific(*v7);
          v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v32)
            v32(3, "%s:%i Not enough space allocated to store all page counters", "_Callback_phLibNfc_Mgt_GetNfccParams", 8197);
          dispatch_get_specific(*v7);
          v33 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_Callback_phLibNfc_Mgt_GetNfccParams";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 8197;
            _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_ERROR, "%{public}s:%i Not enough space allocated to store all page counters", buf, 0x12u);
          }
          LODWORD(v31) = 64;
          *v30 = 64;
        }
        v37 = a3 + 3;
        v31 = v31;
        v38 = v30 + 2;
        do
        {
          v39 = *v37++;
          *v38++ = v39;
          --v31;
        }
        while (v31);
        goto LABEL_70;
      default:
        goto LABEL_70;
    }
  }
}

uint64_t NFDriverGetPowerCounter(uint64_t a1, uint64_t a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  unsigned int v17;
  void (*v18)(uint64_t, const char *, ...);
  NSObject *v19;
  int v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  unsigned int v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  int v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  NSObject *v34;
  int v35;
  unsigned int v36;
  void (*v37)(uint64_t, const char *, ...);
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unsigned int v44;
  void (*v45)(uint64_t, const char *, ...);
  int v46;
  NSObject *v47;
  int v48;
  const char *v49;
  int v50;
  void (*v51)(uint64_t, const char *, ...);
  NSObject *v52;
  int v53;
  int v54;
  void (*v55)(uint64_t, const char *, ...);
  NSObject *v56;
  unsigned int v57;
  void (*v58)(uint64_t, const char *, ...);
  NSObject *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  const char *v65;
  NSObject *v66;
  uint32_t v67;
  NSObject *v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  void (*v74)(uint64_t, const char *, ...);
  NSObject *v75;
  int v76;
  void (*v77)(uint64_t, const char *, ...);
  NSObject *v78;
  _QWORD v80[3];
  int v81;
  _QWORD v82[6];
  _BYTE block[32];
  _BYTE v84[10];
  __int16 v85;
  int v86;
  _BYTE buf[24];
  __int128 v88;
  __int128 v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i Power state tracking query", "NFDriverGetPowerCounter", 8339);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "NFDriverGetPowerCounter";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 8339;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Power state tracking query", buf, 0x12u);
  }
  if (a2)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x4000000000;
    v88 = 0u;
    v89 = 0u;
    v90 = 0;
    v7 = MEMORY[0x24BDAC760];
    v82[0] = MEMORY[0x24BDAC760];
    v82[1] = 0x40000000;
    v82[2] = sub_216EFD560;
    v82[3] = &unk_24D65F4E0;
    v82[4] = buf;
    v82[5] = a1;
    v8 = sub_216EF2A1C(a1, (uint64_t)v82);
    v9 = sub_216EE0ECC(v8);
    if (v9)
    {
      v10 = v9;
      if (v9 == 51)
      {
        dispatch_get_specific(*v4);
        v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v11)
          v11(3, "%s:%i Not supported", "NFDriverGetPowerCounter", 8361);
        dispatch_get_specific(*v4);
        v12 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          goto LABEL_47;
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8361;
        v13 = "%{public}s:%i Not supported";
        v14 = v12;
        v15 = OS_LOG_TYPE_ERROR;
      }
      else
      {
        dispatch_get_specific(*v4);
        v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v21)
          v21(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverGetPowerCounter", 8364, v10);
        dispatch_get_specific(*v4);
        v22 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)block = 136446722;
          *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 8364;
          *(_WORD *)&block[18] = 2048;
          *(_QWORD *)&block[20] = v10;
          _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", block, 0x1Cu);
        }
        LOWORD(v80[0]) = 0;
        if (sub_216EE9DA0(a1, 0, 0, 0, v80, 0))
        {
          if (LOWORD(v80[0]) == 44 || LOWORD(v80[0]) == 34)
          {
            dispatch_get_specific(*v4);
            v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v23)
              v23(3, "%s:%i CRC error or response timeout - 0x%04llx", "NFDriverGetPowerCounter", 8373, v10);
            dispatch_get_specific(*v4);
            v24 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)block = 136446722;
              *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
              *(_WORD *)&block[12] = 1024;
              *(_DWORD *)&block[14] = 8373;
              *(_WORD *)&block[18] = 2048;
              *(_QWORD *)&block[20] = v10;
              _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_ERROR, "%{public}s:%i CRC error or response timeout - 0x%04llx", block, 0x1Cu);
            }
            v25 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
            *(_QWORD *)block = v7;
            *(_QWORD *)&block[8] = 0x40000000;
            *(_QWORD *)&block[16] = sub_216EE4564;
            *(_QWORD *)&block[24] = &unk_24D65ED38;
            *(_QWORD *)v84 = a1;
            dispatch_async(v25, block);
            NFDriverSimulateCrash(a1, 57005);
          }
          goto LABEL_47;
        }
        dispatch_get_specific(*v4);
        v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v32)
          v32(5, "%s:%i Get stack breadcrumb failed", "NFDriverGetPowerCounter", 8369);
        dispatch_get_specific(*v4);
        v33 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          goto LABEL_47;
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8369;
        v13 = "%{public}s:%i Get stack breadcrumb failed";
        v14 = v33;
        v15 = OS_LOG_TYPE_DEFAULT;
      }
      _os_log_impl(&dword_216EC7000, v14, v15, v13, block, 0x12u);
LABEL_47:
      v16 = 1;
LABEL_118:
      sub_216EE0D6C((void **)v8);
      _Block_object_dispose(buf, 8);
      return v16;
    }
    v17 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    dispatch_get_specific(*v4);
    v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v17 < 0x3FFFF)
    {
      if (v18)
        v18(6, "%s:%i Idle=%d", "NFDriverGetPowerCounter", 8383, *(_DWORD *)(*(_QWORD *)&buf[8] + 24));
      dispatch_get_specific(*v4);
      v26 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v27 = *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
        *(_DWORD *)block = 136446722;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8383;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v27;
        _os_log_impl(&dword_216EC7000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Idle=%d", block, 0x18u);
      }
      v16 = 0;
      v20 = 100 * *(_DWORD *)(*(_QWORD *)&buf[8] + 24);
    }
    else
    {
      if (v18)
        v18(4, "%s:%i Idle counter overflown", "NFDriverGetPowerCounter", 8379);
      dispatch_get_specific(*v4);
      v19 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8379;
        _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i Idle counter overflown", block, 0x12u);
      }
      v16 = 15;
      v20 = -1;
    }
    *(_DWORD *)a2 = v20;
    v28 = *(_DWORD *)(*(_QWORD *)&buf[8] + 28);
    dispatch_get_specific(*v4);
    v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v28 < 0x3FFF)
    {
      if (v29)
        v29(6, "%s:%i RF=%d", "NFDriverGetPowerCounter", 8392, *(_DWORD *)(*(_QWORD *)&buf[8] + 28));
      dispatch_get_specific(*v4);
      v34 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v35 = *(_DWORD *)(*(_QWORD *)&buf[8] + 28);
        *(_DWORD *)block = 136446722;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8392;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v35;
        _os_log_impl(&dword_216EC7000, v34, OS_LOG_TYPE_DEFAULT, "%{public}s:%i RF=%d", block, 0x18u);
      }
      v31 = 100 * *(_DWORD *)(*(_QWORD *)&buf[8] + 28);
    }
    else
    {
      if (v29)
        v29(4, "%s:%i RF counter overflown", "NFDriverGetPowerCounter", 8388);
      dispatch_get_specific(*v4);
      v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8388;
        _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i RF counter overflown", block, 0x12u);
      }
      v16 = 15;
      v31 = -1;
    }
    *(_DWORD *)(a2 + 4) = v31;
    if (*(_BYTE *)(a1 + 56))
    {
      v36 = *(_DWORD *)(*(_QWORD *)&buf[8] + 32);
      dispatch_get_specific(*v4);
      v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v36 >= 0xFFFF)
      {
        if (v37)
          v37(4, "%s:%i MultiTag false detect counter overflown", "NFDriverGetPowerCounter", 8399);
        dispatch_get_specific(*v4);
        v38 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          goto LABEL_69;
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8399;
        v39 = "%{public}s:%i MultiTag false detect counter overflown";
LABEL_68:
        _os_log_impl(&dword_216EC7000, v38, OS_LOG_TYPE_ERROR, v39, block, 0x12u);
LABEL_69:
        v16 = 15;
        v46 = -1;
        goto LABEL_80;
      }
      if (v37)
        v37(6, "%s:%i MultiTag-FC=%d", "NFDriverGetPowerCounter", 8403, *(_DWORD *)(*(_QWORD *)&buf[8] + 32));
      dispatch_get_specific(*v4);
      v47 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v48 = *(_DWORD *)(*(_QWORD *)&buf[8] + 32);
        *(_DWORD *)block = 136446722;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8403;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v48;
        v49 = "%{public}s:%i MultiTag-FC=%d";
LABEL_78:
        _os_log_impl(&dword_216EC7000, v47, OS_LOG_TYPE_DEFAULT, v49, block, 0x18u);
      }
    }
    else
    {
      v40 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(v40 + 664))
      {
        mach_continuous_time();
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 672) += GetElapsedTimeInMillisecondsFromMachTime();
        v41 = mach_continuous_time();
        v40 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(v40 + 664) = v41;
      }
      *(_QWORD *)(a2 + 40) = *(_QWORD *)(v40 + 672) / 0x3E8uLL;
      v42 = *(_QWORD **)(a1 + 24);
      v42[84] = 0;
      if (v42[85])
      {
        mach_continuous_time();
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 688) += GetElapsedTimeInMillisecondsFromMachTime();
        v43 = mach_continuous_time();
        v42 = *(_QWORD **)(a1 + 24);
        v42[85] = v43;
      }
      *(_QWORD *)(a2 + 32) = v42[86] / 0x3E8uLL;
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 688) = 0;
      v44 = *(_DWORD *)(*(_QWORD *)&buf[8] + 32);
      dispatch_get_specific(*v4);
      v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v44 >= 0xFFFF)
      {
        if (v45)
          v45(4, "%s:%i LPCD false detect counter overflown", "NFDriverGetPowerCounter", 8433);
        dispatch_get_specific(*v4);
        v38 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          goto LABEL_69;
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8433;
        v39 = "%{public}s:%i LPCD false detect counter overflown";
        goto LABEL_68;
      }
      if (v45)
        v45(6, "%s:%i LPCD-FC=%d", "NFDriverGetPowerCounter", 8437, *(_DWORD *)(*(_QWORD *)&buf[8] + 32));
      dispatch_get_specific(*v4);
      v47 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v50 = *(_DWORD *)(*(_QWORD *)&buf[8] + 32);
        *(_DWORD *)block = 136446722;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8437;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v50;
        v49 = "%{public}s:%i LPCD-FC=%d";
        goto LABEL_78;
      }
    }
    v46 = *(_DWORD *)(*(_QWORD *)&buf[8] + 32);
LABEL_80:
    *(_DWORD *)(a2 + 24) = v46;
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 40) == -1)
    {
      dispatch_get_specific(*v4);
      v55 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v55)
        v55(4, "%s:%i SE uptime counter overflown", "NFDriverGetPowerCounter", 8446);
      dispatch_get_specific(*v4);
      v56 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8446;
        _os_log_impl(&dword_216EC7000, v56, OS_LOG_TYPE_ERROR, "%{public}s:%i SE uptime counter overflown", block, 0x12u);
      }
      *(_DWORD *)(a2 + 8) = -1;
      v16 = 15;
      goto LABEL_103;
    }
    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 38))
    {
      dispatch_get_specific(*v4);
      v51 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v51)
        v51(4, "%s:%i SE uptime failed to be queried, power=%d, mailbox=%d", "NFDriverGetPowerCounter", 8450, *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 36), *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 37));
      dispatch_get_specific(*v4);
      v52 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v53 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 36);
        v54 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 37);
        *(_DWORD *)block = 136446978;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8450;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v53;
        *(_WORD *)&block[24] = 1024;
        *(_DWORD *)&block[26] = v54;
        _os_log_impl(&dword_216EC7000, v52, OS_LOG_TYPE_ERROR, "%{public}s:%i SE uptime failed to be queried, power=%d, mailbox=%d", block, 0x1Eu);
      }
      *(_DWORD *)(a2 + 8) = -1;
      v16 = 4;
      goto LABEL_103;
    }
    memset(v80, 0, sizeof(v80));
    v81 = 0;
    NFDriverGetControllerInfo(a1, (uint64_t)v80);
    v57 = HIDWORD(v80[0]) - 14;
    dispatch_get_specific(*v4);
    v58 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v57 > 4)
    {
      if (v58)
        v58(6, "%s:%i SE=%d, power=%d, mailbox=%d", "NFDriverGetPowerCounter", 8469, *(_DWORD *)(*(_QWORD *)&buf[8] + 40), *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 36), *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 37));
      dispatch_get_specific(*v4);
      v68 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        goto LABEL_102;
      v69 = *(_DWORD *)(*(_QWORD *)&buf[8] + 40);
      v70 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 36);
      v71 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 37);
      *(_DWORD *)block = 136447234;
      *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 8469;
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = v69;
      *(_WORD *)&block[24] = 1024;
      *(_DWORD *)&block[26] = v70;
      *(_WORD *)&block[30] = 1024;
      *(_DWORD *)v84 = v71;
      v65 = "%{public}s:%i SE=%d, power=%d, mailbox=%d";
      v66 = v68;
      v67 = 36;
    }
    else
    {
      if (v58)
        v58(6, "%s:%i SE=%d, JCOP=%d eUICC=%d power=%d, mailbox=%d", "NFDriverGetPowerCounter", 8466, *(_DWORD *)(*(_QWORD *)&buf[8] + 40), *(_DWORD *)(*(_QWORD *)&buf[8] + 44), *(_DWORD *)(*(_QWORD *)&buf[8] + 48), *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 36), *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 37));
      dispatch_get_specific(*v4);
      v59 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        goto LABEL_102;
      v60 = *(_DWORD *)(*(_QWORD *)&buf[8] + 40);
      v61 = *(_DWORD *)(*(_QWORD *)&buf[8] + 44);
      v62 = *(_DWORD *)(*(_QWORD *)&buf[8] + 48);
      v63 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 36);
      v64 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 37);
      *(_DWORD *)block = 136447746;
      *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 8466;
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = v60;
      *(_WORD *)&block[24] = 1024;
      *(_DWORD *)&block[26] = v61;
      *(_WORD *)&block[30] = 1024;
      *(_DWORD *)v84 = v62;
      *(_WORD *)&v84[4] = 1024;
      *(_DWORD *)&v84[6] = v63;
      v85 = 1024;
      v86 = v64;
      v65 = "%{public}s:%i SE=%d, JCOP=%d eUICC=%d power=%d, mailbox=%d";
      v66 = v59;
      v67 = 48;
    }
    _os_log_impl(&dword_216EC7000, v66, OS_LOG_TYPE_DEFAULT, v65, block, v67);
LABEL_102:
    *(_DWORD *)(a2 + 8) = 100 * *(_DWORD *)(*(_QWORD *)&buf[8] + 40);
LABEL_103:
    v72 = *(_QWORD *)&buf[8];
    v73 = *(_DWORD *)(*(_QWORD *)&buf[8] + 44);
    if (v73 == -1)
    {
      dispatch_get_specific(*v4);
      v74 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v74)
        v74(4, "%s:%i JCOP uptime counter overflown", "NFDriverGetPowerCounter", 8476);
      dispatch_get_specific(*v4);
      v75 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8476;
        _os_log_impl(&dword_216EC7000, v75, OS_LOG_TYPE_ERROR, "%{public}s:%i JCOP uptime counter overflown", block, 0x12u);
      }
      *(_DWORD *)(a2 + 12) = -1;
      v16 = 15;
      v72 = *(_QWORD *)&buf[8];
    }
    else
    {
      *(_DWORD *)(a2 + 12) = 100 * v73;
    }
    v76 = *(_DWORD *)(v72 + 48);
    if (v76 == -1)
    {
      dispatch_get_specific(*v4);
      v77 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v77)
        v77(4, "%s:%i JCOP uptime counter overflown", "NFDriverGetPowerCounter", 8484);
      dispatch_get_specific(*v4);
      v78 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverGetPowerCounter";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 8484;
        _os_log_impl(&dword_216EC7000, v78, OS_LOG_TYPE_ERROR, "%{public}s:%i JCOP uptime counter overflown", block, 0x12u);
      }
      *(_DWORD *)(a2 + 16) = -1;
      v16 = 15;
      v72 = *(_QWORD *)&buf[8];
    }
    else
    {
      *(_DWORD *)(a2 + 16) = 100 * v76;
    }
    *(_BYTE *)(a2 + 20) = *(_BYTE *)(v72 + 36) != 0;
    *(_BYTE *)(a2 + 21) = *(_BYTE *)(v72 + 37) != 0;
    goto LABEL_118;
  }
  return 5;
}

uint64_t sub_216EFD560(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverGetFlashWriteCounter(uint64_t a1, int *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t *v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  int v18;
  const void **v19;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  NSObject *v29;
  uint64_t *v31;
  uint64_t v32;
  void **v33;
  void **v34;
  __int16 v35;
  char v36;
  uint8_t v37[4];
  uint8_t *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[32];
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v36 = 24;
  v35 = -24319;
  v4 = 3;
  v5 = sub_216EE5100(3u, &v35);
  v34 = (void **)v5;
  v6 = sub_216EE5100(0x10u, 0);
  v33 = (void **)v6;
  if (v5)
  {
    v7 = (uint64_t)v6;
    if (v6)
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i NFCC flash write query", "NFDriverGetFlashWriteCounter", 8515);
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverGetFlashWriteCounter";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 8515;
        _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i NFCC flash write query", buf, 0x12u);
      }
      v10 = sub_216EE4D10(a1, 37026, (uint64_t)v5, v7);
      if (sub_216EE0ECC(v10))
      {
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v11)
          v11(3, "%s:%i Failed to read write counter", "NFDriverGetFlashWriteCounter", 8519);
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v12 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "NFDriverGetFlashWriteCounter";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 8519;
          _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to read write counter", buf, 0x12u);
        }
        v4 = 1;
      }
      else
      {
        v13 = *(unsigned int *)(v7 + 8);
        v14 = *(_QWORD *)v7;
        if (v13 >= 8 && v14)
        {
          v15 = *(_DWORD *)(v14 + 4);
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v16)
            v16(6, "%s:%i Write counter is 0x%x (length = %d)", "NFDriverGetFlashWriteCounter", 8528, v15, *(_DWORD *)(v7 + 8));
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v17 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v18 = *(_DWORD *)(v7 + 8);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "NFDriverGetFlashWriteCounter";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 8528;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v15;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v18;
            _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Write counter is 0x%x (length = %d)", buf, 0x1Eu);
          }
          v4 = 0;
          if (a2)
            *a2 = v15;
        }
        else
        {
          v32 = *(_QWORD *)v7;
          v46 = 0u;
          memset(buf, 0, sizeof(buf));
          v19 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          dispatch_get_specific(*v19);
          v21 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            v22 = *(unsigned int *)(v7 + 8);
            *(_DWORD *)v37 = 136315906;
            v38 = (uint8_t *)"NFDriverGetFlashWriteCounter";
            v39 = 1024;
            v40 = 8533;
            v41 = 2082;
            v42 = "Unexpected write counter reply";
            v43 = 2048;
            v44 = v22;
            _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_ERROR, "%s:%i %{public}s %lu bytes", v37, 0x26u);
          }
          v31 = v10;
          if (v20)
            v20(3, "%s:%i %s %lu bytes :", "NFDriverGetFlashWriteCounter", 8533, "Unexpected write counter reply", *(unsigned int *)(v7 + 8));
          if ((_DWORD)v13)
          {
            v23 = 0;
            do
            {
              v24 = 0;
              v25 = (char *)&buf[__sprintf_chk((char *)buf, 0, 0x30uLL, "%04lX: ", v23)];
              do
              {
                v26 = v24 + 1;
                v27 = v24 + 1 + v23;
                v28 = sprintf(v25, "0x%02X ", *(unsigned __int8 *)(v32 + v23 + v24));
                if (v24 > 6)
                  break;
                v25 += v28;
                ++v24;
              }
              while (v27 < v13);
              dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
              v29 = NFSharedLogGetLogger();
              if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v37 = 136446210;
                v38 = buf;
                _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s", v37, 0xCu);
              }
              if (v20)
                v20(3, "%s", (const char *)buf);
              v23 += v26;
            }
            while (v27 < v13);
          }
          v4 = 8;
          v10 = v31;
        }
      }
      sub_216EE0D6C((void **)v10);
    }
  }
  sub_216EE5198(&v34);
  sub_216EE5198(&v33);
  return v4;
}

void NFDriverDumpLPMDebugLog(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  _QWORD block[6];
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v2[2] + 8));
  v3 = v2[2];
  ++*(_QWORD *)v3;
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 8));
  v4 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216EFDBF0;
  block[3] = &unk_24D65F500;
  block[4] = a1;
  block[5] = v2;
  dispatch_async_and_wait(v4, block);
  if (sub_216EE0ECC(v2))
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i > phLibNfc_Mgt_GetNfccParams FAILED", "NFDriverDumpLPMDebugLog", 8984);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v10 = "NFDriverDumpLPMDebugLog";
      v11 = 1024;
      v12 = 8984;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i > phLibNfc_Mgt_GetNfccParams FAILED", buf, 0x12u);
    }
  }
  sub_216EE0D6C((void **)v2);
}

void sub_216EFDBF0(uint64_t a1)
{
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  unsigned int NfccParams;
  unsigned int v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i > phLibNfc_Mgt_GetNfccParams", "NFDriverDumpLPMDebugLog_block_invoke", 8972);
  dispatch_get_specific(*v2);
  v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v10 = "NFDriverDumpLPMDebugLog_block_invoke";
    v11 = 1024;
    v12 = 8972;
    _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i > phLibNfc_Mgt_GetNfccParams", buf, 0x12u);
  }
  NfccParams = phLibNfc_Mgt_GetNfccParams();
  if (NfccParams != 13)
  {
    v6 = NfccParams;
    dispatch_get_specific(*v2);
    v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v7)
      v7(3, "%s:%i Failed : 0x%x", "NFDriverDumpLPMDebugLog_block_invoke", 8976, v6);
    dispatch_get_specific(*v2);
    v8 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v10 = "NFDriverDumpLPMDebugLog_block_invoke";
      v11 = 1024;
      v12 = 8976;
      v13 = 1024;
      v14 = v6;
      _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed : 0x%x", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v6);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216EFDDB8(uint64_t a1, void **a2, unsigned int *a3, unsigned int a4)
{
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  unsigned int v12;
  unsigned int v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  unsigned int v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  unsigned int v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  const char *v24;
  unsigned int v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  unsigned int v30;
  void (*v31)(uint64_t, const char *, ...);
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  void (*v36)(uint64_t, const char *, ...);
  NSObject *v37;
  unsigned int v38;
  void (*v39)(uint64_t, const char *, ...);
  NSObject *v40;
  unsigned int v41;
  NSObject *v42;
  uint32_t v43;
  NSObject *v44;
  void (*v45)(uint64_t, const char *, ...);
  NSObject *v46;
  void (*v47)(uint64_t, const char *, ...);
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  unsigned int v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v7 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i **** getNfccParamsCb: STATUS = 0x%02X ****", "_Callback_GetNfccParamsCb", 8897, a4);
  dispatch_get_specific(*v7);
  v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446722;
    v49 = "_Callback_GetNfccParamsCb";
    v50 = 1024;
    v51 = 8897;
    v52 = 1024;
    v53 = a4;
    _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i **** getNfccParamsCb: STATUS = 0x%02X ****", buf, 0x18u);
  }
  if (a3 && !a4)
  {
    dispatch_get_specific(*v7);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
      v10(6, "%s:%i > eNfccParam: %d", "_Callback_GetNfccParamsCb", 8900, *a3);
    dispatch_get_specific(*v7);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a3;
      *(_DWORD *)buf = 136446722;
      v49 = "_Callback_GetNfccParamsCb";
      v50 = 1024;
      v51 = 8900;
      v52 = 1024;
      v53 = v12;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i > eNfccParam: %d", buf, 0x18u);
    }
    v13 = *a3;
    dispatch_get_specific(*v7);
    v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13 == 5)
    {
      if (v14)
        v14(6, "%s:%i \t ### HLM debug Log ###", "_Callback_GetNfccParamsCb", 8903);
      dispatch_get_specific(*v7);
      v15 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v49 = "_Callback_GetNfccParamsCb";
        v50 = 1024;
        v51 = 8903;
        _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t ### HLM debug Log ###", buf, 0x12u);
      }
      dispatch_get_specific(*v7);
      v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16)
        v16(6, "%s:%i \t RAM buffer overflow status  : %d", "_Callback_GetNfccParamsCb", 8904, *((unsigned __int8 *)a3 + 9));
      dispatch_get_specific(*v7);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *((unsigned __int8 *)a3 + 9);
        *(_DWORD *)buf = 136446722;
        v49 = "_Callback_GetNfccParamsCb";
        v50 = 1024;
        v51 = 8904;
        v52 = 1024;
        v53 = v18;
        _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t RAM buffer overflow status  : %d", buf, 0x18u);
      }
      dispatch_get_specific(*v7);
      v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v19)
        v19(6, "%s:%i \t FLASH buffer overflow status: %d", "_Callback_GetNfccParamsCb", 8905, *((unsigned __int8 *)a3 + 8));
      dispatch_get_specific(*v7);
      v20 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *((unsigned __int8 *)a3 + 8);
        *(_DWORD *)buf = 136446722;
        v49 = "_Callback_GetNfccParamsCb";
        v50 = 1024;
        v51 = 8905;
        v52 = 1024;
        v53 = v21;
        _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t FLASH buffer overflow status: %d", buf, 0x18u);
      }
      dispatch_get_specific(*v7);
      v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v22)
        v22(6, "%s:%i \t Log is empty!", "_Callback_GetNfccParamsCb", 8906);
      dispatch_get_specific(*v7);
      v23 = NFSharedLogGetLogger();
      a4 = 0;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v49 = "_Callback_GetNfccParamsCb";
        v50 = 1024;
        v51 = 8906;
        v24 = "%{public}s:%i \t Log is empty!";
LABEL_71:
        v42 = v23;
        v43 = 18;
        goto LABEL_72;
      }
      goto LABEL_73;
    }
    if (v14)
      v14(6, "%s:%i Wrong 'eNfccParam' received!", "_Callback_GetNfccParamsCb", 8910);
    dispatch_get_specific(*v7);
    v44 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v49 = "_Callback_GetNfccParamsCb";
      v50 = 1024;
      v51 = 8910;
      _os_log_impl(&dword_216EC7000, v44, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Wrong 'eNfccParam' received!", buf, 0x12u);
    }
    a4 = 255;
LABEL_59:
    dispatch_get_specific(*v7);
    v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v45)
      v45(3, "%s:%i Failed : 0x%x", "_Callback_GetNfccParamsCb", 8957, a4);
    dispatch_get_specific(*v7);
    v46 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v49 = "_Callback_GetNfccParamsCb";
      v50 = 1024;
      v51 = 8957;
      v52 = 1024;
      v53 = a4;
      _os_log_impl(&dword_216EC7000, v46, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed : 0x%x", buf, 0x18u);
    }
    goto LABEL_73;
  }
  if (!a3 || a4 != 63)
  {
    if (!a4)
      goto LABEL_73;
    goto LABEL_59;
  }
  v25 = *a3;
  dispatch_get_specific(*v7);
  v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v25 == 5)
  {
    if (v26)
      v26(6, "%s:%i \t ### HLM debug Log ###", "_Callback_GetNfccParamsCb", 8920);
    dispatch_get_specific(*v7);
    v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v49 = "_Callback_GetNfccParamsCb";
      v50 = 1024;
      v51 = 8920;
      _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t ### HLM debug Log ###", buf, 0x12u);
    }
    dispatch_get_specific(*v7);
    v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v28)
      v28(6, "%s:%i \t RAM buffer overflow status  : %d", "_Callback_GetNfccParamsCb", 8921, *((unsigned __int8 *)a3 + 9));
    dispatch_get_specific(*v7);
    v29 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v30 = *((unsigned __int8 *)a3 + 9);
      *(_DWORD *)buf = 136446722;
      v49 = "_Callback_GetNfccParamsCb";
      v50 = 1024;
      v51 = 8921;
      v52 = 1024;
      v53 = v30;
      _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t RAM buffer overflow status  : %d", buf, 0x18u);
    }
    dispatch_get_specific(*v7);
    v31 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v31)
      v31(6, "%s:%i \t FLASH buffer overflow status: %d", "_Callback_GetNfccParamsCb", 8922, *((unsigned __int8 *)a3 + 8));
    dispatch_get_specific(*v7);
    v32 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *((unsigned __int8 *)a3 + 8);
      *(_DWORD *)buf = 136446722;
      v49 = "_Callback_GetNfccParamsCb";
      v50 = 1024;
      v51 = 8922;
      v52 = 1024;
      v53 = v33;
      _os_log_impl(&dword_216EC7000, v32, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t FLASH buffer overflow status: %d", buf, 0x18u);
    }
    v34 = *((_QWORD *)a3 + 2);
    if (v34)
    {
      v35 = *(unsigned __int8 **)(v34 + 8);
      dispatch_get_specific(*v7);
      v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v36)
        v36(6, "%s:%i \t Number of HLM debug msgs: %d", "_Callback_GetNfccParamsCb", 8928, v35[5]);
      dispatch_get_specific(*v7);
      v37 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = v35[5];
        *(_DWORD *)buf = 136446722;
        v49 = "_Callback_GetNfccParamsCb";
        v50 = 1024;
        v51 = 8928;
        v52 = 1024;
        v53 = v38;
        _os_log_impl(&dword_216EC7000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s:%i \t Number of HLM debug msgs: %d", buf, 0x18u);
      }
      dispatch_get_specific(*v7);
      v39 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v39)
        v39(6, "%s:%i \t Number of L2 debug msgs: %d", "_Callback_GetNfccParamsCb", 8937, *v35);
      dispatch_get_specific(*v7);
      v40 = NFSharedLogGetLogger();
      a4 = 0;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        v41 = *v35;
        *(_DWORD *)buf = 136446722;
        v49 = "_Callback_GetNfccParamsCb";
        v50 = 1024;
        v51 = 8937;
        v52 = 1024;
        v53 = v41;
        v24 = "%{public}s:%i \t Number of L2 debug msgs: %d";
        v42 = v40;
        v43 = 24;
LABEL_72:
        _os_log_impl(&dword_216EC7000, v42, OS_LOG_TYPE_DEFAULT, v24, buf, v43);
        a4 = 0;
      }
    }
    else
    {
      dispatch_get_specific(*v7);
      v47 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v47)
        v47(6, "%s:%i \t pInfo (pointer to L2Debug Info) is NULL!", "_Callback_GetNfccParamsCb", 8947);
      dispatch_get_specific(*v7);
      v23 = NFSharedLogGetLogger();
      a4 = 0;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v49 = "_Callback_GetNfccParamsCb";
        v50 = 1024;
        v51 = 8947;
        v24 = "%{public}s:%i \t pInfo (pointer to L2Debug Info) is NULL!";
        goto LABEL_71;
      }
    }
  }
  else
  {
    if (v26)
      v26(6, "%s:%i \t Invalid 'eNfccParam' returned", "_Callback_GetNfccParamsCb", 8952);
    dispatch_get_specific(*v7);
    v23 = NFSharedLogGetLogger();
    a4 = 0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v49 = "_Callback_GetNfccParamsCb";
      v50 = 1024;
      v51 = 8952;
      v24 = "%{public}s:%i \t Invalid 'eNfccParam' returned";
      goto LABEL_71;
    }
  }
LABEL_73:
  sub_216EE0DE8(a2, a4);
  sub_216EE0D6C(a2);
}

BOOL NFDriverEnableFelicaTxEndPatternV2(uint64_t a1)
{
  __int16 v2;
  __int16 v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t *v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t *v10;
  _BYTE v12[2];
  int v13;
  _BYTE v14[2];
  int v15;
  char v16;
  void **v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v2 = sub_216EE6D80(a1, 41);
  v14[0] = HIBYTE(v2);
  v14[1] = v2;
  v15 = 118554628;
  v16 = 1;
  v3 = sub_216EE6D80(a1, 40);
  v12[0] = HIBYTE(v3);
  v12[1] = v3;
  v13 = -1040129789;
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i configuring Felica transaction end pattern for applet ver 2.0", "NFDriverEnableFelicaTxEndPatternV2", 9021);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v19 = "NFDriverEnableFelicaTxEndPatternV2";
    v20 = 1024;
    v21 = 9021;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i configuring Felica transaction end pattern for applet ver 2.0", buf, 0x12u);
  }
  v17 = (void **)sub_216EE5100(7u, v14);
  v7 = sub_216EE4D10(a1, 37025, (uint64_t)v17, 0);
  v8 = sub_216EE0ECC(v7);
  sub_216EE5198(&v17);
  sub_216EE0D6C((void **)v7);
  if (v8)
    return 0;
  v17 = (void **)sub_216EE5100(6u, v12);
  v10 = sub_216EE4D10(a1, 37025, (uint64_t)v17, 0);
  v9 = sub_216EE0ECC(v10) == 0;
  sub_216EE5198(&v17);
  sub_216EE0D6C((void **)v10);
  return v9;
}

uint64_t NFDriverConfigureExpressFelicaEntry(uint64_t a1, int a2)
{
  uint64_t v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint64_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  uint64_t *v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  int v20;
  uint64_t *v22;
  uint64_t v23;
  void (*v24)(uint64_t, const char *, ...);
  NSObject *v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  _QWORD v32[6];
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int v36;
  __int16 v37;
  _QWORD v38[3];
  int v39;
  uint8_t v40[4];
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  uint8_t buf[32];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  v4 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)v38))
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i enable %02X", "NFDriverConfigureExpressFelicaEntry", 9057, a2);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "NFDriverConfigureExpressFelicaEntry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 9057;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a2;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i enable %02X", buf, 0x18u);
    }
    v33 = 0;
    v34 = &v33;
    v35 = 0x2000000000;
    v36 = 0;
    v37 = 0;
    v32[0] = MEMORY[0x24BDAC760];
    v32[1] = 0x40000000;
    v32[2] = sub_216EFEE48;
    v32[3] = &unk_24D65F528;
    v32[4] = &v33;
    v32[5] = a1;
    v8 = sub_216EF2A1C(a1, (uint64_t)v32);
    v9 = sub_216EE0ECC(v8);
    sub_216EE0D6C((void **)v8);
    if (v9)
    {
      v4 = 0;
      if (v9 == 51)
      {
LABEL_38:
        _Block_object_dispose(&v33, 8);
        return v4;
      }
      dispatch_get_specific(*v5);
      v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v10)
        v10(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverConfigureExpressFelicaEntry", 9076, v9);
      dispatch_get_specific(*v5);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "NFDriverConfigureExpressFelicaEntry";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 9076;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v9;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
      }
LABEL_27:
      v4 = 0;
      goto LABEL_38;
    }
    v12 = v34;
    dispatch_get_specific(*v5);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(6, "%s:%i old SuicaSystemCode: code 1 enabled: %d, code 1: %04X; code 2 enabled: %d, code 2: %04X",
        "NFDriverConfigureExpressFelicaEntry",
        9083,
        *((unsigned __int8 *)v12 + 24),
        *((unsigned __int16 *)v12 + 13),
        *((unsigned __int8 *)v12 + 25),
        *((unsigned __int16 *)v12 + 14));
    dispatch_get_specific(*v5);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *((unsigned __int8 *)v12 + 24);
      v16 = *((unsigned __int16 *)v12 + 13);
      v17 = *((unsigned __int8 *)v12 + 25);
      v18 = *((unsigned __int16 *)v12 + 14);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "NFDriverConfigureExpressFelicaEntry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 9083;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v15;
      buf[24] = 0;
      buf[25] = 4;
      *(_DWORD *)&buf[26] = v16;
      *(_WORD *)&buf[30] = 1024;
      LODWORD(v53) = v17;
      WORD2(v53) = 1024;
      *(_DWORD *)((char *)&v53 + 6) = v18;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s:%i old SuicaSystemCode: code 1 enabled: %d, code 1: %04X; code 2 enabled: %d, code 2: %04X",
        buf,
        0x2Au);
    }
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    memset(buf, 0, sizeof(buf));
    *(_DWORD *)buf = 4;
    *(_WORD *)&buf[10] = 3;
    buf[8] = a2 & 1;
    if ((a2 & 2) != 0)
      v19 = -32760;
    else
      v19 = 3;
    buf[9] = (a2 & 2) >> 1;
    *(_WORD *)&buf[12] = v19;
    if ((a2 & 2) != 0)
      v20 = 32776;
    else
      v20 = 3;
    if (*((_DWORD *)v12 + 6) == *(_DWORD *)&buf[8] && *((unsigned __int16 *)v12 + 14) == v20)
    {
      dispatch_get_specific(*v5);
      v24 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v24)
        v24(6, "%s:%i configs are identical - skipping.", "NFDriverConfigureExpressFelicaEntry", 9112);
      dispatch_get_specific(*v5);
      v25 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        goto LABEL_37;
      *(_DWORD *)v40 = 136446466;
      v41 = "NFDriverConfigureExpressFelicaEntry";
      v42 = 1024;
      v43 = 9112;
      v26 = "%{public}s:%i configs are identical - skipping.";
      v27 = v25;
      v28 = 18;
    }
    else
    {
      v22 = sub_216EE51D8(a1, (uint64_t)buf);
      v23 = sub_216EE0ECC(v22);
      sub_216EE0D6C((void **)v22);
      if (v23)
        goto LABEL_27;
      dispatch_get_specific(*v5);
      v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v29)
        v29(6, "%s:%i new SuicaEntrySysCode: code 1 enabled: %d, code 1: %04X; code 2 enabled: %d, code 2: %04X",
          "NFDriverConfigureExpressFelicaEntry",
          9126,
          buf[8],
          *(unsigned __int16 *)&buf[10],
          buf[9],
          *(unsigned __int16 *)&buf[12]);
      dispatch_get_specific(*v5);
      v30 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
LABEL_37:
        v4 = 1;
        goto LABEL_38;
      }
      *(_DWORD *)v40 = 136447490;
      v41 = "NFDriverConfigureExpressFelicaEntry";
      v42 = 1024;
      v43 = 9126;
      v44 = 1024;
      v45 = buf[8];
      v46 = 1024;
      v47 = *(unsigned __int16 *)&buf[10];
      v48 = 1024;
      v49 = buf[9];
      v50 = 1024;
      v51 = *(unsigned __int16 *)&buf[12];
      v26 = "%{public}s:%i new SuicaEntrySysCode: code 1 enabled: %d, code 1: %04X; code 2 enabled: %d, code 2: %04X";
      v27 = v30;
      v28 = 42;
    }
    _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_DEFAULT, v26, v40, v28);
    goto LABEL_37;
  }
  return v4;
}

uint64_t sub_216EFEE48(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverSetChipscope(uint64_t a1, int a2, uint64_t a3, int a4)
{
  _BOOL8 v5;
  const void **v9;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v11;
  void (*v12)(uint64_t, const char *, ...);
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  void (*v18)(uint64_t, const char *, ...);
  uint64_t *v19;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  v21 = 0;
  v22 = 0;
  if (*(_BYTE *)(a1 + 58) && (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 554) & 2) != 0)
  {
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (a2)
    {
      if (Logger)
        Logger(6, "%s:%i Disabling standby for debugging", "NFDriverSetChipscope", 9141);
      dispatch_get_specific(*v9);
      v11 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v24 = "NFDriverSetChipscope";
        v25 = 1024;
        v26 = 9141;
        _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Disabling standby for debugging", buf, 0x12u);
      }
      sub_216EEF158(a1, 0);
      LODWORD(v22) = a4;
      v21 = a3;
      LODWORD(v27) = 5;
      DWORD2(v27) = 2;
      *(_QWORD *)&v28 = &v21;
      dispatch_get_specific(*v9);
      v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v12)
        v12(6, "%s:%i Configuring chipscope", "NFDriverSetChipscope", 9152);
      dispatch_get_specific(*v9);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v24 = "NFDriverSetChipscope";
        v25 = 1024;
        v26 = 9152;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Configuring chipscope", buf, 0x12u);
      }
      v14 = sub_216EE51D8(a1, (uint64_t)&v27);
      v15 = sub_216EE0ECC(v14);
      sub_216EE0D6C((void **)v14);
      if (v15)
        return 1;
      dispatch_get_specific(*v9);
      v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v18)
        v18(6, "%s:%i Enabling chipscope", "NFDriverSetChipscope", 9162);
      dispatch_get_specific(*v9);
      v16 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
LABEL_24:
        LODWORD(v27) = 5;
        DWORD2(v27) = a2;
        *(_QWORD *)&v28 = 0;
        v19 = sub_216EE51D8(a1, (uint64_t)&v27);
        v5 = sub_216EE0ECC(v19) != 0;
        sub_216EE0D6C((void **)v19);
        return v5;
      }
      *(_DWORD *)buf = 136446466;
      v24 = "NFDriverSetChipscope";
      v25 = 1024;
      v26 = 9162;
      v17 = "%{public}s:%i Enabling chipscope";
    }
    else
    {
      if (Logger)
        Logger(6, "%s:%i Disabling chipscope", "NFDriverSetChipscope", 9164);
      dispatch_get_specific(*v9);
      v16 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_24;
      *(_DWORD *)buf = 136446466;
      v24 = "NFDriverSetChipscope";
      v25 = 1024;
      v26 = 9164;
      v17 = "%{public}s:%i Disabling chipscope";
    }
    _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x12u);
    goto LABEL_24;
  }
  return 0;
}

uint64_t NFDriverContinuousWave(uint64_t a1, int a2, int a3)
{
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  const char *v8;
  NSObject *v9;
  const char *v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  char v16;
  void **v17;
  void (*v18)(uint64_t, const char *, ...);
  const char *v19;
  NSObject *v20;
  const char *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[3];
  int v25;
  uint8_t v26[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  _OWORD buf[9];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v6 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    if (a2)
      v8 = "Enabling";
    else
      v8 = "Disabling";
    Logger(6, "%s:%i %s Continuous Wave", "NFDriverContinuousWave", 9191, v8);
  }
  dispatch_get_specific(*v6);
  v9 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v10 = "Enabling";
    else
      v10 = "Disabling";
    LODWORD(buf[0]) = 136446722;
    *(_QWORD *)((char *)buf + 4) = "NFDriverContinuousWave";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 9191;
    WORD1(buf[1]) = 2080;
    *(_QWORD *)((char *)&buf[1] + 4) = v10;
    _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s Continuous Wave", (uint8_t *)buf, 0x1Cu);
  }
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  if ((NFDriverGetControllerInfo(a1, (uint64_t)v24) & 1) != 0)
  {
    if (HIDWORD(v24[0]) > 6)
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(buf[0]) = 9;
      DWORD2(buf[0]) = a2;
      if (a3)
        v16 = 2;
      else
        v16 = 1;
      BYTE12(buf[0]) = v16;
      v17 = (void **)sub_216EE51D8(a1, (uint64_t)buf);
      if (sub_216EE0ECC((uint64_t *)v17))
      {
        dispatch_get_specific(*v6);
        v18 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v18)
        {
          if (a2)
            v19 = "enable";
          else
            v19 = "disable";
          v18(3, "%s:%i Failed to %s continuous wave", "NFDriverContinuousWave", 9209, v19);
        }
        dispatch_get_specific(*v6);
        v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          if (a2)
            v21 = "enable";
          else
            v21 = "disable";
          *(_DWORD *)v26 = 136446722;
          v27 = "NFDriverContinuousWave";
          v28 = 1024;
          v29 = 9209;
          v30 = 2080;
          v31 = v21;
          _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to %s continuous wave", v26, 0x1Cu);
        }
        sub_216EE0D6C(v17);
        return 1;
      }
      else
      {
        sub_216EE0D6C(v17);
        if (a2)
        {
          usleep(0x3A98u);
          v22 = a1;
          v23 = 0;
        }
        else
        {
          v22 = a1;
          v23 = 1;
        }
        sub_216EEF158(v22, v23);
        return 0;
      }
    }
    else
    {
      dispatch_get_specific(*v6);
      v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11)
        v11(6, "%s:%i NFCC does not support Continuous Wave", "NFDriverContinuousWave", 9198);
      dispatch_get_specific(*v6);
      v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "NFDriverContinuousWave";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 9198;
        _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i NFCC does not support Continuous Wave", (uint8_t *)buf, 0x12u);
      }
      return 19;
    }
  }
  else
  {
    dispatch_get_specific(*v6);
    v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14)
      v14(6, "%s:%i Failed to get driver info", "NFDriverContinuousWave", 9195);
    dispatch_get_specific(*v6);
    v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 136446466;
      *(_QWORD *)((char *)buf + 4) = "NFDriverContinuousWave";
      WORD6(buf[0]) = 1024;
      *(_DWORD *)((char *)buf + 14) = 9195;
      _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Failed to get driver info", (uint8_t *)buf, 0x12u);
    }
    return 8;
  }
}

BOOL NFDriverConfigureAutomaticMultiTagPolling(uint64_t a1)
{
  _BOOL8 v2;
  const void **v3;
  void (*v4)(uint64_t, const char *, ...);
  NSObject *v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t *v13;
  _QWORD v15[3];
  int v16;
  uint8_t v17[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unsigned int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[32];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  memset(v15, 0, sizeof(v15));
  v16 = 0;
  v2 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)v15))
  {
    if (HIDWORD(v15[0]) > 0xB)
    {
      memset(buf, 0, sizeof(buf));
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v42 = 0u;
      *(_DWORD *)buf = 6;
      buf[8] = -105;
      *(_WORD *)&buf[12] = 3843;
      v6 = *(_DWORD **)(a1 + 24);
      v7 = (unsigned __int16)v6[176];
      *(_WORD *)&buf[22] = v6[176];
      v8 = v6[177];
      buf[20] = v6[177];
      LODWORD(v6) = v6[138];
      v9 = (v6 >> 23) & 1;
      buf[19] = (v6 & 0x800000) != 0;
      v10 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i Setting MultiTag Config. A=%d S=%d S2=%d S3=%d V=%d Retries=%d TlvId=%d, debugMode=%d pollDuration=%d pollRetries=%d", "NFDriverConfigureAutomaticMultiTagPolling", 9269, 1, 1, 1, 1, 1, 3, 15, v9, v7, v8);
      dispatch_get_specific(*v10);
      v12 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v17 = 136449026;
        v18 = "NFDriverConfigureAutomaticMultiTagPolling";
        v19 = 1024;
        v20 = 9269;
        v21 = 1024;
        v22 = 1;
        v23 = 1024;
        v24 = 1;
        v25 = 1024;
        v26 = 1;
        v27 = 1024;
        v28 = 1;
        v29 = 1024;
        v30 = 1;
        v31 = 1024;
        v32 = 3;
        v33 = 1024;
        v34 = 15;
        v35 = 1024;
        v36 = v9;
        v37 = 1024;
        v38 = v7;
        v39 = 1024;
        v40 = v8;
        _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Setting MultiTag Config. A=%d S=%d S2=%d S3=%d V=%d Retries=%d TlvId=%d, debugMode=%d pollDuration=%d pollRetries=%d", v17, 0x4Eu);
      }
      v13 = sub_216EE51D8(a1, (uint64_t)buf);
      v2 = sub_216EE0ECC(v13) == 0;
      sub_216EE0D6C((void **)v13);
    }
    else
    {
      v3 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v4 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v4)
        v4(6, "%s:%i Hardware not supported", "NFDriverConfigureAutomaticMultiTagPolling", 9237);
      dispatch_get_specific(*v3);
      v5 = NFSharedLogGetLogger();
      v2 = 0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "NFDriverConfigureAutomaticMultiTagPolling";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 9237;
        _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Hardware not supported", buf, 0x12u);
        return 0;
      }
    }
  }
  return v2;
}

BOOL NFDriverClearAutomaticMultiTagPollingState(uint64_t a1)
{
  _BOOL8 v2;
  const void **v3;
  void (*v4)(uint64_t, const char *, ...);
  NSObject *v5;
  const void **v6;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v8;
  uint64_t *v9;
  _QWORD v11[3];
  int v12;
  uint8_t v13[4];
  const char *v14;
  __int16 v15;
  int v16;
  _OWORD buf[9];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  v2 = 0;
  if (NFDriverGetControllerInfo(a1, (uint64_t)v11))
  {
    if (HIDWORD(v11[0]) > 0xB)
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(buf[0]) = 7;
      v6 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i Clearing Multitag info state", "NFDriverClearAutomaticMultiTagPollingState", 9300);
      dispatch_get_specific(*v6);
      v8 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v13 = 136446466;
        v14 = "NFDriverClearAutomaticMultiTagPollingState";
        v15 = 1024;
        v16 = 9300;
        _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Clearing Multitag info state", v13, 0x12u);
      }
      v9 = sub_216EE51D8(a1, (uint64_t)buf);
      v2 = sub_216EE0ECC(v9) == 0;
      sub_216EE0D6C((void **)v9);
    }
    else
    {
      v3 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v4 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v4)
        v4(6, "%s:%i Hardware not supported", "NFDriverClearAutomaticMultiTagPollingState", 9291);
      dispatch_get_specific(*v3);
      v5 = NFSharedLogGetLogger();
      v2 = 0;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 136446466;
        *(_QWORD *)((char *)buf + 4) = "NFDriverClearAutomaticMultiTagPollingState";
        WORD6(buf[0]) = 1024;
        *(_DWORD *)((char *)buf + 14) = 9291;
        _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Hardware not supported", (uint8_t *)buf, 0x12u);
        return 0;
      }
    }
  }
  return v2;
}

uint64_t NFDriverGetSWIOTemperature(uint64_t a1, double *a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  double v19;
  const void **v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  _QWORD v23[6];
  _QWORD v24[3];
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  _BYTE v35[10];
  __int16 v36;
  double v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v26 = 0;
  v27 = &v26;
  v28 = 0x2000000000;
  v29 = 0;
  memset(v24, 0, sizeof(v24));
  v25 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v24))
    goto LABEL_25;
  if (HIDWORD(v24[0]) <= 0xB)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Hardware not supported", "NFDriverGetSWIOTemperature", 9324);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    *(_DWORD *)buf = 136446466;
    v31 = "NFDriverGetSWIOTemperature";
    v32 = 1024;
    v33 = 9324;
    v7 = "%{public}s:%i Hardware not supported";
LABEL_13:
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0x12u);
LABEL_14:
    v12 = 19;
    goto LABEL_26;
  }
  v23[0] = MEMORY[0x24BDAC760];
  v23[1] = 0x40000000;
  v23[2] = sub_216EFFF40;
  v23[3] = &unk_24D65F550;
  v23[4] = &v26;
  v23[5] = a1;
  v8 = sub_216EF2A1C(a1, (uint64_t)v23);
  v9 = sub_216EE0ECC(v8);
  sub_216EE0D6C((void **)v8);
  if (v9)
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    if (v9 == 51)
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11)
        v11(6, "%s:%i Not supported", "NFDriverGetSWIOTemperature", 9340);
      dispatch_get_specific(*v10);
      v6 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      *(_DWORD *)buf = 136446466;
      v31 = "NFDriverGetSWIOTemperature";
      v32 = 1024;
      v33 = 9340;
      v7 = "%{public}s:%i Not supported";
      goto LABEL_13;
    }
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverGetSWIOTemperature", 9343, v9);
    dispatch_get_specific(*v10);
    v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v31 = "NFDriverGetSWIOTemperature";
      v32 = 1024;
      v33 = 9343;
      v34 = 2048;
      *(_QWORD *)v35 = v9;
      _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
    }
LABEL_25:
    v12 = 1;
    goto LABEL_26;
  }
  if (HIDWORD(v24[0]) == 16)
    v13 = 24;
  else
    v13 = 26;
  v14 = *(unsigned __int16 *)((char *)v27 + v13);
  v15 = (double)v14 / 1000.0;
  if (HIDWORD(v24[0]) == 16)
    v19 = 4250.0 / (log(v15 * 2838800000.0 / (v15 * -107400.0 + 108720.0)) + 2.7416) + -273.15;
  else
    v19 = v15 * -69.25 + 150.2;
  v20 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v21)
    v21(6, "%s:%i Got %x (%d), returning %lf", "NFDriverGetSWIOTemperature", 9352, v14, v14, *(_QWORD *)&v19);
  dispatch_get_specific(*v20);
  v22 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136447234;
    v31 = "NFDriverGetSWIOTemperature";
    v32 = 1024;
    v33 = 9352;
    v34 = 1024;
    *(_DWORD *)v35 = v14;
    *(_WORD *)&v35[4] = 1024;
    *(_DWORD *)&v35[6] = v14;
    v36 = 2048;
    v37 = v19;
    _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Got %x (%d), returning %lf", buf, 0x28u);
  }
  v12 = 0;
  if (a2)
    *a2 = v19;
LABEL_26:
  _Block_object_dispose(&v26, 8);
  return v12;
}

uint64_t sub_216EFFF40(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverHCISoftReset(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  const void **v13;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v15;
  _BYTE block[24];
  void *v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = malloc_type_calloc(0x100uLL, 1uLL, 0x100004077774924uLL);
  if (v4)
  {
    v5 = v4;
    v6 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v6[2] + 8));
    v7 = v6[2];
    ++*(_QWORD *)v7;
    pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
    v8 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    *(_QWORD *)block = MEMORY[0x24BDAC760];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = sub_216F06640;
    v18 = &unk_24D65F830;
    v19 = v6;
    v20 = v5;
    v21 = a1;
    v22 = 256;
    v23 = a2;
    dispatch_async_and_wait(v8, block);
    if (sub_216EE0ECC(v6))
    {
      v9 = 1;
    }
    else
    {
      v13 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i [R-RAW<] Soft Reset", "NFDriverHCISoftReset", 9466);
      dispatch_get_specific(*v13);
      v15 = NFSharedLogGetLogger();
      v9 = 0;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)block = 136446466;
        *(_QWORD *)&block[4] = "NFDriverHCISoftReset";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 9466;
        _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [R-RAW<] Soft Reset", block, 0x12u);
        v9 = 0;
      }
    }
    sub_216EE0D6C((void **)v6);
    free(v5);
  }
  else
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11)
      v11(3, "%s:%i failed to allocate buffer", "NFDriverHCISoftReset", 9458);
    dispatch_get_specific(*v10);
    v12 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)block = 136446466;
      *(_QWORD *)&block[4] = "NFDriverHCISoftReset";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 9458;
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, "%{public}s:%i failed to allocate buffer", block, 0x12u);
    }
    return 3;
  }
  return v9;
}

uint64_t NFDriverAntennaSelfTest(uint64_t a1, _DWORD *a2)
{
  const void **v4;
  void (*v5)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  uint64_t v14;
  _QWORD block[7];
  _QWORD v17[3];
  int v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  if (!NFDriverGetControllerInfo(a1, (uint64_t)v17))
    return 1;
  if (HIDWORD(v17[0]) > 6)
  {
    v8 = sub_216EE0A24();
    pthread_mutex_lock((pthread_mutex_t *)(v8[2] + 8));
    v9 = v8[2];
    ++*(_QWORD *)v9;
    pthread_mutex_unlock((pthread_mutex_t *)(v9 + 8));
    v8[1] = 0;
    v10 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = sub_216F00470;
    block[3] = &unk_24D65F570;
    block[5] = v8;
    block[6] = 1;
    block[4] = a1;
    dispatch_async(v10, block);
    if (sub_216EE0ECC(v8))
    {
      v11 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i phLibNfc_AntennaSelfTest FAILED : 0x%llx", "NFDriverAntennaSelfTest", 9530, *v8);
      dispatch_get_specific(*v11);
      v13 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v14 = *v8;
        *(_DWORD *)buf = 136446722;
        v20 = "NFDriverAntennaSelfTest";
        v21 = 1024;
        v22 = 9530;
        v23 = 2048;
        v24 = v14;
        _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s:%i phLibNfc_AntennaSelfTest FAILED : 0x%llx", buf, 0x1Cu);
      }
      v7 = 1;
    }
    else
    {
      v7 = 0;
      if (a2)
        *a2 = v8[1];
    }
    sub_216EE0D6C((void **)v8);
  }
  else
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v5 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v5)
      v5(6, "%s:%i Hardware not supported", "NFDriverAntennaSelfTest", 9507);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v20 = "NFDriverAntennaSelfTest";
      v21 = 1024;
      v22 = 9507;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Hardware not supported", buf, 0x12u);
    }
    return 19;
  }
  return v7;
}

void sub_216F00470(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_AntennaSelfTest();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed : 0x%x", "NFDriverAntennaSelfTest_block_invoke", 9523, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "NFDriverAntennaSelfTest_block_invoke";
      v9 = 1024;
      v10 = 9523;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed : 0x%x", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216F005AC(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if (a3 && (*(_BYTE *)a3 & 1) != 0)
    {
      a2[1] = (void *)*(unsigned int *)(a3 + 4);
      v8 = a4;
    }
    else
    {
      v5 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Missing TX LDO data", "_Callback_NFDriverAntennaSelfTest", 9485);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v10 = "_Callback_NFDriverAntennaSelfTest";
        v11 = 1024;
        v12 = 9485;
        v8 = 18;
        _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Missing TX LDO data", buf, 0x12u);
      }
      else
      {
        v8 = 18;
      }
    }
    sub_216EE0DE8(a2, v8);
    sub_216EE0D6C(a2);
  }
}

uint64_t NFDriverReadATETrimVersion(uint64_t a1, _WORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  const void **v6;
  void (*v7)(uint64_t, const char *, ...);
  NSObject *v8;
  const char *v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  uint64_t v12;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  _QWORD v17[6];
  _QWORD v18[3];
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __int16 v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v21 = &v20;
  v22 = 0x2000000000;
  v23 = 0;
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v18);
  if (HIDWORD(v18[0]) < 0xE || HIDWORD(v18[0]) == 20)
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Hardware not supported", "NFDriverReadATETrimVersion", 9551);
    dispatch_get_specific(*v10);
    v8 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    *(_DWORD *)buf = 136446466;
    v25 = "NFDriverReadATETrimVersion";
    v26 = 1024;
    v27 = 9551;
    v9 = "%{public}s:%i Hardware not supported";
    goto LABEL_13;
  }
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 0x40000000;
  v17[2] = sub_216F009F4;
  v17[3] = &unk_24D65F598;
  v17[4] = &v20;
  v17[5] = a1;
  v4 = sub_216EF2A1C(a1, (uint64_t)v17);
  v5 = sub_216EE0ECC(v4);
  sub_216EE0D6C((void **)v4);
  if (v5)
  {
    if (v5 == 51)
    {
      v6 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v7 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v7)
        v7(6, "%s:%i Not supported", "NFDriverReadATETrimVersion", 9567);
      dispatch_get_specific(*v6);
      v8 = NFSharedLogGetLogger();
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      *(_DWORD *)buf = 136446466;
      v25 = "NFDriverReadATETrimVersion";
      v26 = 1024;
      v27 = 9567;
      v9 = "%{public}s:%i Not supported";
LABEL_13:
      _os_log_impl(&dword_216EC7000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x12u);
LABEL_14:
      v12 = 19;
      goto LABEL_15;
    }
    v14 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverReadATETrimVersion", 9570, v5);
    dispatch_get_specific(*v14);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v25 = "NFDriverReadATETrimVersion";
      v26 = 1024;
      v27 = 9570;
      v28 = 2048;
      v29 = v5;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
    }
    v12 = 1;
  }
  else
  {
    v12 = 0;
    if (a2)
      *a2 = *((_WORD *)v21 + 12);
  }
LABEL_15:
  _Block_object_dispose(&v20, 8);
  return v12;
}

uint64_t sub_216F009F4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverReadPageEraseCounter(uint64_t a1, uint64_t a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  const char *v7;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  const void **v13;
  void (*v14)(uint64_t, const char *, ...);
  NSObject *v15;
  _QWORD v16[6];
  _QWORD v17[3];
  int v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, sizeof(v17));
  v18 = 0;
  NFDriverGetControllerInfo(a1, (uint64_t)v17);
  if (HIDWORD(v17[0]) <= 0xD)
  {
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Hardware not supported", "NFDriverReadPageEraseCounter", 9587);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      return 19;
    *(_DWORD *)buf = 136446466;
    v20 = "NFDriverReadPageEraseCounter";
    v21 = 1024;
    v22 = 9587;
    v7 = "%{public}s:%i Hardware not supported";
LABEL_12:
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 0x12u);
    return 19;
  }
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 0x40000000;
  v16[2] = sub_216F00CF4;
  v16[3] = &unk_24D65F5B8;
  v16[4] = a2;
  v16[5] = a1;
  v8 = sub_216EF2A1C(a1, (uint64_t)v16);
  v9 = sub_216EE0ECC(v8);
  sub_216EE0D6C((void **)v8);
  if (!v9)
    return 0;
  if (v9 == 51)
  {
    v10 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v11)
      v11(6, "%s:%i Not supported", "NFDriverReadPageEraseCounter", 9603);
    dispatch_get_specific(*v10);
    v6 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      return 19;
    *(_DWORD *)buf = 136446466;
    v20 = "NFDriverReadPageEraseCounter";
    v21 = 1024;
    v22 = 9603;
    v7 = "%{public}s:%i Not supported";
    goto LABEL_12;
  }
  v13 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v14 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v14)
    v14(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverReadPageEraseCounter", 9606, v9);
  dispatch_get_specific(*v13);
  v15 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v20 = "NFDriverReadPageEraseCounter";
    v21 = 1024;
    v22 = 9606;
    v23 = 2048;
    v24 = v9;
    _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
  }
  return 1;
}

uint64_t sub_216F00CF4(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 32);
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverPrintPageEraseCounter(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v3;
  _DWORD *v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 5;
  if (*a2 >= 8u)
  {
    v3 = 0;
    v4 = a2 + 8;
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    do
    {
      dispatch_get_specific(*v5);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i %02d: %04d %04d %04d %04d %04d %04d %04d %04d", "NFDriverPrintPageEraseCounter", 9625, v3, *(v4 - 3), *(v4 - 2), *(v4 - 1), *v4, v4[1], v4[2], v4[3], v4[4]);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(v4 - 3);
        v9 = *(v4 - 2);
        v10 = *(v4 - 1);
        v11 = *v4;
        v12 = v4[1];
        v13 = v4[2];
        v14 = v4[3];
        v15 = v4[4];
        *(_DWORD *)buf = 136448770;
        v19 = "NFDriverPrintPageEraseCounter";
        v20 = 1024;
        v21 = 9625;
        v22 = 1024;
        v23 = v3;
        v24 = 1024;
        v25 = v8;
        v26 = 1024;
        v27 = v9;
        v28 = 1024;
        v29 = v10;
        v30 = 1024;
        v31 = v11;
        v32 = 1024;
        v33 = v12;
        v34 = 1024;
        v35 = v13;
        v36 = 1024;
        v37 = v14;
        v38 = 1024;
        v39 = v15;
        _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %02d: %04d %04d %04d %04d %04d %04d %04d %04d", buf, 0x48u);
      }
      v16 = v3 + 15;
      v3 += 8;
      v4 += 8;
    }
    while (v16 < *a2);
  }
  return 0;
}

uint64_t NFDriverGetTemporaryPollingPeriod(uint64_t result)
{
  if (result)
    return *(unsigned int *)(*(_QWORD *)(result + 24) + 696);
  return result;
}

BOOL NFDriverEnableSMBLogging(uint64_t a1, int a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  const char *v6;
  NSObject *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  _BOOL8 v11;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  _OWORD v19[9];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  memset(v19, 0, sizeof(v19));
  DWORD2(v19[0]) = a2;
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
  {
    if (a2)
      v6 = "Enabling";
    else
      v6 = "Disabling";
    Logger(6, "%s:%i %s SMB log", "NFDriverEnableSMBLogging", 9655, v6);
  }
  dispatch_get_specific(*v4);
  v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
      v8 = "Enabling";
    else
      v8 = "Disabling";
    *(_DWORD *)buf = 136446722;
    v14 = "NFDriverEnableSMBLogging";
    v15 = 1024;
    v16 = 9655;
    v17 = 2080;
    v18 = v8;
    _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i %s SMB log", buf, 0x1Cu);
  }
  v9 = sub_216EE51D8(a1, (uint64_t)v19);
  v10 = sub_216EE0ECC(v9);
  if (!v10)
    *(_BYTE *)(*(_QWORD *)(a1 + 24) + 729) = a2;
  v11 = v10 == 0;
  sub_216EE0D6C((void **)v9);
  return v11;
}

uint64_t sub_216F01084(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t NFDriverGetReaderProhibitTimer(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  int v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  int v15;
  _QWORD v17[6];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 0x40000000;
  v17[2] = sub_216F01380;
  v17[3] = &unk_24D65F608;
  v17[4] = &v18;
  v17[5] = a1;
  v3 = sub_216EF2A1C(a1, (uint64_t)v17);
  v4 = sub_216EE0ECC(v3);
  sub_216EE0D6C((void **)v3);
  if (v4)
  {
    if (v4 != 51)
    {
      v5 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", "NFDriverGetReaderProhibitTimer", 9713, v4);
      dispatch_get_specific(*v5);
      v7 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v23 = "NFDriverGetReaderProhibitTimer";
        v24 = 1024;
        v25 = 9713;
        v26 = 2048;
        v27 = v4;
        _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_Mgt_GetNfccParams failed 0x%04llx", buf, 0x1Cu);
      }
    }
    v8 = 1;
  }
  else
  {
    v9 = *((_DWORD *)v19 + 6);
    if (v9 == 11)
    {
      v10 = "HRMST";
    }
    else if (v9 == 10)
    {
      v10 = "SERMST";
    }
    else if (v9)
    {
      v10 = "Unknown";
    }
    else
    {
      v10 = "None";
    }
    v11 = *((unsigned __int16 *)v19 + 15) + 1000 * *((unsigned __int16 *)v19 + 14);
    v12 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(6, "%s:%i timerID=%s, remaning=%dms", "NFDriverGetReaderProhibitTimer", 9731, v10, v11);
    dispatch_get_specific(*v12);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      v23 = "NFDriverGetReaderProhibitTimer";
      v24 = 1024;
      v25 = 9731;
      v26 = 2080;
      v27 = (uint64_t)v10;
      v28 = 1024;
      v29 = v11;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s:%i timerID=%s, remaning=%dms", buf, 0x22u);
    }
    v8 = 0;
    if (a2)
    {
      v15 = *((_DWORD *)v19 + 6);
      *(_BYTE *)(a2 + 1) = v15 == 11;
      *(_BYTE *)a2 = v15 == 10;
      *(_DWORD *)(a2 + 4) = v11;
    }
  }
  _Block_object_dispose(&v18, 8);
  return v8;
}

uint64_t sub_216F01380(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24;
  return phLibNfc_Mgt_GetNfccParams();
}

uint64_t sub_216F013B0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t *v6;
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = malloc_type_calloc(1uLL, 0x4CuLL, 0x1000040E9AD63BBuLL);
  if (v4)
  {
    v5 = (uint64_t)v4;
    *(_QWORD *)v4 = 0x100000000;
    v4[8] = 1;
    v4[68] = *(_QWORD *)(a2 + 16);
    if ((unint64_t)(*(_QWORD *)(a2 + 16) - 1) <= 0x2F)
      __memcpy_chk();
    *(_BYTE *)(v5 + 19) = *(_QWORD *)(a2 + 8);
    if ((unint64_t)(*(_QWORD *)(a2 + 8) - 1) <= 9)
      __memcpy_chk();
    *(_BYTE *)(v5 + 69) = *(_BYTE *)a2;
    *(_BYTE *)(v5 + 72) = 0;
    *(_WORD *)(v5 + 70) = *(_WORD *)(a2 + 82);
    *(_BYTE *)(v5 + 73) = *(_BYTE *)(a2 + 1);
    v6 = sub_216F01648(a1, v5);
    if (sub_216EE0ECC(v6))
    {
      v7 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Failed to configure Type A emulation : 0x%04llx", "NFDriverSetHCETypeAConfig", 9796, *v6);
      dispatch_get_specific(*v7);
      v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *v6;
        *(_DWORD *)buf = 136446722;
        v17 = "NFDriverSetHCETypeAConfig";
        v18 = 1024;
        v19 = 9796;
        v20 = 2048;
        v21 = v10;
        _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to configure Type A emulation : 0x%04llx", buf, 0x1Cu);
      }
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    sub_216EE0D6C((void **)v6);
    free((void *)v5);
  }
  else
  {
    v12 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(3, "%s:%i Allocation failure", "NFDriverSetHCETypeAConfig", 9770);
    dispatch_get_specific(*v12);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v17 = "NFDriverSetHCETypeAConfig";
      v18 = 1024;
      v19 = 9770;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 3;
  }
  return v11;
}

_QWORD *sub_216F01648(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[7];

  v4 = sub_216EE0A24();
  pthread_mutex_lock((pthread_mutex_t *)(v4[2] + 8));
  v5 = v4[2];
  ++*(_QWORD *)v5;
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 8));
  v6 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = sub_216F06BB4;
  block[3] = &unk_24D65F850;
  block[4] = a1;
  block[5] = a2;
  block[6] = v4;
  dispatch_async_and_wait(v6, block);
  return v4;
}

uint64_t sub_216F016E8(uint64_t a1, uint64_t a2)
{
  char *v4;
  void *v5;
  uint64_t *v6;
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)malloc_type_calloc(1uLL, 0x4CuLL, 0x1000040E9AD63BBuLL);
  if (v4)
  {
    v5 = v4;
    *(_QWORD *)v4 = 0x200000000;
    v4[8] = 1;
    v4[22] = 0;
    v4[17] = 1;
    *(_DWORD *)(v4 + 9) = *(_DWORD *)(a2 + 3);
    *(_DWORD *)(v4 + 13) = *(_DWORD *)(a2 + 7);
    v4[18] = *(_BYTE *)a2;
    v4[19] = *(_BYTE *)(a2 + 2);
    v4[20] = 0;
    v4[21] = *(_BYTE *)(a2 + 1);
    v6 = sub_216F01648(a1, (uint64_t)v4);
    if (sub_216EE0ECC(v6))
    {
      v7 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(3, "%s:%i Faled to configure Type B emulation : 0x%04llx", "NFDriverSetHCETypeBConfig", 9838, *v6);
      dispatch_get_specific(*v7);
      v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *v6;
        *(_DWORD *)buf = 136446722;
        v17 = "NFDriverSetHCETypeBConfig";
        v18 = 1024;
        v19 = 9838;
        v20 = 2048;
        v21 = v10;
        _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i Faled to configure Type B emulation : 0x%04llx", buf, 0x1Cu);
      }
      v11 = 1;
    }
    else
    {
      v11 = 0;
    }
    sub_216EE0D6C((void **)v6);
    free(v5);
  }
  else
  {
    v12 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v13)
      v13(3, "%s:%i Allocation failure", "NFDriverSetHCETypeBConfig", 9814);
    dispatch_get_specific(*v12);
    v14 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v17 = "NFDriverSetHCETypeBConfig";
      v18 = 1024;
      v19 = 9814;
      _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_ERROR, "%{public}s:%i Allocation failure", buf, 0x12u);
    }
    return 3;
  }
  return v11;
}

void sub_216F01948(uint64_t a1)
{
  unsigned int ClrAssertRegs;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  ClrAssertRegs = phLibNfc_Mgt_GetClrAssertRegs();
  if (ClrAssertRegs != 13)
  {
    v3 = ClrAssertRegs;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverGetClrAssertRegs_block_invoke", 1349, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverGetClrAssertRegs_block_invoke";
      v9 = 1024;
      v10 = 1349;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 48), v3);
    sub_216EE0D6C(*(void ***)(a1 + 48));
  }
}

void sub_216F01A88(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  sub_216EE0DE8(a2, a4);
  sub_216EE0D6C(a2);
}

void sub_216F01AB4(uint64_t a1)
{
  uint64_t v2;
  char v3;
  int v4;
  const void **v5;
  void (*v6)(uint64_t, const char *, ...);
  NSObject *v7;
  int v8;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  const void **v12;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  const void **v21;
  void (*v22)(uint64_t, const char *, ...);
  NSObject *v23;
  unsigned int v24;
  unsigned int v25;
  const void **v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  LODWORD(v35) = 1;
  if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(_BYTE *)(v2 + 660);
    if ((v3 & 8) != 0)
    {
      v12 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (Logger)
        Logger(6, "%s:%i Enabling single poll headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1465);
      dispatch_get_specific(*v12);
      v14 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
        v31 = 1024;
        v32 = 1465;
        _os_log_impl(&dword_216EC7000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling single poll headless mode", buf, 0x12u);
      }
      v8 = 16;
      goto LABEL_37;
    }
    if ((*(_BYTE *)(v2 + 660) & 1) != 0)
    {
      v15 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v16)
        v16(6, "%s:%i Enabling TypeF headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1470);
      dispatch_get_specific(*v15);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
        v31 = 1024;
        v32 = 1470;
        _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling TypeF headless mode", buf, 0x12u);
      }
      v4 = 2;
      DWORD2(v35) = 2;
      v3 = *(_BYTE *)(v2 + 660);
      if ((v3 & 2) == 0)
      {
LABEL_5:
        if ((v3 & 4) == 0)
        {
LABEL_6:
          if (v4)
            goto LABEL_38;
          v5 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v6 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v6)
            v6(6, "%s:%i Enabling ECP mode since no other is selected.", "_Async_NFDriverSetHeadlessMode_block_invoke", 1484);
          dispatch_get_specific(*v5);
          v7 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
            v31 = 1024;
            v32 = 1484;
            _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling ECP mode since no other is selected.", buf, 0x12u);
          }
          v8 = 4;
          goto LABEL_37;
        }
        goto LABEL_32;
      }
    }
    else
    {
      v4 = 0;
      if ((*(_BYTE *)(v2 + 660) & 2) == 0)
        goto LABEL_5;
    }
    v18 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19)
      v19(6, "%s:%i Enabling ECP headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1474);
    dispatch_get_specific(*v18);
    v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
      v31 = 1024;
      v32 = 1474;
      _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling ECP headless mode", buf, 0x12u);
    }
    v4 |= 4u;
    DWORD2(v35) = v4;
    if ((*(_BYTE *)(v2 + 660) & 4) == 0)
      goto LABEL_6;
LABEL_32:
    v21 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v22 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v22)
      v22(6, "%s:%i Enabling Generic-A headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1478);
    dispatch_get_specific(*v21);
    v23 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
      v31 = 1024;
      v32 = 1478;
      _os_log_impl(&dword_216EC7000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling Generic-A headless mode", buf, 0x12u);
    }
    v8 = v4 | 8;
LABEL_37:
    DWORD2(v35) = v8;
    goto LABEL_38;
  }
  v9 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v10)
    v10(6, "%s:%i Disabling headless mode", "_Async_NFDriverSetHeadlessMode_block_invoke", 1461);
  dispatch_get_specific(*v9);
  v11 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
    v31 = 1024;
    v32 = 1461;
    _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Disabling headless mode", buf, 0x12u);
  }
  DWORD2(v35) = 0;
LABEL_38:
  v24 = phLibNfc_Mgt_SetNfccParams();
  if (v24 != 13)
  {
    v25 = v24;
    v26 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v27)
      v27(3, "%s:%i status=0x%04X", "_Async_NFDriverSetHeadlessMode_block_invoke", 1495, v25);
    dispatch_get_specific(*v26);
    v28 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v30 = "_Async_NFDriverSetHeadlessMode_block_invoke";
      v31 = 1024;
      v32 = 1495;
      v33 = 1024;
      v34 = v25;
      _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v25);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216F0205C(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

void sub_216F02088(uint64_t a1)
{
  int SecureElementList;
  int v3;
  const void **v4;
  void (*v5)(uint64_t, const char *, ...);
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  const void **v15;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  void (*v29)(uint64_t, const char *, ...);
  NSObject *v30;
  unsigned int v31;
  void (*v32)(uint64_t, const char *, ...);
  _OWORD v33[3];
  _BYTE buf[24];
  void *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  memset(v33, 0, sizeof(v33));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 723) = 0;
  SecureElementList = phLibNfc_SE_GetSecureElementList();
  if (!SecureElementList)
  {
    v9 = 3;
    v10 = (_DWORD *)((unint64_t)v33 | 0xC);
    while (*(v10 - 1) != 1)
    {
      v10 += 4;
      if (!--v9)
      {
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
        v12 = *(void **)(v11 + 496);
        if (v12)
        {
          free(v12);
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
        }
        *(_QWORD *)(v11 + 496) = 0;
LABEL_13:
        v13 = *(_QWORD **)(a1 + 56);
        v14 = 0;
LABEL_14:
        sub_216EE0DE8(v13, v14);
        sub_216EE0D6C(*(void ***)(a1 + 56));
        return;
      }
    }
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i Found eSE state=%d", "_NFDriverRecoverESE_block_invoke", 3705, *v10);
    dispatch_get_specific(*v15);
    v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *v10;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "_NFDriverRecoverESE_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3705;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v18;
      _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Found eSE state=%d", buf, 0x18u);
    }
    v19 = *v10;
    v20 = *v10 == 4;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
    v22 = *(_QWORD *)(v21 + 496);
    if (v22)
    {
      *(_QWORD *)(v22 + 8) = *(_QWORD *)(v10 - 3);
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
      *(_DWORD *)(*(_QWORD *)(v23 + 496) + 24) = v20;
      if (v19 != 4)
        goto LABEL_13;
    }
    else
    {
      v24 = (int)sub_216EE90A8(*(_DWORD *)(v21 + 588), *(unsigned __int8 *)(v21 + 592)) - 5;
      if (v24 >= 8)
        v25 = 6;
      else
        v25 = dword_216F084A4[v24];
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 496) = sub_216ED76F0(*(_QWORD *)(a1 + 48), v25, v20, *(_QWORD *)(v10 - 3));
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
      v26 = *(_QWORD *)(v23 + 496);
      if (!v26 || *(_DWORD *)(v26 + 24) != 1)
        goto LABEL_13;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 8) = 1;
    if ((*(_DWORD *)(v23 + 716) - 14) > 4)
    {
      v31 = phLibNfc_SE_SetMode();
      if (v31 == 13)
        return;
      v28 = v31;
      dispatch_get_specific(*v15);
      v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32)
        v32(3, "%s:%i status=0x%04X", "_NFDriverRecoverESE_block_invoke", 3753, v28);
      dispatch_get_specific(*v15);
      v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverRecoverESE_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3753;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v28;
        goto LABEL_39;
      }
    }
    else
    {
      v27 = phLibNfc_SE_SetMode();
      if (v27 == 13)
        return;
      v28 = v27;
      dispatch_get_specific(*v15);
      v29 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v29)
        v29(3, "%s:%i status=0x%04X", "_NFDriverRecoverESE_block_invoke", 3738, v28);
      dispatch_get_specific(*v15);
      v30 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverRecoverESE_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3738;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v28;
LABEL_39:
        _os_log_impl(&dword_216EC7000, v30, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
    }
    v13 = *(_QWORD **)(a1 + 56);
    v14 = v28;
    goto LABEL_14;
  }
  v3 = SecureElementList;
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v5 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v5)
    v5(3, "%s:%i status=0x%04X", "_NFDriverRecoverESE_block_invoke", 3697, v3);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "_NFDriverRecoverESE_block_invoke";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3697;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v3;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
  }
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(NSObject **)(*(_QWORD *)(v7 + 24) + 528);
  *(_QWORD *)buf = MEMORY[0x24BDAC760];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = sub_216EE4564;
  v35 = &unk_24D65ED38;
  v36 = v7;
  dispatch_async(v8, buf);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

void sub_216F02590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  void **v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  NSObject *v12;
  uint64_t v13;
  int v14;
  const void **v15;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v17;
  NSObject *v18;
  unsigned int v19;
  int v20;
  int v21;
  const void **v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  int v25;
  unsigned int v26;
  void (*v27)(uint64_t, const char *, ...);
  NSObject *v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (!a2 || (v6 = *(void ***)a2) == 0)
    __assert_rtn("_Callback_NFDriverESERecovery_SetSEModePowerWired", "NFDriver.c", 3596, "mutex != NULL");
  v7 = a5;
  if (a5 == 67)
  {
    v14 = *(_DWORD *)(a2 + 8);
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v14 >= 3)
    {
      if (Logger)
        Logger(3, "%s:%i Failed to power cycle SE... it's not coming back folks", "_Callback_NFDriverESERecovery_SetSEModePowerWired", 3620);
      dispatch_get_specific(*v15);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v30 = "_Callback_NFDriverESERecovery_SetSEModePowerWired";
        v31 = 1024;
        v32 = 3620;
        _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to power cycle SE... it's not coming back folks", buf, 0x12u);
      }
      v7 = 67;
LABEL_40:
      v13 = v7;
LABEL_41:
      sub_216EE0DE8(v6, v13);
      sub_216EE0D6C(v6);
      return;
    }
    if (Logger)
      Logger(6, "%s:%i SE power up failed. Trying to power off", "_Callback_NFDriverESERecovery_SetSEModePowerWired", 3623);
    dispatch_get_specific(*v15);
    v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v30 = "_Callback_NFDriverESERecovery_SetSEModePowerWired";
      v31 = 1024;
      v32 = 3623;
      _os_log_impl(&dword_216EC7000, v18, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE power up failed. Trying to power off", buf, 0x12u);
    }
    ++*(_DWORD *)(a2 + 8);
    v19 = phLibNfc_SE_SetMode();
    if (v19 != 13)
    {
      v7 = v19;
      v8 = a2 + 16;
      v20 = 6;
LABEL_38:
      *(_DWORD *)(*(_QWORD *)v8 + 44) = v20;
LABEL_39:
      if (!v7)
        return;
      goto LABEL_40;
    }
  }
  else
  {
    if (a5)
      goto LABEL_39;
    v8 = a2 + 16;
    v9 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 44);
    if (v9)
    {
      if (v9 == 2)
      {
        v21 = 0;
      }
      else
      {
        if (v9 == 1)
        {
          v10 = (const void **)MEMORY[0x24BEDCDB0];
          dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
          v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
          if (v11)
            v11(6, "%s:%i SE recovery complete. Leaving SE in wired", "_Callback_NFDriverESERecovery_SetSEModePowerWired", 3602);
          dispatch_get_specific(*v10);
          v12 = NFSharedLogGetLogger();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136446466;
            v30 = "_Callback_NFDriverESERecovery_SetSEModePowerWired";
            v31 = 1024;
            v32 = 3602;
            _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE recovery complete. Leaving SE in wired", buf, 0x12u);
          }
          v13 = 0;
          goto LABEL_41;
        }
        v21 = 3;
      }
    }
    else
    {
      v21 = 1;
    }
    v22 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v23)
      v23(6, "%s:%i Resuming SE mode to 0x%x (stored routing mode is %d)", "_resumeSEMode", 3551, v21, *(_DWORD *)(*(_QWORD *)v8 + 44));
    dispatch_get_specific(*v22);
    v24 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_DWORD *)(*(_QWORD *)v8 + 44);
      *(_DWORD *)buf = 136446978;
      v30 = "_resumeSEMode";
      v31 = 1024;
      v32 = 3551;
      v33 = 1024;
      v34 = v21;
      v35 = 1024;
      v36 = v25;
      _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Resuming SE mode to 0x%x (stored routing mode is %d)", buf, 0x1Eu);
    }
    v26 = phLibNfc_SE_SetMode();
    if (v26 != 13)
    {
      v7 = v26;
      dispatch_get_specific(*v22);
      v27 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v27)
        v27(3, "%s:%i Failed to restore SE mode : 0x%x", "_Callback_NFDriverESERecovery_SetSEModePowerWired", 3614, v7);
      dispatch_get_specific(*v22);
      v28 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v30 = "_Callback_NFDriverESERecovery_SetSEModePowerWired";
        v31 = 1024;
        v32 = 3614;
        v33 = 1024;
        v34 = v7;
        _os_log_impl(&dword_216EC7000, v28, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to restore SE mode : 0x%x", buf, 0x18u);
      }
      v20 = 1;
      goto LABEL_38;
    }
  }
}

void sub_216F02A54(uint64_t a1, void ***a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  void **v5;
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  NSObject *v10;
  unsigned int v11;
  void (*v12)(uint64_t, const char *, ...);
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!a2 || (v5 = *a2) == 0)
    __assert_rtn("_Callback_NFDriverESERecovery_SetSEModePowerOff", "NFDriver.c", 3568, "mutex != NULL");
  v7 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (a5)
  {
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Callback_NFDriverESERecovery_SetSEModePowerOff", 3584, a5);
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136446722;
    v14 = "_Callback_NFDriverESERecovery_SetSEModePowerOff";
    v15 = 1024;
    v16 = 3584;
    v17 = 1024;
    v18 = a5;
LABEL_17:
    _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
LABEL_18:
    sub_216EE0DE8(v5, a5);
    sub_216EE0D6C(v5);
    return;
  }
  if (Logger)
    Logger(6, "%s:%i Powering SE back ON", "_Callback_NFDriverESERecovery_SetSEModePowerOff", 3572);
  dispatch_get_specific(*v7);
  v10 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v14 = "_Callback_NFDriverESERecovery_SetSEModePowerOff";
    v15 = 1024;
    v16 = 3572;
    _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Powering SE back ON", buf, 0x12u);
  }
  v11 = phLibNfc_SE_SetMode();
  if (v11 != 13)
  {
    a5 = v11;
    dispatch_get_specific(*v7);
    v12 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v12)
      v12(3, "%s:%i status=0x%04X", "_Callback_NFDriverESERecovery_SetSEModePowerOff", 3579, a5);
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_18;
    *(_DWORD *)buf = 136446722;
    v14 = "_Callback_NFDriverESERecovery_SetSEModePowerOff";
    v15 = 1024;
    v16 = 3579;
    v17 = 1024;
    v18 = a5;
    goto LABEL_17;
  }
}

void sub_216F02CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  void **v6;
  const void **v8;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v10;
  NSObject *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (!a2 || (v6 = *(void ***)a2) == 0)
    __assert_rtn("_Callback_NFDriverESERecovery_SetSEModeResume", "NFDriver.c", 3524, "mutex != NULL");
  v8 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (a5)
  {
    if (Logger)
      Logger(3, "%s:%i Failed to resume SE mode", "_Callback_NFDriverESERecovery_SetSEModeResume", 3528);
    dispatch_get_specific(*v8);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v13 = "_Callback_NFDriverESERecovery_SetSEModeResume";
      v14 = 1024;
      v15 = 3528;
      _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to resume SE mode", buf, 0x12u);
    }
    *(_DWORD *)(*(_QWORD *)(a2 + 16) + 44) = 1;
  }
  else
  {
    if (Logger)
      Logger(6, "%s:%i SE is now recovered and set to prior mode", "_Callback_NFDriverESERecovery_SetSEModeResume", 3532);
    dispatch_get_specific(*v8);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v13 = "_Callback_NFDriverESERecovery_SetSEModeResume";
      v14 = 1024;
      v15 = 3532;
      _os_log_impl(&dword_216EC7000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s:%i SE is now recovered and set to prior mode", buf, 0x12u);
    }
  }
  sub_216EE0DE8(v6, a5);
  sub_216EE0D6C(v6);
}

void sub_216F02ED8(uint64_t a1)
{
  uint64_t v1;
  void **v2;
  int v3;
  int v4;
  int v5;
  int v6;
  const void **v7;
  void (*v8)(uint64_t, const char *, ...);
  NSObject *v9;
  const void **v10;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v12;
  char v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  _BOOL4 v17;
  const void **v18;
  void (*v19)(uint64_t, const char *, ...);
  NSObject *v20;
  uint64_t v21;
  int v22;
  void (*v23)(uint64_t, const char *, ...);
  NSObject *v24;
  int v25;
  void (*v26)(uint64_t, const char *, ...);
  NSObject *v27;
  char v28;
  const void **v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  void (*v32)(uint64_t, const char *, ...);
  NSObject *v33;
  int v34;
  uint64_t v35;
  int v36;
  void (*v37)(uint64_t, const char *, ...);
  NSObject *v38;
  int v39;
  int v40;
  void (*v41)(uint64_t, const char *, ...);
  NSObject *v42;
  unsigned int v43;
  unsigned int v44;
  void (*v45)(uint64_t, const char *, ...);
  NSObject *v46;
  uint64_t v47;
  const void **v48;
  void (*v49)(uint64_t, const char *, ...);
  NSObject *v50;
  char v51;
  const void **v52;
  void (*v53)(uint64_t, const char *, ...);
  NSObject *v54;
  char v55;
  const void **v56;
  void (*v57)(uint64_t, const char *, ...);
  NSObject *v58;
  const void **v59;
  void (*v60)(uint64_t, const char *, ...);
  NSObject *v61;
  const void **v62;
  void (*v63)(uint64_t, const char *, ...);
  NSObject *v64;
  const void **v65;
  void (*v66)(uint64_t, const char *, ...);
  NSObject *v67;
  const void **v68;
  void (*v69)(uint64_t, const char *, ...);
  NSObject *v70;
  const void **v71;
  void (*v72)(uint64_t, const char *, ...);
  NSObject *v73;
  int v74;
  int v75;
  int isFeatureSupported;
  char v77;
  char v78;
  void **v79;
  unsigned int v80;
  const void **v81;
  void (*v82)(uint64_t, const char *, ...);
  NSObject *v83;
  uint64_t v84;
  unsigned int v85;
  const void **v86;
  void (*v87)(uint64_t, const char *, ...);
  unsigned int v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  char v93;
  const void **v94;
  void (*v95)(uint64_t, const char *, ...);
  NSObject *v96;
  const void **v97;
  void (*v98)(uint64_t, const char *, ...);
  NSObject *v99;
  char v100;
  NSObject *v101;
  unsigned int v102;
  unsigned int v103;
  const void **v104;
  void (*v105)(uint64_t, const char *, ...);
  NSObject *v106;
  char v107;
  char v108;
  char v109;
  char v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  uint8_t buf[4];
  const char *v118;
  _BYTE v119[49];
  _BYTE v120[19];
  char v121;
  __int16 v122;
  char v123;
  char v124;
  char v125;
  char v126;
  char v127;
  int v128;
  char v129;
  char v130;
  __int16 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[19];
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void ***)(a1 + 40);
  v3 = *(_DWORD *)(a1 + 48);
  v4 = *(_DWORD *)(a1 + 52);
  v115 = *(unsigned __int8 *)(a1 + 60);
  v116 = *(unsigned __int8 *)(a1 + 62);
  v5 = *(_DWORD *)(a1 + 56);
  v132 = 0u;
  v133 = 0u;
  v134 = 0u;
  memset(v135, 0, sizeof(v135));
  v6 = 0;
  if (NF_isFeatureSupported())
  {
    if (v5 || !*(_BYTE *)(v1 + 62))
    {
      if ((v5 | 2) == 2)
      {
        v6 = 0;
      }
      else
      {
        v10 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(6, "%s:%i Marking ESE reader as enabled!", "_Dispatched_NFDriverConfigureDiscovery", 649);
        dispatch_get_specific(*v10);
        v12 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 649;
          _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Marking ESE reader as enabled!", buf, 0x12u);
        }
        v6 = 2;
      }
    }
    else
    {
      v7 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v8 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v8)
        v8(6, "%s:%i Marking ESE reader as disabled!", "_Dispatched_NFDriverConfigureDiscovery", 643);
      dispatch_get_specific(*v7);
      v9 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)v119 = 1024;
        *(_DWORD *)&v119[2] = 643;
        _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Marking ESE reader as disabled!", buf, 0x12u);
      }
      v6 = 1;
    }
  }
  if (*(_BYTE *)(v1 + 56))
    goto LABEL_17;
  if ((*(_BYTE *)(*(_QWORD *)(v1 + 24) + 554) & 1) != 0)
  {
    v14 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(6, "%s:%i LPCD force always OFF", "_Dispatched_NFDriverConfigureDiscovery", 664);
    dispatch_get_specific(*v14);
    v16 = NFSharedLogGetLogger();
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    v13 = 0;
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)v119 = 1024;
      *(_DWORD *)&v119[2] = 664;
      _os_log_impl(&dword_216EC7000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s:%i LPCD force always OFF", buf, 0x12u);
LABEL_17:
      v13 = 0;
    }
  }
  else
  {
    v13 = 1;
  }
  if (v3 == 3)
  {
    v109 = v13;
    v18 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v19 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v19)
      v19(6, "%s:%i Enabling multi tag polling!", "_Dispatched_NFDriverConfigureDiscovery", 671);
    dispatch_get_specific(*v18);
    v20 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)v119 = 1024;
      *(_DWORD *)&v119[2] = 671;
      _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling multi tag polling!", buf, 0x12u);
    }
    v21 = *(_QWORD *)(v1 + 24);
    v22 = *(_DWORD *)(v21 + 656) & 0x1821;
    v113 = *(unsigned __int16 *)(v21 + 700);
    if (v113 != 300)
    {
      dispatch_get_specific(*v18);
      v23 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v23)
        v23(6, "%s:%i Non-default polling period: %u", "_Dispatched_NFDriverConfigureDiscovery", 684, v113);
      dispatch_get_specific(*v18);
      v24 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446722;
        v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)v119 = 1024;
        *(_DWORD *)&v119[2] = 684;
        *(_WORD *)&v119[6] = 1024;
        *(_DWORD *)&v119[8] = v113;
        _os_log_impl(&dword_216EC7000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Non-default polling period: %u", buf, 0x18u);
      }
    }
    v25 = v22 | 0x40000;
    dispatch_get_specific(*v18);
    v26 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v26)
      v26(6, "%s:%i Enabling automatic multi-tag polling", "_Dispatched_NFDriverConfigureDiscovery", 688);
    dispatch_get_specific(*v18);
    v27 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)v119 = 1024;
      *(_DWORD *)&v119[2] = 688;
      _os_log_impl(&dword_216EC7000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling automatic multi-tag polling", buf, 0x12u);
    }
    v108 = 0;
    v28 = 1;
  }
  else if (v3)
  {
    v29 = (const void **)MEMORY[0x24BEDCDB0];
    if ((*(_BYTE *)(*(_QWORD *)(v1 + 24) + 553) & 0x10) != 0)
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30)
        v30(6, "%s:%i LPCD force always ON", "_Dispatched_NFDriverConfigureDiscovery", 697);
      dispatch_get_specific(*v29);
      v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)v119 = 1024;
        *(_DWORD *)&v119[2] = 697;
        _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_DEFAULT, "%{public}s:%i LPCD force always ON", buf, 0x12u);
      }
      v13 = 1;
    }
    else if (v3 == 1)
    {
      v13 = 0;
    }
    if (v5 == 1 || v5 == 2 && *(_BYTE *)(v1 + 62))
    {
      dispatch_get_specific(*v29);
      v32 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v32)
        v32(6, "%s:%i ESE reader as config set (%d / %d)!", "_Dispatched_NFDriverConfigureDiscovery", 706, *(unsigned __int8 *)(v1 + 62), v5);
      dispatch_get_specific(*v29);
      v33 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(unsigned __int8 *)(v1 + 62);
        *(_DWORD *)buf = 136446978;
        v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)v119 = 1024;
        *(_DWORD *)&v119[2] = 706;
        *(_WORD *)&v119[6] = 1024;
        *(_DWORD *)&v119[8] = v34;
        *(_WORD *)&v119[12] = 1024;
        *(_DWORD *)&v119[14] = v5;
        _os_log_impl(&dword_216EC7000, v33, OS_LOG_TYPE_DEFAULT, "%{public}s:%i ESE reader as config set (%d / %d)!", buf, 0x1Eu);
      }
      v108 = 0;
      v109 = 0;
      v113 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 700);
      v25 = 262179;
    }
    else
    {
      v109 = v13;
      v35 = *(_QWORD *)(v1 + 24);
      v36 = *(_DWORD *)(v35 + 656) & 0x3983F;
      v108 = *(_BYTE *)(v35 + 725);
      if (v108)
      {
        dispatch_get_specific(*v29);
        v37 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v37)
          v37(6, "%s:%i Frame RF INTF activated", "_Dispatched_NFDriverConfigureDiscovery", 739);
        dispatch_get_specific(*v29);
        v38 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 739;
          _os_log_impl(&dword_216EC7000, v38, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Frame RF INTF activated", buf, 0x12u);
        }
        v25 = v36 | 0x40002;
        v35 = *(_QWORD *)(v1 + 24);
      }
      else
      {
        v25 = v36 | 0x40000;
      }
      v39 = *(_DWORD *)(v35 + 696);
      if (!v39)
        LOWORD(v39) = *(_WORD *)(v35 + 700);
      LOWORD(v113) = v39;
      v40 = (unsigned __int16)v39;
      if ((unsigned __int16)v39 != 300)
      {
        dispatch_get_specific(*v29);
        v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v41)
          v41(6, "%s:%i Non-default polling period: %u", "_Dispatched_NFDriverConfigureDiscovery", 750, v40);
        dispatch_get_specific(*v29);
        v42 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446722;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 750;
          *(_WORD *)&v119[6] = 1024;
          *(_DWORD *)&v119[8] = v40;
          _os_log_impl(&dword_216EC7000, v42, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Non-default polling period: %u", buf, 0x18u);
        }
      }
    }
    v43 = phLibNfc_RemoteDev_NtfRegister();
    if (v43)
    {
      v44 = v43;
      dispatch_get_specific(*v29);
      v45 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v45)
        v45(3, "%s:%i status=0x%04X", "_Dispatched_NFDriverConfigureDiscovery", 775, v44);
      dispatch_get_specific(*v29);
      v46 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)v119 = 1024;
        *(_DWORD *)&v119[2] = 775;
        *(_WORD *)&v119[6] = 1024;
        *(_DWORD *)&v119[8] = v44;
        _os_log_impl(&dword_216EC7000, v46, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
      sub_216EE0DE8(v2, v44);
    }
    v28 = 0;
  }
  else
  {
    v108 = 0;
    v109 = v13;
    LOWORD(v113) = 0;
    v28 = 0;
    v25 = 0x40000;
  }
  v111 = v4;
  v112 = v6;
  v114 = v3;
  v110 = v28;
  if (v4)
  {
    v25 &= 0x3FFFFu;
    v47 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 552);
    switch(((unint64_t)(v47 & 0x160) - 32) >> 5)
    {
      case 0uLL:
        v48 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v49 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v49)
          v49(4, "%s:%i Type-A only", "_Dispatched_NFDriverConfigureDiscovery", 786);
        dispatch_get_specific(*v48);
        v50 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 786;
          _os_log_impl(&dword_216EC7000, v50, OS_LOG_TYPE_ERROR, "%{public}s:%i Type-A only", buf, 0x12u);
        }
        v51 = 1;
        goto LABEL_124;
      case 1uLL:
        v52 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v53 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v53)
          v53(4, "%s:%i Type-B only", "_Dispatched_NFDriverConfigureDiscovery", 790);
        dispatch_get_specific(*v52);
        v54 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 790;
          _os_log_impl(&dword_216EC7000, v54, OS_LOG_TYPE_ERROR, "%{public}s:%i Type-B only", buf, 0x12u);
        }
        v51 = 2;
        goto LABEL_124;
      case 2uLL:
        v62 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v63 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v63)
          v63(4, "%s:%i Types-AB only", "_Dispatched_NFDriverConfigureDiscovery", 798);
        dispatch_get_specific(*v62);
        v64 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 798;
          _os_log_impl(&dword_216EC7000, v64, OS_LOG_TYPE_ERROR, "%{public}s:%i Types-AB only", buf, 0x12u);
        }
        v51 = 3;
        goto LABEL_124;
      case 7uLL:
        v65 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v66 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v66)
          v66(4, "%s:%i Type-F only", "_Dispatched_NFDriverConfigureDiscovery", 794);
        dispatch_get_specific(*v65);
        v67 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 794;
          _os_log_impl(&dword_216EC7000, v67, OS_LOG_TYPE_ERROR, "%{public}s:%i Type-F only", buf, 0x12u);
        }
        v51 = 4;
        goto LABEL_124;
      case 8uLL:
        v68 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v69 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v69)
          v69(4, "%s:%i Types-AF only", "_Dispatched_NFDriverConfigureDiscovery", 802);
        dispatch_get_specific(*v68);
        v70 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 802;
          _os_log_impl(&dword_216EC7000, v70, OS_LOG_TYPE_ERROR, "%{public}s:%i Types-AF only", buf, 0x12u);
        }
        v51 = 5;
        goto LABEL_124;
      case 9uLL:
        v59 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v60 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v60)
          v60(4, "%s:%i Types-BF only", "_Dispatched_NFDriverConfigureDiscovery", 806);
        dispatch_get_specific(*v59);
        v61 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 806;
          _os_log_impl(&dword_216EC7000, v61, OS_LOG_TYPE_ERROR, "%{public}s:%i Types-BF only", buf, 0x12u);
        }
        v51 = 6;
        goto LABEL_124;
      case 0xAuLL:
        v71 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v72 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v72)
          v72(4, "%s:%i Types-ABF only", "_Dispatched_NFDriverConfigureDiscovery", 810);
        dispatch_get_specific(*v71);
        v73 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 810;
          _os_log_impl(&dword_216EC7000, v73, OS_LOG_TYPE_ERROR, "%{public}s:%i Types-ABF only", buf, 0x12u);
        }
        v51 = 15;
LABEL_124:
        v107 = v51;
        goto LABEL_125;
      default:
        v55 = v4 & 1;
        if ((v4 & 2) != 0)
        {
          if ((v47 & 0x100000000) != 0 || !*(_BYTE *)(v1 + 59))
          {
            v55 |= 2u;
          }
          else
          {
            v56 = (const void **)MEMORY[0x24BEDCDB0];
            dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
            v57 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
            if (v57)
              v57(6, "%s:%i Type-B disabled", "_Dispatched_NFDriverConfigureDiscovery", 820);
            dispatch_get_specific(*v56);
            v58 = NFSharedLogGetLogger();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136446466;
              v118 = "_Dispatched_NFDriverConfigureDiscovery";
              *(_WORD *)v119 = 1024;
              *(_DWORD *)&v119[2] = 820;
              _os_log_impl(&dword_216EC7000, v58, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Type-B disabled", buf, 0x12u);
            }
          }
        }
        v74 = v115;
        v107 = v55 | v4 & 4;
        goto LABEL_126;
    }
  }
  v107 = 0;
LABEL_125:
  v74 = v115;
LABEL_126:
  if (v74)
    v75 = v25 | 0x80000;
  else
    v75 = v25;
  isFeatureSupported = NF_isFeatureSupported();
  v77 = 0;
  if (v116 && isFeatureSupported)
  {
    v78 = *(_BYTE *)(*(_QWORD *)(v1 + 24) + 660);
    if (*(_BYTE *)(v1 + 63))
    {
      if ((*(_BYTE *)(*(_QWORD *)(v1 + 24) + 660) & 8) != 0)
      {
        v80 = v78 & 8;
        v75 &= 0x7FFFFu;
        v81 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v82 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v82)
          v82(5, "%s:%i Disabling field detection for Single Poll express", "_Dispatched_NFDriverConfigureDiscovery", 848);
        dispatch_get_specific(*v81);
        v83 = NFSharedLogGetLogger();
        v79 = v2;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v118 = "_Dispatched_NFDriverConfigureDiscovery";
          *(_WORD *)v119 = 1024;
          *(_DWORD *)&v119[2] = 848;
          _os_log_impl(&dword_216EC7000, v83, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Disabling field detection for Single Poll express", buf, 0x12u);
        }
      }
      else
      {
        v79 = v2;
        v80 = v78 & 0xF;
      }
    }
    else
    {
      v79 = v2;
      v80 = v78 & 7;
    }
    v84 = *(_QWORD *)(v1 + 24);
    if ((*(_QWORD *)(v84 + 552) & 0x400) != 0)
      v85 = 16;
    else
      v85 = *(_BYTE *)(v84 + 660) & 0x10;
    v77 = v85 | v80;
    v86 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v87 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    v88 = v85 >> 4;
    if (v87)
      v87(6, "%s:%i Enabling express: transit=%d vas=%d generic-a=%d single_poll=%d debug=%d block=%d ", "_Dispatched_NFDriverConfigureDiscovery", 868, v80 & 1, (v80 >> 1) & 1, (v80 >> 2) & 1, v80 >> 3, v88, 0);
    dispatch_get_specific(*v86);
    v89 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136448002;
      v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)v119 = 1024;
      *(_DWORD *)&v119[2] = 868;
      *(_WORD *)&v119[6] = 1024;
      *(_DWORD *)&v119[8] = v80 & 1;
      *(_WORD *)&v119[12] = 1024;
      *(_DWORD *)&v119[14] = (v80 >> 1) & 1;
      *(_WORD *)&v119[18] = 1024;
      *(_DWORD *)&v119[20] = (v80 >> 2) & 1;
      *(_WORD *)&v119[24] = 1024;
      *(_DWORD *)&v119[26] = v80 >> 3;
      *(_WORD *)&v119[30] = 1024;
      *(_DWORD *)&v119[32] = v88;
      *(_WORD *)&v119[36] = 1024;
      *(_DWORD *)&v119[38] = 0;
      _os_log_impl(&dword_216EC7000, v89, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Enabling express: transit=%d vas=%d generic-a=%d single_poll=%d debug=%d block=%d ", buf, 0x36u);
    }
    v2 = v79;
    v74 = v115;
  }
  if (NF_isFeatureSupported())
  {
    if (!(v111 | v116 | v74))
      goto LABEL_154;
  }
  else if (!(v111 | v74))
  {
    goto LABEL_154;
  }
  v90 = *(_QWORD *)(v1 + 24);
  if (*(_DWORD *)(v90 + 564))
  {
    v91 = *(_QWORD *)(v90 + 552);
    if ((v91 & 0x2000000) == 0)
    {
      v92 = (v91 >> 20) & 1;
      v93 = 1;
      goto LABEL_155;
    }
  }
LABEL_154:
  v93 = 0;
  LOBYTE(v92) = 0;
LABEL_155:
  if (!*(_BYTE *)(v1 + 65))
  {
LABEL_161:
    if (v114 == 3)
    {
      v97 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v98 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v98)
        v98(6, "%s:%i Changing config mode to MULTI_TAG", "_Dispatched_NFDriverConfigureDiscovery", 913);
      dispatch_get_specific(*v97);
      v99 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v118 = "_Dispatched_NFDriverConfigureDiscovery";
        *(_WORD *)v119 = 1024;
        *(_DWORD *)&v119[2] = 913;
        _os_log_impl(&dword_216EC7000, v99, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Changing config mode to MULTI_TAG", buf, 0x12u);
      }
      v100 = 0;
    }
    else
    {
      v100 = 0;
    }
    goto LABEL_173;
  }
  v94 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v95 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v114)
  {
    if (v95)
      v95(4, "%s:%i Full HCE can't be used with polling", "_Dispatched_NFDriverConfigureDiscovery", 907);
    dispatch_get_specific(*v94);
    v96 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)v119 = 1024;
      *(_DWORD *)&v119[2] = 907;
      _os_log_impl(&dword_216EC7000, v96, OS_LOG_TYPE_ERROR, "%{public}s:%i Full HCE can't be used with polling", buf, 0x12u);
    }
    goto LABEL_161;
  }
  if (v95)
    v95(6, "%s:%i Forcing full hce routing", "_Dispatched_NFDriverConfigureDiscovery", 903);
  dispatch_get_specific(*v94);
  v101 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446466;
    v118 = "_Dispatched_NFDriverConfigureDiscovery";
    *(_WORD *)v119 = 1024;
    *(_DWORD *)&v119[2] = 903;
    _os_log_impl(&dword_216EC7000, v101, OS_LOG_TYPE_DEFAULT, "%{public}s:%i Forcing full hce routing", buf, 0x12u);
  }
  v100 = 1;
LABEL_173:
  *(_OWORD *)&v119[17] = v133;
  *(_OWORD *)&v119[33] = v134;
  *(_OWORD *)v120 = *(_OWORD *)v135;
  *(_DWORD *)buf = v75;
  LOWORD(v118) = v113;
  WORD1(v118) = 256;
  BYTE4(v118) = 0;
  BYTE5(v118) = v107;
  HIWORD(v118) = 0;
  v119[0] = v77;
  *(_DWORD *)&v120[15] = *(_DWORD *)&v135[15];
  *(_OWORD *)&v119[1] = v132;
  v121 = v109;
  v122 = 0;
  v123 = 0;
  v124 = v93;
  v125 = v92;
  v126 = v110;
  v127 = 0;
  v128 = v112;
  v129 = v108;
  v130 = v100;
  v131 = 0;
  v102 = phLibNfc_Mgt_ConfigureDiscovery();
  if (v102 != 13)
  {
    v103 = v102;
    v104 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v105 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v105)
      v105(3, "%s:%i status=0x%04X", "_Dispatched_NFDriverConfigureDiscovery", 925, v103);
    dispatch_get_specific(*v104);
    v106 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v118 = "_Dispatched_NFDriverConfigureDiscovery";
      *(_WORD *)v119 = 1024;
      *(_DWORD *)&v119[2] = 925;
      *(_WORD *)&v119[6] = 1024;
      *(_DWORD *)&v119[8] = v103;
      _os_log_impl(&dword_216EC7000, v106, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(v2, v103);
    sub_216EE0D6C(v2);
  }
}

void sub_216F044B4(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

void sub_216F044E0(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_ConfigRoutingTable();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverConfigRoutingTable_block_invoke", 3467, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverConfigRoutingTable_block_invoke";
      v9 = 1024;
      v10 = 3467;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 48), v3);
    sub_216EE0D6C(*(void ***)(a1 + 48));
  }
}

void sub_216F04620(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

void sub_216F0464C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  int *v7;
  int v8;
  int v9;
  const char *MwVersionStr;
  const void **v11;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint32_t v17;
  NSObject *v18;
  unsigned int v19;
  void (*v20)(uint64_t, const char *, ...);
  NSObject *v21;
  _QWORD v22[2];
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  v3 = (unint64_t)sub_216F049C0 & ((uint64_t)(*(_QWORD *)(v2 + 552) << 61) >> 63);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22[1] = v3;
  v23 = 0;
  v22[0] = *(_QWORD *)(v2 + 528);
  v4 = NFIsRestoreOS();
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if ((v4 & 1) != 0)
    LOBYTE(v6) = 1;
  else
    v6 = (*(unsigned __int8 *)(v5 + 554) >> 5) & 1;
  LOBYTE(v23) = v6;
  BYTE1(v23) = *(_BYTE *)(v5 + 724);
  if (NFIsInternalBuild() && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 555) & 4) != 0
    || !NFHardwareHasFollowerReset())
  {
    HIDWORD(v28) = 0;
    BYTE2(v23) = 0;
  }
  else
  {
    HIDWORD(v28) = 1;
    BYTE2(v23) = 1;
  }
  *(_QWORD *)&v27 = v22;
  *((_QWORD *)&v27 + 1) = v22;
  DWORD2(v25) = 0;
  v7 = *(int **)(a1 + 32);
  v8 = *v7;
  if (*v7 == 3)
  {
    v26 = *(_OWORD *)(v7 + 2);
    v9 = 6;
  }
  else
  {
    *(_QWORD *)&v25 = *((_QWORD *)v7 + 1);
    if (v8 == 2)
      v9 = 7;
    else
      v9 = 1;
  }
  DWORD2(v24) = v9;
  if (*((_BYTE *)v7 + 56))
    DWORD2(v25) = 1;
  MwVersionStr = (const char *)phLibNfc_Mgt_GetMwVersionStr();
  v11 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (MwVersionStr)
  {
    if (Logger)
      Logger(6, "%s:%i %s", "_Async_NFDriverOpen_block_invoke", 340, MwVersionStr);
    dispatch_get_specific(*v11);
    v13 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446722;
      v30 = "_Async_NFDriverOpen_block_invoke";
      v31 = 1024;
      v32 = 340;
      v33 = 2080;
      v34 = MwVersionStr;
      v14 = "%{public}s:%i %s";
      v15 = v13;
      v16 = OS_LOG_TYPE_DEFAULT;
      v17 = 28;
LABEL_25:
      _os_log_impl(&dword_216EC7000, v15, v16, v14, buf, v17);
    }
  }
  else
  {
    if (Logger)
      Logger(3, "%s:%i MW Version is NULL?", "_Async_NFDriverOpen_block_invoke", 342);
    dispatch_get_specific(*v11);
    v18 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v30 = "_Async_NFDriverOpen_block_invoke";
      v31 = 1024;
      v32 = 342;
      v14 = "%{public}s:%i MW Version is NULL?";
      v15 = v18;
      v16 = OS_LOG_TYPE_ERROR;
      v17 = 18;
      goto LABEL_25;
    }
  }
  v19 = phLibNfc_Mgt_ConfigureDriver();
  if (v19)
  {
    dispatch_get_specific(*v11);
    v20 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v20)
      v20(3, "%s:%i status=0x%04X", "_Async_NFDriverOpen_block_invoke", 349, v19);
    dispatch_get_specific(*v11);
    v21 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v30 = "_Async_NFDriverOpen_block_invoke";
      v31 = 1024;
      v32 = 349;
      v33 = 1024;
      LODWORD(v34) = v19;
      _os_log_impl(&dword_216EC7000, v21, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  sub_216EE0DE8(*(_QWORD **)(a1 + 40), v19);
  sub_216EE0D6C(*(void ***)(a1 + 40));
}

uint64_t sub_216F049C0()
{
  return NFSharedLogTransport();
}

void sub_216F049EC(uint64_t a1)
{
  unsigned int v2;
  const void **v3;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_UnConfigureDriver();
  if (v2)
  {
    v3 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverClose_block_invoke", 369, v2);
    dispatch_get_specific(*v3);
    v5 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v7 = "_Async_NFDriverClose_block_invoke";
      v8 = 1024;
      v9 = 369;
      v10 = 1024;
      v11 = v2;
      _os_log_impl(&dword_216EC7000, v5, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  sub_216EE0DE8(*(_QWORD **)(a1 + 40), v2);
  sub_216EE0D6C(*(void ***)(a1 + 40));
}

void sub_216F04B18(uint64_t a1)
{
  unsigned int FwVersion;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  FwVersion = phLibNfc_Mgt_GetFwVersion();
  if (FwVersion != 13)
  {
    v3 = FwVersion;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverGetFirmwareVersion_block_invoke", 407, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverGetFirmwareVersion_block_invoke";
      v9 = 1024;
      v10 = 407;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 48), v3);
    sub_216EE0D6C(*(void ***)(a1 + 48));
  }
}

void sub_216F04C54(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  sub_216EE0DE8(a2, a4);
  sub_216EE0D6C(a2);
}

BOOL sub_216F04C80(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v6;
  const void **v7;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  void (*v13)(uint64_t, const char *, ...);
  NSObject *v14;
  _BOOL8 result;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  const char *v20;
  void (*v21)(uint64_t, const char *, ...);
  NSObject *v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  void (*v28)(uint64_t, const char *, ...);
  NSObject *v29;
  void (*v30)(uint64_t, const char *, ...);
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  __int16 v35;
  void (*v36)(uint64_t, const char *, ...);
  NSObject *v37;
  uint64_t v38;
  BOOL v39;
  NSObject *v40;
  void (*v41)(uint64_t, const char *, ...);
  NSObject *v42;
  __int16 v43;
  _BYTE buf[40];
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t v48;

  v3 = a3;
  v48 = *MEMORY[0x24BDAC8D0];
  v6 = a2 - 1;
  if (a2 != 1 && a3 == 3)
  {
    v7 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i phLibNfc_SE_ActModePwrOff is only available on ese - switching to ActModeOff", "_NFDriverSetSEMode", 3884);
    dispatch_get_specific(*v7);
    v9 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "_NFDriverSetSEMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3884;
      _os_log_impl(&dword_216EC7000, v9, OS_LOG_TYPE_ERROR, "%{public}s:%i phLibNfc_SE_ActModePwrOff is only available on ese - switching to ActModeOff", buf, 0x12u);
    }
    v3 = 1;
  }
  v10 = sub_216EF7660(a1, a2);
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  if (a2 == 4 || v11)
  {
    if (v6 > 7)
      v19 = "UNKNOWN";
    else
      v19 = (&off_24D65F870)[v6];
    if (v3 > 3)
      v20 = "UNKNOWN";
    else
      v20 = (&off_24D65F8B0)[v3];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v21 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v21)
      v21(6, "%s:%i (%s) mode=%s", "_NFDriverSetSEMode", 3919, v19, v20);
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v22 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "_NFDriverSetSEMode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3919;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = v19;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v20;
      _os_log_impl(&dword_216EC7000, v22, OS_LOG_TYPE_DEFAULT, "%{public}s:%i (%s) mode=%s", buf, 0x26u);
    }
    v23 = 1;
    while (1)
    {
      sub_216EE4B88(a1);
      v24 = sub_216EE0A24();
      pthread_mutex_lock((pthread_mutex_t *)(v24[2] + 8));
      v25 = v24[2];
      ++*(_QWORD *)v25;
      pthread_mutex_unlock((pthread_mutex_t *)(v25 + 8));
      v26 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = sub_216F05428;
      *(_QWORD *)&buf[24] = &unk_24D65F730;
      *(_QWORD *)&buf[32] = a1;
      v45 = v11;
      v47 = v3;
      v46 = v24;
      dispatch_async_and_wait(v26, buf);
      v27 = sub_216EE0ECC(v24);
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 24) + 520));
      if (!v27)
      {
        sub_216EE0D6C((void **)v24);
        return 1;
      }
      if (*v24 != 67)
        break;
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v28 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v28)
        v28(3, "%s:%i eSE power-on failed! (%d/%d)", "_NFDriverSetSEMode", 3930, v23, 3);
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v29 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "_NFDriverSetSEMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3930;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v23;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = 3;
        _os_log_impl(&dword_216EC7000, v29, OS_LOG_TYPE_ERROR, "%{public}s:%i eSE power-on failed! (%d/%d)", buf, 0x1Eu);
      }
      sub_216EE0D6C((void **)v24);
      if (++v23 == 4)
        return 0;
    }
    if (*v24 == 147)
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v30 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v30)
        v30(3, "%s:%i status=0x%04llX", "_NFDriverSetSEMode", 3938, *v24);
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v31 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v32 = *v24;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverSetSEMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3938;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v32;
        _os_log_impl(&dword_216EC7000, v31, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      sub_216EE0D6C((void **)v24);
      v33 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = sub_216EE4564;
      *(_QWORD *)&buf[24] = &unk_24D65ED38;
      *(_QWORD *)&buf[32] = a1;
      dispatch_async(v33, buf);
      usleep(0x7A120u);
      v34 = a1;
      v35 = -8529;
    }
    else
    {
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v36 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v36)
        v36(3, "%s:%i status=0x%04llX", "_NFDriverSetSEMode", 3946, *v24);
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v37 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = *v24;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "_NFDriverSetSEMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3946;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v38;
        _os_log_impl(&dword_216EC7000, v37, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04llX", buf, 0x1Cu);
      }
      sub_216EE0D6C((void **)v24);
      v43 = 0;
      v39 = sub_216EE9DA0(a1, 0, 0, 0, &v43, 0);
      v40 = *(NSObject **)(*(_QWORD *)(a1 + 24) + 528);
      *(_QWORD *)buf = MEMORY[0x24BDAC760];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = sub_216EE4564;
      *(_QWORD *)&buf[24] = &unk_24D65ED38;
      *(_QWORD *)&buf[32] = a1;
      dispatch_async(v40, buf);
      if (!v39)
      {
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v41 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (v41)
          v41(5, "%s:%i Get stack breadcrumb failed", "_NFDriverSetSEMode", 3953);
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        v42 = NFSharedLogGetLogger();
        if (!os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          return 0;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "_NFDriverSetSEMode";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3953;
        v16 = "%{public}s:%i Get stack breadcrumb failed";
        v17 = v42;
        v18 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_18;
      }
      if (v43 != 44 && v43 != 34)
        return 0;
      v34 = a1;
      v35 = -8531;
    }
    NFDriverSimulateCrash(v34, v35);
    return 0;
  }
  if (v3 == 1)
    return 1;
  v12 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  v13 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (v13)
    v13(3, "%s:%i No SE handle", "_NFDriverSetSEMode", 3891);
  dispatch_get_specific(*v12);
  v14 = NFSharedLogGetLogger();
  result = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  if (result)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "_NFDriverSetSEMode";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3891;
    v16 = "%{public}s:%i No SE handle";
    v17 = v14;
    v18 = OS_LOG_TYPE_ERROR;
LABEL_18:
    _os_log_impl(&dword_216EC7000, v17, v18, v16, buf, 0x12u);
    return 0;
  }
  return result;
}

void sub_216F05428(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_SE_SetMode();
  v3 = v2;
  if (v2)
  {
    if (v2 == 13)
      return;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetSEMode_block_invoke", 3278, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverSetSEMode_block_invoke";
      v9 = 1024;
      v10 = 3278;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  sub_216EE0DE8(*(_QWORD **)(a1 + 48), v3);
  sub_216EE0D6C(*(void ***)(a1 + 48));
}

void sub_216F0556C(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  sub_216EE0DE8(a2, a5);
  sub_216EE0D6C(a2);
}

void sub_216F05598(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_eSeSvddControl();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetSEAlwaysOn_block_invoke", 3312, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverSetSEAlwaysOn_block_invoke";
      v9 = 1024;
      v10 = 3312;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216F056D4(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

void sub_216F05700(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_ConfigurePowerMode();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetStandbyMode_block_invoke", 984, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverSetStandbyMode_block_invoke";
      v9 = 1024;
      v10 = 984;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v3);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216F0583C(uint64_t a1, void **a2, unsigned int a3)
{
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

void sub_216F05868(uint64_t a1)
{
  unsigned int Atr;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  Atr = phLibNfc_eSE_GetAtr();
  if (Atr != 13)
  {
    v3 = Atr;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSEGetATR_block_invoke", 3242, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverSEGetATR_block_invoke";
      v9 = 1024;
      v10 = 3242;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 56), v3);
    sub_216EE0D6C(*(void ***)(a1 + 56));
  }
}

void sub_216F059A4(uint64_t a1, void **a2, uint64_t a3, unsigned int a4)
{
  sub_216EE0DE8(a2, a4);
  sub_216EE0D6C(a2);
}

void sub_216F059D0(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_TriggerRfFieldOnNtf();
  if (v2)
    v3 = v2 == 13;
  else
    v3 = 1;
  if (!v3)
  {
    v4 = v2;
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to setup delayed wake, status = 0x%04X", "_Async_NFDriverTriggerDelayedWake_block_invoke", 1015, v4);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v9 = "_Async_NFDriverTriggerDelayedWake_block_invoke";
      v10 = 1024;
      v11 = 1015;
      v12 = 1024;
      v13 = v4;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup delayed wake, status = 0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 40), v4);
    sub_216EE0D6C(*(void ***)(a1 + 40));
  }
}

void sub_216F05B10(uint64_t a1, void **a2, unsigned int a3)
{
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Failed to setup delayed wake, status = 0x%04X", "_Callback_NFDriverDelayedWake", 996, a3);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v9 = "_Callback_NFDriverDelayedWake";
      v10 = 1024;
      v11 = 996;
      v12 = 1024;
      v13 = a3;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Failed to setup delayed wake, status = 0x%04X", buf, 0x18u);
    }
  }
  sub_216EE0DE8(a2, a3);
  sub_216EE0D6C(a2);
}

void sub_216F05C2C(uint64_t a1)
{
  unsigned int MemoryDump;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if ((NFIsInternalBuild() & 1) == 0)
  {
    sub_216EE0DE8(*(_QWORD **)(a1 + 32), 30);
    sub_216EE0D6C(*(void ***)(a1 + 32));
    return;
  }
  MemoryDump = phLibNfc_GetMemoryDump();
  v3 = MemoryDump;
  if (MemoryDump)
  {
    if (MemoryDump == 13)
      return;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverDumpMemory_block_invoke", 1315, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverDumpMemory_block_invoke";
      v9 = 1024;
      v10 = 1315;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
  }
  sub_216EE0DE8(*(_QWORD **)(a1 + 32), v3);
  sub_216EE0D6C(*(void ***)(a1 + 32));
}

void sub_216F05DB0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v7;
  _QWORD *v8;

  if (!a4)
  {
    v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405730B0C9uLL);
    v8 = v7;
    if (v7)
    {
      *v7 = *(_QWORD *)(a3 + 8);
      v7[1] = NFDataCreateWithBytes();
    }
    **(_QWORD **)(a2 + 8) = v8;
  }
  sub_216EE0DE8((_QWORD *)a2, a4);
  sub_216EE0D6C((void **)a2);
}

void sub_216F05E38(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(*(_QWORD *)(v2 + 24) + 727) = 1;
  sub_216EF7660(v2, *(_DWORD *)(a1 + 56));
  v3 = phLibNfc_eSE_Transceive();
  if (v3 != 13)
  {
    v4 = v3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 727) = 0;
    v5 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSETransceive_block_invoke", 3437, v4);
    dispatch_get_specific(*v5);
    v7 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v9 = "_Async_NFDriverSETransceive_block_invoke";
      v10 = 1024;
      v11 = 3437;
      v12 = 1024;
      v13 = v4;
      _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 48), v4);
    sub_216EE0D6C(*(void ***)(a1 + 48));
  }
}

void sub_216F05FAC(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  _QWORD *v7;
  uint64_t v9;
  const void **v10;
  void (*v11)(uint64_t, const char *, ...);
  int v12;
  const void **v13;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (!a2 || (v7 = a2[1]) == 0)
    __assert_rtn("_Callback_NFDriverSETransceive", "NFDriver.c", 3336, "txContext != NULL");
  if (a6 == 217)
  {
    v13 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i Reset notification. Len = %d", "_Callback_NFDriverSETransceive", 3348, *(_DWORD *)(a4 + 8));
    dispatch_get_specific(*v13);
    v15 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_DWORD *)(a4 + 8);
      *(_DWORD *)buf = 136446722;
      v21 = "_Callback_NFDriverSETransceive";
      v22 = 1024;
      v23 = 3348;
      v24 = 1024;
      v25 = v16;
      _os_log_impl(&dword_216EC7000, v15, OS_LOG_TYPE_ERROR, "%{public}s:%i Reset notification. Len = %d", buf, 0x18u);
    }
    a6 = 217;
  }
  else if (!a6)
  {
    if (a4 && (v9 = *(unsigned int *)(a4 + 8), v9 > 1))
    {
      a6 = 0;
      *v7 = v9;
    }
    else
    {
      v10 = (const void **)MEMORY[0x24BEDCDB0];
      dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
      v11 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v11)
      {
        if (a4)
          v12 = *(_DWORD *)(a4 + 8);
        else
          v12 = 0;
        v11(3, "%s:%i Invalid data returned: %d", "_Callback_NFDriverSETransceive", 3340, v12);
      }
      dispatch_get_specific(*v10);
      v17 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if (a4)
          v18 = *(_DWORD *)(a4 + 8);
        else
          v18 = 0;
        *(_DWORD *)buf = 136446722;
        v21 = "_Callback_NFDriverSETransceive";
        v22 = 1024;
        v23 = 3340;
        v24 = 1024;
        v25 = v18;
        _os_log_impl(&dword_216EC7000, v17, OS_LOG_TYPE_ERROR, "%{public}s:%i Invalid data returned: %d", buf, 0x18u);
      }
      a6 = 53261;
    }
  }
  v19 = v7[2];
  if (v19)
    *(_BYTE *)(*(_QWORD *)(v19 + 24) + 727) = 0;
  sub_216EE0DE8(a2, a6);
  sub_216EE0D6C(a2);
}

void sub_216F06214(double a1, uint64_t a2, _QWORD *a3, uint64_t a4, _DWORD *a5, int a6)
{
  uint64_t v7;
  const void **v9;
  void (*v10)(uint64_t, const char *, ...);
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  const void **v15;
  void (*v16)(uint64_t, const char *, ...);
  NSObject *v17;
  const void **v18;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v20;
  uint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  if (!a3 || (v7 = a3[1]) == 0)
    __assert_rtn("_Callback_NFDriverSETransceiveWTX", "NFDriver.c", 3364, "txContext != NULL");
  if (a6 == 74)
  {
    if (a5)
    {
      if (*(_DWORD *)(v7 + 8))
      {
        LODWORD(a1) = *a5;
        sub_216EE0E38((uint64_t)a3, (double)*(unint64_t *)&a1 / 1000.0);
        --*(_DWORD *)(v7 + 8);
      }
      else
      {
        v18 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(3, "%s:%i WTX: error, too many WTX", "_Callback_NFDriverSETransceiveWTX", 3375);
        dispatch_get_specific(*v18);
        v20 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v23 = "_Callback_NFDriverSETransceiveWTX";
          v24 = 1024;
          v25 = 3375;
          _os_log_impl(&dword_216EC7000, v20, OS_LOG_TYPE_ERROR, "%{public}s:%i WTX: error, too many WTX", buf, 0x12u);
        }
        sub_216EE0DE8(a3, 44);
        v21 = *(_QWORD *)(v7 + 16);
        if (v21)
          *(_BYTE *)(*(_QWORD *)(v21 + 24) + 727) = 0;
      }
      return;
    }
    v15 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v16 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v16)
      v16(4, "%s:%i WTX: no info", "_Callback_NFDriverSETransceiveWTX", 3383);
    dispatch_get_specific(*v15);
    v17 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v23 = "_Callback_NFDriverSETransceiveWTX";
      v24 = 1024;
      v25 = 3383;
      v12 = "%{public}s:%i WTX: no info";
      v13 = v17;
      v14 = 18;
      goto LABEL_15;
    }
  }
  else
  {
    v9 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v10 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v10)
      v10(3, "%s:%i WTX: error %d", "_Callback_NFDriverSETransceiveWTX", 3387, a6);
    dispatch_get_specific(*v9);
    v11 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v23 = "_Callback_NFDriverSETransceiveWTX";
      v24 = 1024;
      v25 = 3387;
      v26 = 1024;
      v27 = a6;
      v12 = "%{public}s:%i WTX: error %d";
      v13 = v11;
      v14 = 24;
LABEL_15:
      _os_log_impl(&dword_216EC7000, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
    }
  }
}

uint64_t sub_216F064EC(uint64_t a1)
{
  const void **v2;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v4;
  int v5;
  int v6;
  _OWORD buf[9];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(6, "%s:%i setting rate: %d", "_NFDriverSetISO15693LocalDataRate_block_invoke", 4365, *(_DWORD *)(a1 + 40));
  dispatch_get_specific(*v2);
  v4 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_DWORD *)(a1 + 40);
    LODWORD(buf[0]) = 136446722;
    *(_QWORD *)((char *)buf + 4) = "_NFDriverSetISO15693LocalDataRate_block_invoke";
    WORD6(buf[0]) = 1024;
    *(_DWORD *)((char *)buf + 14) = 4365;
    WORD1(buf[1]) = 1024;
    DWORD1(buf[1]) = v5;
    _os_log_impl(&dword_216EC7000, v4, OS_LOG_TYPE_DEFAULT, "%{public}s:%i setting rate: %d", (uint8_t *)buf, 0x18u);
  }
  memset(buf, 0, sizeof(buf));
  v6 = *(_DWORD *)(a1 + 40);
  LODWORD(buf[0]) = 8;
  DWORD2(buf[0]) = v6;
  HIDWORD(buf[0]) = v6;
  return phLibNfc_Mgt_SetNfccParams();
}

void sub_216F06640(uint64_t a1)
{
  _WORD *v2;
  void *v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  unsigned int v7;
  unsigned int v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  char v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v11 = 3;
  v2 = malloc_type_calloc(1uLL, 0x30uLL, 0x1010040016340ADuLL);
  if (v2)
  {
    v3 = v2;
    *v2 = 20761;
    *((_BYTE *)v2 + 2) = 1;
    *((_DWORD *)v2 + 1) = 1;
    *((_QWORD *)v2 + 1) = &v11;
    *((_DWORD *)v2 + 4) = 2000;
    *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 40);
    v2[14] = *(_DWORD *)(a1 + 56);
    dword_253E47174 = 666;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(6, "%s:%i [C-RAW>] Soft Reset", "_Async_NFDriverHCISoftReset_block_invoke", 9430);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446466;
      v13 = "_Async_NFDriverHCISoftReset_block_invoke";
      v14 = 1024;
      v15 = 9430;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s:%i [C-RAW>] Soft Reset", buf, 0x12u);
    }
    sub_216EF7660(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 60));
    v7 = phLibNfc_SE_RawTranseive();
    if (v7 != 13)
    {
      v8 = v7;
      dispatch_get_specific(*v4);
      v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
      if (v9)
        v9(3, "%s:%i status=0x%04X", "_Async_NFDriverHCISoftReset_block_invoke", 9439, v8);
      dispatch_get_specific(*v4);
      v10 = NFSharedLogGetLogger();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v13 = "_Async_NFDriverHCISoftReset_block_invoke";
        v14 = 1024;
        v15 = 9439;
        v16 = 1024;
        v17 = v8;
        _os_log_impl(&dword_216EC7000, v10, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
      }
      sub_216EE0DE8(*(_QWORD **)(a1 + 32), v8);
      sub_216EE0D6C(*(void ***)(a1 + 32));
    }
    free(v3);
  }
  else
  {
    sub_216EE0D6C(*(void ***)(a1 + 32));
  }
}

void sub_216F068E0(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a2)
  {
    sub_216EE0DE8(a2, a5);
    sub_216EE0D6C(a2);
  }
}

void sub_216F06914(double a1, uint64_t a2, _QWORD *a3, uint64_t a4, _DWORD *a5, int a6)
{
  const void **v8;
  void (*v9)(uint64_t, const char *, ...);
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  const void **v14;
  void (*v15)(uint64_t, const char *, ...);
  NSObject *v16;
  const void **v17;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a6 == 74)
  {
    if (a5)
    {
      if (dword_253E47174)
      {
        LODWORD(a1) = *a5;
        sub_216EE0E38((uint64_t)a3, (double)*(unint64_t *)&a1 / 1000.0);
        --dword_253E47174;
      }
      else
      {
        v17 = (const void **)MEMORY[0x24BEDCDB0];
        dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
        Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
        if (Logger)
          Logger(3, "%s:%i WTX: error, too many WTX", "_Callback_NFDriverSERawTransceiveWTX", 9389);
        dispatch_get_specific(*v17);
        v19 = NFSharedLogGetLogger();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v21 = "_Callback_NFDriverSERawTransceiveWTX";
          v22 = 1024;
          v23 = 9389;
          _os_log_impl(&dword_216EC7000, v19, OS_LOG_TYPE_ERROR, "%{public}s:%i WTX: error, too many WTX", buf, 0x12u);
        }
        sub_216EE0DE8(a3, 44);
      }
      return;
    }
    v14 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v15 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v15)
      v15(4, "%s:%i WTX: no info", "_Callback_NFDriverSERawTransceiveWTX", 9394);
    dispatch_get_specific(*v14);
    v16 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v21 = "_Callback_NFDriverSERawTransceiveWTX";
      v22 = 1024;
      v23 = 9394;
      v11 = "%{public}s:%i WTX: no info";
      v12 = v16;
      v13 = 18;
      goto LABEL_13;
    }
  }
  else
  {
    v8 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    v9 = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (v9)
      v9(3, "%s:%i WTX: error %d", "_Callback_NFDriverSERawTransceiveWTX", 9398, a6);
    dispatch_get_specific(*v8);
    v10 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v21 = "_Callback_NFDriverSERawTransceiveWTX";
      v22 = 1024;
      v23 = 9398;
      v24 = 1024;
      v25 = a6;
      v11 = "%{public}s:%i WTX: error %d";
      v12 = v10;
      v13 = 24;
LABEL_13:
      _os_log_impl(&dword_216EC7000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    }
  }
}

void sub_216F06BB4(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = phLibNfc_Mgt_SetCE_ConfigParams();
  if (v2 != 13)
  {
    v3 = v2;
    v4 = (const void **)MEMORY[0x24BEDCDB0];
    dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
    Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
    if (Logger)
      Logger(3, "%s:%i status=0x%04X", "_Async_NFDriverSetCEConfigParams_block_invoke", 9755, v3);
    dispatch_get_specific(*v4);
    v6 = NFSharedLogGetLogger();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v8 = "_Async_NFDriverSetCEConfigParams_block_invoke";
      v9 = 1024;
      v10 = 9755;
      v11 = 1024;
      v12 = v3;
      _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i status=0x%04X", buf, 0x18u);
    }
    sub_216EE0DE8(*(_QWORD **)(a1 + 48), v3);
    sub_216EE0D6C(*(void ***)(a1 + 48));
  }
}

BOOL sub_216F06CF0(uint64_t a1)
{
  if (a1)
  {
    *(_QWORD *)(a1 + 32) = sub_216F06D50;
    *(_QWORD *)(a1 + 40) = sub_216F06E3C;
    *(_QWORD *)(a1 + 48) = sub_216F06F28;
    *(_QWORD *)(a1 + 56) = sub_216F07014;
    *(_QWORD *)(a1 + 64) = sub_216F07118;
    *(_QWORD *)(a1 + 72) = sub_216F07204;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_QWORD *)(a1 + 112) = 0;
    *(_DWORD *)(a1 + 20) = 5;
  }
  return a1 != 0;
}

uint64_t sub_216F06D50()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for Host SE!", "SetPower_Host", 23);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "SetPower_Host";
    v6 = 1024;
    v7 = 23;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_216F06E3C()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for Host SE!", "GetATR_Host", 29);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "GetATR_Host";
    v6 = 1024;
    v7 = 29;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_216F06F28()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for Host SE!", "GetOSInfo_Host", 35);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "GetOSInfo_Host";
    v6 = 1024;
    v7 = 35;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_216F07014(uint64_t a1, uint64_t a2)
{
  const void **v4;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v6;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for Host SE!", "GetOSMode_Host", 41);
  dispatch_get_specific(*v4);
  v6 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v9 = "GetOSMode_Host";
    v10 = 1024;
    v11 = 41;
    _os_log_impl(&dword_216EC7000, v6, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  *(_DWORD *)(a2 + 3552) = *(_DWORD *)(a1 + 20);
  return 0;
}

uint64_t sub_216F07118()
{
  const void **v0;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v2;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v0 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for Host SE!", "GetOSUpdateLog_Host", 48);
  dispatch_get_specific(*v0);
  v2 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v5 = "GetOSUpdateLog_Host";
    v6 = 1024;
    v7 = 48;
    _os_log_impl(&dword_216EC7000, v2, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  return 0;
}

uint64_t sub_216F07204(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  const void **v5;
  void (*Logger)(uint64_t, const char *, ...);
  NSObject *v7;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v5 = (const void **)MEMORY[0x24BEDCDB0];
  dispatch_get_specific((const void *)*MEMORY[0x24BEDCDB0]);
  Logger = (void (*)(uint64_t, const char *, ...))NFLogGetLogger();
  if (Logger)
    Logger(4, "%s:%i Not supported for Host SE!", "GetAttackCounterLog_Host", 54);
  dispatch_get_specific(*v5);
  v7 = NFSharedLogGetLogger();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v10 = "GetAttackCounterLog_Host";
    v11 = 1024;
    v12 = 54;
    _os_log_impl(&dword_216EC7000, v7, OS_LOG_TYPE_ERROR, "%{public}s:%i Not supported for Host SE!", buf, 0x12u);
  }
  if (a3)
    *a3 = 0;
  if (a2)
    *a2 = 0;
  return 0;
}

uint64_t AMFDRCreateInstanceString()
{
  return MEMORY[0x24BED4140]();
}

uint64_t AMFDRCreateTypeWithOptions()
{
  return MEMORY[0x24BED4150]();
}

uint64_t AMFDRCreateWithOptions()
{
  return MEMORY[0x24BED4158]();
}

uint64_t AMFDRDataApTicketCopyObjectProperty()
{
  return MEMORY[0x24BED4160]();
}

uint64_t AMFDRDataApTicketPopulate()
{
  return MEMORY[0x24BED4168]();
}

uint64_t AMFDRDataCopy()
{
  return MEMORY[0x24BED4178]();
}

uint64_t AMFDRDataCopyTrustObject()
{
  return MEMORY[0x24BED4198]();
}

uint64_t AMFDRSealingMapCopyInstanceForClass()
{
  return MEMORY[0x24BED4318]();
}

uint64_t AMFDRSealingMapCopyManifestProperties()
{
  return MEMORY[0x24BED4340]();
}

uint64_t AMFDRSealingMapVerifySealing()
{
  return MEMORY[0x24BED4398]();
}

uint64_t AMFDRSetOption()
{
  return MEMORY[0x24BED43A8]();
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x24BDBB7E8](theArray, range.location, range.length, value);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x24BDBBCE8](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBDB0](theDict, key, value);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x24BDBBE70](err);
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x24BDBBE88](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x24BDBBE90](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x24BDBBE98](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1E8](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x24BDBC4A8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x24BDBC4B0](theString, cStr, *(_QWORD *)&encoding);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4D0](theString1, theString2, compareOptions);
}

CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC4E0](theString1, theString2, rangeToCompare.location, rangeToCompare.length, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x24BDBC520](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC538](alloc, maxLength);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x24BDBC598](alloc, formatOptions, format);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x24BDBC868](allocator, URLString, baseURL);
}

uint64_t GetElapsedTimeInMillisecondsFromMachTime()
{
  return MEMORY[0x24BEDCC60]();
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x24BDD86F8](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x24BDD88B0](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x24BDD8988](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89A8](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDD89B0](name);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGIsDeviceOneOfType()
{
  return MEMORY[0x24BED84C0]();
}

uint64_t NFCalibrationCopyAntennaName()
{
  return MEMORY[0x24BED8890]();
}

uint64_t NFCalibrationGetRFConfigTLVs()
{
  return MEMORY[0x24BED8898]();
}

uint64_t NFDataAppend()
{
  return MEMORY[0x24BEDCC70]();
}

uint64_t NFDataAsHexString()
{
  return MEMORY[0x24BEDCC78]();
}

uint64_t NFDataCreateWithBytes()
{
  return MEMORY[0x24BEDCC80]();
}

uint64_t NFDataCreateWithBytesNoCopy()
{
  return MEMORY[0x24BEDCC88]();
}

uint64_t NFDataCreateWithHexString()
{
  return MEMORY[0x24BEDCC98]();
}

uint64_t NFDataCreateWithLength()
{
  return MEMORY[0x24BEDCCA0]();
}

uint64_t NFDataPrintAsHexString()
{
  return MEMORY[0x24BEDCCA8]();
}

uint64_t NFDataRelease()
{
  return MEMORY[0x24BEDCCB0]();
}

uint64_t NFGetProductType()
{
  return MEMORY[0x24BEDCCB8]();
}

uint64_t NFHardwareHasFollowerReset()
{
  return MEMORY[0x24BED88A0]();
}

uint64_t NFHardwareHasVirtualGPIO()
{
  return MEMORY[0x24BED88A8]();
}

uint64_t NFHardwareInterfaceGetType()
{
  return MEMORY[0x24BED88B0]();
}

uint64_t NFHardwareInterfaceIsHammerfestAlive()
{
  return MEMORY[0x24BED88B8]();
}

uint64_t NFHardwareSerialDebugLastMessage()
{
  return MEMORY[0x24BED88C0]();
}

uint64_t NFHardwareSerialDump()
{
  return MEMORY[0x24BED88C8]();
}

uint64_t NFHardwareSupportedSecureTimersInOff()
{
  return MEMORY[0x24BED88D0]();
}

uint64_t NFIsInternalBuild()
{
  return MEMORY[0x24BEDCCC0]();
}

uint64_t NFIsRestoreOS()
{
  return MEMORY[0x24BEDCCC8]();
}

uint64_t NFLogGetLogger()
{
  return MEMORY[0x24BEDCCD0]();
}

uint64_t NFProductAllowsWiredInDLMode()
{
  return MEMORY[0x24BEDCCE0]();
}

uint64_t NFProductHasNFCRadio()
{
  return MEMORY[0x24BEDCCE8]();
}

uint64_t NFProductHasThermistor()
{
  return MEMORY[0x24BEDCCF0]();
}

uint64_t NFProductIsDevBoard()
{
  return MEMORY[0x24BEDCCF8]();
}

uint64_t NFProductIsWatch()
{
  return MEMORY[0x24BEDCD18]();
}

uint64_t NFSharedLogGetLogger()
{
  return MEMORY[0x24BEDCD28]();
}

uint64_t NFSharedLogTransport()
{
  return MEMORY[0x24BEDCD30]();
}

uint64_t NFSharedSignpostLog()
{
  return MEMORY[0x24BEDCD40]();
}

uint64_t NFSimulateCrash()
{
  return MEMORY[0x24BEDCD48]();
}

uint64_t NF_isFeatureSupported()
{
  return MEMORY[0x24BEDCD50]();
}

uint64_t TLVCreateWithData()
{
  return MEMORY[0x24BEDCD98]();
}

uint64_t TLVCreateWithDataMixed()
{
  return MEMORY[0x24BEDCDA0]();
}

uint64_t TLVRelease()
{
  return MEMORY[0x24BEDCDA8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x24BDAC7D0]();
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x24BDAC848]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x24BDAC8B8](a1, *(_QWORD *)&a2, a3, a4);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x24BDAD9B8](*(_QWORD *)&__clock_id, __tp);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x24BDADC58](object);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC8](queue, block);
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCE0](queue, block);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x24BDADDB0](key);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x24BDADF00](queue, key, context, destructor);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x24BDADF10](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x24BDADF30](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x24BDADF38](dsema, timeout);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x24BDAE018](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x24BDAE048]();
}

void exit(int a1)
{
  MEMORY[0x24BDAE268](*(_QWORD *)&a1);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x24BDAE958]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

uint64_t mach_continuous_time(void)
{
  return MEMORY[0x24BDAEB48]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED88](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

uint64_t phLibNfc_AntennaSelfTest()
{
  return MEMORY[0x24BED86F0]();
}

uint64_t phLibNfc_CardEmulation_NtfRegister()
{
  return MEMORY[0x24BED86F8]();
}

uint64_t phLibNfc_ConvertToReadOnlyNdef()
{
  return MEMORY[0x24BED8700]();
}

uint64_t phLibNfc_GetMemoryDump()
{
  return MEMORY[0x24BED8708]();
}

uint64_t phLibNfc_GetTagInfo()
{
  return MEMORY[0x24BED8710]();
}

uint64_t phLibNfc_Mgt_ConfigRoutingTable()
{
  return MEMORY[0x24BED8718]();
}

uint64_t phLibNfc_Mgt_ConfigureDiscovery()
{
  return MEMORY[0x24BED8720]();
}

uint64_t phLibNfc_Mgt_ConfigureDriver()
{
  return MEMORY[0x24BED8728]();
}

uint64_t phLibNfc_Mgt_ConfigureHsuParams()
{
  return MEMORY[0x24BED8730]();
}

uint64_t phLibNfc_Mgt_ConfigureLogging()
{
  return MEMORY[0x24BED8738]();
}

uint64_t phLibNfc_Mgt_ConfigureMwLogging()
{
  return MEMORY[0x24BED8740]();
}

uint64_t phLibNfc_Mgt_ConfigurePowerMode()
{
  return MEMORY[0x24BED8748]();
}

uint64_t phLibNfc_Mgt_DeInitialize()
{
  return MEMORY[0x24BED8750]();
}

uint64_t phLibNfc_Mgt_DnldGeneralNtfRegister()
{
  return MEMORY[0x24BED8758]();
}

uint64_t phLibNfc_Mgt_GeneralNtfRegister()
{
  return MEMORY[0x24BED8760]();
}

uint64_t phLibNfc_Mgt_GetClrAssertRegs()
{
  return MEMORY[0x24BED8768]();
}

uint64_t phLibNfc_Mgt_GetDebugInfo()
{
  return MEMORY[0x24BED8770]();
}

uint64_t phLibNfc_Mgt_GetFwVersion()
{
  return MEMORY[0x24BED8778]();
}

uint64_t phLibNfc_Mgt_GetMwVersionStr()
{
  return MEMORY[0x24BED8780]();
}

uint64_t phLibNfc_Mgt_GetNfccParams()
{
  return MEMORY[0x24BED8788]();
}

uint64_t phLibNfc_Mgt_GetTagID()
{
  return MEMORY[0x24BED8790]();
}

uint64_t phLibNfc_Mgt_GetstackCapabilities()
{
  return MEMORY[0x24BED8798]();
}

uint64_t phLibNfc_Mgt_Initialize()
{
  return MEMORY[0x24BED87A0]();
}

uint64_t phLibNfc_Mgt_IoCtl()
{
  return MEMORY[0x24BED87A8]();
}

uint64_t phLibNfc_Mgt_SetCE_ConfigParams()
{
  return MEMORY[0x24BED87B0]();
}

uint64_t phLibNfc_Mgt_SetNfccParams()
{
  return MEMORY[0x24BED87B8]();
}

uint64_t phLibNfc_Mgt_SetRfSettings()
{
  return MEMORY[0x24BED87C0]();
}

uint64_t phLibNfc_Mgt_UnConfigureDriver()
{
  return MEMORY[0x24BED87C8]();
}

uint64_t phLibNfc_Mgt_ValidateEepromSettings()
{
  return MEMORY[0x24BED87D0]();
}

uint64_t phLibNfc_Mgt_VenResetStatus()
{
  return MEMORY[0x24BED87D8]();
}

uint64_t phLibNfc_Mgt_eSeCfgDnldMode()
{
  return MEMORY[0x24BED87E0]();
}

uint64_t phLibNfc_Mgt_eSeSvddControl()
{
  return MEMORY[0x24BED87E8]();
}

uint64_t phLibNfc_Ndef_CheckNdef()
{
  return MEMORY[0x24BED87F0]();
}

uint64_t phLibNfc_Ndef_Read()
{
  return MEMORY[0x24BED87F8]();
}

uint64_t phLibNfc_Ndef_Write()
{
  return MEMORY[0x24BED8800]();
}

uint64_t phLibNfc_RemoteDev_CheckPresence()
{
  return MEMORY[0x24BED8808]();
}

uint64_t phLibNfc_RemoteDev_Connect()
{
  return MEMORY[0x24BED8810]();
}

uint64_t phLibNfc_RemoteDev_Disconnect()
{
  return MEMORY[0x24BED8818]();
}

uint64_t phLibNfc_RemoteDev_FormatNdef()
{
  return MEMORY[0x24BED8820]();
}

uint64_t phLibNfc_RemoteDev_NtfRegister()
{
  return MEMORY[0x24BED8828]();
}

uint64_t phLibNfc_RemoteDev_NtfUnregister()
{
  return MEMORY[0x24BED8830]();
}

uint64_t phLibNfc_RemoteDev_Receive()
{
  return MEMORY[0x24BED8838]();
}

uint64_t phLibNfc_RemoteDev_Send()
{
  return MEMORY[0x24BED8840]();
}

uint64_t phLibNfc_RemoteDev_Transceive()
{
  return MEMORY[0x24BED8848]();
}

uint64_t phLibNfc_SE_GetSecureElementList()
{
  return MEMORY[0x24BED8850]();
}

uint64_t phLibNfc_SE_NtfRegister()
{
  return MEMORY[0x24BED8858]();
}

uint64_t phLibNfc_SE_NtfUnregister()
{
  return MEMORY[0x24BED8860]();
}

uint64_t phLibNfc_SE_RawTranseive()
{
  return MEMORY[0x24BED8868]();
}

uint64_t phLibNfc_SE_SetMode()
{
  return MEMORY[0x24BED8870]();
}

uint64_t phLibNfc_TriggerRfFieldOnNtf()
{
  return MEMORY[0x24BED8878]();
}

uint64_t phLibNfc_eSE_GetAtr()
{
  return MEMORY[0x24BED8880]();
}

uint64_t phLibNfc_eSE_Transceive()
{
  return MEMORY[0x24BED8888]();
}

uint64_t phOsalNfc_RaiseExceptionWithDescription()
{
  return MEMORY[0x24BED8968]();
}

uint64_t phOsalNfc_setHardwareType()
{
  return MEMORY[0x24BED89C0]();
}

uint64_t phTmlNfc_IoCtl()
{
  return MEMORY[0x24BED89F0]();
}

uint64_t postAnalyticsFlcTrimmingErrorEvent()
{
  return MEMORY[0x24BEDCDB8]();
}

uint64_t postAnalyticsHardwareExceptionEvent()
{
  return MEMORY[0x24BEDCDC0]();
}

uint64_t postAnalyticsMainSERemovedEvent()
{
  return MEMORY[0x24BEDCDC8]();
}

uint64_t postAnalyticsMiddlewareExceptionEvent()
{
  return MEMORY[0x24BEDCDD0]();
}

uint64_t postAnalyticsTxLdoErrorEvent()
{
  return MEMORY[0x24BEDCDD8]();
}

uint64_t postAnalyticsTxLdoOverCurrentErrorEvent()
{
  return MEMORY[0x24BEDCDE0]();
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7D0](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x24BDAF7D8](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x24BDAF7E0](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x24BDAF7F8](a1, a2, a3);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8C0](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x24BDAF8C8](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8D0](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x24BDAF8E0](a1);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x24BDAFAB8](__ptr, __size);
}

uint64_t resetCALoadStackExceptionCount()
{
  return MEMORY[0x24BEDCDE8]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x24BDAFE38](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFE60](a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x24BDAFF10](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x24BDAFF18](*(_QWORD *)&__errnum);
}

